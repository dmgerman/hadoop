begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Reducer that accumulates values based on their type.  *<p>  * The type is specified in the key part of the key-value pair   * as a prefix to the key in the following way  *<p>  *<tt>type:key</tt>  *<p>  * The values are accumulated according to the types:  *<ul>  *<li><tt>s:</tt> - string, concatenate</li>  *<li><tt>f:</tt> - float, summ</li>  *<li><tt>l:</tt> - long, summ</li>  *</ul>  *   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|AccumulatingReducer
specifier|public
class|class
name|AccumulatingReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|VALUE_TYPE_LONG
specifier|static
specifier|final
name|String
name|VALUE_TYPE_LONG
init|=
literal|"l:"
decl_stmt|;
DECL|field|VALUE_TYPE_FLOAT
specifier|static
specifier|final
name|String
name|VALUE_TYPE_FLOAT
init|=
literal|"f:"
decl_stmt|;
DECL|field|VALUE_TYPE_STRING
specifier|static
specifier|final
name|String
name|VALUE_TYPE_STRING
init|=
literal|"s:"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AccumulatingReducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hostName
specifier|protected
name|String
name|hostName
decl_stmt|;
DECL|method|AccumulatingReducer ()
specifier|public
name|AccumulatingReducer
parameter_list|()
block|{
try|try
block|{
name|hostName
operator|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|hostName
operator|=
literal|"localhost"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting AccumulatingReducer on "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter )
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|field
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"starting "
operator|+
name|field
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
comment|// concatenate strings
if|if
condition|(
name|field
operator|.
name|startsWith
argument_list|(
name|VALUE_TYPE_STRING
argument_list|)
condition|)
block|{
name|StringBuffer
name|sSum
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
name|sSum
operator|.
name|append
argument_list|(
name|values
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|sSum
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"finished "
operator|+
name|field
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// sum long values
if|if
condition|(
name|field
operator|.
name|startsWith
argument_list|(
name|VALUE_TYPE_FLOAT
argument_list|)
condition|)
block|{
name|float
name|fSum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
name|fSum
operator|+=
name|Float
operator|.
name|parseFloat
argument_list|(
name|values
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fSum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"finished "
operator|+
name|field
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// sum long values
if|if
condition|(
name|field
operator|.
name|startsWith
argument_list|(
name|VALUE_TYPE_LONG
argument_list|)
condition|)
block|{
name|long
name|lSum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|lSum
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|values
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|lSum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"finished "
operator|+
name|field
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

