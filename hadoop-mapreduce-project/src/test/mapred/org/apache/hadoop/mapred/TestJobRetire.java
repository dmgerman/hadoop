begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
operator|.
name|TaskTrackerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
import|;
end_import

begin_comment
comment|/**  * Test if the job retire works fine.   */
end_comment

begin_class
DECL|class|TestJobRetire
specifier|public
class|class
name|TestJobRetire
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobRetire
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testDir
specifier|static
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"job-expiry-testing"
argument_list|)
decl_stmt|;
DECL|method|startCluster (JobConf conf, int numTrackers)
specifier|private
name|MiniMRCluster
name|startCluster
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|numTrackers
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_RETIREJOBS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_RETIREJOB_CACHE_SIZE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|testJobRetire ()
specifier|public
name|void
name|testJobRetire
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|mr
operator|=
name|startCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|JobTracker
name|jobtracker
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output1"
argument_list|)
decl_stmt|;
name|JobID
name|id1
init|=
name|validateJobRetire
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|jobtracker
argument_list|)
decl_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output2"
argument_list|)
expr_stmt|;
name|JobID
name|id2
init|=
name|validateJobRetire
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|jobtracker
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Job not removed from cache"
argument_list|,
name|jobtracker
operator|.
name|getJobStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total job in cache not correct"
argument_list|,
literal|1
argument_list|,
name|jobtracker
operator|.
name|getAllJobs
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateJobRetire (JobConf jobConf, Path inDir, Path outDir, JobTracker jobtracker)
specifier|private
name|JobID
name|validateJobRetire
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|JobTracker
name|jobtracker
parameter_list|)
throws|throws
name|IOException
block|{
name|RunningJob
name|rj
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|rj
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rj
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|rj
operator|.
name|getID
argument_list|()
decl_stmt|;
comment|//wait for job to get retired
name|waitTillRetire
argument_list|(
name|id
argument_list|,
name|jobtracker
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"History url not set"
argument_list|,
name|rj
operator|.
name|getHistoryUrl
argument_list|()
operator|!=
literal|null
operator|&&
name|rj
operator|.
name|getHistoryUrl
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Job is not in cache"
argument_list|,
name|jobtracker
operator|.
name|getJobStatus
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the job conf filename
name|String
name|name
init|=
name|jobtracker
operator|.
name|getLocalJobFilePath
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"JobConf file not deleted"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// test redirections
specifier|final
name|String
name|JOBDETAILS
init|=
literal|"jobdetails"
decl_stmt|;
specifier|final
name|String
name|JOBCONF
init|=
literal|"jobconf"
decl_stmt|;
specifier|final
name|String
name|JOBTASKS
init|=
literal|"jobtasks"
decl_stmt|;
specifier|final
name|String
name|TASKSTATS
init|=
literal|"taskstats"
decl_stmt|;
specifier|final
name|String
name|TASKDETAILS
init|=
literal|"taskdetails"
decl_stmt|;
comment|// test redirections of job related pages
name|String
name|jobUrlStr
init|=
name|rj
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|URL
name|jobUrl
init|=
operator|new
name|URL
argument_list|(
name|jobUrlStr
argument_list|)
decl_stmt|;
name|URL
name|jobConfUrl
init|=
operator|new
name|URL
argument_list|(
name|jobUrlStr
operator|.
name|replace
argument_list|(
name|JOBDETAILS
argument_list|,
name|JOBCONF
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|jobTasksUrl
init|=
operator|new
name|URL
argument_list|(
name|jobUrlStr
operator|.
name|replace
argument_list|(
name|JOBDETAILS
argument_list|,
name|JOBTASKS
argument_list|)
operator|+
literal|"&type=map&pagenum=1"
argument_list|)
decl_stmt|;
name|verifyRedirection
argument_list|(
name|jobConfUrl
argument_list|)
expr_stmt|;
name|verifyRedirection
argument_list|(
name|jobTasksUrl
argument_list|)
expr_stmt|;
name|verifyRedirection
argument_list|(
name|jobUrl
argument_list|)
expr_stmt|;
comment|// test redirections of task and task attempt pages
name|String
name|jobTrackerUrlStr
init|=
name|jobUrlStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|jobUrlStr
operator|.
name|indexOf
argument_list|(
name|JOBDETAILS
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|jobtracker
operator|.
name|getJobHistory
argument_list|()
operator|.
name|getHistoryFilePath
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jobInfo
init|=
name|JSPUtil
operator|.
name|getJobInfo
argument_list|(
name|logFile
argument_list|,
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|jobConf
argument_list|)
argument_list|,
name|jobtracker
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskID
name|tid
range|:
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|URL
name|taskDetailsUrl
init|=
operator|new
name|URL
argument_list|(
name|jobTrackerUrlStr
operator|+
name|TASKDETAILS
operator|+
literal|".jsp?tipid="
operator|+
name|tid
argument_list|)
decl_stmt|;
comment|// test redirections of all tasks
name|verifyRedirection
argument_list|(
name|taskDetailsUrl
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|attemptid
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|URL
name|taskstats
init|=
operator|new
name|URL
argument_list|(
name|jobTrackerUrlStr
operator|+
name|TASKSTATS
operator|+
literal|".jsp?attemptid="
operator|+
name|attemptid
argument_list|)
decl_stmt|;
comment|// test redirections of all task attempts
name|verifyRedirection
argument_list|(
name|taskstats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
DECL|method|verifyRedirection (URL url)
specifier|private
name|void
name|verifyRedirection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying redirection of "
operator|+
name|url
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_MOVED_TEMP
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|URL
name|redirectedUrl
init|=
operator|new
name|URL
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|redirectedUrl
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
comment|// wait till the job retires
DECL|method|waitTillRetire (JobID id, JobTracker jobtracker)
specifier|private
name|void
name|waitTillRetire
parameter_list|(
name|JobID
name|id
parameter_list|,
name|JobTracker
name|jobtracker
parameter_list|)
block|{
name|JobInProgress
name|job
init|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//wait for job to get retired
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
name|job
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|job
operator|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Job did not retire"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Custom TaskTracker which waits forever after a successful contact to     * the JobTracker.    */
DECL|class|WaitingTaskTracker
class|class
name|WaitingTaskTracker
extends|extends
name|TaskTracker
block|{
DECL|field|alive
specifier|private
specifier|volatile
name|boolean
name|alive
init|=
literal|true
decl_stmt|;
DECL|method|WaitingTaskTracker (JobConf conf)
name|WaitingTaskTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transmitHeartBeat (long now)
name|HeartbeatResponse
name|transmitHeartBeat
parameter_list|(
name|long
name|now
parameter_list|)
throws|throws
name|IOException
block|{
name|HeartbeatResponse
name|response
init|=
name|super
operator|.
name|transmitHeartBeat
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WaitingTaskTracker waiting"
argument_list|)
expr_stmt|;
comment|// wait forever
while|while
condition|(
name|alive
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"WaitingTaskTracker shutdown. Bailing out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|alive
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test job retire with tasks that report their *first* status only after the    * job retires.    * Steps :    *  - Start a mini-mr cluster with 1 task-tracker having only map slots.    *    Note that this task-tracker will take care of setup/cleanup and map     *    tasks.    *  - Submit a job with 1 map task and 1 reduce task    *  - Wait for the job to finish the map task    *  - Start a 2nd tracker that waits for a long time after contacting the JT.    *  - Wait for the 2nd tracker to get stuck    *  - Kill the job    *  - Wait for the job to retire    *  - Check if the tip mappings are cleaned up.     */
DECL|method|testJobRetireWithUnreportedTasks ()
specifier|public
name|void
name|testJobRetireWithUnreportedTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mr
operator|=
name|startCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobTracker
name|jobtracker
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
comment|// submit a job
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"in-1"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"out-1"
argument_list|)
decl_stmt|;
name|JobConf
name|jConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jConf
argument_list|,
operator|new
name|Path
index|[]
block|{
name|inDir
block|}
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jConf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|JobID
name|id
init|=
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// wait 100 secs for the map to complete
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
operator|(
name|jip
operator|.
name|finishedMaps
argument_list|()
operator|<
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|jip
operator|.
name|finishedMaps
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start a tracker that will wait
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding a waiting tracker"
argument_list|)
expr_stmt|;
name|TaskTrackerRunner
name|testTrackerRunner
init|=
name|mr
operator|.
expr|new
name|TaskTrackerRunner
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
block|{         @
name|Override
name|TaskTracker
name|createTaskTracker
argument_list|(
name|JobConf
name|conf
argument_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|WaitingTaskTracker
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|mr
operator|.
name|addTaskTracker
argument_list|(
name|testTrackerRunner
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting tracker added"
argument_list|)
expr_stmt|;
name|WaitingTaskTracker
name|testTT
init|=
operator|(
name|WaitingTaskTracker
operator|)
name|testTrackerRunner
operator|.
name|getTaskTracker
argument_list|()
decl_stmt|;
comment|// wait 100 secs for the newly started task-tracker to join
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
operator|&&
operator|(
name|jobtracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|jobtracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster is now ready"
argument_list|)
expr_stmt|;
comment|// stop the test-tt as its no longer required
name|mr
operator|.
name|stopTaskTracker
argument_list|(
name|mr
operator|.
name|getTaskTrackerID
argument_list|(
name|testTT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if a reduce task got scheduled or not
name|assertEquals
argument_list|(
literal|"Waiting tracker joined but no reduce task got scheduled"
argument_list|,
literal|1
argument_list|,
name|jip
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill the job
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// check if the reduce task attempt status is missing
name|TaskInProgress
name|tip
init|=
name|jip
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertNull
argument_list|(
name|tip
operator|.
name|getTaskStatus
argument_list|(
name|tip
operator|.
name|getAllTaskAttemptIDs
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for the job to retire
name|waitTillRetire
argument_list|(
name|id
argument_list|,
name|jobtracker
argument_list|)
expr_stmt|;
comment|// check the taskidToTIPMap
for|for
control|(
name|TaskAttemptID
name|tid
range|:
name|jobtracker
operator|.
name|taskidToTIPMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TaskidToTIP mapping left over : "
operator|+
name|tid
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"'taskid' to TIP mapping still exists"
argument_list|,
literal|0
argument_list|,
name|jobtracker
operator|.
name|taskidToTIPMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * (Mock)Test JobTracker.removeJobTasks() which is called only when the job     * retires.    */
end_comment

begin_function
DECL|method|testJobRemoval ()
specifier|public
name|void
name|testJobRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|mr
operator|=
name|startCluster
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|JobTracker
name|jobtracker
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
comment|// test map task removal
name|testRemoveJobTasks
argument_list|(
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
comment|// test reduce task removal
name|testRemoveJobTasks
argument_list|(
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
comment|// test job setup removal
name|testRemoveJobTasks
argument_list|(
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
expr_stmt|;
comment|// test job cleanup removal
name|testRemoveJobTasks
argument_list|(
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// cleanup
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// create a new job and add it to the jobtracker
end_comment

begin_function
DECL|method|createAndAddJob (JobTracker jobtracker, JobConf conf)
specifier|private
name|JobInProgress
name|createAndAddJob
parameter_list|(
name|JobTracker
name|jobtracker
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
comment|// submit a job in a fake manner
comment|// get the new job-id
name|JobID
name|id
init|=
operator|new
name|JobID
argument_list|(
name|jobtracker
operator|.
name|getTrackerIdentifier
argument_list|()
argument_list|,
name|jobtracker
operator|.
name|jobs
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// create a JobInProgress for this fake job
name|JobInProgress
name|jip
init|=
operator|new
name|JobInProgress
argument_list|(
name|id
argument_list|,
name|conf
argument_list|,
name|jobtracker
argument_list|)
decl_stmt|;
comment|// insert this fake completed job in the jobtracker
name|jobtracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|jip
argument_list|)
expr_stmt|;
return|return
name|jip
return|;
block|}
end_function

begin_comment
comment|// create a new TaskInProgress and make it running by adding it to jobtracker
end_comment

begin_function
DECL|method|createAndAddTIP (JobTracker jobtracker, JobInProgress jip, TaskType type)
specifier|private
name|TaskInProgress
name|createAndAddTIP
parameter_list|(
name|JobTracker
name|jobtracker
parameter_list|,
name|JobInProgress
name|jip
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
name|JobConf
name|conf
init|=
name|jip
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|JobID
name|id
init|=
name|jip
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// now create a fake tip for this fake job
name|TaskInProgress
name|tip
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|tip
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|id
argument_list|,
literal|"dummy"
argument_list|,
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|jip
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jip
operator|.
name|maps
operator|=
operator|new
name|TaskInProgress
index|[]
block|{
name|tip
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|tip
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|id
argument_list|,
literal|"dummy"
argument_list|,
name|jip
operator|.
name|desiredMaps
argument_list|()
argument_list|,
literal|0
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|jip
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jip
operator|.
name|reduces
operator|=
operator|new
name|TaskInProgress
index|[]
block|{
name|tip
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|JOB_SETUP
condition|)
block|{
name|tip
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|id
argument_list|,
literal|"dummy"
argument_list|,
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|jip
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jip
operator|.
name|setup
operator|=
operator|new
name|TaskInProgress
index|[]
block|{
name|tip
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|JOB_CLEANUP
condition|)
block|{
name|tip
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|id
argument_list|,
literal|"dummy"
argument_list|,
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|jip
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jip
operator|.
name|cleanup
operator|=
operator|new
name|TaskInProgress
index|[]
block|{
name|tip
block|}
expr_stmt|;
block|}
return|return
name|tip
return|;
block|}
end_function

begin_comment
comment|// create a new Task for the given tip and make it running
end_comment

begin_function
DECL|method|createAndAddAttempt (TaskInProgress tip, int attemptId)
specifier|private
name|TaskAttemptID
name|createAndAddAttempt
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
comment|// create a fake attempt for this fake task
name|TaskAttemptID
name|taskid
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tip
operator|.
name|getTIPId
argument_list|()
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
comment|// insert this fake task into the jobtracker by making it running
name|tip
operator|.
name|addRunningTask
argument_list|(
name|taskid
argument_list|,
literal|"test-tt"
argument_list|)
expr_stmt|;
return|return
name|taskid
return|;
block|}
end_function

begin_comment
comment|// Mock a job run such that the jobtracker is in a state similar to that
end_comment

begin_comment
comment|// resulting from an actual job run.
end_comment

begin_comment
comment|// Steps :
end_comment

begin_comment
comment|//   - generate a new job-id
end_comment

begin_comment
comment|//   - create and add a JobInProgress object using the fake job-id
end_comment

begin_comment
comment|//   - create and add a fake tip of the passed type 't' under the fake job
end_comment

begin_comment
comment|//     Note that t can be a MAP or a REDUCE or a JOB_SETUP or a JOB_CLEANUP.
end_comment

begin_comment
comment|//   - create and add a fake attempt under the fake tip
end_comment

begin_comment
comment|//   - remove the job from the jobtracker
end_comment

begin_comment
comment|//   - check if the fake attempt is removed from the jobtracker
end_comment

begin_function
DECL|method|testRemoveJobTasks (JobTracker jobtracker, JobConf conf, TaskType type)
specifier|private
name|void
name|testRemoveJobTasks
parameter_list|(
name|JobTracker
name|jobtracker
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
comment|// create and submit a job
name|JobInProgress
name|jip
init|=
name|createAndAddJob
argument_list|(
name|jobtracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// create and add a tip
name|TaskInProgress
name|tip
init|=
name|createAndAddTIP
argument_list|(
name|jobtracker
argument_list|,
name|jip
argument_list|,
name|type
argument_list|)
decl_stmt|;
comment|// create and add an attempt
name|TaskAttemptID
name|taskid
init|=
name|createAndAddAttempt
argument_list|(
name|tip
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// this fake attempt should not have any status
name|assertNull
argument_list|(
name|tip
operator|.
name|getTaskStatus
argument_list|(
name|taskid
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the job tasks for this fake job from the jobtracker
name|jobtracker
operator|.
name|removeJobTasks
argument_list|(
name|jip
argument_list|)
expr_stmt|;
comment|// check the taskidToTIPMap
for|for
control|(
name|TaskAttemptID
name|tid
range|:
name|jobtracker
operator|.
name|taskidToTIPMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TaskidToTIP : "
operator|+
name|tid
argument_list|)
expr_stmt|;
block|}
comment|// check if the fake attempt is removed from the jobtracker
name|assertEquals
argument_list|(
literal|"'taskid' to TIP mapping still exists"
argument_list|,
literal|0
argument_list|,
name|jobtracker
operator|.
name|taskidToTIPMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

