begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTaskOutputSize
specifier|public
class|class
name|TestTaskOutputSize
block|{
DECL|field|rootDir
specifier|private
specifier|static
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|rootDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskOutputSize ()
specifier|public
name|void
name|testTaskOutputSize
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|tce
range|:
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
control|)
block|{
name|TaskStatus
name|ts
init|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tce
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"map output size is not found for "
operator|+
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
name|ts
operator|.
name|getOutputSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"task output size not expected for "
operator|+
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|ts
operator|.
name|getOutputSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test output sizes for job with no reduces
name|job
operator|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|tce
range|:
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
control|)
block|{
name|TaskStatus
name|ts
init|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"task output size not expected for "
operator|+
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|ts
operator|.
name|getOutputSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test output sizes for failed job
name|job
operator|=
name|MapReduceTestUtil
operator|.
name|createFailJob
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|outDir
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Job not failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|tce
range|:
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
control|)
block|{
name|TaskStatus
name|ts
init|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"task output size not expected for "
operator|+
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|ts
operator|.
name|getOutputSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

