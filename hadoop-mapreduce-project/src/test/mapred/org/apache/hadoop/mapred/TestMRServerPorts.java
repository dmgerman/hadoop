begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestHDFSServerPorts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_comment
comment|/**  * This test checks correctness of port usage by mapreduce components:  * JobTracker, and TaskTracker.  *   * The correct behavior is:<br>   * - when a specific port is provided the server must either start on that port   * or fail by throwing {@link java.net.BindException}.<br>  * - if the port = 0 (ephemeral) then the server should choose   * a free port and start on it.  */
end_comment

begin_class
DECL|class|TestMRServerPorts
specifier|public
class|class
name|TestMRServerPorts
extends|extends
name|TestCase
block|{
DECL|field|THIS_HOST
specifier|static
specifier|final
name|String
name|THIS_HOST
init|=
name|TestHDFSServerPorts
operator|.
name|getFullHostName
argument_list|()
operator|+
literal|":0"
decl_stmt|;
DECL|field|hdfs
name|TestHDFSServerPorts
name|hdfs
init|=
operator|new
name|TestHDFSServerPorts
argument_list|()
decl_stmt|;
comment|// Runs the JT in a separate thread
DECL|class|JTRunner
specifier|private
specifier|static
class|class
name|JTRunner
extends|extends
name|Thread
block|{
DECL|field|jt
name|JobTracker
name|jt
decl_stmt|;
DECL|method|setJobTracker (JobTracker jt)
name|void
name|setJobTracker
parameter_list|(
name|JobTracker
name|jt
parameter_list|)
block|{
name|this
operator|.
name|jt
operator|=
name|jt
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|jt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|jt
operator|.
name|offerService
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**    * Check whether the JobTracker can be started.    */
DECL|method|startJobTracker (JobConf conf, JTRunner runner)
specifier|private
name|JobTracker
name|startJobTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JTRunner
name|runner
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|JobTracker
name|jt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jt
operator|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runner
operator|.
name|setJobTracker
argument_list|(
name|jt
argument_list|)
expr_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:"
operator|+
name|jt
operator|.
name|getTrackerPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:"
operator|+
name|jt
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|jt
return|;
block|}
DECL|method|setDataNodePorts (Configuration conf)
specifier|private
name|void
name|setDataNodePorts
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.http.address"
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.ipc.address"
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether the JobTracker can be started.    */
DECL|method|canStartJobTracker (JobConf conf)
specifier|private
name|boolean
name|canStartJobTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|LoginException
block|{
name|JobTracker
name|jt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jt
operator|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|java
operator|.
name|net
operator|.
name|BindException
condition|)
return|return
literal|false
return|;
throw|throw
name|e
throw|;
block|}
name|jt
operator|.
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|jt
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check whether the TaskTracker can be started.    */
DECL|method|canStartTaskTracker (JobConf conf)
specifier|private
name|boolean
name|canStartTaskTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TaskTracker
name|tt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tt
operator|=
operator|new
name|TaskTracker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|java
operator|.
name|net
operator|.
name|BindException
condition|)
return|return
literal|false
return|;
throw|throw
name|e
throw|;
block|}
name|tt
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Verify JobTracker port usage.    */
DECL|method|testJobTrackerPorts ()
specifier|public
name|void
name|testJobTrackerPorts
parameter_list|()
throws|throws
name|Exception
block|{
name|NameNode
name|nn
init|=
literal|null
decl_stmt|;
name|DataNode
name|dn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nn
operator|=
name|hdfs
operator|.
name|startNameNode
argument_list|()
expr_stmt|;
name|setDataNodePorts
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|dn
operator|=
name|hdfs
operator|.
name|startDataNode
argument_list|(
literal|1
argument_list|,
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// start job tracker on the same port as name-node
name|JobConf
name|conf2
init|=
operator|new
name|JobConf
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
name|canStartJobTracker
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should fail
comment|// bind http server to the same port as name-node
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
name|hdfs
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"dfs.http.address"
argument_list|)
argument_list|)
expr_stmt|;
name|started
operator|=
name|canStartJobTracker
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should fail again
comment|// both ports are different from the name-node ones
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|started
operator|=
name|canStartJobTracker
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should start now
block|}
finally|finally
block|{
name|hdfs
operator|.
name|stopDataNode
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|stopNameNode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify JobTracker port usage.    */
DECL|method|testTaskTrackerPorts ()
specifier|public
name|void
name|testTaskTrackerPorts
parameter_list|()
throws|throws
name|Exception
block|{
name|NameNode
name|nn
init|=
literal|null
decl_stmt|;
name|DataNode
name|dn
init|=
literal|null
decl_stmt|;
name|JobTracker
name|jt
init|=
literal|null
decl_stmt|;
name|JTRunner
name|runner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nn
operator|=
name|hdfs
operator|.
name|startNameNode
argument_list|()
expr_stmt|;
name|setDataNodePorts
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|dn
operator|=
name|hdfs
operator|.
name|startDataNode
argument_list|(
literal|2
argument_list|,
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|conf2
init|=
operator|new
name|JobConf
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|runner
operator|=
operator|new
name|JTRunner
argument_list|()
expr_stmt|;
name|jt
operator|=
name|startJobTracker
argument_list|(
name|conf2
argument_list|,
name|runner
argument_list|)
expr_stmt|;
comment|// start job tracker on the same port as name-node
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REPORT_ADDRESS
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|hdfs
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HTTP_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
name|canStartTaskTracker
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should fail
comment|// bind http server to the same port as name-node
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REPORT_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HTTP_ADDRESS
argument_list|,
name|hdfs
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"dfs.http.address"
argument_list|)
argument_list|)
expr_stmt|;
name|started
operator|=
name|canStartTaskTracker
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should fail again
comment|// both ports are different from the name-node ones
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REPORT_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HTTP_ADDRESS
argument_list|,
name|THIS_HOST
argument_list|)
expr_stmt|;
name|started
operator|=
name|canStartTaskTracker
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|started
argument_list|)
expr_stmt|;
comment|// should start now
block|}
finally|finally
block|{
if|if
condition|(
name|jt
operator|!=
literal|null
condition|)
block|{
name|jt
operator|.
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|jt
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
name|runner
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|runner
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|hdfs
operator|.
name|stopDataNode
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|stopNameNode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

