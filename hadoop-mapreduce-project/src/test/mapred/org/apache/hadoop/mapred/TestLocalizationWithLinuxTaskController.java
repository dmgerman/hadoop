begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterWithLinuxTaskController
operator|.
name|MyLinuxTaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Test to verify localization of a job and localization of a task on a  * TaskTracker when {@link LinuxTaskController} is used.  *   */
end_comment

begin_class
DECL|class|TestLocalizationWithLinuxTaskController
specifier|public
class|class
name|TestLocalizationWithLinuxTaskController
extends|extends
name|TestTaskTrackerLocalization
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLocalizationWithLinuxTaskController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configFile
specifier|private
name|File
name|configFile
decl_stmt|;
DECL|field|taskTrackerUserName
specifier|private
specifier|static
name|String
name|taskTrackerUserName
decl_stmt|;
annotation|@
name|Override
DECL|method|canRun ()
specifier|protected
name|boolean
name|canRun
parameter_list|()
block|{
return|return
name|ClusterWithLinuxTaskController
operator|.
name|shouldRun
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|taskTrackerUserName
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
name|configFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createTaskController ()
specifier|protected
name|TaskController
name|createTaskController
parameter_list|()
block|{
return|return
operator|new
name|MyLinuxTaskController
argument_list|()
return|;
block|}
DECL|method|getJobOwner ()
specifier|protected
name|UserGroupInformation
name|getJobOwner
parameter_list|()
block|{
name|String
name|ugi
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_UGI
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|ugi
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|splits
index|[
literal|1
index|]
block|}
argument_list|)
return|;
block|}
comment|/** @InheritDoc */
annotation|@
name|Override
DECL|method|testTaskControllerSetup ()
specifier|public
name|void
name|testTaskControllerSetup
parameter_list|()
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
DECL|method|checkUserLocalization ()
specifier|protected
name|void
name|checkUserLocalization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check the directory structure and permissions
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
name|localDir
operator|+
literal|" isn'task created!"
argument_list|,
name|localDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|taskTrackerSubDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|SUBDIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"taskTracker sub-dir in the local-dir "
operator|+
name|localDir
operator|+
literal|"is not created!"
argument_list|,
name|taskTrackerSubDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// user-dir, jobcache and distcache will have
comment|//     2770 permissions if jobOwner is same as tt_user
comment|//     2570 permissions for any other user
name|String
name|expectedDirPerms
init|=
name|taskTrackerUserName
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
condition|?
literal|"drwxrws---"
else|:
literal|"dr-xrws---"
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|taskTrackerSubDir
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"user-dir in taskTrackerSubdir "
operator|+
name|taskTrackerSubDir
operator|+
literal|"is not created!"
argument_list|,
name|userDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|userDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
name|File
name|jobCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|TaskTracker
operator|.
name|JOBCACHE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"jobcache in the userDir "
operator|+
name|userDir
operator|+
literal|" isn't created!"
argument_list|,
name|jobCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|jobCache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// Verify the distributed cache dir.
name|File
name|distributedCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"distributed cache dir "
operator|+
name|distributedCacheDir
operator|+
literal|" doesn't exists!"
argument_list|,
name|distributedCacheDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|distributedCacheDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkJobLocalization ()
specifier|protected
name|void
name|checkJobLocalization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// job-dir, jars-dir and subdirectories in them will have
comment|//     2770 permissions if jobOwner is same as tt_user
comment|//     2570 permissions for any other user
comment|// Files under these dirs will have
comment|//      770 permissions if jobOwner is same as tt_user
comment|//      570 permissions for any other user
name|String
name|expectedDirPerms
init|=
name|taskTrackerUserName
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
condition|?
literal|"drwxrws---"
else|:
literal|"dr-xrws---"
decl_stmt|;
name|String
name|expectedFilePerms
init|=
name|taskTrackerUserName
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
condition|?
literal|"-rwxrwx---"
else|:
literal|"-r-xrwx---"
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|trackerFConf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
control|)
block|{
name|File
name|jobDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getLocalJobDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// check the private permissions on the job directory
name|checkFilePermissions
argument_list|(
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
comment|// check the private permissions of various directories
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|jarsDir
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getJobJarsDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|jarsDir
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|jarsDir
argument_list|,
literal|"lib"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|checkFilePermissions
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
comment|// job-work dir needs user writable permissions i.e. 2770 for any user
name|Path
name|jobWorkDir
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getJobWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
decl_stmt|;
name|checkFilePermissions
argument_list|(
name|jobWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"drwxrws---"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// check the private permissions of various files
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getLocalJobConfFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getJobJarFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|jarsDir
argument_list|,
literal|"lib"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"lib1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|jarsDir
argument_list|,
literal|"lib"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"lib2.jar"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|checkFilePermissions
argument_list|(
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|expectedFilePerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
comment|// check job user-log directory permissions
name|File
name|jobLogDir
init|=
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|checkFilePermissions
argument_list|(
name|jobLogDir
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDirPerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// check job-acls.xml file permissions
name|checkFilePermissions
argument_list|(
name|jobLogDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskTracker
operator|.
name|jobACLsFile
argument_list|,
name|expectedFilePerms
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// validate the content of job ACLs file
name|validateJobACLsFileContent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkTaskLocalization ()
specifier|protected
name|void
name|checkTaskLocalization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check the private permissions of various directories
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|attemptWorkDir
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptWorkDir
argument_list|,
literal|"tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptLogFiles
index|[
literal|1
index|]
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|checkFilePermissions
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"drwxrws---"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
comment|// check the private permissions of various files
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getTaskConfFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|checkFilePermissions
argument_list|(
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"-rwxrwx---"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

