begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestLinuxTaskController
specifier|public
class|class
name|TestLinuxTaskController
extends|extends
name|TestCase
block|{
DECL|field|INVALID_TASKCONTROLLER_PERMISSIONS
specifier|private
specifier|static
name|int
name|INVALID_TASKCONTROLLER_PERMISSIONS
init|=
literal|24
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestLinuxTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|taskControllerPath
specifier|private
specifier|static
name|String
name|taskControllerPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_PATH
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
DECL|class|MyLinuxTaskController
specifier|public
specifier|static
class|class
name|MyLinuxTaskController
extends|extends
name|LinuxTaskController
block|{
DECL|field|taskControllerExePath
name|String
name|taskControllerExePath
init|=
name|taskControllerPath
operator|+
literal|"/task-controller"
decl_stmt|;
annotation|@
name|Override
DECL|method|getTaskControllerExecutablePath ()
specifier|protected
name|String
name|getTaskControllerExecutablePath
parameter_list|()
block|{
return|return
name|taskControllerExePath
return|;
block|}
block|}
DECL|method|validateTaskControllerSetup (TaskController controller, boolean shouldFail)
specifier|private
name|void
name|validateTaskControllerSetup
parameter_list|(
name|TaskController
name|controller
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldFail
condition|)
block|{
comment|// task controller setup should fail validating permissions.
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|controller
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No exception during setup"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exception message does not contain exit code"
operator|+
name|INVALID_TASKCONTROLLER_PERMISSIONS
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"with exit code "
operator|+
name|INVALID_TASKCONTROLLER_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controller
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskControllerGroup ()
specifier|public
name|void
name|testTaskControllerGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|ClusterWithLinuxTaskController
operator|.
name|isTaskExecPathPassed
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// cleanup configuration file.
name|ClusterWithLinuxTaskController
operator|.
name|getTaskControllerConfFile
argument_list|(
name|taskControllerPath
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// create local dirs and set in the conf.
name|File
name|mapredLocal
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"mapred/local"
argument_list|)
decl_stmt|;
name|mapredLocal
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|mapredLocal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup task-controller without setting any group name
name|TaskController
name|controller
init|=
operator|new
name|MyLinuxTaskController
argument_list|()
decl_stmt|;
name|controller
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|validateTaskControllerSetup
argument_list|(
name|controller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set an invalid group name for the task controller group
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_GROUP
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
comment|// write the task-controller's conf file
name|ClusterWithLinuxTaskController
operator|.
name|createTaskControllerConf
argument_list|(
name|taskControllerPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateTaskControllerSetup
argument_list|(
name|controller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_GROUP
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// write the task-controller's conf file
name|ClusterWithLinuxTaskController
operator|.
name|createTaskControllerConf
argument_list|(
name|taskControllerPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateTaskControllerSetup
argument_list|(
name|controller
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

