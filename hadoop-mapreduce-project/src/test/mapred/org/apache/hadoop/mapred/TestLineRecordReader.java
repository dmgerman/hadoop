begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLineRecordReader
specifier|public
class|class
name|TestLineRecordReader
extends|extends
name|TestCase
block|{
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"TestTextInputFormat"
argument_list|)
decl_stmt|;
DECL|field|inputDir
specifier|private
specifier|static
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
DECL|field|outputDir
specifier|private
specifier|static
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
comment|/**    * Writes the input test file    *     * @param conf    * @throws IOException    */
DECL|method|createInputFile (Configuration conf)
specifier|public
name|void
name|createInputFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"test.txt"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"abc\ndef\t\nghi\njkl"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reads the output file into a string    *     * @param conf    * @return    * @throws IOException    */
DECL|method|readOutputFile (Configuration conf)
specifier|public
name|String
name|readOutputFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
literal|"part-00000"
argument_list|)
decl_stmt|;
return|return
name|UtilsForTests
operator|.
name|slurpHadoop
argument_list|(
name|file
argument_list|,
name|localFs
argument_list|)
return|;
block|}
comment|/**    * Creates and runs an MR job    *     * @param conf    * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
DECL|method|createAndRunJob (Configuration conf)
specifier|public
name|void
name|createAndRunJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TestLineRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case when a custom record delimiter is specified using the    * textinputformat.record.delimiter configuration property    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
annotation|@
name|Test
DECL|method|testCustomRecordDelimiters ()
specifier|public
name|void
name|testCustomRecordDelimiters
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"textinputformat.record.delimiter"
argument_list|,
literal|"\t\n"
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// cleanup
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// creating input test file
name|createInputFile
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createAndRunJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"0\tabc\ndef\n9\tghi\njkl\n"
decl_stmt|;
name|this
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|readOutputFile
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the default behavior when the textinputformat.record.delimiter    * configuration property is not specified    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
annotation|@
name|Test
DECL|method|testDefaultRecordDelimiters ()
specifier|public
name|void
name|testDefaultRecordDelimiters
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// cleanup
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// creating input test file
name|createInputFile
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createAndRunJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"0\tabc\n4\tdef\t\n9\tghi\n13\tjkl\n"
decl_stmt|;
name|this
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|readOutputFile
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

