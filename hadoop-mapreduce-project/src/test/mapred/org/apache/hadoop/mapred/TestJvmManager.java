begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JvmManager
operator|.
name|JvmManagerForType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JvmManager
operator|.
name|JvmManagerForType
operator|.
name|JvmRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJvmManager
specifier|public
class|class
name|TestJvmManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJvmManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestJvmManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|MAP_SLOTS
specifier|private
specifier|static
name|int
name|MAP_SLOTS
init|=
literal|10
decl_stmt|;
DECL|field|REDUCE_SLOTS
specifier|private
specifier|static
name|int
name|REDUCE_SLOTS
init|=
literal|10
decl_stmt|;
DECL|field|tt
specifier|private
name|TaskTracker
name|tt
decl_stmt|;
DECL|field|jvmManager
specifier|private
name|JvmManager
name|jvmManager
decl_stmt|;
DECL|field|ttConf
specifier|private
name|JobConf
name|ttConf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|TestJvmManager ()
specifier|public
name|TestJvmManager
parameter_list|()
throws|throws
name|Exception
block|{
name|tt
operator|=
operator|new
name|TaskTracker
argument_list|()
expr_stmt|;
name|ttConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|ttConf
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_SLEEP_TIME_BEFORE_SIG_KILL
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setConf
argument_list|(
name|ttConf
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setMaxMapSlots
argument_list|(
name|MAP_SLOTS
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setMaxReduceSlots
argument_list|(
name|REDUCE_SLOTS
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setTaskController
argument_list|(
operator|new
name|DefaultTaskController
argument_list|()
argument_list|)
expr_stmt|;
name|jvmManager
operator|=
operator|new
name|JvmManager
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setJvmManagerInstance
argument_list|(
name|jvmManager
argument_list|)
expr_stmt|;
block|}
comment|// write a shell script to execute the command.
DECL|method|writeScript (String fileName, String cmd, File pidFile)
specifier|private
name|File
name|writeScript
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|cmd
parameter_list|,
name|File
name|pidFile
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|script
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|script
argument_list|)
decl_stmt|;
comment|// write pid into a file
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"echo $$>"
operator|+
name|pidFile
operator|.
name|toString
argument_list|()
operator|+
literal|";"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore SIGTERM
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"trap '' 15\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the actual command it self.
name|out
operator|.
name|write
argument_list|(
name|cmd
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|script
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|script
return|;
block|}
comment|/**    * Tests the jvm kill from JvmRunner and JvmManager simultaneously.    *     * Starts a process, which sleeps for 60 seconds, in a thread.    * Calls JvmRunner.kill() in a thread.    * Also calls JvmManager.taskKilled().    * Makes sure that the jvm is killed and JvmManager could launch another task    * properly.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testJvmKill ()
specifier|public
name|void
name|testJvmKill
parameter_list|()
throws|throws
name|Exception
block|{
name|JvmManagerForType
name|mapJvmManager
init|=
name|jvmManager
operator|.
name|getJvmManagerForType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
comment|// launch a jvm
name|JobConf
name|taskConf
init|=
operator|new
name|JobConf
argument_list|(
name|ttConf
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|attemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|MapTask
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|attemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|taskConf
argument_list|)
expr_stmt|;
name|TaskInProgress
name|tip
init|=
name|tt
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
name|File
name|pidFile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"pid"
argument_list|)
decl_stmt|;
specifier|final
name|TaskRunner
name|taskRunner
init|=
operator|new
name|MapTaskRunner
argument_list|(
name|tip
argument_list|,
name|tt
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
comment|// launch a jvm which sleeps for 60 seconds
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|writeScript
argument_list|(
literal|"SLEEP"
argument_list|,
literal|"sleep 60\n"
argument_list|,
name|pidFile
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"work"
argument_list|)
decl_stmt|;
name|workDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
specifier|final
name|File
name|stdout
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stdout"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|stderr
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stderr"
argument_list|)
decl_stmt|;
comment|// launch the process and wait in a thread, till it finishes
name|Thread
name|launcher
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|taskRunner
operator|.
name|launchJvmAndWait
argument_list|(
literal|null
argument_list|,
name|vargs
argument_list|,
name|stdout
argument_list|,
name|stderr
argument_list|,
literal|100
argument_list|,
name|workDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
decl_stmt|;
name|launcher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait till the jvm is launched
comment|// this loop waits for at most 1 second
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pidFile
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// assert that the process is launched
name|assertTrue
argument_list|(
literal|"pidFile is not present"
argument_list|,
name|pidFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// imitate Child code.
comment|// set pid in jvmManager
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|pidFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pid
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|JVMId
name|jvmid
init|=
name|mapJvmManager
operator|.
name|runningTaskToJvm
operator|.
name|get
argument_list|(
name|taskRunner
argument_list|)
decl_stmt|;
name|jvmManager
operator|.
name|setPidToJvm
argument_list|(
name|jvmid
argument_list|,
name|pid
argument_list|)
expr_stmt|;
comment|// kill JvmRunner
specifier|final
name|JvmRunner
name|jvmRunner
init|=
name|mapJvmManager
operator|.
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmid
argument_list|)
decl_stmt|;
name|Thread
name|killer
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|jvmRunner
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|killer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//wait for a while so that killer thread is started.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// kill the jvm externally
name|taskRunner
operator|.
name|kill
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|jvmRunner
operator|.
name|killed
argument_list|)
expr_stmt|;
comment|// launch another jvm and see it finishes properly
name|attemptID
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|task
operator|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|attemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|taskConf
argument_list|)
expr_stmt|;
name|tip
operator|=
name|tt
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|taskConf
argument_list|)
expr_stmt|;
name|TaskRunner
name|taskRunner2
init|=
operator|new
name|MapTaskRunner
argument_list|(
name|tip
argument_list|,
name|tt
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
comment|// build dummy vargs to call ls
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs2
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|vargs2
operator|.
name|add
argument_list|(
name|writeScript
argument_list|(
literal|"LS"
argument_list|,
literal|"ls"
argument_list|,
name|pidFile
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|workDir2
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"work2"
argument_list|)
decl_stmt|;
name|workDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|stdout2
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stdout2"
argument_list|)
decl_stmt|;
name|File
name|stderr2
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stderr2"
argument_list|)
decl_stmt|;
name|taskRunner2
operator|.
name|launchJvmAndWait
argument_list|(
literal|null
argument_list|,
name|vargs2
argument_list|,
name|stdout2
argument_list|,
name|stderr2
argument_list|,
literal|100
argument_list|,
name|workDir2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// join all the threads
name|killer
operator|.
name|join
argument_list|()
expr_stmt|;
name|jvmRunner
operator|.
name|join
argument_list|()
expr_stmt|;
name|launcher
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a bunch of tasks and use a special hash map to detect    * racy access to the various internal data structures of JvmManager.    * (Regression test for MAPREDUCE-2224)    */
annotation|@
name|Test
DECL|method|testForRaces ()
specifier|public
name|void
name|testForRaces
parameter_list|()
throws|throws
name|Exception
block|{
name|JvmManagerForType
name|mapJvmManager
init|=
name|jvmManager
operator|.
name|getJvmManagerForType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
comment|// Sub out the HashMaps for maps that will detect racy access.
name|mapJvmManager
operator|.
name|jvmToRunningTask
operator|=
operator|new
name|RaceHashMap
argument_list|<
name|JVMId
argument_list|,
name|TaskRunner
argument_list|>
argument_list|()
expr_stmt|;
name|mapJvmManager
operator|.
name|runningTaskToJvm
operator|=
operator|new
name|RaceHashMap
argument_list|<
name|TaskRunner
argument_list|,
name|JVMId
argument_list|>
argument_list|()
expr_stmt|;
name|mapJvmManager
operator|.
name|jvmIdToRunner
operator|=
operator|new
name|RaceHashMap
argument_list|<
name|JVMId
argument_list|,
name|JvmRunner
argument_list|>
argument_list|()
expr_stmt|;
comment|// Launch a bunch of JVMs, but only allow MAP_SLOTS to run at once.
specifier|final
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|MAP_SLOTS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failed
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAP_SLOTS
operator|*
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|JobConf
name|taskConf
init|=
operator|new
name|JobConf
argument_list|(
name|ttConf
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|attemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|attemptID
argument_list|,
name|i
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|taskConf
argument_list|)
expr_stmt|;
name|TaskInProgress
name|tip
init|=
name|tt
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
name|File
name|pidFile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"pid_"
operator|+
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TaskRunner
name|taskRunner
init|=
operator|new
name|MapTaskRunner
argument_list|(
name|tip
argument_list|,
name|tt
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
comment|// launch a jvm which sleeps for 60 seconds
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|writeScript
argument_list|(
literal|"script_"
operator|+
name|i
argument_list|,
literal|"echo hi\n"
argument_list|,
name|pidFile
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"work_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|workDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
specifier|final
name|File
name|stdout
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stdout_"
operator|+
name|i
argument_list|)
decl_stmt|;
specifier|final
name|File
name|stderr
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"stderr_"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// launch the process and wait in a thread, till it finishes
name|Runnable
name|launcher
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|taskRunner
operator|.
name|launchJvmAndWait
argument_list|(
literal|null
argument_list|,
name|vargs
argument_list|,
name|stdout
argument_list|,
name|stderr
argument_list|,
literal|100
argument_list|,
name|workDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|exec
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
decl_stmt|;
name|exec
operator|.
name|submit
argument_list|(
name|launcher
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
if|if
condition|(
name|failed
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * HashMap which detects racy usage by sleeping during operations    * and checking that no other threads access the map while asleep.    */
DECL|class|RaceHashMap
specifier|static
class|class
name|RaceHashMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|syncData
name|Object
name|syncData
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|userStack
name|RuntimeException
name|userStack
init|=
literal|null
decl_stmt|;
DECL|field|raced
name|boolean
name|raced
init|=
literal|false
decl_stmt|;
DECL|method|checkInUse ()
specifier|private
name|void
name|checkInUse
parameter_list|()
block|{
synchronized|synchronized
init|(
name|syncData
init|)
block|{
name|RuntimeException
name|thisStack
init|=
operator|new
name|RuntimeException
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userStack
operator|!=
literal|null
operator|&&
name|raced
operator|==
literal|false
condition|)
block|{
name|RuntimeException
name|other
init|=
name|userStack
decl_stmt|;
name|raced
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Race between two threads."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"First"
argument_list|,
name|thisStack
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Second"
argument_list|,
name|other
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Raced"
argument_list|)
throw|;
block|}
else|else
block|{
name|userStack
operator|=
name|thisStack
expr_stmt|;
block|}
block|}
block|}
DECL|method|sleepABit ()
specifier|private
name|void
name|sleepABit
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|done ()
specifier|private
name|void
name|done
parameter_list|()
block|{
synchronized|synchronized
init|(
name|syncData
init|)
block|{
name|userStack
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkInUse
argument_list|()
expr_stmt|;
try|try
block|{
name|sleepABit
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|done
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkInUse
argument_list|()
expr_stmt|;
try|try
block|{
name|sleepABit
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|done
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (K key, V val)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|val
parameter_list|)
block|{
name|checkInUse
argument_list|()
expr_stmt|;
try|try
block|{
name|sleepABit
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
finally|finally
block|{
name|done
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

