begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|Localizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|MRAsyncDiskService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestUserLogCleanup
specifier|public
class|class
name|TestUserLogCleanup
block|{
DECL|field|jtid
specifier|private
specifier|static
name|String
name|jtid
init|=
literal|"test"
decl_stmt|;
DECL|field|ONE_HOUR
specifier|private
specifier|static
name|long
name|ONE_HOUR
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|localizer
specifier|private
name|Localizer
name|localizer
decl_stmt|;
DECL|field|taskLogCleanupThread
specifier|private
name|UserLogCleaner
name|taskLogCleanupThread
decl_stmt|;
DECL|field|tt
specifier|private
name|TaskTracker
name|tt
decl_stmt|;
DECL|field|myClock
specifier|private
name|FakeClock
name|myClock
init|=
operator|new
name|FakeClock
argument_list|()
decl_stmt|;
DECL|field|jobid1
specifier|private
name|JobID
name|jobid1
init|=
operator|new
name|JobID
argument_list|(
name|jtid
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|jobid2
specifier|private
name|JobID
name|jobid2
init|=
operator|new
name|JobID
argument_list|(
name|jtid
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|jobid3
specifier|private
name|JobID
name|jobid3
init|=
operator|new
name|JobID
argument_list|(
name|jtid
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|jobid4
specifier|private
name|JobID
name|jobid4
init|=
operator|new
name|JobID
argument_list|(
name|jtid
argument_list|,
literal|4
argument_list|)
decl_stmt|;
DECL|field|foo
specifier|private
name|File
name|foo
init|=
operator|new
name|File
argument_list|(
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
DECL|field|bar
specifier|private
name|File
name|bar
init|=
operator|new
name|File
argument_list|(
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
DECL|method|TestUserLogCleanup ()
specifier|public
name|TestUserLogCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|localizer
operator|=
operator|new
name|Localizer
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
argument_list|,
operator|new
name|DefaultTaskController
argument_list|()
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|=
operator|new
name|UserLogCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|.
name|setClock
argument_list|(
name|myClock
argument_list|)
expr_stmt|;
name|tt
operator|=
operator|new
name|TaskTracker
argument_list|()
expr_stmt|;
name|tt
operator|.
name|setConf
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setLocalizer
argument_list|(
name|localizer
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setTaskLogCleanupThread
argument_list|(
name|taskLogCleanupThread
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|localizeJob (JobID jobid)
specifier|private
name|File
name|localizeJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|jobUserlog
init|=
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// localize job log directory
name|tt
operator|.
name|initializeJobLogDir
argument_list|(
name|jobid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog
operator|+
literal|" directory is not created."
argument_list|,
name|jobUserlog
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobUserlog
return|;
block|}
DECL|method|jobFinished (JobID jobid, int logRetainHours)
specifier|private
name|void
name|jobFinished
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|int
name|logRetainHours
parameter_list|)
block|{
name|Configuration
name|jobconf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|jobconf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|USER_LOG_RETAIN_HOURS
argument_list|,
name|logRetainHours
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|.
name|markJobLogsForDeletion
argument_list|(
name|myClock
operator|.
name|getTime
argument_list|()
argument_list|,
name|jobconf
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests job user-log directory deletion.    *     * Adds two jobs for log deletion. One with one hour retain hours, other with    * two retain hours. After an hour,    * TaskLogCleanupThread.processCompletedJobs() call,    * makes sure job with 1hr retain hours is removed and other is retained.    * After one more hour, job with 2hr retain hours is also removed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testJobLogCleanup ()
specifier|public
name|void
name|testJobLogCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jobUserlog1
init|=
name|localizeJob
argument_list|(
name|jobid1
argument_list|)
decl_stmt|;
name|File
name|jobUserlog2
init|=
name|localizeJob
argument_list|(
name|jobid2
argument_list|)
decl_stmt|;
comment|// add job user log directory for deletion, with 2 hours for deletion
name|jobFinished
argument_list|(
name|jobid1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// add the job for deletion with one hour as retain hours
name|jobFinished
argument_list|(
name|jobid2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// remove old logs and see jobid1 is not removed and jobid2 is removed
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog1
operator|+
literal|" got deleted"
argument_list|,
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog2
operator|+
literal|" still exists."
argument_list|,
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// remove old logs and see jobid1 is removed now
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog1
operator|+
literal|" still exists."
argument_list|,
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests user-log directory cleanup on a TT re-init with 3 hours as log    * retain hours for tracker.     *     * Adds job1 deletion before the re-init with 2 hour retain hours.     * Adds job2 for which there are no tasks/killJobAction after the re-init.    * Adds job3 for which there is localizeJob followed by killJobAction     * with 3 hours as retain hours.    * Adds job4 for which there are some tasks after the re-init.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testUserLogCleanup ()
specifier|public
name|void
name|testUserLogCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jobUserlog1
init|=
name|localizeJob
argument_list|(
name|jobid1
argument_list|)
decl_stmt|;
name|File
name|jobUserlog2
init|=
name|localizeJob
argument_list|(
name|jobid2
argument_list|)
decl_stmt|;
name|File
name|jobUserlog3
init|=
name|localizeJob
argument_list|(
name|jobid3
argument_list|)
decl_stmt|;
name|File
name|jobUserlog4
init|=
name|localizeJob
argument_list|(
name|jobid4
argument_list|)
decl_stmt|;
comment|// create a some files/dirs in userlog
name|foo
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|bar
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
comment|// add the jobid1 for deletion with retainhours = 2
name|jobFinished
argument_list|(
name|jobid1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// time is now 1.
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// mimic TaskTracker reinit
comment|// clear userlog directory
comment|// job directories will be added with 3 hours as retain hours. They will be
comment|// deleted at time 4.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|USER_LOG_RETAIN_HOURS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|.
name|clearOldUserLogs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bar
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
argument_list|,
name|MRAsyncDiskService
operator|.
name|TOBEDELETED
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 2.
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// mimic localizeJob followed KillJobAction for jobid3
comment|// add the job for deletion with retainhours = 3.
comment|// jobid3 should be deleted at time 5.
name|jobUserlog3
operator|=
name|localizeJob
argument_list|(
name|jobid3
argument_list|)
expr_stmt|;
name|jobFinished
argument_list|(
name|jobid3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// mimic localizeJob for jobid4
name|jobUserlog4
operator|=
name|localizeJob
argument_list|(
name|jobid4
argument_list|)
expr_stmt|;
comment|// do cleanup
name|myClock
operator|.
name|advance
argument_list|(
literal|2
operator|*
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 4.
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
comment|// jobid2 will be deleted
name|assertFalse
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 5.
comment|// do cleanup again
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
comment|// jobid3 will be deleted
name|assertFalse
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests user-log directory cleanup on a TT restart.    *     * Adds job1 deletion before the restart with 2 hour retain hours.    * Adds job2 for which there are no tasks/killJobAction after the restart.    * Adds job3 for which there is localizeJob followed by killJobAction after    * the restart with 3 hours retain hours.    * Adds job4 for which there are some tasks after the restart.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testUserLogCleanupAfterRestart ()
specifier|public
name|void
name|testUserLogCleanupAfterRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jobUserlog1
init|=
name|localizeJob
argument_list|(
name|jobid1
argument_list|)
decl_stmt|;
name|File
name|jobUserlog2
init|=
name|localizeJob
argument_list|(
name|jobid2
argument_list|)
decl_stmt|;
name|File
name|jobUserlog3
init|=
name|localizeJob
argument_list|(
name|jobid3
argument_list|)
decl_stmt|;
name|File
name|jobUserlog4
init|=
name|localizeJob
argument_list|(
name|jobid4
argument_list|)
decl_stmt|;
comment|// create a some files/dirs in userlog
name|foo
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|bar
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
comment|// add the jobid1 for deletion with retainhours = 2
name|jobFinished
argument_list|(
name|jobid1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// time is now 1.
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// mimic TaskTracker restart
comment|// clear userlog directory
comment|// job directories will be added with 3 hours as retain hours.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|USER_LOG_RETAIN_HOURS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|=
operator|new
name|UserLogCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|myClock
operator|=
operator|new
name|FakeClock
argument_list|()
expr_stmt|;
comment|// clock is reset.
name|taskLogCleanupThread
operator|.
name|setClock
argument_list|(
name|myClock
argument_list|)
expr_stmt|;
name|taskLogCleanupThread
operator|.
name|clearOldUserLogs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setTaskLogCleanupThread
argument_list|(
name|taskLogCleanupThread
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bar
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
argument_list|,
name|MRAsyncDiskService
operator|.
name|TOBEDELETED
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 1.
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// mimic localizeJob followed KillJobAction for jobid3
comment|// add the job for deletion with retainhours = 3.
comment|// jobid3 should be deleted at time 4.
name|jobUserlog3
operator|=
name|localizeJob
argument_list|(
name|jobid3
argument_list|)
expr_stmt|;
name|jobFinished
argument_list|(
name|jobid3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// mimic localizeJob for jobid4
name|jobUserlog4
operator|=
name|localizeJob
argument_list|(
name|jobid4
argument_list|)
expr_stmt|;
comment|// do cleanup
name|myClock
operator|.
name|advance
argument_list|(
literal|2
operator|*
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 3.
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
comment|// jobid1 and jobid2 will be deleted
name|assertFalse
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|myClock
operator|.
name|advance
argument_list|(
name|ONE_HOUR
argument_list|)
expr_stmt|;
comment|// time is now 4.
comment|// do cleanup again
name|taskLogCleanupThread
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
comment|// jobid3 will be deleted
name|assertFalse
argument_list|(
name|jobUserlog1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobUserlog3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobUserlog4
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

