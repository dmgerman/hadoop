begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_class
DECL|class|TestTrackerReservation
specifier|public
class|class
name|TestTrackerReservation
extends|extends
name|TestCase
block|{
DECL|field|trackers
specifier|static
name|String
index|[]
name|trackers
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|,
literal|"tracker_tracker3:1000"
block|}
decl_stmt|;
DECL|field|jobTracker
specifier|private
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
DECL|class|FakeJobTracker
specifier|private
specifier|static
class|class
name|FakeJobTracker
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
block|{
DECL|method|FakeJobTracker (JobConf conf, Clock clock, String[] tts)
name|FakeJobTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|String
index|[]
name|tts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|LoginException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|clock
argument_list|,
name|tts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalizeJob (JobInProgress job)
specifier|synchronized
name|void
name|finalizeJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestTrackerReservation
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|new
name|Clock
argument_list|()
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{       }
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
comment|/**    * Test case to test if task tracker reservation.    *<ol>    *<li>Run a cluster with 3 trackers.</li>    *<li>Submit a job which reserves all the slots in two    * trackers.</li>    *<li>Run the job on another tracker which has     * no reservations</li>    *<li>Finish the job and observe the reservations are    * successfully canceled</li>    *</ol>    *     * @throws Exception    */
DECL|method|testTaskTrackerReservation ()
specifier|public
name|void
name|testTaskTrackerReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Set task tracker objects for reservation.
name|TaskTracker
name|tt1
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt2
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt3
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status1
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status2
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status3
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|tt1
operator|.
name|setStatus
argument_list|(
name|status1
argument_list|)
expr_stmt|;
name|tt2
operator|.
name|setStatus
argument_list|(
name|status2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|setStatus
argument_list|(
name|status3
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|fjob
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|fjob
operator|.
name|setClusterSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fjob
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|fjob
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|fjob
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|fjob
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|fjob
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not reserved for the job : maps"
argument_list|,
literal|2
argument_list|,
name|fjob
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not reserved for the job : reduces"
argument_list|,
literal|2
argument_list|,
name|fjob
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|mTid
init|=
name|fjob
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|rTid
init|=
name|fjob
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|fjob
operator|.
name|finishTask
argument_list|(
name|mTid
argument_list|)
expr_stmt|;
name|fjob
operator|.
name|finishTask
argument_list|(
name|rTid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job didnt complete successfully complete"
argument_list|,
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reservation for the job not released: Maps"
argument_list|,
literal|0
argument_list|,
name|fjob
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reservation for the job not released : Reduces"
argument_list|,
literal|0
argument_list|,
name|fjob
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case to check task tracker reservation for a job which     * has a job blacklisted tracker.    *<ol>    *<li>Run a job which fails on one of the tracker.</li>    *<li>Check if the job succeeds and has no reservation.</li>    *</ol>    *     * @throws Exception    */
DECL|method|testTrackerReservationWithJobBlackListedTracker ()
specifier|public
name|void
name|testTrackerReservationWithJobBlackListedTracker
parameter_list|()
throws|throws
name|Exception
block|{
name|FakeJobInProgress
name|job
init|=
name|TestTaskTrackerBlacklisting
operator|.
name|runBlackListingJob
argument_list|(
name|jobTracker
argument_list|,
name|trackers
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job has no blacklisted trackers"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getBlackListedTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Tracker 1 not blacklisted for the job"
argument_list|,
name|job
operator|.
name|getBlackListedTrackers
argument_list|()
operator|.
name|contains
argument_list|(
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job didnt complete successfully complete"
argument_list|,
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reservation for the job not released: Maps"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reservation for the job not released : Reduces"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case to check if the job reservation is handled properly if the     * job has a reservation on a black listed tracker.    *     * @throws Exception    */
DECL|method|testReservationOnBlacklistedTracker ()
specifier|public
name|void
name|testReservationOnBlacklistedTracker
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|3
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|".70"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_FAILURES_MAX_PERCENT
argument_list|,
literal|".70"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxTaskFailuresPerTracker
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|setClusterSize
argument_list|(
name|trackers
operator|.
name|length
argument_list|)
expr_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|TaskTracker
name|tt1
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt2
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt3
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status1
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status2
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status3
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|tt1
operator|.
name|setStatus
argument_list|(
name|status1
argument_list|)
expr_stmt|;
name|tt2
operator|.
name|setStatus
argument_list|(
name|status2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|setStatus
argument_list|(
name|status3
argument_list|)
expr_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|job
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|job
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|job
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tt3
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|job
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not reserved for the job : maps"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not reserved for the job : reduces"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * FakeJobInProgress.findMapTask does not handle      * task failures. So working around it by failing      * reduce and blacklisting tracker.      * Then finish the map task later.       */
name|TaskAttemptID
name|mTid
init|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|rTid
init|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|//Task should blacklist the tasktracker.
name|job
operator|.
name|failTask
argument_list|(
name|rTid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 0 not blacklisted for the job"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getBlackListedTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extra Trackers reserved for the job : maps"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Extra Trackers reserved for the job : reduces"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|2
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|2
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
comment|//Finish the map task on the tracker 1. Finishing it here to work
comment|//around bug in the FakeJobInProgress object
name|job
operator|.
name|finishTask
argument_list|(
name|mTid
argument_list|)
expr_stmt|;
name|mTid
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|rTid
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|mTid
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|rTid
argument_list|)
expr_stmt|;
name|rTid
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|rTid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job didnt complete successfully complete"
argument_list|,
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not unreserved for the job : maps"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers not unreserved for the job : reduces"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

