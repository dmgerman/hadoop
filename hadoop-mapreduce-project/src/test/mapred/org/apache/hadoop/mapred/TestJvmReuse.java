begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJvmReuse
specifier|public
class|class
name|TestJvmReuse
block|{
DECL|field|rootDir
specifier|private
specifier|static
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestJvmReuse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|numMappers
specifier|private
name|int
name|numMappers
init|=
literal|5
decl_stmt|;
DECL|field|taskWithCleanup
specifier|private
specifier|static
name|int
name|taskWithCleanup
init|=
literal|2
decl_stmt|;
comment|// third task
comment|/**    * A mapper class in which all attempts log taskid. Zeroth attempt of task    * with id=taskWithCleanup, fails with System.exit to force a cleanup attempt    * for the task in a new jvm.    */
DECL|class|MapperClass
specifier|public
specifier|static
class|class
name|MapperClass
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|taskid
name|String
name|taskid
decl_stmt|;
DECL|field|instances
specifier|static
name|int
name|instances
init|=
literal|0
decl_stmt|;
DECL|field|reporter
name|Reporter
name|reporter
init|=
literal|null
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|taskid
operator|=
name|job
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|)
expr_stmt|;
block|}
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|taskid
argument_list|)
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
if|if
condition|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|taskid
argument_list|)
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|taskWithCleanup
condition|)
block|{
if|if
condition|(
name|taskid
operator|.
name|endsWith
argument_list|(
literal|"_0"
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reporter
operator|.
name|incrCounter
argument_list|(
literal|"jvm"
argument_list|,
literal|"use"
argument_list|,
operator|++
name|instances
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|launchJob (JobConf conf, Path inDir, Path outDir)
specifier|public
name|RunningJob
name|launchJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set up the input file system and write input text.
name|FileSystem
name|inFs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|outFs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMappers
condition|;
name|i
operator|++
control|)
block|{
comment|// write input into input file
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// configure the mapred Job
name|conf
operator|.
name|setMapperClass
argument_list|(
name|MapperClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|// enable jvm reuse
name|conf
operator|.
name|setNumTasksToExecutePerJvm
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// return the RunningJob handle.
return|return
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|validateAttempt (TaskInProgress tip, TaskAttemptID attemptId, TaskStatus ts, boolean isCleanup)
specifier|private
name|void
name|validateAttempt
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|,
name|TaskAttemptID
name|attemptId
parameter_list|,
name|TaskStatus
name|ts
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|isCleanup
argument_list|,
name|tip
operator|.
name|isCleanupAttempt
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate tasklogs for task attempt
name|String
name|log
init|=
name|MapReduceTestUtil
operator|.
name|readTaskLog
argument_list|(
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|,
name|attemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|log
operator|.
name|equals
argument_list|(
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCleanup
condition|)
block|{
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|ts
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|ts
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate tasklogs for cleanup attempt
name|log
operator|=
name|MapReduceTestUtil
operator|.
name|readTaskLog
argument_list|(
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|,
name|attemptId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|log
operator|.
name|equals
argument_list|(
name|TestTaskFail
operator|.
name|cleanupLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validates logs of all attempts of the job.
DECL|method|validateJob (RunningJob job, MiniMRCluster mr)
specifier|private
name|void
name|validateJob
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|MiniMRCluster
name|mr
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|uses
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
literal|"jvm"
argument_list|,
literal|"use"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"maps = "
operator|+
name|numMappers
operator|+
literal|", jvms = "
operator|+
name|uses
argument_list|,
name|numMappers
operator|<
name|uses
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMappers
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptID
name|attemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskInProgress
name|tip
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTip
argument_list|(
name|attemptId
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskStatus
name|ts
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTaskStatus
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|validateAttempt
argument_list|(
name|tip
argument_list|,
name|attemptId
argument_list|,
name|ts
argument_list|,
name|i
operator|==
name|taskWithCleanup
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|taskWithCleanup
condition|)
block|{
comment|// validate second attempt of the task
name|attemptId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ts
operator|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTaskStatus
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|validateAttempt
argument_list|(
name|tip
argument_list|,
name|attemptId
argument_list|,
name|ts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Runs job with jvm reuse and verifies that the logs for all attempts can be    * read properly.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testTaskLogs ()
specifier|public
name|void
name|testTaskLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|taskTrackers
init|=
literal|1
decl_stmt|;
comment|// taskTrackers should be 1 to test jvm reuse.
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.map.tasks.maximum"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|TestTaskFail
operator|.
name|CommitterWithLogs
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|launchJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|validateJob
argument_list|(
name|rJob
argument_list|,
name|mr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

