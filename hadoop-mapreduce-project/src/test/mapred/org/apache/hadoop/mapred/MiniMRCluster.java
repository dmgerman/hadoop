begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StaticMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * This class creates a single-process Map-Reduce cluster for junit testing.  * One thread is created for each server.  */
end_comment

begin_class
DECL|class|MiniMRCluster
specifier|public
class|class
name|MiniMRCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniMRCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jobTrackerThread
specifier|private
name|Thread
name|jobTrackerThread
decl_stmt|;
DECL|field|jobTracker
specifier|private
name|JobTrackerRunner
name|jobTracker
decl_stmt|;
DECL|field|jobTrackerPort
specifier|private
name|int
name|jobTrackerPort
init|=
literal|0
decl_stmt|;
DECL|field|taskTrackerPort
specifier|private
name|int
name|taskTrackerPort
init|=
literal|0
decl_stmt|;
DECL|field|jobTrackerInfoPort
specifier|private
name|int
name|jobTrackerInfoPort
init|=
literal|0
decl_stmt|;
DECL|field|numTaskTrackers
specifier|private
name|int
name|numTaskTrackers
decl_stmt|;
DECL|field|taskTrackerList
specifier|private
name|List
argument_list|<
name|TaskTrackerRunner
argument_list|>
name|taskTrackerList
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerRunner
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|taskTrackerThreadList
specifier|private
name|List
argument_list|<
name|Thread
argument_list|>
name|taskTrackerThreadList
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|namenode
specifier|private
name|String
name|namenode
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
DECL|field|numTrackerToExclude
specifier|private
name|int
name|numTrackerToExclude
decl_stmt|;
DECL|field|job
specifier|private
name|JobConf
name|job
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
comment|/**    * An inner class that runs a job tracker.    */
DECL|class|JobTrackerRunner
specifier|public
class|class
name|JobTrackerRunner
implements|implements
name|Runnable
block|{
DECL|field|tracker
specifier|private
name|JobTracker
name|tracker
init|=
literal|null
decl_stmt|;
DECL|field|isActive
specifier|private
specifier|volatile
name|boolean
name|isActive
init|=
literal|true
decl_stmt|;
DECL|field|jc
name|JobConf
name|jc
init|=
literal|null
decl_stmt|;
DECL|field|clock
name|Clock
name|clock
init|=
name|JobTracker
operator|.
name|DEFAULT_CLOCK
decl_stmt|;
DECL|method|JobTrackerRunner (JobConf conf)
specifier|public
name|JobTrackerRunner
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|jc
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|JobTrackerRunner (JobConf conf, Clock clock)
specifier|public
name|JobTrackerRunner
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|jc
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|isUp ()
specifier|public
name|boolean
name|isUp
parameter_list|()
block|{
return|return
operator|(
name|tracker
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|isActive
return|;
block|}
DECL|method|getJobTrackerPort ()
specifier|public
name|int
name|getJobTrackerPort
parameter_list|()
block|{
return|return
name|tracker
operator|.
name|getTrackerPort
argument_list|()
return|;
block|}
DECL|method|getJobTrackerInfoPort ()
specifier|public
name|int
name|getJobTrackerInfoPort
parameter_list|()
block|{
return|return
name|tracker
operator|.
name|getInfoPort
argument_list|()
return|;
block|}
DECL|method|getJobTracker ()
specifier|public
name|JobTracker
name|getJobTracker
parameter_list|()
block|{
return|return
name|tracker
return|;
block|}
comment|/**      * Create the job tracker and run it.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|jc
operator|=
operator|(
name|jc
operator|==
literal|null
operator|)
condition|?
name|createJobConf
argument_list|()
else|:
name|createJobConf
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"build/test/mapred/local"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|jc
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setClass
argument_list|(
literal|"topology.node.switch.mapping.impl"
argument_list|,
name|StaticMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmssSSS"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
name|tracker
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|JobTracker
argument_list|>
argument_list|()
block|{
specifier|public
name|JobTracker
name|run
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|jc
argument_list|,
name|clock
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|offerService
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Job tracker crashed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|isActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Shutdown the job tracker and wait for it to finish.      */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
block|{
name|tracker
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem shutting down job tracker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|isActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * An inner class to run the task tracker.    */
DECL|class|TaskTrackerRunner
class|class
name|TaskTrackerRunner
implements|implements
name|Runnable
block|{
DECL|field|tt
specifier|volatile
name|TaskTracker
name|tt
decl_stmt|;
DECL|field|trackerId
name|int
name|trackerId
decl_stmt|;
comment|// the localDirs for this taskTracker
DECL|field|localDirs
name|String
index|[]
name|localDirs
decl_stmt|;
DECL|field|isInitialized
specifier|volatile
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
DECL|field|isDead
specifier|volatile
name|boolean
name|isDead
init|=
literal|false
decl_stmt|;
DECL|field|numDir
name|int
name|numDir
decl_stmt|;
DECL|method|TaskTrackerRunner (int trackerId, int numDir, String hostname, JobConf cfg)
name|TaskTrackerRunner
parameter_list|(
name|int
name|trackerId
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
name|hostname
parameter_list|,
name|JobConf
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|trackerId
operator|=
name|trackerId
expr_stmt|;
name|this
operator|.
name|numDir
operator|=
name|numDir
expr_stmt|;
name|localDirs
operator|=
operator|new
name|String
index|[
name|numDir
index|]
expr_stmt|;
specifier|final
name|JobConf
name|conf
decl_stmt|;
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|createJobConf
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|createJobConf
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostname
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HOST_NAME
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REPORT_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|taskTrackerPort
argument_list|)
expr_stmt|;
name|File
name|localDirBase
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|localDirBase
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|StringBuffer
name|localPath
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDir
condition|;
operator|++
name|i
control|)
block|{
name|File
name|ttDir
init|=
operator|new
name|File
argument_list|(
name|localDirBase
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|trackerId
argument_list|)
operator|+
literal|"_"
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ttDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ttDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|ttDir
argument_list|)
throw|;
block|}
block|}
name|localDirs
index|[
name|i
index|]
operator|=
name|ttDir
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|localPath
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|localPath
operator|.
name|append
argument_list|(
name|localDirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
literal|" is "
operator|+
name|localPath
argument_list|)
expr_stmt|;
try|try
block|{
name|tt
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TaskTracker
argument_list|>
argument_list|()
block|{
specifier|public
name|TaskTracker
name|run
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|createTaskTracker
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|isInitialized
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|isDead
operator|=
literal|true
expr_stmt|;
name|tt
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"task tracker "
operator|+
name|trackerId
operator|+
literal|" crashed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a default {@link TaskTracker} using the conf passed.      */
DECL|method|createTaskTracker (JobConf conf)
name|TaskTracker
name|createTaskTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|TaskTracker
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**      * Create and run the task tracker.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|tt
operator|!=
literal|null
condition|)
block|{
name|tt
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|isDead
operator|=
literal|true
expr_stmt|;
name|tt
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"task tracker "
operator|+
name|trackerId
operator|+
literal|" crashed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the local dir for this TaskTracker.      * This is there so that we do not break      * previous tests.       * @return the absolute pathname      */
DECL|method|getLocalDir ()
specifier|public
name|String
name|getLocalDir
parameter_list|()
block|{
return|return
name|localDirs
index|[
literal|0
index|]
return|;
block|}
DECL|method|getLocalDirs ()
specifier|public
name|String
index|[]
name|getLocalDirs
parameter_list|()
block|{
return|return
name|localDirs
return|;
block|}
DECL|method|getTaskTracker ()
specifier|public
name|TaskTracker
name|getTaskTracker
parameter_list|()
block|{
return|return
name|tt
return|;
block|}
comment|/**      * Shut down the server and wait for it to finish.      */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|tt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|tt
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"task tracker "
operator|+
name|trackerId
operator|+
literal|" could not shut down"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Get the local directory for the Nth task tracker    * @param taskTracker the index of the task tracker to check    * @return the absolute pathname of the local dir    */
DECL|method|getTaskTrackerLocalDir (int taskTracker)
specifier|public
name|String
name|getTaskTrackerLocalDir
parameter_list|(
name|int
name|taskTracker
parameter_list|)
block|{
return|return
operator|(
name|taskTrackerList
operator|.
name|get
argument_list|(
name|taskTracker
argument_list|)
operator|)
operator|.
name|getLocalDir
argument_list|()
return|;
block|}
comment|/**    * Get all the local directories for the Nth task tracker    * @param taskTracker the index of the task tracker to check    * @return array of local dirs    */
DECL|method|getTaskTrackerLocalDirs (int taskTracker)
specifier|public
name|String
index|[]
name|getTaskTrackerLocalDirs
parameter_list|(
name|int
name|taskTracker
parameter_list|)
block|{
return|return
operator|(
name|taskTrackerList
operator|.
name|get
argument_list|(
name|taskTracker
argument_list|)
operator|)
operator|.
name|getLocalDirs
argument_list|()
return|;
block|}
DECL|method|getJobTrackerRunner ()
specifier|public
name|JobTrackerRunner
name|getJobTrackerRunner
parameter_list|()
block|{
return|return
name|jobTracker
return|;
block|}
DECL|method|getTaskTrackerRunner (int id)
name|TaskTrackerRunner
name|getTaskTrackerRunner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|taskTrackerList
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Get the number of task trackers in the cluster    */
DECL|method|getNumTaskTrackers ()
specifier|public
name|int
name|getNumTaskTrackers
parameter_list|()
block|{
return|return
name|taskTrackerList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Sets inline cleanup threads to all task trackers sothat deletion of    * temporary files/dirs happen inline    */
DECL|method|setInlineCleanupThreads ()
specifier|public
name|void
name|setInlineCleanupThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNumTaskTrackers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|getTaskTrackerRunner
argument_list|(
name|i
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|setCleanupThread
argument_list|(
operator|new
name|UtilsForTests
operator|.
name|InlineCleanupQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait until the system is idle.    */
DECL|method|waitUntilIdle ()
specifier|public
name|void
name|waitUntilIdle
parameter_list|()
block|{
name|waitTaskTrackers
argument_list|()
expr_stmt|;
name|JobClient
name|client
decl_stmt|;
try|try
block|{
name|client
operator|=
operator|new
name|JobClient
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
name|client
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
while|while
condition|(
name|status
operator|.
name|getTaskTrackers
argument_list|()
operator|+
name|numTrackerToExclude
operator|<
name|taskTrackerList
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|TaskTrackerRunner
name|runner
range|:
name|taskTrackerList
control|)
block|{
if|if
condition|(
name|runner
operator|.
name|isDead
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TaskTracker is dead"
argument_list|)
throw|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|status
operator|=
name|client
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|waitTaskTrackers ()
specifier|private
name|void
name|waitTaskTrackers
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|TaskTrackerRunner
argument_list|>
name|itr
init|=
name|taskTrackerList
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskTrackerRunner
name|runner
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|runner
operator|.
name|isDead
operator|&&
operator|(
operator|!
name|runner
operator|.
name|isInitialized
operator|||
operator|!
name|runner
operator|.
name|tt
operator|.
name|isIdle
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|runner
operator|.
name|isInitialized
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for task tracker to start."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for task tracker "
operator|+
name|runner
operator|.
name|tt
operator|.
name|getName
argument_list|()
operator|+
literal|" to be idle."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**     * Get the actual rpc port used.    */
DECL|method|getJobTrackerPort ()
specifier|public
name|int
name|getJobTrackerPort
parameter_list|()
block|{
return|return
name|jobTrackerPort
return|;
block|}
DECL|method|createJobConf ()
specifier|public
name|JobConf
name|createJobConf
parameter_list|()
block|{
return|return
name|createJobConf
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createJobConf (JobConf conf)
specifier|public
name|JobConf
name|createJobConf
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
block|}
return|return
name|configureJobConf
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|,
name|jobTrackerPort
argument_list|,
name|jobTrackerInfoPort
argument_list|,
name|ugi
argument_list|)
return|;
block|}
DECL|method|configureJobConf (JobConf conf, String namenode, int jobTrackerPort, int jobTrackerInfoPort, UserGroupInformation ugi)
specifier|static
name|JobConf
name|configureJobConf
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|jobTrackerInfoPort
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|JobConf
name|result
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|result
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:"
operator|+
name|jobTrackerPort
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|jobTrackerInfoPort
argument_list|)
expr_stmt|;
comment|// for debugging have all task output sent to the test output
name|JobClient
operator|.
name|setTaskOutputFilter
argument_list|(
name|result
argument_list|,
name|JobClient
operator|.
name|TaskStatusFilter
operator|.
name|ALL
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Create the config and the cluster.    * @param numTaskTrackers no. of tasktrackers in the cluster    * @param namenode the namenode    * @param numDir no. of directories    * @throws IOException    */
DECL|method|MiniMRCluster (int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the config and the cluster.    * @param numTaskTrackers no. of tasktrackers in the cluster    * @param namenode the namenode    * @param numDir no. of directories    * @param racks Array of racks    * @param hosts Array of hosts in the corresponding racks    * @param conf Default conf for the jobtracker    * @throws IOException    */
DECL|method|MiniMRCluster (int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts, JobConf conf)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the config and the cluster.    * @param numTaskTrackers no. of tasktrackers in the cluster    * @param namenode the namenode    * @param numDir no. of directories    * @throws IOException    */
DECL|method|MiniMRCluster (int numTaskTrackers, String namenode, int numDir)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts, UserGroupInformation ugi )
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts, UserGroupInformation ugi, JobConf conf)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts, UserGroupInformation ugi, JobConf conf, int numTrackerToExclude)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|numTrackerToExclude
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|numTrackerToExclude
argument_list|,
operator|new
name|Clock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster (int jobTrackerPort, int taskTrackerPort, int numTaskTrackers, String namenode, int numDir, String[] racks, String[] hosts, UserGroupInformation ugi, JobConf conf, int numTrackerToExclude, Clock clock)
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|numTrackerToExclude
parameter_list|,
name|Clock
name|clock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|racks
operator|!=
literal|null
operator|&&
name|racks
operator|.
name|length
operator|<
name|numTaskTrackers
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid number of racks specified. It should be at least "
operator|+
literal|"equal to the number of tasktrackers"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hosts
operator|!=
literal|null
operator|&&
name|numTaskTrackers
operator|>
name|hosts
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of hosts ["
operator|+
name|hosts
operator|.
name|length
operator|+
literal|"] is less than the number of tasktrackers ["
operator|+
name|numTaskTrackers
operator|+
literal|"]."
argument_list|)
throw|;
block|}
comment|//Generate rack names if required
if|if
condition|(
name|racks
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating rack names for tasktrackers"
argument_list|)
expr_stmt|;
name|racks
operator|=
operator|new
name|String
index|[
name|numTaskTrackers
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|racks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|racks
index|[
name|i
index|]
operator|=
name|NetworkTopology
operator|.
name|DEFAULT_RACK
expr_stmt|;
block|}
block|}
comment|//Generate some hostnames if required
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating host names for tasktrackers"
argument_list|)
expr_stmt|;
name|hosts
operator|=
operator|new
name|String
index|[
name|numTaskTrackers
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTaskTrackers
condition|;
name|i
operator|++
control|)
block|{
name|hosts
index|[
name|i
index|]
operator|=
literal|"host"
operator|+
name|i
operator|+
literal|".foo.com"
expr_stmt|;
block|}
block|}
name|this
operator|.
name|jobTrackerPort
operator|=
name|jobTrackerPort
expr_stmt|;
name|this
operator|.
name|taskTrackerPort
operator|=
name|taskTrackerPort
expr_stmt|;
name|this
operator|.
name|jobTrackerInfoPort
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numTaskTrackers
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// this is the conf the mr starts with
name|this
operator|.
name|numTrackerToExclude
operator|=
name|numTrackerToExclude
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
comment|// start the jobtracker
name|startJobTracker
argument_list|()
expr_stmt|;
comment|// Create the TaskTrackers
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numTaskTrackers
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|rack
init|=
literal|null
decl_stmt|;
name|String
name|host
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|rack
operator|=
name|racks
index|[
name|idx
index|]
expr_stmt|;
block|}
if|if
condition|(
name|hosts
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|hosts
index|[
name|idx
index|]
expr_stmt|;
block|}
name|startTaskTracker
argument_list|(
name|host
argument_list|,
name|rack
argument_list|,
name|idx
argument_list|,
name|numDir
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|job
operator|=
name|createJobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|waitUntilIdle
argument_list|()
expr_stmt|;
block|}
DECL|method|getUgi ()
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|ugi
return|;
block|}
comment|/**    * Get the task completion events    */
DECL|method|getTaskCompletionEvents (JobID id, int from, int max)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|id
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTaskCompletionEvents
argument_list|(
name|id
argument_list|,
name|from
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * Change the job's priority    *     * @throws IOException    * @throws AccessControlException    */
DECL|method|setJobPriority (JobID jobId, JobPriority priority)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|JobPriority
name|priority
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|setJobPriority
argument_list|(
name|jobId
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the job's priority    */
DECL|method|getJobPriority (JobID jobId)
specifier|public
name|JobPriority
name|getJobPriority
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
return|return
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getPriority
argument_list|()
return|;
block|}
comment|/**    * Get the job finish time    */
DECL|method|getJobFinishTime (JobID jobId)
specifier|public
name|long
name|getJobFinishTime
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
return|return
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getFinishTime
argument_list|()
return|;
block|}
comment|/**    * Init the job    */
DECL|method|initializeJob (JobID jobId)
specifier|public
name|void
name|initializeJob
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInProgress
name|job
init|=
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|initJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the events list at the tasktracker    */
specifier|public
name|MapTaskCompletionEventsUpdate
DECL|method|getMapTaskCompletionEventsUpdates (int index, JobID jobId, int max)
name|getMapTaskCompletionEventsUpdates
parameter_list|(
name|int
name|index
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jtId
init|=
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTrackerIdentifier
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|dummy
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|jtId
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|taskTrackerList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getMapCompletionEvents
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|max
argument_list|,
name|dummy
argument_list|)
return|;
block|}
comment|/**    * Get jobtracker conf    */
DECL|method|getJobTrackerConf ()
specifier|public
name|JobConf
name|getJobTrackerConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
DECL|method|getFaultCount (String hostName)
specifier|public
name|int
name|getFaultCount
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
return|return
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getFaultCount
argument_list|(
name|hostName
argument_list|)
return|;
block|}
comment|/**    * Start the jobtracker.    */
DECL|method|startJobTracker ()
specifier|public
name|void
name|startJobTracker
parameter_list|()
block|{
name|startJobTracker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|startJobTracker (boolean wait)
specifier|public
name|void
name|startJobTracker
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{
comment|//  Create the JobTracker
name|jobTracker
operator|=
operator|new
name|JobTrackerRunner
argument_list|(
name|conf
argument_list|,
name|clock
argument_list|)
expr_stmt|;
name|jobTrackerThread
operator|=
operator|new
name|Thread
argument_list|(
name|jobTracker
argument_list|)
expr_stmt|;
name|jobTrackerThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|wait
condition|)
block|{
return|return;
block|}
while|while
condition|(
name|jobTracker
operator|.
name|isActive
argument_list|()
operator|&&
operator|!
name|jobTracker
operator|.
name|isUp
argument_list|()
condition|)
block|{
try|try
block|{
comment|// let daemons get started
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
comment|// is the jobtracker has started then wait for it to init
name|ClusterStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jobTracker
operator|.
name|isUp
argument_list|()
condition|)
block|{
name|status
operator|=
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|jobTracker
operator|.
name|isActive
argument_list|()
operator|&&
name|status
operator|.
name|getJobTrackerStatus
argument_list|()
operator|==
name|JobTrackerStatus
operator|.
name|INITIALIZING
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JobTracker still initializing. Waiting."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|status
operator|=
name|jobTracker
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|jobTracker
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|// return if jobtracker has crashed
return|return;
block|}
comment|// Set the configuration for the task-trackers
name|this
operator|.
name|jobTrackerPort
operator|=
name|jobTracker
operator|.
name|getJobTrackerPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobTrackerInfoPort
operator|=
name|jobTracker
operator|.
name|getJobTrackerInfoPort
argument_list|()
expr_stmt|;
block|}
comment|/**    * Kill the jobtracker.    */
DECL|method|stopJobTracker ()
specifier|public
name|void
name|stopJobTracker
parameter_list|()
block|{
comment|//jobTracker.exit(-1);
name|jobTracker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|jobTrackerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|jobTrackerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem waiting for job tracker to finish"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Kill the tasktracker.    */
DECL|method|stopTaskTracker (int id)
specifier|public
name|void
name|stopTaskTracker
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|TaskTrackerRunner
name|tracker
init|=
name|taskTrackerList
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
name|thread
init|=
name|taskTrackerThreadList
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// This will break the wait until idle loop
name|tracker
operator|.
name|isDead
operator|=
literal|true
expr_stmt|;
operator|--
name|numTaskTrackers
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem waiting for task tracker to finish"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Start the tasktracker.    */
DECL|method|startTaskTracker (String host, String rack, int idx, int numDir)
specifier|public
name|void
name|startTaskTracker
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|rack
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rack
operator|!=
literal|null
condition|)
block|{
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|host
argument_list|,
name|rack
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|host
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
name|TaskTrackerRunner
name|taskTracker
decl_stmt|;
name|taskTracker
operator|=
operator|new
name|TaskTrackerRunner
argument_list|(
name|idx
argument_list|,
name|numDir
argument_list|,
name|host
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|addTaskTracker
argument_list|(
name|taskTracker
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a task-tracker to the Mini-MR cluster.    */
DECL|method|addTaskTracker (TaskTrackerRunner taskTracker)
name|void
name|addTaskTracker
parameter_list|(
name|TaskTrackerRunner
name|taskTracker
parameter_list|)
block|{
name|Thread
name|taskTrackerThread
init|=
operator|new
name|Thread
argument_list|(
name|taskTracker
argument_list|)
decl_stmt|;
name|taskTrackerList
operator|.
name|add
argument_list|(
name|taskTracker
argument_list|)
expr_stmt|;
name|taskTrackerThreadList
operator|.
name|add
argument_list|(
name|taskTrackerThread
argument_list|)
expr_stmt|;
name|taskTrackerThread
operator|.
name|start
argument_list|()
expr_stmt|;
operator|++
name|numTaskTrackers
expr_stmt|;
block|}
comment|/**    * Get the tasktrackerID in MiniMRCluster with given trackerName.    */
DECL|method|getTaskTrackerID (String trackerName)
name|int
name|getTaskTrackerID
parameter_list|(
name|String
name|trackerName
parameter_list|)
block|{
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numTaskTrackers
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|taskTrackerList
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|trackerName
argument_list|)
condition|)
block|{
return|return
name|id
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Shut down the servers.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|waitTaskTrackers
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numTaskTrackers
condition|;
name|idx
operator|++
control|)
block|{
name|TaskTrackerRunner
name|taskTracker
init|=
name|taskTrackerList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|Thread
name|taskTrackerThread
init|=
name|taskTrackerThreadList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|taskTracker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|taskTrackerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem shutting down task tracker"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|stopJobTracker
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|File
name|configDir
init|=
operator|new
name|File
argument_list|(
literal|"build"
argument_list|,
literal|"minimr"
argument_list|)
decl_stmt|;
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|,
literal|"mapred-site.xml"
argument_list|)
decl_stmt|;
name|siteFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Bringing up Jobtracker and tasktrackers."
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|4
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobTracker and TaskTrackers are up."
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobTracker and TaskTrackers brought down."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

