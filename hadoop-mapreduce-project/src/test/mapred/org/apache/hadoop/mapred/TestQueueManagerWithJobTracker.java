begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueConfigurationParser
operator|.
name|NAME_SEPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|QUEUES_CONFIG_FILE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|deleteQueuesConfigFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createAcls
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createQueue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createQueuesNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createSimpleDocumentWithAcls
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|miniMRCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|submitSleepJob
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|writeToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|tools
operator|.
name|MRAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
DECL|class|TestQueueManagerWithJobTracker
specifier|public
class|class
name|TestQueueManagerWithJobTracker
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
block|}
DECL|field|adminUser
name|String
name|adminUser
init|=
literal|"adminUser"
decl_stmt|;
DECL|field|adminGroup
name|String
name|adminGroup
init|=
literal|"adminGroup"
decl_stmt|;
DECL|field|deprecatedSuperGroup
name|String
name|deprecatedSuperGroup
init|=
literal|"superGroup"
decl_stmt|;
DECL|method|startCluster (boolean aclsEnabled)
specifier|private
name|void
name|startCluster
parameter_list|(
name|boolean
name|aclsEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocumentWithAcls
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
name|aclsEnabled
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MR_SUPERGROUP
argument_list|,
name|deprecatedSuperGroup
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
name|adminUser
operator|+
literal|" "
operator|+
name|adminGroup
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|namenode
init|=
literal|"file:///"
decl_stmt|;
name|miniMRCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
name|namenode
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to check that jobs cannot be submitted to a queue in STOPPED state    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testSubmitJobForStoppedQueue ()
specifier|public
name|void
name|testSubmitJobForStoppedQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|submitSleepJob
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p14"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"queue p1:p14 is in stopped state and should not accept jobs"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to check that jobs cannot be submitted to a container queue    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testSubmitJobForContainerQueue ()
specifier|public
name|void
name|testSubmitJobForContainerQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|submitSleepJob
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|"p1"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"queue p1 is a container queue and cannot have jobs"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the submission of job with specified acls    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAclsForSubmitJob ()
specifier|public
name|void
name|testAclsForSubmitJob
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Job
name|job
decl_stmt|;
try|try
block|{
comment|// submit job to queue p1:p13 with unspecified acls
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"user u1 cannot submit jobs to queue p1:p13"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// check access to admins
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|adminUser
operator|+
literal|",g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Admin user cannot submit jobs to queue p1:p13"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u1,"
operator|+
name|adminGroup
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Admin group member cannot submit jobs to queue p1:p13"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u1,"
operator|+
name|deprecatedSuperGroup
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Deprecated super group member cannot submit jobs to queue"
operator|+
literal|" p1:p13"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for access to submit the job
try|try
block|{
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"u2,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"user u2 cannot submit jobs to queue p1:p11"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// submit job to queue p1:p11 with acl-submit-job as u1
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job submission for u1 failed in queue : p1:p11."
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit job to queue p1:p12 with acl-submit-job as *
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u2,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job submission for u2 failed in queue : p1:p12."
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the accessibility to kill a job    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAccessToKillJob ()
specifier|public
name|void
name|testAccessToKillJob
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|submitSleepJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|JobConf
name|jobConf
init|=
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|Cluster
name|cluster
init|=
literal|null
decl_stmt|;
name|JobID
name|jobID
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|//Ensure that the jobinprogress is initied before we issue a kill
comment|//signal to the job.
name|JobTracker
name|tracker
init|=
name|miniMRCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|tracker
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobID
argument_list|)
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|userConf
init|=
operator|new
name|Configuration
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someRandomUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"someRandomGroup"
block|}
argument_list|)
decl_stmt|;
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|userConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"user 'someRandomeUser' is neither u1 nor in the administer group list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Configuration
name|userConf
init|=
operator|new
name|Configuration
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
decl_stmt|;
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|userConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// kill the running job
name|assertEquals
argument_list|(
literal|"job submitted for u1 and queue p1:p11 is not killed."
argument_list|,
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|,
operator|(
name|State
operator|.
name|KILLED
operator|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|jobID
operator|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
expr_stmt|;
comment|//Ensure that the jobinprogress is initied before we issue a kill
comment|//signal to the job.
name|jip
operator|=
name|tracker
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobID
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|killJob
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill the job by the user who submitted the job
name|assertEquals
argument_list|(
literal|"job submitted for u1 and queue p1:p11 is not killed."
argument_list|,
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|,
operator|(
name|State
operator|.
name|KILLED
operator|)
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|userConf
init|=
operator|new
name|Configuration
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
decl_stmt|;
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|userConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|jobID
operator|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
expr_stmt|;
comment|//Ensure that the jobinprogress is initied before we issue a kill
comment|//signal to the job.
name|jip
operator|=
name|tracker
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobID
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u3"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g3"
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|jobConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// try killing job with user not in administer list
try|try
block|{
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"u3 not in administer list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|jobConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// kill the running job
name|assertEquals
argument_list|(
literal|"job submitted for u1 and queue p1:p11 is not killed."
argument_list|,
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|,
operator|(
name|State
operator|.
name|KILLED
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// check kill access to admins
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"adminUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g3"
block|}
argument_list|)
expr_stmt|;
name|checkAccessToKill
argument_list|(
name|tracker
argument_list|,
name|jobConf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u3"
argument_list|,
operator|new
name|String
index|[]
block|{
name|adminGroup
block|}
argument_list|)
expr_stmt|;
name|checkAccessToKill
argument_list|(
name|tracker
argument_list|,
name|jobConf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u3"
argument_list|,
operator|new
name|String
index|[]
block|{
name|deprecatedSuperGroup
block|}
argument_list|)
expr_stmt|;
name|checkAccessToKill
argument_list|(
name|tracker
argument_list|,
name|jobConf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccessToKill (JobTracker tracker, final JobConf mrConf, UserGroupInformation killer)
specifier|private
name|void
name|checkAccessToKill
parameter_list|(
name|JobTracker
name|tracker
parameter_list|,
specifier|final
name|JobConf
name|mrConf
parameter_list|,
name|UserGroupInformation
name|killer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Job
name|job
init|=
name|submitSleepJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobID
name|jobID
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|//Ensure that the jobinprogress is initied before we issue a kill
comment|//signal to the job.
name|JobInProgress
name|jip
init|=
name|tracker
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobID
argument_list|)
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|Cluster
name|cluster
init|=
name|killer
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|mrConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job not killed by "
operator|+
name|killer
argument_list|,
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|,
operator|(
name|State
operator|.
name|KILLED
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests job submission after refresh    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSubmitJobsAfterRefresh ()
specifier|public
name|void
name|testSubmitJobsAfterRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test for refresh
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|refreshDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|MRAdmin
name|admin
init|=
operator|new
name|MRAdmin
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshQueues"
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|submitSleepJob
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"user u1 is not in the submit jobs' list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|doc
operator|=
name|createDocument
argument_list|()
expr_stmt|;
name|createSimpleDocumentWithAcls
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshQueues"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshDocument (Document doc)
specifier|private
name|void
name|refreshDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Create parent level queue q1.
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"maxCapacity"
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createProperties
argument_list|(
name|doc
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
comment|// Create another parent level p1
name|Element
name|p1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
comment|// append child p11 to p1
name|Element
name|p11
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p11"
argument_list|)
decl_stmt|;
name|p11
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|p11
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
literal|"u2"
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p11
argument_list|)
expr_stmt|;
name|Element
name|p12
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p12"
argument_list|)
decl_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append p12 to p1.
name|p1
operator|.
name|appendChild
argument_list|(
name|p12
argument_list|)
expr_stmt|;
comment|// append child p13 to p1
name|Element
name|p13
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p13"
argument_list|)
decl_stmt|;
name|p13
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p13
argument_list|)
expr_stmt|;
comment|// append child p14 to p1
name|Element
name|p14
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p14"
argument_list|)
decl_stmt|;
name|p14
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p14
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
comment|/**     * Tests job submission when acls are disabled    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAclsDisabled ()
specifier|public
name|void
name|testAclsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// submit job to queue p1:p11 by any user not in acls-submit-job
name|Job
name|job
init|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u2,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Job submitted for u2 in queue p1:p11 is not successful."
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit job to queue p1:p11 by user in acls-submit-job
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job submitted for u2 in queue p1:p11 is not successful."
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
name|submitSleepJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"u1,g1"
argument_list|,
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// kill the job by any user
specifier|final
name|JobConf
name|jobConf
init|=
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u3"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g3"
block|}
argument_list|)
decl_stmt|;
name|Cluster
name|cluster
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Cluster
argument_list|>
argument_list|()
block|{
specifier|public
name|Cluster
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Cluster
argument_list|(
name|jobConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|JobID
name|jobID
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|//Ensure that the jobinprogress is initied before we issue a kill
comment|//signal to the job.
name|JobInProgress
name|jip
init|=
name|miniMRCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobID
argument_list|)
argument_list|)
decl_stmt|;
name|miniMRCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job submitted for u1 and queue p1:p11 is not killed."
argument_list|,
name|cluster
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|,
operator|(
name|State
operator|.
name|KILLED
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

