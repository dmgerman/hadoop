begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_class
DECL|class|TestClusterStatus
specifier|public
class|class
name|TestClusterStatus
extends|extends
name|TestCase
block|{
DECL|field|trackers
specifier|private
specifier|static
name|String
index|[]
name|trackers
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|,
literal|"tracker_tracker3:1000"
block|}
decl_stmt|;
DECL|field|jobTracker
specifier|private
specifier|static
name|JobTracker
name|jobTracker
decl_stmt|;
DECL|field|mapSlotsPerTracker
specifier|private
specifier|static
name|int
name|mapSlotsPerTracker
init|=
literal|4
decl_stmt|;
DECL|field|reduceSlotsPerTracker
specifier|private
specifier|static
name|int
name|reduceSlotsPerTracker
init|=
literal|2
decl_stmt|;
DECL|field|mr
specifier|private
specifier|static
name|MiniMRCluster
name|mr
decl_stmt|;
DECL|field|fakeJob
specifier|private
specifier|static
name|FakeJobInProgress
name|fakeJob
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|Cluster
name|cluster
decl_stmt|;
comment|// heartbeat responseId. increment this after sending a heartbeat
DECL|field|responseId
specifier|private
specifier|static
name|short
name|responseId
init|=
literal|1
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestClusterStatus
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|JTConfig
operator|.
name|JT_TASK_SCHEDULER
argument_list|,
name|FakeTaskScheduler
operator|.
name|class
argument_list|,
name|TaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
comment|/**    * Fake scheduler to test reservations.    *     * The reservations are updated incrementally in each    * heartbeat to pass through the re-reservation logic.    */
DECL|class|FakeTaskScheduler
specifier|static
class|class
name|FakeTaskScheduler
extends|extends
name|JobQueueTaskScheduler
block|{
DECL|field|reservedCounts
specifier|private
name|Map
argument_list|<
name|TaskTracker
argument_list|,
name|Integer
argument_list|>
name|reservedCounts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskTracker
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FakeTaskScheduler ()
specifier|public
name|FakeTaskScheduler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|assignTasks (TaskTracker tt)
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|tt
parameter_list|)
block|{
name|int
name|currCount
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|reservedCounts
operator|.
name|containsKey
argument_list|(
name|tt
argument_list|)
condition|)
block|{
name|currCount
operator|=
name|reservedCounts
operator|.
name|get
argument_list|(
name|tt
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|reservedCounts
operator|.
name|put
argument_list|(
name|tt
argument_list|,
name|currCount
argument_list|)
expr_stmt|;
name|tt
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|fakeJob
argument_list|,
name|currCount
argument_list|)
expr_stmt|;
name|tt
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|fakeJob
argument_list|,
name|currCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
return|;
block|}
block|}
DECL|method|getTTStatus (String trackerName, List<TaskStatus> taskStatuses)
specifier|private
name|TaskTrackerStatus
name|getTTStatus
parameter_list|(
name|String
name|trackerName
parameter_list|,
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskStatuses
parameter_list|)
block|{
return|return
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackerName
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackerName
argument_list|)
argument_list|,
literal|0
argument_list|,
name|taskStatuses
argument_list|,
literal|0
argument_list|,
name|mapSlotsPerTracker
argument_list|,
name|reduceSlotsPerTracker
argument_list|)
return|;
block|}
DECL|method|testClusterMetrics ()
specifier|public
name|void
name|testClusterMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|assertEquals
argument_list|(
literal|"tasktracker count doesn't match"
argument_list|,
name|trackers
operator|.
name|length
argument_list|,
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a map task status, which uses 2 slots.
name|int
name|mapSlotsPerTask
init|=
literal|2
decl_stmt|;
name|addMapTaskAttemptToList
argument_list|(
name|list
argument_list|,
name|mapSlotsPerTask
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// create a reduce task status, which uses 1 slot.
name|int
name|reduceSlotsPerTask
init|=
literal|1
decl_stmt|;
name|addReduceTaskAttemptToList
argument_list|(
name|list
argument_list|,
name|reduceSlotsPerTask
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// create TaskTrackerStatus and send heartbeats
name|sendHeartbeats
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// assert ClusterMetrics
name|ClusterMetrics
name|metrics
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"occupied map slots do not match"
argument_list|,
name|mapSlotsPerTask
argument_list|,
name|metrics
operator|.
name|getOccupiedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"occupied reduce slots do not match"
argument_list|,
name|reduceSlotsPerTask
argument_list|,
name|metrics
operator|.
name|getOccupiedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map slot capacities do not match"
argument_list|,
name|mapSlotsPerTracker
operator|*
name|trackers
operator|.
name|length
argument_list|,
name|metrics
operator|.
name|getMapSlotCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reduce slot capacities do not match"
argument_list|,
name|reduceSlotsPerTracker
operator|*
name|trackers
operator|.
name|length
argument_list|,
name|metrics
operator|.
name|getReduceSlotCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"running map tasks do not match"
argument_list|,
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"running reduce tasks do not match"
argument_list|,
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert the values in ClusterStatus also
name|assertEquals
argument_list|(
literal|"running map tasks do not match"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"running reduce tasks do not match"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map slot capacities do not match"
argument_list|,
name|mapSlotsPerTracker
operator|*
name|trackers
operator|.
name|length
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaxMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reduce slot capacities do not match"
argument_list|,
name|reduceSlotsPerTracker
operator|*
name|trackers
operator|.
name|length
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaxReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// send a heartbeat finishing only a map and check
comment|// counts are updated.
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addMapTaskAttemptToList
argument_list|(
name|list
argument_list|,
name|mapSlotsPerTask
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|addReduceTaskAttemptToList
argument_list|(
name|list
argument_list|,
name|reduceSlotsPerTask
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|sendHeartbeats
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getOccupiedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceSlotsPerTask
argument_list|,
name|metrics
operator|.
name|getOccupiedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
comment|// send a heartbeat finishing the reduce task also.
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addReduceTaskAttemptToList
argument_list|(
name|list
argument_list|,
name|reduceSlotsPerTask
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|sendHeartbeats
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|jobTracker
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getOccupiedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendHeartbeats (List<TaskStatus> list)
specifier|private
name|void
name|sendHeartbeats
parameter_list|(
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskTrackerStatus
index|[]
name|status
init|=
operator|new
name|TaskTrackerStatus
index|[
name|trackers
operator|.
name|length
index|]
decl_stmt|;
name|status
index|[
literal|0
index|]
operator|=
name|getTTStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|status
index|[
literal|1
index|]
operator|=
name|getTTStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|status
index|[
literal|2
index|]
operator|=
name|getTTStatus
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trackers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FakeObjectUtilities
operator|.
name|sendHeartBeat
argument_list|(
name|jobTracker
argument_list|,
name|status
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|trackers
index|[
name|i
index|]
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
block|}
name|responseId
operator|++
expr_stmt|;
block|}
DECL|method|addReduceTaskAttemptToList (List<TaskStatus> list, int reduceSlotsPerTask, TaskStatus.State state)
specifier|private
name|void
name|addReduceTaskAttemptToList
parameter_list|(
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|list
parameter_list|,
name|int
name|reduceSlotsPerTask
parameter_list|,
name|TaskStatus
operator|.
name|State
name|state
parameter_list|)
block|{
name|TaskStatus
name|ts
init|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
literal|false
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
literal|"jt"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0.0f
argument_list|,
name|reduceSlotsPerTask
argument_list|,
name|state
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|REDUCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|addMapTaskAttemptToList (List<TaskStatus> list, int mapSlotsPerTask, TaskStatus.State state)
specifier|private
name|void
name|addMapTaskAttemptToList
parameter_list|(
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|list
parameter_list|,
name|int
name|mapSlotsPerTask
parameter_list|,
name|TaskStatus
operator|.
name|State
name|state
parameter_list|)
block|{
name|TaskStatus
name|ts
init|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
literal|"jt"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0.0f
argument_list|,
name|mapSlotsPerTask
argument_list|,
name|state
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|MAP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|testReservedSlots ()
specifier|public
name|void
name|testReservedSlots
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//Set task tracker objects for reservation.
name|TaskTracker
name|tt1
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt2
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status1
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|status2
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|tt1
operator|.
name|setStatus
argument_list|(
name|status1
argument_list|)
expr_stmt|;
name|tt2
operator|.
name|setStatus
argument_list|(
name|status2
argument_list|)
expr_stmt|;
name|fakeJob
operator|=
operator|new
name|FakeJobInProgress
argument_list|(
operator|new
name|JobConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|jobTracker
argument_list|)
expr_stmt|;
name|fakeJob
operator|.
name|setClusterSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fakeJob
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|FakeObjectUtilities
operator|.
name|sendHeartBeat
argument_list|(
name|jobTracker
argument_list|,
name|status1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
name|FakeObjectUtilities
operator|.
name|sendHeartBeat
argument_list|(
name|jobTracker
argument_list|,
name|status2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
name|responseId
operator|++
expr_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|2
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|2
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
comment|// redo to test re-reservations.
name|FakeObjectUtilities
operator|.
name|sendHeartBeat
argument_list|(
name|jobTracker
argument_list|,
name|status1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
name|FakeObjectUtilities
operator|.
name|sendHeartBeat
argument_list|(
name|jobTracker
argument_list|,
name|status2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
name|responseId
operator|++
expr_stmt|;
name|metrics
operator|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|mTid
init|=
name|fakeJob
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|rTid
init|=
name|fakeJob
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|fakeJob
operator|.
name|finishTask
argument_list|(
name|mTid
argument_list|)
expr_stmt|;
name|fakeJob
operator|.
name|finishTask
argument_list|(
name|rTid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job didnt complete successfully complete"
argument_list|,
name|fakeJob
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved map slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reserved reduce slots do not match"
argument_list|,
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

