begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_comment
comment|//import org.apache.hadoop.classification.InterfaceAudience.Private;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|//@Private
end_comment

begin_class
DECL|class|QueueManagerTestUtils
specifier|public
class|class
name|QueueManagerTestUtils
block|{
comment|/**    * Queue-configuration file for tests that start a cluster and wish to modify    * the queue configuration. This file is always in the unit tests classpath,    * so QueueManager started through JobTracker will automatically pick this up.    */
DECL|field|QUEUES_CONFIG_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|QUEUES_CONFIG_FILE_PATH
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
argument_list|,
name|QueueManager
operator|.
name|QUEUE_CONF_FILE_NAME
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueueManagerTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create and return a new instance of a DOM Document object to build a queue    * tree with.    *     * @return the created {@link Document}    * @throws Exception    */
DECL|method|createDocument ()
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|createSimpleDocument (Document doc)
specifier|public
specifier|static
name|void
name|createSimpleDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Create parent level queue q1.
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"maxCapacity"
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createProperties
argument_list|(
name|doc
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
comment|// Create another parent level p1
name|Element
name|p1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
comment|// append child p11 to p1
name|p1
operator|.
name|appendChild
argument_list|(
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p11"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|p12
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p12"
argument_list|)
decl_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
literal|"u1"
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
literal|"u2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append p12 to p1.
name|p1
operator|.
name|appendChild
argument_list|(
name|p12
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
DECL|method|createSimpleDocumentWithAcls (Document doc)
specifier|static
name|void
name|createSimpleDocumentWithAcls
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Create parent level queue q1.
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"maxCapacity"
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createProperties
argument_list|(
name|doc
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
comment|// Create another parent level p1
name|Element
name|p1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
comment|// append child p11 to p1
name|Element
name|p11
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p11"
argument_list|)
decl_stmt|;
name|p11
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
literal|"u1"
argument_list|)
argument_list|)
expr_stmt|;
name|p11
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
literal|"u2"
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p11
argument_list|)
expr_stmt|;
comment|// append child p12 to p1
name|Element
name|p12
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p12"
argument_list|)
decl_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p12
argument_list|)
expr_stmt|;
comment|// append child p13 to p1
name|Element
name|p13
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p13"
argument_list|)
decl_stmt|;
name|p13
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p13
argument_list|)
expr_stmt|;
comment|// append child p14 to p1
name|Element
name|p14
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p14"
argument_list|)
decl_stmt|;
name|p14
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p14
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates all given queues as 1st level queues(no nesting)    * @param doc         the queues config document    * @param queueNames  the queues to be added to the queues config document    * @param submitAcls  acl-submit-job acls for each of the queues    * @param adminsAcls  acl-administer-jobs acls for each of the queues    * @throws Exception    */
DECL|method|createSimpleDocument (Document doc, String[] queueNames, String[] submitAcls, String[] adminsAcls)
specifier|public
specifier|static
name|void
name|createSimpleDocument
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
index|[]
name|queueNames
parameter_list|,
name|String
index|[]
name|submitAcls
parameter_list|,
name|String
index|[]
name|adminsAcls
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Create all queues as 1st level queues(no nesting)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|q
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
name|queueNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|q
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_SUBMIT_JOB_TAG
argument_list|,
name|submitAcls
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
name|QueueConfigurationParser
operator|.
name|ACL_ADMINISTER_JOB_TAG
argument_list|,
name|adminsAcls
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates queues configuration file with given queues at 1st level(i.e.    * no nesting of queues) and with the given queue acls.    * @param queueNames        queue names which are to be configured    * @param submitAclStrings  acl-submit-job acls for each of the queues    * @param adminsAclStrings  acl-administer-jobs acls for each of the queues    * @return Configuration    the queues configuration    * @throws Exception    */
DECL|method|createQueuesConfigFile (String[] queueNames, String[] submitAclStrings, String[] adminsAclStrings)
specifier|public
specifier|static
name|void
name|createQueuesConfigFile
parameter_list|(
name|String
index|[]
name|queueNames
parameter_list|,
name|String
index|[]
name|submitAclStrings
parameter_list|,
name|String
index|[]
name|adminsAclStrings
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|queueNames
operator|.
name|length
operator|>
name|submitAclStrings
operator|.
name|length
operator|||
name|queueNames
operator|.
name|length
operator|>
name|adminsAclStrings
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Number of queues is more than acls given."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|,
name|queueNames
argument_list|,
name|submitAclStrings
argument_list|,
name|adminsAclStrings
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshSimpleDocument (Document doc)
specifier|public
specifier|static
name|void
name|refreshSimpleDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// Create parent level queue q1.
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"maxCapacity"
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createProperties
argument_list|(
name|doc
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
comment|// Create another parent level p1
name|Element
name|p1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
comment|// append child p11 to p1
name|Element
name|p11
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p11"
argument_list|)
decl_stmt|;
name|p11
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|appendChild
argument_list|(
name|p11
argument_list|)
expr_stmt|;
name|Element
name|p12
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p12"
argument_list|)
decl_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createState
argument_list|(
name|doc
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
literal|"acl-submit-job"
argument_list|,
literal|"u3"
argument_list|)
argument_list|)
expr_stmt|;
name|p12
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
literal|"acl-administer-jobs"
argument_list|,
literal|"u4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append p12 to p1.
name|p1
operator|.
name|appendChild
argument_list|(
name|p12
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the root<queues></queues> element along with the    *<aclsEnabled></aclsEnabled> element.    *     * @param doc    * @param enable    * @return the created element.    */
DECL|method|createQueuesNode (Document doc)
specifier|public
specifier|static
name|Element
name|createQueuesNode
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Element
name|queues
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"queues"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|queues
argument_list|)
expr_stmt|;
return|return
name|queues
return|;
block|}
DECL|method|writeToFile (Document doc, String filePath)
specifier|public
specifier|static
name|void
name|writeToFile
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|trans
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|trans
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|trans
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|trans
operator|.
name|transform
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createQueue (Document doc, String name)
specifier|public
specifier|static
name|Element
name|createQueue
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Element
name|queue
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
name|Element
name|nameNode
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|nameNode
operator|.
name|setTextContent
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|queue
operator|.
name|appendChild
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
DECL|method|createAcls (Document doc, String aclName, String listNames)
specifier|public
specifier|static
name|Element
name|createAcls
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|aclName
parameter_list|,
name|String
name|listNames
parameter_list|)
block|{
name|Element
name|acls
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|aclName
argument_list|)
decl_stmt|;
name|acls
operator|.
name|setTextContent
argument_list|(
name|listNames
argument_list|)
expr_stmt|;
return|return
name|acls
return|;
block|}
DECL|method|createState (Document doc, String state)
specifier|public
specifier|static
name|Element
name|createState
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|state
parameter_list|)
block|{
name|Element
name|stateElement
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
name|stateElement
operator|.
name|setTextContent
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|stateElement
return|;
block|}
DECL|method|createProperties (Document doc, Properties props)
specifier|public
specifier|static
name|Element
name|createProperties
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|Element
name|propsElement
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|propList
init|=
name|props
operator|.
name|stringPropertyNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|propList
control|)
block|{
name|Element
name|property
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"property"
argument_list|)
decl_stmt|;
name|property
operator|.
name|setAttribute
argument_list|(
literal|"key"
argument_list|,
name|prop
argument_list|)
expr_stmt|;
name|property
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
name|propsElement
operator|.
name|appendChild
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propsElement
return|;
block|}
comment|/**    * Delete queues configuration file if exists    */
DECL|method|deleteQueuesConfigFile ()
specifier|public
specifier|static
name|void
name|deleteQueuesConfigFile
parameter_list|()
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
operator|new
name|File
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write the given queueHierarchy to the given file.    *     * @param filePath    *     * @param rootQueues    * @throws Exception    */
DECL|method|writeQueueConfigurationFile (String filePath, JobQueueInfo[] rootQueues)
specifier|public
specifier|static
name|void
name|writeQueueConfigurationFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|JobQueueInfo
index|[]
name|rootQueues
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|queueElements
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|rootQ
range|:
name|rootQueues
control|)
block|{
name|queueElements
operator|.
name|appendChild
argument_list|(
name|QueueConfigurationParser
operator|.
name|getQueueElement
argument_list|(
name|doc
argument_list|,
name|rootQ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
DECL|method|submitSleepJob (final int numMappers, final int numReducers, final long mapSleepTime, final long reduceSleepTime, boolean shouldComplete, String userInfo, String queueName, Configuration clientConf)
specifier|static
name|Job
name|submitSleepJob
parameter_list|(
specifier|final
name|int
name|numMappers
parameter_list|,
specifier|final
name|int
name|numReducers
parameter_list|,
specifier|final
name|long
name|mapSleepTime
parameter_list|,
specifier|final
name|long
name|reduceSleepTime
parameter_list|,
name|boolean
name|shouldComplete
parameter_list|,
name|String
name|userInfo
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Configuration
name|clientConf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|clientConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|CLASSIC_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:"
operator|+
name|miniMRCluster
operator|.
name|getJobTrackerPort
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|splits
init|=
name|userInfo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|groups
init|=
operator|new
name|String
index|[
name|splits
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splits
argument_list|,
literal|1
argument_list|,
name|groups
argument_list|,
literal|0
argument_list|,
name|splits
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|queueName
operator|!=
literal|null
condition|)
block|{
name|clientConf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|QUEUE_NAME
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SleepJob
name|sleep
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleep
operator|.
name|setConf
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sleep
operator|.
name|createJob
argument_list|(
name|numMappers
argument_list|,
name|numReducers
argument_list|,
name|mapSleepTime
argument_list|,
operator|(
name|int
operator|)
name|mapSleepTime
argument_list|,
name|reduceSleepTime
argument_list|,
operator|(
name|int
operator|)
name|reduceSleepTime
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldComplete
condition|)
block|{
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// miniMRCluster.getJobTrackerRunner().getJobTracker().jobsToComplete()[]
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
index|[]
name|status
init|=
name|miniMRCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|jobsToComplete
argument_list|()
decl_stmt|;
name|JobID
name|id
init|=
name|status
index|[
name|status
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|Job
name|newJob
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newJob
return|;
block|}
return|return
name|job
return|;
block|}
DECL|field|miniMRCluster
specifier|static
name|MiniMRCluster
name|miniMRCluster
decl_stmt|;
block|}
end_class

end_unit

