begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|QUEUES_CONFIG_FILE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createSimpleDocumentWithAcls
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|miniMRCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|deleteQueuesConfigFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|writeToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_class
DECL|class|TestJobQueueClient
specifier|public
class|class
name|TestJobQueueClient
block|{
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueOrdering ()
specifier|public
name|void
name|testQueueOrdering
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create some sample queues in a hierarchy..
name|JobQueueInfo
index|[]
name|roots
init|=
operator|new
name|JobQueueInfo
index|[
literal|2
index|]
decl_stmt|;
name|roots
index|[
literal|0
index|]
operator|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1"
argument_list|,
literal|"q1 scheduling info"
argument_list|)
expr_stmt|;
name|roots
index|[
literal|1
index|]
operator|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|"q2 scheduling info"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1:1"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1:2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|roots
index|[
literal|0
index|]
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
comment|// test dfs ordering
name|JobQueueClient
name|client
init|=
operator|new
name|JobQueueClient
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|allQueues
init|=
name|client
operator|.
name|expandQueueList
argument_list|(
name|roots
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q1"
argument_list|,
name|allQueues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q1:1"
argument_list|,
name|allQueues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q1:2"
argument_list|,
name|allQueues
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q2"
argument_list|,
name|allQueues
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueInfoPrinting ()
specifier|public
name|void
name|testQueueInfoPrinting
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a test queue with children.
comment|// create some sample queues in a hierarchy..
name|JobQueueInfo
name|root
init|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1"
argument_list|,
literal|"q1 scheduling info"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1:1"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|JobQueueInfo
argument_list|(
literal|"q1:2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|JobQueueClient
name|client
init|=
operator|new
name|JobQueueClient
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|client
operator|.
name|printJobQueueInfo
argument_list|(
name|root
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Queue Name : q1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Queue State : running"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Scheduling Info : q1 scheduling info"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Queue Name : q1:1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Queue Name : q1:2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueue ()
specifier|public
name|void
name|testGetQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocumentWithAcls
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|String
name|namenode
init|=
literal|"file:///"
decl_stmt|;
name|miniMRCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
name|namenode
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// test for existing queue
name|QueueInfo
name|queueInfo
init|=
name|jc
operator|.
name|getQueueInfo
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"q1"
argument_list|,
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// try getting a non-existing queue
name|queueInfo
operator|=
name|jc
operator|.
name|getQueueInfo
argument_list|(
literal|"queue"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

