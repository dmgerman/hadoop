begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_comment
comment|/**  * Unit test to test if the JobHistory writer/parser is able to handle  * values with special characters  * This test also tests if the job history module is able to gracefully  * ignore events after the event writer is closed  *  */
end_comment

begin_class
DECL|class|TestJobHistoryParsing
specifier|public
class|class
name|TestJobHistoryParsing
extends|extends
name|TestCase
block|{
DECL|method|testHistoryParsing ()
specifier|public
name|void
name|testHistoryParsing
parameter_list|()
throws|throws
name|IOException
block|{
comment|// open a test history file
name|Path
name|historyDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"history"
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.job.history.location"
argument_list|,
name|historyDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Some weird strings
name|String
name|username
init|=
literal|"user"
decl_stmt|;
name|String
name|weirdJob
init|=
literal|"Value has \n new line \n and "
operator|+
literal|"dot followed by new line .\n in it +"
operator|+
literal|"ends with escape\\"
decl_stmt|;
name|String
name|weirdPath
init|=
literal|"Value has characters: "
operator|+
literal|"`1234567890-=qwertyuiop[]\\asdfghjkl;'zxcvbnm,./"
operator|+
literal|"~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"'ZXCVBNM<>?"
operator|+
literal|"\t\b\n\f\"\n in it"
decl_stmt|;
name|String
name|weirdJobQueueName
init|=
literal|"my\njob\nQueue\\"
decl_stmt|;
name|conf
operator|.
name|setUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobHistory
name|jh
init|=
name|jt
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
name|jh
operator|.
name|init
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|,
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_200809171136_0001"
argument_list|)
decl_stmt|;
name|jh
operator|.
name|setupEventWriter
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|AccessControlList
name|viewJobACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|"user1,user2 group1,group2"
argument_list|)
decl_stmt|;
name|AccessControlList
name|modifyJobACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|"user3,user4 group3, group4"
argument_list|)
decl_stmt|;
name|jobACLs
operator|.
name|put
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|viewJobACL
argument_list|)
expr_stmt|;
name|jobACLs
operator|.
name|put
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|,
name|modifyJobACL
argument_list|)
expr_stmt|;
name|JobSubmittedEvent
name|jse
init|=
operator|new
name|JobSubmittedEvent
argument_list|(
name|jobId
argument_list|,
name|weirdJob
argument_list|,
name|username
argument_list|,
literal|12345
argument_list|,
name|weirdPath
argument_list|,
name|jobACLs
argument_list|,
name|weirdJobQueueName
argument_list|)
decl_stmt|;
name|jh
operator|.
name|logEvent
argument_list|(
name|jse
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|JobFinishedEvent
name|jfe
init|=
operator|new
name|JobFinishedEvent
argument_list|(
name|jobId
argument_list|,
literal|12346
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
decl_stmt|;
name|jh
operator|.
name|logEvent
argument_list|(
name|jfe
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|jh
operator|.
name|closeWriter
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// Try to write one more event now, should not fail
name|TaskID
name|tid
init|=
name|TaskID
operator|.
name|forName
argument_list|(
literal|"task_200809171136_0001_m_000002"
argument_list|)
decl_stmt|;
name|TaskFinishedEvent
name|tfe
init|=
operator|new
name|TaskFinishedEvent
argument_list|(
name|tid
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|jh
operator|.
name|logEvent
argument_list|(
name|tfe
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Writing an event after closing event writer is not handled"
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
name|String
name|historyFileName
init|=
name|jobId
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|username
decl_stmt|;
name|Path
name|historyFilePath
init|=
operator|new
name|Path
argument_list|(
name|historyDir
operator|.
name|toString
argument_list|()
argument_list|,
name|historyFileName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"History File is "
operator|+
name|historyFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fs
argument_list|,
name|historyFilePath
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getUsername
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getJobname
argument_list|()
operator|.
name|equals
argument_list|(
name|weirdJob
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getJobQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|weirdJobQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getJobConfPath
argument_list|()
operator|.
name|equals
argument_list|(
name|weirdPath
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|parsedACLs
init|=
name|jobInfo
operator|.
name|getJobACLs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parsedACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|viewJobACL
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parsedACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|modifyJobACL
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

