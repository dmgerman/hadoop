begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|ShuffleServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|OutputRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestShuffleExceptionCount
specifier|public
class|class
name|TestShuffleExceptionCount
block|{
DECL|class|TestMapOutputServlet
specifier|public
specifier|static
class|class
name|TestMapOutputServlet
extends|extends
name|TaskTracker
operator|.
name|MapOutputServlet
block|{
DECL|method|checkException (IOException ie, String exceptionMsgRegex, String exceptionStackRegex, ShuffleServerMetrics shuffleMetrics)
specifier|public
name|void
name|checkException
parameter_list|(
name|IOException
name|ie
parameter_list|,
name|String
name|exceptionMsgRegex
parameter_list|,
name|String
name|exceptionStackRegex
parameter_list|,
name|ShuffleServerMetrics
name|shuffleMetrics
parameter_list|)
block|{
name|super
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCheckException ()
specifier|public
name|void
name|testCheckException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|TestMapOutputServlet
name|testServlet
init|=
operator|new
name|TestMapOutputServlet
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setUser
argument_list|(
literal|"testuser"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"testJob"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setSessionId
argument_list|(
literal|"testSession"
argument_list|)
expr_stmt|;
comment|// setup metrics context factory
name|ContextFactory
name|factory
init|=
name|ContextFactory
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"mapred.class"
argument_list|,
literal|"org.apache.hadoop.metrics.spi.NoEmitMetricsContext"
argument_list|)
expr_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|tt
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ShuffleServerMetrics
name|shuffleMetrics
init|=
name|tt
operator|.
expr|new
name|ShuffleServerMetrics
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// first test with only MsgRegex set but doesn't match
name|String
name|exceptionMsgRegex
init|=
literal|"Broken pipe"
decl_stmt|;
name|String
name|exceptionStackRegex
init|=
literal|null
decl_stmt|;
name|IOException
name|ie
init|=
operator|new
name|IOException
argument_list|(
literal|"EOFException"
argument_list|)
decl_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|MetricsContext
name|context
init|=
name|factory
operator|.
name|getContext
argument_list|(
literal|"mapred"
argument_list|)
decl_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OutputRecord
argument_list|>
argument_list|>
name|records
init|=
name|context
operator|.
name|getAllRecords
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|OutputRecord
argument_list|>
name|col
init|=
name|records
operator|.
name|get
argument_list|(
literal|"shuffleOutput"
argument_list|)
decl_stmt|;
name|OutputRecord
name|outputRecord
init|=
name|col
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with only MsgRegex set that does match
name|ie
operator|=
operator|new
name|IOException
argument_list|(
literal|"Broken pipe"
argument_list|)
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with neither set, make sure incremented
name|exceptionStackRegex
operator|=
literal|null
expr_stmt|;
name|exceptionMsgRegex
operator|=
literal|null
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with only StackRegex set doesn't match
name|exceptionStackRegex
operator|=
literal|".*\\.doesnt\\$SelectSet\\.wakeup.*"
expr_stmt|;
name|exceptionMsgRegex
operator|=
literal|null
expr_stmt|;
name|ie
operator|.
name|setStackTrace
argument_list|(
name|constructStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with only StackRegex set does match
name|exceptionStackRegex
operator|=
literal|".*\\.SelectorManager\\$SelectSet\\.wakeup.*"
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with both regex set and matches
name|exceptionMsgRegex
operator|=
literal|"Broken pipe"
expr_stmt|;
name|ie
operator|.
name|setStackTrace
argument_list|(
name|constructStackTraceTwo
argument_list|()
argument_list|)
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with both regex set and only msg matches
name|exceptionStackRegex
operator|=
literal|".*[1-9]+BOGUSREGEX"
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with both regex set and only stack matches
name|exceptionStackRegex
operator|=
literal|".*\\.SelectorManager\\$SelectSet\\.wakeup.*"
expr_stmt|;
name|exceptionMsgRegex
operator|=
literal|"EOFException"
expr_stmt|;
name|testServlet
operator|.
name|checkException
argument_list|(
name|ie
argument_list|,
name|exceptionMsgRegex
argument_list|,
name|exceptionStackRegex
argument_list|,
name|shuffleMetrics
argument_list|)
expr_stmt|;
name|shuffleMetrics
operator|.
name|doUpdates
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outputRecord
operator|.
name|getMetric
argument_list|(
literal|"shuffle_exceptions_caught"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Construction exception like: java.io.IOException: Broken pipe at    * sun.nio.ch.EPollArrayWrapper.interrupt(Native Method) at    * sun.nio.ch.EPollArrayWrapper.interrupt(EPollArrayWrapper.java:256) at    * sun.nio.ch.EPollSelectorImpl.wakeup(EPollSelectorImpl.java:175) at    * org.mortbay    * .io.nio.SelectorManager$SelectSet.wakeup(SelectorManager.java:831) at    * org.mortbay    * .io.nio.SelectorManager$SelectSet.doSelect(SelectorManager.java:709) at    * org.mortbay.io.nio.SelectorManager.doSelect(SelectorManager.java:192) at    * org    * .mortbay.jetty.nio.SelectChannelConnector.accept(SelectChannelConnector.java    * :124) at    * org.mortbay.jetty.AbstractConnector$Acceptor.run(AbstractConnector.    * java:708) at    * org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool    * .java:582)    */
DECL|method|constructStackTrace ()
specifier|private
name|StackTraceElement
index|[]
name|constructStackTrace
parameter_list|()
block|{
name|StackTraceElement
index|[]
name|stack
init|=
operator|new
name|StackTraceElement
index|[
literal|9
index|]
decl_stmt|;
name|stack
index|[
literal|0
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollArrayWrapper"
argument_list|,
literal|"interrupt"
argument_list|,
literal|""
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|stack
index|[
literal|1
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollArrayWrapper"
argument_list|,
literal|"interrupt"
argument_list|,
literal|"EPollArrayWrapper.java"
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|stack
index|[
literal|2
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollSelectorImpl"
argument_list|,
literal|"wakeup"
argument_list|,
literal|"EPollSelectorImpl.java"
argument_list|,
literal|175
argument_list|)
expr_stmt|;
name|stack
index|[
literal|3
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectorManager$SelectSet"
argument_list|,
literal|"wakeup"
argument_list|,
literal|"SelectorManager.java"
argument_list|,
literal|831
argument_list|)
expr_stmt|;
name|stack
index|[
literal|4
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectorManager$SelectSet"
argument_list|,
literal|"doSelect"
argument_list|,
literal|"SelectorManager.java"
argument_list|,
literal|709
argument_list|)
expr_stmt|;
name|stack
index|[
literal|5
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectorManager"
argument_list|,
literal|"doSelect"
argument_list|,
literal|"SelectorManager.java"
argument_list|,
literal|192
argument_list|)
expr_stmt|;
name|stack
index|[
literal|6
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.nio.SelectChannelConnector"
argument_list|,
literal|"accept"
argument_list|,
literal|"SelectChannelConnector.java"
argument_list|,
literal|124
argument_list|)
expr_stmt|;
name|stack
index|[
literal|7
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.AbstractConnector$Acceptor"
argument_list|,
literal|"run"
argument_list|,
literal|"AbstractConnector.java"
argument_list|,
literal|708
argument_list|)
expr_stmt|;
name|stack
index|[
literal|8
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.thread.QueuedThreadPool$PoolThread"
argument_list|,
literal|"run"
argument_list|,
literal|"QueuedThreadPool.java"
argument_list|,
literal|582
argument_list|)
expr_stmt|;
return|return
name|stack
return|;
block|}
comment|/*    * java.io.IOException: Broken pipe at    * sun.nio.ch.EPollArrayWrapper.interrupt(Native Method) at    * sun.nio.ch.EPollArrayWrapper.interrupt(EPollArrayWrapper.java:256) at    * sun.nio.ch.EPollSelectorImpl.wakeup(EPollSelectorImpl.java:175) at    * org.mortbay    * .io.nio.SelectorManager$SelectSet.wakeup(SelectorManager.java:831) at    * org.mortbay    * .io.nio.SelectChannelEndPoint.updateKey(SelectChannelEndPoint.java:335) at    * org    * .mortbay.io.nio.SelectChannelEndPoint.blockWritable(SelectChannelEndPoint    * .java:278) at    * org.mortbay.jetty.AbstractGenerator$Output.blockForOutput(AbstractGenerator    * .java:545) at    * org.mortbay.jetty.AbstractGenerator$Output.flush(AbstractGenerator    * .java:572) at    * org.mortbay.jetty.HttpConnection$Output.flush(HttpConnection.java:1012) at    * org    * .mortbay.jetty.AbstractGenerator$Output.write(AbstractGenerator.java:651)at    * org    * .mortbay.jetty.AbstractGenerator$Output.write(AbstractGenerator.java:580)    * at    */
DECL|method|constructStackTraceTwo ()
specifier|private
name|StackTraceElement
index|[]
name|constructStackTraceTwo
parameter_list|()
block|{
name|StackTraceElement
index|[]
name|stack
init|=
operator|new
name|StackTraceElement
index|[
literal|11
index|]
decl_stmt|;
name|stack
index|[
literal|0
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollArrayWrapper"
argument_list|,
literal|"interrupt"
argument_list|,
literal|""
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|stack
index|[
literal|1
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollArrayWrapper"
argument_list|,
literal|"interrupt"
argument_list|,
literal|"EPollArrayWrapper.java"
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|stack
index|[
literal|2
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"sun.nio.ch.EPollSelectorImpl"
argument_list|,
literal|"wakeup"
argument_list|,
literal|"EPollSelectorImpl.java"
argument_list|,
literal|175
argument_list|)
expr_stmt|;
name|stack
index|[
literal|3
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectorManager$SelectSet"
argument_list|,
literal|"wakeup"
argument_list|,
literal|"SelectorManager.java"
argument_list|,
literal|831
argument_list|)
expr_stmt|;
name|stack
index|[
literal|4
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectChannelEndPoint"
argument_list|,
literal|"updateKey"
argument_list|,
literal|"SelectChannelEndPoint.java"
argument_list|,
literal|335
argument_list|)
expr_stmt|;
name|stack
index|[
literal|5
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.io.nio.SelectChannelEndPoint"
argument_list|,
literal|"blockWritable"
argument_list|,
literal|"SelectChannelEndPoint.java"
argument_list|,
literal|278
argument_list|)
expr_stmt|;
name|stack
index|[
literal|6
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.AbstractGenerator$Output"
argument_list|,
literal|"blockForOutput"
argument_list|,
literal|"AbstractGenerator.java"
argument_list|,
literal|545
argument_list|)
expr_stmt|;
name|stack
index|[
literal|7
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.AbstractGenerator$Output"
argument_list|,
literal|"flush"
argument_list|,
literal|"AbstractGenerator.java"
argument_list|,
literal|572
argument_list|)
expr_stmt|;
name|stack
index|[
literal|8
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.HttpConnection$Output"
argument_list|,
literal|"flush"
argument_list|,
literal|"HttpConnection.java"
argument_list|,
literal|1012
argument_list|)
expr_stmt|;
name|stack
index|[
literal|9
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.AbstractGenerator$Output"
argument_list|,
literal|"write"
argument_list|,
literal|"AbstractGenerator.java"
argument_list|,
literal|651
argument_list|)
expr_stmt|;
name|stack
index|[
literal|10
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
literal|"org.mortbay.jetty.AbstractGenerator$Output"
argument_list|,
literal|"write"
argument_list|,
literal|"AbstractGenerator.java"
argument_list|,
literal|580
argument_list|)
expr_stmt|;
return|return
name|stack
return|;
block|}
block|}
end_class

end_unit

