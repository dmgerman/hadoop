begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCompositeTaskTrackerInstrumentation
specifier|public
class|class
name|TestCompositeTaskTrackerInstrumentation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCompositeTaskTrackerInstrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCompositeInstrumentation ()
specifier|public
name|void
name|testCompositeInstrumentation
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create two instrumentation instances
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|DummyTaskTrackerInstrumentation
name|inst1
init|=
operator|new
name|DummyTaskTrackerInstrumentation
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|DummyTaskTrackerInstrumentation
name|inst2
init|=
operator|new
name|DummyTaskTrackerInstrumentation
argument_list|(
name|tt
argument_list|)
decl_stmt|;
comment|// Add them to a composite object
name|ArrayList
argument_list|<
name|TaskTrackerInstrumentation
argument_list|>
name|insts
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerInstrumentation
argument_list|>
argument_list|()
decl_stmt|;
name|insts
operator|.
name|add
argument_list|(
name|inst1
argument_list|)
expr_stmt|;
name|insts
operator|.
name|add
argument_list|(
name|inst2
argument_list|)
expr_stmt|;
name|CompositeTaskTrackerInstrumentation
name|comp
init|=
operator|new
name|CompositeTaskTrackerInstrumentation
argument_list|(
name|tt
argument_list|,
name|insts
argument_list|)
decl_stmt|;
comment|// Create some dummy objects to pass to instrumentation methods
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|()
decl_stmt|;
name|TaskStatus
name|status
init|=
operator|new
name|MapTaskStatus
argument_list|()
decl_stmt|;
comment|// Test that completeTask propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|completeTaskCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|completeTaskCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|completeTask
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|completeTaskCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|completeTaskCalled
argument_list|)
expr_stmt|;
comment|// Test that timedoutTask propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|timedoutTaskCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|timedoutTaskCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|timedoutTask
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|timedoutTaskCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|timedoutTaskCalled
argument_list|)
expr_stmt|;
comment|// Test that taskFailedPing propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|taskFailedPingCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|taskFailedPingCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|taskFailedPing
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|taskFailedPingCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|taskFailedPingCalled
argument_list|)
expr_stmt|;
comment|// Test that reportTaskLaunch propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|reportTaskLaunchCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|reportTaskLaunchCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|reportTaskLaunch
argument_list|(
name|tid
argument_list|,
name|file
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|reportTaskLaunchCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|reportTaskLaunchCalled
argument_list|)
expr_stmt|;
comment|// Test that reportTaskEnd propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|reportTaskEndCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|reportTaskEndCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|reportTaskEnd
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|reportTaskEndCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|reportTaskEndCalled
argument_list|)
expr_stmt|;
comment|// Test that statusUpdate propagates to listeners
name|assertFalse
argument_list|(
name|inst1
operator|.
name|statusUpdateCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst2
operator|.
name|statusUpdateCalled
argument_list|)
expr_stmt|;
name|comp
operator|.
name|statusUpdate
argument_list|(
name|task
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst1
operator|.
name|statusUpdateCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst2
operator|.
name|statusUpdateCalled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

