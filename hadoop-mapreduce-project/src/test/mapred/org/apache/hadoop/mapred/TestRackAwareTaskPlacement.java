begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTrackerMetricsInst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StaticMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test configured task limits.  */
end_comment

begin_class
DECL|class|TestRackAwareTaskPlacement
specifier|public
class|class
name|TestRackAwareTaskPlacement
extends|extends
name|TestCase
block|{
DECL|field|trackers
specifier|static
name|String
name|trackers
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1.r1.com:1000"
block|,
literal|"tracker_tracker2.r1.com:1000"
block|,
literal|"tracker_tracker3.r2.com:1000"
block|,
literal|"tracker_tracker4.r3.com:1000"
block|}
decl_stmt|;
DECL|field|allHosts
specifier|static
name|String
index|[]
name|allHosts
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker1.r1.com"
block|,
literal|"tracker2.r1.com"
block|,
literal|"tracker3.r2.com"
block|,
literal|"tracker4.r3.com"
block|}
decl_stmt|;
DECL|field|allRacks
specifier|static
name|String
index|[]
name|allRacks
init|=
operator|new
name|String
index|[]
block|{
literal|"/r1"
block|,
literal|"/r1"
block|,
literal|"/r2"
block|,
literal|"/r3"
block|}
decl_stmt|;
DECL|field|jobTracker
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
DECL|field|jtIdentifier
specifier|static
name|String
name|jtIdentifier
init|=
literal|"test"
decl_stmt|;
DECL|field|jobCounter
specifier|private
specifier|static
name|int
name|jobCounter
decl_stmt|;
DECL|field|fakeInst
specifier|private
specifier|static
name|FakeJobTrackerMetricsInst
name|fakeInst
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestRackAwareTaskPlacement
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"topology.node.switch.mapping.impl"
argument_list|,
name|StaticMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_INSTRUMENTATION
argument_list|,
name|FakeJobTrackerMetricsInst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeClock
argument_list|()
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|fakeInst
operator|=
operator|(
name|FakeJobTrackerMetricsInst
operator|)
name|jobTracker
operator|.
name|getInstrumentation
argument_list|()
expr_stmt|;
comment|// Set up the Topology Information
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allHosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|allHosts
index|[
name|i
index|]
argument_list|,
name|allRacks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
DECL|class|MyFakeJobInProgress
specifier|static
class|class
name|MyFakeJobInProgress
extends|extends
name|JobInProgress
block|{
DECL|field|jobid
specifier|static
name|JobID
name|jobid
decl_stmt|;
DECL|field|numMaps
name|int
name|numMaps
decl_stmt|;
DECL|method|MyFakeJobInProgress (JobConf jc, JobTracker jt)
name|MyFakeJobInProgress
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|(
name|jobid
operator|=
operator|new
name|JobID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobCounter
operator|++
argument_list|)
operator|)
argument_list|,
name|jc
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
literal|"Dummy"
argument_list|)
decl_stmt|;
name|this
operator|.
name|profile
operator|=
operator|new
name|JobProfile
argument_list|(
name|jc
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobid
argument_list|,
name|jobFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|jc
operator|.
name|getJobName
argument_list|()
argument_list|,
name|jc
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobHistory
operator|=
operator|new
name|FakeJobHistory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskSplitMetaInfo
index|[]
name|taskSplitMetaInfo
init|=
name|createSplits
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|numMapTasks
operator|=
name|taskSplitMetaInfo
operator|.
name|length
expr_stmt|;
name|createMapTasks
argument_list|(
literal|null
argument_list|,
name|taskSplitMetaInfo
argument_list|)
expr_stmt|;
name|nonRunningMapCache
operator|=
name|createCache
argument_list|(
name|taskSplitMetaInfo
argument_list|,
name|maxLevel
argument_list|)
expr_stmt|;
name|tasksInited
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSplits ( org.apache.hadoop.mapreduce.JobID jobId)
specifier|protected
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskSplitMetaInfo
index|[]
name|splits
init|=
operator|new
name|TaskSplitMetaInfo
index|[
name|numMaps
index|]
decl_stmt|;
comment|// Hand code for now.
comment|// M0,2,3 reside in Host1
comment|// M1 resides in Host3
comment|// M4 resides in Host4
name|String
index|[]
name|splitHosts0
init|=
operator|new
name|String
index|[]
block|{
name|allHosts
index|[
literal|0
index|]
block|}
decl_stmt|;
name|String
index|[]
name|splitHosts1
init|=
operator|new
name|String
index|[]
block|{
name|allHosts
index|[
literal|2
index|]
block|}
decl_stmt|;
name|String
index|[]
name|splitHosts2
init|=
operator|new
name|String
index|[]
block|{
name|allHosts
index|[
literal|3
index|]
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|2
operator|||
name|i
operator|==
literal|3
condition|)
block|{
name|splits
index|[
name|i
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|splitHosts0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|splits
index|[
name|i
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|splitHosts1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
name|splits
index|[
name|i
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|splitHosts2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|splits
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testTaskPlacement ()
specifier|public
name|void
name|testTaskPlacement
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"TestTaskPlacement"
argument_list|)
expr_stmt|;
name|MyFakeJobInProgress
name|jip
init|=
operator|new
name|MyFakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|jip
operator|.
name|numMaps
operator|=
literal|5
expr_stmt|;
name|jip
operator|.
name|initTasks
argument_list|()
expr_stmt|;
comment|// Tracker1 should get a rack local
name|TaskTrackerStatus
name|tts
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|allHosts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|jip
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Tracker0 should get a data local
name|tts
operator|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|allHosts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|jip
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Tracker2 should get a data local
name|tts
operator|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|,
name|allHosts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|jip
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Tracker0 should get a data local
name|tts
operator|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|allHosts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|jip
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Tracker1 should not get any locality at all
name|tts
operator|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|allHosts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|jip
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|jip
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of data local maps"
argument_list|,
literal|3
argument_list|,
name|counters
operator|.
name|getCounter
argument_list|(
name|JobCounter
operator|.
name|DATA_LOCAL_MAPS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Rack-local maps"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|getCounter
argument_list|(
name|JobCounter
operator|.
name|RACK_LOCAL_MAPS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Other-local maps"
argument_list|,
literal|0
argument_list|,
name|counters
operator|.
name|getCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also verify jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Number of data local maps"
argument_list|,
literal|3
argument_list|,
name|fakeInst
operator|.
name|numDataLocalMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of rack local maps"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numRackLocalMaps
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

