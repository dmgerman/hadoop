begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|testing
operator|.
name|HttpTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|testing
operator|.
name|ServletTester
import|;
end_import

begin_class
DECL|class|TestTaskLogServlet
specifier|public
class|class
name|TestTaskLogServlet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskLogServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tester
specifier|private
name|ServletTester
name|tester
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|=
operator|new
name|ServletTester
argument_list|()
expr_stmt|;
name|tester
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|tester
operator|.
name|addServlet
argument_list|(
name|TaskLogServlet
operator|.
name|class
argument_list|,
literal|"/tasklog"
argument_list|)
expr_stmt|;
name|tester
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingParameters ()
specifier|public
name|void
name|testMissingParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpTester
name|request
init|=
operator|new
name|HttpTester
argument_list|()
decl_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setVersion
argument_list|(
literal|"HTTP/1.0"
argument_list|)
expr_stmt|;
name|HttpTester
name|response
init|=
operator|new
name|HttpTester
argument_list|()
decl_stmt|;
name|response
operator|.
name|parse
argument_list|(
name|tester
operator|.
name|getResponses
argument_list|(
name|request
operator|.
name|generate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupValidLogs (String attemptIdStr)
specifier|private
name|void
name|setupValidLogs
parameter_list|(
name|String
name|attemptIdStr
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptID
name|attemptId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attemptIdStr
argument_list|)
decl_stmt|;
name|File
name|logDir
init|=
name|TaskLog
operator|.
name|getAttemptDir
argument_list|(
name|attemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|logDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make the logs with some HTML in the output
name|TaskLog
operator|.
name|syncLogs
argument_list|(
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|makeLog
argument_list|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"stderr"
argument_list|)
argument_list|,
literal|"<b>this is stderr"
argument_list|)
expr_stmt|;
name|makeLog
argument_list|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"stdout"
argument_list|)
argument_list|,
literal|"<b>this is stdout"
argument_list|)
expr_stmt|;
name|makeLog
argument_list|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"syslog"
argument_list|)
argument_list|,
literal|"<b>this is syslog"
argument_list|)
expr_stmt|;
name|TaskLog
operator|.
name|syncLogs
argument_list|(
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHtmlLogs ()
specifier|public
name|void
name|testHtmlLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|attemptIdStr
init|=
literal|"attempt_123_0001_m_000001_0"
decl_stmt|;
name|setupValidLogs
argument_list|(
name|attemptIdStr
argument_list|)
expr_stmt|;
name|HttpTester
name|request
init|=
operator|new
name|HttpTester
argument_list|()
decl_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog?attemptid="
operator|+
name|attemptIdStr
argument_list|)
expr_stmt|;
name|request
operator|.
name|setVersion
argument_list|(
literal|"HTTP/1.0"
argument_list|)
expr_stmt|;
comment|// Make sure all the contents show up and properly escaped
name|HttpTester
name|response
init|=
name|doRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html; charset=utf-8"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"&lt;b&gt;this is stderr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"&lt;b&gt;this is stdout"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"&lt;b&gt;this is syslog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only read a small chunk of each file<***b>thi***s
comment|// (should still be escaped)
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog?attemptid="
operator|+
name|attemptIdStr
operator|+
literal|"&start=1&end=6"
argument_list|)
expr_stmt|;
name|response
operator|=
name|doRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html; charset=utf-8"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"&lt;b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"this is"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b&gt;thi</pre>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlaintextLogs ()
specifier|public
name|void
name|testPlaintextLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|attemptIdStr
init|=
literal|"attempt_123_0001_m_000001_0"
decl_stmt|;
name|setupValidLogs
argument_list|(
name|attemptIdStr
argument_list|)
expr_stmt|;
name|HttpTester
name|request
init|=
operator|new
name|HttpTester
argument_list|()
decl_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog?plaintext=true&attemptid="
operator|+
name|attemptIdStr
argument_list|)
expr_stmt|;
name|request
operator|.
name|setVersion
argument_list|(
literal|"HTTP/1.0"
argument_list|)
expr_stmt|;
comment|// Make sure all the contents show up and properly escaped
name|HttpTester
name|response
init|=
name|doRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Bad request because we require a 'filter'
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try again with filter
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog?plaintext=true&filter=stdout&attemptid="
operator|+
name|attemptIdStr
argument_list|)
expr_stmt|;
name|response
operator|=
name|doRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Response should be text/plain, not be escaped
name|assertEquals
argument_list|(
literal|"text/plain; charset=utf-8"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>this is stdout"
argument_list|,
name|response
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test range request
name|request
operator|.
name|setURI
argument_list|(
literal|"/tasklog?plaintext=true&filter=stdout"
operator|+
literal|"&attemptid="
operator|+
name|attemptIdStr
operator|+
literal|"&start=1&end=6"
argument_list|)
expr_stmt|;
name|response
operator|=
name|doRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Response should be text/plain, not be escaped
name|assertEquals
argument_list|(
literal|"text/plain; charset=utf-8"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b>thi"
argument_list|,
name|response
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doRequest (HttpTester request)
specifier|private
name|HttpTester
name|doRequest
parameter_list|(
name|HttpTester
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|reqStr
init|=
name|request
operator|.
name|generate
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing request: "
operator|+
name|reqStr
argument_list|)
expr_stmt|;
name|String
name|respStr
init|=
name|tester
operator|.
name|getResponses
argument_list|(
name|reqStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Response: "
operator|+
name|respStr
argument_list|)
expr_stmt|;
name|HttpTester
name|response
init|=
operator|new
name|HttpTester
argument_list|()
decl_stmt|;
name|response
operator|.
name|parse
argument_list|(
name|respStr
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|makeLog (File f, String contents)
specifier|private
name|void
name|makeLog
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating log at "
operator|+
name|f
argument_list|)
expr_stmt|;
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|fw
operator|.
name|write
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

