begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_comment
comment|/**  * Tests various failures in setup/cleanup of job, like   * throwing exception, command line kill and lost tracker   */
end_comment

begin_class
DECL|class|TestSetupAndCleanupFailure
specifier|public
class|class
name|TestSetupAndCleanupFailure
extends|extends
name|TestCase
block|{
DECL|field|inDir
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./input"
argument_list|)
decl_stmt|;
DECL|field|outDir
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./output"
argument_list|)
decl_stmt|;
DECL|field|setupSignalFile
specifier|static
name|Path
name|setupSignalFile
init|=
operator|new
name|Path
argument_list|(
literal|"/setup-signal"
argument_list|)
decl_stmt|;
DECL|field|cleanupSignalFile
specifier|static
name|Path
name|cleanupSignalFile
init|=
operator|new
name|Path
argument_list|(
literal|"/cleanup-signal"
argument_list|)
decl_stmt|;
comment|// Commiter with setupJob throwing exception
DECL|class|CommitterWithFailSetup
specifier|static
class|class
name|CommitterWithFailSetup
extends|extends
name|FileOutputCommitter
block|{
annotation|@
name|Override
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
comment|// Commiter with commitJob throwing exception
DECL|class|CommitterWithFailCommit
specifier|static
class|class
name|CommitterWithFailCommit
extends|extends
name|FileOutputCommitter
block|{
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
comment|// Committer waits for a file to be created on dfs.
DECL|class|CommitterWithLongSetupAndCommit
specifier|static
class|class
name|CommitterWithLongSetupAndCommit
extends|extends
name|FileOutputCommitter
block|{
DECL|method|waitForSignalFile (FileSystem fs, Path signalFile)
specifier|private
name|void
name|waitForSignalFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|signalFile
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|signalFile
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|waitForSignalFile
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
argument_list|,
name|setupSignalFile
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|waitForSignalFile
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
argument_list|,
name|cleanupSignalFile
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Among these tips only one of the tasks will be running,
comment|// get the taskid for that task
DECL|method|getRunningTaskID (TaskInProgress[] tips)
specifier|private
name|TaskAttemptID
name|getRunningTaskID
parameter_list|(
name|TaskInProgress
index|[]
name|tips
parameter_list|)
block|{
name|TaskAttemptID
name|taskid
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|taskid
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|TaskInProgress
name|tip
range|:
name|tips
control|)
block|{
name|TaskStatus
index|[]
name|statuses
init|=
name|tip
operator|.
name|getTaskStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskStatus
name|status
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|taskid
operator|=
name|status
operator|.
name|getTaskID
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|taskid
operator|!=
literal|null
condition|)
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
return|return
name|taskid
return|;
block|}
comment|// Tests the failures in setup/cleanup job. Job should cleanly fail.
DECL|method|testFailCommitter (Class<? extends OutputCommitter> theClass, JobConf jobConf)
specifier|private
name|void
name|testFailCommitter
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputCommitter
argument_list|>
name|theClass
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|theClass
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
comment|// wait for the job to finish.
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// launch job with CommitterWithLongSetupAndCleanup as committer
comment|// and wait till the job is inited.
DECL|method|launchJobWithWaitingSetupAndCleanup (MiniMRCluster mr)
specifier|private
name|RunningJob
name|launchJobWithWaitingSetupAndCleanup
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|)
throws|throws
name|IOException
block|{
comment|// launch job with waiting setup/cleanup
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithLongSetupAndCommit
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|jip
operator|.
name|inited
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
return|return
name|job
return|;
block|}
comment|/**    * Tests setup and cleanup attempts getting killed from command-line     * and lost tracker    *     * @param mr    * @param dfs    * @param commandLineKill if true, test with command-line kill    *                        else, test with lost tracker    * @throws IOException    */
DECL|method|testSetupAndCleanupKill (MiniMRCluster mr, MiniDFSCluster dfs, boolean commandLineKill)
specifier|private
name|void
name|testSetupAndCleanupKill
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|MiniDFSCluster
name|dfs
parameter_list|,
name|boolean
name|commandLineKill
parameter_list|)
throws|throws
name|IOException
block|{
comment|// launch job with waiting setup/cleanup
name|RunningJob
name|job
init|=
name|launchJobWithWaitingSetupAndCleanup
argument_list|(
name|mr
argument_list|)
decl_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
comment|// get the running setup task id
name|TaskAttemptID
name|setupID
init|=
name|getRunningTaskID
argument_list|(
name|jip
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLineKill
condition|)
block|{
name|killTaskFromCommandLine
argument_list|(
name|job
argument_list|,
name|setupID
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killTaskWithLostTracker
argument_list|(
name|mr
argument_list|,
name|setupID
argument_list|)
expr_stmt|;
block|}
comment|// signal the setup to complete
name|UtilsForTests
operator|.
name|writeFile
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|setupSignalFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// wait for maps and reduces to complete
while|while
condition|(
name|job
operator|.
name|reduceProgress
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
comment|// get the running cleanup task id
name|TaskAttemptID
name|cleanupID
init|=
name|getRunningTaskID
argument_list|(
name|jip
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLineKill
condition|)
block|{
name|killTaskFromCommandLine
argument_list|(
name|job
argument_list|,
name|cleanupID
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killTaskWithLostTracker
argument_list|(
name|mr
argument_list|,
name|cleanupID
argument_list|)
expr_stmt|;
block|}
comment|// signal the cleanup to complete
name|UtilsForTests
operator|.
name|writeFile
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|cleanupSignalFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// wait for the job to finish.
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|,
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|setupID
argument_list|)
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|,
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|cleanupID
argument_list|)
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// kill the task from command-line
comment|// wait till it kill is reported back
DECL|method|killTaskFromCommandLine (RunningJob job, TaskAttemptID taskid, JobTracker jt)
specifier|private
name|void
name|killTaskFromCommandLine
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|TaskAttemptID
name|taskid
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|killTask
argument_list|(
name|taskid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait till the kill happens
while|while
condition|(
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|taskid
argument_list|)
operator|.
name|getRunState
argument_list|()
operator|!=
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
block|}
comment|// kill the task by losing the tracker
DECL|method|killTaskWithLostTracker (MiniMRCluster mr, TaskAttemptID taskid)
specifier|private
name|void
name|killTaskWithLostTracker
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|TaskAttemptID
name|taskid
parameter_list|)
block|{
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|String
name|trackerName
init|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|taskid
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
decl_stmt|;
name|int
name|trackerID
init|=
name|mr
operator|.
name|getTaskTrackerID
argument_list|(
name|trackerName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|trackerID
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|mr
operator|.
name|stopTaskTracker
argument_list|(
name|trackerID
argument_list|)
expr_stmt|;
block|}
comment|// Tests the failures in setup/cleanup job. Job should cleanly fail.
comment|// Also Tests the command-line kill for setup/cleanup attempts.
comment|// tests the setup/cleanup attempts getting killed if
comment|// they were running on a lost tracker
DECL|method|testWithDFS ()
specifier|public
name|void
name|testWithDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|JobConf
name|jtConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jtConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_TRACKER_EXPIRY_INTERVAL
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jtConf
argument_list|)
expr_stmt|;
comment|// test setup/cleanup throwing exceptions
name|testFailCommitter
argument_list|(
name|CommitterWithFailSetup
operator|.
name|class
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|testFailCommitter
argument_list|(
name|CommitterWithFailCommit
operator|.
name|class
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the command-line kill for setup/cleanup attempts.
name|testSetupAndCleanupKill
argument_list|(
name|mr
argument_list|,
name|dfs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// remove setup/cleanup signal files.
name|fileSys
operator|.
name|delete
argument_list|(
name|setupSignalFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|cleanupSignalFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test the setup/cleanup attempts getting killed if
comment|// they were running on a lost tracker
name|testSetupAndCleanupKill
argument_list|(
name|mr
argument_list|,
name|dfs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|TestSetupAndCleanupFailure
name|td
init|=
operator|new
name|TestSetupAndCleanupFailure
argument_list|()
decl_stmt|;
name|td
operator|.
name|testWithDFS
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

