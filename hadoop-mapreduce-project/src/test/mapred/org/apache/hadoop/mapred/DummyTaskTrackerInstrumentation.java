begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Mock instrumentation class used in TaskTrackerInstrumentation tests.  * This class just records whether each instrumentation method was called.  */
end_comment

begin_class
DECL|class|DummyTaskTrackerInstrumentation
specifier|public
class|class
name|DummyTaskTrackerInstrumentation
extends|extends
name|TaskTrackerInstrumentation
block|{
DECL|field|completeTaskCalled
name|boolean
name|completeTaskCalled
init|=
literal|false
decl_stmt|;
DECL|field|timedoutTaskCalled
name|boolean
name|timedoutTaskCalled
init|=
literal|false
decl_stmt|;
DECL|field|taskFailedPingCalled
name|boolean
name|taskFailedPingCalled
init|=
literal|false
decl_stmt|;
DECL|field|reportTaskLaunchCalled
name|boolean
name|reportTaskLaunchCalled
init|=
literal|false
decl_stmt|;
DECL|field|reportTaskEndCalled
name|boolean
name|reportTaskEndCalled
init|=
literal|false
decl_stmt|;
DECL|field|statusUpdateCalled
name|boolean
name|statusUpdateCalled
init|=
literal|false
decl_stmt|;
DECL|method|DummyTaskTrackerInstrumentation (TaskTracker tt)
specifier|public
name|DummyTaskTrackerInstrumentation
parameter_list|(
name|TaskTracker
name|tt
parameter_list|)
block|{
name|super
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completeTask (TaskAttemptID t)
specifier|public
name|void
name|completeTask
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
name|completeTaskCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|timedoutTask (TaskAttemptID t)
specifier|public
name|void
name|timedoutTask
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
name|timedoutTaskCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|taskFailedPing (TaskAttemptID t)
specifier|public
name|void
name|taskFailedPing
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
name|taskFailedPingCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reportTaskLaunch (TaskAttemptID t, File stdout, File stderr)
specifier|public
name|void
name|reportTaskLaunch
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|,
name|File
name|stdout
parameter_list|,
name|File
name|stderr
parameter_list|)
block|{
name|reportTaskLaunchCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reportTaskEnd (TaskAttemptID t)
specifier|public
name|void
name|reportTaskEnd
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
name|reportTaskEndCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|statusUpdate (Task t, TaskStatus s)
specifier|public
name|void
name|statusUpdate
parameter_list|(
name|Task
name|t
parameter_list|,
name|TaskStatus
name|s
parameter_list|)
block|{
name|statusUpdateCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

