begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|LinuxResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_comment
comment|/**  * This test class tests the functionality related to configuring, reporting  * and computing memory related parameters in a Map/Reduce cluster.  *   * Each test sets up a {@link MiniMRCluster} with a locally defined   * {@link org.apache.hadoop.mapred.TaskScheduler}. This scheduler validates   * the memory related configuration is correctly computed and reported from   * the tasktracker in   * {@link org.apache.hadoop.mapred.TaskScheduler#assignTasks(TaskTrackerStatus)}.  */
end_comment

begin_class
DECL|class|TestTTResourceReporting
specifier|public
class|class
name|TestTTResourceReporting
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTTResourceReporting
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|miniMRCluster
specifier|private
name|MiniMRCluster
name|miniMRCluster
decl_stmt|;
comment|/**    * Fake scheduler to test the proper reporting of memory values by TT    */
DECL|class|FakeTaskScheduler
specifier|public
specifier|static
class|class
name|FakeTaskScheduler
extends|extends
name|JobQueueTaskScheduler
block|{
DECL|field|hasPassed
specifier|private
name|boolean
name|hasPassed
init|=
literal|true
decl_stmt|;
DECL|field|hasDynamicValuePassed
specifier|private
name|boolean
name|hasDynamicValuePassed
init|=
literal|true
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|method|FakeTaskScheduler ()
specifier|public
name|FakeTaskScheduler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|hasTestPassed ()
specifier|public
name|boolean
name|hasTestPassed
parameter_list|()
block|{
return|return
name|hasPassed
return|;
block|}
DECL|method|hasDynamicTestPassed ()
specifier|public
name|boolean
name|hasDynamicTestPassed
parameter_list|()
block|{
return|return
name|hasDynamicValuePassed
return|;
block|}
DECL|method|getFailureMessage ()
specifier|public
name|String
name|getFailureMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskTrackerStatus
name|status
init|=
name|taskTracker
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|long
name|totalVirtualMemoryOnTT
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"totalVmemOnTT"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|totalPhysicalMemoryOnTT
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"totalPmemOnTT"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|mapSlotMemorySize
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"mapSlotMemorySize"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|reduceSlotMemorySize
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"reduceSlotMemorySize"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|availableVirtualMemoryOnTT
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"availableVmemOnTT"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|availablePhysicalMemoryOnTT
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"availablePmemOnTT"
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|cumulativeCpuTime
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"cumulativeCpuTime"
argument_list|,
name|TaskTrackerStatus
operator|.
name|UNAVAILABLE
argument_list|)
decl_stmt|;
name|long
name|cpuFrequency
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"cpuFrequency"
argument_list|,
name|TaskTrackerStatus
operator|.
name|UNAVAILABLE
argument_list|)
decl_stmt|;
name|int
name|numProcessors
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"numProcessors"
argument_list|,
name|TaskTrackerStatus
operator|.
name|UNAVAILABLE
argument_list|)
decl_stmt|;
name|float
name|cpuUsage
init|=
name|getConf
argument_list|()
operator|.
name|getFloat
argument_list|(
literal|"cpuUsage"
argument_list|,
name|TaskTrackerStatus
operator|.
name|UNAVAILABLE
argument_list|)
decl_stmt|;
name|long
name|reportedTotalVirtualMemoryOnTT
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getTotalVirtualMemory
argument_list|()
decl_stmt|;
name|long
name|reportedTotalPhysicalMemoryOnTT
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getTotalPhysicalMemory
argument_list|()
decl_stmt|;
name|long
name|reportedMapSlotMemorySize
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getMapSlotMemorySizeOnTT
argument_list|()
decl_stmt|;
name|long
name|reportedReduceSlotMemorySize
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getReduceSlotMemorySizeOnTT
argument_list|()
decl_stmt|;
name|long
name|reportedAvailableVirtualMemoryOnTT
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getAvailabelVirtualMemory
argument_list|()
decl_stmt|;
name|long
name|reportedAvailablePhysicalMemoryOnTT
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getAvailablePhysicalMemory
argument_list|()
decl_stmt|;
name|long
name|reportedCumulativeCpuTime
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getCumulativeCpuTime
argument_list|()
decl_stmt|;
name|long
name|reportedCpuFrequency
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getCpuFrequency
argument_list|()
decl_stmt|;
name|int
name|reportedNumProcessors
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getNumProcessors
argument_list|()
decl_stmt|;
name|float
name|reportedCpuUsage
init|=
name|status
operator|.
name|getResourceStatus
argument_list|()
operator|.
name|getCpuUsage
argument_list|()
decl_stmt|;
name|message
operator|=
literal|"expected values : "
operator|+
literal|"(totalVirtualMemoryOnTT, totalPhysicalMemoryOnTT, "
operator|+
literal|"availableVirtualMemoryOnTT, availablePhysicalMemoryOnTT, "
operator|+
literal|"mapSlotMemSize, reduceSlotMemorySize, cumulativeCpuTime, "
operator|+
literal|"cpuFrequency, numProcessors, cpuUsage) = ("
operator|+
name|totalVirtualMemoryOnTT
operator|+
literal|", "
operator|+
name|totalPhysicalMemoryOnTT
operator|+
literal|","
operator|+
name|availableVirtualMemoryOnTT
operator|+
literal|", "
operator|+
name|availablePhysicalMemoryOnTT
operator|+
literal|","
operator|+
name|mapSlotMemorySize
operator|+
literal|","
operator|+
name|reduceSlotMemorySize
operator|+
literal|","
operator|+
name|cumulativeCpuTime
operator|+
literal|","
operator|+
name|cpuFrequency
operator|+
literal|","
operator|+
name|numProcessors
operator|+
literal|","
operator|+
name|cpuUsage
operator|+
literal|")"
expr_stmt|;
name|message
operator|+=
literal|"\nreported values : "
operator|+
literal|"(totalVirtualMemoryOnTT, totalPhysicalMemoryOnTT, "
operator|+
literal|"availableVirtualMemoryOnTT, availablePhysicalMemoryOnTT, "
operator|+
literal|"reportedMapSlotMemorySize, reportedReduceSlotMemorySize, "
operator|+
literal|"reportedCumulativeCpuTime, reportedCpuFrequency, "
operator|+
literal|"reportedNumProcessors, cpuUsage) = ("
operator|+
name|reportedTotalVirtualMemoryOnTT
operator|+
literal|", "
operator|+
name|reportedTotalPhysicalMemoryOnTT
operator|+
literal|","
operator|+
name|reportedAvailableVirtualMemoryOnTT
operator|+
literal|", "
operator|+
name|reportedAvailablePhysicalMemoryOnTT
operator|+
literal|","
operator|+
name|reportedMapSlotMemorySize
operator|+
literal|","
operator|+
name|reportedReduceSlotMemorySize
operator|+
literal|","
operator|+
name|reportedCumulativeCpuTime
operator|+
literal|","
operator|+
name|reportedCpuFrequency
operator|+
literal|","
operator|+
name|reportedNumProcessors
operator|+
literal|","
operator|+
name|reportedCpuUsage
operator|+
literal|")"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|hasDynamicValuePassed
operator|=
literal|true
expr_stmt|;
comment|// Check task resource status in task reports
for|for
control|(
name|TaskStatus
name|taskStatus
range|:
name|status
operator|.
name|getTaskReports
argument_list|()
control|)
block|{
name|Counters
name|counters
init|=
name|taskStatus
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// This should be zero because the initial CPU time is subtracted.
name|long
name|procCumulativeCpuTime
init|=
literal|0
decl_stmt|;
name|long
name|procVirtualMemorySize
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"procVirtualMemorySize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|procPhysicalMemorySize
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"procPhysicalMemorySize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|reportedProcCumulativeCpuTime
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reportedProcVirtualMemorySize
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reportedProcPhysicalMemorySize
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|procMessage
init|=
literal|"expected values : "
operator|+
literal|"(procCumulativeCpuTime, procVirtualMemorySize,"
operator|+
literal|" procPhysicalMemorySize) = ("
operator|+
name|procCumulativeCpuTime
operator|+
literal|", "
operator|+
name|procVirtualMemorySize
operator|+
literal|", "
operator|+
name|procPhysicalMemorySize
operator|+
literal|")"
decl_stmt|;
name|procMessage
operator|+=
literal|"\nreported values : "
operator|+
literal|"(procCumulativeCpuTime, procVirtualMemorySize,"
operator|+
literal|" procPhysicalMemorySize) = ("
operator|+
name|reportedProcCumulativeCpuTime
operator|+
literal|", "
operator|+
name|reportedProcVirtualMemorySize
operator|+
literal|", "
operator|+
name|reportedProcPhysicalMemorySize
operator|+
literal|")"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|procMessage
argument_list|)
expr_stmt|;
name|message
operator|+=
literal|"\n"
operator|+
name|procMessage
expr_stmt|;
if|if
condition|(
name|procCumulativeCpuTime
operator|!=
name|reportedProcCumulativeCpuTime
operator|||
name|procVirtualMemorySize
operator|!=
name|reportedProcVirtualMemorySize
operator|||
name|procPhysicalMemorySize
operator|!=
name|reportedProcPhysicalMemorySize
condition|)
block|{
name|hasDynamicValuePassed
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|hasPassed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|totalVirtualMemoryOnTT
operator|!=
name|reportedTotalVirtualMemoryOnTT
operator|||
name|totalPhysicalMemoryOnTT
operator|!=
name|reportedTotalPhysicalMemoryOnTT
operator|||
name|mapSlotMemorySize
operator|!=
name|reportedMapSlotMemorySize
operator|||
name|reduceSlotMemorySize
operator|!=
name|reportedReduceSlotMemorySize
operator|||
name|numProcessors
operator|!=
name|reportedNumProcessors
condition|)
block|{
name|hasPassed
operator|=
literal|false
expr_stmt|;
block|}
comment|// These values changes every moment on the node so it can only be
comment|// tested by DummyMemoryCalculatorPlugin. Need to check them separately
if|if
condition|(
name|availableVirtualMemoryOnTT
operator|!=
name|reportedAvailableVirtualMemoryOnTT
operator|||
name|availablePhysicalMemoryOnTT
operator|!=
name|reportedAvailablePhysicalMemoryOnTT
operator|||
name|cumulativeCpuTime
operator|!=
name|reportedCumulativeCpuTime
operator|||
name|cpuFrequency
operator|!=
name|reportedCpuFrequency
operator|||
name|cpuUsage
operator|!=
name|reportedCpuUsage
condition|)
block|{
name|hasDynamicValuePassed
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|super
operator|.
name|assignTasks
argument_list|(
name|taskTracker
argument_list|)
return|;
block|}
block|}
comment|/**    * Test that verifies default values are configured and reported correctly.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testDefaultResourceValues ()
specifier|public
name|void
name|testDefaultResourceValues
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Memory values are disabled by default.
name|conf
operator|.
name|setClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
operator|.
name|TT_RESOURCE_CALCULATOR_PLUGIN
argument_list|,
name|DummyResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|setUpCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
operator|.
name|TT_RESOURCE_CALCULATOR_PLUGIN
argument_list|,
name|DummyResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|runSleepJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|verifyTestResults
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that verifies that configured values are reported correctly.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testConfiguredResourceValues ()
specifier|public
name|void
name|testConfiguredResourceValues
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"totalVmemOnTT"
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"totalPmemOnTT"
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapSlotMemorySize"
argument_list|,
literal|1
operator|*
literal|512L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"reduceSlotMemorySize"
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"availableVmemOnTT"
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"availablePmemOnTT"
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"cumulativeCpuTime"
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"cpuFrequency"
argument_list|,
literal|2000000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"numProcessors"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"cpuUsage"
argument_list|,
literal|15.5F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"procCumulativeCpuTime"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"procVirtualMemorySize"
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"procPhysicalMemorySize"
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
operator|.
name|TT_RESOURCE_CALCULATOR_PLUGIN
argument_list|,
name|DummyResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|MAXVMEM_TESTING_PROPERTY
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|MAXPMEM_TESTING_PROPERTY
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|512L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|CUMULATIVE_CPU_TIME
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|CPU_FREQUENCY
argument_list|,
literal|2000000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|NUM_PROCESSORS
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|CPU_USAGE
argument_list|,
literal|15.5F
argument_list|)
expr_stmt|;
try|try
block|{
name|setUpCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
operator|.
name|TT_RESOURCE_CALCULATOR_PLUGIN
argument_list|,
name|DummyResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|PROC_CUMULATIVE_CPU_TIME
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|PROC_VMEM_TESTING_PROPERTY
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|PROC_PMEM_TESTING_PROPERTY
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|runSleepJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|verifyTestResults
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that verifies that total memory values are calculated and reported    * correctly.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testResourceValuesOnLinux ()
specifier|public
name|void
name|testResourceValuesOnLinux
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
return|return;
block|}
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|LinuxResourceCalculatorPlugin
name|plugin
init|=
operator|new
name|LinuxResourceCalculatorPlugin
argument_list|()
decl_stmt|;
comment|// In this case, we only check these three fields because they are static
name|conf
operator|.
name|setLong
argument_list|(
literal|"totalVmemOnTT"
argument_list|,
name|plugin
operator|.
name|getVirtualMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"totalPmemOnTT"
argument_list|,
name|plugin
operator|.
name|getPhysicalMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"numProcessors"
argument_list|,
name|plugin
operator|.
name|getNumProcessors
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setUpCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runSleepJob
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTestResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setUpCluster (JobConf conf)
specifier|private
name|void
name|setUpCluster
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|JTConfig
operator|.
name|JT_TASK_SCHEDULER
argument_list|,
name|TestTTResourceReporting
operator|.
name|FakeTaskScheduler
operator|.
name|class
argument_list|,
name|TaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_HANDLER_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|miniMRCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|runSleepJob (JobConf conf)
specifier|private
name|void
name|runSleepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"1"
block|,
literal|"-r"
block|,
literal|"1"
block|,
literal|"-mt"
block|,
literal|"10"
block|,
literal|"-rt"
block|,
literal|"10"
block|}
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|SleepJob
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTestResults ()
specifier|private
name|void
name|verifyTestResults
parameter_list|()
block|{
name|verifyTestResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTestResults (boolean excludeDynamic)
specifier|private
name|void
name|verifyTestResults
parameter_list|(
name|boolean
name|excludeDynamic
parameter_list|)
block|{
name|FakeTaskScheduler
name|scheduler
init|=
operator|(
name|FakeTaskScheduler
operator|)
name|miniMRCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getTaskScheduler
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|scheduler
operator|.
name|hasTestPassed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|excludeDynamic
condition|)
block|{
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|scheduler
operator|.
name|hasDynamicTestPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDownCluster ()
specifier|private
name|void
name|tearDownCluster
parameter_list|()
block|{
if|if
condition|(
name|miniMRCluster
operator|!=
literal|null
condition|)
block|{
name|miniMRCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

