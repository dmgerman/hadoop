begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestJobQueueInformation
specifier|public
class|class
name|TestJobQueueInformation
extends|extends
name|TestCase
block|{
DECL|field|mrCluster
specifier|private
name|MiniMRCluster
name|mrCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|jc
specifier|private
name|JobConf
name|jc
decl_stmt|;
DECL|field|JOB_SCHEDULING_INFO
specifier|private
specifier|static
specifier|final
name|String
name|JOB_SCHEDULING_INFO
init|=
literal|"TESTSCHEDULINGINFO"
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"job-queue-info-testing"
argument_list|)
decl_stmt|;
DECL|field|IN_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|IN_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
DECL|field|SHARE_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|SHARE_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"share"
argument_list|)
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|OUTPUT_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
DECL|method|getSignalFile ()
specifier|static
name|String
name|getSignalFile
parameter_list|()
block|{
return|return
operator|(
operator|new
name|Path
argument_list|(
name|SHARE_DIR
argument_list|,
literal|"signal"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// configure a waiting job with 2 maps
DECL|method|configureWaitingJob (JobConf conf)
specifier|private
name|JobConf
name|configureWaitingJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|conf
argument_list|,
name|IN_DIR
argument_list|,
name|OUTPUT_DIR
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"test-job-queue-info"
argument_list|,
name|getSignalFile
argument_list|()
argument_list|,
name|getSignalFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|class|TestTaskScheduler
specifier|public
specifier|static
class|class
name|TestTaskScheduler
extends|extends
name|LimitTasksPerJobTaskScheduler
block|{
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jips
init|=
name|jobQueueJobInProgressListener
operator|.
name|getJobQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|jips
operator|!=
literal|null
operator|&&
operator|!
name|jips
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|JobInProgress
name|jip
range|:
name|jips
control|)
block|{
name|jip
operator|.
name|setSchedulingInfo
argument_list|(
name|JOB_SCHEDULING_INFO
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|assignTasks
argument_list|(
name|taskTracker
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|jc
operator|.
name|setClass
argument_list|(
name|JTConfig
operator|.
name|JT_TASK_SCHEDULER
argument_list|,
name|TestTaskScheduler
operator|.
name|class
argument_list|,
name|TaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_RUNNINGTASKS_PER_JOB
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|taskTrackers
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testJobQueues ()
specifier|public
name|void
name|testJobQueues
parameter_list|()
throws|throws
name|IOException
block|{
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|mrCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedQueueInfo
init|=
literal|"Maximum Tasks Per Job :: 10"
decl_stmt|;
name|JobQueueInfo
index|[]
name|queueInfos
init|=
name|jc
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueInfos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueInfos
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|queueInfos
index|[
literal|0
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|,
name|queueInfos
index|[
literal|0
index|]
operator|.
name|getQueueState
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// configure a waiting job
name|conf
operator|=
name|configureWaitingJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"test-job-queue-info-test"
argument_list|)
expr_stmt|;
comment|// clear the signal file if any
name|fileSys
operator|.
name|delete
argument_list|(
name|SHARE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|rJob
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfJobs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|queueInfo
range|:
name|queueInfos
control|)
block|{
name|JobStatus
index|[]
name|jobStatusList
init|=
name|jc
operator|.
name|getJobsFromQueue
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueInfo
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQueueInfo
argument_list|,
name|queueInfo
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfJobs
operator|+=
name|jobStatusList
operator|.
name|length
expr_stmt|;
for|for
control|(
name|JobStatus
name|status
range|:
name|jobStatusList
control|)
block|{
name|assertEquals
argument_list|(
name|JOB_SCHEDULING_INFO
argument_list|,
name|status
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfJobs
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|signalTasks
argument_list|(
name|dfsCluster
argument_list|,
name|fileSys
argument_list|,
name|getSignalFile
argument_list|()
argument_list|,
name|getSignalFile
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

