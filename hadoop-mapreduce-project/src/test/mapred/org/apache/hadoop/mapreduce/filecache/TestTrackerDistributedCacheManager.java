begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.filecache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|DefaultTaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TaskDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TrackerDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TrackerDistributedCacheManager
operator|.
name|CacheStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTrackerDistributedCacheManager
specifier|public
class|class
name|TestTrackerDistributedCacheManager
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|protected
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestTrackerDistributedCacheManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|ROOT_MAPRED_LOCAL_DIR
specifier|protected
name|File
name|ROOT_MAPRED_LOCAL_DIR
decl_stmt|;
DECL|field|numLocalDirs
specifier|protected
name|int
name|numLocalDirs
init|=
literal|6
decl_stmt|;
DECL|field|TEST_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_FILE_SIZE
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
comment|// 4K
DECL|field|LOCAL_CACHE_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|LOCAL_CACHE_LIMIT
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
comment|//5K
DECL|field|LOCAL_CACHE_SUBDIR
specifier|private
specifier|static
specifier|final
name|int
name|LOCAL_CACHE_SUBDIR
init|=
literal|2
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|firstCacheFile
specifier|protected
name|Path
name|firstCacheFile
decl_stmt|;
DECL|field|secondCacheFile
specifier|protected
name|Path
name|secondCacheFile
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|localDirAllocator
specifier|protected
name|LocalDirAllocator
name|localDirAllocator
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
decl_stmt|;
DECL|field|taskController
specifier|protected
name|TaskController
name|taskController
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Prepare the tests' root dir
name|File
name|TEST_ROOT
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TEST_ROOT
operator|.
name|exists
argument_list|()
condition|)
block|{
name|TEST_ROOT
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// This test suite will fail if any ancestor directory of the
comment|// test directory is not world-searchable (ie +x).
comment|// We prefer to fail the test in an obvious manner up front
comment|// during setUp() rather than in a subtle way later.
name|assertTrue
argument_list|(
literal|"Test root directory "
operator|+
name|TEST_ROOT
operator|+
literal|" and all of its "
operator|+
literal|"parent directories must have a+x permissions"
argument_list|,
name|ClientDistributedCacheManager
operator|.
name|ancestorsHaveExecutePermissions
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prepare the tests' mapred-local-dir
name|ROOT_MAPRED_LOCAL_DIR
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"mapred/local"
argument_list|)
expr_stmt|;
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
index|[]
name|localDirs
init|=
operator|new
name|String
index|[
name|numLocalDirs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocalDirs
condition|;
name|i
operator|++
control|)
block|{
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|ROOT_MAPRED_LOCAL_DIR
argument_list|,
literal|"0_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|localDirs
index|[
name|i
index|]
operator|=
name|localDir
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|localDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|TaskController
argument_list|>
name|taskControllerClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|TTConfig
operator|.
name|TT_TASK_CONTROLLER
argument_list|,
name|DefaultTaskController
operator|.
name|class
argument_list|,
name|TaskController
operator|.
name|class
argument_list|)
decl_stmt|;
name|taskController
operator|=
operator|(
name|TaskController
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskControllerClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// setup permissions for mapred local dir
name|taskController
operator|.
name|setup
argument_list|()
expr_stmt|;
comment|// Create the temporary cache files to be used in the tests.
name|firstCacheFile
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"firstcachefile"
argument_list|)
expr_stmt|;
name|secondCacheFile
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"secondcachefile"
argument_list|)
expr_stmt|;
name|createPrivateTempFile
argument_list|(
name|firstCacheFile
argument_list|)
expr_stmt|;
name|createPrivateTempFile
argument_list|(
name|secondCacheFile
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshConf (Configuration conf)
specifier|protected
name|void
name|refreshConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|taskController
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|taskController
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
comment|/**    * Whether the test can run on the machine    *     * @return true if test can run on the machine, false otherwise    */
DECL|method|canRun ()
specifier|protected
name|boolean
name|canRun
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * This is the typical flow for using the DistributedCache classes.    *     * @throws IOException    * @throws LoginException    */
DECL|method|testManagerFlow ()
specifier|public
name|void
name|testManagerFlow
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// ****** Imitate JobClient code
comment|// Configures a task/job with both a regular file and a "classpath" file.
name|Configuration
name|subConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|subConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|subConf
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addFileToClassPath
argument_list|(
name|secondCacheFile
argument_list|,
name|subConf
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|subConf
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|subConf
argument_list|)
expr_stmt|;
comment|// ****** End of imitating JobClient code
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"job.xml"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|jobFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|subConf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ****** Imitate TaskRunner code.
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|TaskDistributedCacheManager
name|handle
init|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|subConf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|DistributedCache
operator|.
name|getLocalCacheFiles
argument_list|(
name|subConf
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"workdir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// ****** End of imitating TaskRunner code
name|Path
index|[]
name|localCacheFiles
init|=
name|DistributedCache
operator|.
name|getLocalCacheFiles
argument_list|(
name|subConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|null
argument_list|,
name|localCacheFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|localCacheFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|cachedFirstFile
init|=
name|localCacheFiles
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|cachedSecondFile
init|=
name|localCacheFiles
index|[
literal|1
index|]
decl_stmt|;
name|assertFileLengthEquals
argument_list|(
name|firstCacheFile
argument_list|,
name|cachedFirstFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Paths should be different."
argument_list|,
name|firstCacheFile
operator|.
name|equals
argument_list|(
name|cachedFirstFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handle
operator|.
name|getClassPaths
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cachedSecondFile
operator|.
name|toString
argument_list|()
argument_list|,
name|handle
operator|.
name|getClassPaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|localCacheFiles
argument_list|)
expr_stmt|;
comment|// Cleanup
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
name|manager
operator|.
name|purgeCache
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pathToFile
argument_list|(
name|cachedFirstFile
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This DistributedCacheManager fails in localizing firstCacheFile.    */
DECL|class|FakeTrackerDistributedCacheManager
specifier|public
class|class
name|FakeTrackerDistributedCacheManager
extends|extends
name|TrackerDistributedCacheManager
block|{
DECL|method|FakeTrackerDistributedCacheManager (Configuration conf)
specifier|public
name|FakeTrackerDistributedCacheManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|localizeCache (Configuration conf, URI cache, long confFileStamp, CacheStatus cacheStatus, boolean isArchive, boolean isPublic)
name|Path
name|localizeCache
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|cache
parameter_list|,
name|long
name|confFileStamp
parameter_list|,
name|CacheStatus
name|cacheStatus
parameter_list|,
name|boolean
name|isArchive
parameter_list|,
name|boolean
name|isPublic
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|.
name|equals
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fake fail"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|localizeCache
argument_list|(
name|conf
argument_list|,
name|cache
argument_list|,
name|confFileStamp
argument_list|,
name|cacheStatus
argument_list|,
name|isArchive
argument_list|,
name|isPublic
argument_list|)
return|;
block|}
block|}
DECL|method|testReferenceCount ()
specifier|public
name|void
name|testReferenceCount
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|FakeTrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"workdir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Configures a job with a regular file
name|Job
name|job1
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job1
operator|.
name|setUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|job1
operator|.
name|addCacheFile
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf1
init|=
name|job1
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
comment|// Task localizing for first job
name|TaskDistributedCacheManager
name|handle
init|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
for|for
control|(
name|TaskDistributedCacheManager
operator|.
name|CacheFile
name|c
range|:
name|handle
operator|.
name|getCacheFiles
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|manager
operator|.
name|getReferenceCount
argument_list|(
name|c
operator|.
name|uri
argument_list|,
name|conf1
argument_list|,
name|c
operator|.
name|timestamp
argument_list|,
name|c
operator|.
name|owner
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|thirdCacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"thirdcachefile"
argument_list|)
decl_stmt|;
name|createPrivateTempFile
argument_list|(
name|thirdCacheFile
argument_list|)
expr_stmt|;
comment|// Configures another job with three regular files.
name|Job
name|job2
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job2
operator|.
name|setUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
comment|// add a file that would get failed to localize
name|job2
operator|.
name|addCacheFile
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a file that is already localized by different job
name|job2
operator|.
name|addCacheFile
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a file that is never localized
name|job2
operator|.
name|addCacheFile
argument_list|(
name|thirdCacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|job2
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
comment|// Task localizing for second job
comment|// localization for the "firstCacheFile" will fail.
name|handle
operator|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|th
operator|=
name|e
expr_stmt|;
name|Log
operator|.
name|info
argument_list|(
literal|"Exception during setup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake fail"
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
name|th
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|TaskDistributedCacheManager
operator|.
name|CacheFile
name|c
range|:
name|handle
operator|.
name|getCacheFiles
argument_list|()
control|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|manager
operator|.
name|getReferenceCount
argument_list|(
name|c
operator|.
name|uri
argument_list|,
name|conf2
argument_list|,
name|c
operator|.
name|timestamp
argument_list|,
name|c
operator|.
name|owner
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
name|Log
operator|.
name|info
argument_list|(
literal|"Exception getting reference count for "
operator|+
name|c
operator|.
name|uri
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|thirdCacheFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|thirdCacheFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that localization of distributed cache file happens in the desired    * directory    * @throws IOException    * @throws LoginException    */
DECL|method|testPublicPrivateCache ()
specifier|public
name|void
name|testPublicPrivateCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkLocalizedPath
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkLocalizedPath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrivateCacheForMultipleUsers ()
specifier|public
name|void
name|testPrivateCacheForMultipleUsers
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Try to initialize the distributed cache for the same file on the
comment|// HDFS, for two different users.
comment|// First initialize as the user running the test, then as some other user.
comment|// Although the same cache file is used in both, the localization
comment|// should happen twice.
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
specifier|public
name|Path
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
return|return
name|checkLocalizedPath
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|distCacheDir
init|=
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cache file didn't get localized in the expected directory. "
operator|+
literal|"Expected localization to happen within "
operator|+
name|ROOT_MAPRED_LOCAL_DIR
operator|+
literal|"/"
operator|+
name|distCacheDir
operator|+
literal|", but was localized at "
operator|+
name|p
argument_list|,
name|p
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|distCacheDir
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"fooUserInMachine"
argument_list|)
expr_stmt|;
name|p
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
specifier|public
name|Path
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
return|return
name|checkLocalizedPath
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|distCacheDir
operator|=
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cache file didn't get localized in the expected directory. "
operator|+
literal|"Expected localization to happen within "
operator|+
name|ROOT_MAPRED_LOCAL_DIR
operator|+
literal|"/"
operator|+
name|distCacheDir
operator|+
literal|", but was localized at "
operator|+
name|p
argument_list|,
name|p
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|distCacheDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLocalizedPath (boolean visibility)
specifier|private
name|Path
name|checkLocalizedPath
parameter_list|(
name|boolean
name|visibility
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|InterruptedException
block|{
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"workdir"
argument_list|)
decl_stmt|;
name|Path
name|cacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"fourthcachefile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibility
condition|)
block|{
name|createPublicTempFile
argument_list|(
name|cacheFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createPrivateTempFile
argument_list|(
name|cacheFile
argument_list|)
expr_stmt|;
block|}
name|Job
name|job1
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job1
operator|.
name|setUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|job1
operator|.
name|addCacheFile
argument_list|(
name|cacheFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf1
init|=
name|job1
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
comment|// Task localizing for job
name|TaskDistributedCacheManager
name|handle
init|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
name|TaskDistributedCacheManager
operator|.
name|CacheFile
name|c
init|=
name|handle
operator|.
name|getCacheFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|distCacheDir
decl_stmt|;
if|if
condition|(
name|visibility
condition|)
block|{
name|distCacheDir
operator|=
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|distCacheDir
operator|=
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|Path
name|localizedPath
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|cacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf1
argument_list|,
name|distCacheDir
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|cacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|c
operator|.
name|timestamp
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
name|visibility
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cache file didn't get localized in the expected directory. "
operator|+
literal|"Expected localization to happen within "
operator|+
name|ROOT_MAPRED_LOCAL_DIR
operator|+
literal|"/"
operator|+
name|distCacheDir
operator|+
literal|", but was localized at "
operator|+
name|localizedPath
argument_list|,
name|localizedPath
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|distCacheDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|visibility
condition|)
block|{
name|checkPublicFilePermissions
argument_list|(
operator|new
name|Path
index|[]
block|{
name|localizedPath
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkFilePermissions
argument_list|(
operator|new
name|Path
index|[]
block|{
name|localizedPath
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|localizedPath
return|;
block|}
comment|/**    * Check proper permissions on the cache files    *     * @param localCacheFiles    * @throws IOException    */
DECL|method|checkFilePermissions (Path[] localCacheFiles)
specifier|protected
name|void
name|checkFilePermissions
parameter_list|(
name|Path
index|[]
name|localCacheFiles
parameter_list|)
throws|throws
name|IOException
block|{
comment|// All the files should have executable permissions on them.
for|for
control|(
name|Path
name|p
range|:
name|localCacheFiles
control|)
block|{
name|assertTrue
argument_list|(
literal|"Cache file is not executable!"
argument_list|,
operator|new
name|File
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|canExecute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check permissions on the public cache files    *     * @param localCacheFiles    * @throws IOException    */
DECL|method|checkPublicFilePermissions (Path[] localCacheFiles)
specifier|private
name|void
name|checkPublicFilePermissions
parameter_list|(
name|Path
index|[]
name|localCacheFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPublicFilePermissions
argument_list|(
name|fs
argument_list|,
name|localCacheFiles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the permissions for a file localized as a public distributed    * cache file    * @param fs The Local FileSystem used to get the permissions    * @param localCacheFiles The list of files whose permissions should be     * verified.    * @throws IOException    */
DECL|method|checkPublicFilePermissions (FileSystem fs, Path[] localCacheFiles)
specifier|public
specifier|static
name|void
name|checkPublicFilePermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
index|[]
name|localCacheFiles
parameter_list|)
throws|throws
name|IOException
block|{
comment|// All the files should have read and executable permissions for others
for|for
control|(
name|Path
name|p
range|:
name|localCacheFiles
control|)
block|{
name|FsPermission
name|perm
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cache file is not readable / executable by owner: perm="
operator|+
name|perm
operator|.
name|getUserAction
argument_list|()
argument_list|,
name|perm
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cache file is not readable / executable by group: perm="
operator|+
name|perm
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|perm
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cache file is not readable / executable by others: perm="
operator|+
name|perm
operator|.
name|getOtherAction
argument_list|()
argument_list|,
name|perm
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify the ownership for files localized as a public distributed cache    * file.    * @param fs The Local FileSystem used to get the ownership    * @param localCacheFiles THe list of files whose ownership should be    * verified    * @param owner The owner of the files    * @param group The group owner of the files.    * @throws IOException    */
DECL|method|checkPublicFileOwnership (FileSystem fs, Path[] localCacheFiles, String owner, String group)
specifier|public
specifier|static
name|void
name|checkPublicFileOwnership
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
index|[]
name|localCacheFiles
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|p
range|:
name|localCacheFiles
control|)
block|{
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyTrackerDistributedCacheManager
specifier|public
specifier|static
class|class
name|MyTrackerDistributedCacheManager
extends|extends
name|TrackerDistributedCacheManager
block|{
DECL|field|caught
specifier|public
name|Throwable
name|caught
init|=
literal|null
decl_stmt|;
DECL|field|done
specifier|public
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|MyTrackerDistributedCacheManager (Configuration conf, TaskController controller)
specifier|public
name|MyTrackerDistributedCacheManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TaskController
name|controller
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|controller
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseDirManager
operator|=
operator|new
name|TrackerDistributedCacheManager
operator|.
name|BaseDirManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkAndCleanup
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"This is a test!!!!"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|cleanupThread
operator|=
operator|new
name|TestCleanupThread
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCleanupThread
class|class
name|TestCleanupThread
extends|extends
name|TrackerDistributedCacheManager
operator|.
name|CleanupThread
block|{
DECL|method|TestCleanupThread (Configuration conf)
specifier|public
name|TestCleanupThread
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exitTaskTracker (Throwable t)
specifier|protected
name|void
name|exitTaskTracker
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|caught
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|stopRunning
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRuntimeExceptionInCleanup ()
specifier|public
name|void
name|testRuntimeExceptionInCleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
literal|"mapred.local.dir"
argument_list|,
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
literal|"local.cache.size"
argument_list|,
name|LOCAL_CACHE_LIMIT
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
literal|"mapreduce.tasktracker.distributedcache.checkperiod"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 0 ms (Don't sleep)
name|refreshConf
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|MyTrackerDistributedCacheManager
name|manager
init|=
operator|new
name|MyTrackerDistributedCacheManager
argument_list|(
name|conf2
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|manager
operator|.
name|startCleanupThread
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|done
operator|.
name|await
argument_list|(
literal|200l
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|manager
operator|.
name|caught
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|caught
operator|instanceof
name|RuntimeException
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobOwnerName ()
specifier|protected
name|String
name|getJobOwnerName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
DECL|method|getFileStamp (Path file)
specifier|private
name|long
name|getFileStamp
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
DECL|field|CACHE_DELETE_PERIOD_MS
specifier|public
specifier|static
specifier|final
name|long
name|CACHE_DELETE_PERIOD_MS
init|=
literal|100l
decl_stmt|;
comment|/** test delete cache */
DECL|method|testLRUDeleteCache ()
specifier|public
name|void
name|testLRUDeleteCache
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// This test needs MRConfig.LOCAL_DIR to be single directory
comment|// instead of four, because it assumes that both
comment|// firstcachefile and secondcachefile will be localized on same directory
comment|// so that second localization triggers deleteCache.
comment|// If MRConfig.LOCAL_DIR is four directories, second localization might not
comment|// trigger deleteCache, if it is localized in different directory.
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Make it larger then expected
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_LOCAL_CACHE_SIZE
argument_list|,
literal|21
operator|*
literal|1024l
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_LOCAL_CACHE_SUBDIRS_LIMIT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//The goal is to get down to 15.75K and 2 dirs
name|conf2
operator|.
name|setFloat
argument_list|(
name|TTConfig
operator|.
name|TT_LOCAL_CACHE_KEEP_AROUND_PCT
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_DISTRIBUTED_CACHE_CHECK_PERIOD
argument_list|,
name|CACHE_DELETE_PERIOD_MS
argument_list|)
expr_stmt|;
name|refreshConf
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf2
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|manager
operator|.
name|startCleanupThread
argument_list|()
expr_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|//Here we are testing the LRU.  In this case we will add in 4 cache entries
comment|// 2 of them are 8k each and 2 of them are very small.  We want to verify
comment|// That they are deleted in LRU order.
comment|// So what we will do is add in the two large files first, 1 then 2, and
comment|// then one of the small ones 3.  We will then release them in opposite
comment|// order 3, 2, 1.
comment|//
comment|// Finally we will add in the last small file.  This last file should push
comment|// us over the 3 entry limit to trigger a cleanup.  So LRU order is 3, 2, 1
comment|// And we will only delete 2 entries so that should leave 1 un touched
comment|// but 3 and 2 deleted
name|Path
name|thirdCacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"thirdcachefile"
argument_list|)
decl_stmt|;
name|Path
name|fourthCacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"fourthcachefile"
argument_list|)
decl_stmt|;
comment|// Adding two more small files, so it triggers the number of sub directory
comment|// limit but does not trigger the file size limit.
name|createTempFile
argument_list|(
name|thirdCacheFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createTempFile
argument_list|(
name|fourthCacheFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Path
name|firstLocalCache
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|secondLocalCache
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|thirdLocalCache
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|thirdCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|manager
operator|.
name|releaseCache
argument_list|(
name|thirdCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|getFileStamp
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|manager
operator|.
name|releaseCache
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|getFileStamp
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|manager
operator|.
name|releaseCache
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Getting the fourth cache will make the number of sub directories becomes
comment|// 4 which is greater than 3. So the released cache will be deleted.
name|manager
operator|.
name|getLocalCache
argument_list|(
name|fourthCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fourthCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|fourthCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCacheDeletion
argument_list|(
name|localfs
argument_list|,
name|secondLocalCache
argument_list|,
literal|"DistributedCache failed "
operator|+
literal|"deleting second cache LRU order"
argument_list|)
expr_stmt|;
name|checkCacheDeletion
argument_list|(
name|localfs
argument_list|,
name|thirdLocalCache
argument_list|,
literal|"DistributedCache failed deleting third"
operator|+
literal|" cache LRU order."
argument_list|)
expr_stmt|;
name|checkCacheNOTDeletion
argument_list|(
name|localfs
argument_list|,
name|firstLocalCache
argument_list|,
literal|"DistributedCache failed "
operator|+
literal|"Deleted first cache LRU order."
argument_list|)
expr_stmt|;
name|checkCacheNOTDeletion
argument_list|(
name|localfs
argument_list|,
name|fourthCacheFile
argument_list|,
literal|"DistributedCache failed "
operator|+
literal|"Deleted fourth cache LRU order."
argument_list|)
expr_stmt|;
comment|// Clean up the files created in this test
operator|new
name|File
argument_list|(
name|thirdCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|fourthCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|manager
operator|.
name|stopCleanupThread
argument_list|()
expr_stmt|;
block|}
DECL|method|testSameNameFileArchiveCache ()
specifier|public
name|void
name|testSameNameFileArchiveCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TrackerDistributedCacheManager
name|manager
init|=
name|spy
argument_list|(
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|rsrc
init|=
operator|new
name|URI
argument_list|(
literal|"file://foo/bar/yak"
argument_list|)
decl_stmt|;
name|Path
name|cacheDir
init|=
operator|new
name|Path
argument_list|(
literal|"file:///localcache"
argument_list|)
decl_stmt|;
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|cacheDir
argument_list|,
literal|"archive"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|cacheDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|archivePath
argument_list|)
operator|.
name|when
argument_list|(
name|manager
argument_list|)
operator|.
name|localizeCache
argument_list|(
name|eq
argument_list|(
name|conf
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrc
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|CacheStatus
operator|>
name|anyObject
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|filePath
argument_list|)
operator|.
name|when
argument_list|(
name|manager
argument_list|)
operator|.
name|localizeCache
argument_list|(
name|eq
argument_list|(
name|conf
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrc
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|CacheStatus
operator|>
name|anyObject
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// could fail, but check match instead
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|manager
argument_list|)
operator|.
name|checkCacheStatusValidity
argument_list|(
name|Matchers
operator|.
expr|<
name|Configuration
operator|>
name|anyObject
argument_list|()
argument_list|,
name|eq
argument_list|(
name|rsrc
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|CacheStatus
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|FileStatus
operator|>
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// localizeCache initializes mtime of cached rsrc; set to uninitialized val
name|doReturn
argument_list|(
operator|-
literal|1L
argument_list|)
operator|.
name|when
argument_list|(
name|manager
argument_list|)
operator|.
name|checkStampSinceJobStarted
argument_list|(
name|Matchers
operator|.
expr|<
name|Configuration
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|FileSystem
operator|>
name|anyObject
argument_list|()
argument_list|,
name|eq
argument_list|(
name|rsrc
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|CacheStatus
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|FileStatus
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|-
literal|1L
argument_list|)
operator|.
name|when
argument_list|(
name|manager
argument_list|)
operator|.
name|getTimestamp
argument_list|(
name|Matchers
operator|.
expr|<
name|Configuration
operator|>
name|anyObject
argument_list|()
argument_list|,
name|eq
argument_list|(
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|rsrcStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rsrcStatus
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|4344L
argument_list|)
expr_stmt|;
name|Path
name|localizedPathForFile
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|rsrc
argument_list|,
name|conf
argument_list|,
literal|"sub"
argument_list|,
name|rsrcStatus
argument_list|,
literal|false
argument_list|,
literal|20L
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///tmp"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Path
name|localizedPathForArchive
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|rsrc
argument_list|,
name|conf
argument_list|,
literal|"sub"
argument_list|,
name|rsrcStatus
argument_list|,
literal|true
argument_list|,
literal|20L
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///tmp"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"File and Archive resolve to the same path: "
operator|+
name|localizedPathForFile
operator|+
literal|". Should differ."
argument_list|,
name|localizedPathForFile
argument_list|,
name|localizedPathForArchive
argument_list|)
expr_stmt|;
block|}
comment|/** test delete cache */
DECL|method|testDeleteCache ()
specifier|public
name|void
name|testDeleteCache
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// This test needs MRConfig.LOCAL_DIR to be single directory
comment|// instead of four, because it assumes that both
comment|// firstcachefile and secondcachefile will be localized on same directory
comment|// so that second localization triggers deleteCache.
comment|// If MRConfig.LOCAL_DIR is four directories, second localization might not
comment|// trigger deleteCache, if it is localized in different directory.
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_LOCAL_CACHE_SIZE
argument_list|,
name|LOCAL_CACHE_LIMIT
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_LOCAL_CACHE_SUBDIRS_LIMIT
argument_list|,
name|LOCAL_CACHE_SUBDIR
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_DISTRIBUTED_CACHE_CHECK_PERIOD
argument_list|,
name|CACHE_DELETE_PERIOD_MS
argument_list|)
expr_stmt|;
name|refreshConf
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf2
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|manager
operator|.
name|startCleanupThread
argument_list|()
expr_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|// We first test the size limit
name|Path
name|localCache
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|manager
operator|.
name|releaseCache
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//in above code,localized a file of size 4K and then release the cache
comment|// which will cause the cache be deleted when the limit goes out.
comment|// The below code localize another cache which's designed to
comment|//sweep away the first cache.
name|manager
operator|.
name|getLocalCache
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCacheDeletion
argument_list|(
name|localfs
argument_list|,
name|localCache
argument_list|,
literal|"DistributedCache failed "
operator|+
literal|"deleting old cache when the cache store is full."
argument_list|)
expr_stmt|;
comment|// Now we test the number of sub directories limit
comment|// Create the temporary cache files to be used in the tests.
name|Path
name|thirdCacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"thirdcachefile"
argument_list|)
decl_stmt|;
name|Path
name|fourthCacheFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"fourthcachefile"
argument_list|)
decl_stmt|;
comment|// Adding two more small files, so it triggers the number of sub directory
comment|// limit but does not trigger the file size limit.
name|createTempFile
argument_list|(
name|thirdCacheFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createTempFile
argument_list|(
name|fourthCacheFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Path
name|thirdLocalCache
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|thirdCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Release the third cache so that it can be deleted while sweeping
name|manager
operator|.
name|releaseCache
argument_list|(
name|thirdCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|getFileStamp
argument_list|(
name|thirdCacheFile
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Getting the fourth cache will make the number of sub directories becomes
comment|// 3 which is greater than 2. So the released cache will be deleted.
name|manager
operator|.
name|getLocalCache
argument_list|(
name|fourthCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fourthCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|fourthCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCacheDeletion
argument_list|(
name|localfs
argument_list|,
name|thirdLocalCache
argument_list|,
literal|"DistributedCache failed deleting old"
operator|+
literal|" cache when the cache exceeds the number of sub directories limit."
argument_list|)
expr_stmt|;
comment|// Clean up the files created in this test
operator|new
name|File
argument_list|(
name|thirdCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|fourthCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|manager
operator|.
name|stopCleanupThread
argument_list|()
expr_stmt|;
block|}
comment|/**    * Do a simple check to see if the file has NOT been deleted.    */
DECL|method|checkCacheNOTDeletion (FileSystem fs, Path cache, String msg)
specifier|private
name|void
name|checkCacheNOTDeletion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|cache
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|CACHE_DELETE_PERIOD_MS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Periodically checks if a file is there, return if the file is no longer    * there. Fails the test if a files is there for 30 seconds.    */
DECL|method|checkCacheDeletion (FileSystem fs, Path cache, String msg)
specifier|private
name|void
name|checkCacheDeletion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|cache
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check every 100ms to see if the cache is deleted
name|boolean
name|cacheExists
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|cache
argument_list|)
condition|)
block|{
name|cacheExists
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|CACHE_DELETE_PERIOD_MS
argument_list|)
expr_stmt|;
block|}
comment|// If the cache is still there after 5 minutes, test fails.
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|cacheExists
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileSystemOtherThanDefault ()
specifier|public
name|void
name|testFileSystemOtherThanDefault
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.fakefile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|Path
name|fileToCache
init|=
operator|new
name|Path
argument_list|(
literal|"fakefile:///"
operator|+
name|firstCacheFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|result
init|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|fileToCache
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"DistributedCache cached file on non-default filesystem."
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile (Path p)
specifier|static
name|void
name|createTempFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|createTempFile
argument_list|(
name|p
argument_list|,
name|TEST_FILE_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile (Path p, int size)
specifier|static
name|void
name|createTempFile
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"created: "
operator|+
name|p
operator|+
literal|", size="
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|createPublicTempFile (Path p)
specifier|static
name|void
name|createPublicTempFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|createTempFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
literal|"0777"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createPrivateTempFile (Path p)
specifier|static
name|void
name|createPrivateTempFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|createTempFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
literal|"0770"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|File
argument_list|(
name|firstCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|secondCacheFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileLengthEquals (Path a, Path b)
specifier|protected
name|void
name|assertFileLengthEquals
parameter_list|(
name|Path
name|a
parameter_list|,
name|Path
name|b
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|assertEquals
argument_list|(
literal|"File sizes mismatch."
argument_list|,
name|pathToFile
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|pathToFile
argument_list|(
name|b
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|pathToFile (Path p)
specifier|protected
name|File
name|pathToFile
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|class|FakeFileSystem
specifier|public
specifier|static
class|class
name|FakeFileSystem
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|increment
specifier|private
name|long
name|increment
init|=
literal|0
decl_stmt|;
DECL|method|FakeFileSystem ()
specifier|public
name|FakeFileSystem
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileStatus (Path p)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|pathToFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|128
argument_list|,
name|f
operator|.
name|lastModified
argument_list|()
operator|+
name|increment
argument_list|,
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|advanceClock (long millis)
name|void
name|advanceClock
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|increment
operator|+=
name|millis
expr_stmt|;
block|}
block|}
DECL|method|testFreshness ()
specifier|public
name|void
name|testFreshness
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myConf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"refresh:///"
argument_list|)
expr_stmt|;
name|myConf
operator|.
name|setClass
argument_list|(
literal|"fs.refresh.impl"
argument_list|,
name|FakeFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|myConf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
comment|// ****** Imitate JobClient code
comment|// Configures a task/job with both a regular file and a "classpath" file.
name|Configuration
name|subConf
init|=
operator|new
name|Configuration
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|subConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|subConf
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|subConf
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|subConf
argument_list|)
expr_stmt|;
comment|// ****** End of imitating JobClient code
comment|// ****** Imitate TaskRunner code.
name|TaskDistributedCacheManager
name|handle
init|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|subConf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|DistributedCache
operator|.
name|getLocalCacheFiles
argument_list|(
name|subConf
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"workdir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// ****** End of imitating TaskRunner code
name|Path
index|[]
name|localCacheFiles
init|=
name|DistributedCache
operator|.
name|getLocalCacheFiles
argument_list|(
name|subConf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|null
argument_list|,
name|localCacheFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localCacheFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|cachedFirstFile
init|=
name|localCacheFiles
index|[
literal|0
index|]
decl_stmt|;
name|assertFileLengthEquals
argument_list|(
name|firstCacheFile
argument_list|,
name|cachedFirstFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Paths should be different."
argument_list|,
name|firstCacheFile
operator|.
name|equals
argument_list|(
name|cachedFirstFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// release
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// change the file timestamp
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
operator|(
operator|(
name|FakeFileSystem
operator|)
name|fs
operator|)
operator|.
name|advanceClock
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// running a task of the same job
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Throwable is null"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exception message does not match"
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"has changed on HDFS since job started"
argument_list|)
argument_list|)
expr_stmt|;
comment|// release
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// running a task of the same job on another TaskTracker which has never
comment|// initialized the cache
name|TrackerDistributedCacheManager
name|manager2
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|myConf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|TaskDistributedCacheManager
name|handle2
init|=
name|manager2
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|subConf
argument_list|)
decl_stmt|;
name|File
name|workDir2
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"workdir2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|th
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|handle2
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir2
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Throwable is null"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exception message does not match"
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"has changed on HDFS since job started"
argument_list|)
argument_list|)
expr_stmt|;
comment|// release
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// submit another job
name|Configuration
name|subConf2
init|=
operator|new
name|Configuration
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|subConf2
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|subConf2
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineTimestamps
argument_list|(
name|subConf2
argument_list|)
expr_stmt|;
name|ClientDistributedCacheManager
operator|.
name|determineCacheVisibilities
argument_list|(
name|subConf2
argument_list|)
expr_stmt|;
name|handle
operator|=
name|manager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|subConf2
argument_list|)
expr_stmt|;
name|handle
operator|.
name|setup
argument_list|(
name|localDirAllocator
argument_list|,
name|workDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
index|[]
name|localCacheFiles2
init|=
name|DistributedCache
operator|.
name|getLocalCacheFiles
argument_list|(
name|subConf2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|null
argument_list|,
name|localCacheFiles2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localCacheFiles2
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|cachedFirstFile2
init|=
name|localCacheFiles2
index|[
literal|0
index|]
decl_stmt|;
name|assertFileLengthEquals
argument_list|(
name|firstCacheFile
argument_list|,
name|cachedFirstFile2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Paths should be different."
argument_list|,
name|firstCacheFile
operator|.
name|equals
argument_list|(
name|cachedFirstFile2
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert that two localizations point to different paths
name|assertFalse
argument_list|(
literal|"two jobs with different timestamps did not localize"
operator|+
literal|" in different paths"
argument_list|,
name|cachedFirstFile
operator|.
name|equals
argument_list|(
name|cachedFirstFile2
argument_list|)
argument_list|)
expr_stmt|;
comment|// release
name|handle
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|/**    * Localize a file. After localization is complete, create a file, "myFile",    * under the directory where the file is localized and ensure that it has    * permissions different from what is set by default. Then, localize another    * file. Verify that "myFile" has the right permissions.    * @throws Exception    */
DECL|method|testCustomPermissions ()
specifier|public
name|void
name|testCustomPermissions
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|TrackerDistributedCacheManager
name|manager
init|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
name|taskController
argument_list|)
decl_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
index|[]
name|localCache
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|localCache
index|[
literal|0
index|]
operator|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|firstCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|firstCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FsPermission
name|myPermission
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
decl_stmt|;
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
name|localCache
index|[
literal|0
index|]
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"myfile.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileSystem
operator|.
name|create
argument_list|(
name|localfs
argument_list|,
name|myFile
argument_list|,
name|myPermission
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create "
operator|+
name|myFile
argument_list|)
throw|;
block|}
try|try
block|{
name|localCache
index|[
literal|1
index|]
operator|=
name|manager
operator|.
name|getLocalCache
argument_list|(
name|secondCacheFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getFileStamp
argument_list|(
name|secondCacheFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|localfs
operator|.
name|getFileStatus
argument_list|(
name|myFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|myPermission
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate permissions of localized files.
name|checkFilePermissions
argument_list|(
name|localCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|localfs
operator|.
name|delete
argument_list|(
name|myFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

