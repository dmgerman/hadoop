begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test various jobhistory events  */
end_comment

begin_class
DECL|class|TestJobHistoryEvents
specifier|public
class|class
name|TestJobHistoryEvents
extends|extends
name|TestCase
block|{
DECL|field|NULL_SPLITS_ARRAY
specifier|static
specifier|final
name|int
index|[]
index|[]
name|NULL_SPLITS_ARRAY
init|=
operator|new
name|int
index|[
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedTaskAttempt
operator|.
name|SplitVectorKind
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
index|[]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NULL_SPLITS_ARRAY
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|NULL_SPLITS_ARRAY
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link TaskAttemptStartedEvent} for various task types.    */
DECL|method|testAttemptStartedEventForTypes (EventType expected, TaskAttemptID id, TaskType[] types)
specifier|private
specifier|static
name|void
name|testAttemptStartedEventForTypes
parameter_list|(
name|EventType
name|expected
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|,
name|TaskType
index|[]
name|types
parameter_list|)
block|{
for|for
control|(
name|TaskType
name|t
range|:
name|types
control|)
block|{
name|TaskAttemptStartedEvent
name|tase
init|=
operator|new
name|TaskAttemptStartedEvent
argument_list|(
name|id
argument_list|,
name|t
argument_list|,
literal|0L
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tase
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link TaskAttemptStartedEvent}.    */
DECL|method|testTaskAttemptStartedEvent ()
specifier|public
name|void
name|testTaskAttemptStartedEvent
parameter_list|()
block|{
name|EventType
name|expected
init|=
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
decl_stmt|;
name|TaskAttemptID
name|fakeId
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// check the events for job-setup, job-cleanup and map task-types
name|testAttemptStartedEventForTypes
argument_list|(
name|expected
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|MAP
block|}
argument_list|)
expr_stmt|;
name|expected
operator|=
name|EventType
operator|.
name|REDUCE_ATTEMPT_STARTED
expr_stmt|;
name|fakeId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check the events for job-setup, job-cleanup and reduce task-types
name|testAttemptStartedEventForTypes
argument_list|(
name|expected
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|REDUCE
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link TaskAttemptUnsuccessfulCompletionEvent} for various task types.    */
DECL|method|testFailedKilledEventsForTypes (EventType expected, TaskAttemptID id, TaskType[] types, String state)
specifier|private
specifier|static
name|void
name|testFailedKilledEventsForTypes
parameter_list|(
name|EventType
name|expected
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|,
name|TaskType
index|[]
name|types
parameter_list|,
name|String
name|state
parameter_list|)
block|{
for|for
control|(
name|TaskType
name|t
range|:
name|types
control|)
block|{
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
operator|new
name|TaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|id
argument_list|,
name|t
argument_list|,
name|state
argument_list|,
literal|0L
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|NULL_SPLITS_ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tauce
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link TaskAttemptUnsuccessfulCompletionEvent} for killed/failed task.    */
DECL|method|testTaskAttemptUnsuccessfulCompletionEvent ()
specifier|public
name|void
name|testTaskAttemptUnsuccessfulCompletionEvent
parameter_list|()
block|{
name|TaskAttemptID
name|fakeId
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// check killed events for job-setup, job-cleanup and map task-types
name|testFailedKilledEventsForTypes
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_KILLED
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|MAP
block|}
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check failed events for job-setup, job-cleanup and map task-types
name|testFailedKilledEventsForTypes
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|MAP
block|}
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fakeId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check killed events for job-setup, job-cleanup and reduce task-types
name|testFailedKilledEventsForTypes
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|REDUCE
block|}
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check failed events for job-setup, job-cleanup and reduce task-types
name|testFailedKilledEventsForTypes
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_FAILED
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|REDUCE
block|}
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link TaskAttemptFinishedEvent} for various task types.    */
DECL|method|testFinishedEventsForTypes (EventType expected, TaskAttemptID id, TaskType[] types)
specifier|private
specifier|static
name|void
name|testFinishedEventsForTypes
parameter_list|(
name|EventType
name|expected
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|,
name|TaskType
index|[]
name|types
parameter_list|)
block|{
for|for
control|(
name|TaskType
name|t
range|:
name|types
control|)
block|{
name|TaskAttemptFinishedEvent
name|tafe
init|=
operator|new
name|TaskAttemptFinishedEvent
argument_list|(
name|id
argument_list|,
name|t
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|,
literal|0L
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tafe
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link TaskAttemptFinishedEvent} for finished task.    */
DECL|method|testTaskAttemptFinishedEvent ()
specifier|public
name|void
name|testTaskAttemptFinishedEvent
parameter_list|()
block|{
name|EventType
name|expected
init|=
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
decl_stmt|;
name|TaskAttemptID
name|fakeId
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// check the events for job-setup, job-cleanup and map task-types
name|testFinishedEventsForTypes
argument_list|(
name|expected
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|MAP
block|}
argument_list|)
expr_stmt|;
name|expected
operator|=
name|EventType
operator|.
name|REDUCE_ATTEMPT_FINISHED
expr_stmt|;
name|fakeId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1234"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check the events for job-setup, job-cleanup and reduce task-types
name|testFinishedEventsForTypes
argument_list|(
name|expected
argument_list|,
name|fakeId
argument_list|,
operator|new
name|TaskType
index|[]
block|{
name|TaskType
operator|.
name|JOB_SETUP
block|,
name|TaskType
operator|.
name|JOB_CLEANUP
block|,
name|TaskType
operator|.
name|REDUCE
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

