begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
operator|.
name|DataCopyMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
operator|.
name|DataCopyReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests context api and {@link StatusReporter#getProgress()} via   * {@link TaskAttemptContext#getProgress()} API .   */
end_comment

begin_class
DECL|class|TestTaskContext
specifier|public
class|class
name|TestTaskContext
extends|extends
name|HadoopTestCase
block|{
DECL|field|rootTempDir
specifier|private
specifier|static
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|testRootTempDir
specifier|private
specifier|static
specifier|final
name|Path
name|testRootTempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestTaskContext"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testRootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testRootTempDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testRootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|TestTaskContext ()
specifier|public
name|TestTaskContext
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|CLUSTER_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|myStatus
specifier|static
name|String
name|myStatus
init|=
literal|"my status"
decl_stmt|;
DECL|class|MyMapper
specifier|static
class|class
name|MyMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|myStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myStatus
argument_list|,
name|context
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests context.setStatus method.    * TODO fix testcase    * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testContextStatus ()
specifier|public
name|void
name|testContextStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testContextStatus"
argument_list|)
decl_stmt|;
comment|// test with 1 map and 0 reducers
comment|// test with custom task status
name|int
name|numMaps
init|=
literal|1
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
name|numMaps
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|TaskReport
index|[]
name|reports
init|=
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numMaps
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myStatus
argument_list|,
name|reports
index|[
literal|0
index|]
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with 1 map and 1 reducer
comment|// test with default task status
name|int
name|numReduces
init|=
literal|1
decl_stmt|;
name|job
operator|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
name|numMaps
argument_list|,
name|numReduces
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|DataCopyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|DataCopyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// fail early
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// run the job and wait for completion
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|// check map task reports
comment|// TODO fix testcase
comment|// Disabling checks for now to get builds to run
comment|/*     reports = job.getTaskReports(TaskType.MAP);     assertEquals(numMaps, reports.length);     assertEquals("map> sort", reports[0].getState());          // check reduce task reports     reports = job.getTaskReports(TaskType.REDUCE);     assertEquals(numReduces, reports.length);     assertEquals("reduce> reduce", reports[0].getState());     */
block|}
comment|// an input with 4 lines
DECL|field|INPUT
specifier|private
specifier|static
specifier|final
name|String
name|INPUT
init|=
literal|"Hi\nHi\nHi\nHi\n"
decl_stmt|;
DECL|field|INPUT_LINES
specifier|private
specifier|static
specifier|final
name|int
name|INPUT_LINES
init|=
name|INPUT
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|ProgressCheckerMapper
specifier|static
class|class
name|ProgressCheckerMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|recordCount
specifier|private
name|int
name|recordCount
init|=
literal|0
decl_stmt|;
DECL|field|progressRange
specifier|private
name|float
name|progressRange
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check if the map task attempt progress is 0
name|assertEquals
argument_list|(
literal|"Invalid progress in map setup"
argument_list|,
literal|0.0f
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// define the progress boundaries
if|if
condition|(
name|context
operator|.
name|getNumReduceTasks
argument_list|()
operator|==
literal|0
condition|)
block|{
name|progressRange
operator|=
literal|1f
expr_stmt|;
block|}
else|else
block|{
name|progressRange
operator|=
literal|0.667f
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|map (LongWritable key, Text value, org.apache.hadoop.mapreduce.Mapper.Context context)
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// get the map phase progress
name|float
name|mapPhaseProgress
init|=
operator|(
operator|(
name|float
operator|)
operator|++
name|recordCount
operator|)
operator|/
name|INPUT_LINES
decl_stmt|;
comment|// get the weighted map phase progress
name|float
name|weightedMapProgress
init|=
name|progressRange
operator|*
name|mapPhaseProgress
decl_stmt|;
comment|// check the map progress
name|assertEquals
argument_list|(
literal|"Invalid progress in map"
argument_list|,
name|weightedMapProgress
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|+
name|recordCount
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|method|cleanup (Mapper.Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// check if the attempt progress is at the progress boundary
name|assertEquals
argument_list|(
literal|"Invalid progress in map cleanup"
argument_list|,
name|progressRange
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|/**    * Tests new MapReduce map task's context.getProgress() method.    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
DECL|method|testMapContextProgress ()
specifier|public
name|void
name|testMapContextProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|int
name|numMaps
init|=
literal|1
decl_stmt|;
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testMapContextProgress"
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
name|numMaps
argument_list|,
literal|0
argument_list|,
name|INPUT
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|ProgressCheckerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// fail early
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|ProgressCheckerReducer
specifier|static
class|class
name|ProgressCheckerReducer
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|recordCount
specifier|private
name|int
name|recordCount
init|=
literal|0
decl_stmt|;
DECL|field|REDUCE_PROGRESS_RANGE
specifier|private
specifier|final
name|float
name|REDUCE_PROGRESS_RANGE
init|=
literal|1.0f
operator|/
literal|3
decl_stmt|;
DECL|field|SHUFFLE_PROGRESS_RANGE
specifier|private
specifier|final
name|float
name|SHUFFLE_PROGRESS_RANGE
init|=
literal|1
operator|-
name|REDUCE_PROGRESS_RANGE
decl_stmt|;
DECL|method|setup (final Reducer.Context context)
specifier|protected
name|void
name|setup
parameter_list|(
specifier|final
name|Reducer
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Note that the reduce will read some segments before calling setup()
name|float
name|reducePhaseProgress
init|=
operator|(
operator|(
name|float
operator|)
operator|++
name|recordCount
operator|)
operator|/
name|INPUT_LINES
decl_stmt|;
name|float
name|weightedReducePhaseProgress
init|=
name|REDUCE_PROGRESS_RANGE
operator|*
name|reducePhaseProgress
decl_stmt|;
comment|// check that the shuffle phase progress is accounted for
name|assertEquals
argument_list|(
literal|"Invalid progress in reduce setup"
argument_list|,
name|SHUFFLE_PROGRESS_RANGE
operator|+
name|weightedReducePhaseProgress
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|method|reduce (Text key, Iterator<Text> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|float
name|reducePhaseProgress
init|=
operator|(
operator|(
name|float
operator|)
operator|++
name|recordCount
operator|)
operator|/
name|INPUT_LINES
decl_stmt|;
name|float
name|weightedReducePhaseProgress
init|=
name|REDUCE_PROGRESS_RANGE
operator|*
name|reducePhaseProgress
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress in reduce"
argument_list|,
name|SHUFFLE_PROGRESS_RANGE
operator|+
name|weightedReducePhaseProgress
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanup (Reducer.Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Reducer
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// check if the reduce task has progress of 1 in the end
name|assertEquals
argument_list|(
literal|"Invalid progress in reduce cleanup"
argument_list|,
literal|1.0f
argument_list|,
name|context
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|/**    * Tests new MapReduce reduce task's context.getProgress() method.    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
annotation|@
name|Test
DECL|method|testReduceContextProgress ()
specifier|public
name|void
name|testReduceContextProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|int
name|numTasks
init|=
literal|1
decl_stmt|;
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testReduceContextProgress"
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
name|numTasks
argument_list|,
name|numTasks
argument_list|,
name|INPUT
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|ProgressCheckerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|ProgressCheckerReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// fail early
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

