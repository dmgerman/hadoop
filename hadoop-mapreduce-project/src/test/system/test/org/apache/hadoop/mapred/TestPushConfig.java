begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPushConfig
specifier|public
class|class
name|TestPushConfig
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|localConfDir
specifier|private
name|String
name|localConfDir
init|=
literal|"localconf"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPushConfig
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expExcludeList
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|expExcludeList
index|[
literal|0
index|]
operator|=
literal|"java.net.ConnectException"
expr_stmt|;
name|expExcludeList
index|[
literal|1
index|]
operator|=
literal|"java.io.IOException"
expr_stmt|;
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setExcludeExpList
argument_list|(
name|expExcludeList
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test about testing the pushConfig feature. The pushConfig functionality    * available as part of the cluster process manager. The functionality takes    * in local input directory and pushes all the files from the local to the     * remote conf directory. This functionality is required is change the config    * on the fly and restart the cluster which will be used by other test cases    * @throws Exception is thrown if pushConfig fails.     */
annotation|@
name|Test
DECL|method|testPushConfig ()
specifier|public
name|void
name|testPushConfig
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|DUMMY_CONFIG_STRING
init|=
literal|"mapreduce.newdummy.conf"
decl_stmt|;
specifier|final
name|String
name|DUMMY_CONFIG_STRING_VALUE
init|=
literal|"HerriotTestRules"
decl_stmt|;
name|Configuration
name|origconf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|origconf
operator|.
name|set
argument_list|(
name|DUMMY_CONFIG_STRING
argument_list|,
name|DUMMY_CONFIG_STRING_VALUE
argument_list|)
expr_stmt|;
name|String
name|localDir
init|=
name|HadoopDaemonRemoteCluster
operator|.
name|getDeployedHadoopConfDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|localConfDir
decl_stmt|;
name|File
name|lFile
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|lFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|String
name|mapredConf
init|=
name|localDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"mapred-site.xml"
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|mapredConf
argument_list|)
decl_stmt|;
name|origconf
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|daemonConf
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getDaemonConf
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Dummy varialble is expected to be null before restart."
argument_list|,
name|daemonConf
operator|.
name|get
argument_list|(
name|DUMMY_CONFIG_STRING
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|String
name|newDir
init|=
name|cluster
operator|.
name|getClusterManager
argument_list|()
operator|.
name|pushConfig
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AbstractDaemonClient
name|cli
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
decl_stmt|;
name|waitForClusterStop
argument_list|(
name|cli
argument_list|)
expr_stmt|;
comment|// make sure the cluster has actually stopped
name|cluster
operator|.
name|getClusterManager
argument_list|()
operator|.
name|start
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|cli
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
name|waitForClusterStart
argument_list|(
name|cli
argument_list|)
expr_stmt|;
comment|// make sure the cluster has actually started
name|Configuration
name|newconf
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getDaemonConf
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Extra varialble is expected to be set"
argument_list|,
name|newconf
operator|.
name|get
argument_list|(
name|DUMMY_CONFIG_STRING
argument_list|)
operator|.
name|equals
argument_list|(
name|DUMMY_CONFIG_STRING_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getClusterManager
argument_list|()
operator|.
name|stop
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|cli
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
comment|// make sure the cluster has actually stopped
name|waitForClusterStop
argument_list|(
name|cli
argument_list|)
expr_stmt|;
comment|// start the daemons with original conf dir
name|cluster
operator|.
name|getClusterManager
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|cli
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
name|waitForClusterStart
argument_list|(
name|cli
argument_list|)
expr_stmt|;
name|daemonConf
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getDaemonConf
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Dummy variable is expected to be null after restart."
argument_list|,
name|daemonConf
operator|.
name|get
argument_list|(
name|DUMMY_CONFIG_STRING
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|lFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForClusterStop (AbstractDaemonClient cli)
specifier|private
name|void
name|waitForClusterStop
parameter_list|(
name|AbstractDaemonClient
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|cli
operator|.
name|ping
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|AbstractDaemonClient
name|tcli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|i
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|tcli
operator|.
name|ping
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|>=
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TT on "
operator|+
name|tcli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" Should have been down."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForClusterStart (AbstractDaemonClient cli)
specifier|private
name|void
name|waitForClusterStart
parameter_list|(
name|AbstractDaemonClient
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|cli
operator|.
name|ping
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Jobtracker on host : "
operator|+
name|cli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" to come up."
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AbstractDaemonClient
name|tcli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|i
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|tcli
operator|.
name|ping
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Tasktracker on host : "
operator|+
name|tcli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" to come up."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

