begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|FinishTaskControlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTTaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCluster
specifier|public
class|class
name|TestCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|method|TestCluster ()
specifier|public
name|TestCluster
parameter_list|()
throws|throws
name|Exception
block|{    }
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expExcludeList
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|expExcludeList
index|[
literal|0
index|]
operator|=
literal|"java.net.ConnectException"
expr_stmt|;
name|expExcludeList
index|[
literal|1
index|]
operator|=
literal|"java.io.IOException"
expr_stmt|;
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setExcludeExpList
argument_list|(
name|expExcludeList
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessInfo ()
specifier|public
name|void
name|testProcessInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Process info of JobTracker is : "
operator|+
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|TTClient
argument_list|>
name|tts
init|=
name|cluster
operator|.
name|getTTClients
argument_list|()
decl_stmt|;
for|for
control|(
name|TTClient
name|tt
range|:
name|tts
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Process info of TaskTracker is : "
operator|+
name|tt
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tt
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobSubmission ()
specifier|public
name|void
name|testJobSubmission
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|rJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|rJob
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|submitAndVerifyJob
argument_list|(
name|rJob
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|verifyJobHistory
argument_list|(
name|rJob
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// @Test
DECL|method|testFileStatus ()
specifier|public
name|void
name|testFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getDaemonUser
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|MRCluster
name|myCluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|myCluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|myCluster
operator|.
name|connect
argument_list|()
expr_stmt|;
name|JTClient
name|jt
init|=
name|myCluster
operator|.
name|getJTClient
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
literal|"."
decl_stmt|;
name|checkFileStatus
argument_list|(
name|jt
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|jt
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|TTClient
name|tt
range|:
name|myCluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|String
index|[]
name|localDirs
init|=
name|tt
operator|.
name|getMapredLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|checkFileStatus
argument_list|(
name|tt
operator|.
name|listStatus
argument_list|(
name|localDir
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|tt
operator|.
name|listStatus
argument_list|(
name|localDir
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|systemDir
init|=
name|jt
operator|.
name|getClient
argument_list|()
operator|.
name|getSystemDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|checkFileStatus
argument_list|(
name|jt
operator|.
name|listStatus
argument_list|(
name|systemDir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|systemDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|jt
operator|.
name|listStatus
argument_list|(
name|jt
operator|.
name|getLogDir
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|jt
operator|.
name|getLogDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|myCluster
operator|!=
literal|null
condition|)
block|{
name|myCluster
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFileStatus (FileStatus[] fs, String path)
specifier|private
name|void
name|checkFileStatus
parameter_list|(
name|FileStatus
index|[]
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-----Listing for "
operator|+
name|path
operator|+
literal|"  "
operator|+
name|fs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|fz
range|:
name|fs
control|)
block|{
name|checkFileStatus
argument_list|(
name|fz
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkFileStatus (FileStatus fz)
specifier|private
name|void
name|checkFileStatus
parameter_list|(
name|FileStatus
name|fz
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fz
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FileStatus is "
operator|+
name|fz
operator|.
name|getPath
argument_list|()
operator|+
literal|"  "
operator|+
name|fz
operator|.
name|getPermission
argument_list|()
operator|+
literal|"  "
operator|+
name|fz
operator|.
name|getOwner
argument_list|()
operator|+
literal|"  "
operator|+
name|fz
operator|.
name|getGroup
argument_list|()
operator|+
literal|"  "
operator|+
name|fz
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify the common properties of tasks.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testTaskDetails ()
specifier|public
name|void
name|testTaskDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JTProtocol
name|wovenClient
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|FinishTaskControlAction
operator|.
name|configureControlActionForJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|rJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|JobClient
name|client
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|rJob
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RunningJob
name|rJob1
init|=
name|client
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|rJob
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting till job starts running one map"
argument_list|)
expr_stmt|;
name|TaskInfo
index|[]
name|myTaskInfos
init|=
name|wovenClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|boolean
name|isOneTaskStored
init|=
literal|false
decl_stmt|;
name|String
name|sometaskpid
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|sometaskId
init|=
literal|null
decl_stmt|;
name|TTClient
name|myCli
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskInfo
name|info
range|:
name|myTaskInfos
control|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
name|String
index|[]
name|taskTrackers
init|=
name|info
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|taskTracker
range|:
name|taskTrackers
control|)
block|{
name|TTInfo
name|ttInfo
init|=
name|wovenClient
operator|.
name|getTTInfo
argument_list|(
name|taskTracker
argument_list|)
decl_stmt|;
name|TTClient
name|ttCli
init|=
name|cluster
operator|.
name|getTTClient
argument_list|(
name|ttInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|TaskID
name|taskId
init|=
name|info
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TTTaskInfo
name|ttTaskInfo
init|=
name|ttCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ttTaskInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ttTaskInfo
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ttTaskInfo
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getProgress
argument_list|()
operator|>=
literal|0.0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getProgress
argument_list|()
operator|<=
literal|1.0
argument_list|)
expr_stmt|;
comment|// Get the pid of the task attempt. The task need not have
comment|// reported the pid of the task by the time we are checking
comment|// the pid. So perform null check.
name|String
name|pid
init|=
name|ttTaskInfo
operator|.
name|getPid
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|pid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for task to report its pid back"
argument_list|)
expr_stmt|;
name|ttTaskInfo
operator|=
name|ttCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|pid
operator|=
name|ttTaskInfo
operator|.
name|getPid
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"The task pid not reported for 40 seconds."
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isOneTaskStored
condition|)
block|{
name|sometaskpid
operator|=
name|pid
expr_stmt|;
name|sometaskId
operator|=
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getTaskID
argument_list|()
expr_stmt|;
name|myCli
operator|=
name|ttCli
expr_stmt|;
name|isOneTaskStored
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"verified task progress to be between 0 and 1"
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getProgress
argument_list|()
operator|<
literal|1.0
operator|&&
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getProgress
argument_list|()
operator|>
literal|0.0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified run state as "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
name|FinishTaskControlAction
name|action
init|=
operator|new
name|FinishTaskControlAction
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
operator|.
name|downgrade
argument_list|(
name|info
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ttCli
operator|.
name|getProxy
argument_list|()
operator|.
name|sendAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rJob
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|rJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"The job not completed within 40 seconds after killing it."
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|TTTaskInfo
name|myTaskInfo
init|=
name|myCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|sometaskId
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|myTaskInfo
operator|!=
literal|null
operator|&&
operator|!
name|myTaskInfo
operator|.
name|getPid
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sleeping till task is retired from TT memory"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|myTaskInfo
operator|=
name|myCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|sometaskId
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Task not retired from TT memory within 40 seconds of job completeing"
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|myCli
operator|.
name|getProxy
argument_list|()
operator|.
name|isProcessTreeAlive
argument_list|(
name|sometaskpid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterRestart ()
specifier|public
name|void
name|testClusterRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Give the cluster time to stop the whole cluster.
name|AbstractDaemonClient
name|cli
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|cli
operator|.
name|ping
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|>=
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"JT on "
operator|+
name|cli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" Should have been down."
argument_list|)
expr_stmt|;
block|}
name|i
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|AbstractDaemonClient
name|tcli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|i
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|tcli
operator|.
name|ping
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|>=
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TT on "
operator|+
name|tcli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" Should have been down."
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|cli
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|cli
operator|.
name|ping
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Jobtracker on host : "
operator|+
name|cli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" to come up."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|>=
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"JT on "
operator|+
name|cli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" Should have been up."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AbstractDaemonClient
name|tcli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|i
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|40
condition|)
block|{
try|try
block|{
name|tcli
operator|.
name|ping
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Tasktracker on host : "
operator|+
name|tcli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" to come up."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|>=
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TT on "
operator|+
name|tcli
operator|.
name|getHostName
argument_list|()
operator|+
literal|" Should have been Up."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

