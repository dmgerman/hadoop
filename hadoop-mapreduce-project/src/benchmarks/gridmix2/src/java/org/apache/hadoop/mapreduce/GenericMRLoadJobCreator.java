begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_class
DECL|class|GenericMRLoadJobCreator
specifier|public
class|class
name|GenericMRLoadJobCreator
extends|extends
name|GenericMRLoadGenerator
block|{
DECL|method|createJob (String[] argv, boolean mapoutputCompressed, boolean outputCompressed)
specifier|public
specifier|static
name|Job
name|createJob
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|boolean
name|mapoutputCompressed
parameter_list|,
name|boolean
name|outputCompressed
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|GenericMRLoadGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SampleMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SampleReducer
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parseArgs
argument_list|(
name|argv
argument_list|,
name|job
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|job
argument_list|)
condition|)
block|{
comment|// No output dir? No writes
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|job
argument_list|)
operator|.
name|length
condition|)
block|{
comment|// No input dir? Generate random data
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No input path; ignoring InputFormat"
argument_list|)
expr_stmt|;
name|confRandom
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|conf
operator|.
name|getClass
argument_list|(
name|INDIRECT_INPUT_FORMAT
argument_list|,
literal|null
argument_list|)
condition|)
block|{
comment|// specified IndirectInputFormat? Build src list
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|sysdir
init|=
name|jClient
operator|.
name|getSystemDir
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Path
name|indirInputFile
init|=
operator|new
name|Path
argument_list|(
name|sysdir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|36
argument_list|)
operator|+
literal|"_files"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|INDIRECT_INPUT_FILE
argument_list|,
name|indirInputFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|sysdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|indirInputFile
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Path
name|p
range|:
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|job
argument_list|)
control|)
block|{
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|Path
argument_list|>
name|pathstack
init|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|pathstack
operator|.
name|push
argument_list|(
name|p
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pathstack
operator|.
name|empty
argument_list|()
condition|)
block|{
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|pathstack
operator|.
name|pop
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
name|pathstack
operator|.
name|push
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
name|mapoutputCompressed
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
name|outputCompressed
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
end_class

end_unit

