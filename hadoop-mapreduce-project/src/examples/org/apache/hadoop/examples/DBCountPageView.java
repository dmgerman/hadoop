begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|reduce
operator|.
name|LongSumReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hsqldb
operator|.
name|Server
import|;
end_import

begin_comment
comment|/**  * This is a demonstrative program, which uses DBInputFormat for reading  * the input data from a database, and DBOutputFormat for writing the data   * to the database.   *<br>  * The Program first creates the necessary tables, populates the input table   * and runs the mapred job.   *<br>   * The input data is a mini access log, with a<code>&lt;url,referrer,time&gt;  *</code> schema.The output is the number of pageviews of each url in the log,   * having the schema<code>&lt;url,pageview&gt;</code>.    *   * When called with no arguments the program starts a local HSQLDB server, and   * uses this database for storing/retrieving the data.   */
end_comment

begin_class
DECL|class|DBCountPageView
specifier|public
class|class
name|DBCountPageView
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DBCountPageView
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
DECL|field|AccessFieldNames
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|AccessFieldNames
init|=
block|{
literal|"url"
block|,
literal|"referrer"
block|,
literal|"time"
block|}
decl_stmt|;
DECL|field|PageviewFieldNames
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PageviewFieldNames
init|=
block|{
literal|"url"
block|,
literal|"pageview"
block|}
decl_stmt|;
DECL|field|DB_URL
specifier|private
specifier|static
specifier|final
name|String
name|DB_URL
init|=
literal|"jdbc:hsqldb:hsql://localhost/URLAccess"
decl_stmt|;
DECL|field|DRIVER_CLASS
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_CLASS
init|=
literal|"org.hsqldb.jdbcDriver"
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|startHsqldbServer ()
specifier|private
name|void
name|startHsqldbServer
parameter_list|()
block|{
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|server
operator|.
name|setDatabasePath
argument_list|(
literal|0
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
literal|"/URLAccess"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setDatabaseName
argument_list|(
literal|0
argument_list|,
literal|"URLAccess"
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createConnection (String driverClassName , String url)
specifier|private
name|void
name|createConnection
parameter_list|(
name|String
name|driverClassName
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverClassName
argument_list|)
expr_stmt|;
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|private
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred while closing connection :"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred while shutting down HSQLDB :"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initialize (String driverClassName, String url)
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|driverClassName
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
if|if
condition|(
name|driverClassName
operator|.
name|equals
argument_list|(
name|DRIVER_CLASS
argument_list|)
condition|)
block|{
name|startHsqldbServer
argument_list|()
expr_stmt|;
block|}
name|createConnection
argument_list|(
name|driverClassName
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|dropTables
argument_list|()
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
name|populateAccess
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|dropTables ()
specifier|private
name|void
name|dropTables
parameter_list|()
block|{
name|String
name|dropAccess
init|=
literal|"DROP TABLE Access"
decl_stmt|;
name|String
name|dropPageview
init|=
literal|"DROP TABLE Pageview"
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|st
operator|.
name|executeUpdate
argument_list|(
name|dropAccess
argument_list|)
expr_stmt|;
name|st
operator|.
name|executeUpdate
argument_list|(
name|dropPageview
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|method|createTables ()
specifier|private
name|void
name|createTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|String
name|createAccess
init|=
literal|"CREATE TABLE "
operator|+
literal|"Access(url      VARCHAR(100) NOT NULL,"
operator|+
literal|" referrer VARCHAR(100),"
operator|+
literal|" time     BIGINT NOT NULL, "
operator|+
literal|" PRIMARY KEY (url, time))"
decl_stmt|;
name|String
name|createPageview
init|=
literal|"CREATE TABLE "
operator|+
literal|"Pageview(url      VARCHAR(100) NOT NULL,"
operator|+
literal|" pageview     BIGINT NOT NULL, "
operator|+
literal|" PRIMARY KEY (url))"
decl_stmt|;
name|Statement
name|st
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|st
operator|.
name|executeUpdate
argument_list|(
name|createAccess
argument_list|)
expr_stmt|;
name|st
operator|.
name|executeUpdate
argument_list|(
name|createPageview
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Populates the Access table with generated records.    */
DECL|method|populateAccess ()
specifier|private
name|void
name|populateAccess
parameter_list|()
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO Access(url, referrer, time)"
operator|+
literal|" VALUES (?, ?, ?)"
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|time
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|+
literal|50
decl_stmt|;
specifier|final
name|int
name|PROBABILITY_PRECISION
init|=
literal|100
decl_stmt|;
comment|//  1 / 100
specifier|final
name|int
name|NEW_PAGE_PROBABILITY
init|=
literal|15
decl_stmt|;
comment|//  15 / 100
comment|//Pages in the site :
name|String
index|[]
name|pages
init|=
block|{
literal|"/a"
block|,
literal|"/b"
block|,
literal|"/c"
block|,
literal|"/d"
block|,
literal|"/e"
block|,
literal|"/f"
block|,
literal|"/g"
block|,
literal|"/h"
block|,
literal|"/i"
block|,
literal|"/j"
block|}
decl_stmt|;
comment|//linkMatrix[i] is the array of pages(indexes) that page_i links to.
name|int
index|[]
index|[]
name|linkMatrix
init|=
block|{
block|{
literal|1
block|,
literal|5
block|,
literal|7
block|}
block|,
block|{
literal|0
block|,
literal|7
block|,
literal|4
block|,
literal|6
block|,}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|7
block|,
literal|8
block|}
block|,
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|9
block|}
block|,
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|3
block|,
literal|5
block|,
literal|9
block|}
block|,
block|{
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|0
block|,
literal|2
block|,
literal|6
block|}
block|,
block|{
literal|0
block|,
literal|2
block|,
literal|6
block|}
block|}
decl_stmt|;
comment|//a mini model of user browsing a la pagerank
name|int
name|currentPage
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|pages
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|referrer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|time
condition|;
name|i
operator|++
control|)
block|{
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|pages
index|[
name|currentPage
index|]
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|referrer
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|statement
operator|.
name|execute
argument_list|()
expr_stmt|;
name|int
name|action
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|PROBABILITY_PRECISION
argument_list|)
decl_stmt|;
comment|// go to a new page with probability
comment|// NEW_PAGE_PROBABILITY / PROBABILITY_PRECISION
if|if
condition|(
name|action
operator|<
name|NEW_PAGE_PROBABILITY
condition|)
block|{
name|currentPage
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|pages
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// a random page
name|referrer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|referrer
operator|=
name|pages
index|[
name|currentPage
index|]
expr_stmt|;
name|action
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|linkMatrix
index|[
name|currentPage
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|currentPage
operator|=
name|linkMatrix
index|[
name|currentPage
index|]
index|[
name|action
index|]
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**Verifies the results are correct */
DECL|method|verify ()
specifier|private
name|boolean
name|verify
parameter_list|()
throws|throws
name|SQLException
block|{
comment|//check total num pageview
name|String
name|countAccessQuery
init|=
literal|"SELECT COUNT(*) FROM Access"
decl_stmt|;
name|String
name|sumPageviewQuery
init|=
literal|"SELECT SUM(pageview) FROM Pageview"
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|rs
operator|=
name|st
operator|.
name|executeQuery
argument_list|(
name|countAccessQuery
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|long
name|totalPageview
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rs
operator|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sumPageviewQuery
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|long
name|sumPageview
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"totalPageview="
operator|+
name|totalPageview
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sumPageview="
operator|+
name|sumPageview
argument_list|)
expr_stmt|;
return|return
name|totalPageview
operator|==
name|sumPageview
operator|&&
name|totalPageview
operator|!=
literal|0
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Holds a&lt;url, referrer, time&gt; tuple */
DECL|class|AccessRecord
specifier|static
class|class
name|AccessRecord
implements|implements
name|Writable
implements|,
name|DBWritable
block|{
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|referrer
name|String
name|referrer
decl_stmt|;
DECL|field|time
name|long
name|time
decl_stmt|;
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|url
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|referrer
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|referrer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (ResultSet resultSet)
specifier|public
name|void
name|readFields
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|url
operator|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|referrer
operator|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|resultSet
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (PreparedStatement statement)
specifier|public
name|void
name|write
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|referrer
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Holds a&lt;url, pageview&gt; tuple */
DECL|class|PageviewRecord
specifier|static
class|class
name|PageviewRecord
implements|implements
name|Writable
implements|,
name|DBWritable
block|{
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|pageview
name|long
name|pageview
decl_stmt|;
DECL|method|PageviewRecord (String url, long pageview)
specifier|public
name|PageviewRecord
parameter_list|(
name|String
name|url
parameter_list|,
name|long
name|pageview
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|pageview
operator|=
name|pageview
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|url
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageview
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|pageview
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (ResultSet resultSet)
specifier|public
name|void
name|readFields
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|url
operator|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageview
operator|=
name|resultSet
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (PreparedStatement statement)
specifier|public
name|void
name|write
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|pageview
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|url
operator|+
literal|" "
operator|+
name|pageview
return|;
block|}
block|}
comment|/**    * Mapper extracts URLs from the AccessRecord (tuples from db),     * and emits a&lt;url,1&gt; pair for each access record.     */
DECL|class|PageviewMapper
specifier|static
class|class
name|PageviewMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|AccessRecord
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|ONE
name|LongWritable
name|ONE
init|=
operator|new
name|LongWritable
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|map (LongWritable key, AccessRecord value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|AccessRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Text
name|oKey
init|=
operator|new
name|Text
argument_list|(
name|value
operator|.
name|url
argument_list|)
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
name|oKey
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reducer sums up the pageviews and emits a PageviewRecord,     * which will correspond to one tuple in the db.    */
DECL|class|PageviewReducer
specifier|static
class|class
name|PageviewReducer
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|PageviewRecord
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|n
name|NullWritable
name|n
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|reduce (Text key, Iterable<LongWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|LongWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|LongWritable
name|value
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
operator|new
name|PageviewRecord
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|sum
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|//Usage DBCountPageView [driverClass dburl]
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|driverClassName
init|=
name|DRIVER_CLASS
decl_stmt|;
name|String
name|url
init|=
name|DB_URL
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|driverClassName
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|url
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
block|}
name|initialize
argument_list|(
name|driverClassName
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|DBConfiguration
operator|.
name|configureDB
argument_list|(
name|conf
argument_list|,
name|driverClassName
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"Count Pageviews of URLs"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|DBCountPageView
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|PageviewMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|LongSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|PageviewReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|AccessRecord
operator|.
name|class
argument_list|,
literal|"Access"
argument_list|,
literal|null
argument_list|,
literal|"url"
argument_list|,
name|AccessFieldNames
argument_list|)
expr_stmt|;
name|DBOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
literal|"Pageview"
argument_list|,
name|PageviewFieldNames
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|PageviewRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|boolean
name|correct
init|=
name|verify
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|correct
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Evaluation was not correct!"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DBCountPageView
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

