begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  *<p><code>ApplicationAttemptId</code> denotes the particular<em>attempt</em>  * of an<code>ApplicationMaster</code> for a given {@link ApplicationId}.</p>  *   *<p>Multiple attempts might be needed to run an application to completion due  * to temporal failures of the<code>ApplicationMaster</code> such as hardware  * failures, connectivity issues etc. on the node on which it was scheduled.</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|ApplicationAttemptId
specifier|public
specifier|abstract
class|class
name|ApplicationAttemptId
implements|implements
name|Comparable
argument_list|<
name|ApplicationAttemptId
argument_list|>
block|{
comment|/**    * Get the<code>ApplicationId</code> of the<code>ApplicationAttempId</code>.     * @return<code>ApplicationId</code> of the<code>ApplicationAttempId</code>    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getApplicationId ()
specifier|public
specifier|abstract
name|ApplicationId
name|getApplicationId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setApplicationId (ApplicationId appID)
specifier|public
specifier|abstract
name|void
name|setApplicationId
parameter_list|(
name|ApplicationId
name|appID
parameter_list|)
function_decl|;
comment|/**    * Get the<code>attempt id</code> of the<code>Application</code>.    * @return<code>attempt id</code> of the<code>Application</code>    */
DECL|method|getAttemptId ()
specifier|public
specifier|abstract
name|int
name|getAttemptId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setAttemptId (int attemptId)
specifier|public
specifier|abstract
name|void
name|setAttemptId
parameter_list|(
name|int
name|attemptId
parameter_list|)
function_decl|;
DECL|field|idFormat
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|field|counterFormat
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|counterFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|counterFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|counterFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Generated by eclipse.
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|getApplicationId
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|appId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|appId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getAttemptId
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|ApplicationAttemptId
name|otherAttemptId
init|=
operator|(
name|ApplicationAttemptId
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getAttemptId
argument_list|()
operator|==
name|otherAttemptId
operator|.
name|getAttemptId
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ApplicationAttemptId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ApplicationAttemptId
name|other
parameter_list|)
block|{
name|int
name|compareAppIds
init|=
name|this
operator|.
name|getApplicationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareAppIds
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getAttemptId
argument_list|()
operator|-
name|other
operator|.
name|getAttemptId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|compareAppIds
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|id
init|=
operator|(
name|this
operator|.
name|getApplicationId
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|this
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
operator|+
literal|"_"
operator|+
name|idFormat
operator|.
name|format
argument_list|(
name|this
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|"none"
decl_stmt|;
return|return
literal|"appattempt_"
operator|+
name|id
operator|+
literal|"_"
operator|+
name|counterFormat
operator|.
name|format
argument_list|(
name|getAttemptId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

