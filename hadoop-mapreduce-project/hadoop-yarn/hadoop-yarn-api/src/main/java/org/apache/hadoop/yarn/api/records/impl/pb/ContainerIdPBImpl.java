begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ProtoBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationAttemptIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerIdProtoOrBuilder
import|;
end_import

begin_class
DECL|class|ContainerIdPBImpl
specifier|public
class|class
name|ContainerIdPBImpl
extends|extends
name|ProtoBase
argument_list|<
name|ContainerIdProto
argument_list|>
implements|implements
name|ContainerId
block|{
DECL|field|proto
name|ContainerIdProto
name|proto
init|=
name|ContainerIdProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|ContainerIdProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|applicationId
specifier|private
name|ApplicationId
name|applicationId
init|=
literal|null
decl_stmt|;
DECL|field|appAttemptId
specifier|private
name|ApplicationAttemptId
name|appAttemptId
init|=
literal|null
decl_stmt|;
DECL|field|idFormat
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|field|counterFormat
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|counterFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|counterFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|counterFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Why thread local?
comment|// ^ NumberFormat instances are not threadsafe
DECL|field|appIdFormat
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|appIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
comment|// TODO: fail the app submission if attempts are more than 10 or something
DECL|field|appAttemptIdFormat
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|appAttemptIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
comment|// TODO: Why thread local?
comment|// ^ NumberFormat instances are not threadsafe
DECL|field|containerIdFormat
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|containerIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
DECL|method|ContainerIdPBImpl ()
specifier|public
name|ContainerIdPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|ContainerIdProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|ContainerIdPBImpl (ContainerIdProto proto)
specifier|public
name|ContainerIdPBImpl
parameter_list|(
name|ContainerIdProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|ContainerIdProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|applicationId
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|applicationId
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setAppId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|appAttemptId
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|ApplicationAttemptIdPBImpl
operator|)
name|appAttemptId
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setAppAttemptId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|ContainerIdProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
name|ContainerIdProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|getId
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setId (int id)
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setId
argument_list|(
operator|(
name|id
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAppId ()
specifier|public
name|ApplicationId
name|getAppId
parameter_list|()
block|{
name|ContainerIdProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|applicationId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasAppId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|applicationId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|getAppAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|()
block|{
name|ContainerIdProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|appAttemptId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|appAttemptId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasAppAttemptId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|appAttemptId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|appAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|setAppId (ApplicationId appId)
specifier|public
name|void
name|setAppId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearAppId
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAppAttemptId (ApplicationAttemptId atId)
specifier|public
name|void
name|setAppAttemptId
parameter_list|(
name|ApplicationAttemptId
name|atId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|atId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearAppAttemptId
argument_list|()
expr_stmt|;
name|this
operator|.
name|appAttemptId
operator|=
name|atId
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (ApplicationAttemptIdProto p)
specifier|private
name|ApplicationAttemptIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ApplicationAttemptIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ApplicationAttemptIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ApplicationAttemptId t)
specifier|private
name|ApplicationAttemptIdProto
name|convertToProtoFormat
parameter_list|(
name|ApplicationAttemptId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ApplicationAttemptIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ApplicationIdProto p)
specifier|private
name|ApplicationIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ApplicationIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ApplicationIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ApplicationId t)
specifier|private
name|ApplicationIdProto
name|convertToProtoFormat
parameter_list|(
name|ApplicationId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ContainerId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ContainerId
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getId
argument_list|()
operator|-
name|other
operator|.
name|getId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|getAppId
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"container_"
argument_list|)
operator|.
name|append
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appAttemptIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|containerIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

