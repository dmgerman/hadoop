begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * A set of assertions about the state of any service  */
end_comment

begin_class
DECL|class|ServiceAssert
specifier|public
class|class
name|ServiceAssert
extends|extends
name|Assert
block|{
DECL|method|assertServiceStateCreated (Service service)
specifier|public
specifier|static
name|void
name|assertServiceStateCreated
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertServiceStateInited (Service service)
specifier|public
specifier|static
name|void
name|assertServiceStateInited
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertServiceStateStarted (Service service)
specifier|public
specifier|static
name|void
name|assertServiceStateStarted
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertServiceStateStopped (Service service)
specifier|public
specifier|static
name|void
name|assertServiceStateStopped
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertServiceInState (Service service, Service.STATE state)
specifier|public
specifier|static
name|void
name|assertServiceInState
parameter_list|(
name|Service
name|service
parameter_list|,
name|Service
operator|.
name|STATE
name|state
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Null service"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Service in wrong state: "
operator|+
name|service
argument_list|,
name|state
argument_list|,
name|service
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

