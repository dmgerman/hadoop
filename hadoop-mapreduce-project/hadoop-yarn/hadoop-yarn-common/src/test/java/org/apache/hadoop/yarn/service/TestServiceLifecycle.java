begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestServiceLifecycle
specifier|public
class|class
name|TestServiceLifecycle
extends|extends
name|ServiceAssert
block|{
DECL|method|assertStateCount (BreakableService service, Service.STATE state, int expected)
name|void
name|assertStateCount
parameter_list|(
name|BreakableService
name|service
parameter_list|,
name|Service
operator|.
name|STATE
name|state
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|actual
init|=
name|service
operator|.
name|getCount
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
name|fail
argument_list|(
literal|"Expected entry count for state ["
operator|+
name|state
operator|+
literal|"] of "
operator|+
name|service
operator|+
literal|" to be "
operator|+
name|expected
operator|+
literal|" but was "
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWalkthrough ()
specifier|public
name|void
name|testWalkthrough
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertServiceStateStarted
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * call init twice    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testInitTwice ()
specifier|public
name|void
name|testInitTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * call start twice    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testStartTwice ()
specifier|public
name|void
name|testStartTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that when a service is stopped more than once, no exception    * is thrown, and the counter is incremented    * this is because the state change operations happen after the counter in    * the subclass is incremented, even though stop is meant to be a no-op    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testStopTwice ()
specifier|public
name|void
name|testStopTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show that if the service failed during an init    * operation, it stays in the created state, even after stopping it    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testStopFailedInit ()
specifier|public
name|void
name|testStopFailedInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|//the service state wasn't passed
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//now try to stop
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//even after the stop operation, we haven't entered the state
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show that if the service failed during an init    * operation, it stays in the created state, even after stopping it    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testStopFailedStart ()
specifier|public
name|void
name|testStopFailedStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|//the service state wasn't passed
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//now try to stop
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//even after the stop operation, we haven't entered the state
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that when a service is stopped more than once, no exception    * is thrown, and the counter is incremented    * this is because the state change operations happen after the counter in    * the subclass is incremented, even though stop is meant to be a no-op    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testFailingStop ()
specifier|public
name|void
name|testFailingStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//now try again, and expect it to happen again
try|try
block|{
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

