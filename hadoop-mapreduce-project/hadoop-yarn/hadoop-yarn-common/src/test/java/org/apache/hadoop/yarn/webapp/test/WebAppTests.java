begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebAppException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|WebAppTests
specifier|public
class|class
name|WebAppTests
block|{
comment|/**    * Create a mock injector for tests    * @param<T> type of class/interface    * @param api the interface class of the object to inject    * @param impl the implementation object to inject    * @param modules additional guice modules    * @return an injector    */
DECL|method|createMockInjector (final Class<T> api, final T impl, final Module... modules)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|createMockInjector
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|api
parameter_list|,
specifier|final
name|T
name|impl
parameter_list|,
specifier|final
name|Module
modifier|...
name|modules
parameter_list|)
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
specifier|final
name|PrintWriter
name|writer
init|=
name|spy
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HttpServletRequest
name|request
init|=
name|createRequest
argument_list|()
decl_stmt|;
specifier|final
name|HttpServletResponse
name|response
init|=
name|createResponse
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
if|if
condition|(
name|api
operator|!=
literal|null
condition|)
block|{
name|bind
argument_list|(
name|api
argument_list|)
operator|.
name|toInstance
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
name|bindScope
argument_list|(
name|RequestScoped
operator|.
name|class
argument_list|,
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Module
name|module
range|:
name|modules
control|)
block|{
name|install
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Provides
name|HttpServletRequest
name|request
parameter_list|()
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Provides
name|HttpServletResponse
name|response
parameter_list|()
block|{
return|return
name|response
return|;
block|}
annotation|@
name|Provides
name|PrintWriter
name|writer
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
name|HttpServletRequest
name|createRequest
parameter_list|()
block|{
comment|// the default suffices for now
return|return
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
return|;
block|}
name|HttpServletResponse
name|createResponse
parameter_list|()
block|{
try|try
block|{
name|HttpServletResponse
name|res
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|res
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|// convenience
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createMockInjector (T impl)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|createMockInjector
parameter_list|(
name|T
name|impl
parameter_list|)
block|{
return|return
name|createMockInjector
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|impl
operator|.
name|getClass
argument_list|()
argument_list|,
name|impl
argument_list|)
return|;
block|}
DECL|method|flushOutput (Injector injector)
specifier|public
specifier|static
name|void
name|flushOutput
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|HttpServletResponse
name|res
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|res
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|testController (Class<? extends Controller> ctrlr, String methodName, Class<T> api, T impl, Module... modules)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testController
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Controller
argument_list|>
name|ctrlr
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|api
parameter_list|,
name|T
name|impl
parameter_list|,
name|Module
modifier|...
name|modules
parameter_list|)
block|{
try|try
block|{
name|Injector
name|injector
init|=
name|createMockInjector
argument_list|(
name|api
argument_list|,
name|impl
argument_list|,
name|modules
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|ctrlr
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ctrlr
argument_list|)
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
return|return
name|injector
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|testController (Class<? extends Controller> ctrlr, String methodName)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testController
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Controller
argument_list|>
name|ctrlr
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
return|return
name|testController
argument_list|(
name|ctrlr
argument_list|,
name|methodName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|testPage (Class<? extends View> page, Class<T> api, T impl, Map<String,String> params, Module... modules)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testPage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|View
argument_list|>
name|page
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|api
parameter_list|,
name|T
name|impl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Module
modifier|...
name|modules
parameter_list|)
block|{
name|Injector
name|injector
init|=
name|createMockInjector
argument_list|(
name|api
argument_list|,
name|impl
argument_list|,
name|modules
argument_list|)
decl_stmt|;
name|View
name|view
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|view
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|view
operator|.
name|render
argument_list|()
expr_stmt|;
name|flushOutput
argument_list|(
name|injector
argument_list|)
expr_stmt|;
return|return
name|injector
return|;
block|}
DECL|method|testPage (Class<? extends View> page, Class<T> api, T impl, Module... modules)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testPage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|View
argument_list|>
name|page
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|api
parameter_list|,
name|T
name|impl
parameter_list|,
name|Module
modifier|...
name|modules
parameter_list|)
block|{
return|return
name|testPage
argument_list|(
name|page
argument_list|,
name|api
argument_list|,
name|impl
argument_list|,
literal|null
argument_list|,
name|modules
argument_list|)
return|;
block|}
comment|// convenience
DECL|method|testPage (Class<? extends View> page)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testPage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|View
argument_list|>
name|page
parameter_list|)
block|{
return|return
name|testPage
argument_list|(
name|page
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|testBlock (Class<? extends SubView> block, Class<T> api, T impl, Module... modules)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testBlock
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|block
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|api
parameter_list|,
name|T
name|impl
parameter_list|,
name|Module
modifier|...
name|modules
parameter_list|)
block|{
name|Injector
name|injector
init|=
name|createMockInjector
argument_list|(
name|api
argument_list|,
name|impl
argument_list|,
name|modules
argument_list|)
decl_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|block
argument_list|)
operator|.
name|renderPartial
argument_list|()
expr_stmt|;
name|flushOutput
argument_list|(
name|injector
argument_list|)
expr_stmt|;
return|return
name|injector
return|;
block|}
comment|// convenience
DECL|method|testBlock (Class<? extends SubView> block)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Injector
name|testBlock
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|block
parameter_list|)
block|{
return|return
name|testBlock
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

