begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.yarn.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestApplicationAttemptId
specifier|public
class|class
name|TestApplicationAttemptId
block|{
annotation|@
name|Test
DECL|method|testApplicationAttemptId ()
specifier|public
name|void
name|testApplicationAttemptId
parameter_list|()
block|{
name|ApplicationAttemptId
name|a1
init|=
name|createAppAttemptId
argument_list|(
literal|10l
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|a2
init|=
name|createAppAttemptId
argument_list|(
literal|10l
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|a3
init|=
name|createAppAttemptId
argument_list|(
literal|10l
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|a4
init|=
name|createAppAttemptId
argument_list|(
literal|8l
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|a5
init|=
name|createAppAttemptId
argument_list|(
literal|10l
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|compareTo
argument_list|(
name|a5
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|compareTo
argument_list|(
name|a3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|compareTo
argument_list|(
name|a4
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a1
operator|.
name|hashCode
argument_list|()
operator|==
name|a5
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|hashCode
argument_list|()
operator|==
name|a2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|hashCode
argument_list|()
operator|==
name|a3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|a1
operator|.
name|hashCode
argument_list|()
operator|==
name|a4
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppAttemptId (long clusterTimeStamp, int id, int attemptId)
specifier|private
name|ApplicationAttemptId
name|createAppAttemptId
parameter_list|(
name|long
name|clusterTimeStamp
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appId
operator|.
name|setClusterTimestamp
argument_list|(
name|clusterTimeStamp
argument_list|)
expr_stmt|;
name|appId
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|appAttemptId
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|appAttemptId
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
return|return
name|appAttemptId
return|;
block|}
block|}
end_class

end_unit

