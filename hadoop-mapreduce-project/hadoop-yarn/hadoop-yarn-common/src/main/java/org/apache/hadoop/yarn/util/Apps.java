begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Yarn application related utilities  */
end_comment

begin_class
DECL|class|Apps
specifier|public
class|class
name|Apps
block|{
DECL|field|APP
specifier|public
specifier|static
specifier|final
name|String
name|APP
init|=
literal|"app"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"ID"
decl_stmt|;
DECL|method|toString (ApplicationId id)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ApplicationId
name|id
parameter_list|)
block|{
return|return
name|_join
argument_list|(
literal|"app"
argument_list|,
name|id
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toAppID (String aid)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|aid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|aid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|toAppID
argument_list|(
name|APP
argument_list|,
name|aid
argument_list|,
name|it
argument_list|)
return|;
block|}
DECL|method|toAppID (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|it
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appId
operator|.
name|setClusterTimestamp
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|appId
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|shouldHaveNext (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|void
name|shouldHaveNext
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|throwParseException (String name, String s)
specifier|public
specifier|static
name|void
name|throwParseException
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|join
argument_list|(
literal|"Error parsing "
argument_list|,
name|name
argument_list|,
literal|": "
argument_list|,
name|s
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

