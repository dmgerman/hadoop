begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @see WebApps for a usage example  */
end_comment

begin_class
DECL|class|WebApp
specifier|public
specifier|abstract
class|class
name|WebApp
extends|extends
name|ServletModule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebApp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|HTTP
DECL|enumConstant|GET
DECL|enumConstant|POST
DECL|enumConstant|HEAD
DECL|enumConstant|PUT
DECL|enumConstant|DELETE
specifier|public
enum|enum
name|HTTP
block|{
name|GET
block|,
name|POST
block|,
name|HEAD
block|,
name|PUT
block|,
name|DELETE
block|}
empty_stmt|;
DECL|field|name
specifier|private
specifier|volatile
name|String
name|name
decl_stmt|;
DECL|field|conf
specifier|private
specifier|volatile
name|Configuration
name|conf
decl_stmt|;
DECL|field|httpServer
specifier|private
specifier|volatile
name|HttpServer
name|httpServer
decl_stmt|;
DECL|field|guiceFilter
specifier|private
specifier|volatile
name|GuiceFilter
name|guiceFilter
decl_stmt|;
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
comment|// index for the parsed route result
DECL|field|R_PATH
specifier|static
specifier|final
name|int
name|R_PATH
init|=
literal|0
decl_stmt|;
DECL|field|R_CONTROLLER
specifier|static
specifier|final
name|int
name|R_CONTROLLER
init|=
literal|1
decl_stmt|;
DECL|field|R_ACTION
specifier|static
specifier|final
name|int
name|R_ACTION
init|=
literal|2
decl_stmt|;
DECL|field|R_PARAMS
specifier|static
specifier|final
name|int
name|R_PARAMS
init|=
literal|3
decl_stmt|;
DECL|field|pathSplitter
specifier|static
specifier|final
name|Splitter
name|pathSplitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
DECL|method|setHttpServer (HttpServer server)
name|void
name|setHttpServer
parameter_list|(
name|HttpServer
name|server
parameter_list|)
block|{
name|httpServer
operator|=
name|checkNotNull
argument_list|(
name|server
argument_list|,
literal|"http server"
argument_list|)
expr_stmt|;
block|}
DECL|method|httpServer ()
annotation|@
name|Provides
specifier|public
name|HttpServer
name|httpServer
parameter_list|()
block|{
return|return
name|httpServer
return|;
block|}
DECL|method|port ()
specifier|public
name|int
name|port
parameter_list|()
block|{
return|return
name|checkNotNull
argument_list|(
name|httpServer
argument_list|,
literal|"httpServer"
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|checkNotNull
argument_list|(
name|httpServer
argument_list|,
literal|"httpServer"
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|checkNotNull
argument_list|(
name|guiceFilter
argument_list|,
literal|"guiceFilter"
argument_list|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|joinThread ()
specifier|public
name|void
name|joinThread
parameter_list|()
block|{
try|try
block|{
name|checkNotNull
argument_list|(
name|httpServer
argument_list|,
literal|"httpServer"
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setConf (Configuration conf)
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|conf ()
annotation|@
name|Provides
specifier|public
name|Configuration
name|conf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|router ()
annotation|@
name|Provides
name|Router
name|router
parameter_list|()
block|{
return|return
name|router
return|;
block|}
DECL|method|webApp ()
annotation|@
name|Provides
name|WebApp
name|webApp
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|setName (String name)
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|setHostClass (Class<?> cls)
name|void
name|setHostClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|router
operator|.
name|setHostClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
DECL|method|setGuiceFilter (GuiceFilter instance)
name|void
name|setGuiceFilter
parameter_list|(
name|GuiceFilter
name|instance
parameter_list|)
block|{
name|guiceFilter
operator|=
name|instance
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|public
name|void
name|configureServlets
parameter_list|()
block|{
name|setup
argument_list|()
expr_stmt|;
name|serve
argument_list|(
literal|"/"
argument_list|,
literal|"/__stop"
argument_list|,
name|StringHelper
operator|.
name|join
argument_list|(
literal|'/'
argument_list|,
name|name
argument_list|,
literal|'*'
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup of a webapp serving route.    * @param method  the http method for the route    * @param pathSpec  the path spec in the form of /controller/action/:args etc.    * @param cls the controller class    * @param action the controller method    */
DECL|method|route (HTTP method, String pathSpec, Class<? extends Controller> cls, String action)
specifier|public
name|void
name|route
parameter_list|(
name|HTTP
name|method
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Controller
argument_list|>
name|cls
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|parseRoute
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
name|router
operator|.
name|add
argument_list|(
name|method
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|R_PATH
argument_list|)
argument_list|,
name|cls
argument_list|,
name|action
argument_list|,
name|res
operator|.
name|subList
argument_list|(
name|R_PARAMS
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|route (String pathSpec, Class<? extends Controller> cls, String action)
specifier|public
name|void
name|route
parameter_list|(
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Controller
argument_list|>
name|cls
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|route
argument_list|(
name|HTTP
operator|.
name|GET
argument_list|,
name|pathSpec
argument_list|,
name|cls
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|route (String pathSpec, Class<? extends Controller> cls)
specifier|public
name|void
name|route
parameter_list|(
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Controller
argument_list|>
name|cls
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|parseRoute
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
name|router
operator|.
name|add
argument_list|(
name|HTTP
operator|.
name|GET
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|R_PATH
argument_list|)
argument_list|,
name|cls
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|R_ACTION
argument_list|)
argument_list|,
name|res
operator|.
name|subList
argument_list|(
name|R_PARAMS
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * /controller/action/:args => [/controller/action, controller, action, args]    * /controller/:args => [/controller, controller, index, args]    */
DECL|method|parseRoute (String pathSpec)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseRoute
parameter_list|(
name|String
name|pathSpec
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|getPrefix
argument_list|(
name|checkNotNull
argument_list|(
name|pathSpec
argument_list|,
literal|"pathSpec"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|pathSplitter
operator|.
name|split
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
name|String
name|controller
init|=
literal|null
decl_stmt|,
name|action
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|parts
control|)
block|{
if|if
condition|(
name|controller
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
condition|)
block|{
name|controller
operator|=
literal|"default"
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|controller
argument_list|)
expr_stmt|;
name|action
operator|=
literal|"index"
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controller
operator|=
name|s
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
condition|)
block|{
name|action
operator|=
literal|"index"
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|s
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|controller
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getPrefix (String pathSpec)
specifier|static
name|String
name|getPrefix
parameter_list|(
name|String
name|pathSpec
parameter_list|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|CharMatcher
operator|.
name|WHITESPACE
operator|.
name|matches
argument_list|(
name|pathSpec
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
argument_list|)
condition|)
block|{
operator|++
name|start
expr_stmt|;
block|}
if|if
condition|(
name|pathSpec
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
literal|"Path spec syntax error: "
operator|+
name|pathSpec
argument_list|)
throw|;
block|}
name|int
name|ci
init|=
name|pathSpec
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
operator|-
literal|1
condition|)
block|{
name|ci
operator|=
name|pathSpec
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|==
literal|1
condition|)
block|{
return|return
literal|"/"
return|;
block|}
name|char
name|c
decl_stmt|;
do|do
block|{
name|c
operator|=
name|pathSpec
operator|.
name|charAt
argument_list|(
operator|--
name|ci
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|c
operator|==
literal|'/'
operator|||
name|CharMatcher
operator|.
name|WHITESPACE
operator|.
name|matches
argument_list|(
name|c
argument_list|)
condition|)
do|;
return|return
name|pathSpec
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|ci
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|setup ()
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|()
function_decl|;
block|}
end_class

end_unit

