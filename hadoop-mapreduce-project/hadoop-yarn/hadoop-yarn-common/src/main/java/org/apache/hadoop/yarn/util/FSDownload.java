begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|RunJar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_comment
comment|/**  * Download a single URL to the local disk.  *  */
end_comment

begin_class
DECL|class|FSDownload
specifier|public
class|class
name|FSDownload
implements|implements
name|Callable
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSDownload
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
decl_stmt|;
DECL|field|files
specifier|private
name|FileContext
name|files
decl_stmt|;
DECL|field|userUgi
specifier|private
specifier|final
name|UserGroupInformation
name|userUgi
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|resource
specifier|private
name|LocalResource
name|resource
decl_stmt|;
DECL|field|dirs
specifier|private
name|LocalDirAllocator
name|dirs
decl_stmt|;
DECL|field|cachePerms
specifier|private
specifier|static
specifier|final
name|FsPermission
name|cachePerms
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
DECL|field|PUBLIC_FILE_PERMS
specifier|static
specifier|final
name|FsPermission
name|PUBLIC_FILE_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
decl_stmt|;
DECL|field|PRIVATE_FILE_PERMS
specifier|static
specifier|final
name|FsPermission
name|PRIVATE_FILE_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0500
argument_list|)
decl_stmt|;
DECL|field|PUBLIC_DIR_PERMS
specifier|static
specifier|final
name|FsPermission
name|PUBLIC_DIR_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
DECL|field|PRIVATE_DIR_PERMS
specifier|static
specifier|final
name|FsPermission
name|PRIVATE_DIR_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|method|FSDownload (FileContext files, UserGroupInformation ugi, Configuration conf, LocalDirAllocator dirs, LocalResource resource, Random rand)
specifier|public
name|FSDownload
parameter_list|(
name|FileContext
name|files
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|LocalDirAllocator
name|dirs
parameter_list|,
name|LocalResource
name|resource
parameter_list|,
name|Random
name|rand
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dirs
operator|=
name|dirs
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|userUgi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|rand
operator|=
name|rand
expr_stmt|;
block|}
DECL|method|getResource ()
name|LocalResource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|copy (Path sCopy, Path dstdir)
specifier|private
name|Path
name|copy
parameter_list|(
name|Path
name|sCopy
parameter_list|,
name|Path
name|dstdir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|sourceFs
init|=
name|sCopy
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dCopy
init|=
operator|new
name|Path
argument_list|(
name|dstdir
argument_list|,
name|sCopy
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|FileStatus
name|sStat
init|=
name|sourceFs
operator|.
name|getFileStatus
argument_list|(
name|sCopy
argument_list|)
decl_stmt|;
if|if
condition|(
name|sStat
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|resource
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource "
operator|+
name|sCopy
operator|+
literal|" changed on src filesystem (expected "
operator|+
name|resource
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", was "
operator|+
name|sStat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
throw|;
block|}
name|sourceFs
operator|.
name|copyToLocalFile
argument_list|(
name|sCopy
argument_list|,
name|dCopy
argument_list|)
expr_stmt|;
return|return
name|dCopy
return|;
block|}
DECL|method|unpack (File localrsrc, File dst)
specifier|private
name|long
name|unpack
parameter_list|(
name|File
name|localrsrc
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|resource
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ARCHIVE
case|:
name|String
name|lowerDst
init|=
name|dst
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerDst
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|RunJar
operator|.
name|unJar
argument_list|(
name|localrsrc
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerDst
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|FileUtil
operator|.
name|unZip
argument_list|(
name|localrsrc
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerDst
operator|.
name|endsWith
argument_list|(
literal|".tar.gz"
argument_list|)
operator|||
name|lowerDst
operator|.
name|endsWith
argument_list|(
literal|".tgz"
argument_list|)
operator|||
name|lowerDst
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|FileUtil
operator|.
name|unTar
argument_list|(
name|localrsrc
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot unpack "
operator|+
name|localrsrc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localrsrc
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename file: ["
operator|+
name|localrsrc
operator|+
literal|"] to ["
operator|+
name|dst
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|FILE
case|:
default|default:
if|if
condition|(
operator|!
name|localrsrc
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename file: ["
operator|+
name|localrsrc
operator|+
literal|"] to ["
operator|+
name|dst
operator|+
literal|"]"
argument_list|)
throw|;
block|}
break|break;
block|}
return|return
literal|0
return|;
comment|// TODO Should calculate here before returning
comment|//return FileUtil.getDU(destDir);
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sCopy
decl_stmt|;
try|try
block|{
name|sCopy
operator|=
name|ConverterUtils
operator|.
name|getPathFromYarnURL
argument_list|(
name|resource
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid resource"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Path
name|tmp
decl_stmt|;
name|Path
name|dst
init|=
name|dirs
operator|.
name|getLocalPathForWrite
argument_list|(
literal|"."
argument_list|,
name|getEstimatedSize
argument_list|(
name|resource
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
do|do
block|{
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|files
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
do|;
name|dst
operator|=
name|tmp
expr_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|dst
argument_list|,
name|cachePerms
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dst_work
init|=
operator|new
name|Path
argument_list|(
name|dst
operator|+
literal|"_tmp"
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|dst_work
argument_list|,
name|cachePerms
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|dFinal
init|=
name|files
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|dst_work
argument_list|,
name|sCopy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|dTmp
init|=
literal|null
operator|==
name|userUgi
condition|?
name|files
operator|.
name|makeQualified
argument_list|(
name|copy
argument_list|(
name|sCopy
argument_list|,
name|dst_work
argument_list|)
argument_list|)
else|:
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
specifier|public
name|Path
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|files
operator|.
name|makeQualified
argument_list|(
name|copy
argument_list|(
name|sCopy
argument_list|,
name|dst_work
argument_list|)
argument_list|)
return|;
block|}
empty_stmt|;
block|}
argument_list|)
decl_stmt|;
name|unpack
argument_list|(
operator|new
name|File
argument_list|(
name|dTmp
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dFinal
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changePermissions
argument_list|(
name|dFinal
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dFinal
argument_list|)
expr_stmt|;
name|files
operator|.
name|rename
argument_list|(
name|dst_work
argument_list|,
name|dst
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|files
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{ }
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|files
operator|.
name|delete
argument_list|(
name|dst_work
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{ }
comment|// clear ref to internal var
name|rand
operator|=
literal|null
expr_stmt|;
name|conf
operator|=
literal|null
expr_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
name|dirs
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|files
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|sCopy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Recursively change permissions of all files/dirs on path based     * on resource visibility.    * Change to 755 or 700 for dirs, 555 or 500 for files.    * @param fs FileSystem    * @param path Path to modify perms for    * @throws IOException    * @throws InterruptedException     */
DECL|method|changePermissions (FileSystem fs, final Path path)
specifier|private
name|void
name|changePermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FileStatus
name|fStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FsPermission
name|perm
init|=
name|cachePerms
decl_stmt|;
comment|// set public perms as 755 or 555 based on dir or file
if|if
condition|(
name|resource
operator|.
name|getVisibility
argument_list|()
operator|==
name|LocalResourceVisibility
operator|.
name|PUBLIC
condition|)
block|{
name|perm
operator|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
condition|?
name|PUBLIC_DIR_PERMS
else|:
name|PUBLIC_FILE_PERMS
expr_stmt|;
block|}
comment|// set private perms as 700 or 500
else|else
block|{
comment|// PRIVATE:
comment|// APPLICATION:
name|perm
operator|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
condition|?
name|PRIVATE_DIR_PERMS
else|:
name|PRIVATE_FILE_PERMS
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changing permissions for path "
operator|+
name|path
operator|+
literal|" to perm "
operator|+
name|perm
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|fPerm
init|=
name|perm
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|userUgi
condition|)
block|{
name|files
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|files
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fPerm
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|fStatus
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
name|changePermissions
argument_list|(
name|fs
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getEstimatedSize (LocalResource rsrc)
specifier|private
specifier|static
name|long
name|getEstimatedSize
parameter_list|(
name|LocalResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
name|rsrc
operator|.
name|getSize
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
switch|switch
condition|(
name|rsrc
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ARCHIVE
case|:
return|return
literal|5
operator|*
name|rsrc
operator|.
name|getSize
argument_list|()
return|;
case|case
name|FILE
case|:
default|default:
return|return
name|rsrc
operator|.
name|getSize
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

