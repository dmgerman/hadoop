begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.view
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebAppException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_class
DECL|class|HtmlBlock
specifier|public
specifier|abstract
class|class
name|HtmlBlock
extends|extends
name|TextView
implements|implements
name|SubView
block|{
DECL|class|Block
specifier|public
class|class
name|Block
extends|extends
name|Hamlet
block|{
DECL|method|Block (PrintWriter out, int level, boolean wasInline)
name|Block
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|int
name|level
parameter_list|,
name|boolean
name|wasInline
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|level
argument_list|,
name|wasInline
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subView (Class<? extends SubView> cls)
specifier|protected
name|void
name|subView
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|cls
parameter_list|)
block|{
name|context
argument_list|()
operator|.
name|set
argument_list|(
name|nestLevel
argument_list|()
argument_list|,
name|wasInline
argument_list|()
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|setWasInline
argument_list|(
name|context
argument_list|()
operator|.
name|wasInline
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|block
specifier|private
name|Block
name|block
decl_stmt|;
DECL|method|block ()
specifier|private
name|Block
name|block
parameter_list|()
block|{
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|block
operator|=
operator|new
name|Block
argument_list|(
name|writer
argument_list|()
argument_list|,
name|context
argument_list|()
operator|.
name|nestLevel
argument_list|()
argument_list|,
name|context
argument_list|()
operator|.
name|wasInline
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
DECL|method|HtmlBlock ()
specifier|protected
name|HtmlBlock
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|HtmlBlock (ViewContext ctx)
specifier|protected
name|HtmlBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|,
name|MimeType
operator|.
name|HTML
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render ()
specifier|public
name|void
name|render
parameter_list|()
block|{
name|int
name|nestLevel
init|=
name|context
argument_list|()
operator|.
name|nestLevel
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rendering {} @{}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|nestLevel
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|block
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|nestLevel
argument_list|()
operator|!=
name|nestLevel
condition|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
literal|"Error rendering block: nestLevel="
operator|+
name|block
operator|.
name|nestLevel
argument_list|()
operator|+
literal|" expected "
operator|+
name|nestLevel
argument_list|)
throw|;
block|}
name|context
argument_list|()
operator|.
name|set
argument_list|(
name|nestLevel
argument_list|,
name|block
operator|.
name|wasInline
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renderPartial ()
specifier|public
name|void
name|renderPartial
parameter_list|()
block|{
name|render
argument_list|()
expr_stmt|;
block|}
comment|/**    * Render a block of html. To be overridden by implementation.    * @param html the block to render    */
DECL|method|render (Block html)
specifier|protected
specifier|abstract
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
function_decl|;
block|}
end_class

end_unit

