begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_class
DECL|class|AdminACLsManager
specifier|public
class|class
name|AdminACLsManager
block|{
comment|/**    * Log object for this class    */
DECL|field|LOG
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdminACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The current user at the time of object creation    */
DECL|field|owner
specifier|private
specifier|final
name|UserGroupInformation
name|owner
decl_stmt|;
comment|/**    * Holds list of administrator users    */
DECL|field|adminAcl
specifier|private
specifier|final
name|AccessControlList
name|adminAcl
decl_stmt|;
comment|/**    * True if ACLs are enabled    *    * @see YarnConfiguration#YARN_ACL_ENABLE    * @see YarnConfiguration#DEFAULT_YARN_ACL_ENABLE    */
DECL|field|aclsEnabled
specifier|private
specifier|final
name|boolean
name|aclsEnabled
decl_stmt|;
comment|/**    * Constructs and initializes this AdminACLsManager    *    * @param conf configuration for this object to use    */
DECL|method|AdminACLsManager (Configuration conf)
specifier|public
name|AdminACLsManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|adminAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|owner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|adminAcl
operator|.
name|addUser
argument_list|(
name|owner
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not add current user to admin:"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|aclsEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ACL_ENABLE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the owner    *    * @return Current user at the time of object creation    */
DECL|method|getOwner ()
specifier|public
name|UserGroupInformation
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
comment|/**    * Returns whether ACLs are enabled    *    * @see YarnConfiguration#YARN_ACL_ENABLE    * @see YarnConfiguration#DEFAULT_YARN_ACL_ENABLE    * @return<tt>true</tt> if ACLs are enabled    */
DECL|method|areACLsEnabled ()
specifier|public
name|boolean
name|areACLsEnabled
parameter_list|()
block|{
return|return
name|aclsEnabled
return|;
block|}
comment|/**    * Returns the internal structure used to maintain administrator ACLs    *    * @return Structure used to maintain administrator access    */
DECL|method|getAdminAcl ()
specifier|public
name|AccessControlList
name|getAdminAcl
parameter_list|()
block|{
return|return
name|adminAcl
return|;
block|}
comment|/**    * Returns whether the specified user/group is an administrator    *    * @param callerUGI user/group to to check    * @return<tt>true</tt> if the UserGroupInformation specified    *         is a member of the access control list for administrators    */
DECL|method|isAdmin (UserGroupInformation callerUGI)
specifier|public
name|boolean
name|isAdmin
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
return|return
name|adminAcl
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
return|;
block|}
comment|/**    * Returns whether the specified user/group has administrator access    *    * @param callerUGI user/group to to check    * @return<tt>true</tt> if the UserGroupInformation specified    *         is a member of the access control list for administrators    *         and ACLs are enabled for this cluster    *    * @see #getAdminAcl    * @see #areACLsEnabled    */
DECL|method|checkAccess (UserGroupInformation callerUGI)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
comment|// Any user may perform this operation if authorization is not enabled
if|if
condition|(
operator|!
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Administrators may perform any operation
return|return
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
return|;
block|}
block|}
end_class

end_unit

