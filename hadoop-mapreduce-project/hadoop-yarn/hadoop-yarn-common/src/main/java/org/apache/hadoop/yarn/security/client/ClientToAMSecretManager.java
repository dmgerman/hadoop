begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.security.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_class
DECL|class|ClientToAMSecretManager
specifier|public
class|class
name|ClientToAMSecretManager
extends|extends
name|SecretManager
argument_list|<
name|ClientTokenIdentifier
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientToAMSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Per application masterkeys for managing client-tokens
DECL|field|masterKeys
specifier|private
name|Map
argument_list|<
name|Text
argument_list|,
name|SecretKey
argument_list|>
name|masterKeys
init|=
operator|new
name|HashMap
argument_list|<
name|Text
argument_list|,
name|SecretKey
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|setMasterKey (ClientTokenIdentifier identifier, byte[] key)
specifier|public
name|void
name|setMasterKey
parameter_list|(
name|ClientTokenIdentifier
name|identifier
parameter_list|,
name|byte
index|[]
name|key
parameter_list|)
block|{
name|SecretKey
name|sk
init|=
name|SecretManager
operator|.
name|createSecretKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Text
name|applicationID
init|=
name|identifier
operator|.
name|getApplicationID
argument_list|()
decl_stmt|;
name|this
operator|.
name|masterKeys
operator|.
name|put
argument_list|(
name|applicationID
argument_list|,
name|sk
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting master key for "
operator|+
name|applicationID
operator|+
literal|" as "
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|this
operator|.
name|masterKeys
operator|.
name|get
argument_list|(
name|applicationID
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addMasterKey (ClientTokenIdentifier identifier)
specifier|private
name|void
name|addMasterKey
parameter_list|(
name|ClientTokenIdentifier
name|identifier
parameter_list|)
block|{
name|Text
name|applicationID
init|=
name|identifier
operator|.
name|getApplicationID
argument_list|()
decl_stmt|;
name|this
operator|.
name|masterKeys
operator|.
name|put
argument_list|(
name|applicationID
argument_list|,
name|generateSecret
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating master key for "
operator|+
name|applicationID
operator|+
literal|" as "
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|this
operator|.
name|masterKeys
operator|.
name|get
argument_list|(
name|applicationID
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: Handle the masterKey invalidation.
DECL|method|getMasterKey ( ClientTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|SecretKey
name|getMasterKey
parameter_list|(
name|ClientTokenIdentifier
name|identifier
parameter_list|)
block|{
name|Text
name|applicationID
init|=
name|identifier
operator|.
name|getApplicationID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|masterKeys
operator|.
name|containsKey
argument_list|(
name|applicationID
argument_list|)
condition|)
block|{
name|addMasterKey
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|masterKeys
operator|.
name|get
argument_list|(
name|applicationID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createPassword ( ClientTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|createPassword
parameter_list|(
name|ClientTokenIdentifier
name|identifier
parameter_list|)
block|{
name|byte
index|[]
name|password
init|=
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getMasterKey
argument_list|(
name|identifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Password created is "
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|password
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (ClientTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ClientTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
name|byte
index|[]
name|password
init|=
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getMasterKey
argument_list|(
name|identifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Password retrieved is "
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|password
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|ClientTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|ClientTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

