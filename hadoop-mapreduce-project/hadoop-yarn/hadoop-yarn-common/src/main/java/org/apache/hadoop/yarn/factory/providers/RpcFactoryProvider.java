begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.yarn.factory.providers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RpcClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RpcServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|impl
operator|.
name|pb
operator|.
name|RpcClientFactoryPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|impl
operator|.
name|pb
operator|.
name|RpcServerFactoryPBImpl
import|;
end_import

begin_comment
comment|/**  * A public static get() method must be present in the Client/Server Factory implementation.  */
end_comment

begin_class
DECL|class|RpcFactoryProvider
specifier|public
class|class
name|RpcFactoryProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcFactoryProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//TODO Move these keys to CommonConfigurationKeys
DECL|field|RPC_SERIALIZER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RPC_SERIALIZER_KEY
init|=
literal|"org.apache.yarn.ipc.rpc.serializer.property"
decl_stmt|;
DECL|field|RPC_SERIALIZER_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|RPC_SERIALIZER_DEFAULT
init|=
literal|"protocolbuffers"
decl_stmt|;
DECL|field|RPC_CLIENT_FACTORY_CLASS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RPC_CLIENT_FACTORY_CLASS_KEY
init|=
literal|"org.apache.yarn.ipc.client.factory.class"
decl_stmt|;
DECL|field|RPC_SERVER_FACTORY_CLASS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RPC_SERVER_FACTORY_CLASS_KEY
init|=
literal|"org.apache.yarn.ipc.server.factory.class"
decl_stmt|;
DECL|method|RpcFactoryProvider ()
specifier|private
name|RpcFactoryProvider
parameter_list|()
block|{        }
DECL|method|getServerFactory (Configuration conf)
specifier|public
specifier|static
name|RpcServerFactory
name|getServerFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
name|String
name|serverFactoryClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|RPC_SERVER_FACTORY_CLASS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverFactoryClassName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|RPC_SERIALIZER_KEY
argument_list|,
name|RPC_SERIALIZER_DEFAULT
argument_list|)
operator|.
name|equals
argument_list|(
name|RPC_SERIALIZER_DEFAULT
argument_list|)
condition|)
block|{
return|return
name|RpcServerFactoryPBImpl
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unknown serializer: ["
operator|+
name|conf
operator|.
name|get
argument_list|(
name|RPC_SERIALIZER_KEY
argument_list|)
operator|+
literal|"]. Use keys: ["
operator|+
name|RPC_CLIENT_FACTORY_CLASS_KEY
operator|+
literal|"]["
operator|+
name|RPC_SERVER_FACTORY_CLASS_KEY
operator|+
literal|"] to specify factories"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|RpcServerFactory
operator|)
name|getFactoryClassInstance
argument_list|(
name|serverFactoryClassName
argument_list|)
return|;
block|}
block|}
DECL|method|getClientFactory (Configuration conf)
specifier|public
specifier|static
name|RpcClientFactory
name|getClientFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|clientFactoryClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|RPC_CLIENT_FACTORY_CLASS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientFactoryClassName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|RPC_SERIALIZER_KEY
argument_list|,
name|RPC_SERIALIZER_DEFAULT
argument_list|)
operator|.
name|equals
argument_list|(
name|RPC_SERIALIZER_DEFAULT
argument_list|)
condition|)
block|{
return|return
name|RpcClientFactoryPBImpl
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unknown serializer: ["
operator|+
name|conf
operator|.
name|get
argument_list|(
name|RPC_SERIALIZER_KEY
argument_list|)
operator|+
literal|"]. Use keys: ["
operator|+
name|RPC_CLIENT_FACTORY_CLASS_KEY
operator|+
literal|"]["
operator|+
name|RPC_SERVER_FACTORY_CLASS_KEY
operator|+
literal|"] to specify factories"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|RpcClientFactory
operator|)
name|getFactoryClassInstance
argument_list|(
name|clientFactoryClassName
argument_list|)
return|;
block|}
block|}
DECL|method|getFactoryClassInstance (String factoryClassName)
specifier|private
specifier|static
name|Object
name|getFactoryClassInstance
parameter_list|(
name|String
name|factoryClassName
parameter_list|)
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|factoryClassName
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

