begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestProxyUriUtils
specifier|public
class|class
name|TestProxyUriUtils
block|{
DECL|class|TestAppId
specifier|public
specifier|static
class|class
name|TestAppId
extends|extends
name|ApplicationId
block|{
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|method|TestAppId (int id, long timestamp)
specifier|public
name|TestAppId
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setClusterTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|setId (int id)
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClusterTimestamp ()
specifier|public
name|long
name|getClusterTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
DECL|method|setClusterTimestamp (long clusterTimestamp)
specifier|public
name|void
name|setClusterTimestamp
parameter_list|(
name|long
name|clusterTimestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|clusterTimestamp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetPathApplicationId ()
specifier|public
name|void
name|testGetPathApplicationId
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/proxy/application_100_0001"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|1
argument_list|,
literal|100l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testGetPathApplicationIdBad ()
specifier|public
name|void
name|testGetPathApplicationIdBad
parameter_list|()
block|{
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPathApplicationIdString ()
specifier|public
name|void
name|testGetPathApplicationIdString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005/static/app"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|"/static/app"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005/"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005/some/path"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|"some/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPathAndQuery ()
specifier|public
name|void
name|testGetPathAndQuery
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005/static/app?foo=bar"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPathAndQuery
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|"/static/app"
argument_list|,
literal|"?foo=bar"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/proxy/application_6384623_0005/static/app?foo=bar&bad=good&proxyapproved=true"
argument_list|,
name|ProxyUriUtils
operator|.
name|getPathAndQuery
argument_list|(
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
argument_list|,
literal|"/static/app"
argument_list|,
literal|"foo=bar&bad=good"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetProxyUri ()
specifier|public
name|void
name|testGetProxyUri
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|originalUri
init|=
operator|new
name|URI
argument_list|(
literal|"http://host.com/static/foo?bar=bar"
argument_list|)
decl_stmt|;
name|URI
name|proxyUri
init|=
operator|new
name|URI
argument_list|(
literal|"http://proxy.net:8080/"
argument_list|)
decl_stmt|;
name|TestAppId
name|id
init|=
operator|new
name|TestAppId
argument_list|(
literal|5
argument_list|,
literal|6384623l
argument_list|)
decl_stmt|;
name|URI
name|expected
init|=
operator|new
name|URI
argument_list|(
literal|"http://proxy.net:8080/proxy/application_6384623_0005/static/foo?bar=bar"
argument_list|)
decl_stmt|;
name|URI
name|result
init|=
name|ProxyUriUtils
operator|.
name|getProxyUri
argument_list|(
name|originalUri
argument_list|,
name|proxyUri
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

