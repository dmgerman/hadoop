begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|lib
operator|.
name|ZKClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZKDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestZKClient
specifier|public
class|class
name|TestZKClient
block|{
DECL|field|CONNECTION_TIMEOUT
specifier|public
specifier|static
name|int
name|CONNECTION_TIMEOUT
init|=
literal|30000
decl_stmt|;
DECL|field|BASETEST
specifier|static
specifier|final
name|File
name|BASETEST
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.test.dir"
argument_list|,
literal|"target/zookeeper-build"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|hostPort
specifier|protected
name|String
name|hostPort
init|=
literal|"127.0.0.1:2000"
decl_stmt|;
DECL|field|maxCnxns
specifier|protected
name|int
name|maxCnxns
init|=
literal|0
decl_stmt|;
DECL|field|factory
specifier|protected
name|NIOServerCnxn
operator|.
name|Factory
name|factory
init|=
literal|null
decl_stmt|;
DECL|field|tmpDir
specifier|protected
name|File
name|tmpDir
init|=
literal|null
decl_stmt|;
DECL|method|send4LetterWord (String host, int port, String cmd)
specifier|public
specifier|static
name|String
name|send4LetterWord
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputStream
name|outstream
init|=
name|sock
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
name|cmd
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// this replicates NC - close the output stream before reading
name|sock
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForServerDown (String hp, long timeout)
specifier|public
specifier|static
name|boolean
name|waitForServerDown
parameter_list|(
name|String
name|hp
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|host
init|=
name|hp
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hp
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|send4LetterWord
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
literal|"stat"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|waitForServerUp (String hp, long timeout)
specifier|public
specifier|static
name|boolean
name|waitForServerUp
parameter_list|(
name|String
name|hp
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|host
init|=
name|hp
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hp
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// if there are multiple hostports, just take the first one
name|String
name|result
init|=
name|send4LetterWord
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
literal|"stat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
literal|"Zookeeper version:"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createTmpDir (File parentDir)
specifier|public
specifier|static
name|File
name|createTmpDir
parameter_list|(
name|File
name|parentDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".junit"
argument_list|,
name|parentDir
argument_list|)
decl_stmt|;
comment|// don't delete tmpFile - this ensures we don't attempt to create
comment|// a tmpDir with a duplicate name
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpFile
operator|+
literal|".dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tmpDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tmpDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tmpDir
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"zookeeper.preAllocSize"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|FileTxnLog
operator|.
name|setPreallocSize
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|BASETEST
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BASETEST
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|dataDir
init|=
name|createTmpDir
argument_list|(
name|BASETEST
argument_list|)
decl_stmt|;
name|ZooKeeperServer
name|zks
init|=
operator|new
name|ZooKeeperServer
argument_list|(
name|dataDir
argument_list|,
name|dataDir
argument_list|,
literal|3000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|PORT
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
operator|new
name|NIOServerCnxn
operator|.
name|Factory
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|PORT
argument_list|)
argument_list|,
name|maxCnxns
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|startup
argument_list|(
name|zks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"waiting for server up"
argument_list|,
name|waitForServerUp
argument_list|(
literal|"127.0.0.1:"
operator|+
name|PORT
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|ZKDatabase
name|zkDb
init|=
name|factory
operator|.
name|getZooKeeperServer
argument_list|()
operator|.
name|getZKDatabase
argument_list|()
decl_stmt|;
name|factory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|zkDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{       }
specifier|final
name|int
name|PORT
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"waiting for server down"
argument_list|,
name|waitForServerDown
argument_list|(
literal|"127.0.0.1:"
operator|+
name|PORT
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testzkClient ()
specifier|public
name|void
name|testzkClient
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"/some/test"
argument_list|)
expr_stmt|;
block|}
DECL|method|test (String testClient)
specifier|private
name|void
name|test
parameter_list|(
name|String
name|testClient
parameter_list|)
throws|throws
name|Exception
block|{
name|ZKClient
name|client
init|=
operator|new
name|ZKClient
argument_list|(
name|hostPort
argument_list|)
decl_stmt|;
name|client
operator|.
name|registerService
argument_list|(
literal|"/nodemanager"
argument_list|,
literal|"hostPort"
argument_list|)
expr_stmt|;
name|client
operator|.
name|unregisterService
argument_list|(
literal|"/nodemanager"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

