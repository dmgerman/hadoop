begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_comment
comment|/**  * SecretManager for ContainerTokens. Used by both RM and NM and hence is  * present in yarn-server-common package.  *   */
end_comment

begin_class
DECL|class|ContainerTokenSecretManager
specifier|public
class|class
name|ContainerTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|secretkeys
name|Map
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|>
name|secretkeys
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containerTokenExpiryInterval
specifier|private
specifier|final
name|long
name|containerTokenExpiryInterval
decl_stmt|;
DECL|method|ContainerTokenSecretManager (Configuration conf)
specifier|public
name|ContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|containerTokenExpiryInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerToken (ContainerId containerId, NodeId nodeId, Resource capability)
specifier|public
name|ContainerToken
name|createContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
try|try
block|{
name|long
name|expiryTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|containerTokenExpiryInterval
decl_stmt|;
name|ContainerTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|containerId
argument_list|,
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|,
name|capability
argument_list|,
name|expiryTimeStamp
argument_list|)
decl_stmt|;
return|return
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|nodeId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|this
operator|.
name|createPassword
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|)
argument_list|,
name|tokenIdentifier
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// this could be because DNS is down - in which case we just want
comment|// to retry and not bring RM down. Caller should note and act on the fact
comment|// that container is not creatable.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to create new container"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Used by master for generation of secretyKey per host
DECL|method|createAndGetSecretKey (CharSequence hostName)
specifier|public
name|SecretKey
name|createAndGetSecretKey
parameter_list|(
name|CharSequence
name|hostName
parameter_list|)
block|{
name|String
name|hostNameStr
init|=
name|hostName
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|secretkeys
operator|.
name|containsKey
argument_list|(
name|hostNameStr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating secretKey for NM "
operator|+
name|hostNameStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|secretkeys
operator|.
name|put
argument_list|(
name|hostNameStr
argument_list|,
name|createSecretKey
argument_list|(
literal|"mySecretKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|secretkeys
operator|.
name|get
argument_list|(
name|hostNameStr
argument_list|)
return|;
block|}
comment|// Used by slave for using secretKey sent by the master.
DECL|method|setSecretKey (CharSequence hostName, byte[] secretKeyBytes)
specifier|public
name|void
name|setSecretKey
parameter_list|(
name|CharSequence
name|hostName
parameter_list|,
name|byte
index|[]
name|secretKeyBytes
parameter_list|)
block|{
name|this
operator|.
name|secretkeys
operator|.
name|put
argument_list|(
name|hostName
operator|.
name|toString
argument_list|()
argument_list|,
name|createSecretKey
argument_list|(
name|secretKeyBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createPassword (ContainerTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating password for "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|+
literal|" to be run on NM "
operator|+
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
operator|+
literal|" "
operator|+
name|this
operator|.
name|secretkeys
operator|.
name|get
argument_list|(
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|this
operator|.
name|secretkeys
operator|.
name|get
argument_list|(
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (ContainerTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieving password for "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|+
literal|" to be run on NM "
operator|+
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|this
operator|.
name|secretkeys
operator|.
name|get
argument_list|(
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|ContainerTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|ContainerTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

