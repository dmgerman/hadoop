begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPBLocalizerRPC
specifier|public
class|class
name|TestPBLocalizerRPC
block|{
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|createPBRecordFactory
argument_list|()
decl_stmt|;
DECL|method|createPBRecordFactory ()
specifier|static
name|RecordFactory
name|createPBRecordFactory
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_SERIALIZER_TYPE
argument_list|,
literal|"protocolbuffers"
argument_list|)
expr_stmt|;
return|return
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|class|LocalizerService
specifier|static
class|class
name|LocalizerService
implements|implements
name|LocalizationProtocol
block|{
DECL|field|locAddr
specifier|private
specifier|final
name|InetSocketAddress
name|locAddr
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|LocalizerService (InetSocketAddress locAddr)
name|LocalizerService
parameter_list|(
name|InetSocketAddress
name|locAddr
parameter_list|)
block|{
name|this
operator|.
name|locAddr
operator|=
name|locAddr
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|locAddr
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|heartbeat (LocalizerStatus status)
specifier|public
name|LocalizerHeartbeatResponse
name|heartbeat
parameter_list|(
name|LocalizerStatus
name|status
parameter_list|)
block|{
return|return
name|dieHBResponse
argument_list|()
return|;
block|}
block|}
DECL|method|dieHBResponse ()
specifier|static
name|LocalizerHeartbeatResponse
name|dieHBResponse
parameter_list|()
block|{
name|LocalizerHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Test
DECL|method|testLocalizerRPC ()
specifier|public
name|void
name|testLocalizerRPC
parameter_list|()
throws|throws
name|Exception
block|{
name|InetSocketAddress
name|locAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"0.0.0.0"
argument_list|,
literal|4344
argument_list|)
decl_stmt|;
name|LocalizerService
name|server
init|=
operator|new
name|LocalizerService
argument_list|(
name|locAddr
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LocalizationProtocol
name|client
init|=
operator|(
name|LocalizationProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|,
name|locAddr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LocalizerStatus
name|status
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setLocalizerId
argument_list|(
literal|"localizer0"
argument_list|)
expr_stmt|;
name|LocalizerHeartbeatResponse
name|response
init|=
name|client
operator|.
name|heartbeat
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dieHBResponse
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

