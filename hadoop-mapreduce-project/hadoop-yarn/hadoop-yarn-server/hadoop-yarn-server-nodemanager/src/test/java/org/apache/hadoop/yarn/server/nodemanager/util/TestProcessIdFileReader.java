begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|ProcessIdFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestProcessIdFileReader
specifier|public
class|class
name|TestProcessIdFileReader
block|{
annotation|@
name|Test
DECL|method|testNullPath ()
specifier|public
name|void
name|testNullPath
parameter_list|()
block|{
name|String
name|pid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pid
operator|=
name|ProcessIdFileReader
operator|.
name|getProcessId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error to be thrown for null path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
assert|assert
operator|(
name|pid
operator|==
literal|null
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testSimpleGet ()
specifier|public
name|void
name|testSimpleGet
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|testFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"temp.txt"
argument_list|)
expr_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"56789"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|processId
init|=
literal|null
decl_stmt|;
name|processId
operator|=
name|ProcessIdFileReader
operator|.
name|getProcessId
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"temp.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"56789"
argument_list|,
name|processId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|testFile
operator|!=
literal|null
operator|&&
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testComplexGet ()
specifier|public
name|void
name|testComplexGet
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|testFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"temp.txt"
argument_list|)
expr_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"-123"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"-123 "
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|" 23 "
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"6236"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|processId
init|=
literal|null
decl_stmt|;
name|processId
operator|=
name|ProcessIdFileReader
operator|.
name|getProcessId
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"temp.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"23"
argument_list|,
name|processId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|testFile
operator|!=
literal|null
operator|&&
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

