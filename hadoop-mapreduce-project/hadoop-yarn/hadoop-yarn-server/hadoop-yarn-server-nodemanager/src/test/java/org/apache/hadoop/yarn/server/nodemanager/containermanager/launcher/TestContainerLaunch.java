begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerLaunch
specifier|public
class|class
name|TestContainerLaunch
block|{
annotation|@
name|Test
DECL|method|testSpecialCharSymlinks ()
specifier|public
name|void
name|testSpecialCharSymlinks
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|String
name|badSymlink
init|=
literal|"foo@zz%_#*&!-+= bar()"
decl_stmt|;
name|File
name|symLinkFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"hello.sh"
argument_list|)
expr_stmt|;
name|tempFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"temp.sh"
argument_list|)
expr_stmt|;
name|String
name|timeoutCommand
init|=
literal|"echo \"hello\""
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|shellFile
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|timeoutCommand
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|badSymlink
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/sh ./\\\""
operator|+
name|badSymlink
operator|+
literal|"\\\""
argument_list|)
expr_stmt|;
name|ContainerLaunch
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|tempFile
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
name|rootDirFile
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|rootDirFile
argument_list|)
decl_stmt|;
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|shexc
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
name|symLinkFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|badSymlink
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|symLinkFile
operator|!=
literal|null
operator|&&
name|symLinkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|symLinkFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

