begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|RegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|TestNodeStatusUpdater
specifier|public
class|class
name|TestNodeStatusUpdater
block|{
comment|// temp fix until metrics system can auto-detect itself running in unit test:
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNodeStatusUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|basedir
specifier|static
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestNodeStatusUpdater
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|heartBeatID
name|int
name|heartBeatID
init|=
literal|0
decl_stmt|;
DECL|field|nmStartError
specifier|volatile
name|Error
name|nmStartError
init|=
literal|null
decl_stmt|;
DECL|field|registeredNodes
specifier|private
specifier|final
name|List
argument_list|<
name|NodeId
argument_list|>
name|registeredNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|nm
specifier|private
name|NodeManager
name|nm
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|this
operator|.
name|registeredNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|heartBeatID
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|class|MyResourceTracker
specifier|private
class|class
name|MyResourceTracker
implements|implements
name|ResourceTracker
block|{
DECL|field|context
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
DECL|method|MyResourceTracker (Context context)
specifier|public
name|MyResourceTracker
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|NodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|request
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering "
operator|+
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|+
literal|":12345"
argument_list|,
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
literal|1024
argument_list|,
name|resource
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|registeredNodes
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|RegistrationResponse
name|regResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegistrationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setRegistrationResponse
argument_list|(
name|regResponse
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|field|applicationID
name|ApplicationId
name|applicationID
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appAttemptID
name|ApplicationAttemptId
name|appAttemptID
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|firstContainerID
name|ContainerId
name|firstContainerID
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|secondContainerID
name|ContainerId
name|secondContainerID
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getAppToContainerStatusMap ( List<ContainerStatus> containers)
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|getAppToContainerStatusMap
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containers
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|cs
range|:
name|containers
control|)
block|{
name|ApplicationId
name|applicationId
init|=
name|cs
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|appContainers
init|=
name|map
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appContainers
operator|==
literal|null
condition|)
block|{
name|appContainers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|appContainers
argument_list|)
expr_stmt|;
block|}
name|appContainers
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|NodeStatus
name|nodeStatus
init|=
name|request
operator|.
name|getNodeStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got heartbeat number "
operator|+
name|heartBeatID
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
operator|++
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|appToContainers
init|=
name|getAppToContainerStatusMap
argument_list|(
name|nodeStatus
operator|.
name|getContainersStatuses
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|heartBeatID
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeStatus
operator|.
name|getContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Give a container to the NM.
name|applicationID
operator|.
name|setId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|appAttemptID
operator|.
name|setApplicationId
argument_list|(
name|applicationID
argument_list|)
expr_stmt|;
name|firstContainerID
operator|.
name|setApplicationAttemptId
argument_list|(
name|appAttemptID
argument_list|)
expr_stmt|;
name|firstContainerID
operator|.
name|setId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|launchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|launchContext
operator|.
name|setContainerId
argument_list|(
name|firstContainerID
argument_list|)
expr_stmt|;
name|launchContext
operator|.
name|setResource
argument_list|(
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|launchContext
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|launchContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|firstContainerID
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|heartBeatID
operator|==
literal|2
condition|)
block|{
comment|// Checks on the RM end
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of applications should only be one!"
argument_list|,
literal|1
argument_list|,
name|nodeStatus
operator|.
name|getContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of container for the app should be one!"
argument_list|,
literal|1
argument_list|,
name|appToContainers
operator|.
name|get
argument_list|(
name|applicationID
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Checks on the NM end
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|activeContainers
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|activeContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Give another container to the NM.
name|applicationID
operator|.
name|setId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|appAttemptID
operator|.
name|setApplicationId
argument_list|(
name|applicationID
argument_list|)
expr_stmt|;
name|secondContainerID
operator|.
name|setApplicationAttemptId
argument_list|(
name|appAttemptID
argument_list|)
expr_stmt|;
name|secondContainerID
operator|.
name|setId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|launchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|launchContext
operator|.
name|setContainerId
argument_list|(
name|secondContainerID
argument_list|)
expr_stmt|;
name|launchContext
operator|.
name|setResource
argument_list|(
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|launchContext
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|launchContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|secondContainerID
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|heartBeatID
operator|==
literal|3
condition|)
block|{
comment|// Checks on the RM end
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of applications should only be one!"
argument_list|,
literal|1
argument_list|,
name|appToContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of container for the app should be two!"
argument_list|,
literal|2
argument_list|,
name|appToContainers
operator|.
name|get
argument_list|(
name|applicationID
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Checks on the NM end
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|activeContainers
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|activeContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|HeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nhResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|nhResponse
operator|.
name|setHeartbeatResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|nhResponse
return|;
block|}
block|}
DECL|class|MyNodeStatusUpdater
specifier|private
class|class
name|MyNodeStatusUpdater
extends|extends
name|NodeStatusUpdaterImpl
block|{
DECL|field|resourceTracker
specifier|public
name|ResourceTracker
name|resourceTracker
init|=
operator|new
name|MyResourceTracker
argument_list|(
name|this
operator|.
name|context
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|method|MyNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics, ContainerTokenSecretManager containerTokenSecretManager)
specifier|public
name|MyNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMClient ()
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
return|return
name|resourceTracker
return|;
block|}
block|}
DECL|class|MyNodeStatusUpdater3
specifier|private
class|class
name|MyNodeStatusUpdater3
extends|extends
name|NodeStatusUpdaterImpl
block|{
DECL|field|resourceTracker
specifier|public
name|ResourceTracker
name|resourceTracker
decl_stmt|;
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|method|MyNodeStatusUpdater3 (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics, ContainerTokenSecretManager containerTokenSecretManager)
specifier|public
name|MyNodeStatusUpdater3
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|resourceTracker
operator|=
operator|new
name|MyResourceTracker3
argument_list|(
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMClient ()
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
return|return
name|resourceTracker
return|;
block|}
annotation|@
name|Override
DECL|method|isSecurityEnabled ()
specifier|protected
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|MyNodeManager
specifier|private
class|class
name|MyNodeManager
extends|extends
name|NodeManager
block|{
DECL|field|nodeStatusUpdater
specifier|private
name|MyNodeStatusUpdater3
name|nodeStatusUpdater
decl_stmt|;
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, ContainerTokenSecretManager containerTokenSecretManager)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
name|this
operator|.
name|nodeStatusUpdater
operator|=
operator|new
name|MyNodeStatusUpdater3
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|nodeStatusUpdater
return|;
block|}
DECL|method|getNodeStatusUpdater ()
specifier|protected
name|MyNodeStatusUpdater3
name|getNodeStatusUpdater
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeStatusUpdater
return|;
block|}
block|}
comment|//
DECL|class|MyResourceTracker2
specifier|private
class|class
name|MyResourceTracker2
implements|implements
name|ResourceTracker
block|{
DECL|field|heartBeatNodeAction
specifier|public
name|NodeAction
name|heartBeatNodeAction
init|=
name|NodeAction
operator|.
name|NORMAL
decl_stmt|;
DECL|field|registerNodeAction
specifier|public
name|NodeAction
name|registerNodeAction
init|=
name|NodeAction
operator|.
name|NORMAL
decl_stmt|;
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegistrationResponse
name|regResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegistrationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|regResponse
operator|.
name|setNodeAction
argument_list|(
name|registerNodeAction
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRegistrationResponse
argument_list|(
name|regResponse
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|NodeStatus
name|nodeStatus
init|=
name|request
operator|.
name|getNodeStatus
argument_list|()
decl_stmt|;
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
operator|++
argument_list|)
expr_stmt|;
name|HeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|HeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|heartBeatNodeAction
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nhResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|nhResponse
operator|.
name|setHeartbeatResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|nhResponse
return|;
block|}
block|}
DECL|class|MyResourceTracker3
specifier|private
class|class
name|MyResourceTracker3
implements|implements
name|ResourceTracker
block|{
DECL|field|heartBeatNodeAction
specifier|public
name|NodeAction
name|heartBeatNodeAction
init|=
name|NodeAction
operator|.
name|NORMAL
decl_stmt|;
DECL|field|registerNodeAction
specifier|public
name|NodeAction
name|registerNodeAction
init|=
name|NodeAction
operator|.
name|NORMAL
decl_stmt|;
DECL|field|keepAliveRequests
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|keepAliveRequests
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
DECL|method|MyResourceTracker3 (Context context)
name|MyResourceTracker3
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegistrationResponse
name|regResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegistrationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|regResponse
operator|.
name|setNodeAction
argument_list|(
name|registerNodeAction
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRegistrationResponse
argument_list|(
name|regResponse
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got heartBeatId: ["
operator|+
name|heartBeatID
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|request
operator|.
name|getNodeStatus
argument_list|()
decl_stmt|;
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
operator|++
argument_list|)
expr_stmt|;
name|HeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|HeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|heartBeatID
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNodeAction
argument_list|(
name|heartBeatNodeAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeStatus
operator|.
name|getKeepAliveApplications
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeStatus
operator|.
name|getKeepAliveApplications
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|nodeStatus
operator|.
name|getKeepAliveApplications
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|keepAliveRequests
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|keepAliveRequests
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|heartBeatID
operator|==
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending FINISH_APP for application: ["
operator|+
name|appId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAllApplicationsToCleanup
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeHeartbeatResponse
name|nhResponse
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|nhResponse
operator|.
name|setHeartbeatResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|nhResponse
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|clearError ()
specifier|public
name|void
name|clearError
parameter_list|()
block|{
name|nmStartError
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|deleteBaseDir ()
specifier|public
name|void
name|deleteBaseDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|basedir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMRegistration ()
specifier|public
name|void
name|testNMRegistration
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|nm
operator|=
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
return|return
operator|new
name|MyNodeStatusUpdater
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify that the last service is the nodeStatusUpdater (ie registration
comment|// with RM)
name|Object
index|[]
name|services
init|=
name|nm
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Object
name|lastService
init|=
name|services
index|[
name|services
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"last service is NOT the node status updater"
argument_list|,
name|lastService
operator|instanceof
name|NodeStatusUpdater
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|TestNodeStatusUpdater
operator|.
name|this
operator|.
name|nmStartError
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" ----- thread already started.."
operator|+
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nm
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NM to start.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nmStartError
operator|!=
literal|null
condition|)
block|{
throw|throw
name|nmStartError
throw|;
block|}
if|if
condition|(
name|nm
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// NM could have failed.
name|Assert
operator|.
name|fail
argument_list|(
literal|"NodeManager failed to start"
argument_list|)
expr_stmt|;
block|}
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|heartBeatID
operator|<=
literal|3
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|heartBeatID
operator|<=
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of registered NMs is wrong!!"
argument_list|,
literal|1
argument_list|,
name|this
operator|.
name|registeredNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeDecommision ()
specifier|public
name|void
name|testNodeDecommision
parameter_list|()
throws|throws
name|Exception
block|{
name|nm
operator|=
name|getNodeManager
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|heartBeatID
operator|<
literal|1
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|heartBeatID
operator|<
literal|1
argument_list|)
expr_stmt|;
comment|// NM takes a while to reach the STOPPED state.
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|nm
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STOPPED
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NM to stop.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeReboot ()
specifier|public
name|void
name|testNodeReboot
parameter_list|()
throws|throws
name|Exception
block|{
name|nm
operator|=
name|getNodeManager
argument_list|(
name|NodeAction
operator|.
name|REBOOT
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|heartBeatID
operator|<
literal|1
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|heartBeatID
operator|<
literal|1
argument_list|)
expr_stmt|;
comment|// NM takes a while to reach the STOPPED state.
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|nm
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STOPPED
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NM to stop.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMShutdownForRegistrationFailure ()
specifier|public
name|void
name|testNMShutdownForRegistrationFailure
parameter_list|()
block|{
name|nm
operator|=
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
name|MyNodeStatusUpdater
name|nodeStatusUpdater
init|=
operator|new
name|MyNodeStatusUpdater
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
decl_stmt|;
name|MyResourceTracker2
name|myResourceTracker2
init|=
operator|new
name|MyResourceTracker2
argument_list|()
decl_stmt|;
name|myResourceTracker2
operator|.
name|registerNodeAction
operator|=
name|NodeAction
operator|.
name|SHUTDOWN
expr_stmt|;
name|nodeStatusUpdater
operator|.
name|resourceTracker
operator|=
name|myResourceTracker2
expr_stmt|;
return|return
name|nodeStatusUpdater
return|;
block|}
block|}
expr_stmt|;
name|verifyNodeStartFailure
argument_list|(
literal|"org.apache.hadoop.yarn.YarnException: "
operator|+
literal|"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that if for some reason NM fails to start ContainerManager RPC    * server, RM is oblivious to NM's presence. The behaviour is like this    * because otherwise, NM will report to RM even if all its servers are not    * started properly, RM will think that the NM is alive and will retire the NM    * only after NM_EXPIRY interval. See MAPREDUCE-2749.    */
annotation|@
name|Test
DECL|method|testNoRegistrationWhenNMServicesFail ()
specifier|public
name|void
name|testNoRegistrationWhenNMServicesFail
parameter_list|()
block|{
name|nm
operator|=
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
return|return
operator|new
name|MyNodeStatusUpdater
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
name|LocalDirsHandlerService
name|diskhandler
parameter_list|)
block|{
return|return
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|del
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|aclsManager
argument_list|,
name|diskhandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Simulating failure of starting RPC server
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Starting of RPC Server failed"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|verifyNodeStartFailure
argument_list|(
literal|"Starting of RPC Server failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationKeepAlive ()
specifier|public
name|void
name|testApplicationKeepAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|MyNodeManager
name|nm
init|=
operator|new
name|MyNodeManager
argument_list|()
decl_stmt|;
try|try
block|{
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
literal|4000l
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// HB 2 -> app cancelled by RM.
while|while
condition|(
name|heartBeatID
operator|<
literal|12
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
block|}
name|MyResourceTracker3
name|rt
init|=
operator|(
name|MyResourceTracker3
operator|)
name|nm
operator|.
name|getNodeStatusUpdater
argument_list|()
operator|.
name|getRMClient
argument_list|()
decl_stmt|;
name|rt
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|remove
argument_list|(
name|rt
operator|.
name|appId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rt
operator|.
name|keepAliveRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numKeepAliveRequests
init|=
name|rt
operator|.
name|keepAliveRequests
operator|.
name|get
argument_list|(
name|rt
operator|.
name|appId
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Keep Alive Requests: ["
operator|+
name|numKeepAliveRequests
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|numKeepAliveRequests
operator|==
literal|2
operator|||
name|numKeepAliveRequests
operator|==
literal|3
argument_list|)
expr_stmt|;
while|while
condition|(
name|heartBeatID
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
block|}
name|int
name|numKeepAliveRequests2
init|=
name|rt
operator|.
name|keepAliveRequests
operator|.
name|get
argument_list|(
name|rt
operator|.
name|appId
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeepAliveRequests
argument_list|,
name|numKeepAliveRequests2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|nm
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyNodeStartFailure (String errMessage)
specifier|private
name|void
name|verifyNodeStartFailure
parameter_list|(
name|String
name|errMessage
parameter_list|)
block|{
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"NM should have failed to start. Didn't get exception!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errMessage
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the state change to stopped occurs only if the startup is success, else
comment|// state change doesn't occur
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"NM state is wrong!"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
name|nm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of registered nodes is wrong!"
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|registeredNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createNMConfig ()
specifier|private
name|YarnConfiguration
name|createNMConfig
parameter_list|()
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
literal|5
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// 5GB
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
literal|"127.0.0.1:12345"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
literal|"127.0.0.1:12346"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"logs"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"remotelogs"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"nm0"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getNodeManager (final NodeAction nodeHeartBeatAction)
specifier|private
name|NodeManager
name|getNodeManager
parameter_list|(
specifier|final
name|NodeAction
name|nodeHeartBeatAction
parameter_list|)
block|{
return|return
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
name|MyNodeStatusUpdater
name|myNodeStatusUpdater
init|=
operator|new
name|MyNodeStatusUpdater
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
decl_stmt|;
name|MyResourceTracker2
name|myResourceTracker2
init|=
operator|new
name|MyResourceTracker2
argument_list|()
decl_stmt|;
name|myResourceTracker2
operator|.
name|heartBeatNodeAction
operator|=
name|nodeHeartBeatAction
expr_stmt|;
name|myNodeStatusUpdater
operator|.
name|resourceTracker
operator|=
name|myResourceTracker2
expr_stmt|;
return|return
name|myNodeStatusUpdater
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

