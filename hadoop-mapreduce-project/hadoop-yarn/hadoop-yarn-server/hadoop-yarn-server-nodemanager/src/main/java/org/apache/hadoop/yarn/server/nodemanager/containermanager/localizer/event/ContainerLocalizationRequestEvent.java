begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_class
DECL|class|ContainerLocalizationRequestEvent
specifier|public
class|class
name|ContainerLocalizationRequestEvent
extends|extends
name|ContainerLocalizationEvent
block|{
DECL|field|vis
specifier|private
specifier|final
name|LocalResourceVisibility
name|vis
decl_stmt|;
DECL|field|reqs
specifier|private
specifier|final
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
name|reqs
decl_stmt|;
comment|/**    * Event requesting the localization of the reqs all with visibility vis    * @param c    * @param reqs    * @param vis    */
DECL|method|ContainerLocalizationRequestEvent (Container c, Collection<LocalResourceRequest> reqs, LocalResourceVisibility vis)
specifier|public
name|ContainerLocalizationRequestEvent
parameter_list|(
name|Container
name|c
parameter_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
name|reqs
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|super
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_CONTAINER_RESOURCES
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|vis
operator|=
name|vis
expr_stmt|;
name|this
operator|.
name|reqs
operator|=
name|reqs
expr_stmt|;
block|}
DECL|method|getVisibility ()
specifier|public
name|LocalResourceVisibility
name|getVisibility
parameter_list|()
block|{
return|return
name|vis
return|;
block|}
DECL|method|getRequestedResources ()
specifier|public
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
name|getRequestedResources
parameter_list|()
block|{
return|return
name|reqs
return|;
block|}
block|}
end_class

end_unit

