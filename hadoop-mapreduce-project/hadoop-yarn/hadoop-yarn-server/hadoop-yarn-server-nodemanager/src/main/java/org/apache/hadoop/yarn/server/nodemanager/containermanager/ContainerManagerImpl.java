begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
operator|.
name|DEFAULT_NM_BIND_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
operator|.
name|NM_BIND_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STARTED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerManagerSecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedContainersEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
operator|.
name|LogAggregationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
operator|.
name|event
operator|.
name|LogAggregatorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_class
DECL|class|ContainerManagerImpl
specifier|public
class|class
name|ContainerManagerImpl
extends|extends
name|CompositeService
implements|implements
name|ServiceStateChangeListener
implements|,
name|ContainerManager
implements|,
name|EventHandler
argument_list|<
name|ContainerManagerEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|containersMonitor
specifier|private
specifier|final
name|ContainersMonitor
name|containersMonitor
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|cmBindAddressStr
specifier|private
name|InetSocketAddress
name|cmBindAddressStr
decl_stmt|;
DECL|field|rsrcLocalizationSrvc
specifier|private
specifier|final
name|ResourceLocalizationService
name|rsrcLocalizationSrvc
decl_stmt|;
DECL|field|containersLauncher
specifier|private
specifier|final
name|ContainersLauncher
name|containersLauncher
decl_stmt|;
DECL|field|auxiluaryServices
specifier|private
specifier|final
name|AuxServices
name|auxiluaryServices
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|nodeStatusUpdater
specifier|private
specifier|final
name|NodeStatusUpdater
name|nodeStatusUpdater
decl_stmt|;
DECL|field|containerTokenSecretManager
specifier|private
name|ContainerTokenSecretManager
name|containerTokenSecretManager
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|dispatcher
specifier|protected
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|deletionService
specifier|private
specifier|final
name|DeletionService
name|deletionService
decl_stmt|;
DECL|method|ContainerManagerImpl (Context context, ContainerExecutor exec, DeletionService deletionContext, NodeStatusUpdater nodeStatusUpdater, NodeManagerMetrics metrics)
specifier|public
name|ContainerManagerImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletionService
operator|=
name|deletionContext
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|rsrcLocalizationSrvc
operator|=
name|createResourceLocalizationService
argument_list|(
name|exec
argument_list|,
name|deletionContext
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|containersLauncher
operator|=
name|createContainersLauncher
argument_list|(
name|context
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|containersLauncher
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStatusUpdater
operator|=
name|nodeStatusUpdater
expr_stmt|;
comment|// Create the secretManager if need be.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Security is enabled on NodeManager. "
operator|+
literal|"Creating ContainerTokenSecretManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerTokenSecretManager
operator|=
operator|new
name|ContainerTokenSecretManager
argument_list|()
expr_stmt|;
block|}
comment|// Start configurable services
name|auxiluaryServices
operator|=
operator|new
name|AuxServices
argument_list|()
expr_stmt|;
name|auxiluaryServices
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|auxiluaryServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|containersMonitor
operator|=
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|containersMonitor
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|this
operator|.
name|deletionService
argument_list|)
decl_stmt|;
name|addService
argument_list|(
name|logAggregationService
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
operator|new
name|ContainerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxiluaryServices
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersMonitorEventType
operator|.
name|class
argument_list|,
name|containersMonitor
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|containersLauncher
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LogAggregatorEventType
operator|.
name|class
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
DECL|method|createLogAggregationService ( DeletionService deletionService)
specifier|protected
name|LogAggregationService
name|createLogAggregationService
parameter_list|(
name|DeletionService
name|deletionService
parameter_list|)
block|{
return|return
operator|new
name|LogAggregationService
argument_list|(
name|deletionService
argument_list|)
return|;
block|}
DECL|method|getContainersMonitor ()
specifier|public
name|ContainersMonitor
name|getContainersMonitor
parameter_list|()
block|{
return|return
name|this
operator|.
name|containersMonitor
return|;
block|}
DECL|method|createResourceLocalizationService ( ContainerExecutor exec, DeletionService deletionContext)
specifier|protected
name|ResourceLocalizationService
name|createResourceLocalizationService
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|)
block|{
return|return
operator|new
name|ResourceLocalizationService
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|deletionContext
argument_list|)
return|;
block|}
DECL|method|createContainersLauncher (Context context, ContainerExecutor exec)
specifier|protected
name|ContainersLauncher
name|createContainersLauncher
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersLauncher
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|cmBindAddressStr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NM_BIND_ADDRESS
argument_list|,
name|DEFAULT_NM_BIND_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Enqueue user dirs in deletion context
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// This is fine as status updater is started before ContainerManager and
comment|// RM gives the shared secret in registration during StatusUpdter#start()
comment|// itself.
name|this
operator|.
name|containerTokenSecretManager
operator|.
name|setSecretKey
argument_list|(
name|this
operator|.
name|nodeStatusUpdater
operator|.
name|getContainerManagerBindAddress
argument_list|()
argument_list|,
name|this
operator|.
name|nodeStatusUpdater
operator|.
name|getRMNMSharedSecret
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|cmConf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|cmConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SECURITY_INFO
argument_list|,
name|ContainerManagerSecurityInfo
operator|.
name|class
argument_list|,
name|SecurityInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|cmBindAddressStr
argument_list|,
name|cmConf
argument_list|,
name|this
operator|.
name|containerTokenSecretManager
argument_list|,
name|cmConf
operator|.
name|getInt
argument_list|(
name|NMConfig
operator|.
name|NM_CONTAINER_MGR_THREADS
argument_list|,
name|NMConfig
operator|.
name|DEFAULT_NM_CONTAINER_MGR_THREADS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerManager started at "
operator|+
name|cmBindAddressStr
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|auxiluaryServices
operator|.
name|getServiceState
argument_list|()
operator|==
name|STARTED
condition|)
block|{
name|auxiluaryServices
operator|.
name|unregister
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start a container on this NodeManager.    */
annotation|@
name|Override
DECL|method|startContainer (StartContainerRequest request)
specifier|public
name|StartContainerResponse
name|startContainer
parameter_list|(
name|StartContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|ContainerLaunchContext
name|launchContext
init|=
name|request
operator|.
name|getContainerLaunchContext
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" container is "
operator|+
name|request
argument_list|)
expr_stmt|;
comment|// //////////// Parse credentials
name|ByteBuffer
name|tokens
init|=
name|launchContext
operator|.
name|getContainerTokens
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
try|try
block|{
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tk
operator|.
name|getService
argument_list|()
operator|+
literal|" = "
operator|+
name|tk
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// //////////// End of parsing credentials
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|launchContext
argument_list|,
name|credentials
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ContainerId
name|containerID
init|=
name|launchContext
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationID
init|=
name|containerID
operator|.
name|getAppId
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|containerID
argument_list|,
name|container
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|launchContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Container already running on this node!"
argument_list|,
name|applicationID
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerID
operator|+
literal|" already is running on this node!!"
argument_list|)
throw|;
block|}
comment|// Create the application
name|Application
name|application
init|=
operator|new
name|ApplicationImpl
argument_list|(
name|dispatcher
argument_list|,
name|launchContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|applicationID
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationID
argument_list|,
name|application
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating a new application reference for app "
operator|+
name|applicationID
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Validate the request
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|launchContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|applicationID
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|StartContainerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|addAllServiceResponse
argument_list|(
name|auxiluaryServices
operator|.
name|getMeta
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|launchedContainer
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|allocateContainer
argument_list|(
name|launchContext
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|stopContainer (StopContainerRequest request)
specifier|public
name|StopContainerResponse
name|stopContainer
parameter_list|(
name|StopContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|StopContainerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StopContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|containerID
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to stop unknown container "
operator|+
name|containerID
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Trying to stop unknown container!"
argument_list|,
name|containerID
operator|.
name|getAppId
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|response
return|;
comment|// Return immediately.
block|}
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|containerID
argument_list|,
literal|"Container killed by the ApplicationMaster."
argument_list|)
argument_list|)
expr_stmt|;
comment|// user logged here not ideal since just getting user from container but
comment|// request doesn't have anything and should be coming from user of AM so
comment|// should be the same or should be rejected by auth before here.
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|containerID
operator|.
name|getAppId
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
comment|// TODO: Move this code to appropriate place once kill_container is
comment|// implemented.
name|nodeStatusUpdater
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerStatus (GetContainerStatusRequest request)
specifier|public
name|GetContainerStatusResponse
name|getContainerStatus
parameter_list|(
name|GetContainerStatusRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|ContainerId
name|containerID
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting container-status for "
operator|+
name|containerID
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|ContainerStatus
name|containerStatus
init|=
name|container
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning "
operator|+
name|containerStatus
argument_list|)
expr_stmt|;
name|GetContainerStatusResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerID
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
throw|;
block|}
block|}
DECL|class|ContainerEventDispatcher
class|class
name|ContainerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|Container
name|c
init|=
name|containers
operator|.
name|get
argument_list|(
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent container "
operator|+
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ApplicationEventDispatcher
class|class
name|ApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ApplicationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
name|Application
name|app
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent application "
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|handle (ContainerManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerManagerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FINISH_APPS
case|:
name|CMgrCompletedAppsEvent
name|appsFinishedEvent
init|=
operator|(
name|CMgrCompletedAppsEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ApplicationId
name|appID
range|:
name|appsFinishedEvent
operator|.
name|getAppsToCleanup
argument_list|()
control|)
block|{
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|appID
argument_list|,
name|ApplicationEventType
operator|.
name|FINISH_APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FINISH_CONTAINERS
case|:
name|CMgrCompletedContainersEvent
name|containersFinishedEvent
init|=
operator|(
name|CMgrCompletedContainersEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ContainerId
name|container
range|:
name|containersFinishedEvent
operator|.
name|getContainersToCleanup
argument_list|()
control|)
block|{
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|container
argument_list|,
literal|"Container Killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|". Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

