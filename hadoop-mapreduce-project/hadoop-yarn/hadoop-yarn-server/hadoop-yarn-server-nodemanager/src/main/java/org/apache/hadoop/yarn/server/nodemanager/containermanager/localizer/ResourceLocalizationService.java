begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ApplicationLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceReleaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|security
operator|.
name|LocalizerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|NMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
DECL|class|ResourceLocalizationService
specifier|public
class|class
name|ResourceLocalizationService
extends|extends
name|CompositeService
implements|implements
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
implements|,
name|LocalizationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceLocalizationService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NM_PRIVATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_PRIVATE_DIR
init|=
literal|"nmPrivate"
decl_stmt|;
DECL|field|NM_PRIVATE_PERM
specifier|public
specifier|static
specifier|final
name|FsPermission
name|NM_PRIVATE_PERM
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|localizationServerAddress
specifier|private
name|InetSocketAddress
name|localizationServerAddress
decl_stmt|;
DECL|field|cacheTargetSize
specifier|private
name|long
name|cacheTargetSize
decl_stmt|;
DECL|field|cacheCleanupPeriod
specifier|private
name|long
name|cacheCleanupPeriod
decl_stmt|;
DECL|field|logDirs
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
decl_stmt|;
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|sysDirs
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|sysDirs
decl_stmt|;
DECL|field|exec
specifier|private
specifier|final
name|ContainerExecutor
name|exec
decl_stmt|;
DECL|field|dispatcher
specifier|protected
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|localizerTracker
specifier|private
name|LocalizerTracker
name|localizerTracker
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
decl_stmt|;
DECL|field|localDirsSelector
specifier|private
specifier|final
name|LocalDirAllocator
name|localDirsSelector
decl_stmt|;
DECL|field|cacheCleanup
specifier|private
specifier|final
name|ScheduledExecutorService
name|cacheCleanup
decl_stmt|;
DECL|field|publicRsrc
specifier|private
specifier|final
name|LocalResourcesTracker
name|publicRsrc
decl_stmt|;
comment|/**    * Map of LocalResourceTrackers keyed by username, for private    * resources.    */
DECL|field|privateRsrc
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|privateRsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map of LocalResourceTrackers keyed by appid, for application    * resources.    */
DECL|field|appRsrc
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|appRsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ResourceLocalizationService (Dispatcher dispatcher, ContainerExecutor exec, DeletionService delService)
specifier|public
name|ResourceLocalizationService
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|delService
parameter_list|)
block|{
name|super
argument_list|(
name|ResourceLocalizationService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|exec
operator|=
name|exec
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|delService
operator|=
name|delService
expr_stmt|;
name|this
operator|.
name|localDirsSelector
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicRsrc
operator|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheCleanup
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"ResourceLocalizationService Cache Cleanup"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalFileContext (Configuration conf)
name|FileContext
name|getLocalFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Failed to access local fs"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO queue deletions here, rather than NM init?
name|FileContext
name|lfs
init|=
name|getLocalFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|sLocalDirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCAL_DIRS
argument_list|)
decl_stmt|;
name|localDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|sLocalDirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|logDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|sLocalDirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|sysDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|sLocalDirs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sLocaldir
range|:
name|sLocalDirs
control|)
block|{
name|Path
name|localdir
init|=
operator|new
name|Path
argument_list|(
name|sLocaldir
argument_list|)
decl_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
name|localdir
argument_list|)
expr_stmt|;
comment|// $local/usercache
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|localdir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|userdir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// $local/filecache
name|Path
name|filedir
init|=
operator|new
name|Path
argument_list|(
name|localdir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|filedir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// $local/nmPrivate
name|Path
name|sysdir
init|=
operator|new
name|Path
argument_list|(
name|localdir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|sysdir
argument_list|,
name|NM_PRIVATE_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sysDirs
operator|.
name|add
argument_list|(
name|sysdir
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|sLogdirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_DIRS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sLogdir
range|:
name|sLogdirs
control|)
block|{
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|sLogdir
argument_list|)
decl_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
name|logdir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|logdir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Failed to initialize LocalizationService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|localDirs
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
name|logDirs
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|logDirs
argument_list|)
expr_stmt|;
name|sysDirs
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sysDirs
argument_list|)
expr_stmt|;
name|cacheTargetSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
argument_list|)
operator|<<
literal|20
expr_stmt|;
name|cacheCleanupPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
argument_list|)
expr_stmt|;
name|localizationServerAddress
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_ADDRESS
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_PORT
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|)
expr_stmt|;
name|localizerTracker
operator|=
name|createLocalizerTracker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|localizerTracker
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerTracker
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|heartbeat (LocalizerStatus status)
specifier|public
name|LocalizerHeartbeatResponse
name|heartbeat
parameter_list|(
name|LocalizerStatus
name|status
parameter_list|)
block|{
return|return
name|localizerTracker
operator|.
name|processHeartbeat
argument_list|(
name|status
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|cacheCleanup
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|CacheCleanup
argument_list|(
name|dispatcher
argument_list|)
argument_list|,
name|cacheCleanupPeriod
argument_list|,
name|cacheCleanupPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|server
operator|=
name|createServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|host
init|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|host
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|localizationServerAddress
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Localizer started on port "
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createLocalizerTracker (Configuration conf)
name|LocalizerTracker
name|createLocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|LocalizerTracker
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|createServer ()
name|Server
name|createServer
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LocalizerTokenSecretManager
name|secretManager
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|secretManager
operator|=
operator|new
name|LocalizerTokenSecretManager
argument_list|()
expr_stmt|;
block|}
name|Server
name|server
init|=
name|rpc
operator|.
name|getServer
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|localizationServerAddress
argument_list|,
name|conf
argument_list|,
name|secretManager
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
decl_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|NMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cacheCleanup
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (LocalizationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|LocalizationEvent
name|event
parameter_list|)
block|{
comment|// TODO: create log dir as $logdir/$user/$appId
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INIT_APPLICATION_RESOURCES
case|:
name|handleInitApplicationResources
argument_list|(
operator|(
operator|(
name|ApplicationLocalizationEvent
operator|)
name|event
operator|)
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INIT_CONTAINER_RESOURCES
case|:
name|handleInitContainerResources
argument_list|(
operator|(
name|ContainerLocalizationRequestEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CACHE_CLEANUP
case|:
name|handleCacheCleanup
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLEANUP_CONTAINER_RESOURCES
case|:
name|handleCleanupContainerResources
argument_list|(
operator|(
name|ContainerLocalizationCleanupEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESTROY_APPLICATION_RESOURCES
case|:
name|handleDestroyApplicationResources
argument_list|(
operator|(
operator|(
name|ApplicationLocalizationEvent
operator|)
name|event
operator|)
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unknown localization event: "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handle event received the first time any container is scheduled    * by a given application.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleInitApplicationResources (Application app)
specifier|private
name|void
name|handleInitApplicationResources
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
comment|// 0) Create application tracking structs
name|String
name|userName
init|=
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|privateRsrc
operator|.
name|putIfAbsent
argument_list|(
name|userName
argument_list|,
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|userName
argument_list|,
name|dispatcher
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|appRsrc
operator|.
name|putIfAbsent
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|dispatcher
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Initializing application "
operator|+
name|app
operator|+
literal|" already present"
argument_list|)
expr_stmt|;
assert|assert
literal|false
assert|;
comment|// TODO: FIXME assert doesn't help
comment|// ^ The condition is benign. Tests should fail and it
comment|//   should appear in logs, but it's an internal error
comment|//   that should have no effect on applications
block|}
comment|// 1) Signal container init
comment|//
comment|// This is handled by the ApplicationImpl state machine and allows
comment|// containers to proceed with launching.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitedEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For each of the requested resources for a container, determines the    * appropriate {@link LocalResourcesTracker} and forwards a     * {@link LocalResourceRequest} to that tracker.    */
DECL|method|handleInitContainerResources ( ContainerLocalizationRequestEvent rsrcReqs)
specifier|private
name|void
name|handleInitContainerResources
parameter_list|(
name|ContainerLocalizationRequestEvent
name|rsrcReqs
parameter_list|)
block|{
name|Container
name|c
init|=
name|rsrcReqs
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|LocalizerContext
name|ctxt
init|=
operator|new
name|LocalizerContext
argument_list|(
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|c
operator|.
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
name|rsrcReqs
operator|.
name|getRequestedResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|e
range|:
name|rsrcs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalResourceRequest
name|req
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|req
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ctxt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleCacheCleanup (LocalizationEvent event)
specifier|private
name|void
name|handleCacheCleanup
parameter_list|(
name|LocalizationEvent
name|event
parameter_list|)
block|{
name|ResourceRetentionSet
name|retain
init|=
operator|new
name|ResourceRetentionSet
argument_list|(
name|delService
argument_list|,
name|cacheTargetSize
argument_list|)
decl_stmt|;
name|retain
operator|.
name|addResources
argument_list|(
name|publicRsrc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource cleanup (public) "
operator|+
name|retain
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalResourcesTracker
name|t
range|:
name|privateRsrc
operator|.
name|values
argument_list|()
control|)
block|{
name|retain
operator|.
name|addResources
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource cleanup "
operator|+
name|t
operator|.
name|getUser
argument_list|()
operator|+
literal|":"
operator|+
name|retain
argument_list|)
expr_stmt|;
block|}
comment|//TODO Check if appRsrcs should also be added to the retention set.
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleCleanupContainerResources ( ContainerLocalizationCleanupEvent rsrcCleanup)
specifier|private
name|void
name|handleCleanupContainerResources
parameter_list|(
name|ContainerLocalizationCleanupEvent
name|rsrcCleanup
parameter_list|)
block|{
name|Container
name|c
init|=
name|rsrcCleanup
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
name|rsrcCleanup
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|e
range|:
name|rsrcs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalResourceRequest
name|req
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req
argument_list|,
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete the container directories
name|String
name|userName
init|=
name|c
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|c
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIDStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|localDir
range|:
name|localDirs
control|)
block|{
comment|// Delete the user-owned container-dir
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Path
name|allAppsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|allAppsdir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|Path
name|containerDir
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
name|userName
argument_list|,
name|containerDir
argument_list|,
operator|new
name|Path
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// Delete the nmPrivate container-dir
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|Path
name|appSysDir
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|Path
name|containerSysDir
init|=
operator|new
name|Path
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|containerSysDir
argument_list|,
operator|new
name|Path
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|handleDestroyApplicationResources (Application application)
specifier|private
name|void
name|handleDestroyApplicationResources
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|String
name|userName
decl_stmt|;
name|String
name|appIDStr
decl_stmt|;
name|LocalResourcesTracker
name|appLocalRsrcsTracker
init|=
name|appRsrc
operator|.
name|remove
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|appLocalRsrcsTracker
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removing uninitialized application "
operator|+
name|application
argument_list|)
expr_stmt|;
block|}
comment|// TODO: What to do with appLocalRsrcsTracker?
comment|// Delete the application directories
name|userName
operator|=
name|application
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|appIDStr
operator|=
name|application
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|localDir
range|:
name|localDirs
control|)
block|{
comment|// Delete the user-owned app-dir
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Path
name|allAppsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|allAppsdir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
name|userName
argument_list|,
name|appDir
argument_list|,
operator|new
name|Path
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// Delete the nmPrivate app-dir
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|Path
name|appSysDir
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|appSysDir
argument_list|,
operator|new
name|Path
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|// TODO: decrement reference counts of all resources associated with this
comment|// app
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|application
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalResourcesTracker ( LocalResourceVisibility visibility, String user, ApplicationId appId)
name|LocalResourcesTracker
name|getLocalResourcesTracker
parameter_list|(
name|LocalResourceVisibility
name|visibility
parameter_list|,
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
switch|switch
condition|(
name|visibility
condition|)
block|{
default|default:
case|case
name|PUBLIC
case|:
return|return
name|publicRsrc
return|;
case|case
name|PRIVATE
case|:
return|return
name|privateRsrc
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
case|case
name|APPLICATION
case|:
return|return
name|appRsrc
operator|.
name|get
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Sub-component handling the spawning of {@link ContainerLocalizer}s    */
DECL|class|LocalizerTracker
class|class
name|LocalizerTracker
extends|extends
name|AbstractService
implements|implements
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
block|{
DECL|field|publicLocalizer
specifier|private
specifier|final
name|PublicLocalizer
name|publicLocalizer
decl_stmt|;
DECL|field|privLocalizers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
name|privLocalizers
decl_stmt|;
DECL|method|LocalizerTracker (Configuration conf)
name|LocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalizerTracker (Configuration conf, Map<String,LocalizerRunner> privLocalizers)
name|LocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
name|privLocalizers
parameter_list|)
block|{
name|super
argument_list|(
name|LocalizerTracker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicLocalizer
operator|=
operator|new
name|PublicLocalizer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|privLocalizers
operator|=
name|privLocalizers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|publicLocalizer
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|processHeartbeat (LocalizerStatus status)
specifier|public
name|LocalizerHeartbeatResponse
name|processHeartbeat
parameter_list|(
name|LocalizerStatus
name|status
parameter_list|)
block|{
name|String
name|locId
init|=
name|status
operator|.
name|getLocalizerId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
comment|// TODO process resources anyway
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown localizer with localizerId "
operator|+
name|locId
operator|+
literal|" is sending heartbeat. Ordering it to DIE"
argument_list|)
expr_stmt|;
name|LocalizerHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
return|return
name|localizer
operator|.
name|update
argument_list|(
name|status
operator|.
name|getResources
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|LocalizerRunner
name|localizer
range|:
name|privLocalizers
operator|.
name|values
argument_list|()
control|)
block|{
name|localizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|publicLocalizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (LocalizerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|LocalizerEvent
name|event
parameter_list|)
block|{
name|String
name|locId
init|=
name|event
operator|.
name|getLocalizerId
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|REQUEST_RESOURCE_LOCALIZATION
case|:
comment|// 0) find running localizer or start new thread
name|LocalizerResourceRequestEvent
name|req
init|=
operator|(
name|LocalizerResourceRequestEvent
operator|)
name|event
decl_stmt|;
switch|switch
condition|(
name|req
operator|.
name|getVisibility
argument_list|()
condition|)
block|{
case|case
name|PUBLIC
case|:
name|publicLocalizer
operator|.
name|addResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
case|case
name|APPLICATION
case|:
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created localizer for "
operator|+
name|req
operator|.
name|getLocalizerId
argument_list|()
argument_list|)
expr_stmt|;
name|localizer
operator|=
operator|new
name|LocalizerRunner
argument_list|(
name|req
operator|.
name|getContext
argument_list|()
argument_list|,
name|req
operator|.
name|getLocalizerId
argument_list|()
argument_list|)
expr_stmt|;
name|privLocalizers
operator|.
name|put
argument_list|(
name|locId
argument_list|,
name|localizer
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// 1) propagate event
name|localizer
operator|.
name|addResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
break|break;
case|case
name|ABORT_LOCALIZATION
case|:
comment|// 0) find running localizer, interrupt and remove
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
return|return;
comment|// ignore; already gone
block|}
name|privLocalizers
operator|.
name|remove
argument_list|(
name|locId
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
DECL|method|createLocalizerExecutor (Configuration conf)
specifier|private
specifier|static
name|ExecutorService
name|createLocalizerExecutor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|nThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_FETCH_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|tf
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"PublicLocalizer #%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|,
name|tf
argument_list|)
return|;
block|}
DECL|class|PublicLocalizer
class|class
name|PublicLocalizer
extends|extends
name|Thread
block|{
DECL|field|PUBCACHE_CTXT
specifier|static
specifier|final
name|String
name|PUBCACHE_CTXT
init|=
literal|"public.cache.dirs"
decl_stmt|;
DECL|field|lfs
specifier|final
name|FileContext
name|lfs
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|threadPool
specifier|final
name|ExecutorService
name|threadPool
decl_stmt|;
DECL|field|publicDirs
specifier|final
name|LocalDirAllocator
name|publicDirs
decl_stmt|;
DECL|field|queue
specifier|final
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|queue
decl_stmt|;
DECL|field|pending
specifier|final
name|Map
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
decl_stmt|;
comment|// TODO hack to work around broken signaling
DECL|field|attempts
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|>
name|attempts
decl_stmt|;
DECL|method|PublicLocalizer (Configuration conf)
name|PublicLocalizer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|getLocalFileContext
argument_list|(
name|conf
argument_list|)
argument_list|,
name|createLocalizerExecutor
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|PublicLocalizer (Configuration conf, FileContext lfs, ExecutorService threadPool, Map<Future<Path>,LocalizerResourceRequestEvent> pending, Map<LocalResourceRequest,List<LocalizerResourceRequestEvent>> attempts)
name|PublicLocalizer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|ExecutorService
name|threadPool
parameter_list|,
name|Map
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
parameter_list|,
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|>
name|attempts
parameter_list|)
block|{
name|super
argument_list|(
literal|"Public Localizer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|lfs
operator|=
name|lfs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
name|this
operator|.
name|attempts
operator|=
name|attempts
expr_stmt|;
name|String
index|[]
name|publicFilecache
init|=
operator|new
name|String
index|[
name|localDirs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|localDirs
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|publicFilecache
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|PUBCACHE_CTXT
argument_list|,
name|publicFilecache
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicDirs
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|PUBCACHE_CTXT
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Path
argument_list|>
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|addResource (LocalizerResourceRequestEvent request)
specifier|public
name|void
name|addResource
parameter_list|(
name|LocalizerResourceRequestEvent
name|request
parameter_list|)
block|{
comment|// TODO handle failures, cancellation, requests by other containers
name|LocalResourceRequest
name|key
init|=
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloading public rsrc:"
operator|+
name|key
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|attempts
init|)
block|{
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|sigh
init|=
name|attempts
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sigh
condition|)
block|{
name|pending
operator|.
name|put
argument_list|(
name|queue
operator|.
name|submit
argument_list|(
operator|new
name|FSDownload
argument_list|(
name|lfs
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|publicDirs
argument_list|,
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigh
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// TODO shutdown, better error handling esp. DU
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Path
argument_list|>
name|completed
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
name|LocalizerResourceRequestEvent
name|assoc
init|=
name|pending
operator|.
name|remove
argument_list|(
name|completed
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|local
init|=
name|completed
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|assoc
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Localized unkonwn resource to "
operator|+
name|completed
argument_list|)
expr_stmt|;
comment|// TODO delete
return|return;
block|}
name|LocalResourceRequest
name|key
init|=
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|key
argument_list|,
name|local
argument_list|,
name|FileUtil
operator|.
name|getDU
argument_list|(
operator|new
name|File
argument_list|(
name|local
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|attempts
init|)
block|{
name|attempts
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to download rsrc "
operator|+
name|assoc
operator|.
name|getResource
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|assoc
operator|.
name|getContext
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|attempts
init|)
block|{
name|LocalResourceRequest
name|req
init|=
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|reqs
init|=
name|attempts
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|reqs
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing pending list for "
operator|+
name|req
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attempts
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
comment|/*                   * Do not retry for now. Once failed is failed!                  *  LocalizerResourceRequestEvent request = reqs.remove(0);                  pending.put(queue.submit(new FSDownload(                     lfs, null, conf, publicDirs,                     request.getResource().getRequest(), new Random())),                     request);                  */
block|}
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// ignore; shutting down
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error: Shutting down"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Public cache exiting"
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Runs the {@link ContainerLocalizer} itself in a separate process with    * access to user's credentials. One {@link LocalizerRunner} per localizerId.    *     */
DECL|class|LocalizerRunner
class|class
name|LocalizerRunner
extends|extends
name|Thread
block|{
DECL|field|context
specifier|final
name|LocalizerContext
name|context
decl_stmt|;
DECL|field|localizerId
specifier|final
name|String
name|localizerId
decl_stmt|;
DECL|field|scheduled
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|scheduled
decl_stmt|;
DECL|field|pending
specifier|final
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
decl_stmt|;
comment|// TODO: threadsafe, use outer?
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|LocalizerRunner (LocalizerContext context, String localizerId)
name|LocalizerRunner
parameter_list|(
name|LocalizerContext
name|context
parameter_list|,
name|String
name|localizerId
parameter_list|)
block|{
name|super
argument_list|(
literal|"LocalizerRunner for "
operator|+
name|localizerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|localizerId
operator|=
name|localizerId
expr_stmt|;
name|this
operator|.
name|pending
operator|=
operator|new
name|ArrayList
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduled
operator|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|addResource (LocalizerResourceRequestEvent request)
specifier|public
name|void
name|addResource
parameter_list|(
name|LocalizerResourceRequestEvent
name|request
parameter_list|)
block|{
comment|// TDOO: Synchronization
name|pending
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find next resource to be given to a spawned localizer.      *       * @return      */
DECL|method|findNextResource ()
specifier|private
name|LocalResource
name|findNextResource
parameter_list|()
block|{
comment|// TODO: Synchronization
for|for
control|(
name|Iterator
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|i
init|=
name|pending
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LocalizerResourceRequestEvent
name|evt
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LocalizedResource
name|nRsrc
init|=
name|evt
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|ResourceState
operator|.
name|LOCALIZED
operator|.
name|equals
argument_list|(
name|nRsrc
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|nRsrc
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
name|LocalResourceRequest
name|nextRsrc
init|=
name|nRsrc
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|LocalResource
name|next
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|next
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|nextRsrc
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|next
operator|.
name|setTimestamp
argument_list|(
name|nextRsrc
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setType
argument_list|(
name|nextRsrc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setVisibility
argument_list|(
name|evt
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
name|scheduled
operator|.
name|put
argument_list|(
name|nextRsrc
argument_list|,
name|evt
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// TODO this sucks. Fix it later
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|update ( List<LocalResourceStatus> remoteResourceStatuses)
name|LocalizerHeartbeatResponse
name|update
parameter_list|(
name|List
argument_list|<
name|LocalResourceStatus
argument_list|>
name|remoteResourceStatuses
parameter_list|)
block|{
name|LocalizerHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The localizer has just spawned. Start giving it resources for
comment|// remote-fetching.
if|if
condition|(
name|remoteResourceStatuses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LocalResource
name|next
init|=
name|findNextResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResource
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: Synchronization
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
for|for
control|(
name|LocalResourceStatus
name|stat
range|:
name|remoteResourceStatuses
control|)
block|{
name|LocalResource
name|rsrc
init|=
name|stat
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
literal|null
decl_stmt|;
try|try
block|{
name|req
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// TODO fail? Already translated several times...
block|}
name|LocalizerResourceRequestEvent
name|assoc
init|=
name|scheduled
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|assoc
operator|==
literal|null
condition|)
block|{
comment|// internal error
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown resource reported: "
operator|+
name|req
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|stat
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|FETCH_SUCCESS
case|:
comment|// notify resource
try|try
block|{
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|req
argument_list|,
name|ConverterUtils
operator|.
name|getPathFromYarnURL
argument_list|(
name|stat
operator|.
name|getLocalPath
argument_list|()
argument_list|)
argument_list|,
name|stat
operator|.
name|getLocalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{ }
if|if
condition|(
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: Synchronization
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
break|break;
block|}
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|LocalResource
name|next
init|=
name|findNextResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|addResource
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FETCH_PENDING
case|:
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|)
expr_stmt|;
break|break;
case|case
name|FETCH_FAILURE
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: FAILED "
operator|+
name|req
argument_list|,
name|stat
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
comment|// TODO: Why is this event going directly to the container. Why not
comment|// the resource itself? What happens to the resource? Is it removed?
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|context
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|req
argument_list|,
name|stat
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown status: "
operator|+
name|stat
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|context
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|req
argument_list|,
name|stat
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|nmPrivateCTokensPath
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Use LocalDirAllocator to get nmPrivateDir
name|nmPrivateCTokensPath
operator|=
name|localDirsSelector
operator|.
name|getLocalPathForWrite
argument_list|(
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|localizerId
argument_list|)
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// 0) init queue, etc.
comment|// 1) write credentials to private dir
name|writeCredentials
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
expr_stmt|;
comment|// 2) exec initApplication and wait
name|exec
operator|.
name|startLocalizer
argument_list|(
name|nmPrivateCTokensPath
argument_list|,
name|localizationServerAddress
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|context
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|,
name|localizerId
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
comment|// TODO handle ExitCodeException separately?
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Localizer failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// 3) on error, report failure to Container and signal ABORT
comment|// 3.1) notify resource of failed localization
name|ContainerId
name|cId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|cId
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|LocalizerResourceRequestEvent
name|event
range|:
name|scheduled
operator|.
name|values
argument_list|()
control|)
block|{
name|event
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|delService
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|nmPrivateCTokensPath
argument_list|,
operator|new
name|Path
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeCredentials (Path nmPrivateCTokensPath)
specifier|private
name|void
name|writeCredentials
parameter_list|(
name|Path
name|nmPrivateCTokensPath
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|tokenOut
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Credentials
name|credentials
init|=
name|context
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|FileContext
name|lfs
init|=
name|getLocalFileContext
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|tokenOut
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|nmPrivateCTokensPath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing credentials to the nmPrivate file "
operator|+
name|nmPrivateCTokensPath
operator|.
name|toString
argument_list|()
operator|+
literal|". Credentials list: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tk
operator|.
name|getService
argument_list|()
operator|+
literal|" : "
operator|+
name|tk
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|tokenOut
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tokenOut
operator|!=
literal|null
condition|)
block|{
name|tokenOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CacheCleanup
specifier|static
class|class
name|CacheCleanup
extends|extends
name|Thread
block|{
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|method|CacheCleanup (Dispatcher dispatcher)
specifier|public
name|CacheCleanup
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|super
argument_list|(
literal|"CacheCleanup"
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|LocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|CACHE_CLEANUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

