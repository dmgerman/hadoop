begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdaterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|StoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_class
DECL|class|MiniYARNCluster
specifier|public
class|class
name|MiniYARNCluster
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniYARNCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// temp fix until metrics system can auto-detect itself running in unit test:
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|nodeManager
specifier|private
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|resourceManager
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
DECL|field|resourceManagerWrapper
specifier|private
name|ResourceManagerWrapper
name|resourceManagerWrapper
decl_stmt|;
DECL|field|nodeManagerWrapper
specifier|private
name|NodeManagerWrapper
name|nodeManagerWrapper
decl_stmt|;
DECL|field|testWorkDir
specifier|private
name|File
name|testWorkDir
decl_stmt|;
DECL|method|MiniYARNCluster (String testName)
specifier|public
name|MiniYARNCluster
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|this
operator|.
name|testWorkDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|testName
argument_list|)
expr_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"COULD NOT CLEANUP"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"could not cleanup test dir"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|resourceManagerWrapper
operator|=
operator|new
name|ResourceManagerWrapper
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|resourceManagerWrapper
argument_list|)
expr_stmt|;
name|nodeManagerWrapper
operator|=
operator|new
name|NodeManagerWrapper
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|nodeManagerWrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestWorkDir ()
specifier|public
name|File
name|getTestWorkDir
parameter_list|()
block|{
return|return
name|testWorkDir
return|;
block|}
DECL|method|getResourceManager ()
specifier|public
name|ResourceManager
name|getResourceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceManager
return|;
block|}
DECL|method|getNodeManager ()
specifier|public
name|NodeManager
name|getNodeManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeManager
return|;
block|}
DECL|class|ResourceManagerWrapper
specifier|private
class|class
name|ResourceManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|method|ResourceManagerWrapper ()
specifier|public
name|ResourceManagerWrapper
parameter_list|()
block|{
name|super
argument_list|(
name|ResourceManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|Store
name|store
init|=
name|StoreFactory
operator|.
name|getStore
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|(
name|store
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcase.
block|}
empty_stmt|;
block|}
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|<
literal|60
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for RM to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ResourceManager failed to start. Final state is "
operator|+
name|resourceManager
operator|.
name|getServiceState
argument_list|()
argument_list|)
throw|;
block|}
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NodeManagerWrapper
specifier|private
class|class
name|NodeManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|method|NodeManagerWrapper ()
specifier|public
name|NodeManagerWrapper
parameter_list|()
block|{
name|super
argument_list|(
name|NodeManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
decl_stmt|;
name|localDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created localDir in "
operator|+
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-logDir"
argument_list|)
decl_stmt|;
name|File
name|remoteLogDir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-remoteLogDir"
argument_list|)
decl_stmt|;
name|logDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|remoteLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created logDir in "
operator|+
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// By default AM + 2 containers
name|nodeManager
operator|=
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcase.
block|}
empty_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|ContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|)
block|{
return|return
operator|new
name|NodeStatusUpdaterImpl
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
name|containerTokenSecretManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
specifier|final
name|ResourceTrackerService
name|rt
init|=
name|resourceManager
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// For in-process communication without RPC
return|return
operator|new
name|ResourceTracker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|NodeHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|setHeartbeatResponse
argument_list|(
name|rt
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
operator|.
name|getHeartbeatResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in heartbeat from node "
operator|+
name|request
operator|.
name|getNodeStatus
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|setRegistrationResponse
argument_list|(
name|rt
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
operator|.
name|getRegistrationResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in node registration from "
operator|+
name|request
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
block|}
return|;
block|}
empty_stmt|;
block|}
return|;
block|}
empty_stmt|;
block|}
expr_stmt|;
name|nodeManager
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nodeManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nodeManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|<
literal|60
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NM to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeManager
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NodeManager failed to start"
argument_list|)
throw|;
block|}
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|nodeManager
operator|!=
literal|null
condition|)
block|{
name|nodeManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

