begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServicesNodes
specifier|public
class|class
name|TestRMWebServicesNodes
extends|extends
name|JerseyTest
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServicesNodes ()
specifier|public
name|TestRMWebServicesNodes
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodes ()
specifier|public
name|void
name|testNodes
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodesHelper
argument_list|(
literal|"nodes"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesSlash ()
specifier|public
name|void
name|testNodesSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodesHelper
argument_list|(
literal|"nodes/"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesDefault ()
specifier|public
name|void
name|testNodesDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodesHelper
argument_list|(
literal|"nodes/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryState ()
specifier|public
name|void
name|testNodesQueryState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryStateNone ()
specifier|public
name|void
name|testNodesQueryStateNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryStateInvalid ()
specifier|public
name|void
name|testNodesQueryStateInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"BOGUSSTATE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception querying invalid state"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"No enum const class org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeState.BOGUSSTATE"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthy ()
specifier|public
name|void
name|testNodesQueryHealthy
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyCase ()
specifier|public
name|void
name|testNodesQueryHealthyCase
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"TRUe"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyAndState ()
specifier|public
name|void
name|testNodesQueryHealthyAndState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|RMNodeImpl
name|node
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeHealthStatus
name|nodeHealth
init|=
name|node
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|nodeHealth
operator|.
name|setHealthReport
argument_list|(
literal|"test health report"
argument_list|)
expr_stmt|;
name|nodeHealth
operator|.
name|setIsNodeHealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeHealth
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyFalse ()
specifier|public
name|void
name|testNodesQueryHealthyFalse
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyInvalid ()
specifier|public
name|void
name|testNodesQueryHealthyInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception querying invalid healthy string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: Error: You must specify either true or false to query on health"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNodesHelper (String path, String media)
specifier|public
name|void
name|testNodesHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|info
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
literal|"h1:1234"
argument_list|)
condition|)
block|{
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|verifyNodeInfo
argument_list|(
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|verifyNodeInfo
argument_list|(
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleNode ()
specifier|public
name|void
name|testSingleNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|testSingleNodeHelper
argument_list|(
literal|"h2:1235"
argument_list|,
name|nm2
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleNodeSlash ()
specifier|public
name|void
name|testSingleNodeSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|testSingleNodeHelper
argument_list|(
literal|"h1:1234/"
argument_list|,
name|nm1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleNodeDefault ()
specifier|public
name|void
name|testSingleNodeDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|testSingleNodeHelper
argument_list|(
literal|"h1:1234/"
argument_list|,
name|nm1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleNodeHelper (String nodeid, MockNM nm, String media)
specifier|public
name|void
name|testSingleNodeHelper
parameter_list|(
name|String
name|nodeid
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
name|nodeid
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonexistNode ()
specifier|public
name|void
name|testNonexistNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid:99"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyNonexistNodeException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test that the exception output defaults to JSON
annotation|@
name|Test
DECL|method|testNonexistNodeDefault ()
specifier|public
name|void
name|testNonexistNodeDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid:99"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyNonexistNodeException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test that the exception output works in XML
annotation|@
name|Test
DECL|method|testNonexistNodeXML ()
specifier|public
name|void
name|testNonexistNodeXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid:99"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyNonexistNodeException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyNonexistNodeException (String message, String type, String classname)
specifier|private
name|void
name|verifyNonexistNodeException
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classname
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"exception message incorrect"
argument_list|,
literal|"java.lang.Exception: nodeId, node_invalid:99, is not found"
operator|.
name|matches
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"exception type incorrect"
argument_list|,
literal|"NotFoundException"
operator|.
name|matches
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"exception className incorrect"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
operator|.
name|matches
argument_list|(
name|classname
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidNode ()
specifier|public
name|void
name|testInvalidNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid_foo"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"Invalid NodeId \\[node_invalid_foo\\]. Expected host:port"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodesXML ()
specifier|public
name|void
name|testNodesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
comment|// MockNM nm2 = rm.registerNode("h2:1235", 5121);
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesApps
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesApps
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodesXML
argument_list|(
name|nodes
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleNodesXML ()
specifier|public
name|void
name|testSingleNodesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
comment|// MockNM nm2 = rm.registerNode("h2:1235", 5121);
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"h1:1234"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodesXML
argument_list|(
name|nodes
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodes2XML ()
specifier|public
name|void
name|testNodes2XML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesApps
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesApps
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyNodesXML (NodeList nodes, MockNM nm)
specifier|public
name|void
name|verifyNodesXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyNodeInfoGeneric
argument_list|(
name|nm
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"rack"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"healthStatus"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeHostName"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeHTTPAddress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"lastHealthUpdate"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"healthReport"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"numContainers"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"usedMemoryMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"availMemoryMB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyNodeInfo (JSONObject nodeInfo, MockNM nm)
specifier|public
name|void
name|verifyNodeInfo
parameter_list|(
name|JSONObject
name|nodeInfo
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|11
argument_list|,
name|nodeInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeInfoGeneric
argument_list|(
name|nm
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"rack"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"healthStatus"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"nodeHostName"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"lastHealthUpdate"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"healthReport"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getInt
argument_list|(
literal|"numContainers"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"usedMemoryMB"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"availMemoryMB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeInfoGeneric (MockNM nm, String state, String rack, String healthStatus, String id, String nodeHostName, String nodeHTTPAddress, long lastHealthUpdate, String healthReport, int numContainers, long usedMemoryMB, long availMemoryMB)
specifier|public
name|void
name|verifyNodeInfoGeneric
parameter_list|(
name|MockNM
name|nm
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|rack
parameter_list|,
name|String
name|healthStatus
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|nodeHostName
parameter_list|,
name|String
name|nodeHTTPAddress
parameter_list|,
name|long
name|lastHealthUpdate
parameter_list|,
name|String
name|healthReport
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|usedMemoryMB
parameter_list|,
name|long
name|availMemoryMB
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|RMNode
name|node
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeHealthStatus
name|health
init|=
name|node
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|ResourceScheduler
name|sched
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerNodeReport
name|report
init|=
name|sched
operator|.
name|getNodeReport
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|node
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"rack"
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|rack
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"healthStatus"
argument_list|,
literal|"Healthy"
argument_list|,
name|healthStatus
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeHostName"
argument_list|,
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeHostName
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"healthReport"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|health
operator|.
name|getHealthReport
argument_list|()
argument_list|)
argument_list|,
name|healthReport
argument_list|)
expr_stmt|;
name|String
name|expectedHttpAddress
init|=
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|nm
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeHTTPAddress"
argument_list|,
name|expectedHttpAddress
argument_list|,
name|nodeHTTPAddress
argument_list|)
expr_stmt|;
name|long
name|expectedHealthUpdate
init|=
name|health
operator|.
name|getLastHealthReportTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lastHealthUpdate doesn't match, got: "
operator|+
name|lastHealthUpdate
operator|+
literal|" expected: "
operator|+
name|expectedHealthUpdate
argument_list|,
name|expectedHealthUpdate
argument_list|,
name|lastHealthUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"numContainers doesn't match: "
operator|+
name|numContainers
argument_list|,
name|report
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usedMemoryMB doesn't match: "
operator|+
name|usedMemoryMB
argument_list|,
name|report
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|usedMemoryMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"availMemoryMB doesn't match: "
operator|+
name|availMemoryMB
argument_list|,
name|report
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|availMemoryMB
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

