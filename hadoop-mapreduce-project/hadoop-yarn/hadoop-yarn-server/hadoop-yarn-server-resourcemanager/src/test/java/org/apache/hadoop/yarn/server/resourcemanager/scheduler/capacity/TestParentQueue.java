begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestParentQueue
specifier|public
class|class
name|TestParentQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|csConf
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|csContext
name|CapacitySchedulerContext
name|csContext
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|csContext
operator|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|method|setupSingleLevelQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupSingleLevelQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues a and b"
argument_list|)
expr_stmt|;
block|}
DECL|method|stubQueueAllocation (final CSQueue queue, final Resource clusterResource, final SchedulerNode node, final int allocation)
specifier|private
name|void
name|stubQueueAllocation
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|SchedulerNode
name|node
parameter_list|,
specifier|final
name|int
name|allocation
parameter_list|)
block|{
comment|// Simulate the queue allocation
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Resource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resource
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FOOBAR q.assignContainers q="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" alloc="
operator|+
name|allocation
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Resource
name|allocatedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|instanceof
name|ParentQueue
condition|)
block|{
operator|(
operator|(
name|ParentQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|allocatedResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LeafQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
literal|""
argument_list|,
name|allocatedResource
argument_list|)
expr_stmt|;
block|}
comment|// Next call - nothing
if|if
condition|(
name|allocation
operator|>
literal|0
condition|)
block|{
name|doReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock the node's resource availability
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|available
argument_list|,
name|allocatedResource
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|node
argument_list|)
operator|.
name|getAvailableResource
argument_list|()
expr_stmt|;
block|}
return|return
name|allocatedResource
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeQueueUtilization (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|float
name|computeQueueUtilization
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
return|return
operator|(
name|expectedMemory
operator|/
operator|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|)
operator|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleLevelQueues ()
specifier|public
name|void
name|testSingleLevelQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupSingleLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|CapacityScheduler
operator|.
name|queueComparator
argument_list|,
name|CapacityScheduler
operator|.
name|applicationComparator
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|SchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|LeafQueue
name|a
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|LeafQueue
name|b
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
specifier|final
name|float
name|delta
init|=
literal|0.0001f
decl_stmt|;
comment|// Simulate B returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// Now, A should get the scheduling opportunity since A=0G/6G, B=1G/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// Now, B should get the scheduling opportunity
comment|// since A has 2/6G while B has 2/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// Now, B should still get the scheduling opportunity
comment|// since A has 3/6G while B has 4/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// Now, A should get the scheduling opportunity
comment|// since A has 3/6G while B has 8/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
DECL|field|C
specifier|private
specifier|static
specifier|final
name|String
name|C
init|=
literal|"c"
decl_stmt|;
DECL|field|D
specifier|private
specifier|static
specifier|final
name|String
name|D
init|=
literal|"d"
decl_stmt|;
DECL|field|A1
specifier|private
specifier|static
specifier|final
name|String
name|A1
init|=
literal|"a1"
decl_stmt|;
DECL|field|A2
specifier|private
specifier|static
specifier|final
name|String
name|A2
init|=
literal|"a2"
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|String
name|B1
init|=
literal|"b1"
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|String
name|B2
init|=
literal|"b2"
decl_stmt|;
DECL|field|B3
specifier|private
specifier|static
specifier|final
name|String
name|B3
init|=
literal|"b3"
decl_stmt|;
DECL|method|setupMultiLevelQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupMultiLevelQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|,
name|C
block|,
name|D
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|C
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C
argument_list|,
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_D
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|D
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_D
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Define 2-nd level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_A
argument_list|,
operator|new
name|String
index|[]
block|{
name|A1
block|,
name|A2
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
operator|+
literal|"."
operator|+
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
operator|+
literal|"."
operator|+
name|A2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_B
argument_list|,
operator|new
name|String
index|[]
block|{
name|B1
block|,
name|B2
block|,
name|B3
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B3
argument_list|,
literal|70
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiLevelQueues ()
specifier|public
name|void
name|testMultiLevelQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|CapacityScheduler
operator|.
name|queueComparator
argument_list|,
name|CapacityScheduler
operator|.
name|applicationComparator
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|SchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|SchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_2"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|CSQueue
name|a
init|=
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|c
init|=
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|CSQueue
name|d
init|=
name|queues
operator|.
name|get
argument_list|(
name|D
argument_list|)
decl_stmt|;
name|CSQueue
name|a1
init|=
name|queues
operator|.
name|get
argument_list|(
name|A1
argument_list|)
decl_stmt|;
name|CSQueue
name|a2
init|=
name|queues
operator|.
name|get
argument_list|(
name|A2
argument_list|)
decl_stmt|;
name|CSQueue
name|b1
init|=
name|queues
operator|.
name|get
argument_list|(
name|B1
argument_list|)
decl_stmt|;
name|CSQueue
name|b2
init|=
name|queues
operator|.
name|get
argument_list|(
name|B2
argument_list|)
decl_stmt|;
name|CSQueue
name|b3
init|=
name|queues
operator|.
name|get
argument_list|(
name|B3
argument_list|)
decl_stmt|;
specifier|final
name|float
name|delta
init|=
literal|0.0001f
decl_stmt|;
comment|// Simulate C returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|c
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|c
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|d
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|d
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now get B2 to allocate
comment|// A = 0/3, B = 0/15, C = 1/6, D=0/6
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b2
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|c
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|c
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now get both A1, C& B3 to allocate in right order
comment|// A = 0/3, B = 4/15, C = 1/6, D=0/6
name|stubQueueAllocation
argument_list|(
name|a1
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|c
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|c
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now verify max-capacity
comment|// A = 1/3, B = 6/15, C = 3/6, D=0/6
comment|// Ensure a1 won't alloc above max-cap although it should get
comment|// scheduling opportunity now, right after a2
name|LOG
operator|.
name|info
argument_list|(
literal|"here"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ParentQueue
operator|)
name|a
operator|)
operator|.
name|setMaxCapacity
argument_list|(
literal|.1f
argument_list|)
expr_stmt|;
comment|// a should be capped at 3/30
name|stubQueueAllocation
argument_list|(
name|a1
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|// shouldn't be
comment|// allocated due
comment|// to max-cap
name|stubQueueAllocation
argument_list|(
name|a2
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b1
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|a2
argument_list|,
name|a1
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a2
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|c
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|a
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|b
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|b
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUtilization
argument_list|(
name|c
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|c
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

