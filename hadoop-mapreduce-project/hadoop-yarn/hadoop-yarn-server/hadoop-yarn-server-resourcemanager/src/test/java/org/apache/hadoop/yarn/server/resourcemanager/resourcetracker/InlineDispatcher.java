begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.resourcetracker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resourcetracker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|InlineDispatcher
specifier|public
class|class
name|InlineDispatcher
extends|extends
name|AsyncDispatcher
block|{
DECL|class|InlineEventHandler
specifier|private
class|class
name|InlineEventHandler
implements|implements
name|EventHandler
block|{
DECL|field|dispatcher
specifier|private
specifier|final
name|InlineDispatcher
name|dispatcher
decl_stmt|;
DECL|method|InlineEventHandler (InlineDispatcher dispatcher)
specifier|public
name|InlineEventHandler
parameter_list|(
name|InlineDispatcher
name|dispatcher
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispatch (Event event)
specifier|public
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
operator|new
name|InlineEventHandler
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|class|EmptyEventHandler
specifier|static
class|class
name|EmptyEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
empty_stmt|;
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

