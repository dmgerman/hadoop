begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServices
specifier|public
class|class
name|TestRMWebServices
extends|extends
name|JerseyTest
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServices ()
specifier|public
name|TestRMWebServices
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCluster ()
specifier|public
name|void
name|testCluster
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSlash ()
specifier|public
name|void
name|testClusterSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
comment|// test with trailing "/" to make sure acts same as without slash
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfo ()
specifier|public
name|void
name|testInfo
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoSlash ()
specifier|public
name|void
name|testInfoSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
comment|// test with trailing "/" to make sure acts same as without slash
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterInfo (JSONObject json)
specifier|public
name|void
name|verifyClusterInfo
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|clusterinfo
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"clusterInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|9
argument_list|,
name|clusterinfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|clusterid
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"clusterId doesn't match: "
operator|+
name|clusterid
argument_list|,
name|clusterid
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
literal|"^\\d+"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|startedon
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"startedOn"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"startedOn doesn't match: "
operator|+
name|startedon
argument_list|,
name|startedon
operator|.
name|matches
argument_list|(
literal|"^\\d+"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"stated doesn't match: "
operator|+
name|state
argument_list|,
name|state
operator|.
name|matches
argument_list|(
literal|"INITED"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rmVersion
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"resourceManagerVersion"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rm version doesn't match: "
operator|+
name|rmVersion
argument_list|,
name|rmVersion
operator|.
name|matches
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rmBuildVersion
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"resourceManagerBuildVersion"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rm Build version doesn't match: "
operator|+
name|rmBuildVersion
argument_list|,
name|rmBuildVersion
operator|.
name|matches
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rmVersionBuiltOn
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"resourceManagerVersionBuiltOn"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rm version built on doesn't match: "
operator|+
name|rmVersionBuiltOn
argument_list|,
name|rmVersionBuiltOn
operator|.
name|matches
argument_list|(
literal|"^\\w+\\s+\\w+\\s+\\d+\\s+\\d\\d:\\d\\d:\\d\\d\\s+\\w+\\s+\\d\\d\\d\\d"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hadoopVersion
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"hadoopVersion"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hadoop version doesn't match: "
operator|+
name|hadoopVersion
argument_list|,
name|hadoopVersion
operator|.
name|matches
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hadoopBuildVersion
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"hadoopBuildVersion"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hadoop Build version doesn't match: "
operator|+
name|hadoopBuildVersion
argument_list|,
name|hadoopBuildVersion
operator|.
name|matches
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hadoopVersionBuiltOn
init|=
name|clusterinfo
operator|.
name|get
argument_list|(
literal|"hadoopVersionBuiltOn"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hadoop version built on doesn't match: "
operator|+
name|hadoopVersionBuiltOn
argument_list|,
name|hadoopVersionBuiltOn
operator|.
name|matches
argument_list|(
literal|"^\\w+\\s+\\w+\\s+\\d+\\s+\\d\\d:\\d\\d:\\d\\d\\s+\\w+\\s+\\d\\d\\d\\d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetrics ()
specifier|public
name|void
name|testClusterMetrics
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetrics
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetricsSlash ()
specifier|public
name|void
name|testClusterMetricsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetrics
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterMetrics (JSONObject json)
specifier|public
name|void
name|verifyClusterMetrics
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|clusterinfo
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"clusterMetrics"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|11
argument_list|,
name|clusterinfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"appsSubmitted doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"appsSubmitted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reservedMB doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"reservedMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"availableMB doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"availableMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedMB doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"allocatedMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"containersAllocated doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"containersAllocated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"totalMB doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"totalMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"totalNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"totalNodes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lostNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"lostNodes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unhealthyNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"unhealthyNodes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decommissionedNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"decommissionedNodes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebootedNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"rebootedNodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifo ()
specifier|public
name|void
name|testClusterSchedulerFifo
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifoSlash ()
specifier|public
name|void
name|testClusterSchedulerFifoSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterSchedulerFifo (JSONObject json)
specifier|public
name|void
name|verifyClusterSchedulerFifo
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"schedulerInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|11
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type doesn't match"
argument_list|,
literal|"fifoScheduler"
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qstate doesn't match"
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"qstate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
literal|1.0
argument_list|,
name|info
operator|.
name|getDouble
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usedCapacity doesn't match"
argument_list|,
name|Float
operator|.
name|NaN
argument_list|,
name|info
operator|.
name|getDouble
argument_list|(
literal|"usedCapacity"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"minQueueMemoryCapacity doesn't match"
argument_list|,
literal|1024
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"minQueueMemoryCapacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxQueueMemoryCapacity doesn't match"
argument_list|,
literal|10240
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"maxQueueMemoryCapacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxQueueMemoryCapacity doesn't match"
argument_list|,
literal|10240
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"maxQueueMemoryCapacity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodes ()
specifier|public
name|void
name|testNodes
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodesHelper
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesSlash ()
specifier|public
name|void
name|testNodesSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodesHelper
argument_list|(
literal|"nodes/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryState ()
specifier|public
name|void
name|testNodesQueryState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm1
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryStateNone ()
specifier|public
name|void
name|testNodesQueryStateNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryStateInvalid ()
specifier|public
name|void
name|testNodesQueryStateInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"BOGUSSTATE"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception querying invalid state"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"No enum const class org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeState.BOGUSSTATE"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthy ()
specifier|public
name|void
name|testNodesQueryHealthy
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyCase ()
specifier|public
name|void
name|testNodesQueryHealthyCase
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"TRUe"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyAndState ()
specifier|public
name|void
name|testNodesQueryHealthyAndState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|RMNodeImpl
name|node
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeHealthStatus
name|nodeHealth
init|=
name|node
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|nodeHealth
operator|.
name|setHealthReport
argument_list|(
literal|"test health report"
argument_list|)
expr_stmt|;
name|nodeHealth
operator|.
name|setIsNodeHealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeHealth
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyFalse ()
specifier|public
name|void
name|testNodesQueryHealthyFalse
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|NMwaitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodes is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesQueryHealthyInvalid ()
specifier|public
name|void
name|testNodesQueryHealthyInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"healthy"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception querying invalid healthy string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: Error: You must specify either true or false to query on health"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNodesHelper (String path)
specifier|public
name|void
name|testNodesHelper
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|nodes
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|nodeArray
init|=
name|nodes
operator|.
name|getJSONArray
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|nodeArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|info
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
literal|"h1:1234"
argument_list|)
condition|)
block|{
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm1
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|verifyNodeInfo
argument_list|(
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nm2
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm2
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|verifyNodeInfo
argument_list|(
name|nodeArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nm1
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleNode ()
specifier|public
name|void
name|testSingleNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
decl_stmt|;
name|testSingleNodeHelper
argument_list|(
literal|"h2:1235"
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleNodeSlash ()
specifier|public
name|void
name|testSingleNodeSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|testSingleNodeHelper
argument_list|(
literal|"h1:1234/"
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleNodeHelper (String nodeid, MockNM nm)
specifier|public
name|void
name|testSingleNodeHelper
parameter_list|(
name|String
name|nodeid
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
name|nodeid
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|verifyNodeInfo
argument_list|(
name|info
argument_list|,
name|nm
argument_list|,
name|RMNodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonexistNode ()
specifier|public
name|void
name|testNonexistNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid:99"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: nodeId, node_invalid:99, is not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidNode ()
specifier|public
name|void
name|testInvalidNode
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1235"
argument_list|,
literal|5121
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node_invalid_foo"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on non-existent nodeid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"Invalid NodeId \\[node_invalid_foo\\]. Expected host:port"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyNodeInfo (JSONObject nodeInfo, MockNM nm, RMNodeState expectedState)
specifier|public
name|void
name|verifyNodeInfo
parameter_list|(
name|JSONObject
name|nodeInfo
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|RMNodeState
name|expectedState
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|11
argument_list|,
name|nodeInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"stated doesn't match: "
operator|+
name|state
argument_list|,
name|state
operator|.
name|matches
argument_list|(
name|expectedState
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rack
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"rack"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rack doesn't match: "
operator|+
name|rack
argument_list|,
name|rack
operator|.
name|matches
argument_list|(
literal|"/default-rack"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|healthStatus
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"healthStatus"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"healthStatus doesn't match: "
operator|+
name|healthStatus
argument_list|,
name|healthStatus
operator|.
name|matches
argument_list|(
literal|"Healthy"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"id doesn't match, got: "
operator|+
name|id
operator|+
literal|" expected: "
operator|+
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
operator|.
name|matches
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeHostName
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"nodeHostName"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hostname doesn't match, got: "
operator|+
name|nodeHostName
operator|+
literal|" expected: "
operator|+
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeHostName
operator|.
name|matches
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeHTTPAddress
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedHttpAddress
init|=
name|nm
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|nm
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nodeHTTPAddress doesn't match, got: "
operator|+
name|nodeHTTPAddress
operator|+
literal|" expected: "
operator|+
name|expectedHttpAddress
argument_list|,
name|nodeHTTPAddress
operator|.
name|matches
argument_list|(
name|expectedHttpAddress
argument_list|)
argument_list|)
expr_stmt|;
comment|// could use this for other checks
name|RMNode
name|node
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lastHealthUpdate
init|=
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"lastHealthUpdate"
argument_list|)
decl_stmt|;
name|long
name|expectedHealthUpdate
init|=
name|node
operator|.
name|getNodeHealthStatus
argument_list|()
operator|.
name|getLastHealthReportTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lastHealthUpdate doesn't match, got: "
operator|+
name|lastHealthUpdate
operator|+
literal|" expected: "
operator|+
name|expectedHealthUpdate
argument_list|,
name|expectedHealthUpdate
argument_list|,
name|lastHealthUpdate
argument_list|)
expr_stmt|;
name|String
name|healthReport
init|=
name|nodeInfo
operator|.
name|get
argument_list|(
literal|"healthReport"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"healthReport doesn't match: "
operator|+
name|healthReport
argument_list|,
name|healthReport
operator|.
name|matches
argument_list|(
literal|"Healthy"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numContainers
init|=
name|nodeInfo
operator|.
name|getInt
argument_list|(
literal|"numContainers"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match: "
operator|+
name|numContainers
argument_list|,
literal|0
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
name|long
name|usedMemoryMB
init|=
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"usedMemoryMB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"usedMemoryMB doesn't match: "
operator|+
name|usedMemoryMB
argument_list|,
literal|0
argument_list|,
name|usedMemoryMB
argument_list|)
expr_stmt|;
name|long
name|availMemoryMB
init|=
name|nodeInfo
operator|.
name|getLong
argument_list|(
literal|"availMemoryMB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"availMemoryMB doesn't match: "
operator|+
name|availMemoryMB
argument_list|,
literal|0
argument_list|,
name|availMemoryMB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApps ()
specifier|public
name|void
name|testApps
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsSlash ()
specifier|public
name|void
name|testAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps/"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppsHelper (String path, RMApp app)
specifier|public
name|void
name|testAppsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryState ()
specifier|public
name|void
name|testAppsQueryState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStateNone ()
specifier|public
name|void
name|testAppsQueryStateNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|RMAppState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStateInvalid ()
specifier|public
name|void
name|testAppsQueryStateInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"INVALID_test"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid state query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"No enum const class org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppState.INVALID_test"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppsQueryUser ()
specifier|public
name|void
name|testAppsQueryUser
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryQueue ()
specifier|public
name|void
name|testAppsQueryQueue
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"queue"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryLimit ()
specifier|public
name|void
name|testAppsQueryLimit
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"limit"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBegin ()
specifier|public
name|void
name|testAppsQueryStartBegin
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBeginSome ()
specifier|public
name|void
name|testAppsQueryStartBeginSome
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartEnd ()
specifier|public
name|void
name|testAppsQueryStartEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not null"
argument_list|,
name|JSONObject
operator|.
name|NULL
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBeginEnd ()
specifier|public
name|void
name|testAppsQueryStartBeginEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishBegin ()
specifier|public
name|void
name|testAppsQueryFinishBegin
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishEnd ()
specifier|public
name|void
name|testAppsQueryFinishEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishBeginEnd ()
specifier|public
name|void
name|testAppsQueryFinishBeginEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleApp ()
specifier|public
name|void
name|testSingleApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testSingleAppsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppsSlash ()
specifier|public
name|void
name|testSingleAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testSingleAppsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidApp ()
specifier|public
name|void
name|testInvalidApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_invalid_12"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"For input string: \"invalid\""
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NumberFormatException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.NumberFormatException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNonexistApp ()
specifier|public
name|void
name|testNonexistApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_00000_0099"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: app with id: application_00000_0099 not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSingleAppsHelper (String path, RMApp app)
specifier|public
name|void
name|testSingleAppsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppInfo (JSONObject info, RMApp app)
specifier|public
name|void
name|verifyAppInfo
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|RMApp
name|app
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// 15 because trackingUrl not assigned yet
name|assertEquals
argument_list|(
literal|"correct number of elements"
argument_list|,
literal|15
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|expectedId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|expectedId
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|info
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|String
name|expectedUser
init|=
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|checkStringMatch
argument_list|(
literal|"user"
argument_list|,
name|expectedUser
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"name"
argument_list|,
literal|""
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"queue"
argument_list|,
literal|"default"
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"queue"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"finalStatus"
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
operator|.
name|toString
argument_list|()
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"finalStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"progress doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|getDouble
argument_list|(
literal|"progress"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"trackingUI"
argument_list|,
literal|"UNASSIGNED"
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"trackingUI"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"diagnostics"
argument_list|,
literal|""
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"diagnostics"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clusterId doesn't match"
argument_list|,
name|ResourceManager
operator|.
name|clusterTimeStamp
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"clusterId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startedTime doesn't match"
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startedTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"finishedTime doesn't match"
argument_list|,
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"finishedTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"elapsed time not greater than 0"
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"elapsedTime"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"amHostHttpAddress"
argument_list|,
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"amHostHttpAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"amContainerLogs doesn't match"
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"amContainerLogs"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStringMatch (String print, String expected, String got)
specifier|private
name|void
name|checkStringMatch
parameter_list|(
name|String
name|print
parameter_list|,
name|String
name|expected
parameter_list|,
name|String
name|got
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|print
operator|+
literal|" doesn't match, got: "
operator|+
name|got
operator|+
literal|" expected: "
operator|+
name|expected
argument_list|,
name|got
operator|.
name|matches
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

