begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resourcetracker
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppFailedAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRejectedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerAllocatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptLaunchFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRejectedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMAppAttemptTransitions
specifier|public
class|class
name|TestRMAppAttemptTransitions
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMAppAttemptTransitions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_DIAGNOSTICS
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_DIAGNOSTICS
init|=
literal|""
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|scheduler
specifier|private
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|masterService
specifier|private
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|applicationMasterLauncher
specifier|private
name|ApplicationMasterLauncher
name|applicationMasterLauncher
decl_stmt|;
DECL|field|application
specifier|private
name|RMApp
name|application
decl_stmt|;
DECL|field|applicationAttempt
specifier|private
name|RMAppAttempt
name|applicationAttempt
decl_stmt|;
DECL|class|TestApplicationAttemptEventDispatcher
specifier|private
specifier|final
class|class
name|TestApplicationAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appID
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appID
argument_list|)
expr_stmt|;
try|try
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|appID
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// handle all the RM application events - same as in ResourceManager.java
DECL|class|TestApplicationEventDispatcher
specifier|private
specifier|final
class|class
name|TestApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestSchedulerEventDispatcher
specifier|private
specifier|final
class|class
name|TestSchedulerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestAMLauncherEventDispatcher
specifier|private
specifier|final
class|class
name|TestAMLauncherEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|AMLauncherEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (AMLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|AMLauncherEvent
name|event
parameter_list|)
block|{
name|applicationMasterLauncher
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|appId
specifier|private
specifier|static
name|int
name|appId
init|=
literal|1
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|InlineDispatcher
name|rmDispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|ContainerAllocationExpirer
name|containerAllocationExpirer
init|=
name|mock
argument_list|(
name|ContainerAllocationExpirer
operator|.
name|class
argument_list|)
decl_stmt|;
name|AMLivelinessMonitor
name|amLivelinessMonitor
init|=
name|mock
argument_list|(
name|AMLivelinessMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|rmContext
operator|=
operator|new
name|RMContextImpl
argument_list|(
operator|new
name|MemStore
argument_list|()
argument_list|,
name|rmDispatcher
argument_list|,
name|containerAllocationExpirer
argument_list|,
name|amLivelinessMonitor
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|masterService
operator|=
name|mock
argument_list|(
name|ApplicationMasterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|applicationMasterLauncher
operator|=
name|mock
argument_list|(
name|ApplicationMasterLauncher
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationAttemptEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
operator|new
name|TestSchedulerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|AMLauncherEventType
operator|.
name|class
argument_list|,
operator|new
name|TestAMLauncherEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
operator|++
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|MockApps
operator|.
name|newAppAttemptID
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|user
init|=
name|MockApps
operator|.
name|newUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queue
init|=
name|MockApps
operator|.
name|newQueue
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|amContainerSpec
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|amContainerSpec
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|amContainerSpec
argument_list|)
expr_stmt|;
name|application
operator|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|applicationAttemptId
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|testAppAttemptNewState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|this
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#NEW}    */
DECL|method|testAppAttemptNewState ()
specifier|private
name|void
name|testAppAttemptNewState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SUBMITTED}    */
DECL|method|testAppAttemptSubmittedState ()
specifier|private
name|void
name|testAppAttemptSubmittedState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|masterService
argument_list|)
operator|.
name|registerAppAttempt
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|AppAddedSchedulerEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SUBMITTED} -> {@link RMAppAttemptState#FAILED}    */
DECL|method|testAppAttemptSubmittedToFailedState (String diagnostics)
specifier|private
name|void
name|testAppAttemptSubmittedToFailedState
parameter_list|(
name|String
name|diagnostics
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|application
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|RMAppRejectedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#KILLED}    */
DECL|method|testAppAttemptKilledState (Container amContainer, String diagnostics)
specifier|private
name|void
name|testAppAttemptKilledState
parameter_list|(
name|Container
name|amContainer
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SCHEDULED}    */
DECL|method|testAppAttemptScheduledState ()
specifier|private
name|void
name|testAppAttemptScheduledState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|application
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|RMAppEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#ALLOCATED}    */
DECL|method|testAppAttemptAllocatedState (Container amContainer)
specifier|private
name|void
name|testAppAttemptAllocatedState
parameter_list|(
name|Container
name|amContainer
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|applicationMasterLauncher
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|AMLauncherEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#FAILED}    */
DECL|method|testAppAttemptFailedState (Container container, String diagnostics)
specifier|private
name|void
name|testAppAttemptFailedState
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|application
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|RMAppFailedAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|submitApplicationAttempt ()
specifier|private
name|void
name|submitApplicationAttempt
parameter_list|()
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptSubmittedState
argument_list|()
expr_stmt|;
block|}
DECL|method|scheduleApplicationAttempt ()
specifier|private
name|void
name|scheduleApplicationAttempt
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|APP_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptScheduledState
argument_list|()
expr_stmt|;
block|}
DECL|method|allocateApplicationAttempt ()
specifier|private
name|Container
name|allocateApplicationAttempt
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
comment|// Mock the allocation of AM container
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Allocation
name|allocation
init|=
name|mock
argument_list|(
name|Allocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerAllocatedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptAllocatedState
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Test
DECL|method|testNewToKilled ()
specifier|public
name|void
name|testNewToKilled
parameter_list|()
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmittedToFailed ()
specifier|public
name|void
name|testSubmittedToFailed
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Rejected"
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRejectedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptSubmittedToFailedState
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmittedToKilled ()
specifier|public
name|void
name|testSubmittedToKilled
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScheduledToKilled ()
specifier|public
name|void
name|testScheduledToKilled
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocatedToKilled ()
specifier|public
name|void
name|testAllocatedToKilled
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
name|amContainer
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocatedToFailed ()
specifier|public
name|void
name|testAllocatedToFailed
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Launch Failed"
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptLaunchFailedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
name|amContainer
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

