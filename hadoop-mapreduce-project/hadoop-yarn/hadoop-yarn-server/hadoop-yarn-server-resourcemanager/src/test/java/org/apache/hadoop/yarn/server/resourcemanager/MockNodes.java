begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppSchedulingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test helper to generate mock nodes  */
end_comment

begin_class
DECL|class|MockNodes
specifier|public
class|class
name|MockNodes
block|{
DECL|field|NODE_ID
specifier|private
specifier|static
name|int
name|NODE_ID
init|=
literal|0
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|newNodes (int racks, int nodesPerRack, Resource perNode)
specifier|public
specifier|static
name|List
argument_list|<
name|RMNode
argument_list|>
name|newNodes
parameter_list|(
name|int
name|racks
parameter_list|,
name|int
name|nodesPerRack
parameter_list|,
name|Resource
name|perNode
parameter_list|)
block|{
name|List
argument_list|<
name|RMNode
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|racks
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodesPerRack
condition|;
operator|++
name|j
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|newNodeInfo
argument_list|(
name|i
argument_list|,
name|perNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|lostNodes (int racks, int nodesPerRack, Resource perNode)
specifier|public
specifier|static
name|List
argument_list|<
name|RMNode
argument_list|>
name|lostNodes
parameter_list|(
name|int
name|racks
parameter_list|,
name|int
name|nodesPerRack
parameter_list|,
name|Resource
name|perNode
parameter_list|)
block|{
name|List
argument_list|<
name|RMNode
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|racks
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodesPerRack
condition|;
operator|++
name|j
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|lostNodeInfo
argument_list|(
name|i
argument_list|,
name|perNode
argument_list|,
name|RMNodeState
operator|.
name|LOST
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|newNodeID (String host, int port)
specifier|public
specifier|static
name|NodeId
name|newNodeID
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|NodeId
name|nid
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
decl_stmt|;
name|nid
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|nid
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|nid
return|;
block|}
DECL|method|newResource (int mem)
specifier|public
specifier|static
name|Resource
name|newResource
parameter_list|(
name|int
name|mem
parameter_list|)
block|{
name|Resource
name|rs
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rs
operator|.
name|setMemory
argument_list|(
name|mem
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
DECL|method|newUsedResource (Resource total)
specifier|public
specifier|static
name|Resource
name|newUsedResource
parameter_list|(
name|Resource
name|total
parameter_list|)
block|{
name|Resource
name|rs
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rs
operator|.
name|setMemory
argument_list|(
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|total
operator|.
name|getMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
DECL|method|newAvailResource (Resource total, Resource used)
specifier|public
specifier|static
name|Resource
name|newAvailResource
parameter_list|(
name|Resource
name|total
parameter_list|,
name|Resource
name|used
parameter_list|)
block|{
name|Resource
name|rs
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rs
operator|.
name|setMemory
argument_list|(
name|total
operator|.
name|getMemory
argument_list|()
operator|-
name|used
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
DECL|class|MockRMNodeImpl
specifier|private
specifier|static
class|class
name|MockRMNodeImpl
implements|implements
name|RMNode
block|{
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|nodeAddr
specifier|private
name|String
name|nodeAddr
decl_stmt|;
DECL|field|httpAddress
specifier|private
name|String
name|httpAddress
decl_stmt|;
DECL|field|cmdPort
specifier|private
name|int
name|cmdPort
decl_stmt|;
DECL|field|perNode
specifier|private
name|Resource
name|perNode
decl_stmt|;
DECL|field|rackName
specifier|private
name|String
name|rackName
decl_stmt|;
DECL|field|nodeHealthStatus
specifier|private
name|NodeHealthStatus
name|nodeHealthStatus
decl_stmt|;
DECL|field|state
specifier|private
name|RMNodeState
name|state
decl_stmt|;
DECL|method|MockRMNodeImpl (NodeId nodeId, String nodeAddr, String httpAddress, Resource perNode, String rackName, NodeHealthStatus nodeHealthStatus, int cmdPort, String hostName, RMNodeState state)
specifier|public
name|MockRMNodeImpl
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|String
name|nodeAddr
parameter_list|,
name|String
name|httpAddress
parameter_list|,
name|Resource
name|perNode
parameter_list|,
name|String
name|rackName
parameter_list|,
name|NodeHealthStatus
name|nodeHealthStatus
parameter_list|,
name|int
name|cmdPort
parameter_list|,
name|String
name|hostName
parameter_list|,
name|RMNodeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|nodeAddr
operator|=
name|nodeAddr
expr_stmt|;
name|this
operator|.
name|httpAddress
operator|=
name|httpAddress
expr_stmt|;
name|this
operator|.
name|perNode
operator|=
name|perNode
expr_stmt|;
name|this
operator|.
name|rackName
operator|=
name|rackName
expr_stmt|;
name|this
operator|.
name|nodeHealthStatus
operator|=
name|nodeHealthStatus
expr_stmt|;
name|this
operator|.
name|cmdPort
operator|=
name|cmdPort
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeID ()
specifier|public
name|NodeId
name|getNodeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostName
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandPort ()
specifier|public
name|int
name|getCommandPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|cmdPort
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeAddress ()
specifier|public
name|String
name|getNodeAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeAddr
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpAddress ()
specifier|public
name|String
name|getHttpAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|httpAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeHealthStatus ()
specifier|public
name|NodeHealthStatus
name|getNodeHealthStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeHealthStatus
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalCapability ()
specifier|public
name|Resource
name|getTotalCapability
parameter_list|()
block|{
return|return
name|this
operator|.
name|perNode
return|;
block|}
annotation|@
name|Override
DECL|method|getRackName ()
specifier|public
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|this
operator|.
name|rackName
return|;
block|}
annotation|@
name|Override
DECL|method|getNode ()
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|RMNodeState
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|getContainersToCleanUp ()
specifier|public
name|List
argument_list|<
name|ContainerId
argument_list|>
name|getContainersToCleanUp
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAppsToCleanup ()
specifier|public
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getAppsToCleanup
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLastHeartBeatResponse ()
specifier|public
name|HeartbeatResponse
name|getLastHeartBeatResponse
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
empty_stmt|;
DECL|method|buildRMNode (int rack, final Resource perNode, RMNodeState state, String httpAddr)
specifier|private
specifier|static
name|RMNode
name|buildRMNode
parameter_list|(
name|int
name|rack
parameter_list|,
specifier|final
name|Resource
name|perNode
parameter_list|,
name|RMNodeState
name|state
parameter_list|,
name|String
name|httpAddr
parameter_list|)
block|{
specifier|final
name|String
name|rackName
init|=
literal|"rack"
operator|+
name|rack
decl_stmt|;
specifier|final
name|int
name|nid
init|=
name|NODE_ID
operator|++
decl_stmt|;
specifier|final
name|String
name|hostName
init|=
literal|"host"
operator|+
name|nid
decl_stmt|;
specifier|final
name|int
name|port
init|=
literal|123
decl_stmt|;
specifier|final
name|NodeId
name|nodeID
init|=
name|newNodeID
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|)
decl_stmt|;
specifier|final
name|String
name|httpAddress
init|=
name|httpAddr
decl_stmt|;
specifier|final
name|NodeHealthStatus
name|nodeHealthStatus
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHealthStatus
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockRMNodeImpl
argument_list|(
name|nodeID
argument_list|,
name|hostName
argument_list|,
name|httpAddress
argument_list|,
name|perNode
argument_list|,
name|rackName
argument_list|,
name|nodeHealthStatus
argument_list|,
name|nid
argument_list|,
name|hostName
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|method|lostNodeInfo (int rack, final Resource perNode, RMNodeState state)
specifier|public
specifier|static
name|RMNode
name|lostNodeInfo
parameter_list|(
name|int
name|rack
parameter_list|,
specifier|final
name|Resource
name|perNode
parameter_list|,
name|RMNodeState
name|state
parameter_list|)
block|{
return|return
name|buildRMNode
argument_list|(
name|rack
argument_list|,
name|perNode
argument_list|,
name|state
argument_list|,
literal|"N/A"
argument_list|)
return|;
block|}
DECL|method|newNodeInfo (int rack, final Resource perNode)
specifier|public
specifier|static
name|RMNode
name|newNodeInfo
parameter_list|(
name|int
name|rack
parameter_list|,
specifier|final
name|Resource
name|perNode
parameter_list|)
block|{
return|return
name|buildRMNode
argument_list|(
name|rack
argument_list|,
name|perNode
argument_list|,
literal|null
argument_list|,
literal|"localhost:0"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

