begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestLeafQueue
specifier|public
class|class
name|TestLeafQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|cs
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|csConf
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|csContext
name|CapacitySchedulerContext
name|csContext
decl_stmt|;
DECL|field|root
name|Queue
name|root
decl_stmt|;
DECL|field|queues
name|Map
argument_list|<
name|String
argument_list|,
name|Queue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Queue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cs
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|csContext
operator|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|CapacityScheduler
operator|.
name|queueComparator
argument_list|,
name|CapacityScheduler
operator|.
name|applicationComparator
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|csConf
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacityScheduler
operator|.
name|ROOT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacityScheduler
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues a and b"
argument_list|)
expr_stmt|;
block|}
DECL|method|stubLeafQueue (LeafQueue queue)
specifier|private
name|LeafQueue
name|stubLeafQueue
parameter_list|(
name|LeafQueue
name|queue
parameter_list|)
block|{
comment|// Mock some methods for ease in these unit tests
comment|// 1. LeafQueue.createContainer to return dummy containers
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Container
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Container
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|SchedulerApp
name|application
init|=
call|(
name|SchedulerApp
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|containerId
init|=
name|TestUtils
operator|.
name|getMockContainerId
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|TestUtils
operator|.
name|getMockContainer
argument_list|(
name|containerId
argument_list|,
operator|(
call|(
name|SchedulerNode
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
operator|)
operator|.
name|getNodeID
argument_list|()
argument_list|,
call|(
name|Resource
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|createContainer
argument_list|(
name|any
argument_list|(
name|SchedulerApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Stub out LeafQueue.parent.completedContainer
name|Queue
name|parent
init|=
name|queue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|parent
argument_list|)
operator|.
name|completedContainer
argument_list|(
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContainerEventType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleQueueWithOneUser ()
specifier|public
name|void
name|testSingleQueueWithOneUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_0
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_1
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
comment|// same user
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can't allocate 3rd due to user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bump up user-limit-factor, now allocate should work
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// One more should work, for app_1, due to user-limit-factor
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test max-capacity
comment|// Now - no more allocs since we are at max-cap
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release each container from app_0
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_0
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release each container from app_1
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_1
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_1
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQueueWithMultipleUsers ()
specifier|public
name|void
name|testSingleQueueWithMultipleUsers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock the queue
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
specifier|final
name|String
name|user_2
init|=
literal|"user_2"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_0
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_1
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
comment|// same user
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/**       * Start testing...       */
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can't allocate 3rd due to user-limit
name|a
operator|.
name|setUserLimit
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit more apps
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_2
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_2
argument_list|,
name|user_1
argument_list|,
name|A
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_3
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_3
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_3
argument_list|,
name|user_2
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_3
argument_list|,
name|user_2
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|app_2
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_3
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now allocations should goto app_2 since
comment|// user_0 is at limit inspite of high user-limit-factor
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now allocations should goto app_0 since
comment|// user_0 is at user-limit not above it
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test max-capacity
comment|// Now - no more allocs since we are at max-cap
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Revert max-capacity and user-limit-factor
comment|// Now, allocations should goto app_3 since it's under user-limit
name|a
operator|.
name|setMaxCapacity
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we should assign to app_3 again since user_2 is under user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 8. Release each container from app_0
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_0
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9. Release each container from app_2
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_2
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_2
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 10. Release each container from app_3
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_3
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_3
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservation ()
specifier|public
name|void
name|testReservation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_0
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_1
init|=
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_1
argument_list|,
name|user_1
argument_list|,
name|A
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, reservation should kick in for app_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now free 1 container from app_0 i.e. 1G
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now finish another container from app_0 and fulfill the reservation
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalityScheduling ()
specifier|public
name|void
name|testLocalityScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|SchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_2
init|=
literal|"host_2"
decl_stmt|;
name|String
name|rack_2
init|=
literal|"rack_2"
decl_stmt|;
name|SchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_2
argument_list|,
name|rack_2
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests and submit
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
comment|// one extra
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Start with off switch, shouldn't allocate due to delay scheduling
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off switch, shouldn't allocate due to delay scheduling
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off switch, shouldn't allocate due to delay scheduling
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off switch, now we should allocate
comment|// since missedOpportunities=3 and reqdContainers=3
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_0
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 1 more request to check for RACK_LOCAL
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
comment|// one extra
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|host_3
init|=
literal|"host_3"
decl_stmt|;
comment|// on rack_1
name|SchedulerNode
name|node_3
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_3
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_3
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationPriorityScheduling ()
specifier|public
name|void
name|testApplicationPriorityScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|SchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplication
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|SchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|SchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_2
init|=
literal|"host_2"
decl_stmt|;
name|String
name|rack_2
init|=
literal|"rack_2"
decl_stmt|;
name|SchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_2
argument_list|,
name|rack_2
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests and submit
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// P1
name|Priority
name|priority_1
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
comment|// P2
name|Priority
name|priority_2
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|RMNodeImpl
operator|.
name|ANY
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Start with off switch, shouldn't allocate P1 due to delay scheduling
comment|// thus, no P2 either!
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off-switch, shouldn't allocate P1 due to delay scheduling
comment|// thus, no P2 either!
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off-switch, shouldn allocate OFF_SWITCH P1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, DATA_LOCAL for P1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, OFF_SWITCH for P2
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

