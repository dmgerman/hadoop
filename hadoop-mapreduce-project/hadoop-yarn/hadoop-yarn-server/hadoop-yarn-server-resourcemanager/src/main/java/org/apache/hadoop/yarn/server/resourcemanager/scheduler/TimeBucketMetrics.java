begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * Create a set of buckets that hold key-time pairs. When the values of the   * buckets is queried, the number of objects with time differences in the  * different buckets is returned.  */
end_comment

begin_class
DECL|class|TimeBucketMetrics
class|class
name|TimeBucketMetrics
parameter_list|<
name|OBJ
parameter_list|>
block|{
DECL|field|map
specifier|private
specifier|final
name|HashMap
argument_list|<
name|OBJ
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|OBJ
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|counts
specifier|private
specifier|final
name|int
index|[]
name|counts
decl_stmt|;
DECL|field|cuts
specifier|private
specifier|final
name|long
index|[]
name|cuts
decl_stmt|;
comment|/**    * Create a set of buckets based on a set of time points. The number of     * buckets is one more than the number of points.    */
DECL|method|TimeBucketMetrics (long[] cuts)
name|TimeBucketMetrics
parameter_list|(
name|long
index|[]
name|cuts
parameter_list|)
block|{
name|this
operator|.
name|cuts
operator|=
name|cuts
expr_stmt|;
name|counts
operator|=
operator|new
name|int
index|[
name|cuts
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
block|}
comment|/**    * Add an object to be counted    */
DECL|method|add (OBJ key, long time)
specifier|synchronized
name|void
name|add
parameter_list|(
name|OBJ
name|key
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove an object to be counted    */
DECL|method|remove (OBJ key)
specifier|synchronized
name|void
name|remove
parameter_list|(
name|OBJ
name|key
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find the bucket based on the cut points.    */
DECL|method|findBucket (long val)
specifier|private
name|int
name|findBucket
parameter_list|(
name|long
name|val
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cuts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|val
operator|<
name|cuts
index|[
name|i
index|]
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|cuts
operator|.
name|length
return|;
block|}
comment|/**    * Get the counts of how many keys are in each bucket. The same array is    * returned by each call to this method.    */
DECL|method|getBucketCounts (long now)
specifier|synchronized
name|int
index|[]
name|getBucketCounts
parameter_list|(
name|long
name|now
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|counts
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|Long
name|time
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|counts
index|[
name|findBucket
argument_list|(
name|now
operator|-
name|time
argument_list|)
index|]
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
block|}
end_class

end_unit

