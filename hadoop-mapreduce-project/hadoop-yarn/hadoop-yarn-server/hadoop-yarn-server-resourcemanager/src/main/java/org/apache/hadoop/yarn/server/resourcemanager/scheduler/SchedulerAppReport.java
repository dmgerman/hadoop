begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt, and the resources that the attempt is   * using.  */
end_comment

begin_class
annotation|@
name|Evolving
annotation|@
name|LimitedPrivate
argument_list|(
literal|"yarn"
argument_list|)
DECL|class|SchedulerAppReport
specifier|public
class|class
name|SchedulerAppReport
block|{
DECL|field|live
specifier|private
specifier|final
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|live
decl_stmt|;
DECL|field|reserved
specifier|private
specifier|final
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|reserved
decl_stmt|;
DECL|field|pending
specifier|private
specifier|final
name|boolean
name|pending
decl_stmt|;
DECL|method|SchedulerAppReport (SchedulerApplication app)
specifier|public
name|SchedulerAppReport
parameter_list|(
name|SchedulerApplication
name|app
parameter_list|)
block|{
name|this
operator|.
name|live
operator|=
name|app
operator|.
name|getLiveContainers
argument_list|()
expr_stmt|;
name|this
operator|.
name|reserved
operator|=
name|app
operator|.
name|getReservedContainers
argument_list|()
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|app
operator|.
name|isPending
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the list of live containers    * @return All of the live containers    */
DECL|method|getLiveContainers ()
specifier|public
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|getLiveContainers
parameter_list|()
block|{
return|return
name|live
return|;
block|}
comment|/**    * Get the list of reserved containers    * @return All of the reserved containers.    */
DECL|method|getReservedContainers ()
specifier|public
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|getReservedContainers
parameter_list|()
block|{
return|return
name|reserved
return|;
block|}
comment|/**    * Is this application pending?    * @return true if it is else false.    */
DECL|method|isPending ()
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
block|}
end_class

end_unit

