begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LeafQueue
specifier|public
class|class
name|LeafQueue
implements|implements
name|CSQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|queueName
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|parent
specifier|private
name|CSQueue
name|parent
decl_stmt|;
DECL|field|capacity
specifier|private
name|float
name|capacity
decl_stmt|;
DECL|field|absoluteCapacity
specifier|private
name|float
name|absoluteCapacity
decl_stmt|;
DECL|field|maximumCapacity
specifier|private
name|float
name|maximumCapacity
decl_stmt|;
DECL|field|absoluteMaxCapacity
specifier|private
name|float
name|absoluteMaxCapacity
decl_stmt|;
DECL|field|userLimit
specifier|private
name|int
name|userLimit
decl_stmt|;
DECL|field|userLimitFactor
specifier|private
name|float
name|userLimitFactor
decl_stmt|;
DECL|field|maxApplications
specifier|private
name|int
name|maxApplications
decl_stmt|;
DECL|field|maxApplicationsPerUser
specifier|private
name|int
name|maxApplicationsPerUser
decl_stmt|;
DECL|field|maxAMResourcePercent
specifier|private
name|float
name|maxAMResourcePercent
decl_stmt|;
DECL|field|maxActiveApplications
specifier|private
name|int
name|maxActiveApplications
decl_stmt|;
DECL|field|maxActiveApplicationsPerUser
specifier|private
name|int
name|maxActiveApplicationsPerUser
decl_stmt|;
DECL|field|usedResources
specifier|private
name|Resource
name|usedResources
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|utilization
specifier|private
name|float
name|utilization
init|=
literal|0.0f
decl_stmt|;
DECL|field|usedCapacity
specifier|private
name|float
name|usedCapacity
init|=
literal|0.0f
decl_stmt|;
DECL|field|numContainers
specifier|private
specifier|volatile
name|int
name|numContainers
decl_stmt|;
DECL|field|activeApplications
name|Set
argument_list|<
name|SchedulerApp
argument_list|>
name|activeApplications
decl_stmt|;
DECL|field|applicationsMap
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|SchedulerApp
argument_list|>
name|applicationsMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|SchedulerApp
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pendingApplications
name|Set
argument_list|<
name|SchedulerApp
argument_list|>
name|pendingApplications
decl_stmt|;
DECL|field|minimumAllocation
specifier|private
specifier|final
name|Resource
name|minimumAllocation
decl_stmt|;
DECL|field|maximumAllocation
specifier|private
specifier|final
name|Resource
name|maximumAllocation
decl_stmt|;
DECL|field|minimumAllocationFactor
specifier|private
specifier|final
name|float
name|minimumAllocationFactor
decl_stmt|;
DECL|field|containerTokenSecretManager
specifier|private
name|ContainerTokenSecretManager
name|containerTokenSecretManager
decl_stmt|;
DECL|field|users
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
name|users
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|QueueMetrics
name|metrics
decl_stmt|;
DECL|field|queueInfo
specifier|private
name|QueueInfo
name|queueInfo
decl_stmt|;
DECL|field|state
specifier|private
name|QueueState
name|state
decl_stmt|;
DECL|field|acls
specifier|private
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|CapacitySchedulerContext
name|scheduler
decl_stmt|;
DECL|field|DEFAULT_AM_RESOURCE
specifier|final
specifier|static
name|int
name|DEFAULT_AM_RESOURCE
init|=
literal|2
operator|*
literal|1024
decl_stmt|;
DECL|method|LeafQueue (CapacitySchedulerContext cs, String queueName, CSQueue parent, Comparator<SchedulerApp> applicationComparator, CSQueue old)
specifier|public
name|LeafQueue
parameter_list|(
name|CapacitySchedulerContext
name|cs
parameter_list|,
name|String
name|queueName
parameter_list|,
name|CSQueue
name|parent
parameter_list|,
name|Comparator
argument_list|<
name|SchedulerApp
argument_list|>
name|applicationComparator
parameter_list|,
name|CSQueue
name|old
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|cs
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
comment|// must be after parent and queueName are initialized
name|this
operator|.
name|metrics
operator|=
name|old
operator|!=
literal|null
condition|?
name|old
operator|.
name|getMetrics
argument_list|()
else|:
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
name|getQueuePath
argument_list|()
argument_list|,
name|parent
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnableUserMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumAllocation
operator|=
name|cs
operator|.
name|getMinimumResourceCapability
argument_list|()
expr_stmt|;
name|this
operator|.
name|maximumAllocation
operator|=
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
expr_stmt|;
name|this
operator|.
name|minimumAllocationFactor
operator|=
call|(
name|float
call|)
argument_list|(
name|maximumAllocation
operator|.
name|getMemory
argument_list|()
operator|-
name|minimumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|/
name|maximumAllocation
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerTokenSecretManager
operator|=
name|cs
operator|.
name|getContainerTokenSecretManager
argument_list|()
expr_stmt|;
name|float
name|capacity
init|=
operator|(
name|float
operator|)
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
operator|/
literal|100
decl_stmt|;
name|float
name|absoluteCapacity
init|=
name|parent
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|capacity
decl_stmt|;
name|float
name|maximumCapacity
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|absoluteMaxCapacity
init|=
operator|(
name|maximumCapacity
operator|==
name|CapacitySchedulerConfiguration
operator|.
name|UNDEFINED
operator|)
condition|?
name|Float
operator|.
name|MAX_VALUE
else|:
operator|(
name|parent
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|maximumCapacity
operator|)
operator|/
literal|100
decl_stmt|;
name|int
name|userLimit
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUserLimit
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|userLimitFactor
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUserLimitFactor
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxSystemJobs
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|int
name|maxApplications
init|=
call|(
name|int
call|)
argument_list|(
name|maxSystemJobs
operator|*
name|absoluteCapacity
argument_list|)
decl_stmt|;
name|int
name|maxApplicationsPerUser
init|=
call|(
name|int
call|)
argument_list|(
name|maxApplications
operator|*
operator|(
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|userLimitFactor
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxAMResourcePercent
operator|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumApplicationMasterResourcePercent
argument_list|()
expr_stmt|;
name|int
name|maxActiveApplications
init|=
name|computeMaxActiveApplications
argument_list|(
name|cs
operator|.
name|getClusterResources
argument_list|()
argument_list|,
name|maxAMResourcePercent
argument_list|,
name|absoluteCapacity
argument_list|)
decl_stmt|;
name|int
name|maxActiveApplicationsPerUser
init|=
name|computeMaxActiveApplicationsPerUser
argument_list|(
name|maxActiveApplications
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|)
decl_stmt|;
name|this
operator|.
name|queueInfo
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setChildQueues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QueueState
name|state
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getState
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAcls
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
decl_stmt|;
name|setupQueueConfigs
argument_list|(
name|capacity
argument_list|,
name|absoluteCapacity
argument_list|,
name|maximumCapacity
argument_list|,
name|absoluteMaxCapacity
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|,
name|maxApplications
argument_list|,
name|maxApplicationsPerUser
argument_list|,
name|maxActiveApplications
argument_list|,
name|maxActiveApplicationsPerUser
argument_list|,
name|state
argument_list|,
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LeafQueue:"
operator|+
literal|" name="
operator|+
name|queueName
operator|+
literal|", fullname="
operator|+
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pendingApplications
operator|=
operator|new
name|TreeSet
argument_list|<
name|SchedulerApp
argument_list|>
argument_list|(
name|applicationComparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeApplications
operator|=
operator|new
name|TreeSet
argument_list|<
name|SchedulerApp
argument_list|>
argument_list|(
name|applicationComparator
argument_list|)
expr_stmt|;
block|}
DECL|method|computeMaxActiveApplications (Resource clusterResource, float maxAMResourcePercent, float absoluteCapacity)
specifier|private
name|int
name|computeMaxActiveApplications
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|float
name|maxAMResourcePercent
parameter_list|,
name|float
name|absoluteCapacity
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|/
operator|(
name|float
operator|)
name|DEFAULT_AM_RESOURCE
operator|)
operator|*
name|maxAMResourcePercent
operator|*
name|absoluteCapacity
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|computeMaxActiveApplicationsPerUser (int maxActiveApplications, int userLimit, float userLimitFactor)
specifier|private
name|int
name|computeMaxActiveApplicationsPerUser
parameter_list|(
name|int
name|maxActiveApplications
parameter_list|,
name|int
name|userLimit
parameter_list|,
name|float
name|userLimitFactor
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|maxActiveApplications
operator|*
operator|(
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|userLimitFactor
argument_list|)
return|;
block|}
DECL|method|setupQueueConfigs ( float capacity, float absoluteCapacity, float maxCapacity, float absoluteMaxCapacity, int userLimit, float userLimitFactor, int maxApplications, int maxApplicationsPerUser, int maxActiveApplications, int maxActiveApplicationsPerUser, QueueState state, Map<QueueACL, AccessControlList> acls)
specifier|private
specifier|synchronized
name|void
name|setupQueueConfigs
parameter_list|(
name|float
name|capacity
parameter_list|,
name|float
name|absoluteCapacity
parameter_list|,
name|float
name|maxCapacity
parameter_list|,
name|float
name|absoluteMaxCapacity
parameter_list|,
name|int
name|userLimit
parameter_list|,
name|float
name|userLimitFactor
parameter_list|,
name|int
name|maxApplications
parameter_list|,
name|int
name|maxApplicationsPerUser
parameter_list|,
name|int
name|maxActiveApplications
parameter_list|,
name|int
name|maxActiveApplicationsPerUser
parameter_list|,
name|QueueState
name|state
parameter_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|absoluteCapacity
operator|=
name|parent
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|capacity
expr_stmt|;
name|this
operator|.
name|maximumCapacity
operator|=
name|maxCapacity
expr_stmt|;
name|this
operator|.
name|absoluteMaxCapacity
operator|=
name|absoluteMaxCapacity
expr_stmt|;
name|this
operator|.
name|userLimit
operator|=
name|userLimit
expr_stmt|;
name|this
operator|.
name|userLimitFactor
operator|=
name|userLimitFactor
expr_stmt|;
name|this
operator|.
name|maxApplications
operator|=
name|maxApplications
expr_stmt|;
name|this
operator|.
name|maxApplicationsPerUser
operator|=
name|maxApplicationsPerUser
expr_stmt|;
name|this
operator|.
name|maxActiveApplications
operator|=
name|maxActiveApplications
expr_stmt|;
name|this
operator|.
name|maxActiveApplicationsPerUser
operator|=
name|maxActiveApplicationsPerUser
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|acls
operator|=
name|acls
expr_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setMaximumCapacity
argument_list|(
name|maximumCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueInfo
operator|.
name|setQueueState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|StringBuilder
name|aclsString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|e
range|:
name|acls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|aclsString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing "
operator|+
name|queueName
operator|+
literal|", capacity="
operator|+
name|capacity
operator|+
literal|", asboluteCapacity="
operator|+
name|absoluteCapacity
operator|+
literal|", maxCapacity="
operator|+
name|maxCapacity
operator|+
literal|", asboluteMaxCapacity="
operator|+
name|absoluteMaxCapacity
operator|+
literal|", userLimit="
operator|+
name|userLimit
operator|+
literal|", userLimitFactor="
operator|+
name|userLimitFactor
operator|+
literal|", maxApplications="
operator|+
name|maxApplications
operator|+
literal|", maxApplicationsPerUser="
operator|+
name|maxApplicationsPerUser
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|", acls="
operator|+
name|aclsString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCapacity ()
specifier|public
specifier|synchronized
name|float
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
annotation|@
name|Override
DECL|method|getAbsoluteCapacity ()
specifier|public
specifier|synchronized
name|float
name|getAbsoluteCapacity
parameter_list|()
block|{
return|return
name|absoluteCapacity
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumCapacity ()
specifier|public
specifier|synchronized
name|float
name|getMaximumCapacity
parameter_list|()
block|{
return|return
name|maximumCapacity
return|;
block|}
annotation|@
name|Override
DECL|method|getAbsoluteMaximumCapacity ()
specifier|public
specifier|synchronized
name|float
name|getAbsoluteMaximumCapacity
parameter_list|()
block|{
return|return
name|absoluteMaxCapacity
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|CSQueue
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|getQueuePath ()
specifier|public
name|String
name|getQueuePath
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|"."
operator|+
name|getQueueName
argument_list|()
return|;
block|}
comment|/**    * Used only by tests.    */
annotation|@
name|Private
DECL|method|getMinimumAllocation ()
specifier|public
name|Resource
name|getMinimumAllocation
parameter_list|()
block|{
return|return
name|minimumAllocation
return|;
block|}
comment|/**    * Used only by tests.    */
annotation|@
name|Private
DECL|method|getMaximumAllocation ()
specifier|public
name|Resource
name|getMaximumAllocation
parameter_list|()
block|{
return|return
name|maximumAllocation
return|;
block|}
comment|/**    * Used only by tests.    */
annotation|@
name|Private
DECL|method|getMinimumAllocationFactor ()
specifier|public
name|float
name|getMinimumAllocationFactor
parameter_list|()
block|{
return|return
name|minimumAllocationFactor
return|;
block|}
DECL|method|getMaxApplications ()
specifier|public
name|int
name|getMaxApplications
parameter_list|()
block|{
return|return
name|maxApplications
return|;
block|}
DECL|method|getMaxApplicationsPerUser ()
specifier|public
specifier|synchronized
name|int
name|getMaxApplicationsPerUser
parameter_list|()
block|{
return|return
name|maxApplicationsPerUser
return|;
block|}
DECL|method|getMaximumActiveApplications ()
specifier|public
specifier|synchronized
name|int
name|getMaximumActiveApplications
parameter_list|()
block|{
return|return
name|maxActiveApplications
return|;
block|}
DECL|method|getMaximumActiveApplicationsPerUser ()
specifier|public
specifier|synchronized
name|int
name|getMaximumActiveApplicationsPerUser
parameter_list|()
block|{
return|return
name|maxActiveApplicationsPerUser
return|;
block|}
annotation|@
name|Override
DECL|method|getUsedCapacity ()
specifier|public
specifier|synchronized
name|float
name|getUsedCapacity
parameter_list|()
block|{
return|return
name|usedCapacity
return|;
block|}
annotation|@
name|Override
DECL|method|getUsedResources ()
specifier|public
specifier|synchronized
name|Resource
name|getUsedResources
parameter_list|()
block|{
return|return
name|usedResources
return|;
block|}
annotation|@
name|Override
DECL|method|getUtilization ()
specifier|public
specifier|synchronized
name|float
name|getUtilization
parameter_list|()
block|{
return|return
name|utilization
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues ()
specifier|public
name|List
argument_list|<
name|CSQueue
argument_list|>
name|getChildQueues
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setUtilization (float utilization)
specifier|synchronized
name|void
name|setUtilization
parameter_list|(
name|float
name|utilization
parameter_list|)
block|{
name|this
operator|.
name|utilization
operator|=
name|utilization
expr_stmt|;
block|}
DECL|method|setUsedCapacity (float usedCapacity)
specifier|synchronized
name|void
name|setUsedCapacity
parameter_list|(
name|float
name|usedCapacity
parameter_list|)
block|{
name|this
operator|.
name|usedCapacity
operator|=
name|usedCapacity
expr_stmt|;
block|}
comment|/**    * Set maximum capacity - used only for testing.    * @param maximumCapacity new max capacity    */
DECL|method|setMaxCapacity (float maximumCapacity)
specifier|synchronized
name|void
name|setMaxCapacity
parameter_list|(
name|float
name|maximumCapacity
parameter_list|)
block|{
name|this
operator|.
name|maximumCapacity
operator|=
name|maximumCapacity
expr_stmt|;
name|this
operator|.
name|absoluteMaxCapacity
operator|=
operator|(
name|maximumCapacity
operator|==
name|CapacitySchedulerConfiguration
operator|.
name|UNDEFINED
operator|)
condition|?
name|Float
operator|.
name|MAX_VALUE
else|:
operator|(
name|parent
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|maximumCapacity
operator|)
expr_stmt|;
block|}
comment|/**    * Set user limit - used only for testing.    * @param userLimit new user limit    */
DECL|method|setUserLimit (int userLimit)
specifier|synchronized
name|void
name|setUserLimit
parameter_list|(
name|int
name|userLimit
parameter_list|)
block|{
name|this
operator|.
name|userLimit
operator|=
name|userLimit
expr_stmt|;
block|}
comment|/**    * Set user limit factor - used only for testing.    * @param userLimitFactor new user limit factor    */
DECL|method|setUserLimitFactor (int userLimitFactor)
specifier|synchronized
name|void
name|setUserLimitFactor
parameter_list|(
name|int
name|userLimitFactor
parameter_list|)
block|{
name|this
operator|.
name|userLimitFactor
operator|=
name|userLimitFactor
expr_stmt|;
block|}
DECL|method|setParentQueue (CSQueue parent)
specifier|synchronized
name|void
name|setParentQueue
parameter_list|(
name|CSQueue
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumApplications
parameter_list|()
block|{
return|return
name|getNumPendingApplications
argument_list|()
operator|+
name|getNumActiveApplications
argument_list|()
return|;
block|}
DECL|method|getNumPendingApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumPendingApplications
parameter_list|()
block|{
return|return
name|pendingApplications
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumActiveApplications ()
specifier|public
specifier|synchronized
name|int
name|getNumActiveApplications
parameter_list|()
block|{
return|return
name|activeApplications
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getTotalApplications
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumPendingApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumPendingApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getPendingApplications
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getNumActiveApplications (String user)
specifier|public
specifier|synchronized
name|int
name|getNumActiveApplications
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|getUser
argument_list|(
name|user
argument_list|)
operator|.
name|getActiveApplications
argument_list|()
return|;
block|}
DECL|method|getNumContainers ()
specifier|public
specifier|synchronized
name|int
name|getNumContainers
parameter_list|()
block|{
return|return
name|numContainers
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
specifier|synchronized
name|QueueState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Private
DECL|method|getUserLimit ()
specifier|public
specifier|synchronized
name|int
name|getUserLimit
parameter_list|()
block|{
return|return
name|userLimit
return|;
block|}
annotation|@
name|Private
DECL|method|getUserLimitFactor ()
specifier|public
specifier|synchronized
name|float
name|getUserLimitFactor
parameter_list|()
block|{
return|return
name|userLimitFactor
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAcls ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|getQueueAcls
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|(
name|acls
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo ( boolean includeChildQueues, boolean recursive)
specifier|public
specifier|synchronized
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|queueInfo
operator|.
name|setCurrentCapacity
argument_list|(
name|usedCapacity
argument_list|)
expr_stmt|;
return|return
name|queueInfo
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
DECL|method|getQueueUserAclInfo (UserGroupInformation user)
name|getQueueUserAclInfo
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|QueueUserACLInfo
name|userAclInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueACL
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueACL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|e
range|:
name|acls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QueueACL
name|operation
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|acl
operator|.
name|isUserAllowed
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
name|userAclInfo
operator|.
name|setQueueName
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|userAclInfo
operator|.
name|setUserAcls
argument_list|(
name|operations
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|userAclInfo
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|queueName
operator|+
literal|":"
operator|+
name|capacity
operator|+
literal|":"
operator|+
name|absoluteCapacity
operator|+
literal|":"
operator|+
name|getUsedCapacity
argument_list|()
operator|+
literal|":"
operator|+
name|getUtilization
argument_list|()
operator|+
literal|":"
operator|+
name|getNumApplications
argument_list|()
operator|+
literal|":"
operator|+
name|getNumContainers
argument_list|()
return|;
block|}
DECL|method|getUser (String userName)
specifier|private
specifier|synchronized
name|User
name|getUser
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|User
name|user
init|=
name|users
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
operator|new
name|User
argument_list|()
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (CSQueue queue, Resource clusterResource)
specifier|public
specifier|synchronized
name|void
name|reinitialize
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity check
if|if
condition|(
operator|!
operator|(
name|queue
operator|instanceof
name|LeafQueue
operator|)
operator|||
operator|!
name|queue
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to reinitialize "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" from "
operator|+
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|queue
decl_stmt|;
name|setupQueueConfigs
argument_list|(
name|leafQueue
operator|.
name|capacity
argument_list|,
name|leafQueue
operator|.
name|absoluteCapacity
argument_list|,
name|leafQueue
operator|.
name|maximumCapacity
argument_list|,
name|leafQueue
operator|.
name|absoluteMaxCapacity
argument_list|,
name|leafQueue
operator|.
name|userLimit
argument_list|,
name|leafQueue
operator|.
name|userLimitFactor
argument_list|,
name|leafQueue
operator|.
name|maxApplications
argument_list|,
name|leafQueue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|,
name|leafQueue
operator|.
name|getMaximumActiveApplications
argument_list|()
argument_list|,
name|leafQueue
operator|.
name|getMaximumActiveApplicationsPerUser
argument_list|()
argument_list|,
name|leafQueue
operator|.
name|state
argument_list|,
name|leafQueue
operator|.
name|acls
argument_list|)
expr_stmt|;
name|updateResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasAccess (QueueACL acl, UserGroupInformation user)
specifier|public
name|boolean
name|hasAccess
parameter_list|(
name|QueueACL
name|acl
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
comment|// Check if the leaf-queue allows access
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|acls
operator|.
name|get
argument_list|(
name|acl
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// Check if parent-queue allows access
return|return
name|parent
operator|.
name|hasAccess
argument_list|(
name|acl
argument_list|,
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submitApplication (SchedulerApp application, String userName, String queue)
specifier|public
name|void
name|submitApplication
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|AccessControlException
block|{
comment|// Careful! Locking order is important!
comment|// Check queue ACLs
name|UserGroupInformation
name|userUgi
decl_stmt|;
try|try
block|{
name|userUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|userUgi
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" cannot submit"
operator|+
literal|" applications to queue "
operator|+
name|getQueuePath
argument_list|()
argument_list|)
throw|;
block|}
name|User
name|user
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Check if the queue is accepting jobs
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|QueueState
operator|.
name|RUNNING
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" is STOPPED. Cannot accept submission of application: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Check submission limits for queues
if|if
condition|(
name|getNumApplications
argument_list|()
operator|>=
name|getMaxApplications
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" already has "
operator|+
name|getNumApplications
argument_list|()
operator|+
literal|" applications,"
operator|+
literal|" cannot accept submission of application: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Check submission limits for the user on this queue
name|user
operator|=
name|getUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|>=
name|getMaxApplicationsPerUser
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Queue "
operator|+
name|getQueuePath
argument_list|()
operator|+
literal|" already has "
operator|+
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|+
literal|" applications from user "
operator|+
name|userName
operator|+
literal|" cannot accept submission of application: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Add the application to our data-structures
name|addApplication
argument_list|(
name|application
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|submitApp
argument_list|(
name|userName
argument_list|)
expr_stmt|;
comment|// Inform the parent queue
try|try
block|{
name|parent
operator|.
name|submitApplication
argument_list|(
name|application
argument_list|,
name|userName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to submit application to parent-queue: "
operator|+
name|parent
operator|.
name|getQueuePath
argument_list|()
argument_list|,
name|ace
argument_list|)
expr_stmt|;
name|removeApplication
argument_list|(
name|application
argument_list|,
name|user
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
block|}
DECL|method|activateApplications ()
specifier|private
specifier|synchronized
name|void
name|activateApplications
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|SchedulerApp
argument_list|>
name|i
init|=
name|pendingApplications
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulerApp
name|application
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check queue limit
if|if
condition|(
name|getNumActiveApplications
argument_list|()
operator|>=
name|getMaximumActiveApplications
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Check user limit
name|User
name|user
init|=
name|getUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|<
name|getMaximumActiveApplicationsPerUser
argument_list|()
condition|)
block|{
name|user
operator|.
name|activateApplication
argument_list|()
expr_stmt|;
name|activeApplications
operator|.
name|add
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" from user: "
operator|+
name|application
operator|.
name|getUser
argument_list|()
operator|+
literal|" activated in queue: "
operator|+
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addApplication (SchedulerApp application, User user)
specifier|private
specifier|synchronized
name|void
name|addApplication
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|User
name|user
parameter_list|)
block|{
comment|// Accept
name|user
operator|.
name|submitApplication
argument_list|()
expr_stmt|;
name|pendingApplications
operator|.
name|add
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|applicationsMap
operator|.
name|put
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// Activate applications
name|activateApplications
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application added -"
operator|+
literal|" appId: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" user: "
operator|+
name|user
operator|+
literal|","
operator|+
literal|" leaf-queue: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" #user-pending-applications: "
operator|+
name|user
operator|.
name|getPendingApplications
argument_list|()
operator|+
literal|" #user-active-applications: "
operator|+
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|+
literal|" #queue-pending-applications: "
operator|+
name|getNumPendingApplications
argument_list|()
operator|+
literal|" #queue-active-applications: "
operator|+
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishApplication (SchedulerApp application, String queue)
specifier|public
name|void
name|finishApplication
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|removeApplication
argument_list|(
name|application
argument_list|,
name|getUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Inform the parent queue
name|parent
operator|.
name|finishApplication
argument_list|(
name|application
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApplication (SchedulerApp application, User user)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|activeApplications
operator|.
name|remove
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|applicationsMap
operator|.
name|remove
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|finishApplication
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getTotalApplications
argument_list|()
operator|==
literal|0
condition|)
block|{
name|users
operator|.
name|remove
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check if we can activate more applications
name|activateApplications
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application removed -"
operator|+
literal|" appId: "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" user: "
operator|+
name|application
operator|.
name|getUser
argument_list|()
operator|+
literal|" queue: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" #user-pending-applications: "
operator|+
name|user
operator|.
name|getPendingApplications
argument_list|()
operator|+
literal|" #user-active-applications: "
operator|+
name|user
operator|.
name|getActiveApplications
argument_list|()
operator|+
literal|" #queue-pending-applications: "
operator|+
name|getNumPendingApplications
argument_list|()
operator|+
literal|" #queue-active-applications: "
operator|+
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplication ( ApplicationAttemptId applicationAttemptId)
specifier|private
specifier|synchronized
name|SchedulerApp
name|getApplication
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
return|return
name|applicationsMap
operator|.
name|get
argument_list|(
name|applicationAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Resource
DECL|method|assignContainers (Resource clusterResource, SchedulerNode node)
name|assignContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|" #applications="
operator|+
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check for reserved resources
name|RMContainer
name|reservedContainer
init|=
name|node
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
name|SchedulerApp
name|application
init|=
name|getApplication
argument_list|(
name|reservedContainer
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assignReservedContainer
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|reservedContainer
argument_list|,
name|clusterResource
argument_list|)
return|;
block|}
comment|// Try to assign containers to applications in order
for|for
control|(
name|SchedulerApp
name|application
range|:
name|activeApplications
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-assignContainers for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|application
init|)
block|{
name|computeAndSetUserResourceLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
for|for
control|(
name|Priority
name|priority
range|:
name|application
operator|.
name|getPriorities
argument_list|()
control|)
block|{
comment|// Required resource
name|Resource
name|required
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|RMNode
operator|.
name|ANY
argument_list|)
operator|.
name|getCapability
argument_list|()
decl_stmt|;
comment|// Do we need containers at this 'priority'?
if|if
condition|(
operator|!
name|needContainers
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|required
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Are we going over limits by allocating to this application?
comment|// Maximum Capacity of the queue
if|if
condition|(
operator|!
name|assignToQueue
argument_list|(
name|clusterResource
argument_list|,
name|required
argument_list|)
condition|)
block|{
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// User limits
name|Resource
name|userLimit
init|=
name|computeUserLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|required
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|assignToUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|userLimit
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// Inform the application it is about to get a scheduling opportunity
name|application
operator|.
name|addSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
comment|// Try to schedule
name|Resource
name|assigned
init|=
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Did we schedule or reserve a container?
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|Resource
name|assignedResource
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|RMNode
operator|.
name|ANY
argument_list|)
operator|.
name|getCapability
argument_list|()
decl_stmt|;
comment|// Book-keeping
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|assignedResource
argument_list|)
expr_stmt|;
comment|// Reset scheduling opportunities
name|application
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
comment|// Done
return|return
name|assignedResource
return|;
block|}
else|else
block|{
comment|// Do not assign out of order w.r.t priorities
break|break;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"post-assignContainers for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|showRequests
argument_list|()
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|assignReservedContainer (SchedulerApp application, SchedulerNode node, RMContainer rmContainer, Resource clusterResource)
specifier|private
specifier|synchronized
name|Resource
name|assignReservedContainer
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
comment|// Do we still need this reservation?
name|Priority
name|priority
init|=
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|application
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Release
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|UNRESERVED_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|RELEASED
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getResource
argument_list|()
return|;
block|}
comment|// Try to assign if we have sufficient resources
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Doesn't matter... since it's already charged for at time of reservation
comment|// "re-reservation" is *free*
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resource
operator|.
name|NONE
return|;
block|}
DECL|method|assignToQueue (Resource clusterResource, Resource required)
specifier|private
specifier|synchronized
name|boolean
name|assignToQueue
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
comment|// Check how of the cluster's absolute capacity we are currently using...
name|float
name|potentialNewCapacity
init|=
call|(
name|float
call|)
argument_list|(
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|+
name|required
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|/
name|clusterResource
operator|.
name|getMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|potentialNewCapacity
operator|>
name|absoluteMaxCapacity
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|" usedResources: "
operator|+
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|+
literal|" currentCapacity "
operator|+
operator|(
operator|(
name|float
operator|)
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|)
operator|/
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|+
literal|" required "
operator|+
name|required
operator|.
name|getMemory
argument_list|()
operator|+
literal|" potentialNewCapacity: "
operator|+
name|potentialNewCapacity
operator|+
literal|" ( "
operator|+
literal|"> max-capacity ("
operator|+
name|absoluteMaxCapacity
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|computeAndSetUserResourceLimit (SchedulerApp application, Resource clusterResource)
specifier|private
name|void
name|computeAndSetUserResourceLimit
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|Resource
name|userLimit
init|=
name|computeUserLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
name|application
operator|.
name|setAvailableResourceLimit
argument_list|(
name|userLimit
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|roundUp (int memory)
specifier|private
name|int
name|roundUp
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
return|return
name|divideAndCeil
argument_list|(
name|memory
argument_list|,
name|minimumAllocation
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|*
name|minimumAllocation
operator|.
name|getMemory
argument_list|()
return|;
block|}
DECL|method|computeUserLimit (SchedulerApp application, Resource clusterResource, Resource required)
specifier|private
name|Resource
name|computeUserLimit
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
comment|// What is our current capacity?
comment|// * It is equal to the max(required, queue-capacity) if
comment|//   we're running below capacity. The 'max' ensures that jobs in queues
comment|//   with miniscule capacity (< 1 slot) make progress
comment|// * If we're running over capacity, then its
comment|//   (usedResources + required) (which extra resources we are allocating)
comment|// Allow progress for queues with miniscule capacity
specifier|final
name|int
name|queueCapacity
init|=
name|Math
operator|.
name|max
argument_list|(
name|roundUp
argument_list|(
call|(
name|int
call|)
argument_list|(
name|absoluteCapacity
operator|*
name|clusterResource
operator|.
name|getMemory
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|required
operator|.
name|getMemory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|consumed
init|=
name|usedResources
operator|.
name|getMemory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|currentCapacity
init|=
operator|(
name|consumed
operator|<
name|queueCapacity
operator|)
condition|?
name|queueCapacity
else|:
operator|(
name|consumed
operator|+
name|required
operator|.
name|getMemory
argument_list|()
operator|)
decl_stmt|;
comment|// Never allow a single user to take more than the
comment|// queue's configured capacity * user-limit-factor.
comment|// Also, the queue's configured capacity should be higher than
comment|// queue-hard-limit * ulMin
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
specifier|final
name|int
name|activeUsers
init|=
name|users
operator|.
name|size
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|roundUp
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|divideAndCeil
argument_list|(
name|currentCapacity
argument_list|,
name|activeUsers
argument_list|)
argument_list|,
name|divideAndCeil
argument_list|(
operator|(
name|int
operator|)
name|userLimit
operator|*
name|currentCapacity
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|queueCapacity
operator|*
name|userLimitFactor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User limit computation for "
operator|+
name|userName
operator|+
literal|" in queue "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" userLimit="
operator|+
name|userLimit
operator|+
literal|" userLimitFactor="
operator|+
name|userLimitFactor
operator|+
literal|" required: "
operator|+
name|required
operator|+
literal|" consumed: "
operator|+
name|user
operator|.
name|getConsumedResources
argument_list|()
operator|+
literal|" limit: "
operator|+
name|limit
operator|+
literal|" queueCapacity: "
operator|+
name|queueCapacity
operator|+
literal|" qconsumed: "
operator|+
name|consumed
operator|+
literal|" currentCapacity: "
operator|+
name|currentCapacity
operator|+
literal|" activeUsers: "
operator|+
name|activeUsers
operator|+
literal|" clusterCapacity: "
operator|+
name|clusterResource
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|limit
argument_list|)
return|;
block|}
DECL|method|assignToUser (String userName, Resource limit)
specifier|private
specifier|synchronized
name|boolean
name|assignToUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|Resource
name|limit
parameter_list|)
block|{
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
comment|// Note: We aren't considering the current request since there is a fixed
comment|// overhead of the AM, but it's a>= check, so...
if|if
condition|(
operator|(
name|user
operator|.
name|getConsumedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|)
operator|>
name|limit
operator|.
name|getMemory
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" in queue "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|" will exceed limit - "
operator|+
literal|" consumed: "
operator|+
name|user
operator|.
name|getConsumedResources
argument_list|()
operator|+
literal|" limit: "
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|divideAndCeil (int a, int b)
specifier|private
specifier|static
name|int
name|divideAndCeil
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"divideAndCeil called with a="
operator|+
name|a
operator|+
literal|" b="
operator|+
name|b
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
operator|(
name|a
operator|+
operator|(
name|b
operator|-
literal|1
operator|)
operator|)
operator|/
name|b
return|;
block|}
DECL|method|needContainers (SchedulerApp application, Priority priority, Resource required)
name|boolean
name|needContainers
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|int
name|requiredContainers
init|=
name|application
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|reservedContainers
init|=
name|application
operator|.
name|getNumReservedContainers
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|starvation
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|>
literal|0
condition|)
block|{
name|float
name|nodeFactor
init|=
operator|(
operator|(
name|float
operator|)
name|required
operator|.
name|getMemory
argument_list|()
operator|/
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|)
decl_stmt|;
comment|// Use percentage of node required to bias against large containers...
comment|// Protect against corner case where you need the whole node with
comment|// Math.min(nodeFactor, minimumAllocationFactor)
name|starvation
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|application
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|/
operator|(
name|float
operator|)
name|reservedContainers
operator|)
operator|*
operator|(
literal|1.0f
operator|-
operator|(
name|Math
operator|.
name|min
argument_list|(
name|nodeFactor
argument_list|,
name|getMinimumAllocationFactor
argument_list|()
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"needsContainers:"
operator|+
literal|" app.#re-reserve="
operator|+
name|application
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|+
literal|" reserved="
operator|+
name|reservedContainers
operator|+
literal|" nodeFactor="
operator|+
name|nodeFactor
operator|+
literal|" minAllocFactor="
operator|+
name|minimumAllocationFactor
operator|+
literal|" starvation="
operator|+
name|starvation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|(
operator|(
name|starvation
operator|+
name|requiredContainers
operator|)
operator|-
name|reservedContainers
operator|)
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|assignContainersOnNode (Resource clusterResource, SchedulerNode node, SchedulerApp application, Priority priority, RMContainer reservedContainer)
specifier|private
name|Resource
name|assignContainersOnNode
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|Resource
name|assigned
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
comment|// Data-local
name|assigned
operator|=
name|assignNodeLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|assigned
return|;
block|}
comment|// Rack-local
name|assigned
operator|=
name|assignRackLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|assigned
return|;
block|}
comment|// Off-switch
return|return
name|assignOffSwitchContainers
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|)
return|;
block|}
DECL|method|assignNodeLocalContainers (Resource clusterResource, SchedulerNode node, SchedulerApp application, Priority priority, RMContainer reservedContainer)
specifier|private
name|Resource
name|assignNodeLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
return|;
block|}
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|assignRackLocalContainers (Resource clusterResource, SchedulerNode node, SchedulerApp application, Priority priority, RMContainer reservedContainer)
specifier|private
name|Resource
name|assignRackLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
return|;
block|}
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|assignOffSwitchContainers (Resource clusterResource, SchedulerNode node, SchedulerApp application, Priority priority, RMContainer reservedContainer)
specifier|private
name|Resource
name|assignOffSwitchContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|RMNode
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|application
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|)
return|;
block|}
block|}
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|canAssign (SchedulerApp application, Priority priority, SchedulerNode node, NodeType type, RMContainer reservedContainer)
name|boolean
name|canAssign
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Reserved...
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Clearly we need containers for this application...
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
comment|// 'Delay' off-switch
name|ResourceRequest
name|offSwitchRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|RMNode
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|long
name|missedOpportunities
init|=
name|application
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|long
name|requiredContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|float
name|localityWaitFactor
init|=
name|application
operator|.
name|getLocalityWaitFactor
argument_list|(
name|priority
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|requiredContainers
operator|*
name|localityWaitFactor
operator|)
operator|<
name|missedOpportunities
operator|)
return|;
block|}
comment|// Check if we need containers on this rack
name|ResourceRequest
name|rackLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalRequest
operator|==
literal|null
operator|||
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If we are here, we do need containers on this rack for RACK_LOCAL req
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check if we need containers on this host
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
comment|// Now check if we need containers on this host...
name|ResourceRequest
name|nodeLocalRequest
init|=
name|application
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getContainer (RMContainer rmContainer, SchedulerApp application, SchedulerNode node, Resource capability, Priority priority)
specifier|private
name|Container
name|getContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
return|return
operator|(
name|rmContainer
operator|!=
literal|null
operator|)
condition|?
name|rmContainer
operator|.
name|getContainer
argument_list|()
else|:
name|createContainer
argument_list|(
name|application
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|createContainer (SchedulerApp application, SchedulerNode node, Resource capability, Priority priority)
specifier|public
name|Container
name|createContainer
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerToken
name|containerToken
init|=
literal|null
decl_stmt|;
comment|// If security is enabled, send the container-tokens too.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|ContainerTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|containerId
argument_list|,
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|containerToken
operator|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|nodeId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokenSecretManager
operator|.
name|createPassword
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|)
argument_list|,
name|tokenIdentifier
argument_list|)
expr_stmt|;
block|}
comment|// Create the container
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
DECL|method|assignContainer (Resource clusterResource, SchedulerNode node, SchedulerApp application, Priority priority, ResourceRequest request, NodeType type, RMContainer rmContainer)
specifier|private
name|Resource
name|assignContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" request="
operator|+
name|request
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Resource
name|capability
init|=
name|request
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|available
operator|.
name|getMemory
argument_list|()
operator|>
literal|0
operator|)
assert|;
comment|// Create the container if necessary
name|Container
name|container
init|=
name|getContainer
argument_list|(
name|rmContainer
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// Can we allocate a container on this node?
name|int
name|availableContainers
init|=
name|available
operator|.
name|getMemory
argument_list|()
operator|/
name|capability
operator|.
name|getMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableContainers
operator|>
literal|0
condition|)
block|{
comment|// Allocate...
comment|// Did we previously reserve containers at this 'priority'?
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|unreserve
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
comment|// Inform the application
name|RMContainer
name|allocatedContainer
init|=
name|application
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocatedContainer
operator|==
literal|null
condition|)
block|{
comment|// Did the application need this resource?
return|return
name|Resources
operator|.
name|none
argument_list|()
return|;
block|}
comment|// Inform the node
name|node
operator|.
name|allocateContainer
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|allocatedContainer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"assignedContainer"
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|+
literal|" containerId="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" queue="
operator|+
name|this
operator|+
literal|" util="
operator|+
name|getUtilization
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
comment|// Reserve by 'charging' in advance...
name|reserve
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reserved container "
operator|+
literal|" application="
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" resource="
operator|+
name|request
operator|.
name|getCapability
argument_list|()
operator|+
literal|" queue="
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" util="
operator|+
name|getUtilization
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|getCapability
argument_list|()
return|;
block|}
block|}
DECL|method|reserve (SchedulerApp application, Priority priority, SchedulerNode node, RMContainer rmContainer, Container container)
specifier|private
name|void
name|reserve
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update reserved metrics if this is the first reservation
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|getMetrics
argument_list|()
operator|.
name|reserveResource
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Inform the application
name|rmContainer
operator|=
name|application
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// Update the node
name|node
operator|.
name|reserveResource
argument_list|(
name|application
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
DECL|method|unreserve (SchedulerApp application, Priority priority, SchedulerNode node, RMContainer rmContainer)
specifier|private
name|void
name|unreserve
parameter_list|(
name|SchedulerApp
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
comment|// Done with the reservation?
name|application
operator|.
name|unreserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|node
operator|.
name|unreserveResource
argument_list|(
name|application
argument_list|)
expr_stmt|;
comment|// Update reserved metrics
name|getMetrics
argument_list|()
operator|.
name|unreserveResource
argument_list|(
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completedContainer (Resource clusterResource, SchedulerApp application, SchedulerNode node, RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event)
specifier|public
name|void
name|completedContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|)
block|{
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Inform the application& the node
comment|// Note: It's safe to assume that all state changes to RMContainer
comment|// happen under scheduler's lock...
comment|// So, this is, in effect, a transaction across application& node
if|if
condition|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
condition|)
block|{
name|application
operator|.
name|unreserve
argument_list|(
name|node
argument_list|,
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|unreserveResource
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|application
operator|.
name|containerCompleted
argument_list|(
name|rmContainer
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|node
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|// Book-keeping
name|releaseResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"completedContainer"
operator|+
literal|" container="
operator|+
name|container
operator|+
literal|" resource="
operator|+
name|container
operator|.
name|getResource
argument_list|()
operator|+
literal|" queue="
operator|+
name|this
operator|+
literal|" util="
operator|+
name|getUtilization
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
block|}
comment|// Inform the parent queue
name|parent
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|allocateResource (Resource clusterResource, SchedulerApp application, Resource resource)
specifier|synchronized
name|void
name|allocateResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
comment|// Update queue metrics
name|Resources
operator|.
name|addTo
argument_list|(
name|usedResources
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|updateResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
operator|++
name|numContainers
expr_stmt|;
comment|// Update user metrics
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|user
operator|.
name|assignContainer
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|userName
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" numContainers="
operator|+
name|numContainers
operator|+
literal|" user="
operator|+
name|userName
operator|+
literal|" resources="
operator|+
name|user
operator|.
name|getConsumedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|releaseResource (Resource clusterResource, SchedulerApp application, Resource resource)
specifier|synchronized
name|void
name|releaseResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
comment|// Update queue metrics
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|usedResources
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|updateResource
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
operator|--
name|numContainers
expr_stmt|;
comment|// Update user metrics
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|user
operator|.
name|releaseContainer
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToUser
argument_list|(
name|userName
argument_list|,
name|application
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|" used="
operator|+
name|usedResources
operator|+
literal|" numContainers="
operator|+
name|numContainers
operator|+
literal|" user="
operator|+
name|userName
operator|+
literal|" resources="
operator|+
name|user
operator|.
name|getConsumedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateClusterResource (Resource clusterResource)
specifier|public
specifier|synchronized
name|void
name|updateClusterResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
comment|// Update queue properties
name|maxActiveApplications
operator|=
name|computeMaxActiveApplications
argument_list|(
name|clusterResource
argument_list|,
name|maxAMResourcePercent
argument_list|,
name|absoluteCapacity
argument_list|)
expr_stmt|;
name|maxActiveApplicationsPerUser
operator|=
name|computeMaxActiveApplicationsPerUser
argument_list|(
name|maxActiveApplications
argument_list|,
name|userLimit
argument_list|,
name|userLimitFactor
argument_list|)
expr_stmt|;
comment|// Update application properties
for|for
control|(
name|SchedulerApp
name|application
range|:
name|activeApplications
control|)
block|{
name|computeAndSetUserResourceLimit
argument_list|(
name|application
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateResource (Resource clusterResource)
specifier|private
specifier|synchronized
name|void
name|updateResource
parameter_list|(
name|Resource
name|clusterResource
parameter_list|)
block|{
name|float
name|queueLimit
init|=
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|absoluteCapacity
decl_stmt|;
name|setUtilization
argument_list|(
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|/
name|queueLimit
argument_list|)
expr_stmt|;
name|setUsedCapacity
argument_list|(
name|usedResources
operator|.
name|getMemory
argument_list|()
operator|/
operator|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|capacity
operator|)
argument_list|)
expr_stmt|;
name|Resource
name|resourceLimit
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|roundUp
argument_list|(
operator|(
name|int
operator|)
name|queueLimit
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|resourceLimit
argument_list|,
name|usedResources
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|QueueMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|class|User
specifier|static
class|class
name|User
block|{
DECL|field|consumed
name|Resource
name|consumed
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|pendingApplications
name|int
name|pendingApplications
init|=
literal|0
decl_stmt|;
DECL|field|activeApplications
name|int
name|activeApplications
init|=
literal|0
decl_stmt|;
DECL|method|getConsumedResources ()
specifier|public
name|Resource
name|getConsumedResources
parameter_list|()
block|{
return|return
name|consumed
return|;
block|}
DECL|method|getPendingApplications ()
specifier|public
name|int
name|getPendingApplications
parameter_list|()
block|{
return|return
name|pendingApplications
return|;
block|}
DECL|method|getActiveApplications ()
specifier|public
name|int
name|getActiveApplications
parameter_list|()
block|{
return|return
name|activeApplications
return|;
block|}
DECL|method|getTotalApplications ()
specifier|public
name|int
name|getTotalApplications
parameter_list|()
block|{
return|return
name|getPendingApplications
argument_list|()
operator|+
name|getActiveApplications
argument_list|()
return|;
block|}
DECL|method|submitApplication ()
specifier|public
specifier|synchronized
name|void
name|submitApplication
parameter_list|()
block|{
operator|++
name|pendingApplications
expr_stmt|;
block|}
DECL|method|activateApplication ()
specifier|public
specifier|synchronized
name|void
name|activateApplication
parameter_list|()
block|{
operator|--
name|pendingApplications
expr_stmt|;
operator|++
name|activeApplications
expr_stmt|;
block|}
DECL|method|finishApplication ()
specifier|public
specifier|synchronized
name|void
name|finishApplication
parameter_list|()
block|{
operator|--
name|activeApplications
expr_stmt|;
block|}
DECL|method|assignContainer (Resource resource)
specifier|public
specifier|synchronized
name|void
name|assignContainer
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|consumed
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
DECL|method|releaseContainer (Resource resource)
specifier|public
specifier|synchronized
name|void
name|releaseContainer
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|consumed
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recoverContainer (Resource clusterResource, SchedulerApp application, Container container)
specifier|public
name|void
name|recoverContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|SchedulerApp
name|application
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Careful! Locking order is important!
synchronized|synchronized
init|(
name|this
init|)
block|{
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|recoverContainer
argument_list|(
name|clusterResource
argument_list|,
name|application
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

