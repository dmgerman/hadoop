begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationMasterPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|NodeIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|NodeReportPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationMasterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationSubmissionContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_class
DECL|class|ZKStore
specifier|public
class|class
name|ZKStore
implements|implements
name|Store
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|ZooKeeper
name|zkClient
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|NODES
specifier|private
specifier|static
specifier|final
name|String
name|NODES
init|=
literal|"nodes/"
decl_stmt|;
DECL|field|APPS
specifier|private
specifier|static
specifier|final
name|String
name|APPS
init|=
literal|"apps/"
decl_stmt|;
DECL|field|ZK_PATH_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ID
init|=
literal|"nodeid"
decl_stmt|;
DECL|field|APP_MASTER
specifier|private
specifier|static
specifier|final
name|String
name|APP_MASTER
init|=
literal|"master"
decl_stmt|;
DECL|field|APP_MASTER_CONTAINER
specifier|private
specifier|static
specifier|final
name|String
name|APP_MASTER_CONTAINER
init|=
literal|"mastercontainer"
decl_stmt|;
DECL|field|ZK_ADDRESS
specifier|private
specifier|final
name|String
name|ZK_ADDRESS
decl_stmt|;
DECL|field|ZK_TIMEOUT
specifier|private
specifier|final
name|int
name|ZK_TIMEOUT
decl_stmt|;
DECL|field|doneWithRecovery
specifier|private
name|boolean
name|doneWithRecovery
init|=
literal|false
decl_stmt|;
comment|/** TODO make this generic **/
DECL|field|nodeId
specifier|private
name|NodeIdPBImpl
name|nodeId
init|=
operator|new
name|NodeIdPBImpl
argument_list|()
decl_stmt|;
comment|/**    * TODO fix this for later to handle all kinds of events     * of connection and session events.    *    */
DECL|class|ZKWatcher
specifier|private
specifier|static
class|class
name|ZKWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
DECL|method|process (WatchedEvent arg0)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|arg0
parameter_list|)
block|{     }
block|}
DECL|method|ZKStore (Configuration conf)
specifier|public
name|ZKStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|ZK_ADDRESS
operator|=
name|conf
operator|.
name|get
argument_list|(
name|RMConfig
operator|.
name|ZK_ADDRESS
argument_list|)
expr_stmt|;
name|this
operator|.
name|ZK_TIMEOUT
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|RMConfig
operator|.
name|ZK_SESSION_TIMEOUT
argument_list|,
name|RMConfig
operator|.
name|DEFAULT_ZK_TIMEOUT
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|this
operator|.
name|ZK_ADDRESS
argument_list|,
name|this
operator|.
name|ZK_TIMEOUT
argument_list|,
name|createZKWatcher
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: FIXMEVinodkv
comment|//    this.nodeId.setId(0);
block|}
DECL|method|createZKWatcher ()
specifier|protected
name|Watcher
name|createZKWatcher
parameter_list|()
block|{
return|return
operator|new
name|ZKWatcher
argument_list|()
return|;
block|}
DECL|method|createNodeManagerInfo (RMNode rmNode)
specifier|private
name|NodeReportPBImpl
name|createNodeManagerInfo
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
name|NodeReport
name|node
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|node
operator|.
name|setNodeId
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setRackName
argument_list|(
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setCapability
argument_list|(
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: FIXME
comment|//    node.setUsed(nodeInfo.getUsedResource());
comment|// TODO: acm: refactor2 FIXME
comment|//  node.setNumContainers(rmNode.getNumContainers());
return|return
operator|(
name|NodeReportPBImpl
operator|)
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|storeNode (RMNode node)
specifier|public
specifier|synchronized
name|void
name|storeNode
parameter_list|(
name|RMNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{
comment|/** create a storage node and store it in zk **/
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
name|NodeReportPBImpl
name|nodeManagerInfo
init|=
name|createNodeManagerInfo
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// TODO FinBugs - will be fixed after the subsequent fixme
name|byte
index|[]
name|bytes
init|=
name|nodeManagerInfo
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// TODO: FIXMEVinodkv
comment|//    try {
comment|//      zkClient.create(NODES + Integer.toString(node.getNodeID().getId()), bytes, null,
comment|//          CreateMode.PERSISTENT);
comment|//    } catch(InterruptedException ie) {
comment|//      LOG.info("Interrupted", ie);
comment|//      throw new InterruptedIOException("Interrupted");
comment|//    } catch(KeeperException ke) {
comment|//      LOG.info("Keeper exception", ke);
comment|//      throw convertToIOException(ke);
comment|//    }
block|}
annotation|@
name|Override
DECL|method|removeNode (RMNode node)
specifier|public
specifier|synchronized
name|void
name|removeNode
parameter_list|(
name|RMNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
comment|//    TODO: FIXME VINODKV
comment|//    /** remove a storage node **/
comment|//    try {
comment|//      zkClient.delete(NODES + Integer.toString(node.getNodeID().getId()), -1);
comment|//    } catch(InterruptedException ie) {
comment|//      LOG.info("Interrupted", ie);
comment|//      throw new InterruptedIOException("Interrupted");
comment|//    } catch(KeeperException ke) {
comment|//      LOG.info("Keeper exception", ke);
comment|//      throw convertToIOException(ke);
comment|//    }
block|}
DECL|method|convertToIOException (KeeperException ke)
specifier|private
specifier|static
name|IOException
name|convertToIOException
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|io
operator|.
name|setStackTrace
argument_list|(
name|ke
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|io
return|;
block|}
annotation|@
name|Override
DECL|method|getNextNodeId ()
specifier|public
specifier|synchronized
name|NodeId
name|getNextNodeId
parameter_list|()
throws|throws
name|IOException
block|{
comment|//    TODO: FIXME VINODKV
comment|//    int num = nodeId.getId();
comment|//    num++;
comment|//    nodeId.setId(num);
comment|//    try {
comment|//      zkClient.setData(NODES + NODE_ID, nodeId.getProto().toByteArray() , -1);
comment|//    } catch(InterruptedException ie) {
comment|//      LOG.info("Interrupted", ie);
comment|//      throw new InterruptedIOException(ie.getMessage());
comment|//    } catch(KeeperException ke) {
comment|//      throw convertToIOException(ke);
comment|//    }
return|return
name|nodeId
return|;
block|}
DECL|method|containerPathFromContainerId (ContainerId containerId)
specifier|private
name|String
name|containerPathFromContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|String
name|appString
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|appString
operator|+
literal|"/"
operator|+
name|containerId
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|class|ZKApplicationStore
specifier|private
class|class
name|ZKApplicationStore
implements|implements
name|ApplicationStore
block|{
DECL|field|applicationId
specifier|private
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|method|ZKApplicationStore (ApplicationId applicationId)
specifier|public
name|ZKApplicationStore
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeMasterContainer (Container container)
specifier|public
name|void
name|storeMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
name|ContainerPBImpl
name|containerPBImpl
init|=
operator|(
name|ContainerPBImpl
operator|)
name|container
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|APPS
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|+
name|ZK_PATH_SEPARATOR
operator|+
name|APP_MASTER_CONTAINER
argument_list|,
name|containerPBImpl
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainer (Container container)
specifier|public
specifier|synchronized
name|void
name|storeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
name|ContainerPBImpl
name|containerPBImpl
init|=
operator|(
name|ContainerPBImpl
operator|)
name|container
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|APPS
operator|+
name|containerPathFromContainerId
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|containerPBImpl
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainer (Container container)
specifier|public
specifier|synchronized
name|void
name|removeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|APPS
operator|+
name|containerPathFromContainerId
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateApplicationState ( ApplicationMaster master)
specifier|public
name|void
name|updateApplicationState
parameter_list|(
name|ApplicationMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
name|String
name|appString
init|=
name|APPS
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationMasterPBImpl
name|masterPBImpl
init|=
operator|(
name|ApplicationMasterPBImpl
operator|)
name|master
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|appString
argument_list|,
name|masterPBImpl
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLoggable ()
specifier|public
name|boolean
name|isLoggable
parameter_list|()
block|{
return|return
name|doneWithRecovery
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createApplicationStore (ApplicationId application, ApplicationSubmissionContext context)
specifier|public
specifier|synchronized
name|ApplicationStore
name|createApplicationStore
parameter_list|(
name|ApplicationId
name|application
parameter_list|,
name|ApplicationSubmissionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return
operator|new
name|ZKApplicationStore
argument_list|(
name|application
argument_list|)
return|;
name|ApplicationSubmissionContextPBImpl
name|contextPBImpl
init|=
operator|(
name|ApplicationSubmissionContextPBImpl
operator|)
name|context
decl_stmt|;
name|String
name|appString
init|=
name|APPS
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|ApplicationMasterPBImpl
name|masterPBImpl
init|=
operator|new
name|ApplicationMasterPBImpl
argument_list|()
decl_stmt|;
name|ContainerPBImpl
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|appString
argument_list|,
name|contextPBImpl
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|create
argument_list|(
name|appString
operator|+
name|ZK_PATH_SEPARATOR
operator|+
name|APP_MASTER
argument_list|,
name|masterPBImpl
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|create
argument_list|(
name|appString
operator|+
name|ZK_PATH_SEPARATOR
operator|+
name|APP_MASTER_CONTAINER
argument_list|,
name|container
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
return|return
operator|new
name|ZKApplicationStore
argument_list|(
name|application
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId application)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|application
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|doneWithRecovery
condition|)
return|return;
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|APPS
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper Exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLoggable ()
specifier|public
name|boolean
name|isLoggable
parameter_list|()
block|{
return|return
name|doneWithRecovery
return|;
block|}
annotation|@
name|Override
DECL|method|doneWithRecovery ()
specifier|public
name|void
name|doneWithRecovery
parameter_list|()
block|{
name|this
operator|.
name|doneWithRecovery
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|restore ()
specifier|public
specifier|synchronized
name|RMState
name|restore
parameter_list|()
throws|throws
name|IOException
block|{
name|ZKRMState
name|rmState
init|=
operator|new
name|ZKRMState
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|class|ApplicationInfoImpl
specifier|private
specifier|static
class|class
name|ApplicationInfoImpl
implements|implements
name|ApplicationInfo
block|{
DECL|field|master
specifier|private
name|ApplicationMaster
name|master
decl_stmt|;
DECL|field|masterContainer
specifier|private
name|Container
name|masterContainer
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|ApplicationSubmissionContext
name|context
decl_stmt|;
DECL|field|containers
specifier|private
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ApplicationInfoImpl (ApplicationSubmissionContext context)
specifier|public
name|ApplicationInfoImpl
parameter_list|(
name|ApplicationSubmissionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|setApplicationMaster (ApplicationMaster master)
specifier|public
name|void
name|setApplicationMaster
parameter_list|(
name|ApplicationMaster
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
block|}
DECL|method|setMasterContainer (Container container)
specifier|public
name|void
name|setMasterContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|this
operator|.
name|masterContainer
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationMaster ()
specifier|public
name|ApplicationMaster
name|getApplicationMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|master
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationSubmissionContext ()
specifier|public
name|ApplicationSubmissionContext
name|getApplicationSubmissionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|getMasterContainer ()
specifier|public
name|Container
name|getMasterContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterContainer
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|containers
return|;
block|}
DECL|method|addContainer (Container container)
specifier|public
name|void
name|addContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|containers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ZKRMState
specifier|private
class|class
name|ZKRMState
implements|implements
name|RMState
block|{
DECL|field|nodeManagers
specifier|private
name|List
argument_list|<
name|RMNode
argument_list|>
name|nodeManagers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|applications
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationInfo
argument_list|>
name|applications
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ZKRMState ()
specifier|public
name|ZKRMState
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring RM state from ZK"
argument_list|)
expr_stmt|;
block|}
DECL|method|listStoredNodes ()
specifier|private
specifier|synchronized
name|List
argument_list|<
name|NodeReport
argument_list|>
name|listStoredNodes
parameter_list|()
throws|throws
name|IOException
block|{
comment|/** get the list of nodes stored in zk **/
comment|//TODO PB
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|NODES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|NODES
operator|+
name|child
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|NodeReportPBImpl
name|nmImpl
init|=
operator|new
name|NodeReportPBImpl
argument_list|(
name|NodeReportProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nmImpl
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to list nodes"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
DECL|method|getStoredNodeManagers ()
specifier|public
name|List
argument_list|<
name|RMNode
argument_list|>
name|getStoredNodeManagers
parameter_list|()
block|{
return|return
name|nodeManagers
return|;
block|}
annotation|@
name|Override
DECL|method|getLastLoggedNodeId ()
specifier|public
name|NodeId
name|getLastLoggedNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|readLastNodeId ()
specifier|private
name|void
name|readLastNodeId
parameter_list|()
throws|throws
name|IOException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|NODES
operator|+
name|NODE_ID
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|nodeId
operator|=
operator|new
name|NodeIdPBImpl
argument_list|(
name|NodeIdProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeper Exception"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
DECL|method|getAppInfo (String app)
specifier|private
name|ApplicationInfo
name|getAppInfo
parameter_list|(
name|String
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationInfoImpl
name|info
init|=
literal|null
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationSubmissionContext
name|context
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|APPS
operator|+
name|app
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|(
name|ApplicationSubmissionContextProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|ApplicationInfoImpl
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|APPS
operator|+
name|app
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|ApplicationMaster
name|master
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|byte
index|[]
name|childdata
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|APPS
operator|+
name|app
operator|+
name|ZK_PATH_SEPARATOR
operator|+
name|child
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|APP_MASTER
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|master
operator|=
operator|new
name|ApplicationMasterPBImpl
argument_list|(
name|ApplicationMasterProto
operator|.
name|parseFrom
argument_list|(
name|childdata
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setApplicationMaster
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|APP_MASTER_CONTAINER
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|Container
name|masterContainer
init|=
operator|new
name|ContainerPBImpl
argument_list|(
name|ContainerProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|setMasterContainer
argument_list|(
name|masterContainer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|(
name|ContainerProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
return|return
name|info
return|;
block|}
DECL|method|load ()
specifier|private
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeInfos
init|=
name|listStoredNodes
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|trackerPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*:.*"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|m
init|=
name|trackerPattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeReport
name|node
range|:
name|nodeInfos
control|)
block|{
name|m
operator|.
name|reset
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping node, bad node-address "
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|hostName
init|=
name|m
operator|.
name|group
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|cmPort
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|.
name|reset
argument_list|(
name|node
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping node, bad http-address "
operator|+
name|node
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|httpPort
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: FindBugs Valid. Fix
name|RMNode
name|nm
init|=
operator|new
name|RMNodeImpl
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|hostName
argument_list|,
name|cmPort
argument_list|,
name|httpPort
argument_list|,
name|ResourceTrackerService
operator|.
name|resolve
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|node
operator|.
name|getCapability
argument_list|()
argument_list|)
decl_stmt|;
name|nodeManagers
operator|.
name|add
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
name|readLastNodeId
argument_list|()
expr_stmt|;
comment|/* make sure we get all the applications */
name|List
argument_list|<
name|String
argument_list|>
name|apps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|apps
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|APPS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
name|convertToIOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|app
range|:
name|apps
control|)
block|{
name|ApplicationInfo
name|info
init|=
name|getAppInfo
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|info
operator|.
name|getApplicationMaster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStoredApplications ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationInfo
argument_list|>
name|getStoredApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
block|}
block|}
end_class

end_unit

