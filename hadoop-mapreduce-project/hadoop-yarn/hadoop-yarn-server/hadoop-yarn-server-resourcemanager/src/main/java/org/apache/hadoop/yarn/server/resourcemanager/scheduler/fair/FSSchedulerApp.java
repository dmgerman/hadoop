begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|ApplicationsStore
operator|.
name|ApplicationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_comment
comment|/**  * This class extends the application lifecycle management contained with  * the {@link SchedulerApp} class and adds delay-scheduling information  * specific to the FairScheduler.  */
end_comment

begin_class
DECL|class|FSSchedulerApp
specifier|public
class|class
name|FSSchedulerApp
extends|extends
name|SchedulerApp
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Delay scheduling: We often want to prioritize scheduling of node-local    * containers over rack-local or off-switch containers. To acheive this    * we first only allow node-local assigments for a given prioirty level,    * then relax the locality threshold once we've had a long enough period    * without succesfully scheduling. We measure both the number of "missed"    * scheduling opportunities since the last container was scheduled    * at the current allowed level and the time since the last container    * was scheduled. Currently we use only the former.    */
comment|// Current locality threshold
DECL|field|allowedLocalityLevel
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
name|allowedLocalityLevel
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
comment|// Time of the last container scheduled at the current allowed level
DECL|field|lastScheduledContainer
name|Map
argument_list|<
name|Priority
argument_list|,
name|Long
argument_list|>
name|lastScheduledContainer
init|=
operator|new
name|HashMap
argument_list|<
name|Priority
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FSSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, RMContext rmContext, ApplicationStore store)
specifier|public
name|FSSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|ApplicationStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
comment|/**    * Should be called when an application has successfully scheduled a container,    * or when the scheduling locality threshold is relaxed.    * Reset various internal counters which affect delay scheduling    *    * @param priority The priority of the container scheduled.    */
DECL|method|resetSchedulingOpportunities (Priority priority)
specifier|synchronized
specifier|public
name|void
name|resetSchedulingOpportunities
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|lastScheduledContainer
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the level at which we are allowed to schedule containers, given the    * current size of the cluster and thresholds indicating how many nodes to    * fail at (as a fraction of cluster size) before relaxing scheduling    * constraints.    */
DECL|method|getAllowedLocalityLevel (Priority priority, int numNodes, double nodeLocalityThreshold, double rackLocalityThreshold)
specifier|public
specifier|synchronized
name|NodeType
name|getAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|double
name|nodeLocalityThreshold
parameter_list|,
name|double
name|rackLocalityThreshold
parameter_list|)
block|{
comment|// upper limit on threshold
if|if
condition|(
name|nodeLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|nodeLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
name|rackLocalityThreshold
operator|>
literal|1.0
condition|)
block|{
name|rackLocalityThreshold
operator|=
literal|1.0
expr_stmt|;
block|}
comment|// If delay scheduling is not being used, can schedule anywhere
if|if
condition|(
name|nodeLocalityThreshold
operator|<
literal|0.0
operator|||
name|rackLocalityThreshold
operator|<
literal|0.0
condition|)
block|{
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
block|}
comment|// Default level is NODE_LOCAL
if|if
condition|(
operator|!
name|allowedLocalityLevel
operator|.
name|containsKey
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|NodeType
operator|.
name|NODE_LOCAL
return|;
block|}
name|NodeType
name|allowed
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
comment|// If level is already most liberal, we're done
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
condition|)
return|return
name|NodeType
operator|.
name|OFF_SWITCH
return|;
name|double
name|threshold
init|=
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|?
name|nodeLocalityThreshold
else|:
name|rackLocalityThreshold
decl_stmt|;
comment|// Relax locality constraints once we've surpassed threshold.
if|if
condition|(
name|this
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
operator|>
operator|(
name|numNodes
operator|*
name|threshold
operator|)
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
condition|)
block|{
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
return|;
block|}
DECL|method|allocate (NodeType type, SchedulerNode node, Priority priority, ResourceRequest request, Container container)
specifier|synchronized
specifier|public
name|RMContainer
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|SchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update allowed locality level
name|NodeType
name|allowed
init|=
name|this
operator|.
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
condition|)
block|{
name|this
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|priority
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
return|;
block|}
comment|/**    * Should be called when the scheduler assigns a container at a higher    * degree of locality than the current threshold. Reset the allowed locality    * level to a higher degree of locality.    */
DECL|method|resetAllowedLocalityLevel (Priority priority, NodeType level)
specifier|public
specifier|synchronized
name|void
name|resetAllowedLocalityLevel
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|NodeType
name|level
parameter_list|)
block|{
name|NodeType
name|old
init|=
name|allowedLocalityLevel
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Raising locality level from "
operator|+
name|old
operator|+
literal|" to "
operator|+
name|level
operator|+
literal|" at "
operator|+
literal|" priority "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|allowedLocalityLevel
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

