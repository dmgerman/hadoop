begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ApplicationACLsManager
specifier|public
class|class
name|ApplicationACLsManager
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|ApplicationACLsManager (Configuration conf)
specifier|public
name|ApplicationACLsManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|areACLsEnabled ()
specifier|public
name|boolean
name|areACLsEnabled
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ACL_ENABLE
argument_list|)
return|;
block|}
comment|/**    * Construct the ApplicationACLs from the configuration so that they can be kept in    * the memory. If authorization is disabled on the RM, nothing is constructed    * and an empty map is returned.    *     * @return ApplicationACL to AccessControlList map.    */
DECL|method|constructApplicationACLs ( Configuration conf)
specifier|public
name|Map
argument_list|<
name|ApplicationACL
argument_list|,
name|AccessControlList
argument_list|>
name|constructApplicationACLs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
comment|// Don't construct anything if authorization is disabled.
if|if
condition|(
operator|!
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return
name|acls
return|;
block|}
for|for
control|(
name|ApplicationACL
name|aclName
range|:
name|ApplicationACL
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|aclConfigName
init|=
name|aclName
operator|.
name|getAclName
argument_list|()
decl_stmt|;
name|String
name|aclConfigured
init|=
name|conf
operator|.
name|get
argument_list|(
name|aclConfigName
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclConfigured
operator|==
literal|null
condition|)
block|{
comment|// If ACLs are not configured at all, we grant no access to anyone. So
comment|// applicationOwner and superuser/supergroup _only_ can do 'stuff'
name|aclConfigured
operator|=
literal|" "
expr_stmt|;
block|}
name|acls
operator|.
name|put
argument_list|(
name|aclName
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|aclConfigured
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|acls
return|;
block|}
comment|/**    * If authorization is enabled, checks whether the user (in the callerUGI)    * is authorized to perform the operation specified by 'applicationOperation' on    * the application by checking if the user is applicationOwner or part of application ACL for the    * specific application operation.    *<ul>    *<li>The owner of the application can do any operation on the application</li>    *<li>For all other users/groups application-acls are checked</li>    *</ul>    * @param callerUGI    * @param applicationOperation    * @param applicationOwner    * @param acl    * @throws AccessControlException    */
DECL|method|checkAccess (UserGroupInformation callerUGI, ApplicationACL applicationOperation, String applicationOwner, AccessControlList acl)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|ApplicationACL
name|applicationOperation
parameter_list|,
name|String
name|applicationOwner
parameter_list|,
name|AccessControlList
name|acl
parameter_list|)
block|{
name|String
name|user
init|=
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow application-owner for any operation on the application
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|applicationOwner
argument_list|)
operator|||
name|acl
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

