begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebApp
operator|.
name|APP_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebApp
operator|.
name|QUEUE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ResponseInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|// Do NOT rename/refactor this to RMView as it will wreak havoc
end_comment

begin_comment
comment|// on Mac OS HFS as its case-insensitive!
end_comment

begin_class
DECL|class|RmController
specifier|public
class|class
name|RmController
extends|extends
name|Controller
block|{
DECL|method|RmController (RequestContext ctx)
annotation|@
name|Inject
name|RmController
parameter_list|(
name|RequestContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|index ()
annotation|@
name|Override
specifier|public
name|void
name|index
parameter_list|()
block|{
name|setTitle
argument_list|(
literal|"Applications"
argument_list|)
expr_stmt|;
block|}
DECL|method|about ()
specifier|public
name|void
name|about
parameter_list|()
block|{
name|setTitle
argument_list|(
literal|"About the Cluster"
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|AboutPage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|app ()
specifier|public
name|void
name|app
parameter_list|()
block|{
name|String
name|aid
init|=
name|$
argument_list|(
name|APP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|aid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"Bad request: requires application ID"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationId
name|appID
init|=
name|Apps
operator|.
name|toAppID
argument_list|(
name|aid
argument_list|)
decl_stmt|;
name|RMContext
name|context
init|=
name|getInstance
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|context
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
comment|// TODO: handle redirect to jobhistory server
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"Application not found: "
operator|+
name|aid
argument_list|)
expr_stmt|;
return|return;
block|}
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Application "
argument_list|,
name|aid
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|trackingUrl
init|=
name|app
operator|.
name|getTrackingUrl
argument_list|()
decl_stmt|;
name|boolean
name|trackingUrlIsNotReady
init|=
name|trackingUrl
operator|==
literal|null
operator|||
name|trackingUrl
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"N/A"
operator|.
name|equalsIgnoreCase
argument_list|(
name|trackingUrl
argument_list|)
decl_stmt|;
name|String
name|ui
init|=
name|trackingUrlIsNotReady
condition|?
literal|"UNASSIGNED"
else|:
operator|(
name|app
operator|.
name|getFinishTime
argument_list|()
operator|==
literal|0
condition|?
literal|"ApplicationMaster"
else|:
literal|"History"
operator|)
decl_stmt|;
name|ResponseInfo
name|info
init|=
name|info
argument_list|(
literal|"Application Overview"
argument_list|)
operator|.
name|_
argument_list|(
literal|"User:"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Name:"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"State:"
argument_list|,
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"FinalStatus:"
argument_list|,
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Started:"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Elapsed:"
argument_list|,
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|Times
operator|.
name|elapsed
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Tracking URL:"
argument_list|,
name|trackingUrlIsNotReady
condition|?
literal|"#"
else|:
name|join
argument_list|(
literal|"http://"
argument_list|,
name|trackingUrl
argument_list|)
argument_list|,
name|ui
argument_list|)
operator|.
name|_
argument_list|(
literal|"Diagnostics:"
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|masterContainer
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterContainer
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|join
argument_list|(
literal|"http://"
argument_list|,
name|masterContainer
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
literal|"/node"
argument_list|,
literal|"/containerlogs/"
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|masterContainer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|_
argument_list|(
literal|"AM container logs:"
argument_list|,
name|url
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|_
argument_list|(
literal|"AM container logs:"
argument_list|,
literal|"AM not yet registered with RM"
argument_list|)
expr_stmt|;
block|}
name|render
argument_list|(
name|AboutPage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|nodes ()
specifier|public
name|void
name|nodes
parameter_list|()
block|{
name|render
argument_list|(
name|NodesPage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|scheduler ()
specifier|public
name|void
name|scheduler
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|getInstance
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
operator|||
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|setTitle
argument_list|(
literal|"Capacity Scheduler"
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|CapacitySchedulerPage
operator|.
name|class
argument_list|)
expr_stmt|;
return|return;
block|}
name|setTitle
argument_list|(
literal|"Default Scheduler"
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|DefaultSchedulerPage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|queue ()
specifier|public
name|void
name|queue
parameter_list|()
block|{
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Queue "
argument_list|,
name|get
argument_list|(
name|QUEUE_NAME
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|submit ()
specifier|public
name|void
name|submit
parameter_list|()
block|{
name|setTitle
argument_list|(
literal|"Application Submission Not Allowed"
argument_list|)
expr_stmt|;
block|}
DECL|method|json ()
specifier|public
name|void
name|json
parameter_list|()
block|{
name|renderJSON
argument_list|(
name|AppsList
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

