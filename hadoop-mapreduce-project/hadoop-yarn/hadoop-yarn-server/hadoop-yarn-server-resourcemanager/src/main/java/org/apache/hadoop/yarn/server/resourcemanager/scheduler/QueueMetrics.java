begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"yarn"
argument_list|)
DECL|class|QueueMetrics
specifier|public
class|class
name|QueueMetrics
block|{
DECL|field|appsSubmitted
annotation|@
name|Metric
argument_list|(
literal|"# of apps submitted"
argument_list|)
name|MutableCounterInt
name|appsSubmitted
decl_stmt|;
DECL|field|appsRunning
annotation|@
name|Metric
argument_list|(
literal|"# of running apps"
argument_list|)
name|MutableGaugeInt
name|appsRunning
decl_stmt|;
DECL|field|appsPending
annotation|@
name|Metric
argument_list|(
literal|"# of pending apps"
argument_list|)
name|MutableGaugeInt
name|appsPending
decl_stmt|;
DECL|field|appsCompleted
annotation|@
name|Metric
argument_list|(
literal|"# of apps completed"
argument_list|)
name|MutableCounterInt
name|appsCompleted
decl_stmt|;
DECL|field|appsKilled
annotation|@
name|Metric
argument_list|(
literal|"# of apps killed"
argument_list|)
name|MutableCounterInt
name|appsKilled
decl_stmt|;
DECL|field|appsFailed
annotation|@
name|Metric
argument_list|(
literal|"# of apps failed"
argument_list|)
name|MutableCounterInt
name|appsFailed
decl_stmt|;
DECL|field|allocatedGB
annotation|@
name|Metric
argument_list|(
literal|"Allocated memory in GiB"
argument_list|)
name|MutableGaugeInt
name|allocatedGB
decl_stmt|;
DECL|field|allocatedContainers
annotation|@
name|Metric
argument_list|(
literal|"# of allocated containers"
argument_list|)
name|MutableGaugeInt
name|allocatedContainers
decl_stmt|;
DECL|field|availableGB
annotation|@
name|Metric
argument_list|(
literal|"Available memory in GiB"
argument_list|)
name|MutableGaugeInt
name|availableGB
decl_stmt|;
DECL|field|pendingGB
annotation|@
name|Metric
argument_list|(
literal|"Pending memory allocation in GiB"
argument_list|)
name|MutableGaugeInt
name|pendingGB
decl_stmt|;
DECL|field|pendingContainers
annotation|@
name|Metric
argument_list|(
literal|"# of pending containers"
argument_list|)
name|MutableGaugeInt
name|pendingContainers
decl_stmt|;
DECL|field|reservedGB
annotation|@
name|Metric
argument_list|(
literal|"# of reserved memory in GiB"
argument_list|)
name|MutableGaugeInt
name|reservedGB
decl_stmt|;
DECL|field|reservedContainers
annotation|@
name|Metric
argument_list|(
literal|"# of reserved containers"
argument_list|)
name|MutableGaugeInt
name|reservedContainers
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
comment|// resource.memory is in MB
DECL|field|RECORD_INFO
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"QueueMetrics"
argument_list|,
literal|"Metrics for the resource scheduler"
argument_list|)
decl_stmt|;
DECL|field|QUEUE_INFO
specifier|static
specifier|final
name|MetricsInfo
name|QUEUE_INFO
init|=
name|info
argument_list|(
literal|"Queue"
argument_list|,
literal|"Metrics by queue"
argument_list|)
decl_stmt|;
DECL|field|USER_INFO
specifier|static
specifier|final
name|MetricsInfo
name|USER_INFO
init|=
name|info
argument_list|(
literal|"User"
argument_list|,
literal|"Metrics by user"
argument_list|)
decl_stmt|;
DECL|field|Q_SPLITTER
specifier|static
specifier|final
name|Splitter
name|Q_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|field|queueName
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|parent
specifier|final
name|QueueMetrics
name|parent
decl_stmt|;
DECL|field|metricsSystem
specifier|final
name|MetricsSystem
name|metricsSystem
decl_stmt|;
DECL|field|users
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|QueueMetrics
argument_list|>
name|users
decl_stmt|;
DECL|method|QueueMetrics (MetricsSystem ms, String queueName, Queue parent, boolean enableUserMetrics)
name|QueueMetrics
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Queue
name|parent
parameter_list|,
name|boolean
name|enableUserMetrics
parameter_list|)
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|RECORD_INFO
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|getMetrics
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|users
operator|=
name|enableUserMetrics
condition|?
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueMetrics
argument_list|>
argument_list|()
else|:
literal|null
expr_stmt|;
name|metricsSystem
operator|=
name|ms
expr_stmt|;
block|}
DECL|method|tag (MetricsInfo info, String value)
name|QueueMetrics
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|registry
operator|.
name|tag
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sourceName (String queueName)
specifier|static
name|StringBuilder
name|sourceName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|RECORD_INFO
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|Q_SPLITTER
operator|.
name|split
argument_list|(
name|queueName
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",q"
argument_list|)
operator|.
name|append
argument_list|(
name|i
operator|++
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
specifier|public
specifier|synchronized
DECL|method|forQueue (String queueName, Queue parent, boolean enableUserMetrics)
specifier|static
name|QueueMetrics
name|forQueue
parameter_list|(
name|String
name|queueName
parameter_list|,
name|Queue
name|parent
parameter_list|,
name|boolean
name|enableUserMetrics
parameter_list|)
block|{
return|return
name|forQueue
argument_list|(
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|enableUserMetrics
argument_list|)
return|;
block|}
DECL|method|forQueue (MetricsSystem ms, String queueName, Queue parent, boolean enableUserMetrics)
specifier|public
specifier|static
name|QueueMetrics
name|forQueue
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|String
name|queueName
parameter_list|,
name|Queue
name|parent
parameter_list|,
name|boolean
name|enableUserMetrics
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
operator|new
name|QueueMetrics
argument_list|(
name|ms
argument_list|,
name|queueName
argument_list|,
name|parent
argument_list|,
name|enableUserMetrics
argument_list|)
operator|.
name|tag
argument_list|(
name|QUEUE_INFO
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
return|return
name|ms
operator|==
literal|null
condition|?
name|metrics
else|:
name|ms
operator|.
name|register
argument_list|(
name|sourceName
argument_list|(
name|queueName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Metrics for queue: "
operator|+
name|queueName
argument_list|,
name|metrics
argument_list|)
return|;
block|}
DECL|method|getUserMetrics (String userName)
specifier|synchronized
name|QueueMetrics
name|getUserMetrics
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
name|users
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueueMetrics
name|metrics
init|=
name|users
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|metrics
operator|=
operator|new
name|QueueMetrics
argument_list|(
name|metricsSystem
argument_list|,
name|queueName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|metricsSystem
operator|.
name|register
argument_list|(
name|sourceName
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|",user="
argument_list|)
operator|.
name|append
argument_list|(
name|userName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Metrics for user '"
operator|+
name|userName
operator|+
literal|"' in queue '"
operator|+
name|queueName
operator|+
literal|"'"
argument_list|,
name|metrics
operator|.
name|tag
argument_list|(
name|QUEUE_INFO
argument_list|,
name|queueName
argument_list|)
operator|.
name|tag
argument_list|(
name|USER_INFO
argument_list|,
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
DECL|method|submitApp (String user)
specifier|public
name|void
name|submitApp
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|appsSubmitted
operator|.
name|incr
argument_list|()
expr_stmt|;
name|appsPending
operator|.
name|incr
argument_list|()
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|submitApp
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|submitApp
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incrAppsRunning (String user)
specifier|public
name|void
name|incrAppsRunning
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|appsRunning
operator|.
name|incr
argument_list|()
expr_stmt|;
name|appsPending
operator|.
name|decr
argument_list|()
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|incrAppsRunning
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|incrAppsRunning
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishApp (AppSchedulingInfo app, RMAppAttemptState rmAppAttemptFinalState)
specifier|public
name|void
name|finishApp
parameter_list|(
name|AppSchedulingInfo
name|app
parameter_list|,
name|RMAppAttemptState
name|rmAppAttemptFinalState
parameter_list|)
block|{
switch|switch
condition|(
name|rmAppAttemptFinalState
condition|)
block|{
case|case
name|KILLED
case|:
name|appsKilled
operator|.
name|incr
argument_list|()
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|appsFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
break|break;
default|default:
name|appsCompleted
operator|.
name|incr
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|app
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|appsPending
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appsRunning
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|finishApp
argument_list|(
name|app
argument_list|,
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|finishApp
argument_list|(
name|app
argument_list|,
name|rmAppAttemptFinalState
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set available resources. To be called by scheduler periodically as    * resources become available.    * @param limit resource limit    */
DECL|method|setAvailableResourcesToQueue (Resource limit)
specifier|public
name|void
name|setAvailableResourcesToQueue
parameter_list|(
name|Resource
name|limit
parameter_list|)
block|{
name|availableGB
operator|.
name|set
argument_list|(
name|limit
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set available resources. To be called by scheduler periodically as    * resources become available.    * @param user    * @param limit resource limit    */
DECL|method|setAvailableResourcesToUser (String user, Resource limit)
specifier|public
name|void
name|setAvailableResourcesToUser
parameter_list|(
name|String
name|user
parameter_list|,
name|Resource
name|limit
parameter_list|)
block|{
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|setAvailableResourcesToQueue
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Increment pending resource metrics    * @param user    * @param containers    * @param res the TOTAL delta of resources note this is different from    *            the other APIs which use per container resource    */
DECL|method|incrPendingResources (String user, int containers, Resource res)
specifier|public
name|void
name|incrPendingResources
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|_incrPendingResources
argument_list|(
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|incrPendingResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|_incrPendingResources (int containers, Resource res)
specifier|private
name|void
name|_incrPendingResources
parameter_list|(
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|pendingContainers
operator|.
name|incr
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|pendingGB
operator|.
name|incr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
argument_list|)
expr_stmt|;
block|}
DECL|method|decrPendingResources (String user, int containers, Resource res)
specifier|public
name|void
name|decrPendingResources
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|_decrPendingResources
argument_list|(
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|decrPendingResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|_decrPendingResources (int containers, Resource res)
specifier|private
name|void
name|_decrPendingResources
parameter_list|(
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|pendingContainers
operator|.
name|decr
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|pendingGB
operator|.
name|decr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateResources (String user, int containers, Resource res)
specifier|public
name|void
name|allocateResources
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|allocatedContainers
operator|.
name|incr
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|allocatedGB
operator|.
name|incr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
operator|*
name|containers
argument_list|)
expr_stmt|;
name|_decrPendingResources
argument_list|(
name|containers
argument_list|,
name|multiply
argument_list|(
name|res
argument_list|,
name|containers
argument_list|)
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|allocateResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|releaseResources (String user, int containers, Resource res)
specifier|public
name|void
name|releaseResources
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|containers
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|allocatedContainers
operator|.
name|decr
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|allocatedGB
operator|.
name|decr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
operator|*
name|containers
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|releaseResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|releaseResources
argument_list|(
name|user
argument_list|,
name|containers
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reserveResource (String user, Resource res)
specifier|public
name|void
name|reserveResource
parameter_list|(
name|String
name|user
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|reservedContainers
operator|.
name|incr
argument_list|()
expr_stmt|;
name|reservedGB
operator|.
name|incr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|reserveResource
argument_list|(
name|user
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|reserveResource
argument_list|(
name|user
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unreserveResource (String user, Resource res)
specifier|public
name|void
name|unreserveResource
parameter_list|(
name|String
name|user
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|reservedContainers
operator|.
name|decr
argument_list|()
expr_stmt|;
name|reservedGB
operator|.
name|decr
argument_list|(
name|res
operator|.
name|getMemory
argument_list|()
operator|/
name|GB
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|getUserMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMetrics
operator|!=
literal|null
condition|)
block|{
name|userMetrics
operator|.
name|unreserveResource
argument_list|(
name|user
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|unreserveResource
argument_list|(
name|user
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAppsSubmitted ()
specifier|public
name|int
name|getAppsSubmitted
parameter_list|()
block|{
return|return
name|appsSubmitted
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAppsRunning ()
specifier|public
name|int
name|getAppsRunning
parameter_list|()
block|{
return|return
name|appsRunning
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAppsPending ()
specifier|public
name|int
name|getAppsPending
parameter_list|()
block|{
return|return
name|appsPending
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAppsCompleted ()
specifier|public
name|int
name|getAppsCompleted
parameter_list|()
block|{
return|return
name|appsCompleted
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAppsKilled ()
specifier|public
name|int
name|getAppsKilled
parameter_list|()
block|{
return|return
name|appsKilled
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAppsFailed ()
specifier|public
name|int
name|getAppsFailed
parameter_list|()
block|{
return|return
name|appsFailed
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAllocatedGB ()
specifier|public
name|int
name|getAllocatedGB
parameter_list|()
block|{
return|return
name|allocatedGB
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAllocatedContainers ()
specifier|public
name|int
name|getAllocatedContainers
parameter_list|()
block|{
return|return
name|allocatedContainers
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getAvailableGB ()
specifier|public
name|int
name|getAvailableGB
parameter_list|()
block|{
return|return
name|availableGB
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getPendingGB ()
specifier|public
name|int
name|getPendingGB
parameter_list|()
block|{
return|return
name|pendingGB
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getPendingContainers ()
specifier|public
name|int
name|getPendingContainers
parameter_list|()
block|{
return|return
name|pendingContainers
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getReservedGB ()
specifier|public
name|int
name|getReservedGB
parameter_list|()
block|{
return|return
name|reservedGB
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getReservedContainers ()
specifier|public
name|int
name|getReservedContainers
parameter_list|()
block|{
return|return
name|reservedContainers
operator|.
name|value
argument_list|()
return|;
block|}
block|}
end_class

end_unit

