begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|FifoSchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/cluster"
argument_list|)
DECL|class|RMWebServices
specifier|public
class|class
name|RMWebServices
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY
init|=
literal|""
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|final
name|ApplicationACLsManager
name|aclsManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|RMWebServices (final ResourceManager rm, final ApplicationACLsManager aclsManager)
specifier|public
name|RMWebServices
parameter_list|(
specifier|final
name|ResourceManager
name|rm
parameter_list|,
specifier|final
name|ApplicationACLsManager
name|aclsManager
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
name|aclsManager
expr_stmt|;
block|}
DECL|method|hasAccess (RMApp app, HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAccess
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|String
name|remoteUser
init|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
operator|new
name|ClusterInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/metrics"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
return|return
operator|new
name|ClusterMetricsInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|,
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/scheduler"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerInfo
name|sinfo
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
name|CSQueue
name|root
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|sinfo
operator|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|instanceof
name|FifoScheduler
condition|)
block|{
name|sinfo
operator|=
operator|new
name|FifoSchedulerInfo
argument_list|(
name|this
operator|.
name|rm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unknown scheduler configured"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SchedulerTypeInfo
argument_list|(
name|sinfo
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNodes (@ueryParamR) String filterState, @QueryParam(R) String healthState)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|filterState
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"healthy"
argument_list|)
name|String
name|healthState
parameter_list|)
block|{
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|boolean
name|isInactive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|filterState
operator|!=
literal|null
operator|&&
operator|!
name|filterState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RMNodeState
name|nodeState
init|=
name|RMNodeState
operator|.
name|valueOf
argument_list|(
name|filterState
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nodeState
condition|)
block|{
case|case
name|DECOMMISSIONED
case|:
case|case
name|LOST
case|:
case|case
name|REBOOTED
case|:
name|rmNodes
operator|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
name|isInactive
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|NodesInfo
name|allNodes
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMNode
name|ni
range|:
name|rmNodes
control|)
block|{
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|ni
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|nodeInfo
operator|.
name|getState
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|filterState
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
comment|// No filter. User is asking for all nodes. Make sure you skip the
comment|// unhealthy nodes.
if|if
condition|(
name|ni
operator|.
name|getState
argument_list|()
operator|==
name|RMNodeState
operator|.
name|UNHEALTHY
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
operator|(
name|healthState
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|healthState
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"heatlh state is : "
operator|+
name|healthState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|healthState
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|&&
operator|!
name|healthState
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Error: You must specify either true or false to query on health"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeInfo
operator|.
name|isHealthy
argument_list|()
operator|!=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|healthState
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|isInactive
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|allNodes
operator|.
name|add
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|allNodes
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/nodes/{nodeId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getNode (@athParamR) String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"nodeId"
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ResourceScheduler
name|sched
init|=
name|this
operator|.
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|sched
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Null ResourceScheduler instance"
argument_list|)
throw|;
block|}
name|NodeId
name|nid
init|=
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|boolean
name|isInactive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
name|ni
operator|=
name|this
operator|.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ni
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"nodeId, "
operator|+
name|nodeId
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
name|isInactive
operator|=
literal|true
expr_stmt|;
block|}
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|ni
argument_list|,
name|sched
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInactive
condition|)
block|{
name|nodeInfo
operator|.
name|setNodeHTTPAddress
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeInfo
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApps (@ontext HttpServletRequest hsr, @QueryParam(R) String stateQuery, @QueryParam(R) String finalStatusQuery, @QueryParam(R) String userQuery, @QueryParam(R) String queueQuery, @QueryParam(R) String count, @QueryParam(R) String startedBegin, @QueryParam(R) String startedEnd, @QueryParam(R) String finishBegin, @QueryParam(R) String finishEnd)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finalStatus"
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"queue"
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|)
name|String
name|finishEnd
parameter_list|)
block|{
name|long
name|num
init|=
literal|0
decl_stmt|;
name|boolean
name|checkCount
init|=
literal|false
decl_stmt|;
name|boolean
name|checkStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkEnd
init|=
literal|false
decl_stmt|;
name|long
name|countNum
init|=
literal|0
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
name|long
name|sBegin
init|=
literal|0
decl_stmt|;
name|long
name|sEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fBegin
init|=
literal|0
decl_stmt|;
name|long
name|fEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
operator|!
name|count
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkCount
operator|=
literal|true
expr_stmt|;
name|countNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|countNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|sBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|sEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sBegin
operator|>
name|sEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|fBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fBegin
operator|>
name|fEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than finishTimeBegin"
argument_list|)
throw|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|RMApp
name|rmapp
range|:
name|apps
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|checkCount
operator|&&
name|num
operator|==
name|countNum
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RMAppState
operator|.
name|valueOf
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|stateQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|finalStatusQuery
operator|!=
literal|null
operator|&&
operator|!
name|finalStatusQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|finalStatusQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|finalStatusQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|userQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|instanceof
name|CapacityScheduler
condition|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rs
decl_stmt|;
comment|// validate queue exists
try|try
block|{
name|cs
operator|.
name|getQueueInfo
argument_list|(
name|queueQuery
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|rmapp
operator|.
name|getQueue
argument_list|()
operator|.
name|equals
argument_list|(
name|queueQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|checkStart
operator|&&
operator|(
name|rmapp
operator|.
name|getStartTime
argument_list|()
operator|<
name|sBegin
operator|||
name|rmapp
operator|.
name|getStartTime
argument_list|()
operator|>
name|sEnd
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkEnd
operator|&&
operator|(
name|rmapp
operator|.
name|getFinishTime
argument_list|()
operator|<
name|fBegin
operator|||
name|rmapp
operator|.
name|getFinishTime
argument_list|()
operator|>
name|fEnd
operator|)
condition|)
block|{
continue|continue;
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|rmapp
argument_list|,
name|hasAccess
argument_list|(
name|rmapp
argument_list|,
name|hsr
argument_list|)
argument_list|)
decl_stmt|;
name|allApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|num
operator|++
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getApp (@ontext HttpServletRequest hsr, @PathParam(R) String appId)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|id
decl_stmt|;
name|id
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppInfo
argument_list|(
name|app
argument_list|,
name|hasAccess
argument_list|(
name|app
argument_list|,
name|hsr
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

