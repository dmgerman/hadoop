begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.terasort
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestTeraSort
specifier|public
class|class
name|TestTeraSort
extends|extends
name|HadoopTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTeraSort
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestTeraSort ()
specifier|public
name|TestTeraSort
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|LOCAL_MR
argument_list|,
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// Input/Output paths for sort
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"terasort"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|SORT_INPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_INPUT_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"sortin"
argument_list|)
decl_stmt|;
DECL|field|SORT_OUTPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_OUTPUT_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"sortout"
argument_list|)
decl_stmt|;
DECL|field|TERA_OUTPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TERA_OUTPUT_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"validate"
argument_list|)
decl_stmt|;
DECL|field|NUM_ROWS
specifier|private
specifier|static
specifier|final
name|String
name|NUM_ROWS
init|=
literal|"100"
decl_stmt|;
DECL|method|runTeraGen (Configuration conf, Path sortInput)
specifier|private
name|void
name|runTeraGen
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|sortInput
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|genArgs
init|=
block|{
name|NUM_ROWS
block|,
name|sortInput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
comment|// Run TeraGen
name|assertEquals
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|TeraGen
argument_list|()
argument_list|,
name|genArgs
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runTeraSort (Configuration conf, Path sortInput, Path sortOutput)
specifier|private
name|void
name|runTeraSort
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Setup command-line arguments to 'sort'
name|String
index|[]
name|sortArgs
init|=
block|{
name|sortInput
operator|.
name|toString
argument_list|()
block|,
name|sortOutput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
comment|// Run Sort
name|assertEquals
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|TeraSort
argument_list|()
argument_list|,
name|sortArgs
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runTeraValidator (Configuration job, Path sortOutput, Path valOutput)
specifier|private
name|void
name|runTeraValidator
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Path
name|sortOutput
parameter_list|,
name|Path
name|valOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|svArgs
init|=
block|{
name|sortOutput
operator|.
name|toString
argument_list|()
block|,
name|valOutput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
comment|// Run Tera-Validator
name|assertEquals
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|job
argument_list|,
operator|new
name|TeraValidate
argument_list|()
argument_list|,
name|svArgs
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTeraSort ()
specifier|public
name|void
name|testTeraSort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run TeraGen to generate input for 'terasort'
name|runTeraGen
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|)
expr_stmt|;
comment|// Run teragen again to check for FAE
try|try
block|{
name|runTeraGen
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Teragen output overwritten!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|fae
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception: "
argument_list|,
name|fae
argument_list|)
expr_stmt|;
block|}
comment|// Run terasort
name|runTeraSort
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|)
expr_stmt|;
comment|// Run terasort again to check for FAE
try|try
block|{
name|runTeraSort
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Terasort output overwritten!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|fae
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception: "
argument_list|,
name|fae
argument_list|)
expr_stmt|;
block|}
comment|// Run tera-validator to check if sort worked correctly
name|runTeraValidator
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|,
name|TERA_OUTPUT_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTeraSortWithLessThanTwoArgs ()
specifier|public
name|void
name|testTeraSortWithLessThanTwoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TeraSort
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

