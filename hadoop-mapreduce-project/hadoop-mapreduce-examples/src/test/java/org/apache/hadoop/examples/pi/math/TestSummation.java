begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|TestModular
operator|.
name|Montgomery2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestSummation
specifier|public
class|class
name|TestSummation
block|{
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|TWO
specifier|static
specifier|final
name|BigInteger
name|TWO
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|DOUBLE_DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DOUBLE_DELTA
init|=
literal|0.000000001f
decl_stmt|;
DECL|method|newSummation (final long base, final long range, final long delta)
specifier|private
specifier|static
name|Summation2
name|newSummation
parameter_list|(
specifier|final
name|long
name|base
parameter_list|,
specifier|final
name|long
name|range
parameter_list|,
specifier|final
name|long
name|delta
parameter_list|)
block|{
specifier|final
name|ArithmeticProgression
name|N
init|=
operator|new
name|ArithmeticProgression
argument_list|(
literal|'n'
argument_list|,
name|base
operator|+
literal|3
argument_list|,
name|delta
argument_list|,
name|base
operator|+
literal|3
operator|+
name|range
argument_list|)
decl_stmt|;
specifier|final
name|ArithmeticProgression
name|E
init|=
operator|new
name|ArithmeticProgression
argument_list|(
literal|'e'
argument_list|,
name|base
operator|+
name|range
argument_list|,
operator|-
name|delta
argument_list|,
name|base
argument_list|)
decl_stmt|;
return|return
operator|new
name|Summation2
argument_list|(
name|N
argument_list|,
name|E
argument_list|)
return|;
block|}
DECL|method|runTestSubtract (Summation sigma, List<Summation> diff)
specifier|private
specifier|static
name|void
name|runTestSubtract
parameter_list|(
name|Summation
name|sigma
parameter_list|,
name|List
argument_list|<
name|Summation
argument_list|>
name|diff
parameter_list|)
block|{
comment|//    Util.out.println("diff=" + diff);
name|List
argument_list|<
name|Container
argument_list|<
name|Summation
argument_list|>
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|<
name|Summation
argument_list|>
argument_list|>
argument_list|(
name|diff
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Summation
name|s
range|:
name|diff
control|)
name|tmp
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|a
init|=
name|sigma
operator|.
name|remainingTerms
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
comment|//    Util.out.println("a   =" + a);
name|a
operator|.
name|addAll
argument_list|(
name|diff
argument_list|)
expr_stmt|;
for|for
control|(
name|Summation
name|s
range|:
name|a
control|)
name|s
operator|.
name|compute
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|combined
init|=
name|Util
operator|.
name|combine
argument_list|(
name|a
argument_list|)
decl_stmt|;
comment|//    Util.out.println("combined=" + combined);
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|combined
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sigma
argument_list|,
name|combined
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubtract ()
specifier|public
name|void
name|testSubtract
parameter_list|()
block|{
specifier|final
name|Summation
name|sigma
init|=
name|newSummation
argument_list|(
literal|3
argument_list|,
literal|10000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
literal|10
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|sigma
operator|.
name|partition
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|runTestSubtract
argument_list|(
name|sigma
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Summation
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|runTestSubtract
argument_list|(
name|sigma
argument_list|,
name|parts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<
name|size
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|diff
init|=
operator|new
name|ArrayList
argument_list|<
name|Summation
argument_list|>
argument_list|(
name|parts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|diff
operator|.
name|remove
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|diff
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|///        Collections.sort(diff);
name|runTestSubtract
argument_list|(
name|sigma
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Summation2
specifier|static
class|class
name|Summation2
extends|extends
name|Summation
block|{
DECL|method|Summation2 (ArithmeticProgression N, ArithmeticProgression E)
name|Summation2
parameter_list|(
name|ArithmeticProgression
name|N
parameter_list|,
name|ArithmeticProgression
name|E
parameter_list|)
block|{
name|super
argument_list|(
name|N
argument_list|,
name|E
argument_list|)
expr_stmt|;
block|}
DECL|field|m2
specifier|final
name|Montgomery2
name|m2
init|=
operator|new
name|Montgomery2
argument_list|()
decl_stmt|;
DECL|method|compute_montgomery2 ()
name|double
name|compute_montgomery2
parameter_list|()
block|{
name|long
name|e
init|=
name|E
operator|.
name|value
decl_stmt|;
name|long
name|n
init|=
name|N
operator|.
name|value
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|e
operator|>
name|E
operator|.
name|limit
condition|;
name|e
operator|+=
name|E
operator|.
name|delta
control|)
block|{
name|m2
operator|.
name|set
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|s
operator|=
name|Modular
operator|.
name|addMod
argument_list|(
name|s
argument_list|,
name|m2
operator|.
name|mod2
argument_list|(
name|e
argument_list|)
operator|/
operator|(
name|double
operator|)
name|n
argument_list|)
expr_stmt|;
name|n
operator|+=
name|N
operator|.
name|delta
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|compute_modBigInteger ()
name|double
name|compute_modBigInteger
parameter_list|()
block|{
name|long
name|e
init|=
name|E
operator|.
name|value
decl_stmt|;
name|long
name|n
init|=
name|N
operator|.
name|value
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|e
operator|>
name|E
operator|.
name|limit
condition|;
name|e
operator|+=
name|E
operator|.
name|delta
control|)
block|{
name|s
operator|=
name|Modular
operator|.
name|addMod
argument_list|(
name|s
argument_list|,
name|TestModular
operator|.
name|modBigInteger
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
operator|/
operator|(
name|double
operator|)
name|n
argument_list|)
expr_stmt|;
name|n
operator|+=
name|N
operator|.
name|delta
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|compute_modPow ()
name|double
name|compute_modPow
parameter_list|()
block|{
name|long
name|e
init|=
name|E
operator|.
name|value
decl_stmt|;
name|long
name|n
init|=
name|N
operator|.
name|value
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|e
operator|>
name|E
operator|.
name|limit
condition|;
name|e
operator|+=
name|E
operator|.
name|delta
control|)
block|{
name|s
operator|=
name|Modular
operator|.
name|addMod
argument_list|(
name|s
argument_list|,
name|TWO
operator|.
name|modPow
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|e
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|/
name|n
argument_list|)
expr_stmt|;
name|n
operator|+=
name|N
operator|.
name|delta
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
DECL|method|computeBenchmarks (final Summation2 sigma)
specifier|private
specifier|static
name|void
name|computeBenchmarks
parameter_list|(
specifier|final
name|Summation2
name|sigma
parameter_list|)
block|{
specifier|final
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"sigma="
operator|+
name|sigma
argument_list|)
expr_stmt|;
specifier|final
name|double
name|value
init|=
name|sigma
operator|.
name|compute
argument_list|()
decl_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute="
operator|+
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|sigma
operator|.
name|compute_modular
argument_list|()
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute_modular"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|sigma
operator|.
name|compute_montgomery
argument_list|()
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute_montgomery"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|sigma
operator|.
name|compute_montgomery2
argument_list|()
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute_montgomery2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|sigma
operator|.
name|compute_modBigInteger
argument_list|()
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute_modBigInteger"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|sigma
operator|.
name|compute_modPow
argument_list|()
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|t
operator|.
name|tick
argument_list|(
literal|"compute_modPow"
argument_list|)
expr_stmt|;
block|}
comment|/** Benchmarks */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|long
name|delta
init|=
literal|1L
operator|<<
literal|4
decl_stmt|;
specifier|final
name|long
name|range
init|=
literal|1L
operator|<<
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|+=
literal|2
control|)
name|computeBenchmarks
argument_list|(
name|newSummation
argument_list|(
literal|1L
operator|<<
name|i
argument_list|,
name|range
argument_list|,
name|delta
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

