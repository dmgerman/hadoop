begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWordStats
specifier|public
class|class
name|TestWordStats
block|{
DECL|field|INPUT
specifier|private
specifier|final
specifier|static
name|String
name|INPUT
init|=
literal|"src/test/java/org/apache/hadoop/examples/pi/math"
decl_stmt|;
DECL|field|MEAN_OUTPUT
specifier|private
specifier|final
specifier|static
name|String
name|MEAN_OUTPUT
init|=
literal|"build/data/mean_output"
decl_stmt|;
DECL|field|MEDIAN_OUTPUT
specifier|private
specifier|final
specifier|static
name|String
name|MEDIAN_OUTPUT
init|=
literal|"build/data/median_output"
decl_stmt|;
DECL|field|STDDEV_OUTPUT
specifier|private
specifier|final
specifier|static
name|String
name|STDDEV_OUTPUT
init|=
literal|"build/data/stddev_output"
decl_stmt|;
comment|/**    * Modified internal test class that is designed to read all the files in the    * input directory, and find the standard deviation between all of the word    * lengths.    */
DECL|class|WordStdDevReader
specifier|public
specifier|static
class|class
name|WordStdDevReader
block|{
DECL|field|wordsRead
specifier|private
name|long
name|wordsRead
init|=
literal|0
decl_stmt|;
DECL|field|wordLengthsRead
specifier|private
name|long
name|wordLengthsRead
init|=
literal|0
decl_stmt|;
DECL|field|wordLengthsReadSquared
specifier|private
name|long
name|wordLengthsReadSquared
init|=
literal|0
decl_stmt|;
DECL|method|WordStdDevReader ()
specifier|public
name|WordStdDevReader
parameter_list|()
block|{     }
DECL|method|read (String path)
specifier|public
name|double
name|read
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|fileStat
operator|.
name|isFile
argument_list|()
condition|)
continue|continue;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|word
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|wordsRead
operator|++
expr_stmt|;
name|this
operator|.
name|wordLengthsRead
operator|+=
name|word
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|wordLengthsReadSquared
operator|+=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|word
operator|.
name|length
argument_list|()
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Output could not be read!"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|double
name|mean
init|=
operator|(
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordLengthsRead
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordsRead
operator|)
operator|)
decl_stmt|;
name|mean
operator|=
name|Math
operator|.
name|pow
argument_list|(
name|mean
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|double
name|term
init|=
operator|(
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordLengthsReadSquared
operator|/
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordsRead
operator|)
operator|)
operator|)
decl_stmt|;
name|double
name|stddev
init|=
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|term
operator|-
name|mean
operator|)
argument_list|)
decl_stmt|;
return|return
name|stddev
return|;
block|}
block|}
comment|/**    * Modified internal test class that is designed to read all the files in the    * input directory, and find the median length of all the words.    */
DECL|class|WordMedianReader
specifier|public
specifier|static
class|class
name|WordMedianReader
block|{
DECL|field|wordsRead
specifier|private
name|long
name|wordsRead
init|=
literal|0
decl_stmt|;
DECL|field|map
specifier|private
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WordMedianReader ()
specifier|public
name|WordMedianReader
parameter_list|()
block|{     }
DECL|method|read (String path)
specifier|public
name|double
name|read
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|fileStat
operator|.
name|isFile
argument_list|()
condition|)
continue|continue;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|word
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|wordsRead
operator|++
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|word
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|map
operator|.
name|put
argument_list|(
name|word
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|count
init|=
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|word
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|.
name|put
argument_list|(
name|word
operator|.
name|length
argument_list|()
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Output could not be read!"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|medianIndex1
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|this
operator|.
name|wordsRead
operator|/
literal|2.0
operator|)
argument_list|)
decl_stmt|;
name|int
name|medianIndex2
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|this
operator|.
name|wordsRead
operator|/
literal|2.0
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|this
operator|.
name|map
operator|.
name|navigableKeySet
argument_list|()
control|)
block|{
name|int
name|prevNum
init|=
name|num
decl_stmt|;
name|num
operator|+=
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|medianIndex2
operator|>=
name|prevNum
operator|&&
name|medianIndex1
operator|<=
name|num
condition|)
block|{
return|return
name|key
return|;
block|}
elseif|else
if|if
condition|(
name|medianIndex2
operator|>=
name|prevNum
operator|&&
name|medianIndex1
operator|<
name|num
condition|)
block|{
name|Integer
name|nextCurrLen
init|=
name|this
operator|.
name|map
operator|.
name|navigableKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|double
name|median
init|=
operator|(
name|key
operator|+
name|nextCurrLen
operator|)
operator|/
literal|2.0
decl_stmt|;
return|return
name|median
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Modified internal test class that is designed to read all the files in the    * input directory, and find the mean length of all the words.    */
DECL|class|WordMeanReader
specifier|public
specifier|static
class|class
name|WordMeanReader
block|{
DECL|field|wordsRead
specifier|private
name|long
name|wordsRead
init|=
literal|0
decl_stmt|;
DECL|field|wordLengthsRead
specifier|private
name|long
name|wordLengthsRead
init|=
literal|0
decl_stmt|;
DECL|method|WordMeanReader ()
specifier|public
name|WordMeanReader
parameter_list|()
block|{     }
DECL|method|read (String path)
specifier|public
name|double
name|read
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|fileStat
operator|.
name|isFile
argument_list|()
condition|)
continue|continue;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|word
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|wordsRead
operator|++
expr_stmt|;
name|this
operator|.
name|wordLengthsRead
operator|+=
name|word
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Output could not be read!"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|double
name|mean
init|=
operator|(
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordLengthsRead
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|wordsRead
operator|)
operator|)
decl_stmt|;
return|return
name|mean
return|;
block|}
block|}
comment|/**    * Internal class designed to delete the output directory. Meant solely for    * use before and after the test is run; this is so next iterations of the    * test do not encounter a "file already exists" error.    *     * @param dir    *          The directory to delete.    * @return Returns whether the deletion was successful or not.    */
DECL|method|deleteDir (File dir)
specifier|public
specifier|static
name|boolean
name|deleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|success
init|=
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not delete directory after test!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// The directory is now empty so delete it
return|return
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
DECL|method|setup ()
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|MEAN_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|MEDIAN_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|STDDEV_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTheMean ()
annotation|@
name|Test
specifier|public
name|void
name|testGetTheMean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|INPUT
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|MEAN_OUTPUT
expr_stmt|;
name|WordMean
name|wm
init|=
operator|new
name|WordMean
argument_list|()
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|wm
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|double
name|mean
init|=
name|wm
operator|.
name|getMean
argument_list|()
decl_stmt|;
comment|// outputs MUST match
name|WordMeanReader
name|wr
init|=
operator|new
name|WordMeanReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mean
argument_list|,
name|wr
operator|.
name|read
argument_list|(
name|INPUT
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTheMedian ()
annotation|@
name|Test
specifier|public
name|void
name|testGetTheMedian
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|INPUT
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|MEDIAN_OUTPUT
expr_stmt|;
name|WordMedian
name|wm
init|=
operator|new
name|WordMedian
argument_list|()
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|wm
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|double
name|median
init|=
name|wm
operator|.
name|getMedian
argument_list|()
decl_stmt|;
comment|// outputs MUST match
name|WordMedianReader
name|wr
init|=
operator|new
name|WordMedianReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|median
argument_list|,
name|wr
operator|.
name|read
argument_list|(
name|INPUT
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTheStandardDeviation ()
annotation|@
name|Test
specifier|public
name|void
name|testGetTheStandardDeviation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|INPUT
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|STDDEV_OUTPUT
expr_stmt|;
name|WordStandardDeviation
name|wsd
init|=
operator|new
name|WordStandardDeviation
argument_list|()
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|wsd
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|double
name|stddev
init|=
name|wsd
operator|.
name|getStandardDeviation
argument_list|()
decl_stmt|;
comment|// outputs MUST match
name|WordStdDevReader
name|wr
init|=
operator|new
name|WordStdDevReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|stddev
argument_list|,
name|wr
operator|.
name|read
argument_list|(
name|INPUT
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

