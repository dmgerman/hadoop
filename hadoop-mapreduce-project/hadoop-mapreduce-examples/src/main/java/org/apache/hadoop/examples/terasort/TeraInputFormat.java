begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.terasort
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|IndexedSortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|QuickSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * An input format that reads the first 10 characters of each line as the key  * and the rest of the line as the value. Both key and value are represented  * as Text.  */
end_comment

begin_class
DECL|class|TeraInputFormat
specifier|public
class|class
name|TeraInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|PARTITION_FILENAME
specifier|static
specifier|final
name|String
name|PARTITION_FILENAME
init|=
literal|"_partition.lst"
decl_stmt|;
DECL|field|KEY_LENGTH
specifier|static
specifier|final
name|int
name|KEY_LENGTH
init|=
literal|10
decl_stmt|;
DECL|field|VALUE_LENGTH
specifier|static
specifier|final
name|int
name|VALUE_LENGTH
init|=
literal|90
decl_stmt|;
DECL|field|RECORD_LENGTH
specifier|static
specifier|final
name|int
name|RECORD_LENGTH
init|=
name|KEY_LENGTH
operator|+
name|VALUE_LENGTH
decl_stmt|;
DECL|field|lastContext
specifier|private
specifier|static
name|MRJobConfig
name|lastContext
init|=
literal|null
decl_stmt|;
DECL|field|lastResult
specifier|private
specifier|static
name|List
argument_list|<
name|InputSplit
argument_list|>
name|lastResult
init|=
literal|null
decl_stmt|;
DECL|class|TextSampler
specifier|static
class|class
name|TextSampler
implements|implements
name|IndexedSortable
block|{
DECL|field|records
specifier|private
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|compare (int i, int j)
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|Text
name|left
init|=
name|records
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Text
name|right
init|=
name|records
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
return|return
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
DECL|method|swap (int i, int j)
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|Text
name|left
init|=
name|records
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Text
name|right
init|=
name|records
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|records
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|records
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
DECL|method|addKey (Text key)
specifier|public
name|void
name|addKey
parameter_list|(
name|Text
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|records
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the split points for a given sample. The sample keys are sorted      * and down sampled to find even split points for the partitions. The      * returned keys should be the start of their respective partitions.      * @param numPartitions the desired number of partitions      * @return an array of size numPartitions - 1 that holds the split points      */
DECL|method|createPartitions (int numPartitions)
name|Text
index|[]
name|createPartitions
parameter_list|(
name|int
name|numPartitions
parameter_list|)
block|{
name|int
name|numRecords
init|=
name|records
operator|.
name|size
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Making "
operator|+
name|numPartitions
operator|+
literal|" from "
operator|+
name|numRecords
operator|+
literal|" sampled records"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numPartitions
operator|>
name|numRecords
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Requested more partitions than input keys ("
operator|+
name|numPartitions
operator|+
literal|"> "
operator|+
name|numRecords
operator|+
literal|")"
argument_list|)
throw|;
block|}
operator|new
name|QuickSort
argument_list|()
operator|.
name|sort
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|stepSize
init|=
name|numRecords
operator|/
operator|(
name|float
operator|)
name|numPartitions
decl_stmt|;
name|Text
index|[]
name|result
init|=
operator|new
name|Text
index|[
name|numPartitions
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numPartitions
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|records
operator|.
name|get
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|stepSize
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Use the input splits to take samples of the input and generate sample    * keys. By default reads 100,000 keys from 10 locations in the input, sorts    * them and picks N-1 keys to generate N equally sized partitions.    * @param job the job to sample    * @param partFile where to write the output file to    * @throws Throwable if something goes wrong    */
DECL|method|writePartitionFile (final JobContext job, Path partFile)
specifier|public
specifier|static
name|void
name|writePartitionFile
parameter_list|(
specifier|final
name|JobContext
name|job
parameter_list|,
name|Path
name|partFile
parameter_list|)
throws|throws
name|Throwable
block|{
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|TeraInputFormat
name|inFormat
init|=
operator|new
name|TeraInputFormat
argument_list|()
decl_stmt|;
specifier|final
name|TextSampler
name|sampler
init|=
operator|new
name|TextSampler
argument_list|()
decl_stmt|;
name|int
name|partitions
init|=
name|job
operator|.
name|getNumReduceTasks
argument_list|()
decl_stmt|;
name|long
name|sampleSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|TeraSortConfigKeys
operator|.
name|SAMPLE_SIZE
operator|.
name|key
argument_list|()
argument_list|,
name|TeraSortConfigKeys
operator|.
name|DEFAULT_SAMPLE_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|inFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Computing input splits took "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|int
name|samples
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|TeraSortConfigKeys
operator|.
name|NUM_PARTITIONS
operator|.
name|key
argument_list|()
argument_list|,
name|TeraSortConfigKeys
operator|.
name|DEFAULT_NUM_PARTITIONS
argument_list|)
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sampling "
operator|+
name|samples
operator|+
literal|" splits of "
operator|+
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|recordsPerSample
init|=
name|sampleSize
operator|/
name|samples
decl_stmt|;
specifier|final
name|int
name|sampleStep
init|=
name|splits
operator|.
name|size
argument_list|()
operator|/
name|samples
decl_stmt|;
name|Thread
index|[]
name|samplerReader
init|=
operator|new
name|Thread
index|[
name|samples
index|]
decl_stmt|;
name|SamplerThreadGroup
name|threadGroup
init|=
operator|new
name|SamplerThreadGroup
argument_list|(
literal|"Sampler Reader Thread Group"
argument_list|)
decl_stmt|;
comment|// take N samples from different parts of the input
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|samples
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|i
decl_stmt|;
name|samplerReader
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|threadGroup
argument_list|,
literal|"Sampler Reader "
operator|+
name|idx
argument_list|)
block|{
block|{
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|records
init|=
literal|0
decl_stmt|;
try|try
block|{
name|TaskAttemptContext
name|context
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|inFormat
operator|.
name|createRecordReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|sampleStep
operator|*
name|idx
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|sampleStep
operator|*
name|idx
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|sampler
operator|.
name|addKey
argument_list|(
operator|new
name|Text
argument_list|(
name|reader
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|recordsPerSample
operator|<=
name|records
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got an exception while reading splits "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         	             }
block|}
block|}
expr_stmt|;
name|samplerReader
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|FileSystem
name|outFs
init|=
name|partFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DataOutputStream
name|writer
init|=
name|outFs
operator|.
name|create
argument_list|(
name|partFile
argument_list|,
literal|true
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|,
name|outFs
operator|.
name|getDefaultBlockSize
argument_list|(
name|partFile
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|samples
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|samplerReader
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|threadGroup
operator|.
name|getThrowable
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|threadGroup
operator|.
name|getThrowable
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
for|for
control|(
name|Text
name|split
range|:
name|sampler
operator|.
name|createPartitions
argument_list|(
name|partitions
argument_list|)
control|)
block|{
name|split
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Computing parititions took "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
DECL|class|SamplerThreadGroup
specifier|static
class|class
name|SamplerThreadGroup
extends|extends
name|ThreadGroup
block|{
DECL|field|throwable
specifier|private
name|Throwable
name|throwable
decl_stmt|;
DECL|method|SamplerThreadGroup (String s)
specifier|public
name|SamplerThreadGroup
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException (Thread thread, Throwable throwable)
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
operator|.
name|throwable
operator|=
name|throwable
expr_stmt|;
block|}
DECL|method|getThrowable ()
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|this
operator|.
name|throwable
return|;
block|}
block|}
DECL|class|TeraRecordReader
specifier|static
class|class
name|TeraRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|in
specifier|private
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|RECORD_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_LENGTH
init|=
name|KEY_LENGTH
operator|+
name|VALUE_LENGTH
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|RECORD_LENGTH
index|]
decl_stmt|;
DECL|field|key
specifier|private
name|Text
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|Text
name|value
decl_stmt|;
DECL|method|TeraRecordReader ()
specifier|public
name|TeraRecordReader
parameter_list|()
throws|throws
name|IOException
block|{     }
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|p
init|=
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|long
name|start
init|=
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getStart
argument_list|()
decl_stmt|;
comment|// find the offset to start at a record boundary
name|offset
operator|=
operator|(
name|RECORD_LENGTH
operator|-
operator|(
name|start
operator|%
name|RECORD_LENGTH
operator|)
operator|)
operator|%
name|RECORD_LENGTH
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|start
operator|+
name|offset
argument_list|)
expr_stmt|;
name|length
operator|=
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|Text
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getCurrentValue ()
specifier|public
name|Text
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|offset
operator|/
name|length
return|;
block|}
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|>=
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|RECORD_LENGTH
condition|)
block|{
name|long
name|newRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|,
name|RECORD_LENGTH
operator|-
name|read
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRead
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"read past eof"
argument_list|)
throw|;
block|}
block|}
name|read
operator|+=
name|newRead
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
name|key
operator|.
name|set
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|KEY_LENGTH
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|buffer
argument_list|,
name|KEY_LENGTH
argument_list|,
name|VALUE_LENGTH
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|RECORD_LENGTH
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TeraRecordReader
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|job
operator|==
name|lastContext
condition|)
block|{
return|return
name|lastResult
return|;
block|}
name|long
name|t1
decl_stmt|,
name|t2
decl_stmt|,
name|t3
decl_stmt|;
name|t1
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|lastContext
operator|=
name|job
expr_stmt|;
name|lastResult
operator|=
name|super
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|t2
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Spent "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms computing base-splits."
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|TeraSortConfigKeys
operator|.
name|USE_TERA_SCHEDULER
operator|.
name|key
argument_list|()
argument_list|,
name|TeraSortConfigKeys
operator|.
name|DEFAULT_USE_TERA_SCHEDULER
argument_list|)
condition|)
block|{
name|TeraScheduler
name|scheduler
init|=
operator|new
name|TeraScheduler
argument_list|(
name|lastResult
operator|.
name|toArray
argument_list|(
operator|new
name|FileSplit
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lastResult
operator|=
name|scheduler
operator|.
name|getNewFileSplits
argument_list|()
expr_stmt|;
name|t3
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Spent "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms computing TeraScheduler splits."
argument_list|)
expr_stmt|;
block|}
return|return
name|lastResult
return|;
block|}
block|}
end_class

end_unit

