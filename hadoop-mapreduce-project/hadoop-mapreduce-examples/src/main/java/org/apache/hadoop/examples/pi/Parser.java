begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|Bellard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|Bellard
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/** A class for parsing outputs */
end_comment

begin_class
DECL|class|Parser
specifier|public
specifier|final
class|class
name|Parser
block|{
DECL|field|VERBOSE_PROPERTY
specifier|static
specifier|final
name|String
name|VERBOSE_PROPERTY
init|=
literal|"pi.parser.verbose"
decl_stmt|;
DECL|field|isVerbose
specifier|final
name|boolean
name|isVerbose
decl_stmt|;
DECL|method|Parser (boolean isVerbose)
specifier|public
name|Parser
parameter_list|(
name|boolean
name|isVerbose
parameter_list|)
block|{
name|this
operator|.
name|isVerbose
operator|=
name|isVerbose
expr_stmt|;
block|}
DECL|method|println (String s)
specifier|private
name|void
name|println
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|isVerbose
condition|)
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** Parse a line */
DECL|method|parseLine (final String line, Map<Parameter, List<TaskResult>> m)
specifier|private
specifier|static
name|void
name|parseLine
parameter_list|(
specifier|final
name|String
name|line
parameter_list|,
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
comment|//      LOG.info("line = " + line);
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TaskResult
argument_list|>
name|e
init|=
name|DistSum
operator|.
name|string2TaskResult
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|sums
init|=
name|m
operator|.
name|get
argument_list|(
name|Parameter
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sums
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sums == null, line="
operator|+
name|line
operator|+
literal|", e="
operator|+
name|e
argument_list|)
throw|;
name|sums
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse a file or a directory tree */
DECL|method|parse (File f, Map<Parameter, List<TaskResult>> sums)
specifier|private
name|void
name|parse
parameter_list|(
name|File
name|f
parameter_list|,
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|sums
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|println
argument_list|(
literal|"Process directory "
operator|+
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|child
range|:
name|f
operator|.
name|listFiles
argument_list|()
control|)
name|parse
argument_list|(
name|child
argument_list|,
name|sums
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
condition|)
block|{
name|println
argument_list|(
literal|"Parse file "
operator|+
name|f
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
name|m
operator|.
name|put
argument_list|(
name|p
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskResult
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
try|try
block|{
name|parseLine
argument_list|(
name|line
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|combined
init|=
name|Util
operator|.
name|combine
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|combined
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|p
operator|+
literal|" (size="
operator|+
name|combined
operator|.
name|size
argument_list|()
operator|+
literal|"):"
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskResult
name|r
range|:
name|combined
control|)
name|println
argument_list|(
literal|"  "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
name|sums
operator|.
name|get
argument_list|(
name|p
argument_list|)
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Parse a path */
DECL|method|parse (String f)
specifier|private
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|parse
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
name|m
operator|.
name|put
argument_list|(
name|p
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskResult
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|parse
argument_list|(
operator|new
name|File
argument_list|(
name|f
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|//LOG.info("m=" + m.toString().replace(", ", ",\n  "));
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
name|m
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
comment|/** Parse input and re-write results. */
DECL|method|parse (String inputpath, String outputdir )
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|parse
parameter_list|(
name|String
name|inputpath
parameter_list|,
name|String
name|outputdir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//parse input
name|Util
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nParsing "
operator|+
name|inputpath
operator|+
literal|" ... "
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|parsed
init|=
name|parse
argument_list|(
name|inputpath
argument_list|)
decl_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DONE"
argument_list|)
expr_stmt|;
comment|//re-write the results
if|if
condition|(
name|outputdir
operator|!=
literal|null
condition|)
block|{
name|Util
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nWriting to "
operator|+
name|outputdir
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|results
init|=
name|parsed
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|outputdir
argument_list|,
name|p
operator|+
literal|".txt"
argument_list|)
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|println
argument_list|(
name|DistSum
operator|.
name|taskResult2string
argument_list|(
name|p
operator|+
literal|"."
operator|+
name|i
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
return|return
name|parsed
return|;
block|}
comment|/** Combine results */
DECL|method|combine (Map<Parameter, List<T>> m)
specifier|static
parameter_list|<
name|T
extends|extends
name|Combinable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Map
argument_list|<
name|Parameter
argument_list|,
name|T
argument_list|>
name|combine
parameter_list|(
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|T
argument_list|>
name|combined
init|=
operator|new
name|TreeMap
argument_list|<
name|Parameter
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|Parameter
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
name|Util
operator|.
name|combine
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|Util
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%-6s => "
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|results
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|", "
argument_list|,
literal|",\n           "
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
specifier|final
name|T
name|r
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|combined
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|combined
return|;
block|}
comment|/** main */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
argument_list|<
literal|2
operator|||
name|args
operator|.
name|length
argument_list|>
literal|3
condition|)
name|Util
operator|.
name|printUsage
argument_list|(
name|args
argument_list|,
name|Parser
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<b><inputpath> [<outputdir>]"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|b
init|=
name|Util
operator|.
name|string2long
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inputpath
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
specifier|final
name|String
name|outputdir
init|=
name|args
operator|.
name|length
operator|>=
literal|3
condition|?
name|args
index|[
name|i
operator|++
index|]
else|:
literal|null
decl_stmt|;
comment|//read input
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
argument_list|>
name|parsed
init|=
operator|new
name|Parser
argument_list|(
literal|true
argument_list|)
operator|.
name|parse
argument_list|(
name|inputpath
argument_list|,
name|outputdir
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Parameter
argument_list|,
name|TaskResult
argument_list|>
name|combined
init|=
name|combine
argument_list|(
name|parsed
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskResult
name|r
range|:
name|combined
operator|.
name|values
argument_list|()
control|)
name|duration
operator|+=
name|r
operator|.
name|getDuration
argument_list|()
expr_stmt|;
comment|//print pi
specifier|final
name|double
name|pi
init|=
name|Bellard
operator|.
name|computePi
argument_list|(
name|b
argument_list|,
name|combined
argument_list|)
decl_stmt|;
name|Util
operator|.
name|printBitSkipped
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|Util
operator|.
name|pi2string
argument_list|(
name|pi
argument_list|,
name|Bellard
operator|.
name|bit2terms
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cpu time = "
operator|+
name|Util
operator|.
name|millis2String
argument_list|(
name|duration
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

