begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|Summation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskInputOutputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The main class for computing sums using map/reduce jobs.  * A sum is partitioned into jobs.  * A job may be executed on the map-side or on the reduce-side.  * A map-side job has multiple maps and zero reducer.  * A reduce-side job has one map and multiple reducers.  * Depending on the clusters status in runtime,  * a mix-type job may be executed on either side.  */
end_comment

begin_class
DECL|class|DistSum
specifier|public
specifier|final
class|class
name|DistSum
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DistSum
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
name|DistSum
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|N_PARTS
specifier|private
specifier|static
specifier|final
name|String
name|N_PARTS
init|=
literal|"mapreduce.pi."
operator|+
name|NAME
operator|+
literal|".nParts"
decl_stmt|;
comment|/////////////////////////////////////////////////////////////////////////////
comment|/** DistSum job parameters */
DECL|class|Parameters
specifier|static
class|class
name|Parameters
block|{
DECL|field|COUNT
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|6
decl_stmt|;
DECL|field|LIST
specifier|static
specifier|final
name|String
name|LIST
init|=
literal|"<nThreads><nJobs><type><nPart><remoteDir><localDir>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"\n<nThreads> The number of working threads."
operator|+
literal|"\n<nJobs> The number of jobs per sum."
operator|+
literal|"\n<type> 'm' for map side job, 'r' for reduce side job, 'x' for mix type."
operator|+
literal|"\n<nPart> The number of parts per job."
operator|+
literal|"\n<remoteDir> Remote directory for submitting jobs."
operator|+
literal|"\n<localDir> Local directory for storing output files."
decl_stmt|;
comment|/** Number of worker threads */
DECL|field|nThreads
specifier|final
name|int
name|nThreads
decl_stmt|;
comment|/** Number of jobs */
DECL|field|nJobs
specifier|final
name|int
name|nJobs
decl_stmt|;
comment|/** Number of parts per job */
DECL|field|nParts
specifier|final
name|int
name|nParts
decl_stmt|;
comment|/** The machine used in the computation */
DECL|field|machine
specifier|final
name|Machine
name|machine
decl_stmt|;
comment|/** The remote job directory */
DECL|field|remoteDir
specifier|final
name|String
name|remoteDir
decl_stmt|;
comment|/** The local output directory */
DECL|field|localDir
specifier|final
name|File
name|localDir
decl_stmt|;
DECL|method|Parameters (Machine machine, int nThreads, int nJobs, int nParts, String remoteDir, File localDir)
specifier|private
name|Parameters
parameter_list|(
name|Machine
name|machine
parameter_list|,
name|int
name|nThreads
parameter_list|,
name|int
name|nJobs
parameter_list|,
name|int
name|nParts
parameter_list|,
name|String
name|remoteDir
parameter_list|,
name|File
name|localDir
parameter_list|)
block|{
name|this
operator|.
name|machine
operator|=
name|machine
expr_stmt|;
name|this
operator|.
name|nThreads
operator|=
name|nThreads
expr_stmt|;
name|this
operator|.
name|nJobs
operator|=
name|nJobs
expr_stmt|;
name|this
operator|.
name|nParts
operator|=
name|nParts
expr_stmt|;
name|this
operator|.
name|remoteDir
operator|=
name|remoteDir
expr_stmt|;
name|this
operator|.
name|localDir
operator|=
name|localDir
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"\nnThreads  = "
operator|+
name|nThreads
operator|+
literal|"\nnJobs     = "
operator|+
name|nJobs
operator|+
literal|"\nnParts    = "
operator|+
name|nParts
operator|+
literal|" ("
operator|+
name|machine
operator|+
literal|")"
operator|+
literal|"\nremoteDir = "
operator|+
name|remoteDir
operator|+
literal|"\nlocalDir  = "
operator|+
name|localDir
return|;
block|}
comment|/** Parse parameters */
DECL|method|parse (String[] args, int i)
specifier|static
name|Parameters
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|-
name|i
operator|<
name|COUNT
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"args.length - i< COUNT = "
operator|+
name|COUNT
operator|+
literal|", args.length="
operator|+
name|args
operator|.
name|length
operator|+
literal|", i="
operator|+
name|i
operator|+
literal|", args="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
throw|;
specifier|final
name|int
name|nThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nJobs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
specifier|final
name|int
name|nParts
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|remoteDir
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
specifier|final
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"m"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
literal|"r"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
literal|"x"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type="
operator|+
name|type
operator|+
literal|" is not equal to m, r or x"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nParts
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nParts = "
operator|+
name|nParts
operator|+
literal|"<= 0"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nJobs
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nJobs = "
operator|+
name|nJobs
operator|+
literal|"<= 0"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nThreads
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nThreads = "
operator|+
name|nThreads
operator|+
literal|"<= 0"
argument_list|)
throw|;
block|}
name|Util
operator|.
name|checkDirectory
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
return|return
operator|new
name|Parameters
argument_list|(
literal|"m"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|?
name|MapSide
operator|.
name|INSTANCE
else|:
literal|"r"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|?
name|ReduceSide
operator|.
name|INSTANCE
else|:
name|MixMachine
operator|.
name|INSTANCE
argument_list|,
name|nThreads
argument_list|,
name|nJobs
argument_list|,
name|nParts
argument_list|,
name|remoteDir
argument_list|,
name|localDir
argument_list|)
return|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|/** Abstract machine for job execution. */
DECL|class|Machine
specifier|public
specifier|static
specifier|abstract
class|class
name|Machine
block|{
comment|/** Initialize a job */
DECL|method|init (Job job)
specifier|abstract
name|void
name|init
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
comment|/** Compute sigma */
DECL|method|compute (Summation sigma, TaskInputOutputContext<?, ?, NullWritable, TaskResult> context )
specifier|static
name|void
name|compute
parameter_list|(
name|Summation
name|sigma
parameter_list|,
name|TaskInputOutputContext
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|NullWritable
argument_list|,
name|TaskResult
argument_list|>
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|s
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|s
operator|=
literal|"sigma="
operator|+
name|sigma
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sigma
operator|.
name|compute
argument_list|()
expr_stmt|;
specifier|final
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
specifier|final
name|TaskResult
name|result
init|=
operator|new
name|TaskResult
argument_list|(
name|sigma
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|s
operator|=
literal|"result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/** Split for the summations */
DECL|class|SummationSplit
specifier|public
specifier|static
specifier|final
class|class
name|SummationSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
implements|,
name|Container
argument_list|<
name|Summation
argument_list|>
block|{
DECL|field|EMPTY
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|EMPTY
init|=
block|{}
decl_stmt|;
DECL|field|sigma
specifier|private
name|Summation
name|sigma
decl_stmt|;
DECL|method|SummationSplit ()
specifier|public
name|SummationSplit
parameter_list|()
block|{}
DECL|method|SummationSplit (Summation sigma)
specifier|private
name|SummationSplit
parameter_list|(
name|Summation
name|sigma
parameter_list|)
block|{
name|this
operator|.
name|sigma
operator|=
name|sigma
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|Summation
name|getElement
parameter_list|()
block|{
return|return
name|sigma
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|EMPTY
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|sigma
operator|=
name|SummationWritable
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|SummationWritable
argument_list|(
name|sigma
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** An abstract InputFormat for the jobs */
DECL|class|AbstractInputFormat
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractInputFormat
extends|extends
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|SummationWritable
argument_list|>
block|{
comment|/** Specify how to read the records */
annotation|@
name|Override
DECL|method|createRecordReader ( InputSplit generic, TaskAttemptContext context)
specifier|public
specifier|final
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|SummationWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|generic
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
specifier|final
name|SummationSplit
name|split
init|=
operator|(
name|SummationSplit
operator|)
name|generic
decl_stmt|;
comment|//return a record reader
return|return
operator|new
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|SummationWritable
argument_list|>
argument_list|()
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
return|return
operator|!
name|done
condition|?
name|done
operator|=
literal|true
else|:
literal|false
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|NullWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|SummationWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
operator|new
name|SummationWritable
argument_list|(
name|split
operator|.
name|getElement
argument_list|()
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|done
condition|?
literal|1f
else|:
literal|0f
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
return|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    * A machine which does computation on the map side.    */
DECL|class|MapSide
specifier|public
specifier|static
class|class
name|MapSide
extends|extends
name|Machine
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|MapSide
name|INSTANCE
init|=
operator|new
name|MapSide
argument_list|()
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|init (Job job)
specifier|public
name|void
name|init
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
comment|// setup mapper
name|job
operator|.
name|setMapperClass
argument_list|(
name|SummingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|TaskResult
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// zero reducer
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// setup input
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|PartitionInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** An InputFormat which partitions a summation */
DECL|class|PartitionInputFormat
specifier|public
specifier|static
class|class
name|PartitionInputFormat
extends|extends
name|AbstractInputFormat
block|{
comment|/** Partitions the summation into parts and then return them as splits */
annotation|@
name|Override
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
comment|//read sigma from conf
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Summation
name|sigma
init|=
name|SummationWritable
operator|.
name|read
argument_list|(
name|DistSum
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nParts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|N_PARTS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//create splits
specifier|final
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
name|nParts
argument_list|)
decl_stmt|;
specifier|final
name|Summation
index|[]
name|parts
init|=
name|sigma
operator|.
name|partition
argument_list|(
name|nParts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|SummationSplit
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//LOG.info("parts[" + i + "] = " + parts[i]);
block|}
return|return
name|splits
return|;
block|}
block|}
comment|/** A mapper which computes sums */
DECL|class|SummingMapper
specifier|public
specifier|static
class|class
name|SummingMapper
extends|extends
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|SummationWritable
argument_list|,
name|NullWritable
argument_list|,
name|TaskResult
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map (NullWritable nw, SummationWritable sigma, final Context context )
specifier|protected
name|void
name|map
parameter_list|(
name|NullWritable
name|nw
parameter_list|,
name|SummationWritable
name|sigma
parameter_list|,
specifier|final
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|compute
argument_list|(
name|sigma
operator|.
name|getElement
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    * A machine which does computation on the reduce side.    */
DECL|class|ReduceSide
specifier|public
specifier|static
class|class
name|ReduceSide
extends|extends
name|Machine
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|ReduceSide
name|INSTANCE
init|=
operator|new
name|ReduceSide
argument_list|()
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|init (Job job)
specifier|public
name|void
name|init
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
comment|// setup mapper
name|job
operator|.
name|setMapperClass
argument_list|(
name|PartitionMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|SummationWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// setup partitioner
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|IndexPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// setup reducer
name|job
operator|.
name|setReducerClass
argument_list|(
name|SummingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|TaskResult
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nParts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|N_PARTS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|nParts
argument_list|)
expr_stmt|;
comment|// setup input
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SummationInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** An InputFormat which returns a single summation. */
DECL|class|SummationInputFormat
specifier|public
specifier|static
class|class
name|SummationInputFormat
extends|extends
name|AbstractInputFormat
block|{
comment|/** @return a list containing a single split of summation */
annotation|@
name|Override
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
comment|//read sigma from conf
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Summation
name|sigma
init|=
name|SummationWritable
operator|.
name|read
argument_list|(
name|DistSum
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//create splits
specifier|final
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|splits
operator|.
name|add
argument_list|(
operator|new
name|SummationSplit
argument_list|(
name|sigma
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|splits
return|;
block|}
block|}
comment|/** A Mapper which partitions a summation */
DECL|class|PartitionMapper
specifier|public
specifier|static
class|class
name|PartitionMapper
extends|extends
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|SummationWritable
argument_list|,
name|IntWritable
argument_list|,
name|SummationWritable
argument_list|>
block|{
comment|/** Partitions sigma into parts */
annotation|@
name|Override
DECL|method|map (NullWritable nw, SummationWritable sigma, final Context context )
specifier|protected
name|void
name|map
parameter_list|(
name|NullWritable
name|nw
parameter_list|,
name|SummationWritable
name|sigma
parameter_list|,
specifier|final
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nParts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|N_PARTS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Summation
index|[]
name|parts
init|=
name|sigma
operator|.
name|getElement
argument_list|()
operator|.
name|partition
argument_list|(
name|nParts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|context
operator|.
name|write
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|SummationWritable
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"parts["
operator|+
name|i
operator|+
literal|"] = "
operator|+
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Use the index for partitioning. */
DECL|class|IndexPartitioner
specifier|public
specifier|static
class|class
name|IndexPartitioner
extends|extends
name|Partitioner
argument_list|<
name|IntWritable
argument_list|,
name|SummationWritable
argument_list|>
block|{
comment|/** Return the index as the partition. */
annotation|@
name|Override
DECL|method|getPartition (IntWritable index, SummationWritable value, int numPartitions)
specifier|public
name|int
name|getPartition
parameter_list|(
name|IntWritable
name|index
parameter_list|,
name|SummationWritable
name|value
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
return|return
name|index
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|/** A Reducer which computes sums */
DECL|class|SummingReducer
specifier|public
specifier|static
class|class
name|SummingReducer
extends|extends
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|SummationWritable
argument_list|,
name|NullWritable
argument_list|,
name|TaskResult
argument_list|>
block|{
annotation|@
name|Override
DECL|method|reduce (IntWritable index, Iterable<SummationWritable> sums, Context context)
specifier|protected
name|void
name|reduce
parameter_list|(
name|IntWritable
name|index
parameter_list|,
name|Iterable
argument_list|<
name|SummationWritable
argument_list|>
name|sums
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"index="
operator|+
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|SummationWritable
name|sigma
range|:
name|sums
control|)
name|compute
argument_list|(
name|sigma
operator|.
name|getElement
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    * A machine which chooses Machine in runtime according to the cluster status    */
DECL|class|MixMachine
specifier|public
specifier|static
class|class
name|MixMachine
extends|extends
name|Machine
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|MixMachine
name|INSTANCE
init|=
operator|new
name|MixMachine
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|Cluster
name|cluster
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|init (Job job)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|cluster
operator|==
literal|null
condition|)
block|{
name|String
name|jobTrackerStr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|,
literal|"localhost:8012"
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|jobTrackerStr
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|chooseMachine
argument_list|(
name|conf
argument_list|)
operator|.
name|init
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**      * Choose a Machine in runtime according to the cluster status.      */
DECL|method|chooseMachine (Configuration conf)
specifier|private
name|Machine
name|chooseMachine
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|parts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|N_PARTS
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
control|)
block|{
comment|//get cluster status
specifier|final
name|ClusterMetrics
name|status
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
specifier|final
name|int
name|m
init|=
name|status
operator|.
name|getMapSlotCapacity
argument_list|()
operator|-
name|status
operator|.
name|getOccupiedMapSlots
argument_list|()
decl_stmt|;
specifier|final
name|int
name|r
init|=
name|status
operator|.
name|getReduceSlotCapacity
argument_list|()
operator|-
name|status
operator|.
name|getOccupiedReduceSlots
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|>=
name|parts
operator|||
name|r
operator|>=
name|parts
condition|)
block|{
comment|//favor ReduceSide machine
specifier|final
name|Machine
name|value
init|=
name|r
operator|>=
name|parts
condition|?
name|ReduceSide
operator|.
name|INSTANCE
else|:
name|MapSide
operator|.
name|INSTANCE
decl_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|this
operator|+
literal|" is "
operator|+
name|value
operator|+
literal|" (m="
operator|+
name|m
operator|+
literal|", r="
operator|+
name|r
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
DECL|field|timer
specifier|private
specifier|final
name|Util
operator|.
name|Timer
name|timer
init|=
operator|new
name|Util
operator|.
name|Timer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|parameters
specifier|private
name|Parameters
name|parameters
decl_stmt|;
comment|/** Get Parameters */
DECL|method|getParameters ()
name|Parameters
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
comment|/** Set Parameters */
DECL|method|setParameters (Parameters p)
name|void
name|setParameters
parameter_list|(
name|Parameters
name|p
parameter_list|)
block|{
name|parameters
operator|=
name|p
expr_stmt|;
block|}
comment|/** Create a job */
DECL|method|createJob (String name, Summation sigma)
specifier|private
name|Job
name|createJob
parameter_list|(
name|String
name|name
parameter_list|,
name|Summation
name|sigma
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|parameters
operator|.
name|remoteDir
operator|+
literal|"/"
operator|+
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|jobconf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|DistSum
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setInt
argument_list|(
name|N_PARTS
argument_list|,
name|parameters
operator|.
name|nParts
argument_list|)
expr_stmt|;
name|SummationWritable
operator|.
name|write
argument_list|(
name|sigma
argument_list|,
name|DistSum
operator|.
name|class
argument_list|,
name|jobconf
argument_list|)
expr_stmt|;
comment|// disable task timeout
name|jobconf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// do not use speculative execution
name|jobconf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|/** Start a job to compute sigma */
DECL|method|compute (final String name, Summation sigma)
specifier|private
name|void
name|compute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|Summation
name|sigma
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sigma
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"sigma.getValue() != null, sigma="
operator|+
name|sigma
argument_list|)
throw|;
comment|//setup remote directory
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|parameters
operator|.
name|remoteDir
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|createNonexistingDirectory
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
condition|)
return|return;
comment|//setup a job
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|(
name|name
argument_list|,
name|sigma
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
comment|//start a map/reduce job
specifier|final
name|String
name|startmessage
init|=
literal|"steps/parts = "
operator|+
name|sigma
operator|.
name|E
operator|.
name|getSteps
argument_list|()
operator|+
literal|"/"
operator|+
name|parameters
operator|.
name|nParts
operator|+
literal|" = "
operator|+
name|Util
operator|.
name|long2string
argument_list|(
name|sigma
operator|.
name|E
operator|.
name|getSteps
argument_list|()
operator|/
name|parameters
operator|.
name|nParts
argument_list|)
decl_stmt|;
name|Util
operator|.
name|runJob
argument_list|(
name|name
argument_list|,
name|job
argument_list|,
name|parameters
operator|.
name|machine
argument_list|,
name|startmessage
argument_list|,
name|timer
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|results
init|=
name|Util
operator|.
name|readJobOutputs
argument_list|(
name|fs
argument_list|,
name|outdir
argument_list|)
decl_stmt|;
name|Util
operator|.
name|writeResults
argument_list|(
name|name
argument_list|,
name|results
argument_list|,
name|fs
argument_list|,
name|parameters
operator|.
name|remoteDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//combine results
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|combined
init|=
name|Util
operator|.
name|combine
argument_list|(
name|results
argument_list|)
decl_stmt|;
specifier|final
name|PrintWriter
name|out
init|=
name|Util
operator|.
name|createWriter
argument_list|(
name|parameters
operator|.
name|localDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|TaskResult
name|r
range|:
name|combined
control|)
block|{
specifier|final
name|String
name|s
init|=
name|taskResult2string
argument_list|(
name|name
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|combined
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Summation
name|s
init|=
name|combined
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|sigma
operator|.
name|contains
argument_list|(
name|s
argument_list|)
operator|&&
name|s
operator|.
name|contains
argument_list|(
name|sigma
argument_list|)
condition|)
name|sigma
operator|.
name|setValue
argument_list|(
name|s
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Convert a TaskResult to a String */
DECL|method|taskResult2string (String name, TaskResult result)
specifier|public
specifier|static
name|String
name|taskResult2string
parameter_list|(
name|String
name|name
parameter_list|,
name|TaskResult
name|result
parameter_list|)
block|{
return|return
name|NAME
operator|+
literal|" "
operator|+
name|name
operator|+
literal|"> "
operator|+
name|result
return|;
block|}
comment|/** Convert a String to a (String, TaskResult) pair */
DECL|method|string2TaskResult (final String s)
specifier|public
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TaskResult
argument_list|>
name|string2TaskResult
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
comment|//  LOG.info("line = " + line);
name|int
name|j
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
name|int
name|i
init|=
name|j
operator|+
name|NAME
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|j
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"> "
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
specifier|final
name|TaskResult
name|value
init|=
name|TaskResult
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|j
operator|+
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TaskResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskResult
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskResult
name|setValue
parameter_list|(
name|TaskResult
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Callable computation */
DECL|class|Computation
class|class
name|Computation
implements|implements
name|Callable
argument_list|<
name|Computation
argument_list|>
block|{
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|sigma
specifier|private
specifier|final
name|Summation
name|sigma
decl_stmt|;
DECL|method|Computation (int index, String name, Summation sigma)
name|Computation
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|Summation
name|sigma
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|sigma
operator|=
name|sigma
expr_stmt|;
block|}
comment|/** @return The job name */
DECL|method|getJobName ()
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s.job%03d"
argument_list|,
name|name
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getJobName
argument_list|()
operator|+
name|sigma
return|;
block|}
comment|/** Start the computation */
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Computation
name|call
parameter_list|()
block|{
if|if
condition|(
name|sigma
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
try|try
block|{
name|compute
argument_list|(
name|getJobName
argument_list|()
argument_list|,
name|sigma
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Got an exception from "
operator|+
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|Util
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
comment|/** Partition sigma and execute the computations. */
DECL|method|execute (String name, Summation sigma)
specifier|private
name|Summation
name|execute
parameter_list|(
name|String
name|name
parameter_list|,
name|Summation
name|sigma
parameter_list|)
block|{
specifier|final
name|Summation
index|[]
name|summations
init|=
name|sigma
operator|.
name|partition
argument_list|(
name|parameters
operator|.
name|nJobs
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Computation
argument_list|>
name|computations
init|=
operator|new
name|ArrayList
argument_list|<
name|Computation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|summations
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|computations
operator|.
name|add
argument_list|(
operator|new
name|Computation
argument_list|(
name|i
argument_list|,
name|name
argument_list|,
name|summations
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Util
operator|.
name|execute
argument_list|(
name|parameters
operator|.
name|nThreads
argument_list|,
name|computations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|combined
init|=
name|Util
operator|.
name|combine
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|summations
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|combined
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|combined
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|//parse arguments
if|if
condition|(
name|args
operator|.
name|length
operator|!=
name|Parameters
operator|.
name|COUNT
operator|+
literal|2
condition|)
return|return
name|Util
operator|.
name|printUsage
argument_list|(
name|args
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<name><sigma> "
operator|+
name|Parameters
operator|.
name|LIST
operator|+
literal|"\n<name> The name."
operator|+
literal|"\n<sigma> The summation."
operator|+
name|Parameters
operator|.
name|DESCRIPTION
argument_list|)
return|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
specifier|final
name|Summation
name|sigma
init|=
name|Summation
operator|.
name|valueOf
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
name|setParameters
argument_list|(
name|DistSum
operator|.
name|Parameters
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"name  = "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sigma = "
operator|+
name|sigma
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|//run jobs
specifier|final
name|Summation
name|result
init|=
name|execute
argument_list|(
name|name
argument_list|,
name|sigma
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|equals
argument_list|(
name|sigma
argument_list|)
condition|)
block|{
name|sigma
operator|.
name|setValue
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|tick
argument_list|(
literal|"\n\nDONE\n\nsigma="
operator|+
name|sigma
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|timer
operator|.
name|tick
argument_list|(
literal|"\n\nDONE WITH ERROR\n\nresult="
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|/** main */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
literal|null
argument_list|,
operator|new
name|DistSum
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

