begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|Summation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/** A class for map task results or reduce task results. */
end_comment

begin_class
DECL|class|TaskResult
specifier|public
class|class
name|TaskResult
implements|implements
name|Container
argument_list|<
name|Summation
argument_list|>
implements|,
name|Combinable
argument_list|<
name|TaskResult
argument_list|>
implements|,
name|Writable
block|{
DECL|field|sigma
specifier|private
name|Summation
name|sigma
decl_stmt|;
DECL|field|duration
specifier|private
name|long
name|duration
decl_stmt|;
DECL|method|TaskResult ()
specifier|public
name|TaskResult
parameter_list|()
block|{}
DECL|method|TaskResult (Summation sigma, long duration)
name|TaskResult
parameter_list|(
name|Summation
name|sigma
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|this
operator|.
name|sigma
operator|=
name|sigma
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|Summation
name|getElement
parameter_list|()
block|{
return|return
name|sigma
return|;
block|}
comment|/** @return The time duration used */
DECL|method|getDuration ()
name|long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|compareTo (TaskResult that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|TaskResult
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|sigma
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|sigma
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|TaskResult
condition|)
block|{
specifier|final
name|TaskResult
name|that
init|=
operator|(
name|TaskResult
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|that
argument_list|)
operator|==
literal|0
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|obj
operator|==
literal|null
condition|?
literal|"obj == null"
else|:
literal|"obj.getClass()="
operator|+
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/** Not supported. */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|combine (TaskResult that)
specifier|public
name|TaskResult
name|combine
parameter_list|(
name|TaskResult
name|that
parameter_list|)
block|{
specifier|final
name|Summation
name|s
init|=
name|sigma
operator|.
name|combine
argument_list|(
name|that
operator|.
name|sigma
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TaskResult
argument_list|(
name|s
argument_list|,
name|this
operator|.
name|duration
operator|+
name|that
operator|.
name|duration
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|sigma
operator|=
name|SummationWritable
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|duration
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|SummationWritable
operator|.
name|write
argument_list|(
name|sigma
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"sigma="
operator|+
name|sigma
operator|+
literal|", duration="
operator|+
name|duration
operator|+
literal|"("
operator|+
name|Util
operator|.
name|millis2String
argument_list|(
name|duration
argument_list|)
operator|+
literal|")"
return|;
block|}
comment|/** Covert a String to a TaskResult. */
DECL|method|valueOf (String s)
specifier|public
specifier|static
name|TaskResult
name|valueOf
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|", duration="
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|", j="
operator|+
name|j
operator|+
literal|"< 0, s="
operator|+
name|s
argument_list|)
throw|;
specifier|final
name|Summation
name|sigma
init|=
name|Summation
operator|.
name|valueOf
argument_list|(
name|Util
operator|.
name|parseStringVariable
argument_list|(
literal|"sigma"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|j
operator|+
literal|2
expr_stmt|;
name|j
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|", j="
operator|+
name|j
operator|+
literal|"< 0, s="
operator|+
name|s
argument_list|)
throw|;
specifier|final
name|long
name|duration
init|=
name|Util
operator|.
name|parseLongVariable
argument_list|(
literal|"duration"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TaskResult
argument_list|(
name|sigma
argument_list|,
name|duration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

