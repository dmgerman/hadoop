begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|DistSum
operator|.
name|Machine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/** Utility methods */
end_comment

begin_class
DECL|class|Util
specifier|public
class|class
name|Util
block|{
comment|/** Output stream */
DECL|field|out
specifier|public
specifier|static
specifier|final
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
comment|/** Error stream */
DECL|field|err
specifier|public
specifier|static
specifier|final
name|PrintStream
name|err
init|=
name|System
operator|.
name|out
decl_stmt|;
comment|/** Timer */
DECL|class|Timer
specifier|public
specifier|static
class|class
name|Timer
block|{
DECL|field|isAccumulative
specifier|private
specifier|final
name|boolean
name|isAccumulative
decl_stmt|;
DECL|field|start
specifier|private
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|previous
specifier|private
name|long
name|previous
init|=
name|start
decl_stmt|;
comment|/** Timer constructor      * @param isAccumulative  Is accumulating the time duration?      */
DECL|method|Timer (boolean isAccumulative)
specifier|public
name|Timer
parameter_list|(
name|boolean
name|isAccumulative
parameter_list|)
block|{
name|this
operator|.
name|isAccumulative
operator|=
name|isAccumulative
expr_stmt|;
specifier|final
name|StackTraceElement
index|[]
name|stack
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
specifier|final
name|StackTraceElement
name|e
init|=
name|stack
index|[
name|stack
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|" started at "
operator|+
operator|new
name|Date
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Same as tick(null). */
DECL|method|tick ()
specifier|public
name|long
name|tick
parameter_list|()
block|{
return|return
name|tick
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Tick      * @param s Output message.  No output if it is null.      * @return delta      */
DECL|method|tick (String s)
specifier|public
specifier|synchronized
name|long
name|tick
parameter_list|(
name|String
name|s
parameter_list|)
block|{
specifier|final
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|delta
init|=
name|t
operator|-
operator|(
name|isAccumulative
condition|?
name|start
else|:
name|previous
operator|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|format
argument_list|(
literal|"%15dms (=%-15s: %s%n"
argument_list|,
name|delta
argument_list|,
name|millis2String
argument_list|(
name|delta
argument_list|)
operator|+
literal|")"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|previous
operator|=
name|t
expr_stmt|;
return|return
name|delta
return|;
block|}
block|}
comment|/** Covert milliseconds to a String. */
DECL|method|millis2String (long n)
specifier|public
specifier|static
name|String
name|millis2String
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
return|return
literal|"-"
operator|+
name|millis2String
argument_list|(
operator|-
name|n
argument_list|)
return|;
elseif|else
if|if
condition|(
name|n
operator|<
literal|1000
condition|)
return|return
name|n
operator|+
literal|"ms"
return|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|millis
init|=
call|(
name|int
call|)
argument_list|(
name|n
operator|%
literal|1000L
argument_list|)
decl_stmt|;
if|if
condition|(
name|millis
operator|!=
literal|0
condition|)
name|b
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|".%03d"
argument_list|,
name|millis
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|n
operator|/=
literal|1000
operator|)
operator|<
literal|60
condition|)
return|return
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|":%02d"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|n
operator|%
literal|60L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|n
operator|/=
literal|60
operator|)
operator|<
literal|60
condition|)
return|return
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
operator|.
name|toString
argument_list|()
return|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|":%02d"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|n
operator|%
literal|60L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|n
operator|/=
literal|60
operator|)
operator|<
literal|24
condition|)
return|return
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
operator|.
name|toString
argument_list|()
return|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
operator|%
literal|24L
argument_list|)
expr_stmt|;
specifier|final
name|int
name|days
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|n
operator|/=
literal|24
operator|)
operator|%
literal|365L
argument_list|)
decl_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|days
operator|==
literal|1
condition|?
literal|" day "
else|:
literal|" days "
argument_list|)
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|days
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|n
operator|/=
literal|365L
operator|)
operator|>
literal|0
condition|)
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
operator|==
literal|1
condition|?
literal|" year "
else|:
literal|" years "
argument_list|)
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Covert a String to a long.      * This support comma separated number format.    */
DECL|method|string2long (String s)
specifier|public
specifier|static
name|long
name|string2long
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|/** Covert a long to a String in comma separated number format. */
DECL|method|long2string (long n)
specifier|public
specifier|static
name|String
name|long2string
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
return|return
literal|"-"
operator|+
name|long2string
argument_list|(
operator|-
name|n
argument_list|)
return|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|n
operator|>=
literal|1000
condition|;
name|n
operator|=
name|n
operator|/
literal|1000
control|)
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|",%03d"
argument_list|,
name|n
operator|%
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|n
operator|+
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Parse a variable. */
DECL|method|parseLongVariable (final String name, final String s)
specifier|public
specifier|static
name|long
name|parseLongVariable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|s
parameter_list|)
block|{
return|return
name|string2long
argument_list|(
name|parseStringVariable
argument_list|(
name|name
argument_list|,
name|s
argument_list|)
argument_list|)
return|;
block|}
comment|/** Parse a variable. */
DECL|method|parseStringVariable (final String name, final String s)
specifier|public
specifier|static
name|String
name|parseStringVariable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|name
operator|+
literal|'='
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"!s.startsWith(name + '='), name="
operator|+
name|name
operator|+
literal|", s="
operator|+
name|s
argument_list|)
throw|;
return|return
name|s
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/** Execute the callables by a number of threads */
DECL|method|execute (int nThreads, List<E> callables )
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|E
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|execute
parameter_list|(
name|int
name|nThreads
parameter_list|,
name|List
argument_list|<
name|E
argument_list|>
name|callables
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futures
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/** Print usage messages */
DECL|method|printUsage (String[] args, String usage)
specifier|public
specifier|static
name|int
name|printUsage
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|usage
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"args = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|usage
argument_list|)
expr_stmt|;
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|/** Combine a list of items. */
DECL|method|combine (Collection<T> items)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Combinable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|combine
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|items
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|items
argument_list|)
decl_stmt|;
if|if
condition|(
name|sorted
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
name|sorted
return|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|combined
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|items
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|T
name|prev
init|=
name|sorted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sorted
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|T
name|curr
init|=
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|T
name|c
init|=
name|curr
operator|.
name|combine
argument_list|(
name|prev
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|prev
operator|=
name|c
expr_stmt|;
else|else
block|{
name|combined
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
block|}
name|combined
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
return|return
name|combined
return|;
block|}
comment|/** Check local directory. */
DECL|method|checkDirectory (File dir)
specifier|public
specifier|static
name|void
name|checkDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"!dir.mkdirs(), dir="
operator|+
name|dir
argument_list|)
throw|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dir (="
operator|+
name|dir
operator|+
literal|") is not a directory."
argument_list|)
throw|;
block|}
comment|/** Create a writer of a local file. */
DECL|method|createWriter (File dir, String prefix)
specifier|public
specifier|static
name|PrintWriter
name|createWriter
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|checkDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"-yyyyMMdd-HHmmssSSS"
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|prefix
operator|+
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
return|return
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
comment|/** Print a "bits skipped" message. */
DECL|method|printBitSkipped (final long b)
specifier|public
specifier|static
name|void
name|printBitSkipped
parameter_list|(
specifier|final
name|long
name|b
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"b = "
operator|+
name|long2string
argument_list|(
name|b
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|b
operator|<
literal|2
condition|?
literal|"bit"
else|:
literal|"bits"
operator|)
operator|+
literal|" skipped)"
argument_list|)
expr_stmt|;
block|}
comment|/** Convert a pi value to a String. */
DECL|method|pi2string (final double pi, final long terms)
specifier|public
specifier|static
name|String
name|pi2string
parameter_list|(
specifier|final
name|double
name|pi
parameter_list|,
specifier|final
name|long
name|terms
parameter_list|)
block|{
specifier|final
name|long
name|value
init|=
call|(
name|long
call|)
argument_list|(
name|pi
operator|*
operator|(
literal|1L
operator|<<
name|DOUBLE_PRECISION
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|acc_bit
init|=
name|accuracy
argument_list|(
name|terms
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|acc_hex
init|=
name|acc_bit
operator|/
literal|4
decl_stmt|;
specifier|final
name|int
name|shift
init|=
name|DOUBLE_PRECISION
operator|-
name|acc_bit
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%0"
operator|+
name|acc_hex
operator|+
literal|"X %0"
operator|+
operator|(
literal|13
operator|-
name|acc_hex
operator|)
operator|+
literal|"X (%d hex digits)"
argument_list|,
name|value
operator|>>
name|shift
argument_list|,
name|value
operator|&
operator|(
operator|(
literal|1
operator|<<
name|shift
operator|)
operator|-
literal|1
operator|)
argument_list|,
name|acc_hex
argument_list|)
return|;
block|}
DECL|field|DOUBLE_PRECISION
specifier|static
specifier|final
name|int
name|DOUBLE_PRECISION
init|=
literal|52
decl_stmt|;
comment|//mantissa size
DECL|field|MACHEPS_EXPONENT
specifier|static
specifier|final
name|int
name|MACHEPS_EXPONENT
init|=
name|DOUBLE_PRECISION
operator|+
literal|1
decl_stmt|;
comment|/** Estimate accuracy. */
DECL|method|accuracy (final long terms, boolean print)
specifier|public
specifier|static
name|int
name|accuracy
parameter_list|(
specifier|final
name|long
name|terms
parameter_list|,
name|boolean
name|print
parameter_list|)
block|{
specifier|final
name|double
name|error
init|=
name|terms
operator|<=
literal|0
condition|?
literal|2
else|:
operator|(
name|Math
operator|.
name|log
argument_list|(
name|terms
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|)
operator|/
literal|2
decl_stmt|;
specifier|final
name|int
name|bits
init|=
name|MACHEPS_EXPONENT
operator|-
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|print
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"accuracy: bits="
operator|+
name|bits
operator|+
literal|", terms="
operator|+
name|long2string
argument_list|(
name|terms
argument_list|)
operator|+
literal|", error exponent="
operator|+
name|error
argument_list|)
expr_stmt|;
return|return
name|bits
operator|-
name|bits
operator|%
literal|4
return|;
block|}
DECL|field|JOB_SEPARATION_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|JOB_SEPARATION_PROPERTY
init|=
literal|"pi.job.separation.seconds"
decl_stmt|;
DECL|field|JOB_SEMAPHORE
specifier|private
specifier|static
specifier|final
name|Semaphore
name|JOB_SEMAPHORE
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/** Run a job. */
DECL|method|runJob (String name, Job job, Machine machine, String startmessage, Util.Timer timer)
specifier|static
name|void
name|runJob
parameter_list|(
name|String
name|name
parameter_list|,
name|Job
name|job
parameter_list|,
name|Machine
name|machine
parameter_list|,
name|String
name|startmessage
parameter_list|,
name|Util
operator|.
name|Timer
name|timer
parameter_list|)
block|{
name|JOB_SEMAPHORE
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|Long
name|starttime
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|starttime
operator|=
name|timer
operator|.
name|tick
argument_list|(
literal|"starting "
operator|+
name|name
operator|+
literal|" ...\n  "
operator|+
name|startmessage
argument_list|)
expr_stmt|;
comment|//initialize and submit a job
name|machine
operator|.
name|init
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Separate jobs
specifier|final
name|long
name|sleeptime
init|=
literal|1000L
operator|*
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|JOB_SEPARATION_PROPERTY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleeptime
operator|>
literal|0
condition|)
block|{
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|"> sleep("
operator|+
name|Util
operator|.
name|millis2String
argument_list|(
name|sleeptime
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleeptime
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|JOB_SEMAPHORE
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" failed."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|instanceof
name|RuntimeException
condition|?
operator|(
name|RuntimeException
operator|)
name|e
else|:
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|starttime
operator|!=
literal|null
condition|)
name|timer
operator|.
name|tick
argument_list|(
name|name
operator|+
literal|"> timetaken="
operator|+
name|Util
operator|.
name|millis2String
argument_list|(
name|timer
operator|.
name|tick
argument_list|()
operator|-
name|starttime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Read job outputs */
DECL|method|readJobOutputs (FileSystem fs, Path outdir)
specifier|static
name|List
argument_list|<
name|TaskResult
argument_list|>
name|readJobOutputs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|outdir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|TaskResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|outdir
argument_list|)
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"part-"
argument_list|)
condition|)
block|{
specifier|final
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
name|results
operator|.
name|add
argument_list|(
name|TaskResult
operator|.
name|valueOf
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Output not found"
argument_list|)
throw|;
return|return
name|results
return|;
block|}
comment|/** Write results */
DECL|method|writeResults (String name, List<TaskResult> results, FileSystem fs, String dir)
specifier|static
name|void
name|writeResults
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|TaskResult
argument_list|>
name|results
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|outfile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|name
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|"> writing results to "
operator|+
name|outfile
argument_list|)
expr_stmt|;
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|outfile
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|TaskResult
name|r
range|:
name|results
control|)
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Create a directory. */
DECL|method|createNonexistingDirectory (FileSystem fs, Path dir)
specifier|static
name|boolean
name|createNonexistingDirectory
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|Util
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"dir (= "
operator|+
name|dir
operator|+
literal|") already exists."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create working directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

