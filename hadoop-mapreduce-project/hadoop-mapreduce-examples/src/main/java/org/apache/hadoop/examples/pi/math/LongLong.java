begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_comment
comment|/** Support 124-bit integer arithmetic. */
end_comment

begin_class
DECL|class|LongLong
class|class
name|LongLong
block|{
DECL|field|BITS_PER_LONG
specifier|static
specifier|final
name|int
name|BITS_PER_LONG
init|=
literal|62
decl_stmt|;
DECL|field|MID
specifier|static
specifier|final
name|int
name|MID
init|=
name|BITS_PER_LONG
operator|>>
literal|1
decl_stmt|;
DECL|field|SIZE
specifier|static
specifier|final
name|int
name|SIZE
init|=
name|BITS_PER_LONG
operator|<<
literal|1
decl_stmt|;
DECL|field|FULL_MASK
specifier|static
specifier|final
name|long
name|FULL_MASK
init|=
operator|(
literal|1L
operator|<<
name|BITS_PER_LONG
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|LOWER_MASK
specifier|static
specifier|final
name|long
name|LOWER_MASK
init|=
name|FULL_MASK
operator|>>>
name|MID
decl_stmt|;
DECL|field|UPPER_MASK
specifier|static
specifier|final
name|long
name|UPPER_MASK
init|=
name|LOWER_MASK
operator|<<
name|MID
decl_stmt|;
DECL|field|d0
specifier|private
name|long
name|d0
decl_stmt|;
DECL|field|d1
specifier|private
name|long
name|d1
decl_stmt|;
comment|/** Set the values. */
DECL|method|set (long d0, long d1)
name|LongLong
name|set
parameter_list|(
name|long
name|d0
parameter_list|,
name|long
name|d1
parameter_list|)
block|{
name|this
operator|.
name|d0
operator|=
name|d0
expr_stmt|;
name|this
operator|.
name|d1
operator|=
name|d1
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** And operation (&). */
DECL|method|and (long mask)
name|long
name|and
parameter_list|(
name|long
name|mask
parameter_list|)
block|{
return|return
name|d0
operator|&
name|mask
return|;
block|}
comment|/** Shift right operation (<<). */
DECL|method|shiftRight (int n)
name|long
name|shiftRight
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|d1
operator|<<
operator|(
name|BITS_PER_LONG
operator|-
name|n
operator|)
operator|)
operator|+
operator|(
name|d0
operator|>>>
name|n
operator|)
return|;
block|}
comment|/** Plus equal operation (+=). */
DECL|method|plusEqual (LongLong that)
name|LongLong
name|plusEqual
parameter_list|(
name|LongLong
name|that
parameter_list|)
block|{
name|this
operator|.
name|d0
operator|+=
name|that
operator|.
name|d0
expr_stmt|;
name|this
operator|.
name|d1
operator|+=
name|that
operator|.
name|d1
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Convert this to a BigInteger. */
DECL|method|toBigInteger ()
name|BigInteger
name|toBigInteger
parameter_list|()
block|{
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|d1
argument_list|)
operator|.
name|shiftLeft
argument_list|(
name|BITS_PER_LONG
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|d0
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|int
name|remainder
init|=
name|BITS_PER_LONG
operator|%
literal|4
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%x*2^%d + %016x"
argument_list|,
name|d1
operator|<<
name|remainder
argument_list|,
name|BITS_PER_LONG
operator|-
name|remainder
argument_list|,
name|d0
argument_list|)
return|;
block|}
comment|/** Compute a*b and store the result to r.    * @return r    */
DECL|method|multiplication (final LongLong r, final long a, final long b)
specifier|static
name|LongLong
name|multiplication
parameter_list|(
specifier|final
name|LongLong
name|r
parameter_list|,
specifier|final
name|long
name|a
parameter_list|,
specifier|final
name|long
name|b
parameter_list|)
block|{
comment|/*     final long x0 = a& LOWER_MASK;     final long x1 = (a& UPPER_MASK)>> MID;      final long y0 = b& LOWER_MASK;     final long y1 = (b& UPPER_MASK)>> MID;      final long t = (x0 + x1)*(y0 + y1);     final long u = (x0 - x1)*(y0 - y1);     final long v = x1*y1;      final long tmp = (t - u)>>>1;     result.d0 = ((t + u)>>>1) - v + ((tmp<< MID)& FULL_MASK);;     result.d1 = v + (tmp>> MID);     return result;     */
specifier|final
name|long
name|a_lower
init|=
name|a
operator|&
name|LOWER_MASK
decl_stmt|;
specifier|final
name|long
name|a_upper
init|=
operator|(
name|a
operator|&
name|UPPER_MASK
operator|)
operator|>>
name|MID
decl_stmt|;
specifier|final
name|long
name|b_lower
init|=
name|b
operator|&
name|LOWER_MASK
decl_stmt|;
specifier|final
name|long
name|b_upper
init|=
operator|(
name|b
operator|&
name|UPPER_MASK
operator|)
operator|>>
name|MID
decl_stmt|;
specifier|final
name|long
name|tmp
init|=
name|a_lower
operator|*
name|b_upper
operator|+
name|a_upper
operator|*
name|b_lower
decl_stmt|;
name|r
operator|.
name|d0
operator|=
name|a_lower
operator|*
name|b_lower
operator|+
operator|(
operator|(
name|tmp
operator|<<
name|MID
operator|)
operator|&
name|FULL_MASK
operator|)
expr_stmt|;
name|r
operator|.
name|d1
operator|=
name|a_upper
operator|*
name|b_upper
operator|+
operator|(
name|tmp
operator|>>
name|MID
operator|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

