begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|dancing
operator|.
name|DistributedPentomino
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|dancing
operator|.
name|Sudoku
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|DistBbp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
operator|.
name|TeraGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
operator|.
name|TeraSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
operator|.
name|TeraValidate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ProgramDriver
import|;
end_import

begin_comment
comment|/**  * A description of an example program based on its class and a   * human-readable description.  */
end_comment

begin_class
DECL|class|ExampleDriver
specifier|public
class|class
name|ExampleDriver
block|{
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|ProgramDriver
name|pgd
init|=
operator|new
name|ProgramDriver
argument_list|()
decl_stmt|;
try|try
block|{
name|pgd
operator|.
name|addClass
argument_list|(
literal|"wordcount"
argument_list|,
name|WordCount
operator|.
name|class
argument_list|,
literal|"A map/reduce program that counts the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"wordmean"
argument_list|,
name|WordMean
operator|.
name|class
argument_list|,
literal|"A map/reduce program that counts the average length of the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"wordmedian"
argument_list|,
name|WordMedian
operator|.
name|class
argument_list|,
literal|"A map/reduce program that counts the median length of the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"wordstandarddeviation"
argument_list|,
name|WordStandardDeviation
operator|.
name|class
argument_list|,
literal|"A map/reduce program that counts the standard deviation of the length of the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"aggregatewordcount"
argument_list|,
name|AggregateWordCount
operator|.
name|class
argument_list|,
literal|"An Aggregate based map/reduce program that counts the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"aggregatewordhist"
argument_list|,
name|AggregateWordHistogram
operator|.
name|class
argument_list|,
literal|"An Aggregate based map/reduce program that computes the histogram of the words in the input files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"grep"
argument_list|,
name|Grep
operator|.
name|class
argument_list|,
literal|"A map/reduce program that counts the matches of a regex in the input."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"randomwriter"
argument_list|,
name|RandomWriter
operator|.
name|class
argument_list|,
literal|"A map/reduce program that writes 10GB of random data per node."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"randomtextwriter"
argument_list|,
name|RandomTextWriter
operator|.
name|class
argument_list|,
literal|"A map/reduce program that writes 10GB of random textual data per node."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"sort"
argument_list|,
name|Sort
operator|.
name|class
argument_list|,
literal|"A map/reduce program that sorts the data written by the random writer."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"pi"
argument_list|,
name|QuasiMonteCarlo
operator|.
name|class
argument_list|,
name|QuasiMonteCarlo
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"bbp"
argument_list|,
name|BaileyBorweinPlouffe
operator|.
name|class
argument_list|,
name|BaileyBorweinPlouffe
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"distbbp"
argument_list|,
name|DistBbp
operator|.
name|class
argument_list|,
name|DistBbp
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"pentomino"
argument_list|,
name|DistributedPentomino
operator|.
name|class
argument_list|,
literal|"A map/reduce tile laying program to find solutions to pentomino problems."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"secondarysort"
argument_list|,
name|SecondarySort
operator|.
name|class
argument_list|,
literal|"An example defining a secondary sort to the reduce."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"sudoku"
argument_list|,
name|Sudoku
operator|.
name|class
argument_list|,
literal|"A sudoku solver."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"join"
argument_list|,
name|Join
operator|.
name|class
argument_list|,
literal|"A job that effects a join over sorted, equally partitioned datasets"
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"multifilewc"
argument_list|,
name|MultiFileWordCount
operator|.
name|class
argument_list|,
literal|"A job that counts words from several files."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"dbcount"
argument_list|,
name|DBCountPageView
operator|.
name|class
argument_list|,
literal|"An example job that count the pageview counts from a database."
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"teragen"
argument_list|,
name|TeraGen
operator|.
name|class
argument_list|,
literal|"Generate data for the terasort"
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"terasort"
argument_list|,
name|TeraSort
operator|.
name|class
argument_list|,
literal|"Run the terasort"
argument_list|)
expr_stmt|;
name|pgd
operator|.
name|addClass
argument_list|(
literal|"teravalidate"
argument_list|,
name|TeraValidate
operator|.
name|class
argument_list|,
literal|"Checking results of terasort"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|pgd
operator|.
name|driver
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

