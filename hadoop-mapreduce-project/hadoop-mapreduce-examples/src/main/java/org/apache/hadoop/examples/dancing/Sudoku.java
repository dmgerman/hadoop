begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.dancing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|dancing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * This class uses the dancing links algorithm from Knuth to solve sudoku  * puzzles. It has solved 42x42 puzzles in 1.02 seconds.  */
end_comment

begin_class
DECL|class|Sudoku
specifier|public
class|class
name|Sudoku
block|{
comment|/**    * The preset values in the board    * board[y][x] is the value at x,y with -1 = any    */
DECL|field|board
specifier|private
name|int
index|[]
index|[]
name|board
decl_stmt|;
comment|/**    * The size of the board    */
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
comment|/**    * The size of the sub-squares in cells across    */
DECL|field|squareXSize
specifier|private
name|int
name|squareXSize
decl_stmt|;
comment|/**    * The size of the sub-squares in celss up and down    */
DECL|field|squareYSize
specifier|private
name|int
name|squareYSize
decl_stmt|;
comment|/**    * This interface is a marker class for the columns created for the    * Sudoku solver.    */
DECL|interface|ColumnName
specifier|protected
specifier|static
interface|interface
name|ColumnName
block|{
comment|// NOTHING
block|}
comment|/**    * A string containing a representation of the solution.    * @param size the size of the board    * @param solution a list of list of column names    * @return a string of the solution matrix    */
DECL|method|stringifySolution (int size, List<List<ColumnName>> solution)
specifier|static
name|String
name|stringifySolution
parameter_list|(
name|int
name|size
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|ColumnName
argument_list|>
argument_list|>
name|solution
parameter_list|)
block|{
name|int
index|[]
index|[]
name|picture
init|=
operator|new
name|int
index|[
name|size
index|]
index|[
name|size
index|]
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// go through the rows selected in the model and build a picture of the
comment|// solution.
for|for
control|(
name|List
argument_list|<
name|ColumnName
argument_list|>
name|row
range|:
name|solution
control|)
block|{
name|int
name|x
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|y
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|num
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ColumnName
name|item
range|:
name|row
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|ColumnConstraint
condition|)
block|{
name|x
operator|=
operator|(
operator|(
name|ColumnConstraint
operator|)
name|item
operator|)
operator|.
name|column
expr_stmt|;
name|num
operator|=
operator|(
operator|(
name|ColumnConstraint
operator|)
name|item
operator|)
operator|.
name|num
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|RowConstraint
condition|)
block|{
name|y
operator|=
operator|(
operator|(
name|RowConstraint
operator|)
name|item
operator|)
operator|.
name|row
expr_stmt|;
block|}
block|}
name|picture
index|[
name|y
index|]
index|[
name|x
index|]
operator|=
name|num
expr_stmt|;
block|}
comment|// build the string
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|size
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
operator|++
name|x
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|picture
index|[
name|y
index|]
index|[
name|x
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * An acceptor to get the solutions to the puzzle as they are generated and    * print them to the console.    */
DECL|class|SolutionPrinter
specifier|private
specifier|static
class|class
name|SolutionPrinter
implements|implements
name|DancingLinks
operator|.
name|SolutionAcceptor
argument_list|<
name|ColumnName
argument_list|>
block|{
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|method|SolutionPrinter (int size)
specifier|public
name|SolutionPrinter
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/**      * A debugging aid that just prints the raw information about the       * dancing link columns that were selected for each row.      * @param solution a list of list of column names      */
DECL|method|rawWrite (List solution)
name|void
name|rawWrite
parameter_list|(
name|List
name|solution
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|solution
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Iterator
name|subitr
init|=
operator|(
operator|(
name|List
operator|)
name|itr
operator|.
name|next
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|subitr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|subitr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|solution (List<List<ColumnName>> names)
specifier|public
name|void
name|solution
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|ColumnName
argument_list|>
argument_list|>
name|names
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stringifySolution
argument_list|(
name|size
argument_list|,
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set up a puzzle board to the given size.    * Boards may be asymmetric, but the squares will always be divided to be    * more cells wide than they are tall. For example, a 6x6 puzzle will make     * sub-squares that are 3x2 (3 cells wide, 2 cells tall). Clearly that means    * the board is made up of 2x3 sub-squares.    * @param stream The input stream to read the data from    */
DECL|method|Sudoku (InputStream stream)
specifier|public
name|Sudoku
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|file
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|file
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|tokenizer
operator|.
name|countTokens
argument_list|()
decl_stmt|;
name|int
index|[]
name|col
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|word
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"?"
operator|.
name|equals
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|col
index|[
name|y
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|col
index|[
name|y
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
name|y
operator|+=
literal|1
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|line
operator|=
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|size
operator|=
name|result
operator|.
name|size
argument_list|()
expr_stmt|;
name|board
operator|=
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|int
index|[
name|size
index|]
index|[]
argument_list|)
expr_stmt|;
name|squareYSize
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|squareXSize
operator|=
name|size
operator|/
name|squareYSize
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * A constraint that each number can appear just once in a column.    */
DECL|class|ColumnConstraint
specifier|static
specifier|private
class|class
name|ColumnConstraint
implements|implements
name|ColumnName
block|{
DECL|method|ColumnConstraint (int num, int column)
name|ColumnConstraint
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
DECL|field|num
name|int
name|num
decl_stmt|;
DECL|field|column
name|int
name|column
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|num
operator|+
literal|" in column "
operator|+
name|column
return|;
block|}
block|}
comment|/**    * A constraint that each number can appear just once in a row.    */
DECL|class|RowConstraint
specifier|static
specifier|private
class|class
name|RowConstraint
implements|implements
name|ColumnName
block|{
DECL|method|RowConstraint (int num, int row)
name|RowConstraint
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
DECL|field|num
name|int
name|num
decl_stmt|;
DECL|field|row
name|int
name|row
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|num
operator|+
literal|" in row "
operator|+
name|row
return|;
block|}
block|}
comment|/**    * A constraint that each number can appear just once in a square.    */
DECL|class|SquareConstraint
specifier|static
specifier|private
class|class
name|SquareConstraint
implements|implements
name|ColumnName
block|{
DECL|method|SquareConstraint (int num, int x, int y)
name|SquareConstraint
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|field|num
name|int
name|num
decl_stmt|;
DECL|field|x
name|int
name|x
decl_stmt|;
DECL|field|y
name|int
name|y
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|num
operator|+
literal|" in square "
operator|+
name|x
operator|+
literal|","
operator|+
name|y
return|;
block|}
block|}
comment|/**    * A constraint that each cell can only be used once.    */
DECL|class|CellConstraint
specifier|static
specifier|private
class|class
name|CellConstraint
implements|implements
name|ColumnName
block|{
DECL|method|CellConstraint (int x, int y)
name|CellConstraint
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|field|x
name|int
name|x
decl_stmt|;
DECL|field|y
name|int
name|y
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cell "
operator|+
name|x
operator|+
literal|","
operator|+
name|y
return|;
block|}
block|}
comment|/**    * Create a row that places num in cell x, y.    * @param rowValues a scratch pad to mark the bits needed    * @param x the horizontal offset of the cell    * @param y the vertical offset of the cell    * @param num the number to place    * @return a bitvector of the columns selected    */
DECL|method|generateRow (boolean[] rowValues, int x, int y, int num)
specifier|private
name|boolean
index|[]
name|generateRow
parameter_list|(
name|boolean
index|[]
name|rowValues
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|num
parameter_list|)
block|{
comment|// clear the scratch array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowValues
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rowValues
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|// find the square coordinates
name|int
name|xBox
init|=
name|x
operator|/
name|squareXSize
decl_stmt|;
name|int
name|yBox
init|=
name|y
operator|/
name|squareYSize
decl_stmt|;
comment|// mark the column
name|rowValues
index|[
name|x
operator|*
name|size
operator|+
name|num
operator|-
literal|1
index|]
operator|=
literal|true
expr_stmt|;
comment|// mark the row
name|rowValues
index|[
name|size
operator|*
name|size
operator|+
name|y
operator|*
name|size
operator|+
name|num
operator|-
literal|1
index|]
operator|=
literal|true
expr_stmt|;
comment|// mark the square
name|rowValues
index|[
literal|2
operator|*
name|size
operator|*
name|size
operator|+
operator|(
name|xBox
operator|*
name|squareXSize
operator|+
name|yBox
operator|)
operator|*
name|size
operator|+
name|num
operator|-
literal|1
index|]
operator|=
literal|true
expr_stmt|;
comment|// mark the cell
name|rowValues
index|[
literal|3
operator|*
name|size
operator|*
name|size
operator|+
name|size
operator|*
name|x
operator|+
name|y
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|rowValues
return|;
block|}
DECL|method|makeModel ()
specifier|private
name|DancingLinks
argument_list|<
name|ColumnName
argument_list|>
name|makeModel
parameter_list|()
block|{
name|DancingLinks
argument_list|<
name|ColumnName
argument_list|>
name|model
init|=
operator|new
name|DancingLinks
argument_list|<
name|ColumnName
argument_list|>
argument_list|()
decl_stmt|;
comment|// create all of the columns constraints
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|num
init|=
literal|1
init|;
name|num
operator|<=
name|size
condition|;
operator|++
name|num
control|)
block|{
name|model
operator|.
name|addColumn
argument_list|(
operator|new
name|ColumnConstraint
argument_list|(
name|num
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create all of the row constraints
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|size
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|num
init|=
literal|1
init|;
name|num
operator|<=
name|size
condition|;
operator|++
name|num
control|)
block|{
name|model
operator|.
name|addColumn
argument_list|(
operator|new
name|RowConstraint
argument_list|(
name|num
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create the square constraints
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|squareYSize
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|squareXSize
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|num
init|=
literal|1
init|;
name|num
operator|<=
name|size
condition|;
operator|++
name|num
control|)
block|{
name|model
operator|.
name|addColumn
argument_list|(
operator|new
name|SquareConstraint
argument_list|(
name|num
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// create the cell constraints
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|size
condition|;
operator|++
name|y
control|)
block|{
name|model
operator|.
name|addColumn
argument_list|(
operator|new
name|CellConstraint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
index|[]
name|rowValues
init|=
operator|new
name|boolean
index|[
name|size
operator|*
name|size
operator|*
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|size
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|board
index|[
name|y
index|]
index|[
name|x
index|]
operator|==
operator|-
literal|1
condition|)
block|{
comment|// try each possible value in the cell
for|for
control|(
name|int
name|num
init|=
literal|1
init|;
name|num
operator|<=
name|size
condition|;
operator|++
name|num
control|)
block|{
name|model
operator|.
name|addRow
argument_list|(
name|generateRow
argument_list|(
name|rowValues
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// put the given cell in place
name|model
operator|.
name|addRow
argument_list|(
name|generateRow
argument_list|(
name|rowValues
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|board
index|[
name|y
index|]
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|model
return|;
block|}
DECL|method|solve ()
specifier|public
name|void
name|solve
parameter_list|()
block|{
name|DancingLinks
argument_list|<
name|ColumnName
argument_list|>
name|model
init|=
name|makeModel
argument_list|()
decl_stmt|;
name|int
name|results
init|=
name|model
operator|.
name|solve
argument_list|(
operator|new
name|SolutionPrinter
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|results
operator|+
literal|" solutions"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Solves a set of sudoku puzzles.    * @param args a list of puzzle filenames to solve    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Include a puzzle on the command line."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Sudoku
name|problem
init|=
operator|new
name|Sudoku
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Solving "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|problem
operator|.
name|solve
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

