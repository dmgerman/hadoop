begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This program uses map/reduce to just run a distributed job where there is  * no interaction between the tasks and each task write a large unsorted  * random binary sequence file of BytesWritable.  * In order for this program to generate data for terasort with 10-byte keys  * and 90-byte values, have the following config:  *<pre>{@code  *<?xml version="1.0"?>  *<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>  *<configuration>  *<property>  *<name>mapreduce.randomwriter.minkey</name>  *<value>10</value>  *</property>  *<property>  *<name>mapreduce.randomwriter.maxkey</name>  *<value>10</value>  *</property>  *<property>  *<name>mapreduce.randomwriter.minvalue</name>  *<value>90</value>  *</property>  *<property>  *<name>mapreduce.randomwriter.maxvalue</name>  *<value>90</value>  *</property>  *<property>  *<name>mapreduce.randomwriter.totalbytes</name>  *<value>1099511627776</value>  *</property>  *</configuration>}</pre>  * Equivalently, {@link RandomWriter} also supports all the above options  * and ones supported by {@link GenericOptionsParser} via the command-line.  */
end_comment

begin_class
DECL|class|RandomWriter
specifier|public
class|class
name|RandomWriter
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|TOTAL_BYTES
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_BYTES
init|=
literal|"mapreduce.randomwriter.totalbytes"
decl_stmt|;
DECL|field|BYTES_PER_MAP
specifier|public
specifier|static
specifier|final
name|String
name|BYTES_PER_MAP
init|=
literal|"mapreduce.randomwriter.bytespermap"
decl_stmt|;
DECL|field|MAPS_PER_HOST
specifier|public
specifier|static
specifier|final
name|String
name|MAPS_PER_HOST
init|=
literal|"mapreduce.randomwriter.mapsperhost"
decl_stmt|;
DECL|field|MAX_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|MAX_VALUE
init|=
literal|"mapreduce.randomwriter.maxvalue"
decl_stmt|;
DECL|field|MIN_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|MIN_VALUE
init|=
literal|"mapreduce.randomwriter.minvalue"
decl_stmt|;
DECL|field|MIN_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MIN_KEY
init|=
literal|"mapreduce.randomwriter.minkey"
decl_stmt|;
DECL|field|MAX_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MAX_KEY
init|=
literal|"mapreduce.randomwriter.maxkey"
decl_stmt|;
comment|/**    * User counters    */
DECL|enum|Counters
DECL|enumConstant|RECORDS_WRITTEN
DECL|enumConstant|BYTES_WRITTEN
enum|enum
name|Counters
block|{
name|RECORDS_WRITTEN
block|,
name|BYTES_WRITTEN
block|}
comment|/**    * A custom input format that creates virtual inputs of a single string    * for each map.    */
DECL|class|RandomInputFormat
specifier|static
class|class
name|RandomInputFormat
extends|extends
name|InputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
comment|/**       * Generate the requested number of file splits, with the filename      * set to the filename of the output file.      */
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|outDir
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|int
name|numSplits
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
literal|"dummy-split-"
operator|+
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return a single record (filename, "") where the filename is taken from      * the file split.      */
DECL|class|RandomRecordReader
specifier|static
class|class
name|RandomRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|name
name|Path
name|name
decl_stmt|;
DECL|field|key
name|Text
name|key
init|=
literal|null
decl_stmt|;
DECL|field|value
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|method|RandomRecordReader (Path p)
specifier|public
name|RandomRecordReader
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|name
operator|=
name|p
expr_stmt|;
block|}
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     	         }
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|Text
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getCurrentValue ()
specifier|public
name|Text
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
block|}
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|RandomRecordReader
argument_list|(
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|RandomMapper
specifier|static
class|class
name|RandomMapper
extends|extends
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
DECL|field|numBytesToWrite
specifier|private
name|long
name|numBytesToWrite
decl_stmt|;
DECL|field|minKeySize
specifier|private
name|int
name|minKeySize
decl_stmt|;
DECL|field|keySizeRange
specifier|private
name|int
name|keySizeRange
decl_stmt|;
DECL|field|minValueSize
specifier|private
name|int
name|minValueSize
decl_stmt|;
DECL|field|valueSizeRange
specifier|private
name|int
name|valueSizeRange
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|randomKey
specifier|private
name|BytesWritable
name|randomKey
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
DECL|field|randomValue
specifier|private
name|BytesWritable
name|randomValue
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
DECL|method|randomizeBytes (byte[] data, int offset, int length)
specifier|private
name|void
name|randomizeBytes
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|offset
operator|+
name|length
operator|-
literal|1
init|;
name|i
operator|>=
name|offset
condition|;
operator|--
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Given an output filename, write a bunch of random records to it.      */
DECL|method|map (WritableComparable key, Writable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|itemCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numBytesToWrite
operator|>
literal|0
condition|)
block|{
name|int
name|keyLength
init|=
name|minKeySize
operator|+
operator|(
name|keySizeRange
operator|!=
literal|0
condition|?
name|random
operator|.
name|nextInt
argument_list|(
name|keySizeRange
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
name|randomKey
operator|.
name|setSize
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|randomizeBytes
argument_list|(
name|randomKey
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|randomKey
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|valueLength
init|=
name|minValueSize
operator|+
operator|(
name|valueSizeRange
operator|!=
literal|0
condition|?
name|random
operator|.
name|nextInt
argument_list|(
name|valueSizeRange
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
name|randomValue
operator|.
name|setSize
argument_list|(
name|valueLength
argument_list|)
expr_stmt|;
name|randomizeBytes
argument_list|(
name|randomValue
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|randomValue
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|numBytesToWrite
operator|-=
name|keyLength
operator|+
name|valueLength
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|BYTES_WRITTEN
argument_list|)
operator|.
name|increment
argument_list|(
name|keyLength
operator|+
name|valueLength
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|RECORDS_WRITTEN
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|itemCount
operator|%
literal|200
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"wrote record "
operator|+
name|itemCount
operator|+
literal|". "
operator|+
name|numBytesToWrite
operator|+
literal|" bytes left."
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|setStatus
argument_list|(
literal|"done with "
operator|+
name|itemCount
operator|+
literal|" records."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save the values out of the configuaration that we need to write      * the data.      */
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|numBytesToWrite
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|BYTES_PER_MAP
argument_list|,
literal|1
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|minKeySize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MIN_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|keySizeRange
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_KEY
argument_list|,
literal|1000
argument_list|)
operator|-
name|minKeySize
expr_stmt|;
name|minValueSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|valueSizeRange
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_VALUE
argument_list|,
literal|20000
argument_list|)
operator|-
name|minValueSize
expr_stmt|;
block|}
block|}
comment|/**    * This is the main routine for launching a distributed random write job.    * It runs 10 maps/node and each node writes 1 gig of data to a DFS file.    * The reduce doesn't do anything.    *     * @throws IOException     */
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: writer<out-dir>"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ClusterStatus
name|cluster
init|=
name|client
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numMapsPerHost
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAPS_PER_HOST
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|long
name|numBytesToWritePerMap
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|BYTES_PER_MAP
argument_list|,
literal|1
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytesToWritePerMap
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot have"
operator|+
name|BYTES_PER_MAP
operator|+
literal|" set to 0"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|2
return|;
block|}
name|long
name|totalBytesToWrite
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|TOTAL_BYTES
argument_list|,
name|numMapsPerHost
operator|*
name|numBytesToWritePerMap
operator|*
name|cluster
operator|.
name|getTaskTrackers
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numMaps
init|=
call|(
name|int
call|)
argument_list|(
name|totalBytesToWrite
operator|/
name|numBytesToWritePerMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|numMaps
operator|==
literal|0
operator|&&
name|totalBytesToWrite
operator|>
literal|0
condition|)
block|{
name|numMaps
operator|=
literal|1
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|BYTES_PER_MAP
argument_list|,
name|totalBytesToWrite
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
name|numMaps
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|RandomWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"random-writer"
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|RandomMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running "
operator|+
name|numMaps
operator|+
literal|" maps."
argument_list|)
expr_stmt|;
comment|// reducer NONE
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job started: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|Date
name|endTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job ended: "
operator|+
name|endTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The job took "
operator|+
operator|(
name|endTime
operator|.
name|getTime
argument_list|()
operator|-
name|startTime
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|RandomWriter
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

