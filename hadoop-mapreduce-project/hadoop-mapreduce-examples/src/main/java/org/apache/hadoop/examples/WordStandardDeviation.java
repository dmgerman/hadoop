begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_class
DECL|class|WordStandardDeviation
specifier|public
class|class
name|WordStandardDeviation
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|stddev
specifier|private
name|double
name|stddev
init|=
literal|0
decl_stmt|;
DECL|field|LENGTH
specifier|private
specifier|final
specifier|static
name|Text
name|LENGTH
init|=
operator|new
name|Text
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
DECL|field|SQUARE
specifier|private
specifier|final
specifier|static
name|Text
name|SQUARE
init|=
operator|new
name|Text
argument_list|(
literal|"square"
argument_list|)
decl_stmt|;
DECL|field|COUNT
specifier|private
specifier|final
specifier|static
name|Text
name|COUNT
init|=
operator|new
name|Text
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
DECL|field|ONE
specifier|private
specifier|final
specifier|static
name|LongWritable
name|ONE
init|=
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Maps words from line of text into 3 key-value pairs; one key-value pair for    * counting the word, one for counting its length, and one for counting the    * square of its length.    */
DECL|class|WordStandardDeviationMapper
specifier|public
specifier|static
class|class
name|WordStandardDeviationMapper
extends|extends
name|Mapper
argument_list|<
name|Object
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|wordLen
specifier|private
name|LongWritable
name|wordLen
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
DECL|field|wordLenSq
specifier|private
name|LongWritable
name|wordLenSq
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
comment|/**      * Emits 3 key-value pairs for counting the word, its length, and the      * squares of its length. Outputs are (Text, LongWritable).      *       * @param value      *          This will be a line of text coming in from our input file.      */
DECL|method|map (Object key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringTokenizer
name|itr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|string
init|=
name|itr
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|wordLen
operator|.
name|set
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// the square of an integer is an integer...
name|this
operator|.
name|wordLenSq
operator|.
name|set
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|,
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|LENGTH
argument_list|,
name|this
operator|.
name|wordLen
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|SQUARE
argument_list|,
name|this
operator|.
name|wordLenSq
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|COUNT
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Performs integer summation of all the values for each key.    */
DECL|class|WordStandardDeviationReducer
specifier|public
specifier|static
class|class
name|WordStandardDeviationReducer
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|val
specifier|private
name|LongWritable
name|val
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
comment|/**      * Sums all the individual values within the iterator and writes them to the      * same key.      *       * @param key      *          This will be one of 2 constants: LENGTH_STR, COUNT_STR, or      *          SQUARE_STR.      * @param values      *          This will be an iterator of all the values associated with that      *          key.      */
DECL|method|reduce (Text key, Iterable<LongWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|LongWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LongWritable
name|value
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|val
operator|.
name|set
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads the output file and parses the summation of lengths, the word count,    * and the lengths squared, to perform a quick calculation of the standard    * deviation.    *     * @param path    *          The path to find the output file in. Set in main to the output    *          directory.    * @throws IOException    *           If it cannot access the output directory, we throw an exception.    */
DECL|method|readAndCalcStdDev (Path path, Configuration conf)
specifier|private
name|double
name|readAndCalcStdDev
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"part-r-00000"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Output not found!"
argument_list|)
throw|;
name|double
name|stddev
init|=
literal|0
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
name|long
name|square
init|=
literal|0
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// grab type
name|String
name|type
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// differentiate
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|countLit
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|count
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|countLit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|LENGTH
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|lengthLit
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|lengthLit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|SQUARE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|squareLit
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|square
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|squareLit
argument_list|)
expr_stmt|;
block|}
block|}
comment|// average = total sum / number of elements;
name|double
name|mean
init|=
operator|(
operator|(
operator|(
name|double
operator|)
name|length
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|count
operator|)
operator|)
decl_stmt|;
comment|// standard deviation = sqrt((sum(lengths ^ 2)/count) - (mean ^ 2))
name|mean
operator|=
name|Math
operator|.
name|pow
argument_list|(
name|mean
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|double
name|term
init|=
operator|(
operator|(
operator|(
name|double
operator|)
name|square
operator|/
operator|(
operator|(
name|double
operator|)
name|count
operator|)
operator|)
operator|)
decl_stmt|;
name|stddev
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|term
operator|-
name|mean
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The standard deviation is: "
operator|+
name|stddev
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|stddev
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|WordStandardDeviation
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: wordstddev<in><out>"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"word stddev"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|WordStandardDeviation
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|WordStandardDeviationMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|WordStandardDeviationReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|WordStandardDeviationReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|outputpath
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputpath
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// read output and calculate standard deviation
name|stddev
operator|=
name|readAndCalcStdDev
argument_list|(
name|outputpath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
operator|(
name|result
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
DECL|method|getStandardDeviation ()
specifier|public
name|double
name|getStandardDeviation
parameter_list|()
block|{
return|return
name|stddev
return|;
block|}
block|}
end_class

end_unit

