begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.terasort
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  *<p>  * TeraSort configurations.  *</p>  */
end_comment

begin_enum
annotation|@
name|Private
annotation|@
name|Unstable
DECL|enum|TeraSortConfigKeys
specifier|public
enum|enum
name|TeraSortConfigKeys
block|{
DECL|enumConstant|NUM_ROWS
name|NUM_ROWS
argument_list|(
literal|"mapreduce.terasort.num-rows"
argument_list|,
literal|"Number of rows to generate during teragen."
argument_list|)
block|,
DECL|enumConstant|NUM_PARTITIONS
name|NUM_PARTITIONS
argument_list|(
literal|"mapreduce.terasort.num.partitions"
argument_list|,
literal|"Number of partitions used for sampling."
argument_list|)
block|,
DECL|enumConstant|SAMPLE_SIZE
name|SAMPLE_SIZE
argument_list|(
literal|"mapreduce.terasort.partitions.sample"
argument_list|,
literal|"Sample size for each partition."
argument_list|)
block|,
DECL|enumConstant|FINAL_SYNC_ATTRIBUTE
name|FINAL_SYNC_ATTRIBUTE
argument_list|(
literal|"mapreduce.terasort.final.sync"
argument_list|,
literal|"Perform a disk-persisting hsync at end of every file-write."
argument_list|)
block|,
DECL|enumConstant|USE_TERA_SCHEDULER
name|USE_TERA_SCHEDULER
argument_list|(
literal|"mapreduce.terasort.use.terascheduler"
argument_list|,
literal|"Use TeraScheduler for computing input split distribution."
argument_list|)
block|,
DECL|enumConstant|USE_SIMPLE_PARTITIONER
name|USE_SIMPLE_PARTITIONER
argument_list|(
literal|"mapreduce.terasort.simplepartitioner"
argument_list|,
literal|"Use SimplePartitioner instead of TotalOrderPartitioner."
argument_list|)
block|,
DECL|enumConstant|OUTPUT_REPLICATION
name|OUTPUT_REPLICATION
argument_list|(
literal|"mapreduce.terasort.output.replication"
argument_list|,
literal|"Replication factor to use for output data files."
argument_list|)
block|;
DECL|field|confName
specifier|private
name|String
name|confName
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|TeraSortConfigKeys (String configName, String description)
name|TeraSortConfigKeys
parameter_list|(
name|String
name|configName
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|confName
operator|=
name|configName
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|key ()
specifier|public
name|String
name|key
parameter_list|()
block|{
return|return
name|this
operator|.
name|confName
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<"
operator|+
name|confName
operator|+
literal|">     "
operator|+
name|description
return|;
block|}
DECL|field|DEFAULT_NUM_ROWS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NUM_ROWS
init|=
literal|0L
decl_stmt|;
DECL|field|DEFAULT_NUM_PARTITIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_PARTITIONS
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_SAMPLE_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SAMPLE_SIZE
init|=
literal|100000L
decl_stmt|;
DECL|field|DEFAULT_FINAL_SYNC_ATTRIBUTE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FINAL_SYNC_ATTRIBUTE
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_USE_TERA_SCHEDULER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_TERA_SCHEDULER
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_USE_SIMPLE_PARTITIONER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_SIMPLE_PARTITIONER
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_OUTPUT_REPLICATION
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_OUTPUT_REPLICATION
init|=
literal|1
decl_stmt|;
block|}
end_enum

end_unit

