begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|JobIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * The test in this class is created specifically to address the issue in  * MAPREDUCE-6684. In cases where there are two threads trying to load different  * jobs through job history file manager, one thread could be blocked by the  * other that is loading a huge job file, which is undesirable.  *  */
end_comment

begin_class
DECL|class|TestUnnecessaryBlockingOnHistoryFileInfo
specifier|public
class|class
name|TestUnnecessaryBlockingOnHistoryFileInfo
block|{
comment|/**    * The intermediate done directory that JHS scans for completed jobs.    */
DECL|field|INTERMEDIATE_DIR
specifier|private
specifier|final
specifier|static
name|File
name|INTERMEDIATE_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestUnnecessaryBlockingOnHistoryFileInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"/intermediate"
argument_list|)
decl_stmt|;
comment|/**    * A test user directory under intermediate done directory.    */
DECL|field|USER_DIR
specifier|private
specifier|final
specifier|static
name|File
name|USER_DIR
init|=
operator|new
name|File
argument_list|(
name|INTERMEDIATE_DIR
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|USER_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|USER_DIR
argument_list|)
expr_stmt|;
block|}
name|USER_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanUp ()
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|INTERMEDIATE_DIR
argument_list|)
expr_stmt|;
block|}
comment|/**    * This create a test case in which two threads are trying to load two    * different jobs of the same user under the intermediate directory.    * One thread should not be blocked by the other thread that is loading    * a huge job files (This is simulated by hanging up parsing the job files    * forever). The test will fail by triggering the timeout if one thread is    * blocked by the other while the other thread is holding the lock on its    * associated job files and hanging up parsing the files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testTwoThreadsQueryingDifferentJobOfSameUser ()
specifier|public
name|void
name|testTwoThreadsQueryingDifferentJobOfSameUser
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
name|INTERMEDIATE_DIR
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_MAX_AGE_MS
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|JobId
name|job1
init|=
name|createJobId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|JobId
name|job2
init|=
name|createJobId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|HistoryFileManagerUnderContention
name|historyFileManager
init|=
name|createHistoryFileManager
argument_list|(
name|config
argument_list|,
name|job1
argument_list|,
name|job2
argument_list|)
decl_stmt|;
name|Thread
name|webRequest1
init|=
literal|null
decl_stmt|;
name|Thread
name|webRequest2
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|/**        * create a dummy .jhist file for job1, and try to load/parse the job        * files in one child thread.        */
name|createJhistFile
argument_list|(
name|job1
argument_list|)
expr_stmt|;
name|webRequest1
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HistoryFileManager
operator|.
name|HistoryFileInfo
name|historyFileInfo
init|=
name|historyFileManager
operator|.
name|getFileInfo
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|historyFileInfo
operator|.
name|loadJob
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|webRequest1
operator|.
name|start
argument_list|()
expr_stmt|;
name|historyFileManager
operator|.
name|waitUntilIntermediateDirIsScanned
argument_list|(
name|job1
argument_list|)
expr_stmt|;
comment|/**        * At this point, thread webRequest1 has finished scanning the        * intermediate directory and is hanging up parsing the job files while        * it's holding the lock on the associated HistoryFileInfo object.        */
comment|/**        * create a dummy .jhist file for job2 and try to load/parse the job files        * in the other child thread. Because job files are not moved from the        * intermediate directory to the done directory, thread webRequest2        * will also see the job history files for job1.        */
name|createJhistFile
argument_list|(
name|job2
argument_list|)
expr_stmt|;
name|webRequest2
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HistoryFileManager
operator|.
name|HistoryFileInfo
name|historyFileInfo
init|=
name|historyFileManager
operator|.
name|getFileInfo
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|historyFileInfo
operator|.
name|loadJob
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|webRequest2
operator|.
name|start
argument_list|()
expr_stmt|;
name|historyFileManager
operator|.
name|waitUntilIntermediateDirIsScanned
argument_list|(
name|job2
argument_list|)
expr_stmt|;
comment|/**        * If execution had gotten to this point, then thread webRequest2 would        * not have tried to acquire the lock of the HistoryFileInfo object        * associated job1, which is permanently held by thread webRequest1 that        * is hanging up parsing the job history files, so it was able to proceed        * with parsing job history files of job2.        */
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Thread 2 is blocked while it is trying to "
operator|+
literal|"load job2 by Thread 1 which is loading job1."
argument_list|,
name|webRequest2
operator|.
name|getState
argument_list|()
operator|!=
name|Thread
operator|.
name|State
operator|.
name|BLOCKED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|webRequest1
operator|!=
literal|null
condition|)
block|{
name|webRequest1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|webRequest2
operator|!=
literal|null
condition|)
block|{
name|webRequest2
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create, initialize and start an instance of HistoryFileManager.    * @param config the configuration to initialize the HistoryFileManager    *               instance.    * @param jobIds the set of jobs expected to be loaded by HistoryFileManager.    */
DECL|method|createHistoryFileManager ( Configuration config, JobId... jobIds)
specifier|private
name|HistoryFileManagerUnderContention
name|createHistoryFileManager
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|JobId
modifier|...
name|jobIds
parameter_list|)
block|{
name|HistoryFileManagerUnderContention
name|historyFileManager
init|=
operator|new
name|HistoryFileManagerUnderContention
argument_list|(
name|jobIds
argument_list|)
decl_stmt|;
name|historyFileManager
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|historyFileManager
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|historyFileManager
return|;
block|}
comment|/**    * Create, initialize and start an instance of CacheHistoryStorage.    * @param config the config to initialize the storage    * @param historyFileManager the HistoryFileManager to initializae the cache    */
DECL|method|createHistoryStorage ( Configuration config, HistoryFileManager historyFileManager)
specifier|private
specifier|static
name|CachedHistoryStorage
name|createHistoryStorage
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|HistoryFileManager
name|historyFileManager
parameter_list|)
block|{
name|CachedHistoryStorage
name|historyStorage
init|=
operator|new
name|CachedHistoryStorage
argument_list|()
decl_stmt|;
name|historyStorage
operator|.
name|setHistoryFileManager
argument_list|(
name|historyFileManager
argument_list|)
expr_stmt|;
name|historyStorage
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|historyStorage
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|historyStorage
return|;
block|}
DECL|method|createJobId (int id)
specifier|private
specifier|static
name|JobId
name|createJobId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|JobId
name|jobId
init|=
operator|new
name|JobIdPBImpl
argument_list|()
decl_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jobId
return|;
block|}
comment|/**    * Create a dummy .jhist file under the intermediate directory for given job.    * @param jobId the id of the given job    * @return true if file is created successfully, false otherwise    */
DECL|method|createJhistFile (JobId jobId)
specifier|private
specifier|static
name|boolean
name|createJhistFile
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|finishTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|finishTime
operator|-
literal|1000
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
literal|"test"
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|jobId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|finishTime
argument_list|)
operator|.
name|append
argument_list|(
literal|".jhist"
argument_list|)
expr_stmt|;
name|File
name|jhistFile
init|=
operator|new
name|File
argument_list|(
name|USER_DIR
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jhistFile
operator|.
name|createNewFile
argument_list|()
return|;
block|}
comment|/**    * A test implementation of HistoryFileManager that does not move files    * from intermediate directory to done directory and hangs up parsing    * job history files.    */
DECL|class|HistoryFileManagerUnderContention
class|class
name|HistoryFileManagerUnderContention
extends|extends
name|HistoryFileManager
block|{
comment|/**      * A map of job to a signal that indicates whether the intermediate      * directory is done being scanned before the job files are parsed.      */
DECL|field|scanningDoneSignals
specifier|private
name|Map
argument_list|<
name|JobId
argument_list|,
name|CountDownLatch
argument_list|>
name|scanningDoneSignals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * A HistoryFileManager that expects to load given jobs and hangs up      * parsing the job files. It perform no moving of files from the      * intermediate directory to done directory.      * @param jobId the set of jobs expected to load and parse      */
DECL|method|HistoryFileManagerUnderContention (JobId... jobId)
specifier|public
name|HistoryFileManagerUnderContention
parameter_list|(
name|JobId
modifier|...
name|jobId
parameter_list|)
block|{
for|for
control|(
name|JobId
name|job
range|:
name|jobId
control|)
block|{
name|scanningDoneSignals
operator|.
name|put
argument_list|(
name|job
argument_list|,
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wait until scanning of the intermediate directory finishes and load      * of the given job is started.      */
DECL|method|waitUntilIntermediateDirIsScanned (JobId jobId)
specifier|public
name|void
name|waitUntilIntermediateDirIsScanned
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|scanningDoneSignals
operator|.
name|containsKey
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|scanningDoneSignals
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Create a HistoryFileInfo instance that hangs on parsing job files.      */
annotation|@
name|Override
DECL|method|createHistoryFileInfo ( Path historyFile, Path confFile, Path summaryFile, JobIndexInfo jobIndexInfo, boolean isInDone)
specifier|protected
name|HistoryFileManager
operator|.
name|HistoryFileInfo
name|createHistoryFileInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|confFile
parameter_list|,
name|Path
name|summaryFile
parameter_list|,
name|JobIndexInfo
name|jobIndexInfo
parameter_list|,
name|boolean
name|isInDone
parameter_list|)
block|{
return|return
operator|new
name|HistoryFileInfo
argument_list|(
name|historyFile
argument_list|,
name|confFile
argument_list|,
name|summaryFile
argument_list|,
name|jobIndexInfo
argument_list|,
name|isInDone
argument_list|,
name|scanningDoneSignals
operator|.
name|get
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a dummy ThreadPoolExecutor that does not execute submitted tasks.      */
annotation|@
name|Override
DECL|method|createMoveToDoneThreadPool ( int numMoveThreads)
specifier|protected
name|ThreadPoolExecutor
name|createMoveToDoneThreadPool
parameter_list|(
name|int
name|numMoveThreads
parameter_list|)
block|{
return|return
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * A HistoryFileInfo implementation that takes forever to parse the      * associated job files. This mimics the behavior of parsing huge job files.      */
DECL|class|HistoryFileInfo
class|class
name|HistoryFileInfo
extends|extends
name|HistoryFileManager
operator|.
name|HistoryFileInfo
block|{
comment|/**        * A signal that indicates scanning of the intermediate directory is done        * as HistoryFileManager is in the process of loading the HistoryFileInfo        * instance.        */
DECL|field|scanningDoneSignal
specifier|private
specifier|final
name|CountDownLatch
name|scanningDoneSignal
decl_stmt|;
DECL|method|HistoryFileInfo (Path historyFile, Path confFile, Path summaryFile, JobIndexInfo jobIndexInfo, boolean isInDone, CountDownLatch scanningDoneSignal)
name|HistoryFileInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|confFile
parameter_list|,
name|Path
name|summaryFile
parameter_list|,
name|JobIndexInfo
name|jobIndexInfo
parameter_list|,
name|boolean
name|isInDone
parameter_list|,
name|CountDownLatch
name|scanningDoneSignal
parameter_list|)
block|{
name|super
argument_list|(
name|historyFile
argument_list|,
name|confFile
argument_list|,
name|summaryFile
argument_list|,
name|jobIndexInfo
argument_list|,
name|isInDone
argument_list|)
expr_stmt|;
name|this
operator|.
name|scanningDoneSignal
operator|=
name|scanningDoneSignal
expr_stmt|;
block|}
comment|/**        * An test implementation that takes forever to load a job in order to        * mimic what happens when job files of large size are parsed in JHS.        * Before loading, we signal that scanning of the intermediate directory        * is finished.        */
annotation|@
name|Override
DECL|method|loadJob ()
specifier|public
specifier|synchronized
name|Job
name|loadJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scanningDoneSignal
operator|!=
literal|null
condition|)
block|{
name|scanningDoneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

