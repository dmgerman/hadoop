begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|JobIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|TaskAttemptIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|TaskIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AppForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|HsTaskPage
operator|.
name|AttemptsBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Controller
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|Params
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|log
operator|.
name|AggregatedLogsPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|BlockForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test some HtmlBlock classes  */
end_comment

begin_class
DECL|class|TestBlocks
specifier|public
class|class
name|TestBlocks
block|{
DECL|field|data
specifier|private
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testPullTaskLink ()
specifier|public
name|void
name|testPullTaskLink
parameter_list|()
block|{
name|Task
name|task
init|=
name|getTask
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|taskId
init|=
name|task
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pull links doesn't work correctly"
argument_list|,
literal|"Task failed<a href=\"/jobhistory/task/"
operator|+
name|taskId
operator|+
literal|"\">"
operator|+
name|taskId
operator|+
literal|"</a>"
argument_list|,
name|HsJobBlock
operator|.
name|addTaskLinks
argument_list|(
literal|"Task failed "
operator|+
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pull links doesn't work correctly"
argument_list|,
literal|"Task failed<a href=\"/jobhistory/task/"
operator|+
name|taskId
operator|+
literal|"\">"
operator|+
name|taskId
operator|+
literal|"</a>\n Job failed as tasks failed. failedMaps:1 failedReduces:0"
argument_list|,
name|HsJobBlock
operator|.
name|addTaskLinks
argument_list|(
literal|"Task failed "
operator|+
name|taskId
operator|+
literal|"\n "
operator|+
literal|"Job failed as tasks failed. failedMaps:1 failedReduces:0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test HsTasksBlock's rendering.    */
annotation|@
name|Test
DECL|method|testHsTasksBlock ()
specifier|public
name|void
name|testHsTasksBlock
parameter_list|()
block|{
name|Task
name|task
init|=
name|getTask
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|put
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppForTest
name|app
init|=
operator|new
name|AppForTest
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTasks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|app
operator|.
name|setJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|HsTasksBlockForTest
name|block
init|=
operator|new
name|HsTasksBlockForTest
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|block
operator|.
name|addParameter
argument_list|(
name|AMParams
operator|.
name|TASK_TYPE
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Block
name|html
init|=
operator|new
name|BlockForTest
argument_list|(
operator|new
name|HtmlBlockForTest
argument_list|()
argument_list|,
name|pWriter
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|block
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// should be printed information about task
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"task_0_0001_r_000000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100001"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100011"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test AttemptsBlock's rendering.    */
annotation|@
name|Test
DECL|method|testAttemptsBlock ()
specifier|public
name|void
name|testAttemptsBlock
parameter_list|()
block|{
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppForTest
name|app
init|=
operator|new
name|AppForTest
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|getTask
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taId
init|=
operator|new
name|TaskAttemptIdPBImpl
argument_list|()
decl_stmt|;
name|taId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taId
operator|.
name|setTaskId
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Node address"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptIdPBImpl
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerIdPBImpl
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"assignedContainerMgrAddress"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getNodeRackName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nodeRackName"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|taStartTime
init|=
literal|100002L
decl_stmt|;
specifier|final
name|long
name|taFinishTime
init|=
literal|100012L
decl_stmt|;
specifier|final
name|long
name|taShuffleFinishTime
init|=
literal|100010L
decl_stmt|;
specifier|final
name|long
name|taSortFinishTime
init|=
literal|100011L
decl_stmt|;
specifier|final
name|TaskAttemptState
name|taState
init|=
name|TaskAttemptState
operator|.
name|SUCCEEDED
decl_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taStartTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taShuffleFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taSortFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taState
argument_list|)
expr_stmt|;
name|TaskAttemptReport
name|taReport
init|=
name|mock
argument_list|(
name|TaskAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taStartTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taShuffleFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taSortFinishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getStateString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Processed 128/128 records<p> \n"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taState
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taReport
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taReport
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|taId
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
name|app
operator|.
name|setTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|AttemptsBlockForTest
name|block
init|=
operator|new
name|AttemptsBlockForTest
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|block
operator|.
name|addParameter
argument_list|(
name|AMParams
operator|.
name|TASK_TYPE
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Block
name|html
init|=
operator|new
name|BlockForTest
argument_list|(
operator|new
name|HtmlBlockForTest
argument_list|()
argument_list|,
name|pWriter
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|block
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// should be printed information about attempts
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"attempt_0_0001_r_000000_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Processed 128/128 records<p> \n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Processed 128\\/128 records&lt;p&gt; \\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"_0005_01_000001:attempt_0_0001_r_000000_0:User:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100002"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100010"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100011"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100012"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test HsJobsBlock's rendering.    */
annotation|@
name|Test
DECL|method|testHsJobsBlock ()
specifier|public
name|void
name|testHsJobsBlock
parameter_list|()
block|{
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
operator|new
name|HashMap
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|getJob
argument_list|()
decl_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getAllJobs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobs
argument_list|)
expr_stmt|;
name|HsJobsBlock
name|block
init|=
operator|new
name|HsJobsBlockForTest
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|PrintWriter
name|pWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Block
name|html
init|=
operator|new
name|BlockForTest
argument_list|(
operator|new
name|HtmlBlockForTest
argument_list|()
argument_list|,
name|pWriter
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|block
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"JobName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"UserName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"QueueName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test HsController    */
annotation|@
name|Test
DECL|method|testHsController ()
specifier|public
name|void
name|testHsController
parameter_list|()
throws|throws
name|Exception
block|{
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|AppForTest
name|app
init|=
operator|new
name|AppForTest
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|RequestContext
name|requestCtx
init|=
name|mock
argument_list|(
name|RequestContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HsControllerForTest
name|controller
init|=
operator|new
name|HsControllerForTest
argument_list|(
name|app
argument_list|,
name|config
argument_list|,
name|requestCtx
argument_list|)
decl_stmt|;
name|controller
operator|.
name|index
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JobHistory"
argument_list|,
name|controller
operator|.
name|get
argument_list|(
name|Params
operator|.
name|TITLE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsJobPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|jobPage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsCountersPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|countersPage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsTasksPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|tasksPage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsTaskPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|taskPage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsAttemptsPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|attemptsPage
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|set
argument_list|(
name|AMParams
operator|.
name|JOB_ID
argument_list|,
literal|"job_01_01"
argument_list|)
expr_stmt|;
name|controller
operator|.
name|set
argument_list|(
name|AMParams
operator|.
name|TASK_ID
argument_list|,
literal|"task_01_01_m_01"
argument_list|)
expr_stmt|;
name|controller
operator|.
name|set
argument_list|(
name|AMParams
operator|.
name|TASK_TYPE
argument_list|,
literal|"m"
argument_list|)
expr_stmt|;
name|controller
operator|.
name|set
argument_list|(
name|AMParams
operator|.
name|ATTEMPT_STATE
argument_list|,
literal|"State"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTask
argument_list|(
name|any
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|JobId
name|jobID
init|=
name|MRApps
operator|.
name|toJobID
argument_list|(
literal|"job_01_01"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|JobACL
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|controller
operator|.
name|job
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsJobPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|jobCounters
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsCountersPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|taskCounters
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsCountersPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|tasks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsTasksPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|task
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsTaskPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|attempts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsAttemptsPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsConfPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|confPage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsAboutPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|aboutPage
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|about
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsAboutPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|logs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsLogsPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|nmlogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AggregatedLogsPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HsSingleCounterPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|singleCounterPage
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|singleJobCounter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsSingleCounterPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|singleTaskCounter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HsSingleCounterPage
operator|.
name|class
argument_list|,
name|controller
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|HsControllerForTest
specifier|private
specifier|static
class|class
name|HsControllerForTest
extends|extends
name|HsController
block|{
DECL|field|params
specifier|static
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clazz
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|data
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|method|set (String name, String value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|get (String key, String defaultValue)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
DECL|method|HsControllerForTest (App app, Configuration configuration, RequestContext ctx)
name|HsControllerForTest
parameter_list|(
name|App
name|app
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|RequestContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|,
name|configuration
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|request ()
specifier|public
name|HttpServletRequest
name|request
parameter_list|()
block|{
name|HttpServletRequest
name|result
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|response ()
specifier|public
name|HttpServletResponse
name|response
parameter_list|()
block|{
name|HttpServletResponse
name|result
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|result
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{        }
return|return
name|result
return|;
block|}
DECL|method|render (Class<? extends View> cls)
specifier|protected
name|void
name|render
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|View
argument_list|>
name|cls
parameter_list|)
block|{
name|clazz
operator|=
name|cls
expr_stmt|;
block|}
DECL|method|getClazz ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
block|}
DECL|method|getJob ()
specifier|private
name|Job
name|getJob
parameter_list|()
block|{
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
operator|new
name|JobIdPBImpl
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|JobReport
name|report
init|=
name|mock
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100010L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100015L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"JobName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"UserName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"QueueName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getCompletedMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getCompletedReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getCompletedReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|getTask (long timestamp)
specifier|private
name|Task
name|getTask
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|JobId
name|jobId
init|=
operator|new
name|JobIdPBImpl
argument_list|()
decl_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
name|timestamp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|TaskId
name|taskId
init|=
operator|new
name|TaskIdPBImpl
argument_list|()
decl_stmt|;
name|taskId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|TaskReport
name|report
init|=
name|mock
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0.7f
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100001L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100011L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
DECL|class|HsJobsBlockForTest
specifier|private
class|class
name|HsJobsBlockForTest
extends|extends
name|HsJobsBlock
block|{
DECL|method|HsJobsBlockForTest (AppContext appCtx)
name|HsJobsBlockForTest
parameter_list|(
name|AppContext
name|appCtx
parameter_list|)
block|{
name|super
argument_list|(
name|appCtx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|url (String... parts)
specifier|public
name|String
name|url
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|result
init|=
literal|"url://"
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|parts
control|)
block|{
name|result
operator|+=
name|string
operator|+
literal|":"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|AttemptsBlockForTest
specifier|private
class|class
name|AttemptsBlockForTest
extends|extends
name|AttemptsBlock
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addParameter (String name, String value)
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|$ (String key, String defaultValue)
specifier|public
name|String
name|$
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
DECL|method|AttemptsBlockForTest (App ctx)
specifier|public
name|AttemptsBlockForTest
parameter_list|(
name|App
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|url (String... parts)
specifier|public
name|String
name|url
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|result
init|=
literal|"url://"
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|parts
control|)
block|{
name|result
operator|+=
name|string
operator|+
literal|":"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|HsTasksBlockForTest
specifier|private
class|class
name|HsTasksBlockForTest
extends|extends
name|HsTasksBlock
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addParameter (String name, String value)
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|$ (String key, String defaultValue)
specifier|public
name|String
name|$
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|url (String... parts)
specifier|public
name|String
name|url
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|result
init|=
literal|"url://"
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|parts
control|)
block|{
name|result
operator|+=
name|string
operator|+
literal|":"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|HsTasksBlockForTest (App app)
specifier|public
name|HsTasksBlockForTest
parameter_list|(
name|App
name|app
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HtmlBlockForTest
specifier|private
class|class
name|HtmlBlockForTest
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{      }
block|}
block|}
end_class

end_unit

