begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|MockHistoryJobs
operator|.
name|JobsPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_class
DECL|class|MockHistoryContext
specifier|public
class|class
name|MockHistoryContext
extends|extends
name|MockAppContext
implements|implements
name|HistoryContext
block|{
DECL|field|partialJobs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|partialJobs
decl_stmt|;
DECL|field|fullJobs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|fullJobs
decl_stmt|;
DECL|method|MockHistoryContext (int numJobs, int numTasks, int numAttempts)
specifier|public
name|MockHistoryContext
parameter_list|(
name|int
name|numJobs
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|JobsPair
name|jobs
decl_stmt|;
try|try
block|{
name|jobs
operator|=
name|MockHistoryJobs
operator|.
name|newHistoryJobs
argument_list|(
name|numJobs
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|partialJobs
operator|=
name|jobs
operator|.
name|partial
expr_stmt|;
name|fullJobs
operator|=
name|jobs
operator|.
name|full
expr_stmt|;
block|}
DECL|method|MockHistoryContext (int appid, int numJobs, int numTasks, int numAttempts)
specifier|public
name|MockHistoryContext
parameter_list|(
name|int
name|appid
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|)
block|{
name|super
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|JobsPair
name|jobs
decl_stmt|;
try|try
block|{
name|jobs
operator|=
name|MockHistoryJobs
operator|.
name|newHistoryJobs
argument_list|(
name|getApplicationID
argument_list|()
argument_list|,
name|numJobs
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|partialJobs
operator|=
name|jobs
operator|.
name|partial
expr_stmt|;
name|fullJobs
operator|=
name|jobs
operator|.
name|full
expr_stmt|;
block|}
DECL|method|MockHistoryContext (int appid, int numTasks, int numAttempts, Path confPath)
specifier|public
name|MockHistoryContext
parameter_list|(
name|int
name|appid
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|,
name|Path
name|confPath
parameter_list|)
block|{
name|super
argument_list|(
name|appid
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|,
name|confPath
argument_list|)
expr_stmt|;
name|fullJobs
operator|=
name|super
operator|.
name|getAllJobs
argument_list|()
expr_stmt|;
name|partialJobs
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MockHistoryContext (int appid, int numJobs, int numTasks, int numAttempts, boolean hasFailedTasks)
specifier|public
name|MockHistoryContext
parameter_list|(
name|int
name|appid
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|,
name|boolean
name|hasFailedTasks
parameter_list|)
block|{
name|super
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|JobsPair
name|jobs
decl_stmt|;
try|try
block|{
name|jobs
operator|=
name|MockHistoryJobs
operator|.
name|newHistoryJobs
argument_list|(
name|getApplicationID
argument_list|()
argument_list|,
name|numJobs
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|,
name|hasFailedTasks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|partialJobs
operator|=
name|jobs
operator|.
name|partial
expr_stmt|;
name|fullJobs
operator|=
name|jobs
operator|.
name|full
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|fullJobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
DECL|method|getPartialJob (JobId jobID)
specifier|public
name|Job
name|getPartialJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|partialJobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|fullJobs
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs (ApplicationId appID)
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|(
name|ApplicationId
name|appID
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPartialJobs (Long offset, Long count, String user, String queue, Long sBegin, Long sEnd, Long fBegin, Long fEnd, JobState jobState)
specifier|public
name|JobsInfo
name|getPartialJobs
parameter_list|(
name|Long
name|offset
parameter_list|,
name|Long
name|count
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|Long
name|sBegin
parameter_list|,
name|Long
name|sEnd
parameter_list|,
name|Long
name|fBegin
parameter_list|,
name|Long
name|fEnd
parameter_list|,
name|JobState
name|jobState
parameter_list|)
block|{
return|return
name|CachedHistoryStorage
operator|.
name|getPartialJobs
argument_list|(
name|this
operator|.
name|partialJobs
operator|.
name|values
argument_list|()
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|sBegin
argument_list|,
name|sEnd
argument_list|,
name|fBegin
argument_list|,
name|fEnd
argument_list|,
name|jobState
argument_list|)
return|;
block|}
block|}
end_class

end_unit

