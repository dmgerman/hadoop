begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|TestJobHistoryEvents
operator|.
name|MRAppWithHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|TestJobHistoryParsing
operator|.
name|MyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/* test JobHistoryServer protocols....  */
end_comment

begin_class
DECL|class|TestJobHistoryServer
specifier|public
class|class
name|TestJobHistoryServer
block|{
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|historyServer
name|JobHistoryServer
name|historyServer
init|=
literal|null
decl_stmt|;
comment|// simple test init/start/stop   JobHistoryServer. Status should change.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testStartStopServer ()
specifier|public
name|void
name|testStartStopServer
parameter_list|()
throws|throws
name|Exception
block|{
name|historyServer
operator|=
operator|new
name|JobHistoryServer
argument_list|()
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|historyServer
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|historyServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|historyServer
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HistoryClientService
name|historyService
init|=
name|historyServer
operator|.
name|getClientService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|historyServer
operator|.
name|getClientService
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|historyService
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|historyServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|historyServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|historyService
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|historyServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|historyServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|historyService
operator|.
name|getClientHandler
argument_list|()
operator|.
name|getConnectAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Test reports of  JobHistoryServer. History server should get log files from  MRApp and read them
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testReports ()
specifier|public
name|void
name|testReports
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|historyServer
operator|=
operator|new
name|JobHistoryServer
argument_list|()
expr_stmt|;
name|historyServer
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|historyServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// search JobHistory  service
name|JobHistory
name|jobHistory
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|historyServer
operator|.
name|getServices
argument_list|()
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|JobHistory
condition|)
block|{
name|jobHistory
operator|=
operator|(
name|JobHistory
operator|)
name|service
expr_stmt|;
block|}
block|}
empty_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
name|jobHistory
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job_0_0000"
argument_list|,
name|jobs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|HistoryClientService
name|historyService
init|=
name|historyServer
operator|.
name|getClientService
argument_list|()
decl_stmt|;
name|MRClientProtocol
name|protocol
init|=
name|historyService
operator|.
name|getClientHandler
argument_list|()
decl_stmt|;
name|GetTaskAttemptReportRequest
name|gtarRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// test getTaskAttemptReport
name|TaskAttemptId
name|taId
init|=
name|attempt
operator|.
name|getID
argument_list|()
decl_stmt|;
name|taId
operator|.
name|setTaskId
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|taId
operator|.
name|getTaskId
argument_list|()
operator|.
name|setJobId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|gtarRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|taId
argument_list|)
expr_stmt|;
name|GetTaskAttemptReportResponse
name|response
init|=
name|protocol
operator|.
name|getTaskAttemptReport
argument_list|(
name|gtarRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"container_0_0000_01_000000"
argument_list|,
name|response
operator|.
name|getTaskAttemptReport
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getTaskAttemptReport
argument_list|()
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// counters
name|assertNotNull
argument_list|(
name|response
operator|.
name|getTaskAttemptReport
argument_list|()
operator|.
name|getCounters
argument_list|()
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taId
operator|.
name|toString
argument_list|()
argument_list|,
name|response
operator|.
name|getTaskAttemptReport
argument_list|()
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getTaskReport
name|GetTaskReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|task
operator|.
name|getID
argument_list|()
decl_stmt|;
name|taskId
operator|.
name|setJobId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|GetTaskReportResponse
name|reportResponse
init|=
name|protocol
operator|.
name|getTaskReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|reportResponse
operator|.
name|getTaskReport
argument_list|()
operator|.
name|getDiagnosticsList
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// progress
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|reportResponse
operator|.
name|getTaskReport
argument_list|()
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|// report has corrected taskId
name|assertEquals
argument_list|(
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|reportResponse
operator|.
name|getTaskReport
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Task state should be SUCCEEDED
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|reportResponse
operator|.
name|getTaskReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
comment|// For invalid jobid, throw IOException
name|GetTaskReportsRequest
name|gtreportsRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|gtreportsRequest
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1415730144495_0001"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gtreportsRequest
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
try|try
block|{
name|protocol
operator|.
name|getTaskReports
argument_list|(
name|gtreportsRequest
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IOException not thrown for invalid job id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
comment|// test getTaskAttemptCompletionEvents
name|GetTaskAttemptCompletionEventsRequest
name|taskAttemptRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptCompletionEventsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|taskAttemptRequest
operator|.
name|setJobId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|GetTaskAttemptCompletionEventsResponse
name|taskAttemptCompletionEventsResponse
init|=
name|protocol
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
name|taskAttemptRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskAttemptCompletionEventsResponse
operator|.
name|getCompletionEventCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getDiagnostics
name|GetDiagnosticsRequest
name|diagnosticRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDiagnosticsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|diagnosticRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|taId
argument_list|)
expr_stmt|;
name|GetDiagnosticsResponse
name|diagnosticResponse
init|=
name|protocol
operator|.
name|getDiagnostics
argument_list|(
name|diagnosticRequest
argument_list|)
decl_stmt|;
comment|// it is strange : why one empty string ?
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diagnosticResponse
operator|.
name|getDiagnosticsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|diagnosticResponse
operator|.
name|getDiagnostics
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test launch method
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLaunch ()
specifier|public
name|void
name|testLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
try|try
block|{
name|historyServer
operator|=
name|JobHistoryServer
operator|.
name|launchJobHistoryServer
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|historyServer
operator|!=
literal|null
condition|)
block|{
name|historyServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

