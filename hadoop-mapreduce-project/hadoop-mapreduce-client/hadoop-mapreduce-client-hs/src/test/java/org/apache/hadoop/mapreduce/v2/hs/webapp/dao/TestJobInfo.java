begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|CompletedJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|TestJobHistoryEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJobInfo
specifier|public
class|class
name|TestJobInfo
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAverageMergeTime ()
specifier|public
name|void
name|testAverageMergeTime
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|historyFileName
init|=
literal|"job_1329348432655_0001-1329348443227-user-Sleep+job-1329348468601-10-1-SUCCEEDED-default.jhist"
decl_stmt|;
name|String
name|confFileName
init|=
literal|"job_1329348432655_0001_conf.xml"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobACLsManager
name|jobAclsMgr
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|fulleHistoryPath
init|=
operator|new
name|Path
argument_list|(
name|TestJobHistoryEntities
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|historyFileName
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|fullConfPath
init|=
operator|new
name|Path
argument_list|(
name|TestJobHistoryEntities
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|confFileName
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|HistoryFileInfo
name|info
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullConfPath
argument_list|)
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1329348432655l
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CompletedJob
name|completedJob
init|=
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|,
name|fulleHistoryPath
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|,
name|info
argument_list|,
name|jobAclsMgr
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
operator|new
name|JobInfo
argument_list|(
name|completedJob
argument_list|)
decl_stmt|;
comment|// There are 2 tasks with merge time of 45 and 55 respectively. So average
comment|// merge time should be 50.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|50L
argument_list|,
name|jobInfo
operator|.
name|getAvgMergeTime
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAverageReduceTime ()
specifier|public
name|void
name|testAverageReduceTime
parameter_list|()
block|{
name|Job
name|job
init|=
name|mock
argument_list|(
name|CompletedJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|task1
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|task2
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1L
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TaskId
name|taskId1
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
specifier|final
name|TaskId
name|taskId2
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
specifier|final
name|TaskAttemptId
name|taskAttemptId1
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TaskAttemptId
name|taskAttemptId2
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|TaskAttempt
name|taskAttempt1
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TaskAttempt
name|taskAttempt2
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobReport
name|jobReport
init|=
name|mock
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|taskAttempt1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt1
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt1
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt1
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|6L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt1
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|8L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt2
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt2
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt2
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt2
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|22L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|taskAttempt2
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|42L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task1
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task2
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task1
operator|.
name|getAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
block|{
block|{
name|put
parameter_list|(
name|taskAttemptId1
parameter_list|,
name|taskAttempt1
parameter_list|)
constructor_decl|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task2
operator|.
name|getAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
block|{
block|{
name|put
parameter_list|(
name|taskAttemptId2
parameter_list|,
name|taskAttempt2
parameter_list|)
constructor_decl|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTasks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
block|{
block|{
name|put
parameter_list|(
name|taskId1
parameter_list|,
name|task1
parameter_list|)
constructor_decl|;
name|put
parameter_list|(
name|taskId2
parameter_list|,
name|task2
parameter_list|)
constructor_decl|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobReport
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TestJobInfo"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|JobInfo
name|jobInfo
init|=
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11L
argument_list|,
name|jobInfo
operator|.
name|getAvgReduceTime
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStartTimeStr ()
specifier|public
name|void
name|testGetStartTimeStr
parameter_list|()
block|{
name|JobReport
name|jobReport
init|=
name|mock
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobReport
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TestJobInfo"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1L
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|JobInfo
name|jobInfo
init|=
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|jobInfo
operator|.
name|getStartTimeStr
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|jobReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|date
operator|.
name|toString
argument_list|()
argument_list|,
name|jobInfo
operator|.
name|getStartTimeStr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

