begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|JobIdHistoryFileInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestJobIdHistoryFileInfoMap
specifier|public
class|class
name|TestJobIdHistoryFileInfoMap
block|{
DECL|method|checkSize (JobIdHistoryFileInfoMap map, int size)
specifier|private
name|boolean
name|checkSize
parameter_list|(
name|JobIdHistoryFileInfoMap
name|map
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
else|else
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Trivial test case that verifies basic functionality of {@link    * JobIdHistoryFileInfoMap}    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testWithSingleElement ()
specifier|public
name|void
name|testWithSingleElement
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|JobIdHistoryFileInfoMap
name|mapWithSize
init|=
operator|new
name|JobIdHistoryFileInfoMap
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HistoryFileInfo
name|fileInfo1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fileInfo1
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// add it twice
name|assertEquals
argument_list|(
literal|"Incorrect return on putIfAbsent()"
argument_list|,
literal|null
argument_list|,
name|mapWithSize
operator|.
name|putIfAbsent
argument_list|(
name|jobId
argument_list|,
name|fileInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return on putIfAbsent()"
argument_list|,
name|fileInfo1
argument_list|,
name|mapWithSize
operator|.
name|putIfAbsent
argument_list|(
name|jobId
argument_list|,
name|fileInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check get()
name|assertEquals
argument_list|(
literal|"Incorrect get()"
argument_list|,
name|fileInfo1
argument_list|,
name|mapWithSize
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect size()"
argument_list|,
name|checkSize
argument_list|(
name|mapWithSize
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check navigableKeySet()
name|NavigableSet
argument_list|<
name|JobId
argument_list|>
name|set
init|=
name|mapWithSize
operator|.
name|navigableKeySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect navigableKeySet()"
argument_list|,
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect navigableKeySet()"
argument_list|,
name|set
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
comment|// check values()
name|Collection
argument_list|<
name|HistoryFileInfo
argument_list|>
name|values
init|=
name|mapWithSize
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect values()"
argument_list|,
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect values()"
argument_list|,
name|values
operator|.
name|contains
argument_list|(
name|fileInfo1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

