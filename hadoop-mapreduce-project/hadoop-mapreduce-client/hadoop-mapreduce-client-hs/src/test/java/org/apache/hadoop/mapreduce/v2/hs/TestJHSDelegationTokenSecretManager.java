begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJHSDelegationTokenSecretManager
specifier|public
class|class
name|TestJHSDelegationTokenSecretManager
block|{
annotation|@
name|Test
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HistoryServerStateStoreService
name|store
init|=
operator|new
name|HistoryServerMemStateStoreService
argument_list|()
decl_stmt|;
name|store
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|JHSDelegationTokenSecretManagerForTest
name|mgr
init|=
operator|new
name|JHSDelegationTokenSecretManagerForTest
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|MRDelegationTokenIdentifier
name|tokenId1
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tokenOwner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenRenewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenUser"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenId1
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
name|MRDelegationTokenIdentifier
name|tokenId2
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tokenOwner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenRenewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenUser"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenId2
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
name|DelegationKey
index|[]
name|keys
init|=
name|mgr
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
name|long
name|tokenRenewDate1
init|=
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId1
argument_list|)
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
name|long
name|tokenRenewDate2
init|=
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId2
argument_list|)
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
name|mgr
operator|=
operator|new
name|JHSDelegationTokenSecretManagerForTest
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|recover
argument_list|(
name|store
operator|.
name|loadState
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DelegationKey
argument_list|>
name|recoveredKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|mgr
operator|.
name|getAllKeys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DelegationKey
name|key
range|:
name|keys
control|)
block|{
name|assertTrue
argument_list|(
literal|"key missing after recovery"
argument_list|,
name|recoveredKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"token1 missing"
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tokenId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token1 renew date"
argument_list|,
name|tokenRenewDate1
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId1
argument_list|)
operator|.
name|getRenewDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token2 missing"
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tokenId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token2 renew date"
argument_list|,
name|tokenRenewDate2
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId2
argument_list|)
operator|.
name|getRenewDate
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|verifyToken
argument_list|(
name|tokenId1
argument_list|,
name|token1
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|verifyToken
argument_list|(
name|tokenId2
argument_list|,
name|token2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|MRDelegationTokenIdentifier
name|tokenId3
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tokenOwner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenRenewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenUser"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|token3
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenId3
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"sequence number restore"
argument_list|,
name|tokenId2
operator|.
name|getSequenceNumber
argument_list|()
operator|+
literal|1
argument_list|,
name|tokenId3
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|cancelToken
argument_list|(
name|token1
argument_list|,
literal|"tokenOwner"
argument_list|)
expr_stmt|;
comment|// Testing with full principal name
name|MRDelegationTokenIdentifier
name|tokenIdFull
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tokenOwner/localhost@LOCALHOST"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenRenewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenUser"
argument_list|)
argument_list|)
decl_stmt|;
name|KerberosName
operator|.
name|setRules
argument_list|(
literal|"RULE:[1:$1]\nRULE:[2:$1]"
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|tokenFull
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdFull
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
comment|// Negative test
try|try
block|{
name|mgr
operator|.
name|cancelToken
argument_list|(
name|tokenFull
argument_list|,
literal|"tokenOwner"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ace
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not authorized to cancel the token"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Succeed to cancel with full principal
name|mgr
operator|.
name|cancelToken
argument_list|(
name|tokenFull
argument_list|,
name|tokenIdFull
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|tokenRenewDate3
init|=
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId3
argument_list|)
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
name|mgr
operator|=
operator|new
name|JHSDelegationTokenSecretManagerForTest
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|recover
argument_list|(
name|store
operator|.
name|loadState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"token1 should be missing"
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tokenId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token2 missing"
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tokenId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token2 renew date"
argument_list|,
name|tokenRenewDate2
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId2
argument_list|)
operator|.
name|getRenewDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token3 missing"
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tokenId3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token3 renew date"
argument_list|,
name|tokenRenewDate3
argument_list|,
name|mgr
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|tokenId3
argument_list|)
operator|.
name|getRenewDate
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|verifyToken
argument_list|(
name|tokenId2
argument_list|,
name|token2
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|verifyToken
argument_list|(
name|tokenId3
argument_list|,
name|token3
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
DECL|class|JHSDelegationTokenSecretManagerForTest
specifier|private
specifier|static
class|class
name|JHSDelegationTokenSecretManagerForTest
extends|extends
name|JHSDelegationTokenSecretManager
block|{
DECL|method|JHSDelegationTokenSecretManagerForTest ( HistoryServerStateStoreService store)
specifier|public
name|JHSDelegationTokenSecretManagerForTest
parameter_list|(
name|HistoryServerStateStoreService
name|store
parameter_list|)
block|{
name|super
argument_list|(
literal|10000
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllTokens ()
specifier|public
name|Map
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|,
name|DelegationTokenInformation
argument_list|>
name|getAllTokens
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|,
name|DelegationTokenInformation
argument_list|>
argument_list|(
name|currentTokens
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

