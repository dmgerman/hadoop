begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestJobHistoryEntities
specifier|public
class|class
name|TestJobHistoryEntities
block|{
DECL|field|historyFileName
specifier|private
specifier|final
name|String
name|historyFileName
init|=
literal|"job_1329348432655_0001-1329348443227-user-Sleep+job-1329348468601-10-1-SUCCEEDED-default.jhist"
decl_stmt|;
DECL|field|confFileName
specifier|private
specifier|final
name|String
name|confFileName
init|=
literal|"job_1329348432655_0001_conf.xml"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|jobAclsManager
specifier|private
specifier|final
name|JobACLsManager
name|jobAclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
DECL|field|loadTasks
specifier|private
name|boolean
name|loadTasks
decl_stmt|;
DECL|field|jobId
specifier|private
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1329348432655l
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|fulleHistoryPath
name|Path
name|fulleHistoryPath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|historyFileName
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fullConfPath
name|Path
name|fullConfPath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|confFileName
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|completedJob
specifier|private
name|CompletedJob
name|completedJob
decl_stmt|;
DECL|method|TestJobHistoryEntities (boolean loadTasks)
specifier|public
name|TestJobHistoryEntities
parameter_list|(
name|boolean
name|loadTasks
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|loadTasks
operator|=
name|loadTasks
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|false
block|}
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/* Verify some expected values based on the history file */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testCompletedJob ()
specifier|public
name|void
name|testCompletedJob
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileInfo
name|info
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullConfPath
argument_list|)
expr_stmt|;
comment|//Re-initialize to verify the delayed load.
name|completedJob
operator|=
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|,
name|fulleHistoryPath
argument_list|,
name|loadTasks
argument_list|,
literal|"user"
argument_list|,
name|info
argument_list|,
name|jobAclsManager
argument_list|)
expr_stmt|;
comment|//Verify tasks loaded based on loadTask parameter.
name|assertEquals
argument_list|(
name|loadTasks
argument_list|,
name|completedJob
operator|.
name|tasksLoaded
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|completedJob
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|completedJob
operator|.
name|getCompletedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|completedJob
operator|.
name|getCompletedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|completedJob
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Verify tasks loaded at this point.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|completedJob
operator|.
name|tasksLoaded
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|completedJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|completedJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|completedJob
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|completedJob
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|JobReport
name|jobReport
init|=
name|completedJob
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|jobReport
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|jobReport
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCompletedTask ()
specifier|public
name|void
name|testCompletedTask
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileInfo
name|info
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullConfPath
argument_list|)
expr_stmt|;
name|completedJob
operator|=
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|,
name|fulleHistoryPath
argument_list|,
name|loadTasks
argument_list|,
literal|"user"
argument_list|,
name|info
argument_list|,
name|jobAclsManager
argument_list|)
expr_stmt|;
name|TaskId
name|mt1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|TaskId
name|rt1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|mapTasks
init|=
name|completedJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|reduceTasks
init|=
name|completedJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reduceTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|mt1
init|=
name|mapTasks
operator|.
name|get
argument_list|(
name|mt1Id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mt1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|mt1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|TaskReport
name|mt1Report
init|=
name|mt1
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|mt1Report
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mt1Id
argument_list|,
name|mt1Report
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|rt1
init|=
name|reduceTasks
operator|.
name|get
argument_list|(
name|rt1Id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rt1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|rt1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|TaskReport
name|rt1Report
init|=
name|rt1
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|rt1Report
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rt1Id
argument_list|,
name|rt1Report
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCompletedTaskAttempt ()
specifier|public
name|void
name|testCompletedTaskAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileInfo
name|info
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullConfPath
argument_list|)
expr_stmt|;
name|completedJob
operator|=
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|,
name|fulleHistoryPath
argument_list|,
name|loadTasks
argument_list|,
literal|"user"
argument_list|,
name|info
argument_list|,
name|jobAclsManager
argument_list|)
expr_stmt|;
name|TaskId
name|mt1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|TaskId
name|rt1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|mta1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|mt1Id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|rta1Id
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|rt1Id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Task
name|mt1
init|=
name|completedJob
operator|.
name|getTask
argument_list|(
name|mt1Id
argument_list|)
decl_stmt|;
name|Task
name|rt1
init|=
name|completedJob
operator|.
name|getTask
argument_list|(
name|rt1Id
argument_list|)
decl_stmt|;
name|TaskAttempt
name|mta1
init|=
name|mt1
operator|.
name|getAttempt
argument_list|(
name|mta1Id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|mta1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost:45454"
argument_list|,
name|mta1
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost:9999"
argument_list|,
name|mta1
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptReport
name|mta1Report
init|=
name|mta1
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|mta1Report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|mta1Report
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45454
argument_list|,
name|mta1Report
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
name|mta1Report
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttempt
name|rta1
init|=
name|rt1
operator|.
name|getAttempt
argument_list|(
name|rta1Id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|rta1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost:45454"
argument_list|,
name|rta1
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost:9999"
argument_list|,
name|rta1
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptReport
name|rta1Report
init|=
name|rta1
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|rta1Report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|rta1Report
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45454
argument_list|,
name|rta1Report
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
name|rta1Report
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple test of some methods of CompletedJob    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetTaskAttemptCompletionEvent ()
specifier|public
name|void
name|testGetTaskAttemptCompletionEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileInfo
name|info
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullConfPath
argument_list|)
expr_stmt|;
name|completedJob
operator|=
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|,
name|fulleHistoryPath
argument_list|,
name|loadTasks
argument_list|,
literal|"user"
argument_list|,
name|info
argument_list|,
name|jobAclsManager
argument_list|)
expr_stmt|;
name|TaskCompletionEvent
index|[]
name|events
init|=
name|completedJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|completedJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|currentEventId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|taskAttemptCompletionEvent
range|:
name|events
control|)
block|{
name|int
name|eventId
init|=
name|taskAttemptCompletionEvent
operator|.
name|getEventId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|eventId
operator|>=
name|currentEventId
argument_list|)
expr_stmt|;
name|currentEventId
operator|=
name|eventId
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|completedJob
operator|.
name|loadConfFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// job name
name|assertEquals
argument_list|(
literal|"Sleep job"
argument_list|,
name|completedJob
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// queue name
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|completedJob
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// progress
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|completedJob
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// 12 rows in answer
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|completedJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// select first 10 rows
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|completedJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// select 5-10 rows include 5th
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|completedJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// without errors
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|completedJob
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|completedJob
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|completedJob
operator|.
name|getJobACLs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

