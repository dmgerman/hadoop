begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestHistoryFileManager
specifier|public
class|class
name|TestHistoryFileManager
block|{
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|dfsCluster2
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster2
init|=
literal|null
decl_stmt|;
DECL|field|coreSitePath
specifier|private
specifier|static
name|String
name|coreSitePath
decl_stmt|;
annotation|@
name|Rule
DECL|field|name
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|coreSitePath
operator|=
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test-classes"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"core-site.xml"
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|conf2
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
operator|+
literal|"_2"
argument_list|)
expr_stmt|;
name|dfsCluster2
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanUpClass ()
specifier|public
specifier|static
name|void
name|cleanUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanTest ()
specifier|public
name|void
name|cleanTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|coreSitePath
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|dfsCluster2
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
DECL|method|getDoneDirNameForTest ()
specifier|private
name|String
name|getDoneDirNameForTest
parameter_list|()
block|{
return|return
literal|"/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
DECL|method|getIntermediateDoneDirNameForTest ()
specifier|private
name|String
name|getIntermediateDoneDirNameForTest
parameter_list|()
block|{
return|return
literal|"/intermediate_"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
DECL|method|testTryCreateHistoryDirs (Configuration conf, boolean expected)
specifier|private
name|void
name|testTryCreateHistoryDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DONE_DIR
argument_list|,
name|getDoneDirNameForTest
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
name|getIntermediateDoneDirNameForTest
argument_list|()
argument_list|)
expr_stmt|;
name|HistoryFileManager
name|hfm
init|=
operator|new
name|HistoryFileManager
argument_list|()
decl_stmt|;
name|hfm
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|hfm
operator|.
name|tryCreatingHistoryDirs
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirsWithoutFileSystem ()
specifier|public
name|void
name|testCreateDirsWithoutFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:1"
argument_list|)
expr_stmt|;
name|testTryCreateHistoryDirs
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirsWithFileSystem ()
specifier|public
name|void
name|testCreateDirsWithFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|testTryCreateHistoryDirs
argument_list|(
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirsWithAdditionalFileSystem ()
specifier|public
name|void
name|testCreateDirsWithAdditionalFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|dfsCluster2
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster2
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set default configuration to the first cluster
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|dfsCluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|coreSitePath
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|testTryCreateHistoryDirs
argument_list|(
name|dfsCluster2
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Directories should be created only in the default file system (dfsCluster)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|getDoneDirNameForTest
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|getIntermediateDoneDirNameForTest
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster2
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|getDoneDirNameForTest
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster2
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|getIntermediateDoneDirNameForTest
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirsWithFileSystemInSafeMode ()
specifier|public
name|void
name|testCreateDirsWithFileSystemInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|testTryCreateHistoryDirs
argument_list|(
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateHistoryDirs (Configuration conf, Clock clock)
specifier|private
name|void
name|testCreateHistoryDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DONE_DIR
argument_list|,
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|HistoryFileManager
name|hfm
init|=
operator|new
name|HistoryFileManager
argument_list|()
decl_stmt|;
name|hfm
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|hfm
operator|.
name|createHistoryDirs
argument_list|(
name|clock
argument_list|,
literal|500
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirsWithFileSystemBecomingAvailBeforeTimeout ()
specifier|public
name|void
name|testCreateDirsWithFileSystemBecomingAvailBeforeTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|testCreateHistoryDirs
argument_list|(
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testCreateDirsWithFileSystemNotBecomingAvailBeforeTimeout ()
specifier|public
name|void
name|testCreateDirsWithFileSystemNotBecomingAvailBeforeTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|testCreateHistoryDirs
argument_list|(
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScanDirectory ()
specifier|public
name|void
name|testScanDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
name|mock
argument_list|(
name|FileContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fc
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|FileNotFoundException
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|lfs
init|=
name|HistoryFileManager
operator|.
name|scanDirectory
argument_list|(
name|p
argument_list|,
name|fc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//primarily, succcess is that an exception was not thrown.  Also nice to
comment|//check this
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryFileInfoSummaryFileNotExist ()
specifier|public
name|void
name|testHistoryFileInfoSummaryFileNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileManagerTest
name|hmTest
init|=
operator|new
name|HistoryFileManagerTest
argument_list|()
decl_stmt|;
name|String
name|job
init|=
literal|"job_1410889000000_123456"
decl_stmt|;
name|Path
name|summaryFile
init|=
operator|new
name|Path
argument_list|(
name|job
operator|+
literal|".summary"
argument_list|)
decl_stmt|;
name|JobIndexInfo
name|jobIndexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|jobIndexInfo
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|job
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DONE_DIR
argument_list|,
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|hmTest
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|info
init|=
name|hmTest
operator|.
name|getHistoryFileInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|summaryFile
argument_list|,
name|jobIndexInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|info
operator|.
name|moveToDone
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
operator|.
name|didMoveFail
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryFileInfoLoadOversizedJobShouldReturnUnParsedJob ()
specifier|public
name|void
name|testHistoryFileInfoLoadOversizedJobShouldReturnUnParsedJob
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileManagerTest
name|hmTest
init|=
operator|new
name|HistoryFileManagerTest
argument_list|()
decl_stmt|;
name|int
name|allowedMaximumTasks
init|=
literal|5
decl_stmt|;
name|Configuration
name|conf
init|=
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_LOADED_JOBS_TASKS_MAX
argument_list|,
name|allowedMaximumTasks
argument_list|)
expr_stmt|;
name|hmTest
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// set up a job of which the number of tasks is greater than maximum allowed
name|String
name|jobId
init|=
literal|"job_1410889000000_123456"
decl_stmt|;
name|JobIndexInfo
name|jobIndexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|jobIndexInfo
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumMaps
argument_list|(
name|allowedMaximumTasks
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumReduces
argument_list|(
name|allowedMaximumTasks
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|info
init|=
name|hmTest
operator|.
name|getHistoryFileInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobIndexInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|info
operator|.
name|loadJob
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should return an instance of UnparsedJob to indicate"
operator|+
literal|" the job history file is not parsed"
argument_list|,
name|job
operator|instanceof
name|UnparsedJob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryFileInfoLoadNormalSizedJobShouldReturnCompletedJob ()
specifier|public
name|void
name|testHistoryFileInfoLoadNormalSizedJobShouldReturnCompletedJob
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileManagerTest
name|hmTest
init|=
operator|new
name|HistoryFileManagerTest
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numOfTasks
init|=
literal|100
decl_stmt|;
name|Configuration
name|conf
init|=
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_LOADED_JOBS_TASKS_MAX
argument_list|,
name|numOfTasks
operator|+
name|numOfTasks
operator|+
literal|1
argument_list|)
expr_stmt|;
name|hmTest
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// set up a job of which the number of tasks is smaller than the maximum
comment|// allowed, and therefore will be fully loaded.
specifier|final
name|String
name|jobId
init|=
literal|"job_1416424547277_0002"
decl_stmt|;
name|JobIndexInfo
name|jobIndexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|jobIndexInfo
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumMaps
argument_list|(
name|numOfTasks
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumReduces
argument_list|(
name|numOfTasks
argument_list|)
expr_stmt|;
specifier|final
name|String
name|historyFile
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_2.0.3-alpha-FAILED.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|historyFilePath
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|historyFile
argument_list|)
argument_list|)
decl_stmt|;
name|HistoryFileInfo
name|info
init|=
name|hmTest
operator|.
name|getHistoryFileInfo
argument_list|(
name|historyFilePath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobIndexInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|info
operator|.
name|loadJob
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should return an instance of CompletedJob as "
operator|+
literal|"a result of parsing the job history file of the job"
argument_list|,
name|job
operator|instanceof
name|CompletedJob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryFileInfoShouldReturnCompletedJobIfMaxNotConfiged ()
specifier|public
name|void
name|testHistoryFileInfoShouldReturnCompletedJobIfMaxNotConfiged
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileManagerTest
name|hmTest
init|=
operator|new
name|HistoryFileManagerTest
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_LOADED_JOBS_TASKS_MAX
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hmTest
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jobId
init|=
literal|"job_1416424547277_0002"
decl_stmt|;
name|JobIndexInfo
name|jobIndexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|jobIndexInfo
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumMaps
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setNumReduces
argument_list|(
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|historyFile
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_2.0.3-alpha-FAILED.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|historyFilePath
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|historyFile
argument_list|)
argument_list|)
decl_stmt|;
name|HistoryFileInfo
name|info
init|=
name|hmTest
operator|.
name|getHistoryFileInfo
argument_list|(
name|historyFilePath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobIndexInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|info
operator|.
name|loadJob
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should return an instance of CompletedJob as "
operator|+
literal|"a result of parsing the job history file of the job"
argument_list|,
name|job
operator|instanceof
name|CompletedJob
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test sets up a scenario where the history files have already been    * moved to the "done" directory (so the "intermediate" directory is empty),    * but then moveToDone() is called again on the same history file. It    * validates that the second moveToDone() still succeeds rather than throws a    * FileNotFoundException.    */
annotation|@
name|Test
DECL|method|testMoveToDoneAlreadyMovedSucceeds ()
specifier|public
name|void
name|testMoveToDoneAlreadyMovedSucceeds
parameter_list|()
throws|throws
name|Exception
block|{
name|HistoryFileManagerTest
name|historyFileManager
init|=
operator|new
name|HistoryFileManagerTest
argument_list|()
decl_stmt|;
name|long
name|jobTimestamp
init|=
literal|1535436603000L
decl_stmt|;
name|String
name|job
init|=
literal|"job_"
operator|+
name|jobTimestamp
operator|+
literal|"_123456789"
decl_stmt|;
name|String
name|intermediateDirectory
init|=
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|doneDirectory
init|=
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
name|intermediateDirectory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DONE_DIR
argument_list|,
name|doneDirectory
argument_list|)
expr_stmt|;
name|Path
name|intermediateHistoryFilePath
init|=
operator|new
name|Path
argument_list|(
name|intermediateDirectory
operator|+
literal|"/"
operator|+
name|job
operator|+
literal|".jhist"
argument_list|)
decl_stmt|;
name|Path
name|intermediateConfFilePath
init|=
operator|new
name|Path
argument_list|(
name|intermediateDirectory
operator|+
literal|"/"
operator|+
name|job
operator|+
literal|"_conf.xml"
argument_list|)
decl_stmt|;
name|Path
name|doneHistoryFilePath
init|=
operator|new
name|Path
argument_list|(
name|doneDirectory
operator|+
literal|"/"
operator|+
name|JobHistoryUtils
operator|.
name|timestampDirectoryComponent
argument_list|(
name|jobTimestamp
argument_list|)
operator|+
literal|"/123456/"
operator|+
name|job
operator|+
literal|".jhist"
argument_list|)
decl_stmt|;
name|Path
name|doneConfFilePath
init|=
operator|new
name|Path
argument_list|(
name|doneDirectory
operator|+
literal|"/"
operator|+
name|JobHistoryUtils
operator|.
name|timestampDirectoryComponent
argument_list|(
name|jobTimestamp
argument_list|)
operator|+
literal|"/123456/"
operator|+
name|job
operator|+
literal|"_conf.xml"
argument_list|)
decl_stmt|;
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|createNewFile
argument_list|(
name|doneHistoryFilePath
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|createNewFile
argument_list|(
name|doneConfFilePath
argument_list|)
expr_stmt|;
name|historyFileManager
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JobIndexInfo
name|jobIndexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|jobIndexInfo
operator|.
name|setJobId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|job
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jobIndexInfo
operator|.
name|setFinishTime
argument_list|(
name|jobTimestamp
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|info
init|=
name|historyFileManager
operator|.
name|getHistoryFileInfo
argument_list|(
name|intermediateHistoryFilePath
argument_list|,
name|intermediateConfFilePath
argument_list|,
literal|null
argument_list|,
name|jobIndexInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|info
operator|.
name|moveToDone
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
operator|.
name|isMovePending
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doneHistoryFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|info
operator|.
name|getHistoryFile
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doneConfFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|info
operator|.
name|getConfFile
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|HistoryFileManagerTest
specifier|static
class|class
name|HistoryFileManagerTest
extends|extends
name|HistoryFileManager
block|{
DECL|method|HistoryFileManagerTest ()
specifier|public
name|HistoryFileManagerTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getHistoryFileInfo (Path historyFile, Path confFile, Path summaryFile, JobIndexInfo jobIndexInfo, boolean isInDone)
specifier|public
name|HistoryFileInfo
name|getHistoryFileInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|confFile
parameter_list|,
name|Path
name|summaryFile
parameter_list|,
name|JobIndexInfo
name|jobIndexInfo
parameter_list|,
name|boolean
name|isInDone
parameter_list|)
block|{
return|return
operator|new
name|HistoryFileInfo
argument_list|(
name|historyFile
argument_list|,
name|confFile
argument_list|,
name|summaryFile
argument_list|,
name|jobIndexInfo
argument_list|,
name|isInDone
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

