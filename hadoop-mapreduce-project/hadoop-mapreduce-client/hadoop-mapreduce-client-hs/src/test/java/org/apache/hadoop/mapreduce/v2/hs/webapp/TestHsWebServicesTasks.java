begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockJobs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_comment
comment|/**  * Test the history server Rest API for getting tasks, a specific task,  * and task counters.  *  * /ws/v1/history/mapreduce/jobs/{jobid}/tasks  * /ws/v1/history/mapreduce/jobs/{jobid}/tasks/{taskid}  * /ws/v1/history/mapreduce/jobs/{jobid}/tasks/{taskid}/counters  */
end_comment

begin_class
DECL|class|TestHsWebServicesTasks
specifier|public
class|class
name|TestHsWebServicesTasks
extends|extends
name|JerseyTest
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|appContext
specifier|private
specifier|static
name|TestAppContext
name|appContext
decl_stmt|;
DECL|field|webApp
specifier|private
specifier|static
name|HsWebApp
name|webApp
decl_stmt|;
DECL|class|TestAppContext
specifier|static
class|class
name|TestAppContext
implements|implements
name|AppContext
block|{
DECL|field|appAttemptID
specifier|final
name|ApplicationAttemptId
name|appAttemptID
decl_stmt|;
DECL|field|appID
specifier|final
name|ApplicationId
name|appID
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
init|=
name|MockJobs
operator|.
name|newUserName
argument_list|()
decl_stmt|;
DECL|field|jobs
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|TestAppContext (int appid, int numJobs, int numTasks, int numAttempts)
name|TestAppContext
parameter_list|(
name|int
name|appid
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|)
block|{
name|appID
operator|=
name|MockJobs
operator|.
name|newAppID
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|appAttemptID
operator|=
name|MockJobs
operator|.
name|newAppAttemptID
argument_list|(
name|appID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobs
operator|=
name|MockJobs
operator|.
name|newJobs
argument_list|(
name|appID
argument_list|,
name|numJobs
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
block|}
DECL|method|TestAppContext ()
name|TestAppContext
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|appID
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CharSequence
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|jobs
return|;
comment|// OK
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
literal|"TestApp"
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
block|}
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|appContext
operator|=
operator|new
name|TestAppContext
argument_list|()
expr_stmt|;
name|webApp
operator|=
name|mock
argument_list|(
name|HsWebApp
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|webApp
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"hsmockwebapp"
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|HsWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|WebApp
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|webApp
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestHsWebServicesTasks ()
specifier|public
name|TestHsWebServicesTasks
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.mapreduce.v2.hs.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTasks ()
specifier|public
name|void
name|testTasks
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tasks
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|tasks
operator|.
name|getJSONArray
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHsTask
argument_list|(
name|arr
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksDefault ()
specifier|public
name|void
name|testTasksDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tasks
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|tasks
operator|.
name|getJSONArray
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHsTask
argument_list|(
name|arr
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksSlash ()
specifier|public
name|void
name|testTasksSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tasks
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|tasks
operator|.
name|getJSONArray
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHsTask
argument_list|(
name|arr
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksXML ()
specifier|public
name|void
name|testTasksXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|tasks
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|task
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|verifyHsTaskXML
argument_list|(
name|task
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksQueryMap ()
specifier|public
name|void
name|testTasksQueryMap
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|"m"
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tasks
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|tasks
operator|.
name|getJSONArray
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHsTask
argument_list|(
name|arr
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksQueryReduce ()
specifier|public
name|void
name|testTasksQueryReduce
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|"r"
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tasks
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"tasks"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|tasks
operator|.
name|getJSONArray
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHsTask
argument_list|(
name|arr
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTasksQueryInvalid ()
specifier|public
name|void
name|testTasksQueryInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// tasktype must be exactly either "m" or "r"
name|String
name|tasktype
init|=
literal|"reduce"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"type"
argument_list|,
name|tasktype
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: tasktype must be either m or r"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskId ()
specifier|public
name|void
name|testTaskId
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|verifyHsSingleTask
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdSlash ()
specifier|public
name|void
name|testTaskIdSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
operator|+
literal|"/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|verifyHsSingleTask
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdDefault ()
specifier|public
name|void
name|testTaskIdDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|verifyHsSingleTask
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdBogus ()
specifier|public
name|void
name|testTaskIdBogus
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
literal|"bogustaskid"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: TaskId string : "
operator|+
literal|"bogustaskid is not properly formed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdNonExist ()
specifier|public
name|void
name|testTaskIdNonExist
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
literal|"task_0_0000_m_000000"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: task not found with id task_0_0000_m_000000"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdInvalid ()
specifier|public
name|void
name|testTaskIdInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
literal|"task_0_0000_d_000000"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: Bad TaskType identifier. TaskId string : "
operator|+
literal|"task_0_0000_d_000000 is not properly formed."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdInvalid2 ()
specifier|public
name|void
name|testTaskIdInvalid2
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
literal|"task_0000_m_000000"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: TaskId string : "
operator|+
literal|"task_0000_m_000000 is not properly formed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdInvalid3 ()
specifier|public
name|void
name|testTaskIdInvalid3
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
literal|"task_0_0000_m"
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: TaskId string : "
operator|+
literal|"task_0_0000_m is not properly formed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdXML ()
specifier|public
name|void
name|testTaskIdXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyHsSingleTaskXML
argument_list|(
name|element
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verifyHsSingleTask (JSONObject info, Task task)
specifier|public
name|void
name|verifyHsSingleTask
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|8
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTaskGeneric
argument_list|(
name|task
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"successfulAttempt"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"finishTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"elapsedTime"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"progress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHsTask (JSONArray arr, Job job, String type)
specifier|public
name|void
name|verifyHsTask
parameter_list|(
name|JSONArray
name|arr
parameter_list|,
name|Job
name|job
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|JSONException
block|{
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskId
name|id
init|=
name|task
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|task
operator|.
name|getType
argument_list|()
operator|==
name|MRApps
operator|.
name|taskType
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|info
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tid
operator|.
name|matches
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|verifyHsSingleTask
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"task with id: "
operator|+
name|tid
operator|+
literal|" not in web service output"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyTaskGeneric (Task task, String id, String state, String type, String successfulAttempt, long startTime, long finishTime, long elapsedTime, float progress)
specifier|public
name|void
name|verifyTaskGeneric
parameter_list|(
name|Task
name|task
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|successfulAttempt
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|long
name|elapsedTime
parameter_list|,
name|float
name|progress
parameter_list|)
block|{
name|TaskId
name|taskid
init|=
name|task
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
name|TaskReport
name|report
init|=
name|task
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|tid
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"type"
argument_list|,
name|task
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|report
operator|.
name|getTaskState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// not easily checked without duplicating logic, just make sure its here
name|assertNotNull
argument_list|(
literal|"successfulAttempt null"
argument_list|,
name|successfulAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startTime wrong"
argument_list|,
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"finishTime wrong"
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|finishTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"elapsedTime wrong"
argument_list|,
name|finishTime
operator|-
name|startTime
argument_list|,
name|elapsedTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"progress wrong"
argument_list|,
name|report
operator|.
name|getProgress
argument_list|()
operator|*
literal|100
argument_list|,
name|progress
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHsSingleTaskXML (Element element, Task task)
specifier|public
name|void
name|verifyHsSingleTaskXML
parameter_list|(
name|Element
name|element
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
name|verifyTaskGeneric
argument_list|(
name|task
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"type"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"successfulAttempt"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"finishTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"elapsedTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"progress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHsTaskXML (NodeList nodes, Job job)
specifier|public
name|void
name|verifyHsTaskXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskId
name|id
init|=
name|task
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tid
operator|.
name|matches
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|verifyHsSingleTaskXML
argument_list|(
name|element
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"task with id: "
operator|+
name|tid
operator|+
literal|" not in web service output"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdCounters ()
specifier|public
name|void
name|testTaskIdCounters
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobTaskCounters"
argument_list|)
decl_stmt|;
name|verifyHsJobTaskCounters
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdCountersSlash ()
specifier|public
name|void
name|testTaskIdCountersSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobTaskCounters"
argument_list|)
decl_stmt|;
name|verifyHsJobTaskCounters
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskIdCountersDefault ()
specifier|public
name|void
name|testTaskIdCountersDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobTaskCounters"
argument_list|)
decl_stmt|;
name|verifyHsJobTaskCounters
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testJobTaskCountersXML ()
specifier|public
name|void
name|testJobTaskCountersXML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tid
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"history"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"tasks"
argument_list|)
operator|.
name|path
argument_list|(
name|tid
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|info
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"jobTaskCounters"
argument_list|)
decl_stmt|;
name|verifyHsTaskCountersXML
argument_list|(
name|info
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyHsJobTaskCounters (JSONObject info, Task task)
specifier|public
name|void
name|verifyHsJobTaskCounters
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// just do simple verification of fields - not data is correct
comment|// in the fields
name|JSONArray
name|counterGroups
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"taskCounterGroup"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counterGroups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|counterGroup
init|=
name|counterGroups
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|counterGroup
operator|.
name|getString
argument_list|(
literal|"counterGroupName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"name not set"
argument_list|,
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|JSONArray
name|counters
init|=
name|counterGroup
operator|.
name|getJSONArray
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|counters
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|JSONObject
name|counter
init|=
name|counters
operator|.
name|getJSONObject
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|counterName
init|=
name|counter
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"name not set"
argument_list|,
operator|(
name|counterName
operator|!=
literal|null
operator|&&
operator|!
name|counterName
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|value
init|=
name|counter
operator|.
name|getLong
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"value>= 0"
argument_list|,
name|value
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyHsTaskCountersXML (NodeList nodes, Task task)
specifier|public
name|void
name|verifyHsTaskCountersXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// just do simple verification of fields - not data is correct
comment|// in the fields
name|NodeList
name|groups
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"taskCounterGroup"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groups
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|counters
init|=
operator|(
name|Element
operator|)
name|groups
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should have counters in the web service info"
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|counters
argument_list|,
literal|"counterGroupName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"name not set"
argument_list|,
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|NodeList
name|counterArr
init|=
name|counters
operator|.
name|getElementsByTagName
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|counterArr
operator|.
name|getLength
argument_list|()
condition|;
name|z
operator|++
control|)
block|{
name|Element
name|counter
init|=
operator|(
name|Element
operator|)
name|counterArr
operator|.
name|item
argument_list|(
name|z
argument_list|)
decl_stmt|;
name|String
name|counterName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|counter
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"counter name not set"
argument_list|,
operator|(
name|counterName
operator|!=
literal|null
operator|&&
operator|!
name|counterName
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|value
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|counter
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"value not>= 0"
argument_list|,
name|value
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

