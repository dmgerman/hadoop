begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|CompletedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestCompletedTask
specifier|public
class|class
name|TestCompletedTask
block|{
annotation|@
name|Test
DECL|method|testTaskStartTimes ()
specifier|public
name|void
name|testTaskStartTimes
parameter_list|()
block|{
name|TaskId
name|taskId
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|taskInfo
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|taskAttempts
init|=
operator|new
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|id
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"0"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|info
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TaskAttemptInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|info
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|info
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10l
argument_list|)
expr_stmt|;
name|taskAttempts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|id
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|info
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TaskAttemptInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|info
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|info
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|20l
argument_list|)
expr_stmt|;
name|taskAttempts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttempts
argument_list|)
expr_stmt|;
name|CompletedTask
name|task
init|=
operator|new
name|CompletedTask
argument_list|(
name|taskId
argument_list|,
name|taskInfo
argument_list|)
decl_stmt|;
name|TaskReport
name|report
init|=
name|task
operator|.
name|getReport
argument_list|()
decl_stmt|;
comment|// Make sure the startTime returned by report is the lesser of the
comment|// attempy launch times
name|Assert
operator|.
name|assertTrue
argument_list|(
name|report
operator|.
name|getStartTime
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

