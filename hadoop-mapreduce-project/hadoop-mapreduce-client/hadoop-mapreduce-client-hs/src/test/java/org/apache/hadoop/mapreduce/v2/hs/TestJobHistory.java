begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|JobListCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestJobHistory
specifier|public
class|class
name|TestJobHistory
block|{
DECL|field|jobHistory
name|JobHistory
name|jobHistory
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
DECL|method|testRefreshJobRetentionSettings ()
specifier|public
name|void
name|testRefreshJobRetentionSettings
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|historyDoneDir
init|=
name|root
operator|+
literal|"mapred/history/done"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|someTimeYesterday
init|=
name|now
operator|-
operator|(
literal|25l
operator|*
literal|3600
operator|*
literal|1000
operator|)
decl_stmt|;
name|long
name|timeBefore200Secs
init|=
name|now
operator|-
operator|(
literal|200l
operator|*
literal|1000
operator|)
decl_stmt|;
comment|// Get yesterday's date in YY/MM/DD format
name|String
name|timestampComponent
init|=
name|JobHistoryUtils
operator|.
name|timestampDirectoryComponent
argument_list|(
name|someTimeYesterday
argument_list|)
decl_stmt|;
comment|// Create a folder under yesterday's done dir
name|Path
name|donePathYesterday
init|=
operator|new
name|Path
argument_list|(
name|historyDoneDir
argument_list|,
name|timestampComponent
operator|+
literal|"/"
operator|+
literal|"000000"
argument_list|)
decl_stmt|;
name|FileStatus
name|dirCreatedYesterdayStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|someTimeYesterday
argument_list|,
name|donePathYesterday
argument_list|)
decl_stmt|;
comment|// Get today's date in YY/MM/DD format
name|timestampComponent
operator|=
name|JobHistoryUtils
operator|.
name|timestampDirectoryComponent
argument_list|(
name|timeBefore200Secs
argument_list|)
expr_stmt|;
comment|// Create a folder under today's done dir
name|Path
name|donePathToday
init|=
operator|new
name|Path
argument_list|(
name|historyDoneDir
argument_list|,
name|timestampComponent
operator|+
literal|"/"
operator|+
literal|"000000"
argument_list|)
decl_stmt|;
name|FileStatus
name|dirCreatedTodayStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeBefore200Secs
argument_list|,
name|donePathToday
argument_list|)
decl_stmt|;
comment|// Create a jhist file with yesterday's timestamp under yesterday's done dir
name|Path
name|fileUnderYesterdayDir
init|=
operator|new
name|Path
argument_list|(
name|donePathYesterday
operator|.
name|toString
argument_list|()
argument_list|,
literal|"job_1372363578825_0015-"
operator|+
name|someTimeYesterday
operator|+
literal|"-user-Sleep+job-"
operator|+
name|someTimeYesterday
operator|+
literal|"-1-1-SUCCEEDED-default.jhist"
argument_list|)
decl_stmt|;
name|FileStatus
name|fileUnderYesterdayDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|someTimeYesterday
argument_list|,
name|fileUnderYesterdayDir
argument_list|)
decl_stmt|;
comment|// Create a jhist file with today's timestamp under today's done dir
name|Path
name|fileUnderTodayDir
init|=
operator|new
name|Path
argument_list|(
name|donePathYesterday
operator|.
name|toString
argument_list|()
argument_list|,
literal|"job_1372363578825_0016-"
operator|+
name|timeBefore200Secs
operator|+
literal|"-user-Sleep+job-"
operator|+
name|timeBefore200Secs
operator|+
literal|"-1-1-SUCCEEDED-default.jhist"
argument_list|)
decl_stmt|;
name|FileStatus
name|fileUnderTodayDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeBefore200Secs
argument_list|,
name|fileUnderTodayDir
argument_list|)
decl_stmt|;
name|HistoryFileManager
name|historyManager
init|=
name|spy
argument_list|(
operator|new
name|HistoryFileManager
argument_list|()
argument_list|)
decl_stmt|;
name|jobHistory
operator|=
name|spy
argument_list|(
operator|new
name|JobHistory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatusList
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|fileStatusList
operator|.
name|add
argument_list|(
name|dirCreatedYesterdayStatus
argument_list|)
expr_stmt|;
name|fileStatusList
operator|.
name|add
argument_list|(
name|dirCreatedTodayStatus
argument_list|)
expr_stmt|;
comment|// Make the initial delay of history job cleaner as 4 secs
name|doReturn
argument_list|(
literal|4
argument_list|)
operator|.
name|when
argument_list|(
name|jobHistory
argument_list|)
operator|.
name|getInitDelaySecs
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|historyManager
argument_list|)
operator|.
name|when
argument_list|(
name|jobHistory
argument_list|)
operator|.
name|createHistoryFileManager
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|list1
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|fileUnderYesterdayDirStatus
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|list1
argument_list|)
operator|.
name|when
argument_list|(
name|historyManager
argument_list|)
operator|.
name|scanDirectoryForHistoryFiles
argument_list|(
name|eq
argument_list|(
name|donePathYesterday
argument_list|)
argument_list|,
name|any
argument_list|(
name|FileContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|list2
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|fileUnderTodayDirStatus
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|list2
argument_list|)
operator|.
name|when
argument_list|(
name|historyManager
argument_list|)
operator|.
name|scanDirectoryForHistoryFiles
argument_list|(
name|eq
argument_list|(
name|donePathToday
argument_list|)
argument_list|,
name|any
argument_list|(
name|FileContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|fileStatusList
argument_list|)
operator|.
name|when
argument_list|(
name|historyManager
argument_list|)
operator|.
name|findTimestampedDirectories
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|historyManager
argument_list|)
operator|.
name|deleteDir
argument_list|(
name|any
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|JobListCache
name|jobListCache
init|=
name|mock
argument_list|(
name|JobListCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|mock
argument_list|(
name|HistoryFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|jobListCache
argument_list|)
operator|.
name|when
argument_list|(
name|historyManager
argument_list|)
operator|.
name|createJobListCache
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|jobListCache
operator|.
name|get
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fileInfo
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// Set job retention time to 24 hrs and cleaner interval to 2 secs
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_MAX_AGE_MS
argument_list|,
literal|24l
operator|*
literal|3600
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_CLEANER_INTERVAL_MS
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jobHistory
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1000l
argument_list|,
name|jobHistory
operator|.
name|getCleanerInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only yesterday's jhist file should get deleted
name|verify
argument_list|(
name|fileInfo
argument_list|,
name|timeout
argument_list|(
literal|20000
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|fileStatusList
operator|.
name|remove
argument_list|(
name|dirCreatedYesterdayStatus
argument_list|)
expr_stmt|;
comment|// Now reset job retention time to 10 secs
name|conf
operator|.
name|setLong
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_MAX_AGE_MS
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Set cleaner interval to 1 sec
name|conf
operator|.
name|setLong
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_CLEANER_INTERVAL_MS
argument_list|,
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|conf
argument_list|)
operator|.
name|when
argument_list|(
name|jobHistory
argument_list|)
operator|.
name|createConf
argument_list|()
expr_stmt|;
comment|// Do refresh job retention settings
name|jobHistory
operator|.
name|refreshJobRetentionSettings
argument_list|()
expr_stmt|;
comment|// Cleaner interval should be updated
name|assertEquals
argument_list|(
literal|1
operator|*
literal|1000l
argument_list|,
name|jobHistory
operator|.
name|getCleanerInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// Today's jhist file will also be deleted now since it falls below the
comment|// retention threshold
name|verify
argument_list|(
name|fileInfo
argument_list|,
name|timeout
argument_list|(
literal|20000
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|jobHistory
operator|!=
literal|null
condition|)
block|{
name|jobHistory
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

