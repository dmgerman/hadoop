begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptFailEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|JobIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|TaskIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HistoryFileManager
operator|.
name|HistoryFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|TestJobHistoryEvents
operator|.
name|MRAppWithHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestJobHistoryParsing
specifier|public
class|class
name|TestJobHistoryParsing
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestJobHistoryParsing
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RACK_NAME
specifier|private
specifier|static
specifier|final
name|String
name|RACK_NAME
init|=
literal|"/MyRackName"
decl_stmt|;
DECL|field|outContent
specifier|private
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|class|MyResolver
specifier|public
specifier|static
class|class
name|MyResolver
implements|implements
name|DNSToSwitchMapping
block|{
annotation|@
name|Override
DECL|method|resolve (List<String> names)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|RACK_NAME
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reloadCachedMappings ()
specifier|public
name|void
name|reloadCachedMappings
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|reloadCachedMappings (List<String> names)
specifier|public
name|void
name|reloadCachedMappings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{	     }
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testJobInfo ()
specifier|public
name|void
name|testJobInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|JobInfo
name|info
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"NORMAL"
argument_list|,
name|info
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|printAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testHistoryParsing ()
specifier|public
name|void
name|testHistoryParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testHistoryParsing()"
argument_list|)
expr_stmt|;
try|try
block|{
name|checkHistoryParsing
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testHistoryParsing()"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testHistoryParsingWithParseErrors ()
specifier|public
name|void
name|testHistoryParsingWithParseErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testHistoryParsingWithParseErrors()"
argument_list|)
expr_stmt|;
try|try
block|{
name|checkHistoryParsing
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testHistoryParsingWithParseErrors()"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJobSummary (FileContext fc, Path path)
specifier|private
specifier|static
name|String
name|getJobSummary
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qPath
init|=
name|fc
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|qPath
argument_list|)
decl_stmt|;
name|String
name|jobSummaryString
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jobSummaryString
return|;
block|}
DECL|method|checkHistoryParsing (final int numMaps, final int numReduces, final int numSuccessfulMaps)
specifier|private
name|void
name|checkHistoryParsing
parameter_list|(
specifier|final
name|int
name|numMaps
parameter_list|,
specifier|final
name|int
name|numReduces
parameter_list|,
specifier|final
name|int
name|numSuccessfulMaps
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|amStartTimeEst
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
name|numMaps
argument_list|,
name|numReduces
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JOBID is "
operator|+
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
name|jobhistoryDir
init|=
name|JobHistoryUtils
operator|.
name|getHistoryIntermediateDoneDirForUser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not get FileContext"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not get File Context"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|numMaps
operator|==
name|numSuccessfulMaps
condition|)
block|{
name|String
name|summaryFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateSummaryFileName
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|Path
name|summaryFile
init|=
operator|new
name|Path
argument_list|(
name|jobhistoryDir
argument_list|,
name|summaryFileName
argument_list|)
decl_stmt|;
name|String
name|jobSummaryString
init|=
name|getJobSummary
argument_list|(
name|fc
argument_list|,
name|summaryFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobSummaryString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobSummaryString
operator|.
name|contains
argument_list|(
literal|"resourcesPerMap=100"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobSummaryString
operator|.
name|contains
argument_list|(
literal|"resourcesPerReduce=100"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobSummaryElements
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|strToken
init|=
operator|new
name|StringTokenizer
argument_list|(
name|jobSummaryString
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|strToken
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|keypair
init|=
name|strToken
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|jobSummaryElements
operator|.
name|put
argument_list|(
name|keypair
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|keypair
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"JobId does not match"
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"jobId"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"JobName does not match"
argument_list|,
literal|"test"
argument_list|,
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"jobName"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"submitTime should not be 0"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"submitTime"
argument_list|)
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"launchTime should not be 0"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"launchTime"
argument_list|)
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"firstMapTaskLaunchTime should not be 0"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"firstMapTaskLaunchTime"
argument_list|)
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"firstReduceTaskLaunchTime should not be 0"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"firstReduceTaskLaunchTime"
argument_list|)
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"finishTime should not be 0"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"finishTime"
argument_list|)
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in num map slots"
argument_list|,
name|numSuccessfulMaps
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"numMaps"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in num reduce slots"
argument_list|,
name|numReduces
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"numReduces"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"User does not match"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Queue does not match"
argument_list|,
literal|"default"
argument_list|,
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"queue"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Status does not match"
argument_list|,
literal|"SUCCEEDED"
argument_list|,
name|jobSummaryElements
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JobHistory
name|jobHistory
init|=
operator|new
name|JobHistory
argument_list|()
decl_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|jobHistory
operator|.
name|getJobFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
name|long
name|numFinishedMaps
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|Path
name|historyFilePath
init|=
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobHistoryFile is: "
operator|+
name|historyFilePath
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|historyFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not open history file: "
operator|+
name|historyFilePath
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not open History File"
argument_list|)
operator|)
throw|;
block|}
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|EventReader
name|realReader
init|=
operator|new
name|EventReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|EventReader
name|reader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EventReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|numMaps
operator|==
name|numSuccessfulMaps
condition|)
block|{
name|reader
operator|=
name|realReader
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|AtomicInteger
name|numFinishedEvents
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Hack!
name|Mockito
operator|.
name|when
argument_list|(
name|reader
operator|.
name|getNextEvent
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HistoryEvent
argument_list|>
argument_list|()
block|{
specifier|public
name|HistoryEvent
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryEvent
name|event
init|=
name|realReader
operator|.
name|getNextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TaskFinishedEvent
condition|)
block|{
name|numFinishedEvents
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numFinishedEvents
operator|.
name|get
argument_list|()
operator|<=
name|numSuccessfulMaps
condition|)
block|{
return|return
name|event
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"test"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|numFinishedMaps
operator|=
name|computeFinishedMaps
argument_list|(
name|jobInfo
argument_list|,
name|numMaps
argument_list|,
name|numSuccessfulMaps
argument_list|)
expr_stmt|;
if|if
condition|(
name|numFinishedMaps
operator|!=
name|numMaps
condition|)
block|{
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Didn't get expected parse exception"
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect username "
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect jobName "
argument_list|,
literal|"test"
argument_list|,
name|jobInfo
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect queuename "
argument_list|,
literal|"default"
argument_list|,
name|jobInfo
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"incorrect conf path"
argument_list|,
literal|"test"
argument_list|,
name|jobInfo
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"incorrect finishedMap "
argument_list|,
name|numSuccessfulMaps
argument_list|,
name|numFinishedMaps
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"incorrect finishedReduces "
argument_list|,
name|numReduces
argument_list|,
name|jobInfo
operator|.
name|getSucceededReduces
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"incorrect uberized "
argument_list|,
name|job
operator|.
name|isUber
argument_list|()
argument_list|,
name|jobInfo
operator|.
name|getUberized
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|allTasks
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|int
name|totalTasks
init|=
name|allTasks
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"total number of tasks is incorrect  "
argument_list|,
operator|(
name|numMaps
operator|+
name|numReduces
operator|)
argument_list|,
name|totalTasks
argument_list|)
expr_stmt|;
comment|// Verify aminfo
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobInfo
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HOST
argument_list|,
name|jobInfo
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|AMInfo
name|amInfo
init|=
name|jobInfo
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HTTP_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|amInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amInfo
operator|.
name|getStartTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
name|amInfo
operator|.
name|getStartTime
argument_list|()
operator|>=
name|amStartTimeEst
argument_list|)
expr_stmt|;
name|ContainerId
name|fakeCid
init|=
name|MRApp
operator|.
name|newContainerId
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Assert at taskAttempt level
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|allTasks
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|taskAttemptCount
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"total number of task attempts "
argument_list|,
literal|1
argument_list|,
name|taskAttemptCount
argument_list|)
expr_stmt|;
name|TaskAttemptInfo
name|taInfo
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|taInfo
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the wrong ctor is not being used. Remove after mrv1 is removed.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|taInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|fakeCid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Deep compare Job and JobInfo
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|allTasks
operator|.
name|get
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"TaskInfo not found"
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttempt
name|taskAttempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskAttemptInfo
name|taskAttemptInfo
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
operator|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"TaskAttemptInfo not found"
argument_list|,
name|taskAttemptInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect shuffle port for task attempt"
argument_list|,
name|taskAttempt
operator|.
name|getShufflePort
argument_list|()
argument_list|,
name|taskAttemptInfo
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|numMaps
operator|==
name|numSuccessfulMaps
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HOST
argument_list|,
name|taskAttemptInfo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_PORT
argument_list|,
name|taskAttemptInfo
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify rack-name
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rack-name is incorrect"
argument_list|,
name|taskAttemptInfo
operator|.
name|getRackname
argument_list|()
argument_list|,
name|RACK_NAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// test output for HistoryViewer
name|PrintStream
name|stdps
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
argument_list|)
expr_stmt|;
name|HistoryViewer
name|viewer
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|viewer
operator|=
operator|new
name|HistoryViewer
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|viewer
operator|.
name|print
argument_list|()
expr_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|allTasks
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|test
init|=
operator|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|taskInfo
operator|.
name|getTaskType
argument_list|()
operator|+
literal|" task list for "
operator|+
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|test
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|stdps
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Computes finished maps similar to RecoveryService...
DECL|method|computeFinishedMaps (JobInfo jobInfo, int numMaps, int numSuccessfulMaps)
specifier|private
name|long
name|computeFinishedMaps
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numSuccessfulMaps
parameter_list|)
block|{
if|if
condition|(
name|numMaps
operator|==
name|numSuccessfulMaps
condition|)
block|{
return|return
name|jobInfo
operator|.
name|getSucceededMaps
argument_list|()
return|;
block|}
name|long
name|numFinishedMaps
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|taskInfos
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfos
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|TaskState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
condition|)
block|{
operator|++
name|numFinishedMaps
expr_stmt|;
block|}
block|}
return|return
name|numFinishedMaps
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHistoryParsingForFailedAttempts ()
specifier|public
name|void
name|testHistoryParsingForFailedAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testHistoryParsingForFailedAttempts"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistoryWithFailedAttempt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|JobHistory
name|jobHistory
init|=
operator|new
name|JobHistory
argument_list|()
decl_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|jobHistory
operator|.
name|getJobFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|Path
name|historyFilePath
init|=
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|historyFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not open history file: "
operator|+
name|historyFilePath
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not open History File"
argument_list|)
operator|)
throw|;
block|}
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Caught an expected exception "
operator|+
name|parseException
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
name|int
name|noOffailedAttempts
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|allTasks
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|allTasks
operator|.
name|get
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|taskAttempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskAttemptInfo
name|taskAttemptInfo
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
operator|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify rack-name for all task attempts
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rack-name is incorrect"
argument_list|,
name|taskAttemptInfo
operator|.
name|getRackname
argument_list|()
argument_list|,
name|RACK_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskAttemptInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
literal|"FAILED"
argument_list|)
condition|)
block|{
name|noOffailedAttempts
operator|++
expr_stmt|;
block|}
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of Failed tasks doesn't match."
argument_list|,
literal|2
argument_list|,
name|noOffailedAttempts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testHistoryParsingForFailedAttempts"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHistoryParsingForKilledAndFailedAttempts ()
specifier|public
name|void
name|testHistoryParsingForKilledAndFailedAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
literal|null
decl_stmt|;
name|JobHistory
name|jobHistory
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testHistoryParsingForKilledAndFailedAttempts"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_JHIST_FORMAT
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
comment|// "CommitterEventHandler" thread could be slower in some cases,
comment|// which might cause a failed map/reduce task to fail the job
comment|// immediately (see JobImpl.checkJobAfterTaskCompletion()). If there are
comment|// killed events in progress, those will not be counted. Instead,
comment|// we allow a 50% failure rate, so the job will always succeed and kill
comment|// events will not be ignored.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_FAILURES_MAX_PERCENT
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MRAppWithHistoryWithFailedAndKilledTask
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|jobHistory
operator|=
operator|new
name|JobHistory
argument_list|()
expr_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|jobHistory
operator|.
name|getJobFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|Path
name|historyFilePath
init|=
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|historyFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not open history file: "
operator|+
name|historyFilePath
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not open History File"
argument_list|)
operator|)
throw|;
block|}
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Caught an expected exception "
operator|+
name|parseException
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FailedMaps"
argument_list|,
literal|1
argument_list|,
name|jobInfo
operator|.
name|getFailedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KilledMaps"
argument_list|,
literal|1
argument_list|,
name|jobInfo
operator|.
name|getKilledMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FailedReduces"
argument_list|,
literal|1
argument_list|,
name|jobInfo
operator|.
name|getFailedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KilledReduces"
argument_list|,
literal|1
argument_list|,
name|jobInfo
operator|.
name|getKilledReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testHistoryParsingForKilledAndFailedAttempts"
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jobHistory
operator|!=
literal|null
condition|)
block|{
name|jobHistory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCountersForFailedTask ()
specifier|public
name|void
name|testCountersForFailedTask
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testCountersForFailedTask"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistoryWithFailedTask
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|JobHistory
name|jobHistory
init|=
operator|new
name|JobHistory
argument_list|()
decl_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|jobHistory
operator|.
name|getJobFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|Path
name|historyFilePath
init|=
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|historyFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not open history file: "
operator|+
name|historyFilePath
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not open History File"
argument_list|)
operator|)
throw|;
block|}
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Caught an expected exception "
operator|+
name|parseException
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|entry
range|:
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TaskId
name|yarnTaskID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|CompletedTask
name|ct
init|=
operator|new
name|CompletedTask
argument_list|(
name|yarnTaskID
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"completed task report has null counters"
argument_list|,
name|ct
operator|.
name|getReport
argument_list|()
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|originalDiagnostics
init|=
name|job
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
specifier|final
name|String
name|historyError
init|=
name|jobInfo
operator|.
name|getErrorInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No original diagnostics for a failed job"
argument_list|,
name|originalDiagnostics
operator|!=
literal|null
operator|&&
operator|!
name|originalDiagnostics
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No history error info for a failed job "
argument_list|,
name|historyError
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diagString
range|:
name|originalDiagnostics
control|)
block|{
name|assertTrue
argument_list|(
name|historyError
operator|.
name|contains
argument_list|(
name|diagString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testCountersForFailedTask"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDiagnosticsForKilledJob ()
specifier|public
name|void
name|testDiagnosticsForKilledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testDiagnosticsForKilledJob"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistoryWithJobKilled
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|JobHistory
name|jobHistory
init|=
operator|new
name|JobHistory
argument_list|()
decl_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|jobHistory
operator|.
name|getJobFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
synchronized|synchronized
init|(
name|fileInfo
init|)
block|{
name|Path
name|historyFilePath
init|=
name|fileInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|historyFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not open history file: "
operator|+
name|historyFilePath
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Can not open History File"
argument_list|)
operator|)
throw|;
block|}
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Caught an expected exception "
operator|+
name|parseException
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|originalDiagnostics
init|=
name|job
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
specifier|final
name|String
name|historyError
init|=
name|jobInfo
operator|.
name|getErrorInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No original diagnostics for a failed job"
argument_list|,
name|originalDiagnostics
operator|!=
literal|null
operator|&&
operator|!
name|originalDiagnostics
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No history error info for a failed job "
argument_list|,
name|historyError
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diagString
range|:
name|originalDiagnostics
control|)
block|{
name|assertTrue
argument_list|(
name|historyError
operator|.
name|contains
argument_list|(
name|diagString
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"No killed message in diagnostics"
argument_list|,
name|historyError
operator|.
name|contains
argument_list|(
name|JobImpl
operator|.
name|JOB_KILLED_DIAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testDiagnosticsForKilledJob"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testScanningOldDirs ()
specifier|public
name|void
name|testScanningOldDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testScanningOldDirs"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JOBID is "
operator|+
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|HistoryFileManagerForTest
name|hfm
init|=
operator|new
name|HistoryFileManagerForTest
argument_list|()
decl_stmt|;
name|hfm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|hfm
operator|.
name|getFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to locate job history"
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
comment|// force the manager to "forget" the job
name|hfm
operator|.
name|deleteJobFromJobListCache
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
specifier|final
name|int
name|msecPerSleep
init|=
literal|10
decl_stmt|;
name|int
name|msecToSleep
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
name|fileInfo
operator|.
name|isMovePending
argument_list|()
operator|&&
name|msecToSleep
operator|>
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|fileInfo
operator|.
name|didMoveFail
argument_list|()
argument_list|)
expr_stmt|;
name|msecToSleep
operator|-=
name|msecPerSleep
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|msecPerSleep
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Timeout waiting for history move"
argument_list|,
name|msecToSleep
operator|>
literal|0
argument_list|)
expr_stmt|;
name|fileInfo
operator|=
name|hfm
operator|.
name|getFileInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|hfm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to locate old job history"
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HistoryFileManager not shutdown properly"
argument_list|,
name|hfm
operator|.
name|moveToDoneExecutor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testScanningOldDirs"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MRAppWithHistoryWithFailedAttempt
specifier|static
class|class
name|MRAppWithHistoryWithFailedAttempt
extends|extends
name|MRAppWithHistory
block|{
DECL|method|MRAppWithHistoryWithFailedAttempt (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart)
specifier|public
name|MRAppWithHistoryWithFailedAttempt
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|&&
name|attemptID
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptFailEvent
argument_list|(
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MRAppWithHistoryWithFailedTask
specifier|static
class|class
name|MRAppWithHistoryWithFailedTask
extends|extends
name|MRAppWithHistory
block|{
DECL|method|MRAppWithHistoryWithFailedTask (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart)
specifier|public
name|MRAppWithHistoryWithFailedTask
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptFailEvent
argument_list|(
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MRAppWithHistoryWithFailedAndKilledTask
specifier|static
class|class
name|MRAppWithHistoryWithFailedAndKilledTask
extends|extends
name|MRAppWithHistory
block|{
DECL|method|MRAppWithHistoryWithFailedAndKilledTask (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart)
name|MRAppWithHistoryWithFailedAndKilledTask
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
specifier|final
name|int
name|taskId
init|=
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|TaskType
name|taskType
init|=
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
comment|// map #0 --> kill
comment|// reduce #0 --> fail
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
operator|&&
name|taskId
operator|==
literal|0
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
operator|&&
name|taskId
operator|==
literal|1
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptFailEvent
argument_list|(
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
operator|&&
name|taskId
operator|==
literal|0
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptFailEvent
argument_list|(
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
operator|&&
name|taskId
operator|==
literal|1
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MRAppWithHistoryWithJobKilled
specifier|static
class|class
name|MRAppWithHistoryWithJobKilled
extends|extends
name|MRAppWithHistory
block|{
DECL|method|MRAppWithHistoryWithJobKilled (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart)
specifier|public
name|MRAppWithHistoryWithJobKilled
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|HistoryFileManagerForTest
specifier|static
class|class
name|HistoryFileManagerForTest
extends|extends
name|HistoryFileManager
block|{
DECL|method|deleteJobFromJobListCache (HistoryFileInfo fileInfo)
name|void
name|deleteJobFromJobListCache
parameter_list|(
name|HistoryFileInfo
name|fileInfo
parameter_list|)
block|{
name|jobListCache
operator|.
name|delete
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestJobHistoryParsing
name|t
init|=
operator|new
name|TestJobHistoryParsing
argument_list|()
decl_stmt|;
name|t
operator|.
name|testHistoryParsing
argument_list|()
expr_stmt|;
name|t
operator|.
name|testHistoryParsingForFailedAttempts
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test clean old history files. Files should be deleted after 1 week by    * default.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testDeleteFileInfo ()
specifier|public
name|void
name|testDeleteFileInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testDeleteFileInfo"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure all events are flushed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|HistoryFileManager
name|hfm
init|=
operator|new
name|HistoryFileManager
argument_list|()
decl_stmt|;
name|hfm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HistoryFileInfo
name|fileInfo
init|=
name|hfm
operator|.
name|getFileInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|hfm
operator|.
name|initExisting
argument_list|()
expr_stmt|;
comment|// wait for move files form the done_intermediate directory to the gone
comment|// directory
while|while
condition|(
name|fileInfo
operator|.
name|isMovePending
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|hfm
operator|.
name|jobListCache
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to remove fileInfo
name|hfm
operator|.
name|clean
argument_list|()
expr_stmt|;
comment|// check that fileInfo does not deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fileInfo
operator|.
name|isDeleted
argument_list|()
argument_list|)
expr_stmt|;
comment|// correct live time
name|hfm
operator|.
name|setMaxHistoryAge
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hfm
operator|.
name|clean
argument_list|()
expr_stmt|;
name|hfm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Thread pool shutdown"
argument_list|,
name|hfm
operator|.
name|moveToDoneExecutor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
comment|// should be deleted !
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"file should be deleted "
argument_list|,
name|fileInfo
operator|.
name|isDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testDeleteFileInfo"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simple test some methods of JobHistory    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testJobHistoryMethods ()
specifier|public
name|void
name|testJobHistoryMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testJobHistoryMethods"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|submit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JOBID is "
operator|+
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// make sure job history events are handled
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|JobHistory
name|jobHistory
init|=
operator|new
name|JobHistory
argument_list|()
decl_stmt|;
name|jobHistory
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Method getAllJobs
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|getAllJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// and with ApplicationId
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|getAllJobs
argument_list|(
name|app
operator|.
name|getAppID
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JobsInfo
name|jobsinfo
init|=
name|jobHistory
operator|.
name|getPartialJobs
argument_list|(
literal|0L
argument_list|,
literal|10L
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|0L
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobsinfo
operator|.
name|getJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobHistory
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// test Application Id
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application_0_0000"
argument_list|,
name|jobHistory
operator|.
name|getApplicationID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job History Server"
argument_list|,
name|jobHistory
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
comment|// method does not work
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobHistory
operator|.
name|getEventHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// method does not work
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobHistory
operator|.
name|getClock
argument_list|()
argument_list|)
expr_stmt|;
comment|// method does not work
name|Assert
operator|.
name|assertNull
argument_list|(
name|jobHistory
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED testJobHistoryMethods"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simple test PartialJob    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testPartialJob ()
specifier|public
name|void
name|testPartialJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobId
name|jobId
init|=
operator|new
name|JobIdPBImpl
argument_list|()
decl_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|JobIndexInfo
name|jii
init|=
operator|new
name|JobIndexInfo
argument_list|(
literal|0L
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"user"
argument_list|,
literal|"jobName"
argument_list|,
name|jobId
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"JobStatus"
argument_list|)
decl_stmt|;
name|PartialJob
name|test
init|=
operator|new
name|PartialJob
argument_list|(
name|jii
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|test
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getAllCounters
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getTask
argument_list|(
operator|new
name|TaskIdPBImpl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getAMInfos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleFailedTasks ()
specifier|public
name|void
name|testMultipleFailedTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|EventReader
name|reader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EventReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|numEventsRead
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Hack!
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
name|taskType
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
decl_stmt|;
specifier|final
name|TaskID
index|[]
name|tids
init|=
operator|new
name|TaskID
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|tids
index|[
literal|0
index|]
operator|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
name|taskType
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tids
index|[
literal|1
index|]
operator|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
name|taskType
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|reader
operator|.
name|getNextEvent
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HistoryEvent
argument_list|>
argument_list|()
block|{
specifier|public
name|HistoryEvent
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
comment|// send two task start and two task fail events for tasks 0 and 1
name|int
name|eventId
init|=
name|numEventsRead
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|TaskID
name|tid
init|=
name|tids
index|[
name|eventId
operator|&
literal|0x1
index|]
decl_stmt|;
if|if
condition|(
name|eventId
operator|<
literal|2
condition|)
block|{
return|return
operator|new
name|TaskStartedEvent
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|,
name|taskType
argument_list|,
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|eventId
operator|<
literal|4
condition|)
block|{
name|TaskFailedEvent
name|tfe
init|=
operator|new
name|TaskFailedEvent
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|,
name|taskType
argument_list|,
literal|"failed"
argument_list|,
literal|"FAILED"
argument_list|,
literal|null
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
decl_stmt|;
name|tfe
operator|.
name|setDatum
argument_list|(
name|tfe
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tfe
return|;
block|}
if|if
condition|(
name|eventId
operator|<
literal|5
condition|)
block|{
name|JobUnsuccessfulCompletionEvent
name|juce
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|jid
argument_list|,
literal|100L
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"JOB_FAILED"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"Task failed: "
operator|+
name|tids
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|juce
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JobInfo
name|info
init|=
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Task 0 not implicated"
argument_list|,
name|info
operator|.
name|getErrorInfo
argument_list|()
operator|.
name|contains
argument_list|(
name|tids
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedJobHistoryWithoutDiagnostics ()
specifier|public
name|void
name|testFailedJobHistoryWithoutDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|histPath
init|=
operator|new
name|Path
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_1393307629410_0001-1393307687476-user-Sleep+job-1393307723835-0-0-FAILED-default-1393307693920.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|fsdis
init|=
name|lfs
operator|.
name|open
argument_list|(
name|histPath
argument_list|)
decl_stmt|;
try|try
block|{
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fsdis
argument_list|)
decl_stmt|;
name|JobInfo
name|info
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"History parsed jobId incorrectly"
argument_list|,
name|info
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1393307629410_0001"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default diagnostics incorrect "
argument_list|,
literal|""
argument_list|,
name|info
operator|.
name|getErrorInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsdis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test compatibility of JobHistoryParser with 2.0.3-alpha history files    * @throws IOException    */
annotation|@
name|Test
DECL|method|testTaskAttemptUnsuccessfulCompletionWithoutCounters203 ()
specifier|public
name|void
name|testTaskAttemptUnsuccessfulCompletionWithoutCounters203
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|histPath
init|=
operator|new
name|Path
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_2.0.3-alpha-FAILED.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|histPath
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" job info: "
operator|+
name|jobInfo
operator|.
name|getJobname
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getSucceededMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test compatibility of JobHistoryParser with 2.4.0 history files    * @throws IOException    */
annotation|@
name|Test
DECL|method|testTaskAttemptUnsuccessfulCompletionWithoutCounters240 ()
specifier|public
name|void
name|testTaskAttemptUnsuccessfulCompletionWithoutCounters240
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|histPath
init|=
operator|new
name|Path
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_2.4.0-FAILED.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|histPath
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" job info: "
operator|+
name|jobInfo
operator|.
name|getJobname
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getSucceededMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test compatibility of JobHistoryParser with 0.23.9 history files    * @throws IOException    */
annotation|@
name|Test
DECL|method|testTaskAttemptUnsuccessfulCompletionWithoutCounters0239 ()
specifier|public
name|void
name|testTaskAttemptUnsuccessfulCompletionWithoutCounters0239
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|histPath
init|=
operator|new
name|Path
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"job_0.23.9-FAILED.jhist"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|histPath
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" job info: "
operator|+
name|jobInfo
operator|.
name|getJobname
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getSucceededMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
operator|+
literal|" "
operator|+
name|jobInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

