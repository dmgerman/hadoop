begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|HSClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailTaskAttemptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillJobRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillJobResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskAttemptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|security
operator|.
name|authorize
operator|.
name|ClientHSPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|HsWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRWebAppUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This module is responsible for talking to the  * JobClient (user facing).  *  */
end_comment

begin_class
DECL|class|HistoryClientService
specifier|public
class|class
name|HistoryClientService
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HistoryClientService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|protocolHandler
specifier|private
name|HSClientProtocol
name|protocolHandler
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|webApp
specifier|private
name|WebApp
name|webApp
decl_stmt|;
DECL|field|bindAddress
specifier|private
name|InetSocketAddress
name|bindAddress
decl_stmt|;
DECL|field|history
specifier|private
name|HistoryContext
name|history
decl_stmt|;
DECL|field|jhsDTSecretManager
specifier|private
name|JHSDelegationTokenSecretManager
name|jhsDTSecretManager
decl_stmt|;
DECL|method|HistoryClientService (HistoryContext history, JHSDelegationTokenSecretManager jhsDTSecretManager)
specifier|public
name|HistoryClientService
parameter_list|(
name|HistoryContext
name|history
parameter_list|,
name|JHSDelegationTokenSecretManager
name|jhsDTSecretManager
parameter_list|)
block|{
name|super
argument_list|(
literal|"HistoryClientService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|history
operator|=
name|history
expr_stmt|;
name|this
operator|.
name|protocolHandler
operator|=
operator|new
name|HSClientProtocolHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|jhsDTSecretManager
operator|=
name|jhsDTSecretManager
expr_stmt|;
block|}
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|initializeWebApp
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_BIND_HOST
argument_list|,
name|JHAdminConfig
operator|.
name|MR_HISTORY_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_PORT
argument_list|)
decl_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|HSClientProtocol
operator|.
name|class
argument_list|,
name|protocolHandler
argument_list|,
name|address
argument_list|,
name|conf
argument_list|,
name|jhsDTSecretManager
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_CLIENT_THREAD_COUNT
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|ClientHSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|bindAddress
operator|=
name|conf
operator|.
name|updateConnectAddr
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_BIND_HOST
argument_list|,
name|JHAdminConfig
operator|.
name|MR_HISTORY_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiated HistoryClientService at "
operator|+
name|this
operator|.
name|bindAddress
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|initializeWebApp (Configuration conf)
specifier|protected
name|void
name|initializeWebApp
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|webApp
operator|=
operator|new
name|HsWebApp
argument_list|(
name|history
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|bindAddress
init|=
name|MRWebAppUtil
operator|.
name|getJHSWebBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// NOTE: there should be a .at(InetSocketAddress)
name|WebApps
operator|.
name|$for
argument_list|(
literal|"jobhistory"
argument_list|,
name|HistoryClientService
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|"ws"
argument_list|)
operator|.
name|with
argument_list|(
name|conf
argument_list|)
operator|.
name|withHttpSpnegoKeytabKey
argument_list|(
name|JHAdminConfig
operator|.
name|MR_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|)
operator|.
name|withHttpSpnegoPrincipalKey
argument_list|(
name|JHAdminConfig
operator|.
name|MR_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|)
operator|.
name|at
argument_list|(
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
operator|.
name|start
argument_list|(
name|webApp
argument_list|)
expr_stmt|;
name|String
name|connectHost
init|=
name|MRWebAppUtil
operator|.
name|getJHSWebappURLWithoutScheme
argument_list|(
name|conf
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|MRWebAppUtil
operator|.
name|setJHSWebappURLWithoutScheme
argument_list|(
name|conf
argument_list|,
name|connectHost
operator|+
literal|":"
operator|+
name|webApp
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|webApp
operator|!=
literal|null
condition|)
block|{
name|webApp
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|getClientHandler ()
specifier|public
name|MRClientProtocol
name|getClientHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocolHandler
return|;
block|}
annotation|@
name|Private
DECL|method|getBindAddress ()
specifier|public
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|bindAddress
return|;
block|}
DECL|class|HSClientProtocolHandler
specifier|private
class|class
name|HSClientProtocolHandler
implements|implements
name|HSClientProtocol
block|{
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|getConnectAddress ()
specifier|public
name|InetSocketAddress
name|getConnectAddress
parameter_list|()
block|{
return|return
name|getBindAddress
argument_list|()
return|;
block|}
DECL|method|verifyAndGetJob (final JobId jobID)
specifier|private
name|Job
name|verifyAndGetJob
parameter_list|(
specifier|final
name|JobId
name|jobID
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|loginUgi
init|=
literal|null
decl_stmt|;
name|Job
name|job
init|=
literal|null
decl_stmt|;
try|try
block|{
name|loginUgi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
name|job
operator|=
name|loginUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|history
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
return|return
name|job
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
name|JobACL
name|operation
init|=
name|JobACL
operator|.
name|VIEW_JOB
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
return|return
name|job
return|;
block|}
annotation|@
name|Override
DECL|method|getCounters (GetCountersRequest request)
specifier|public
name|GetCountersResponse
name|getCounters
parameter_list|(
name|GetCountersRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|JobId
name|jobId
init|=
name|request
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|GetCountersResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetCountersResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|job
operator|.
name|getAllCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getJobReport (GetJobReportRequest request)
specifier|public
name|GetJobReportResponse
name|getJobReport
parameter_list|(
name|GetJobReportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|JobId
name|jobId
init|=
name|request
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|GetJobReportResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setJobReport
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setJobReport
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptReport ( GetTaskAttemptReportRequest request)
specifier|public
name|GetTaskAttemptReportResponse
name|getTaskAttemptReport
parameter_list|(
name|GetTaskAttemptReportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptId
name|taskAttemptId
init|=
name|request
operator|.
name|getTaskAttemptId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|taskAttemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|GetTaskAttemptReportResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setTaskAttemptReport
argument_list|(
name|job
operator|.
name|getTask
argument_list|(
name|taskAttemptId
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|taskAttemptId
argument_list|)
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskReport (GetTaskReportRequest request)
specifier|public
name|GetTaskReportResponse
name|getTaskReport
parameter_list|(
name|GetTaskReportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskId
name|taskId
init|=
name|request
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|GetTaskReportResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setTaskReport
argument_list|(
name|job
operator|.
name|getTask
argument_list|(
name|taskId
argument_list|)
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetTaskAttemptCompletionEventsResponse
DECL|method|getTaskAttemptCompletionEvents ( GetTaskAttemptCompletionEventsRequest request)
name|getTaskAttemptCompletionEvents
parameter_list|(
name|GetTaskAttemptCompletionEventsRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|JobId
name|jobId
init|=
name|request
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|int
name|fromEventId
init|=
name|request
operator|.
name|getFromEventId
argument_list|()
decl_stmt|;
name|int
name|maxEvents
init|=
name|request
operator|.
name|getMaxEvents
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|GetTaskAttemptCompletionEventsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptCompletionEventsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|addAllCompletionEvents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
name|fromEventId
argument_list|,
name|maxEvents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|killJob (KillJobRequest request)
specifier|public
name|KillJobResponse
name|killJob
parameter_list|(
name|KillJobRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid operation on completed job"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|killTask (KillTaskRequest request)
specifier|public
name|KillTaskResponse
name|killTask
parameter_list|(
name|KillTaskRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid operation on completed job"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|killTaskAttempt ( KillTaskAttemptRequest request)
specifier|public
name|KillTaskAttemptResponse
name|killTaskAttempt
parameter_list|(
name|KillTaskAttemptRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid operation on completed job"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDiagnostics (GetDiagnosticsRequest request)
specifier|public
name|GetDiagnosticsResponse
name|getDiagnostics
parameter_list|(
name|GetDiagnosticsRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptId
name|taskAttemptId
init|=
name|request
operator|.
name|getTaskAttemptId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|taskAttemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|GetDiagnosticsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDiagnosticsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|addAllDiagnostics
argument_list|(
name|job
operator|.
name|getTask
argument_list|(
name|taskAttemptId
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|taskAttemptId
argument_list|)
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|failTaskAttempt ( FailTaskAttemptRequest request)
specifier|public
name|FailTaskAttemptResponse
name|failTaskAttempt
parameter_list|(
name|FailTaskAttemptRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid operation on completed job"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskReports (GetTaskReportsRequest request)
specifier|public
name|GetTaskReportsResponse
name|getTaskReports
parameter_list|(
name|GetTaskReportsRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|JobId
name|jobId
init|=
name|request
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|TaskType
name|taskType
init|=
name|request
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|GetTaskReportsResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|verifyAndGetJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|(
name|taskType
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|response
operator|.
name|addTaskReport
argument_list|(
name|task
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( GetDelegationTokenRequest request)
specifier|public
name|GetDelegationTokenResponse
name|getDelegationToken
parameter_list|(
name|GetDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// Verify that the connection is kerberos authenticated
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be issued only with kerberos authentication"
argument_list|)
throw|;
block|}
name|GetDelegationTokenResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDelegationTokenResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MRDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|(
name|owner
argument_list|,
operator|new
name|Text
argument_list|(
name|request
operator|.
name|getRenewer
argument_list|()
argument_list|)
argument_list|,
name|realUser
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|realJHSToken
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdentifier
argument_list|,
name|jhsDTSecretManager
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|mrDToken
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
operator|.
name|newInstance
argument_list|(
name|realJHSToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|realJHSToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|realJHSToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|realJHSToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setDelegationToken
argument_list|(
name|mrDToken
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken ( RenewDelegationTokenRequest request)
specifier|public
name|RenewDelegationTokenResponse
name|renewDelegationToken
parameter_list|(
name|RenewDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be renewed only with kerberos authentication"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|protoToken
init|=
name|request
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|protoToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|protoToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|long
name|nextExpTime
init|=
name|jhsDTSecretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|RenewDelegationTokenResponse
name|renewResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|renewResponse
operator|.
name|setNextExpirationTime
argument_list|(
name|nextExpTime
argument_list|)
expr_stmt|;
return|return
name|renewResponse
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken ( CancelDelegationTokenRequest request)
specifier|public
name|CancelDelegationTokenResponse
name|cancelDelegationToken
parameter_list|(
name|CancelDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be cancelled only with kerberos authentication"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|protoToken
init|=
name|request
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|MRDelegationTokenIdentifier
argument_list|>
argument_list|(
name|protoToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|protoToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|protoToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|jhsDTSecretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|Records
operator|.
name|newRecord
argument_list|(
name|CancelDelegationTokenResponse
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|checkAccess (Job job, JobACL jobOperation)
specifier|private
name|void
name|checkAccess
parameter_list|(
name|Job
name|job
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|callerUGI
decl_stmt|;
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|jobOperation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" cannot perform operation "
operator|+
name|jobOperation
operator|.
name|name
argument_list|()
operator|+
literal|" on "
operator|+
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|isAllowedDelegationTokenOp ()
specifier|private
name|boolean
name|isAllowedDelegationTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
name|AuthenticationMethod
operator|.
name|CERTIFICATE
argument_list|)
operator|.
name|contains
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getRealAuthenticationMethod
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

