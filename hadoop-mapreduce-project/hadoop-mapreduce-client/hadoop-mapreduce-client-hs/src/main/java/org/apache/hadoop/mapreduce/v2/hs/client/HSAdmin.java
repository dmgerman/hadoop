begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|HSProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|protocol
operator|.
name|HSAdminRefreshProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|HSAdmin
specifier|public
class|class
name|HSAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|method|HSAdmin ()
specifier|public
name|HSAdmin
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|HSAdmin (Configuration conf)
specifier|public
name|HSAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Displays format of commands.    *     * @param cmd    *          The command that is being executed.    */
DECL|method|printUsage (String cmd)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: mapred hsadmin [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: mapred hsadmin [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: mapred hsadmin [-refreshAdminAcls]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getGroups"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: mapred hsadmin"
operator|+
literal|" [-getGroups [username]]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: mapred hsadmin"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshAdminAcls]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-getGroups [username]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printHelp (String cmd)
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hsadmin is the command to execute Job History server administrative commands.\n"
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"mapred hsadmin"
operator|+
literal|" [-refreshUserToGroupsMappings]"
operator|+
literal|" [-refreshSuperUserGroupsConfiguration]"
operator|+
literal|" [-refreshAdminAcls]"
operator|+
literal|" [-getGroups [username]]"
operator|+
literal|" [-help [cmd]]\n"
decl_stmt|;
name|String
name|refreshUserToGroupsMappings
init|=
literal|"-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n"
decl_stmt|;
name|String
name|refreshSuperUserGroupsConfiguration
init|=
literal|"-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n"
decl_stmt|;
name|String
name|refreshAdminAcls
init|=
literal|"-refreshAdminAcls: Refresh acls for administration of Job history server\n"
decl_stmt|;
name|String
name|getGroups
init|=
literal|"-getGroups [username]: Get the groups which given user belongs to\n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for the given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
if|if
condition|(
literal|"refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshAdminAcls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getGroups"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getGroups
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshAdminAcls
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getGroups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroups (String[] usernames)
specifier|private
name|int
name|getGroups
parameter_list|(
name|String
index|[]
name|usernames
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get groups users belongs to
if|if
condition|(
name|usernames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|usernames
operator|=
operator|new
name|String
index|[]
block|{
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
block|}
expr_stmt|;
block|}
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_PORT
argument_list|)
decl_stmt|;
name|GetUserMappingsProtocol
name|getUserMappingProtocol
init|=
name|HSProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|GetUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|username
range|:
name|usernames
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|username
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|getUserMappingProtocol
operator|.
name|getGroupsForUser
argument_list|(
name|username
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|refreshUserToGroupsMappings ()
specifier|private
name|int
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_PORT
argument_list|)
decl_stmt|;
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
name|HSProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|private
name|int
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Refresh the super-user groups
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_PORT
argument_list|)
decl_stmt|;
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
name|HSProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Refresh the super-user group mappings
name|refreshProtocol
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshAdminAcls ()
specifier|private
name|int
name|refreshAdminAcls
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Refresh the admin acls
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_JHS_ADMIN_PORT
argument_list|)
decl_stmt|;
name|HSAdminRefreshProtocol
name|refreshProtocol
init|=
name|HSProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|HSAdminRefreshProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshAdminAcls
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshAdminAcls
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getGroups"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
index|[]
name|usernames
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|getGroups
argument_list|(
name|usernames
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|printHelp
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|HSAdmin
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

