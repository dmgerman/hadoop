begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_class
DECL|class|CompletedTask
specifier|public
class|class
name|CompletedTask
implements|implements
name|Task
block|{
DECL|field|EMPTY_COUNTERS
specifier|private
specifier|static
specifier|final
name|Counters
name|EMPTY_COUNTERS
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|TaskId
name|taskId
decl_stmt|;
DECL|field|taskInfo
specifier|private
specifier|final
name|TaskInfo
name|taskInfo
decl_stmt|;
DECL|field|report
specifier|private
name|TaskReport
name|report
decl_stmt|;
DECL|field|successfulAttempt
specifier|private
name|TaskAttemptId
name|successfulAttempt
decl_stmt|;
DECL|field|reportDiagnostics
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|reportDiagnostics
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|taskAttemptsLock
specifier|private
name|Lock
name|taskAttemptsLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|taskAttemptsLoaded
specifier|private
name|AtomicBoolean
name|taskAttemptsLoaded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|attempts
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CompletedTask (TaskId taskId, TaskInfo taskInfo)
name|CompletedTask
parameter_list|(
name|TaskId
name|taskId
parameter_list|,
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
comment|//TODO JobHistoryParser.handleTaskFailedAttempt should use state from the event.
name|this
operator|.
name|taskInfo
operator|=
name|taskInfo
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canCommit (TaskAttemptId taskAttemptID)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempt (TaskAttemptId attemptID)
specifier|public
name|TaskAttempt
name|getAttempt
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|loadAllTaskAttempts
argument_list|()
expr_stmt|;
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempts ()
specifier|public
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|getAttempts
parameter_list|()
block|{
name|loadAllTaskAttempts
argument_list|()
expr_stmt|;
return|return
name|attempts
return|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|taskInfo
operator|.
name|getCounters
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskId
name|getID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|1.0f
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
specifier|synchronized
name|TaskReport
name|getReport
parameter_list|()
block|{
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
name|constructTaskReport
argument_list|()
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|TaskType
name|getType
parameter_list|()
block|{
return|return
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskInfo
operator|.
name|getTaskType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskState
name|getState
parameter_list|()
block|{
return|return
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|==
literal|null
condition|?
name|TaskState
operator|.
name|KILLED
else|:
name|TaskState
operator|.
name|valueOf
argument_list|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
return|;
block|}
DECL|method|constructTaskReport ()
specifier|private
name|void
name|constructTaskReport
parameter_list|()
block|{
name|loadAllTaskAttempts
argument_list|()
expr_stmt|;
name|this
operator|.
name|report
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|long
name|minLaunchTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|minLaunchTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minLaunchTime
argument_list|,
name|attempt
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|minLaunchTime
operator|=
name|minLaunchTime
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
operator|-
literal|1
else|:
name|minLaunchTime
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|minLaunchTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|taskInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|getCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
name|counters
operator|=
name|EMPTY_COUNTERS
expr_stmt|;
block|}
name|report
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|counters
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|successfulAttempt
operator|!=
literal|null
condition|)
block|{
name|report
operator|.
name|setSuccessfulAttempt
argument_list|(
name|successfulAttempt
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|addAllDiagnostics
argument_list|(
name|reportDiagnostics
argument_list|)
expr_stmt|;
name|report
operator|.
name|addAllRunningAttempts
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|(
name|attempts
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadAllTaskAttempts ()
specifier|private
name|void
name|loadAllTaskAttempts
parameter_list|()
block|{
if|if
condition|(
name|taskAttemptsLoaded
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|taskAttemptsLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|taskAttemptsLoaded
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|TaskAttemptInfo
name|attemptHistory
range|:
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|CompletedTaskAttempt
name|attempt
init|=
operator|new
name|CompletedTaskAttempt
argument_list|(
name|taskId
argument_list|,
name|attemptHistory
argument_list|)
decl_stmt|;
name|reportDiagnostics
operator|.
name|addAll
argument_list|(
name|attempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
if|if
condition|(
name|successfulAttempt
operator|==
literal|null
operator|&&
name|attemptHistory
operator|.
name|getTaskStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|attemptHistory
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|successfulAttempt
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|attemptHistory
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|taskAttemptsLoaded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskAttemptsLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

