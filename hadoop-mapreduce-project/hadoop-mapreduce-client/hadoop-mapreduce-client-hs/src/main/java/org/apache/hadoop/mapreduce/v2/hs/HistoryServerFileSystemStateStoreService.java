begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
comment|/**  * A history server state storage implementation that supports any persistent  * storage that adheres to the FileSystem interface.  */
DECL|class|HistoryServerFileSystemStateStoreService
specifier|public
class|class
name|HistoryServerFileSystemStateStoreService
extends|extends
name|HistoryServerStateStoreService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HistoryServerFileSystemStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_STATE_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_STATE_DIR_NAME
init|=
literal|"HistoryServerState"
decl_stmt|;
DECL|field|TOKEN_STATE_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_STATE_DIR_NAME
init|=
literal|"tokens"
decl_stmt|;
DECL|field|TOKEN_KEYS_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_KEYS_DIR_NAME
init|=
literal|"keys"
decl_stmt|;
DECL|field|TOKEN_BUCKET_DIR_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_BUCKET_DIR_PREFIX
init|=
literal|"tb_"
decl_stmt|;
DECL|field|TOKEN_BUCKET_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_BUCKET_NAME_FORMAT
init|=
name|TOKEN_BUCKET_DIR_PREFIX
operator|+
literal|"%03d"
decl_stmt|;
DECL|field|TOKEN_MASTER_KEY_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_MASTER_KEY_FILE_PREFIX
init|=
literal|"key_"
decl_stmt|;
DECL|field|TOKEN_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_FILE_PREFIX
init|=
literal|"token_"
decl_stmt|;
DECL|field|TMP_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TMP_FILE_PREFIX
init|=
literal|"tmp-"
decl_stmt|;
DECL|field|UPDATE_TMP_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_TMP_FILE_PREFIX
init|=
literal|"update-"
decl_stmt|;
DECL|field|DIR_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|FsPermission
name|DIR_PERMISSIONS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|FILE_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|FsPermission
name|FILE_PERMISSIONS
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
else|:
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0400
argument_list|)
decl_stmt|;
DECL|field|NUM_TOKEN_BUCKETS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TOKEN_BUCKETS
init|=
literal|1000
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|rootStatePath
specifier|private
name|Path
name|rootStatePath
decl_stmt|;
DECL|field|tokenStatePath
specifier|private
name|Path
name|tokenStatePath
decl_stmt|;
DECL|field|tokenKeysStatePath
specifier|private
name|Path
name|tokenKeysStatePath
decl_stmt|;
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|storeUri
init|=
name|conf
operator|.
name|get
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_FS_STATE_STORE_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No store location URI configured in "
operator|+
name|JHAdminConfig
operator|.
name|MR_HS_FS_STATE_STORE_URI
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|storeUri
operator|+
literal|" for history server state storage"
argument_list|)
expr_stmt|;
name|rootStatePath
operator|=
operator|new
name|Path
argument_list|(
name|storeUri
argument_list|,
name|ROOT_STATE_DIR_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|createFileSystem
argument_list|()
expr_stmt|;
name|createDir
argument_list|(
name|rootStatePath
argument_list|)
expr_stmt|;
name|tokenStatePath
operator|=
operator|new
name|Path
argument_list|(
name|rootStatePath
argument_list|,
name|TOKEN_STATE_DIR_NAME
argument_list|)
expr_stmt|;
name|createDir
argument_list|(
name|tokenStatePath
argument_list|)
expr_stmt|;
name|tokenKeysStatePath
operator|=
operator|new
name|Path
argument_list|(
name|tokenStatePath
argument_list|,
name|TOKEN_KEYS_DIR_NAME
argument_list|)
expr_stmt|;
name|createDir
argument_list|(
name|tokenKeysStatePath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TOKEN_BUCKETS
condition|;
operator|++
name|i
control|)
block|{
name|createDir
argument_list|(
name|getTokenBucketPath
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFileSystem ()
name|FileSystem
name|createFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rootStatePath
operator|.
name|getFileSystem
argument_list|(
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// don't close the filesystem as it's part of the filesystem cache
comment|// and other clients may still be using it
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
name|HistoryServerState
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading history server state from "
operator|+
name|rootStatePath
argument_list|)
expr_stmt|;
name|HistoryServerState
name|state
init|=
operator|new
name|HistoryServerState
argument_list|()
decl_stmt|;
name|loadTokenState
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeToken (MRDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|storeToken
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|tokenPath
init|=
name|getTokenPath
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tokenPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|tokenPath
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|createNewFile
argument_list|(
name|tokenPath
argument_list|,
name|buildTokenData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateToken (MRDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|updateToken
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Files cannot be atomically replaced, therefore we write a temporary
comment|// update file, remove the original token file, then rename the update
comment|// file to the token file. During recovery either the token file will be
comment|// used or if that is missing and an update file is present then the
comment|// update file is used.
name|Path
name|tokenPath
init|=
name|getTokenPath
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|tokenPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|UPDATE_TMP_FILE_PREFIX
operator|+
name|tokenPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|tmp
argument_list|,
name|buildTokenData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteFile
argument_list|(
name|tokenPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmp
argument_list|,
name|tokenPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|tmp
operator|+
literal|" to "
operator|+
name|tokenPath
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeToken (MRDelegationTokenIdentifier tokenId)
specifier|public
name|void
name|removeToken
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteFile
argument_list|(
name|getTokenPath
argument_list|(
name|tokenId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|storeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|keyPath
init|=
operator|new
name|Path
argument_list|(
name|tokenKeysStatePath
argument_list|,
name|TOKEN_MASTER_KEY_FILE_PREFIX
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|keyPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|keyPath
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|memStream
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|dataStream
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStream
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
block|}
name|createNewFile
argument_list|(
name|keyPath
argument_list|,
name|memStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|removeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|keyPath
init|=
operator|new
name|Path
argument_list|(
name|tokenKeysStatePath
argument_list|,
name|TOKEN_MASTER_KEY_FILE_PREFIX
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|deleteFile
argument_list|(
name|keyPath
argument_list|)
expr_stmt|;
block|}
DECL|method|getBucketId (MRDelegationTokenIdentifier tokenId)
specifier|private
specifier|static
name|int
name|getBucketId
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|)
block|{
return|return
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
operator|%
name|NUM_TOKEN_BUCKETS
return|;
block|}
DECL|method|getTokenBucketPath (int bucketId)
specifier|private
name|Path
name|getTokenBucketPath
parameter_list|(
name|int
name|bucketId
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tokenStatePath
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|TOKEN_BUCKET_NAME_FORMAT
argument_list|,
name|bucketId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTokenPath (MRDelegationTokenIdentifier tokenId)
specifier|private
name|Path
name|getTokenPath
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|Path
name|bucketPath
init|=
name|getTokenBucketPath
argument_list|(
name|getBucketId
argument_list|(
name|tokenId
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|bucketPath
argument_list|,
name|TOKEN_FILE_PREFIX
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createDir (Path dir)
specifier|private
name|void
name|createDir
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Unexpected file in store: "
operator|+
name|dir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|DIR_PERMISSIONS
argument_list|)
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|DIR_PERMISSIONS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|,
name|DIR_PERMISSIONS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createNewFile (Path file, byte[] data)
specifier|private
name|void
name|createNewFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|,
name|TMP_FILE_PREFIX
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|tmp
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmp
argument_list|,
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|tmp
operator|+
literal|" to "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|writeFile (Path file, byte[] data)
specifier|private
name|void
name|writeFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|WRITE_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|FILE_PERMISSIONS
argument_list|,
literal|true
argument_list|,
name|WRITE_BUFFER_SIZE
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|file
argument_list|)
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|file
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|readFile (Path file, long numBytes)
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|numBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|numBytes
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|deleteFile (Path file)
specifier|private
name|void
name|deleteFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|deleted
decl_stmt|;
try|try
block|{
name|deleted
operator|=
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
DECL|method|buildTokenData (MRDelegationTokenIdentifier tokenId, Long renewDate)
specifier|private
name|byte
index|[]
name|buildTokenData
parameter_list|(
name|MRDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|memStream
argument_list|)
decl_stmt|;
try|try
block|{
name|tokenId
operator|.
name|write
argument_list|(
name|dataStream
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|writeLong
argument_list|(
name|renewDate
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStream
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
block|}
return|return
name|memStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|loadTokenMasterKey (HistoryServerState state, Path keyFile, long numKeyFileBytes)
specifier|private
name|void
name|loadTokenMasterKey
parameter_list|(
name|HistoryServerState
name|state
parameter_list|,
name|Path
name|keyFile
parameter_list|,
name|long
name|numKeyFileBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyData
init|=
name|readFile
argument_list|(
name|keyFile
argument_list|,
name|numKeyFileBytes
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|keyData
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTokenFromBucket (int bucketId, HistoryServerState state, Path tokenFile, long numTokenFileBytes)
specifier|private
name|void
name|loadTokenFromBucket
parameter_list|(
name|int
name|bucketId
parameter_list|,
name|HistoryServerState
name|state
parameter_list|,
name|Path
name|tokenFile
parameter_list|,
name|long
name|numTokenFileBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|MRDelegationTokenIdentifier
name|token
init|=
name|loadToken
argument_list|(
name|state
argument_list|,
name|tokenFile
argument_list|,
name|numTokenFileBytes
argument_list|)
decl_stmt|;
name|int
name|tokenBucketId
init|=
name|getBucketId
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenBucketId
operator|!=
name|bucketId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Token "
operator|+
name|tokenFile
operator|+
literal|" should be in bucket "
operator|+
name|tokenBucketId
operator|+
literal|", found in bucket "
operator|+
name|bucketId
argument_list|)
throw|;
block|}
block|}
DECL|method|loadToken (HistoryServerState state, Path tokenFile, long numTokenFileBytes)
specifier|private
name|MRDelegationTokenIdentifier
name|loadToken
parameter_list|(
name|HistoryServerState
name|state
parameter_list|,
name|Path
name|tokenFile
parameter_list|,
name|long
name|numTokenFileBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|MRDelegationTokenIdentifier
name|tokenId
init|=
operator|new
name|MRDelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|long
name|renewDate
decl_stmt|;
name|byte
index|[]
name|tokenData
init|=
name|readFile
argument_list|(
name|tokenFile
argument_list|,
name|numTokenFileBytes
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tokenData
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|tokenId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|renewDate
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
return|return
name|tokenId
return|;
block|}
DECL|method|loadTokensFromBucket (HistoryServerState state, Path bucket)
specifier|private
name|int
name|loadTokensFromBucket
parameter_list|(
name|HistoryServerState
name|state
parameter_list|,
name|Path
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|numStr
init|=
name|bucket
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|TOKEN_BUCKET_DIR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bucketId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numStr
argument_list|)
decl_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|tokenStats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|loadedTokens
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tokenStats
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|tokenStats
control|)
block|{
name|String
name|name
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|TOKEN_FILE_PREFIX
argument_list|)
condition|)
block|{
name|loadTokenFromBucket
argument_list|(
name|bucketId
argument_list|,
name|state
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|loadedTokens
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
operator|++
name|numTokens
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|UPDATE_TMP_FILE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|tokenName
init|=
name|name
operator|.
name|substring
argument_list|(
name|UPDATE_TMP_FILE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadedTokens
operator|.
name|contains
argument_list|(
name|tokenName
argument_list|)
condition|)
block|{
comment|// already have the token, update may be partial so ignore it
name|fs
operator|.
name|delete
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// token is missing, so try to parse the update temp file
name|loadTokenFromBucket
argument_list|(
name|bucketId
argument_list|,
name|state
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|tokenName
argument_list|)
argument_list|)
expr_stmt|;
name|loadedTokens
operator|.
name|add
argument_list|(
name|tokenName
argument_list|)
expr_stmt|;
operator|++
name|numTokens
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|TMP_FILE_PREFIX
argument_list|)
condition|)
block|{
comment|// cleanup incomplete temp files
name|fs
operator|.
name|delete
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unexpected file in history server token bucket: "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numTokens
return|;
block|}
DECL|method|loadKeys (HistoryServerState state)
specifier|private
name|int
name|loadKeys
parameter_list|(
name|HistoryServerState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tokenKeysStatePath
argument_list|)
decl_stmt|;
name|int
name|numKeys
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
name|String
name|name
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|TOKEN_MASTER_KEY_FILE_PREFIX
argument_list|)
condition|)
block|{
name|loadTokenMasterKey
argument_list|(
name|state
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|numKeys
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unexpected file in history server token state: "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numKeys
return|;
block|}
DECL|method|loadTokens (HistoryServerState state)
specifier|private
name|int
name|loadTokens
parameter_list|(
name|HistoryServerState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tokenStatePath
argument_list|)
decl_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
name|String
name|name
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|TOKEN_BUCKET_DIR_PREFIX
argument_list|)
condition|)
block|{
name|numTokens
operator|+=
name|loadTokensFromBucket
argument_list|(
name|state
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|TOKEN_KEYS_DIR_NAME
argument_list|)
condition|)
block|{
comment|// key loading is done elsewhere
continue|continue;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unexpected file in history server token state: "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numTokens
return|;
block|}
DECL|method|loadTokenState (HistoryServerState state)
specifier|private
name|void
name|loadTokenState
parameter_list|(
name|HistoryServerState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numKeys
init|=
name|loadKeys
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|int
name|numTokens
init|=
name|loadTokens
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|numKeys
operator|+
literal|" master keys and "
operator|+
name|numTokens
operator|+
literal|" tokens from "
operator|+
name|tokenStatePath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

