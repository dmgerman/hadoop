begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|FileNameIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_comment
comment|/**  * This class provides a way to interact with history files in a thread safe  * manor.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HistoryFileManager
specifier|public
class|class
name|HistoryFileManager
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HistoryFileManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SUMMARY_LOG
specifier|private
specifier|static
specifier|final
name|Log
name|SUMMARY_LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobSummary
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DONE_BEFORE_SERIAL_TAIL
specifier|private
specifier|static
name|String
name|DONE_BEFORE_SERIAL_TAIL
init|=
name|JobHistoryUtils
operator|.
name|doneSubdirsBeforeSerialTail
argument_list|()
decl_stmt|;
DECL|class|MetaInfo
specifier|public
specifier|static
class|class
name|MetaInfo
block|{
DECL|field|historyFile
specifier|private
name|Path
name|historyFile
decl_stmt|;
DECL|field|confFile
specifier|private
name|Path
name|confFile
decl_stmt|;
DECL|field|summaryFile
specifier|private
name|Path
name|summaryFile
decl_stmt|;
DECL|field|jobIndexInfo
specifier|private
name|JobIndexInfo
name|jobIndexInfo
decl_stmt|;
DECL|method|MetaInfo (Path historyFile, Path confFile, Path summaryFile, JobIndexInfo jobIndexInfo)
specifier|public
name|MetaInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|confFile
parameter_list|,
name|Path
name|summaryFile
parameter_list|,
name|JobIndexInfo
name|jobIndexInfo
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
name|this
operator|.
name|confFile
operator|=
name|confFile
expr_stmt|;
name|this
operator|.
name|summaryFile
operator|=
name|summaryFile
expr_stmt|;
name|this
operator|.
name|jobIndexInfo
operator|=
name|jobIndexInfo
expr_stmt|;
block|}
DECL|method|getHistoryFile ()
specifier|private
name|Path
name|getHistoryFile
parameter_list|()
block|{
return|return
name|historyFile
return|;
block|}
DECL|method|getConfFile ()
specifier|private
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|confFile
return|;
block|}
DECL|method|getSummaryFile ()
specifier|private
name|Path
name|getSummaryFile
parameter_list|()
block|{
return|return
name|summaryFile
return|;
block|}
DECL|method|getJobIndexInfo ()
specifier|public
name|JobIndexInfo
name|getJobIndexInfo
parameter_list|()
block|{
return|return
name|jobIndexInfo
return|;
block|}
DECL|method|getJobId ()
specifier|public
name|JobId
name|getJobId
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
return|;
block|}
DECL|method|setHistoryFile (Path historyFile)
specifier|private
name|void
name|setHistoryFile
parameter_list|(
name|Path
name|historyFile
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
block|}
DECL|method|setConfFile (Path confFile)
specifier|private
name|void
name|setConfFile
parameter_list|(
name|Path
name|confFile
parameter_list|)
block|{
name|this
operator|.
name|confFile
operator|=
name|confFile
expr_stmt|;
block|}
DECL|method|setSummaryFile (Path summaryFile)
specifier|private
name|void
name|setSummaryFile
parameter_list|(
name|Path
name|summaryFile
parameter_list|)
block|{
name|this
operator|.
name|summaryFile
operator|=
name|summaryFile
expr_stmt|;
block|}
block|}
comment|/**    * Maps between a serial number (generated based on jobId) and the timestamp    * component(s) to which it belongs. Facilitates jobId based searches. If a    * jobId is not found in this list - it will not be found.    */
DECL|field|idToDateString
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|idToDateString
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// The number of entries in idToDateString
DECL|field|dateStringCacheSize
specifier|private
name|int
name|dateStringCacheSize
decl_stmt|;
comment|// Maintains minimal details for recent jobs (parsed from history file name).
comment|// Sorted on Job Completion Time.
DECL|field|jobListCache
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
name|jobListCache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// The number of jobs to maintain in the job list cache.
DECL|field|jobListCacheSize
specifier|private
name|int
name|jobListCacheSize
decl_stmt|;
comment|// Re-use existing MetaInfo objects if they exist for the specific JobId.
comment|// (synchronization on MetaInfo)
comment|// Check for existence of the object when using iterators.
DECL|field|intermediateListCache
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
name|intermediateListCache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// Maintains a list of known done subdirectories.
DECL|field|existingDoneSubdirs
specifier|private
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|existingDoneSubdirs
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Maintains a mapping between intermediate user directories and the last    * known modification time.    */
DECL|field|userDirModificationTimeMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|userDirModificationTimeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|aclsMgr
specifier|private
name|JobACLsManager
name|aclsMgr
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// TODO Remove me!!!!
DECL|field|debugMode
specifier|private
name|boolean
name|debugMode
decl_stmt|;
DECL|field|serialNumberFormat
specifier|private
name|String
name|serialNumberFormat
decl_stmt|;
DECL|field|doneDirPrefixPath
specifier|private
name|Path
name|doneDirPrefixPath
init|=
literal|null
decl_stmt|;
comment|// folder for completed jobs
DECL|field|doneDirFc
specifier|private
name|FileContext
name|doneDirFc
decl_stmt|;
comment|// done Dir FileContext
DECL|field|intermediateDoneDirPath
specifier|private
name|Path
name|intermediateDoneDirPath
init|=
literal|null
decl_stmt|;
comment|// Intermediate Done Dir Path
DECL|field|intermediateDoneDirFc
specifier|private
name|FileContext
name|intermediateDoneDirFc
decl_stmt|;
comment|// Intermediate Done Dir
comment|// FileContext
DECL|method|HistoryFileManager ()
specifier|public
name|HistoryFileManager
parameter_list|()
block|{
name|super
argument_list|(
name|HistoryFileManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|debugMode
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DEBUG_MODE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|serialNumberLowDigits
init|=
name|debugMode
condition|?
literal|1
else|:
literal|3
decl_stmt|;
name|serialNumberFormat
operator|=
operator|(
literal|"%0"
operator|+
operator|(
name|JobHistoryUtils
operator|.
name|SERIAL_NUMBER_DIRECTORY_DIGITS
operator|+
name|serialNumberLowDigits
operator|)
operator|+
literal|"d"
operator|)
expr_stmt|;
name|String
name|doneDirPrefix
init|=
literal|null
decl_stmt|;
name|doneDirPrefix
operator|=
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryServerDoneDirPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|doneDirPrefixPath
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|doneDirPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|doneDirFc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|doneDirPrefixPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|doneDirFc
argument_list|,
name|doneDirPrefixPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_DONE_DIR_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Error creating done directory: ["
operator|+
name|doneDirPrefixPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|intermediateDoneDirPrefix
init|=
literal|null
decl_stmt|;
name|intermediateDoneDirPrefix
operator|=
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryIntermediateDoneDirPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|intermediateDoneDirPath
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|intermediateDoneDirPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|intermediateDoneDirFc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|intermediateDoneDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|intermediateDoneDirFc
argument_list|,
name|intermediateDoneDirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"error creating done directory on dfs "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Error creating intermediate done directory: ["
operator|+
name|intermediateDoneDirPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|aclsMgr
operator|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jobListCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_JOBLIST_CACHE_SIZE
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE
argument_list|)
expr_stmt|;
name|dateStringCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_DATESTRING_CACHE_SIZE
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdir (FileContext fc, Path path, FsPermission fsp)
specifier|private
name|void
name|mkdir
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
try|try
block|{
name|fc
operator|.
name|mkdir
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
name|fsStatus
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Perms after creating "
operator|+
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|+
literal|", Expected: "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|!=
name|fsp
operator|.
name|toShort
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly setting permissions to : "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
operator|+
literal|", "
operator|+
name|fsp
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory: ["
operator|+
name|path
operator|+
literal|"] already exists."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Populates index data structures. Should only be called at initialization    * times.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initExisting ()
name|void
name|initExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Existing Jobs..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|timestampedDirList
init|=
name|findTimestampedDirectories
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|timestampedDirList
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|timestampedDirList
control|)
block|{
comment|// TODO Could verify the correct format for these directories.
name|addDirectoryToSerialNumberIndex
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|addDirectoryToJobListCache
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeDirectoryFromSerialNumberIndex (Path serialDirPath)
specifier|private
name|void
name|removeDirectoryFromSerialNumberIndex
parameter_list|(
name|Path
name|serialDirPath
parameter_list|)
block|{
name|String
name|serialPart
init|=
name|serialDirPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|timeStampPart
init|=
name|JobHistoryUtils
operator|.
name|getTimestampPartFromPath
argument_list|(
name|serialDirPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeStampPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find timestamp portion from path: "
operator|+
name|serialDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|". Continuing with next"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|serialPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find serial portion from path: "
operator|+
name|serialDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|". Continuing with next"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|idToDateString
init|)
block|{
comment|// TODO make this thread safe without the synchronize
if|if
condition|(
name|idToDateString
operator|.
name|containsKey
argument_list|(
name|serialPart
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|idToDateString
operator|.
name|get
argument_list|(
name|serialPart
argument_list|)
decl_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|timeStampPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|idToDateString
operator|.
name|remove
argument_list|(
name|serialPart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addDirectoryToSerialNumberIndex (Path serialDirPath)
specifier|private
name|void
name|addDirectoryToSerialNumberIndex
parameter_list|(
name|Path
name|serialDirPath
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|serialDirPath
operator|+
literal|" to serial index"
argument_list|)
expr_stmt|;
block|}
name|String
name|serialPart
init|=
name|serialDirPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|timestampPart
init|=
name|JobHistoryUtils
operator|.
name|getTimestampPartFromPath
argument_list|(
name|serialDirPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestampPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find timestamp portion from path: "
operator|+
name|serialDirPath
operator|+
literal|". Continuing with next"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|serialPart
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find serial portion from path: "
operator|+
name|serialDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|". Continuing with next"
argument_list|)
expr_stmt|;
block|}
name|addToSerialNumberIndex
argument_list|(
name|serialPart
argument_list|,
name|timestampPart
argument_list|)
expr_stmt|;
block|}
DECL|method|addToSerialNumberIndex (String serialPart, String timestampPart)
specifier|private
name|void
name|addToSerialNumberIndex
parameter_list|(
name|String
name|serialPart
parameter_list|,
name|String
name|timestampPart
parameter_list|)
block|{
synchronized|synchronized
init|(
name|idToDateString
init|)
block|{
comment|// TODO make this thread safe without the synchronize
if|if
condition|(
operator|!
name|idToDateString
operator|.
name|containsKey
argument_list|(
name|serialPart
argument_list|)
condition|)
block|{
name|idToDateString
operator|.
name|put
argument_list|(
name|serialPart
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idToDateString
operator|.
name|size
argument_list|()
operator|>
name|dateStringCacheSize
condition|)
block|{
name|idToDateString
operator|.
name|remove
argument_list|(
name|idToDateString
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|datePartSet
init|=
name|idToDateString
operator|.
name|get
argument_list|(
name|serialPart
argument_list|)
decl_stmt|;
name|datePartSet
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addDirectoryToJobListCache (Path path)
specifier|private
name|void
name|addDirectoryToJobListCache
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|path
operator|+
literal|" to job list cache."
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FileStatus
argument_list|>
name|historyFileList
init|=
name|scanDirectoryForHistoryFiles
argument_list|(
name|path
argument_list|,
name|doneDirFc
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|historyFileList
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding in history for "
operator|+
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JobIndexInfo
name|jobIndexInfo
init|=
name|FileNameIndexUtils
operator|.
name|getIndexInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|confFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateConfFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|summaryFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateSummaryFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|MetaInfo
name|metaInfo
init|=
operator|new
name|MetaInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|confFileName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|summaryFileName
argument_list|)
argument_list|,
name|jobIndexInfo
argument_list|)
decl_stmt|;
name|addToJobListCache
argument_list|(
name|metaInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scanDirectory (Path path, FileContext fc, PathFilter pathFilter)
specifier|private
specifier|static
name|List
argument_list|<
name|FileStatus
argument_list|>
name|scanDirectory
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileContext
name|fc
parameter_list|,
name|PathFilter
name|pathFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|fc
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|jhStatusList
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|fileStatusIter
init|=
name|fc
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|fileStatusIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|fileStatusIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
operator|&&
name|pathFilter
operator|.
name|accept
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|jhStatusList
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jhStatusList
return|;
block|}
DECL|method|scanDirectoryForHistoryFiles (Path path, FileContext fc)
specifier|private
specifier|static
name|List
argument_list|<
name|FileStatus
argument_list|>
name|scanDirectoryForHistoryFiles
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileContext
name|fc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanDirectory
argument_list|(
name|path
argument_list|,
name|fc
argument_list|,
name|JobHistoryUtils
operator|.
name|getHistoryFileFilter
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Finds all history directories with a timestamp component by scanning the    * filesystem. Used when the JobHistory server is started.    *     * @return    */
DECL|method|findTimestampedDirectories ()
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|findTimestampedDirectories
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fsList
init|=
name|JobHistoryUtils
operator|.
name|localGlobber
argument_list|(
name|doneDirFc
argument_list|,
name|doneDirPrefixPath
argument_list|,
name|DONE_BEFORE_SERIAL_TAIL
argument_list|)
decl_stmt|;
return|return
name|fsList
return|;
block|}
DECL|method|addToJobListCache (MetaInfo metaInfo)
specifier|private
name|void
name|addToJobListCache
parameter_list|(
name|MetaInfo
name|metaInfo
parameter_list|)
block|{
name|JobId
name|jobId
init|=
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getJobId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|jobId
operator|+
literal|" to job list cache with "
operator|+
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobListCache
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|metaInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobListCache
operator|.
name|size
argument_list|()
operator|>
name|jobListCacheSize
condition|)
block|{
name|jobListCache
operator|.
name|remove
argument_list|(
name|jobListCache
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Scans the intermediate directory to find user directories. Scans these for    * history files if the modification time for the directory has changed.    *     * @throws IOException    */
DECL|method|scanIntermediateDirectory ()
specifier|private
name|void
name|scanIntermediateDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|userDirList
init|=
name|JobHistoryUtils
operator|.
name|localGlobber
argument_list|(
name|intermediateDoneDirFc
argument_list|,
name|intermediateDoneDirPath
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|userDir
range|:
name|userDirList
control|)
block|{
name|String
name|name
init|=
name|userDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|long
name|newModificationTime
init|=
name|userDir
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|boolean
name|shouldScan
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|userDirModificationTimeMap
init|)
block|{
if|if
condition|(
operator|!
name|userDirModificationTimeMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|||
name|newModificationTime
operator|>
name|userDirModificationTimeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|shouldScan
operator|=
literal|true
expr_stmt|;
name|userDirModificationTimeMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newModificationTime
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldScan
condition|)
block|{
name|scanIntermediateDirectory
argument_list|(
name|userDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Scans the specified path and populates the intermediate cache.    *     * @param absPath    * @throws IOException    */
DECL|method|scanIntermediateDirectory (final Path absPath)
specifier|private
name|void
name|scanIntermediateDirectory
parameter_list|(
specifier|final
name|Path
name|absPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatusList
init|=
name|scanDirectoryForHistoryFiles
argument_list|(
name|absPath
argument_list|,
name|intermediateDoneDirFc
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|fileStatusList
control|)
block|{
name|JobIndexInfo
name|jobIndexInfo
init|=
name|FileNameIndexUtils
operator|.
name|getIndexInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|confFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateConfFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|summaryFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateSummaryFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|MetaInfo
name|metaInfo
init|=
operator|new
name|MetaInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|confFileName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|summaryFileName
argument_list|)
argument_list|,
name|jobIndexInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intermediateListCache
operator|.
name|containsKey
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|intermediateListCache
operator|.
name|put
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|,
name|metaInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Searches the job history file FileStatus list for the specified JobId.    *     * @param fileStatusList    *          fileStatus list of Job History Files.    * @param jobId    *          The JobId to find.    * @return A MetaInfo object for the jobId, null if not found.    * @throws IOException    */
DECL|method|getJobMetaInfo (List<FileStatus> fileStatusList, JobId jobId)
specifier|private
name|MetaInfo
name|getJobMetaInfo
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatusList
parameter_list|,
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FileStatus
name|fs
range|:
name|fileStatusList
control|)
block|{
name|JobIndexInfo
name|jobIndexInfo
init|=
name|FileNameIndexUtils
operator|.
name|getIndexInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|String
name|confFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateConfFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|summaryFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateSummaryFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|MetaInfo
name|metaInfo
init|=
operator|new
name|MetaInfo
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|confFileName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|summaryFileName
argument_list|)
argument_list|,
name|jobIndexInfo
argument_list|)
decl_stmt|;
return|return
name|metaInfo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Scans old directories known by the idToDateString map for the specified    * jobId. If the number of directories is higher than the supported size of    * the idToDateString cache, the jobId will not be found.    *     * @param jobId    *          the jobId.    * @return    * @throws IOException    */
DECL|method|scanOldDirsForJob (JobId jobId)
specifier|private
name|MetaInfo
name|scanOldDirsForJob
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|jobSerialNumber
init|=
name|JobHistoryUtils
operator|.
name|jobSerialNumber
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|String
name|boxedSerialNumber
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|jobSerialNumber
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dateStringSet
decl_stmt|;
synchronized|synchronized
init|(
name|idToDateString
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|found
init|=
name|idToDateString
operator|.
name|get
argument_list|(
name|boxedSerialNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|dateStringSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|timestampPart
range|:
name|dateStringSet
control|)
block|{
name|Path
name|logDir
init|=
name|canonicalHistoryLogPath
argument_list|(
name|jobId
argument_list|,
name|timestampPart
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatusList
init|=
name|scanDirectoryForHistoryFiles
argument_list|(
name|logDir
argument_list|,
name|doneDirFc
argument_list|)
decl_stmt|;
name|MetaInfo
name|metaInfo
init|=
name|getJobMetaInfo
argument_list|(
name|fileStatusList
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|metaInfo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Checks for the existence of the job history file in the intermediate    * directory.    *     * @param jobId    * @return    * @throws IOException    */
DECL|method|scanIntermediateForJob (JobId jobId)
specifier|private
name|MetaInfo
name|scanIntermediateForJob
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|scanIntermediateDirectory
argument_list|()
expr_stmt|;
return|return
name|intermediateListCache
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
return|;
block|}
comment|/**    * Parse a job from the JobHistoryFile, if the underlying file is not going to    * be deleted.    *     * @param metaInfo    *          the where the JobHistory is stored.    * @return the Job or null if the underlying file was deleted.    * @throws IOException    *           if there is an error trying to read the file.    */
DECL|method|loadJob (MetaInfo metaInfo)
specifier|public
name|Job
name|loadJob
parameter_list|(
name|MetaInfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CompletedJob
argument_list|(
name|conf
argument_list|,
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|metaInfo
operator|.
name|getHistoryFile
argument_list|()
argument_list|,
literal|false
argument_list|,
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|metaInfo
operator|.
name|getConfFile
argument_list|()
argument_list|,
name|aclsMgr
argument_list|)
return|;
block|}
DECL|method|getAllMetaInfo ()
specifier|public
name|Collection
argument_list|<
name|MetaInfo
argument_list|>
name|getAllMetaInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|scanIntermediateDirectory
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|MetaInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|MetaInfo
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|intermediateListCache
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|jobListCache
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getIntermediateMetaInfos ()
name|Collection
argument_list|<
name|MetaInfo
argument_list|>
name|getIntermediateMetaInfos
parameter_list|()
throws|throws
name|IOException
block|{
name|scanIntermediateDirectory
argument_list|()
expr_stmt|;
return|return
name|intermediateListCache
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getMetaInfo (JobId jobId)
specifier|public
name|MetaInfo
name|getMetaInfo
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// MetaInfo available in cache.
name|MetaInfo
name|metaInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jobListCache
operator|.
name|containsKey
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|metaInfo
operator|=
name|jobListCache
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|metaInfo
return|;
block|}
comment|// MetaInfo not available. Check intermediate directory for meta info.
name|metaInfo
operator|=
name|scanIntermediateForJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|metaInfo
return|;
block|}
comment|// Intermediate directory does not contain job. Search through older ones.
name|metaInfo
operator|=
name|scanOldDirsForJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|metaInfo
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|moveToDone (MetaInfo metaInfo)
name|void
name|moveToDone
parameter_list|(
name|MetaInfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|completeTime
init|=
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|completeTime
operator|==
literal|0
condition|)
name|completeTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|metaInfo
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|historyFile
init|=
name|metaInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|historyFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file for job-history with "
operator|+
name|jobId
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
name|Path
name|confFile
init|=
name|metaInfo
operator|.
name|getConfFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|confFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file for jobConf with "
operator|+
name|jobId
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|confFile
argument_list|)
expr_stmt|;
block|}
comment|// TODO Check all mi getters and setters for the conf path
name|Path
name|summaryFile
init|=
name|metaInfo
operator|.
name|getSummaryFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|summaryFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No summary file for job: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|String
name|jobSummaryString
init|=
name|getJobSummary
argument_list|(
name|intermediateDoneDirFc
argument_list|,
name|summaryFile
argument_list|)
decl_stmt|;
name|SUMMARY_LOG
operator|.
name|info
argument_list|(
name|jobSummaryString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting JobSummary file: ["
operator|+
name|summaryFile
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|intermediateDoneDirFc
operator|.
name|delete
argument_list|(
name|summaryFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metaInfo
operator|.
name|setSummaryFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to process summary file: ["
operator|+
name|summaryFile
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|Path
name|targetDir
init|=
name|canonicalHistoryLogPath
argument_list|(
name|jobId
argument_list|,
name|completeTime
argument_list|)
decl_stmt|;
name|addDirectoryToSerialNumberIndex
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
try|try
block|{
name|makeDoneSubdir
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed creating subdirectory: "
operator|+
name|targetDir
operator|+
literal|" while attempting to move files for jobId: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
synchronized|synchronized
init|(
name|metaInfo
init|)
block|{
if|if
condition|(
name|historyFile
operator|!=
literal|null
condition|)
block|{
name|Path
name|toPath
init|=
name|doneDirFc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|historyFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|moveToDoneNow
argument_list|(
name|historyFile
argument_list|,
name|toPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to move file: "
operator|+
name|historyFile
operator|+
literal|" for jobId: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|metaInfo
operator|.
name|setHistoryFile
argument_list|(
name|toPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confFile
operator|!=
literal|null
condition|)
block|{
name|Path
name|toPath
init|=
name|doneDirFc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|confFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|moveToDoneNow
argument_list|(
name|confFile
argument_list|,
name|toPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to move file: "
operator|+
name|historyFile
operator|+
literal|" for jobId: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|metaInfo
operator|.
name|setConfFile
argument_list|(
name|toPath
argument_list|)
expr_stmt|;
block|}
block|}
name|addToJobListCache
argument_list|(
name|metaInfo
argument_list|)
expr_stmt|;
name|intermediateListCache
operator|.
name|remove
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
DECL|method|moveToDoneNow (final Path src, final Path target)
specifier|private
name|void
name|moveToDoneNow
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|src
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|intermediateDoneDirFc
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobSummary (FileContext fc, Path path)
specifier|private
name|String
name|getJobSummary
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qPath
init|=
name|fc
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|qPath
argument_list|)
decl_stmt|;
name|String
name|jobSummaryString
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jobSummaryString
return|;
block|}
DECL|method|makeDoneSubdir (Path path)
specifier|private
name|void
name|makeDoneSubdir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|existsInExistingCache
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|existingDoneSubdirs
init|)
block|{
if|if
condition|(
name|existingDoneSubdirs
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
name|existsInExistingCache
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|doneDirFc
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existsInExistingCache
condition|)
block|{
name|existingDoneSubdirs
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JobHistory.maybeMakeSubdirectory -- We believed "
operator|+
name|path
operator|+
literal|" already existed, but it didn't."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfE
parameter_list|)
block|{
try|try
block|{
name|FsPermission
name|fsp
init|=
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_DONE_DIR_PERMISSION
argument_list|)
decl_stmt|;
name|doneDirFc
operator|.
name|mkdir
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
name|fsStatus
init|=
name|doneDirFc
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Perms after creating "
operator|+
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|+
literal|", Expected: "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|!=
name|fsp
operator|.
name|toShort
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly setting permissions to : "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
operator|+
literal|", "
operator|+
name|fsp
argument_list|)
expr_stmt|;
name|doneDirFc
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|existingDoneSubdirs
init|)
block|{
name|existingDoneSubdirs
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|faeE
parameter_list|)
block|{
comment|// Nothing to do.
block|}
block|}
block|}
DECL|method|canonicalHistoryLogPath (JobId id, String timestampComponent)
specifier|private
name|Path
name|canonicalHistoryLogPath
parameter_list|(
name|JobId
name|id
parameter_list|,
name|String
name|timestampComponent
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|doneDirPrefixPath
argument_list|,
name|JobHistoryUtils
operator|.
name|historyLogSubdirectory
argument_list|(
name|id
argument_list|,
name|timestampComponent
argument_list|,
name|serialNumberFormat
argument_list|)
argument_list|)
return|;
block|}
DECL|method|canonicalHistoryLogPath (JobId id, long millisecondTime)
specifier|private
name|Path
name|canonicalHistoryLogPath
parameter_list|(
name|JobId
name|id
parameter_list|,
name|long
name|millisecondTime
parameter_list|)
block|{
name|String
name|timestampComponent
init|=
name|JobHistoryUtils
operator|.
name|timestampDirectoryComponent
argument_list|(
name|millisecondTime
argument_list|,
name|debugMode
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|doneDirPrefixPath
argument_list|,
name|JobHistoryUtils
operator|.
name|historyLogSubdirectory
argument_list|(
name|id
argument_list|,
name|timestampComponent
argument_list|,
name|serialNumberFormat
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getEffectiveTimestamp (long finishTime, FileStatus fileStatus)
specifier|private
name|long
name|getEffectiveTimestamp
parameter_list|(
name|long
name|finishTime
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|)
block|{
if|if
condition|(
name|finishTime
operator|==
literal|0
condition|)
block|{
return|return
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
return|return
name|finishTime
return|;
block|}
DECL|method|deleteJobFromDone (MetaInfo metaInfo)
specifier|private
name|void
name|deleteJobFromDone
parameter_list|(
name|MetaInfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|jobListCache
operator|.
name|remove
argument_list|(
name|metaInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|doneDirFc
operator|.
name|delete
argument_list|(
name|doneDirFc
operator|.
name|makeQualified
argument_list|(
name|metaInfo
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doneDirFc
operator|.
name|delete
argument_list|(
name|doneDirFc
operator|.
name|makeQualified
argument_list|(
name|metaInfo
operator|.
name|getConfFile
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|clean (long cutoff, HistoryStorage storage)
name|void
name|clean
parameter_list|(
name|long
name|cutoff
parameter_list|,
name|HistoryStorage
name|storage
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO this should be replaced by something that knows about the directory
comment|// structure and will put less of a load on HDFS.
name|boolean
name|halted
init|=
literal|false
decl_stmt|;
comment|// TODO Delete YYYY/MM/DD directories.
name|List
argument_list|<
name|FileStatus
argument_list|>
name|serialDirList
init|=
name|findTimestampedDirectories
argument_list|()
decl_stmt|;
comment|// Sort in ascending order. Relies on YYYY/MM/DD/Serial
name|Collections
operator|.
name|sort
argument_list|(
name|serialDirList
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|serialDir
range|:
name|serialDirList
control|)
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|historyFileList
init|=
name|scanDirectoryForHistoryFiles
argument_list|(
name|serialDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|doneDirFc
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|historyFile
range|:
name|historyFileList
control|)
block|{
name|JobIndexInfo
name|jobIndexInfo
init|=
name|FileNameIndexUtils
operator|.
name|getIndexInfo
argument_list|(
name|historyFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|effectiveTimestamp
init|=
name|getEffectiveTimestamp
argument_list|(
name|jobIndexInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|historyFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectiveTimestamp
operator|<=
name|cutoff
condition|)
block|{
name|String
name|confFileName
init|=
name|JobHistoryUtils
operator|.
name|getIntermediateConfFileName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|MetaInfo
name|metaInfo
init|=
operator|new
name|MetaInfo
argument_list|(
name|historyFile
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|historyFile
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|confFileName
argument_list|)
argument_list|,
literal|null
argument_list|,
name|jobIndexInfo
argument_list|)
decl_stmt|;
name|storage
operator|.
name|jobRemovedFromHDFS
argument_list|(
name|metaInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteJobFromDone
argument_list|(
name|metaInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|halted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|halted
condition|)
block|{
name|doneDirFc
operator|.
name|delete
argument_list|(
name|doneDirFc
operator|.
name|makeQualified
argument_list|(
name|serialDir
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|removeDirectoryFromSerialNumberIndex
argument_list|(
name|serialDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|existingDoneSubdirs
init|)
block|{
name|existingDoneSubdirs
operator|.
name|remove
argument_list|(
name|serialDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
comment|// Don't scan any more directories.
block|}
block|}
block|}
block|}
end_class

end_unit

