begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A job that has too many tasks associated with it, of which we do not parse  * its job history file, to prevent the Job History Server from hanging on  * parsing the file. It is meant to be used only by JHS to indicate if the  * history file of a job is fully parsed or not.  */
end_comment

begin_class
DECL|class|UnparsedJob
specifier|public
class|class
name|UnparsedJob
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
block|{
DECL|field|jobIndexInfo
specifier|private
specifier|final
name|JobIndexInfo
name|jobIndexInfo
decl_stmt|;
DECL|field|maxTasksAllowed
specifier|private
specifier|final
name|int
name|maxTasksAllowed
decl_stmt|;
DECL|field|jobReport
specifier|private
name|JobReport
name|jobReport
decl_stmt|;
DECL|field|jhfInfo
specifier|private
specifier|final
name|HistoryFileManager
operator|.
name|HistoryFileInfo
name|jhfInfo
decl_stmt|;
DECL|method|UnparsedJob (int maxTasksAllowed, JobIndexInfo jobIndexInfo, HistoryFileManager.HistoryFileInfo jhfInfo)
specifier|public
name|UnparsedJob
parameter_list|(
name|int
name|maxTasksAllowed
parameter_list|,
name|JobIndexInfo
name|jobIndexInfo
parameter_list|,
name|HistoryFileManager
operator|.
name|HistoryFileInfo
name|jhfInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jobIndexInfo
operator|=
name|jobIndexInfo
expr_stmt|;
name|this
operator|.
name|jhfInfo
operator|=
name|jhfInfo
expr_stmt|;
name|this
operator|.
name|maxTasksAllowed
operator|=
name|maxTasksAllowed
expr_stmt|;
block|}
DECL|method|getMaxTasksAllowed ()
specifier|public
name|int
name|getMaxTasksAllowed
parameter_list|()
block|{
return|return
name|maxTasksAllowed
return|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|JobId
name|getID
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getJobId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getJobName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|JobState
name|getState
parameter_list|()
block|{
return|return
name|JobState
operator|.
name|valueOf
argument_list|(
name|jobIndexInfo
operator|.
name|getJobStatus
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
specifier|synchronized
name|JobReport
name|getReport
parameter_list|()
block|{
if|if
condition|(
name|jobReport
operator|==
literal|null
condition|)
block|{
name|jobReport
operator|=
name|constructJobReport
argument_list|()
expr_stmt|;
block|}
return|return
name|jobReport
return|;
block|}
DECL|method|constructJobReport ()
specifier|public
name|JobReport
name|constructJobReport
parameter_list|()
block|{
name|JobReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setJobId
argument_list|(
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSubmitTime
argument_list|(
name|jobIndexInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|jobIndexInfo
operator|.
name|getJobStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|jobIndexInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobName
argument_list|(
name|jobIndexInfo
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setUser
argument_list|(
name|jobIndexInfo
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobFile
argument_list|(
name|getConfFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setHistoryFile
argument_list|(
name|jhfInfo
operator|.
name|getHistoryFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
DECL|method|getAllCounters ()
specifier|public
name|Counters
name|getAllCounters
parameter_list|()
block|{
return|return
operator|new
name|Counters
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTasks ()
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTasks (TaskType taskType)
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTask (TaskId taskID)
specifier|public
name|Task
name|getTask
parameter_list|(
name|TaskId
name|taskID
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getNumMaps
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getNumReduces
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCompletedMaps ()
specifier|public
name|int
name|getCompletedMaps
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getCompletedReduces ()
specifier|public
name|int
name|getCompletedReduces
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|1.0f
return|;
block|}
annotation|@
name|Override
DECL|method|isUber ()
specifier|public
name|boolean
name|isUber
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getUser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|jobIndexInfo
operator|.
name|getQueueName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConfFile ()
specifier|public
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|jhfInfo
operator|.
name|getConfFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|loadConfFile ()
specifier|public
name|Configuration
name|loadConfFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|jhfInfo
operator|.
name|loadConfFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getJobACLs ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptCompletionEvents ( int fromEventId, int maxEvents)
specifier|public
name|TaskAttemptCompletionEvent
index|[]
name|getTaskAttemptCompletionEvents
parameter_list|(
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptCompletionEvent
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getMapAttemptCompletionEvents ( int startIndex, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|getMapAttemptCompletionEvents
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
return|return
operator|new
name|TaskCompletionEvent
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAMInfos
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, JobACL jobOperation)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setQueueName (String queueName)
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't set job's "
operator|+
literal|"queue name in history"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setJobPriority (Priority priority)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't set job's priority in history"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFailedMaps ()
specifier|public
name|int
name|getFailedMaps
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getFailedReduces ()
specifier|public
name|int
name|getFailedReduces
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getKilledMaps ()
specifier|public
name|int
name|getKilledMaps
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getKilledReduces ()
specifier|public
name|int
name|getKilledReduces
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

