begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMWebServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ConfInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobTaskAttemptCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobTaskCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TasksInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AMAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AMAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|HistoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/history"
argument_list|)
DECL|class|HsWebServices
specifier|public
class|class
name|HsWebServices
block|{
DECL|field|appCtx
specifier|private
specifier|final
name|AppContext
name|appCtx
decl_stmt|;
DECL|field|webapp
specifier|private
name|WebApp
name|webapp
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Context
DECL|field|uriInfo
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Inject
DECL|method|HsWebServices (final AppContext appCtx, final Configuration conf, final WebApp webapp)
specifier|public
name|HsWebServices
parameter_list|(
specifier|final
name|AppContext
name|appCtx
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|WebApp
name|webapp
parameter_list|)
block|{
name|this
operator|.
name|appCtx
operator|=
name|appCtx
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|webapp
operator|=
name|webapp
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|HistoryInfo
name|get
parameter_list|()
block|{
return|return
name|getHistoryInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getHistoryInfo ()
specifier|public
name|HistoryInfo
name|getHistoryInfo
parameter_list|()
block|{
return|return
operator|new
name|HistoryInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobs (@ueryParamR) String userQuery, @QueryParam(R) String count, @QueryParam(R) String queueQuery, @QueryParam(R) String startedBegin, @QueryParam(R) String startedEnd, @QueryParam(R) String finishBegin, @QueryParam(R) String finishEnd)
specifier|public
name|JobsInfo
name|getJobs
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"queue"
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|)
name|String
name|finishEnd
parameter_list|)
block|{
name|JobsInfo
name|allJobs
init|=
operator|new
name|JobsInfo
argument_list|()
decl_stmt|;
name|long
name|num
init|=
literal|0
decl_stmt|;
name|boolean
name|checkCount
init|=
literal|false
decl_stmt|;
name|boolean
name|checkStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkEnd
init|=
literal|false
decl_stmt|;
name|long
name|countNum
init|=
literal|0
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
name|long
name|sBegin
init|=
literal|0
decl_stmt|;
name|long
name|sEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fBegin
init|=
literal|0
decl_stmt|;
name|long
name|fEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
operator|!
name|count
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkCount
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|countNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|countNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|sBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedBegin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid number format: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|sBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|sEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedEnd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid number format: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|sEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sBegin
operator|>
name|sEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|fBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishBegin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid number format: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|fEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishEnd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid number format: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fBegin
operator|>
name|fEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishedTimeEnd must be greater than finishedTimeBegin"
argument_list|)
throw|;
block|}
for|for
control|(
name|Job
name|job
range|:
name|appCtx
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|checkCount
operator|&&
name|num
operator|==
name|countNum
condition|)
block|{
break|break;
block|}
comment|// can't really validate queue is a valid one since queues could change
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|queueQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|userQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|JobReport
name|report
init|=
name|job
operator|.
name|getReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkStart
operator|&&
operator|(
name|report
operator|.
name|getStartTime
argument_list|()
operator|<
name|sBegin
operator|||
name|report
operator|.
name|getStartTime
argument_list|()
operator|>
name|sEnd
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkEnd
operator|&&
operator|(
name|report
operator|.
name|getFinishTime
argument_list|()
operator|<
name|fBegin
operator|||
name|report
operator|.
name|getFinishTime
argument_list|()
operator|>
name|fEnd
operator|)
condition|)
block|{
continue|continue;
block|}
name|JobInfo
name|jobInfo
init|=
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|allJobs
operator|.
name|add
argument_list|(
name|jobInfo
argument_list|)
expr_stmt|;
name|num
operator|++
expr_stmt|;
block|}
return|return
name|allJobs
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJob (@athParamR) String jid)
specifier|public
name|JobInfo
name|getJob
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/jobattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobAttempts (@athParamR) String jid)
specifier|public
name|AMAttemptsInfo
name|getJobAttempts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|AMAttemptsInfo
name|amAttempts
init|=
operator|new
name|AMAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|job
operator|.
name|getAMInfos
argument_list|()
control|)
block|{
name|AMAttemptInfo
name|attempt
init|=
operator|new
name|AMAttemptInfo
argument_list|(
name|amInfo
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|job
operator|.
name|getUserName
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|webapp
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|amAttempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
return|return
name|amAttempts
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobCounters (@athParamR) String jid)
specifier|public
name|JobCounterInfo
name|getJobCounters
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobCounterInfo
argument_list|(
name|this
operator|.
name|appCtx
argument_list|,
name|job
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/conf"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobConf (@athParamR) String jid)
specifier|public
name|ConfInfo
name|getJobConf
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|ConfInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
operator|new
name|ConfInfo
argument_list|(
name|job
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"unable to load configuration for job: "
operator|+
name|jid
argument_list|)
throw|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTasks (@athParamR) String jid, @QueryParam(R) String type)
specifier|public
name|TasksInfo
name|getJobTasks
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"type"
argument_list|)
name|String
name|type
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|TasksInfo
name|allTasks
init|=
operator|new
name|TasksInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskType
name|ttype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ttype
operator|=
name|MRApps
operator|.
name|taskType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"tasktype must be either m or r"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|ttype
operator|!=
literal|null
operator|&&
name|task
operator|.
name|getType
argument_list|()
operator|!=
name|ttype
condition|)
block|{
continue|continue;
block|}
name|allTasks
operator|.
name|add
argument_list|(
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|allTasks
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks/{taskid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTask (@athParamR) String jid, @PathParam(R) String tid)
specifier|public
name|TaskInfo
name|getJobTask
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|AMWebServices
operator|.
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
return|return
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks/{taskid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getSingleTaskCounters ( @athParamR) String jid, @PathParam(R) String tid)
specifier|public
name|JobTaskCounterInfo
name|getSingleTaskCounters
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|TaskId
name|taskID
init|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
name|tid
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskID
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"taskid "
operator|+
name|tid
operator|+
literal|" not found or invalid"
argument_list|)
throw|;
block|}
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"task not found with id "
operator|+
name|tid
argument_list|)
throw|;
block|}
return|return
operator|new
name|JobTaskCounterInfo
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks/{taskid}/attempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttempts (@athParamR) String jid, @PathParam(R) String tid)
specifier|public
name|TaskAttemptsInfo
name|getJobTaskAttempts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|TaskAttemptsInfo
name|attempts
init|=
operator|new
name|TaskAttemptsInfo
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|AMWebServices
operator|.
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|ta
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|new
name|TaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|attempts
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttemptId (@athParamR) String jid, @PathParam(R) String tid, @PathParam(R) String attId)
specifier|public
name|TaskAttemptInfo
name|getJobTaskAttemptId
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"attemptid"
argument_list|)
name|String
name|attId
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|AMWebServices
operator|.
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|TaskAttempt
name|ta
init|=
name|AMWebServices
operator|.
name|getTaskAttemptFromTaskAttemptString
argument_list|(
name|attId
argument_list|,
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
return|return
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/mapreduce/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttemptIdCounters ( @athParamR) String jid, @PathParam(R) String tid, @PathParam(R) String attId)
specifier|public
name|JobTaskAttemptCounterInfo
name|getJobTaskAttemptIdCounters
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"attemptid"
argument_list|)
name|String
name|attId
parameter_list|)
block|{
name|Job
name|job
init|=
name|AMWebServices
operator|.
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|AMWebServices
operator|.
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|TaskAttempt
name|ta
init|=
name|AMWebServices
operator|.
name|getTaskAttemptFromTaskAttemptString
argument_list|(
name|attId
argument_list|,
name|task
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobTaskAttemptCounterInfo
argument_list|(
name|ta
argument_list|)
return|;
block|}
block|}
end_class

end_unit

