begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|HSAdminRefreshProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|HSAdminRefreshProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|protocolPB
operator|.
name|HSAdminRefreshProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|HSProxies
specifier|public
class|class
name|HSProxies
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HSProxies
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProxy (Configuration conf, InetSocketAddress hsaddr, Class<T> xface, UserGroupInformation ugi)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|hsaddr
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|proxy
decl_stmt|;
if|if
condition|(
name|xface
operator|==
name|RefreshUserMappingsProtocol
operator|.
name|class
condition|)
block|{
name|proxy
operator|=
operator|(
name|T
operator|)
name|createHSProxyWithRefreshUserMappingsProtocol
argument_list|(
name|hsaddr
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xface
operator|==
name|GetUserMappingsProtocol
operator|.
name|class
condition|)
block|{
name|proxy
operator|=
operator|(
name|T
operator|)
name|createHSProxyWithGetUserMappingsProtocol
argument_list|(
name|hsaddr
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xface
operator|==
name|HSAdminRefreshProtocol
operator|.
name|class
condition|)
block|{
name|proxy
operator|=
operator|(
name|T
operator|)
name|createHSProxyWithHSAdminRefreshProtocol
argument_list|(
name|hsaddr
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Unsupported protocol found when creating the proxy "
operator|+
literal|"connection to History server: "
operator|+
operator|(
operator|(
name|xface
operator|!=
literal|null
operator|)
condition|?
name|xface
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"null"
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|proxy
return|;
block|}
DECL|method|createHSProxyWithRefreshUserMappingsProtocol ( InetSocketAddress address, Configuration conf, UserGroupInformation ugi)
specifier|private
specifier|static
name|RefreshUserMappingsProtocol
name|createHSProxyWithRefreshUserMappingsProtocol
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|RefreshUserMappingsProtocolPB
name|proxy
init|=
operator|(
name|RefreshUserMappingsProtocolPB
operator|)
name|createHSProxy
argument_list|(
name|address
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|,
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|RefreshUserMappingsProtocolClientSideTranslatorPB
argument_list|(
name|proxy
argument_list|)
return|;
block|}
DECL|method|createHSProxyWithGetUserMappingsProtocol ( InetSocketAddress address, Configuration conf, UserGroupInformation ugi)
specifier|private
specifier|static
name|GetUserMappingsProtocol
name|createHSProxyWithGetUserMappingsProtocol
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|GetUserMappingsProtocolPB
name|proxy
init|=
operator|(
name|GetUserMappingsProtocolPB
operator|)
name|createHSProxy
argument_list|(
name|address
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|,
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetUserMappingsProtocolClientSideTranslatorPB
argument_list|(
name|proxy
argument_list|)
return|;
block|}
DECL|method|createHSProxyWithHSAdminRefreshProtocol ( InetSocketAddress hsaddr, Configuration conf, UserGroupInformation ugi)
specifier|private
specifier|static
name|HSAdminRefreshProtocol
name|createHSProxyWithHSAdminRefreshProtocol
parameter_list|(
name|InetSocketAddress
name|hsaddr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|HSAdminRefreshProtocolPB
name|proxy
init|=
operator|(
name|HSAdminRefreshProtocolPB
operator|)
name|createHSProxy
argument_list|(
name|hsaddr
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|,
name|HSAdminRefreshProtocolPB
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|HSAdminRefreshProtocolClientSideTranslatorPB
argument_list|(
name|proxy
argument_list|)
return|;
block|}
DECL|method|createHSProxy (InetSocketAddress address, Configuration conf, UserGroupInformation ugi, Class<?> xface, int rpcTimeout)
specifier|private
specifier|static
name|Object
name|createHSProxy
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|xface
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|xface
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|proxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|xface
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|xface
argument_list|)
argument_list|,
name|address
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
end_class

end_unit

