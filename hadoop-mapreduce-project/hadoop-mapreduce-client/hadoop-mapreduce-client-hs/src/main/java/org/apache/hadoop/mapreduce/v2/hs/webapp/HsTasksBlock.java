begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|TASK_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TFOOT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|THEAD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|HamletSpec
operator|.
name|InputType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * Render the a table of tasks for a given type.  */
end_comment

begin_class
DECL|class|HsTasksBlock
specifier|public
class|class
name|HsTasksBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|app
specifier|final
name|App
name|app
decl_stmt|;
DECL|method|HsTasksBlock (App app)
annotation|@
name|Inject
name|HsTasksBlock
parameter_list|(
name|App
name|app
parameter_list|)
block|{
name|this
operator|.
name|app
operator|=
name|app
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    * @see org.apache.hadoop.yarn.webapp.view.HtmlBlock#render(org.apache.hadoop.yarn.webapp.view.HtmlBlock.Block)    */
DECL|method|render (Block html)
annotation|@
name|Override
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
if|if
condition|(
name|app
operator|.
name|getJob
argument_list|()
operator|==
literal|null
condition|)
block|{
name|html
operator|.
name|h2
argument_list|(
name|$
argument_list|(
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|TaskType
name|type
init|=
literal|null
decl_stmt|;
name|String
name|symbol
init|=
name|$
argument_list|(
name|TASK_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|type
operator|=
name|MRApps
operator|.
name|taskType
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
name|THEAD
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|thead
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#tasks"
argument_list|)
operator|.
name|thead
argument_list|()
decl_stmt|;
comment|//Create the spanning row
name|int
name|attemptColSpan
init|=
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|?
literal|8
else|:
literal|3
decl_stmt|;
name|thead
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$colspan
argument_list|(
literal|5
argument_list|)
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Task"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$colspan
argument_list|(
name|attemptColSpan
argument_list|)
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Successful Attempt"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|TR
argument_list|<
name|THEAD
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|theadRow
init|=
name|thead
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|"Name"
argument_list|)
operator|.
name|th
argument_list|(
literal|"State"
argument_list|)
operator|.
name|th
argument_list|(
literal|"Start Time"
argument_list|)
operator|.
name|th
argument_list|(
literal|"Finish Time"
argument_list|)
operator|.
name|th
argument_list|(
literal|"Elapsed Time"
argument_list|)
operator|.
name|th
argument_list|(
literal|"Start Time"
argument_list|)
decl_stmt|;
comment|//Attempt
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|theadRow
operator|.
name|th
argument_list|(
literal|"Shuffle Finish Time"
argument_list|)
expr_stmt|;
comment|//Attempt
name|theadRow
operator|.
name|th
argument_list|(
literal|"Merge Finish Time"
argument_list|)
expr_stmt|;
comment|//Attempt
block|}
name|theadRow
operator|.
name|th
argument_list|(
literal|"Finish Time"
argument_list|)
expr_stmt|;
comment|//Attempt
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|theadRow
operator|.
name|th
argument_list|(
literal|"Elapsed Time Shuffle"
argument_list|)
expr_stmt|;
comment|//Attempt
name|theadRow
operator|.
name|th
argument_list|(
literal|"Elapsed Time Merge"
argument_list|)
expr_stmt|;
comment|//Attempt
name|theadRow
operator|.
name|th
argument_list|(
literal|"Elapsed Time Reduce"
argument_list|)
expr_stmt|;
comment|//Attempt
block|}
name|theadRow
operator|.
name|th
argument_list|(
literal|"Elapsed Time"
argument_list|)
expr_stmt|;
comment|//Attempt
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|theadRow
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
comment|// Write all the data into a JavaScript array of arrays for JQuery
comment|// DataTables to display
name|StringBuilder
name|tasksTableData
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|app
operator|.
name|getJob
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|task
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
block|{
continue|continue;
block|}
name|TaskInfo
name|info
init|=
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|String
name|tid
init|=
name|info
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|info
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|finishTime
init|=
name|info
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|info
operator|.
name|getElapsedTime
argument_list|()
decl_stmt|;
name|long
name|attemptStartTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|shuffleFinishTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|sortFinishTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|attemptFinishTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|elapsedShuffleTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|elapsedSortTime
init|=
operator|-
literal|1
decl_stmt|;
empty_stmt|;
name|long
name|elapsedReduceTime
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|attemptElapsed
init|=
operator|-
literal|1
decl_stmt|;
name|TaskAttempt
name|successful
init|=
name|info
operator|.
name|getSuccessful
argument_list|()
decl_stmt|;
if|if
condition|(
name|successful
operator|!=
literal|null
condition|)
block|{
name|TaskAttemptInfo
name|ta
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|ReduceTaskAttemptInfo
name|rta
init|=
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|successful
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|shuffleFinishTime
operator|=
name|rta
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
name|sortFinishTime
operator|=
name|rta
operator|.
name|getMergeFinishTime
argument_list|()
expr_stmt|;
name|elapsedShuffleTime
operator|=
name|rta
operator|.
name|getElapsedShuffleTime
argument_list|()
expr_stmt|;
name|elapsedSortTime
operator|=
name|rta
operator|.
name|getElapsedMergeTime
argument_list|()
expr_stmt|;
name|elapsedReduceTime
operator|=
name|rta
operator|.
name|getElapsedReduceTime
argument_list|()
expr_stmt|;
name|ta
operator|=
name|rta
expr_stmt|;
block|}
else|else
block|{
name|ta
operator|=
operator|new
name|TaskAttemptInfo
argument_list|(
name|successful
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|attemptStartTime
operator|=
name|ta
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|attemptFinishTime
operator|=
name|ta
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptElapsed
operator|=
name|ta
operator|.
name|getElapsedTime
argument_list|()
expr_stmt|;
block|}
name|tasksTableData
operator|.
name|append
argument_list|(
literal|"[\""
argument_list|)
operator|.
name|append
argument_list|(
literal|"<a href='"
operator|+
name|url
argument_list|(
literal|"task"
argument_list|,
name|tid
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|tid
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|finishTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|elapsed
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|attemptStartTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|tasksTableData
operator|.
name|append
argument_list|(
name|shuffleFinishTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|sortFinishTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
expr_stmt|;
block|}
name|tasksTableData
operator|.
name|append
argument_list|(
name|attemptFinishTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|tasksTableData
operator|.
name|append
argument_list|(
name|elapsedShuffleTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedSortTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedReduceTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\""
argument_list|)
expr_stmt|;
block|}
name|tasksTableData
operator|.
name|append
argument_list|(
name|attemptElapsed
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"],\n"
argument_list|)
expr_stmt|;
block|}
comment|//Remove the last comma and close off the array of arrays
if|if
condition|(
name|tasksTableData
operator|.
name|charAt
argument_list|(
name|tasksTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|','
condition|)
block|{
name|tasksTableData
operator|.
name|delete
argument_list|(
name|tasksTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|tasksTableData
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|tasksTableData
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
literal|"var tasksTableData="
operator|+
name|tasksTableData
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|TR
argument_list|<
name|TFOOT
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|footRow
init|=
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|tfoot
argument_list|()
operator|.
name|tr
argument_list|()
decl_stmt|;
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"task"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"ID"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"state"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"State"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"start_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Start Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"finish_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Finish Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"elapsed_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Elapsed Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"attempt_start_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Start Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"shuffle_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Shuffle Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"merge_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Merge Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"attempt_finish"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Finish Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"elapsed_shuffle_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Elapsed Shuffle Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"elapsed_merge_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Elapsed Merge Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"elapsed_reduce_time"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Elapsed Reduce Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|footRow
operator|.
name|th
argument_list|()
operator|.
name|input
argument_list|(
literal|"search_init"
argument_list|)
operator|.
name|$type
argument_list|(
name|InputType
operator|.
name|text
argument_list|)
operator|.
name|$name
argument_list|(
literal|"attempt_elapsed"
argument_list|)
operator|.
name|$value
argument_list|(
literal|"Elapsed Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|footRow
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

