begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|SharedCacheClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests the JobResourceUploader class with the shared cache.  */
end_comment

begin_class
DECL|class|TestJobResourceUploaderWithSharedCache
specifier|public
class|class
name|TestJobResourceUploaderWithSharedCache
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestJobResourceUploaderWithSharedCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|MiniDFSCluster
name|dfs
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|remoteFs
specifier|private
specifier|static
name|FileSystem
name|remoteFs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
name|Path
name|testRootDir
decl_stmt|;
DECL|field|remoteStagingDir
specifier|private
specifier|static
name|Path
name|remoteStagingDir
init|=
operator|new
name|Path
argument_list|(
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_STAGING_DIR
argument_list|)
decl_stmt|;
DECL|field|input
specifier|private
name|String
name|input
init|=
literal|"roses.are.red\nviolets.are.blue\nbunnies.are.pink\n"
decl_stmt|;
annotation|@
name|Before
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteFs
operator|.
name|delete
argument_list|(
name|remoteStagingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create configuration, dfs, file system
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testRootDir
operator|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestJobResourceUploaderWithSharedCache
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|remoteFs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|localFs
operator|!=
literal|null
condition|)
block|{
name|localFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteFs
operator|!=
literal|null
condition|)
block|{
name|remoteFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"IO exception in closing file system"
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MyFileUploader
specifier|private
class|class
name|MyFileUploader
extends|extends
name|JobResourceUploader
block|{
comment|// The mocked SharedCacheClient that will be fed into the FileUploader
DECL|field|mockscClient
specifier|private
name|SharedCacheClient
name|mockscClient
init|=
name|mock
argument_list|(
name|SharedCacheClient
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A real client for checksum calculation
DECL|field|scClient
specifier|private
name|SharedCacheClient
name|scClient
init|=
name|SharedCacheClient
operator|.
name|createSharedCacheClient
argument_list|()
decl_stmt|;
DECL|method|MyFileUploader (FileSystem submitFs, Configuration conf)
name|MyFileUploader
parameter_list|(
name|FileSystem
name|submitFs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|submitFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Initialize the real client, but don't start it. We don't need or want
comment|// to create an actual proxy because we only use this for mocking out the
comment|// getFileChecksum method.
name|scClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockscClient
operator|.
name|getFileChecksum
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Path
name|file
init|=
operator|(
name|Path
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Use the real scClient to generate the checksum. We use an
comment|// answer/mock combination to avoid having to spy on a real
comment|// SharedCacheClient object.
return|return
name|scClient
operator|.
name|getFileChecksum
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// This method is to prime the mock client with the correct checksum, so it
comment|// looks like a given resource is present in the shared cache.
DECL|method|mockFileInSharedCache (Path localFile, URL remoteFile)
specifier|public
name|void
name|mockFileInSharedCache
parameter_list|(
name|Path
name|localFile
parameter_list|,
name|URL
name|remoteFile
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// when the resource is referenced, simply return the remote path to the
comment|// caller
name|when
argument_list|(
name|mockscClient
operator|.
name|use
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|scClient
operator|.
name|getFileChecksum
argument_list|(
name|localFile
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|remoteFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSharedCacheClient (Configuration c)
specifier|protected
name|SharedCacheClient
name|createSharedCacheClient
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
comment|// Feed the mocked SharedCacheClient into the FileUploader logic
return|return
name|mockscClient
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSharedCacheDisabled ()
specifier|public
name|void
name|testSharedCacheDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobID
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"567789"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// shared cache is disabled by default
name|uploadFilesToRemoteFS
argument_list|(
name|job
argument_list|,
name|jobConf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSharedCacheEnabled ()
specifier|public
name|void
name|testSharedCacheEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SHARED_CACHE_MODE
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobID
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"567789"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// shared cache is enabled for every file type
comment|// the # of times SharedCacheClient.use is called should ==
comment|// total # of files/libjars/archive/jobjar
name|uploadFilesToRemoteFS
argument_list|(
name|job
argument_list|,
name|jobConf
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSharedCacheEnabledWithJobJarInSharedCache ()
specifier|public
name|void
name|testSharedCacheEnabledWithJobJarInSharedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SHARED_CACHE_MODE
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobID
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"567789"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// shared cache is enabled for every file type
comment|// the # of times SharedCacheClient.use is called should ==
comment|// total # of files/libjars/archive/jobjar
name|uploadFilesToRemoteFS
argument_list|(
name|job
argument_list|,
name|jobConf
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSharedCacheArchivesAndLibjarsEnabled ()
specifier|public
name|void
name|testSharedCacheArchivesAndLibjarsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SHARED_CACHE_MODE
argument_list|,
literal|"archives,libjars"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobID
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"567789"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// shared cache is enabled for archives and libjars type
comment|// the # of times SharedCacheClient.use is called should ==
comment|// total # of libjars and archives
name|uploadFilesToRemoteFS
argument_list|(
name|job
argument_list|,
name|jobConf
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobConf ()
specifier|private
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|remoteFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
DECL|method|copyToRemote (Path jar)
specifier|private
name|Path
name|copyToRemote
parameter_list|(
name|Path
name|jar
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|remoteFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
name|jar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteFs
operator|.
name|copyFromLocalFile
argument_list|(
name|jar
argument_list|,
name|remoteFile
argument_list|)
expr_stmt|;
return|return
name|remoteFile
return|;
block|}
DECL|method|makeJarAvailableInSharedCache (Path jar, MyFileUploader fileUploader)
specifier|private
name|void
name|makeJarAvailableInSharedCache
parameter_list|(
name|Path
name|jar
parameter_list|,
name|MyFileUploader
name|fileUploader
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// copy file to remote file system
name|Path
name|remoteFile
init|=
name|copyToRemote
argument_list|(
name|jar
argument_list|)
decl_stmt|;
comment|// prime mocking so that it looks like this file is in the shared cache
name|fileUploader
operator|.
name|mockFileInSharedCache
argument_list|(
name|jar
argument_list|,
name|URL
operator|.
name|fromPath
argument_list|(
name|remoteFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadFilesToRemoteFS (Job job, JobConf jobConf, int useCallCountExpected, int numOfFilesShouldBeUploadedToSharedCacheExpected, int numOfArchivesShouldBeUploadedToSharedCacheExpected, boolean jobJarInSharedCacheBeforeUpload)
specifier|private
name|void
name|uploadFilesToRemoteFS
parameter_list|(
name|Job
name|job
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|int
name|useCallCountExpected
parameter_list|,
name|int
name|numOfFilesShouldBeUploadedToSharedCacheExpected
parameter_list|,
name|int
name|numOfArchivesShouldBeUploadedToSharedCacheExpected
parameter_list|,
name|boolean
name|jobJarInSharedCacheBeforeUpload
parameter_list|)
throws|throws
name|Exception
block|{
name|MyFileUploader
name|fileUploader
init|=
operator|new
name|MyFileUploader
argument_list|(
name|remoteFs
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|SharedCacheConfig
name|sharedCacheConfig
init|=
operator|new
name|SharedCacheConfig
argument_list|()
decl_stmt|;
name|sharedCacheConfig
operator|.
name|init
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Path
name|firstFile
init|=
name|createTempFile
argument_list|(
literal|"first-input-file"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|Path
name|secondFile
init|=
name|createTempFile
argument_list|(
literal|"second-input-file"
argument_list|,
literal|"xx"
argument_list|)
decl_stmt|;
comment|// Add files to job conf via distributed cache API as well as command line
name|boolean
name|fileAdded
init|=
name|Job
operator|.
name|addFileToSharedCache
argument_list|(
name|firstFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sharedCacheConfig
operator|.
name|isSharedCacheFilesEnabled
argument_list|()
argument_list|,
name|fileAdded
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileAdded
condition|)
block|{
name|Path
name|remoteFile
init|=
name|copyToRemote
argument_list|(
name|firstFile
argument_list|)
decl_stmt|;
name|job
operator|.
name|addCacheFile
argument_list|(
name|remoteFile
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|secondFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create jars with a single file inside them.
name|Path
name|firstJar
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"distributed.first.jar"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|secondJar
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"distributed.second.jar"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Verify duplicated contents can be handled properly.
name|Path
name|thirdJar
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"distributed.third.jar"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|secondJar
argument_list|,
name|thirdJar
argument_list|)
expr_stmt|;
comment|// make secondJar cache available
name|makeJarAvailableInSharedCache
argument_list|(
name|secondJar
argument_list|,
name|fileUploader
argument_list|)
expr_stmt|;
comment|// Add libjars to job conf via distributed cache API as well as command
comment|// line
name|boolean
name|libjarAdded
init|=
name|Job
operator|.
name|addFileToSharedCacheAndClasspath
argument_list|(
name|firstJar
operator|.
name|toUri
argument_list|()
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sharedCacheConfig
operator|.
name|isSharedCacheLibjarsEnabled
argument_list|()
argument_list|,
name|libjarAdded
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|libjarAdded
condition|)
block|{
name|Path
name|remoteJar
init|=
name|copyToRemote
argument_list|(
name|firstJar
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|remoteJar
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|secondJar
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|thirdJar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|firstArchive
init|=
name|makeArchive
argument_list|(
literal|"first-archive.zip"
argument_list|,
literal|"first-file"
argument_list|)
decl_stmt|;
name|Path
name|secondArchive
init|=
name|makeArchive
argument_list|(
literal|"second-archive.zip"
argument_list|,
literal|"second-file"
argument_list|)
decl_stmt|;
comment|// Add archives to job conf via distributed cache API as well as command
comment|// line
name|boolean
name|archiveAdded
init|=
name|Job
operator|.
name|addArchiveToSharedCache
argument_list|(
name|firstArchive
operator|.
name|toUri
argument_list|()
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sharedCacheConfig
operator|.
name|isSharedCacheArchivesEnabled
argument_list|()
argument_list|,
name|archiveAdded
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|archiveAdded
condition|)
block|{
name|Path
name|remoteArchive
init|=
name|copyToRemote
argument_list|(
name|firstArchive
argument_list|)
decl_stmt|;
name|job
operator|.
name|addCacheArchive
argument_list|(
name|remoteArchive
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|set
argument_list|(
literal|"tmparchives"
argument_list|,
name|secondArchive
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add job jar to job conf
name|Path
name|jobJar
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"test-job.jar"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobJarInSharedCacheBeforeUpload
condition|)
block|{
name|makeJarAvailableInSharedCache
argument_list|(
name|jobJar
argument_list|,
name|fileUploader
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|setJar
argument_list|(
name|jobJar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fileUploader
operator|.
name|uploadResources
argument_list|(
name|job
argument_list|,
name|remoteStagingDir
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fileUploader
operator|.
name|mockscClient
argument_list|,
name|times
argument_list|(
name|useCallCountExpected
argument_list|)
argument_list|)
operator|.
name|use
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numOfFilesShouldBeUploadedToSharedCache
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|filesSharedCacheUploadPolicies
init|=
name|Job
operator|.
name|getFileSharedCacheUploadPolicies
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Boolean
name|policy
range|:
name|filesSharedCacheUploadPolicies
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|policy
condition|)
block|{
name|numOfFilesShouldBeUploadedToSharedCache
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numOfFilesShouldBeUploadedToSharedCacheExpected
argument_list|,
name|numOfFilesShouldBeUploadedToSharedCache
argument_list|)
expr_stmt|;
name|int
name|numOfArchivesShouldBeUploadedToSharedCache
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|archivesSharedCacheUploadPolicies
init|=
name|Job
operator|.
name|getArchiveSharedCacheUploadPolicies
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Boolean
name|policy
range|:
name|archivesSharedCacheUploadPolicies
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|policy
condition|)
block|{
name|numOfArchivesShouldBeUploadedToSharedCache
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numOfArchivesShouldBeUploadedToSharedCacheExpected
argument_list|,
name|numOfArchivesShouldBeUploadedToSharedCache
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile (String filename, String contents)
specifier|private
name|Path
name|createTempFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|localFs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|makeJar (Path p, int index)
specifier|private
name|Path
name|makeJar
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"distributed.jar.inside"
operator|+
name|index
argument_list|)
decl_stmt|;
name|jos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jos
operator|.
name|write
argument_list|(
operator|(
literal|"inside the jar!"
operator|+
name|index
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|jos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jos
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|makeArchive (String archiveFile, String filename)
specifier|private
name|Path
name|makeArchive
parameter_list|(
name|String
name|archiveFile
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|archive
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|archiveFile
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
name|localFs
operator|.
name|create
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|zos
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|archive
return|;
block|}
block|}
end_class

end_unit

