begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitterFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test the committer factory logic, looking at the override  * and fallback behavior.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestPathOutputCommitterFactory
specifier|public
class|class
name|TestPathOutputCommitterFactory
extends|extends
name|Assert
block|{
DECL|field|HTTP_COMMITTER_FACTORY
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_COMMITTER_FACTORY
init|=
name|String
operator|.
name|format
argument_list|(
name|COMMITTER_FACTORY_SCHEME_PATTERN
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
DECL|field|HTTP_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|HTTP_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"http://hadoop.apache.org/"
argument_list|)
decl_stmt|;
DECL|field|HDFS_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|HDFS_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8081/"
argument_list|)
decl_stmt|;
DECL|field|taskAttemptID
specifier|private
name|TaskAttemptID
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"local"
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|/**    * Set a factory for a schema, verify it works.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testCommitterFactoryForSchema ()
specifier|public
name|void
name|testCommitterFactoryForSchema
parameter_list|()
throws|throws
name|Throwable
block|{
name|createCommitterFactory
argument_list|(
name|SimpleCommitterFactory
operator|.
name|class
argument_list|,
name|HTTP_PATH
argument_list|,
name|newBondedConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A schema factory only affects that filesystem.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testCommitterFactoryFallbackDefault ()
specifier|public
name|void
name|testCommitterFactoryFallbackDefault
parameter_list|()
throws|throws
name|Throwable
block|{
name|createCommitterFactory
argument_list|(
name|FileOutputCommitterFactory
operator|.
name|class
argument_list|,
name|HDFS_PATH
argument_list|,
name|newBondedConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A schema factory only affects that filesystem; test through    * {@link PathOutputCommitterFactory#createCommitter(Path, TaskAttemptContext)}.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testCommitterFallbackDefault ()
specifier|public
name|void
name|testCommitterFallbackDefault
parameter_list|()
throws|throws
name|Throwable
block|{
name|createCommitter
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|HDFS_PATH
argument_list|,
name|taskAttempt
argument_list|(
name|newBondedConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that you can override any schema with an explicit name.    */
annotation|@
name|Test
DECL|method|testCommitterFactoryOverride ()
specifier|public
name|void
name|testCommitterFactoryOverride
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
comment|// and then set a global one which overrides the others.
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|OtherFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|createCommitterFactory
argument_list|(
name|OtherFactory
operator|.
name|class
argument_list|,
name|HDFS_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createCommitterFactory
argument_list|(
name|OtherFactory
operator|.
name|class
argument_list|,
name|HTTP_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if the factory class option is "", schema factory    * resolution still works.    */
annotation|@
name|Test
DECL|method|testCommitterFactoryEmptyOption ()
specifier|public
name|void
name|testCommitterFactoryEmptyOption
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
comment|// and then set a global one which overrides the others.
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|createCommitterFactory
argument_list|(
name|SimpleCommitterFactory
operator|.
name|class
argument_list|,
name|HTTP_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// and HDFS, with no schema, falls back to the default
name|createCommitterFactory
argument_list|(
name|FileOutputCommitterFactory
operator|.
name|class
argument_list|,
name|HDFS_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if the committer factory class is unknown, you cannot    * create committers.    */
annotation|@
name|Test
DECL|method|testCommitterFactoryUnknown ()
specifier|public
name|void
name|testCommitterFactoryUnknown
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set the factory to an unknown class
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getCommitterFactory
argument_list|(
name|HDFS_PATH
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if the committer output path is null, you get back    * a FileOutputCommitter with null output& work paths.    */
annotation|@
name|Test
DECL|method|testCommitterNullOutputPath ()
specifier|public
name|void
name|testCommitterNullOutputPath
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// bind http to schema
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
comment|// then ask committers for a null path
name|FileOutputCommitter
name|committer
init|=
name|createCommitter
argument_list|(
name|FileOutputCommitterFactory
operator|.
name|class
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|committer
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|committer
operator|.
name|getWorkPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if you explicitly name a committer, that takes priority    * over any filesystem committer.    */
annotation|@
name|Test
DECL|method|testNamedCommitterFactory ()
specifier|public
name|void
name|testNamedCommitterFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|NAMED_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|SimpleCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleCommitter
name|sc
init|=
name|createCommitter
argument_list|(
name|NamedCommitterFactory
operator|.
name|class
argument_list|,
name|SimpleCommitter
operator|.
name|class
argument_list|,
name|HDFS_PATH
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong output path from "
operator|+
name|sc
argument_list|,
name|HDFS_PATH
argument_list|,
name|sc
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if you explicitly name a committer and there's no    * path, the committer is picked up.    */
annotation|@
name|Test
DECL|method|testNamedCommitterFactoryNullPath ()
specifier|public
name|void
name|testNamedCommitterFactoryNullPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|NAMED_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|SimpleCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleCommitter
name|sc
init|=
name|createCommitter
argument_list|(
name|NamedCommitterFactory
operator|.
name|class
argument_list|,
name|SimpleCommitter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|sc
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if you explicitly name a committer and there's no    * path, the committer is picked up.    */
annotation|@
name|Test
DECL|method|testNamedCommitterNullPath ()
specifier|public
name|void
name|testNamedCommitterNullPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|NAMED_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|SimpleCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleCommitter
name|sc
init|=
name|createCommitter
argument_list|(
name|SimpleCommitter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|taskAttempt
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|sc
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a factory then a committer, validating the type of both.    * @param<T> type of factory    * @param<U> type of committer    * @param factoryClass expected factory class    * @param committerClass expected committer class    * @param path output path (may be null)    * @param conf configuration    * @return the committer    * @throws IOException failure to create    */
specifier|private
parameter_list|<
name|T
extends|extends
name|PathOutputCommitterFactory
parameter_list|,
name|U
extends|extends
name|PathOutputCommitter
parameter_list|>
DECL|method|createCommitter (Class<T> factoryClass, Class<U> committerClass, Path path, Configuration conf)
name|U
name|createCommitter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|Class
argument_list|<
name|U
argument_list|>
name|committerClass
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|f
init|=
name|createCommitterFactory
argument_list|(
name|factoryClass
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PathOutputCommitter
name|committer
init|=
name|f
operator|.
name|createOutputCommitter
argument_list|(
name|path
argument_list|,
name|taskAttempt
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" Wrong committer for path "
operator|+
name|path
operator|+
literal|" from factory "
operator|+
name|f
argument_list|,
name|committerClass
argument_list|,
name|committer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|U
operator|)
name|committer
return|;
block|}
comment|/**    * Create a committer from a task context, via    * {@link PathOutputCommitterFactory#createCommitter(Path, TaskAttemptContext)}.    * @param<U> type of committer    * @param committerClass expected committer class    * @param path output path (may be null)    * @param context task attempt context    * @return the committer    * @throws IOException failure to create    */
DECL|method|createCommitter ( Class<U> committerClass, Path path, TaskAttemptContext context)
specifier|private
parameter_list|<
name|U
extends|extends
name|PathOutputCommitter
parameter_list|>
name|U
name|createCommitter
parameter_list|(
name|Class
argument_list|<
name|U
argument_list|>
name|committerClass
parameter_list|,
name|Path
name|path
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|PathOutputCommitter
name|committer
init|=
name|PathOutputCommitterFactory
operator|.
name|createCommitter
argument_list|(
name|path
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" Wrong committer for path "
operator|+
name|path
argument_list|,
name|committerClass
argument_list|,
name|committer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|U
operator|)
name|committer
return|;
block|}
comment|/**    * Create a factory then a committer, validating its type.    * @param factoryClass expected factory class    * @param path output path (may be null)    * @param conf configuration    * @param<T> type of factory    * @return the factory    */
DECL|method|createCommitterFactory ( Class<T> factoryClass, Path path, Configuration conf)
specifier|private
parameter_list|<
name|T
extends|extends
name|PathOutputCommitterFactory
parameter_list|>
name|T
name|createCommitterFactory
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|PathOutputCommitterFactory
name|factory
init|=
name|getCommitterFactory
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" Wrong factory for path "
operator|+
name|path
argument_list|,
name|factoryClass
argument_list|,
name|factory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|factory
return|;
block|}
comment|/**    * Create a new task attempt context.    * @param conf config    * @return a new context    */
DECL|method|taskAttempt (Configuration conf)
specifier|private
name|TaskAttemptContext
name|taskAttempt
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskAttemptID
argument_list|)
return|;
block|}
comment|/**    * Verify that if you explicitly name a committer, that takes priority    * over any filesystem committer.    */
annotation|@
name|Test
DECL|method|testFileOutputCommitterFactory ()
specifier|public
name|void
name|testFileOutputCommitterFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set up for the schema factory
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|FILE_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|SimpleCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getCommitterFactory
argument_list|(
name|HDFS_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createCommitter
argument_list|(
name|FileOutputCommitterFactory
operator|.
name|class
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Follow the entire committer chain down and create a new committer from    * the output format.    * @throws Throwable on a failure.    */
annotation|@
name|Test
DECL|method|testFileOutputFormatBinding ()
specifier|public
name|void
name|testFileOutputFormatBinding
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|HTTP_PATH
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TextOutputFormat
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|off
init|=
operator|new
name|TextOutputFormat
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleCommitter
name|committer
init|=
operator|(
name|SimpleCommitter
operator|)
name|off
operator|.
name|getOutputCommitter
argument_list|(
name|taskAttempt
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong output path from "
operator|+
name|committer
argument_list|,
name|HTTP_PATH
argument_list|,
name|committer
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Follow the entire committer chain down and create a new committer from    * the output format.    * @throws Throwable on a failure.    */
annotation|@
name|Test
DECL|method|testFileOutputFormatBindingNoPath ()
specifier|public
name|void
name|testFileOutputFormatBindingNoPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|)
expr_stmt|;
comment|// set up for the schema factory
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|NAMED_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|SimpleCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|httpToSimpleFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TextOutputFormat
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|off
init|=
operator|new
name|TextOutputFormat
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleCommitter
name|committer
init|=
operator|(
name|SimpleCommitter
operator|)
name|off
operator|.
name|getOutputCommitter
argument_list|(
name|taskAttempt
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Output path from "
operator|+
name|committer
argument_list|,
name|committer
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Bind the http schema CommitterFactory to {@link SimpleCommitterFactory}.    * @param conf config to patch    */
DECL|method|httpToSimpleFactory (Configuration conf)
specifier|private
name|Configuration
name|httpToSimpleFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HTTP_COMMITTER_FACTORY
argument_list|,
name|SimpleCommitterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Create a configuration with the http schema bonded to the simple factory.    * @return a new, patched configuration    */
DECL|method|newBondedConfiguration ()
specifier|private
name|Configuration
name|newBondedConfiguration
parameter_list|()
block|{
return|return
name|httpToSimpleFactory
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Extract the (mandatory) cause of an exception.    * @param ex exception    * @param clazz expected class    * @return the cause, which will be of the expected type    * @throws AssertionError if there is a problem    */
DECL|method|verifyCauseClass (Throwable ex, Class<E> clazz)
specifier|private
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|E
name|verifyCauseClass
parameter_list|(
name|Throwable
name|ex
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No cause"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Wrong cause class"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
return|return
operator|(
name|E
operator|)
name|cause
return|;
block|}
annotation|@
name|Test
DECL|method|testBadCommitterFactory ()
specifier|public
name|void
name|testBadCommitterFactory
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectFactoryConstructionFailure
argument_list|(
name|HTTP_COMMITTER_FACTORY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoundCommitterWithSchema ()
specifier|public
name|void
name|testBoundCommitterWithSchema
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// this verifies that a bound committer relays to the underlying committer
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
name|TestPathOutputCommitter
operator|.
name|TaskContext
name|tac
init|=
operator|new
name|TestPathOutputCommitter
operator|.
name|TaskContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|BindingPathOutputCommitter
name|committer
init|=
operator|new
name|BindingPathOutputCommitter
argument_list|(
name|HTTP_PATH
argument_list|,
name|tac
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"setupJob"
argument_list|,
parameter_list|()
lambda|->
name|committer
operator|.
name|setupJob
argument_list|(
name|tac
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoundCommitterWithDefault ()
specifier|public
name|void
name|testBoundCommitterWithDefault
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// this verifies that a bound committer relays to the underlying committer
name|Configuration
name|conf
init|=
name|newBondedConfiguration
argument_list|()
decl_stmt|;
name|TestPathOutputCommitter
operator|.
name|TaskContext
name|tac
init|=
operator|new
name|TestPathOutputCommitter
operator|.
name|TaskContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|BindingPathOutputCommitter
name|committer
init|=
operator|new
name|BindingPathOutputCommitter
argument_list|(
name|HDFS_PATH
argument_list|,
name|tac
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|committer
operator|.
name|getCommitter
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the specific key to a string which is not a factory class; expect    * a failure.    * @param key key to set    * @throws Throwable on a failure    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
DECL|method|expectFactoryConstructionFailure (String key)
specifier|protected
name|void
name|expectFactoryConstructionFailure
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"Not a factory"
argument_list|)
expr_stmt|;
name|RuntimeException
name|ex
init|=
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getCommitterFactory
argument_list|(
name|HTTP_PATH
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|verifyCauseClass
argument_list|(
name|verifyCauseClass
argument_list|(
name|ex
argument_list|,
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|,
name|ClassNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple committer.    */
DECL|class|SimpleCommitter
specifier|public
specifier|static
specifier|final
class|class
name|SimpleCommitter
extends|extends
name|PathOutputCommitter
block|{
DECL|field|outputPath
specifier|private
specifier|final
name|Path
name|outputPath
decl_stmt|;
DECL|method|SimpleCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|SimpleCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputPath
operator|=
name|outputPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkPath ()
specifier|public
name|Path
name|getWorkPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Job setup throws an exception.      * @param jobContext Context of the job      * @throws IOException always      */
annotation|@
name|Override
DECL|method|setupJob (JobContext jobContext)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"setupJob"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext taskContext)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|getOutputPath ()
specifier|public
name|Path
name|getOutputPath
parameter_list|()
block|{
return|return
name|outputPath
return|;
block|}
block|}
comment|/**    * The simple committer factory.    */
DECL|class|SimpleCommitterFactory
specifier|private
specifier|static
class|class
name|SimpleCommitterFactory
extends|extends
name|PathOutputCommitterFactory
block|{
annotation|@
name|Override
DECL|method|createOutputCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
comment|/**    * Some other factory.    */
DECL|class|OtherFactory
specifier|private
specifier|static
class|class
name|OtherFactory
extends|extends
name|PathOutputCommitterFactory
block|{
comment|/**      * {@inheritDoc}      * @param outputPath output path. This may be null.      * @param context context      * @return      * @throws IOException      */
annotation|@
name|Override
DECL|method|createOutputCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

