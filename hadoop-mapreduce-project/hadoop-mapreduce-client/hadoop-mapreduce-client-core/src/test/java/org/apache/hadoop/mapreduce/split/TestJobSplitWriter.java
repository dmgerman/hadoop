begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.split
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJobSplitWriter
specifier|public
class|class
name|TestJobSplitWriter
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
literal|"TestJobSplitWriter"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testMaxBlockLocationsNewSplits ()
specifier|public
name|void
name|testMaxBlockLocationsNewSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Path
name|submitDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/some/path"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"loc1"
block|,
literal|"loc2"
block|,
literal|"loc3"
block|,
literal|"loc4"
block|,
literal|"loc5"
block|}
argument_list|)
decl_stmt|;
name|JobSplitWriter
operator|.
name|createSplitFiles
argument_list|(
name|submitDir
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|FileSplit
index|[]
block|{
name|split
block|}
argument_list|)
expr_stmt|;
name|JobSplit
operator|.
name|TaskSplitMetaInfo
index|[]
name|infos
init|=
name|SplitMetaInfoReader
operator|.
name|readSplitMetaInfo
argument_list|(
operator|new
name|JobID
argument_list|()
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|submitDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected number of splits"
argument_list|,
literal|1
argument_list|,
name|infos
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected number of split locations"
argument_list|,
literal|4
argument_list|,
name|infos
index|[
literal|0
index|]
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxBlockLocationsOldSplits ()
specifier|public
name|void
name|testMaxBlockLocationsOldSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Path
name|submitDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
name|split
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/some/path"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"loc1"
block|,
literal|"loc2"
block|,
literal|"loc3"
block|,
literal|"loc4"
block|,
literal|"loc5"
block|}
argument_list|)
decl_stmt|;
name|JobSplitWriter
operator|.
name|createSplitFiles
argument_list|(
name|submitDir
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[]
block|{
name|split
block|}
argument_list|)
expr_stmt|;
name|JobSplit
operator|.
name|TaskSplitMetaInfo
index|[]
name|infos
init|=
name|SplitMetaInfoReader
operator|.
name|readSplitMetaInfo
argument_list|(
operator|new
name|JobID
argument_list|()
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|submitDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected number of splits"
argument_list|,
literal|1
argument_list|,
name|infos
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected number of split locations"
argument_list|,
literal|4
argument_list|,
name|infos
index|[
literal|0
index|]
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

