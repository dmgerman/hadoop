begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test deprecated methods  *  */
end_comment

begin_class
DECL|class|TestOldMethodsJobID
specifier|public
class|class
name|TestOldMethodsJobID
block|{
comment|/**    * test deprecated methods of TaskID    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDepricatedMethods ()
specifier|public
name|void
name|testDepricatedMethods
parameter_list|()
throws|throws
name|IOException
block|{
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|()
decl_stmt|;
name|TaskID
name|test
init|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|test
operator|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|test
operator|=
operator|new
name|TaskID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|test
operator|=
operator|new
name|TaskID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|test
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|TaskID
name|ti
init|=
name|TaskID
operator|.
name|read
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ti
operator|.
name|toString
argument_list|()
argument_list|,
name|test
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_001_0001_m_000002"
argument_list|,
name|TaskID
operator|.
name|getTaskIDsPattern
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_003_0001_m_000004"
argument_list|,
name|TaskID
operator|.
name|getTaskIDsPattern
argument_list|(
literal|"003"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"003_0001_m_000004"
argument_list|,
name|TaskID
operator|.
name|getTaskIDsPatternWOPrefix
argument_list|(
literal|"003"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test JobID    * @throws IOException     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testJobID ()
specifier|public
name|void
name|testJobID
parameter_list|()
throws|throws
name|IOException
block|{
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"001"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|jid
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jid
argument_list|,
name|JobID
operator|.
name|read
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job_001_0001"
argument_list|,
name|JobID
operator|.
name|getJobIDsPattern
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test deprecated methods of TaskCompletionEvent    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTaskCompletionEvent ()
specifier|public
name|void
name|testTaskCompletionEvent
parameter_list|()
block|{
name|TaskAttemptID
name|taid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|TaskCompletionEvent
name|template
init|=
operator|new
name|TaskCompletionEvent
argument_list|(
literal|12
argument_list|,
name|taid
argument_list|,
literal|13
argument_list|,
literal|true
argument_list|,
name|Status
operator|.
name|SUCCEEDED
argument_list|,
literal|"httptracker"
argument_list|)
decl_stmt|;
name|TaskCompletionEvent
name|testEl
init|=
name|TaskCompletionEvent
operator|.
name|downgrade
argument_list|(
name|template
argument_list|)
decl_stmt|;
name|testEl
operator|.
name|setTaskAttemptId
argument_list|(
name|taid
argument_list|)
expr_stmt|;
name|testEl
operator|.
name|setTaskTrackerHttp
argument_list|(
literal|"httpTracker"
argument_list|)
expr_stmt|;
name|testEl
operator|.
name|setTaskId
argument_list|(
literal|"attempt_001_0001_m_000002_04"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attempt_001_0001_m_000002_4"
argument_list|,
name|testEl
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|testEl
operator|.
name|setTaskStatus
argument_list|(
name|Status
operator|.
name|OBSOLETE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OBSOLETE
operator|.
name|toString
argument_list|()
argument_list|,
name|testEl
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testEl
operator|.
name|setTaskRunTime
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testEl
operator|.
name|getTaskRunTime
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|testEl
operator|.
name|setEventId
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testEl
operator|.
name|getEventId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
comment|/**    * test depricated methods of JobProfile    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testJobProfile ()
specifier|public
name|void
name|testJobProfile
parameter_list|()
throws|throws
name|IOException
block|{
name|JobProfile
name|profile
init|=
operator|new
name|JobProfile
argument_list|(
literal|"user"
argument_list|,
literal|"job_001_03"
argument_list|,
literal|"jobFile"
argument_list|,
literal|"uri"
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"job_001_0003"
argument_list|,
name|profile
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|profile
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// serialization test
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|profile
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|JobProfile
name|profile2
init|=
operator|new
name|JobProfile
argument_list|()
decl_stmt|;
name|profile2
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profile2
operator|.
name|name
argument_list|,
name|profile
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profile2
operator|.
name|jobFile
argument_list|,
name|profile
operator|.
name|jobFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profile2
operator|.
name|queueName
argument_list|,
name|profile
operator|.
name|queueName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profile2
operator|.
name|url
argument_list|,
name|profile
operator|.
name|url
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profile2
operator|.
name|user
argument_list|,
name|profile
operator|.
name|user
argument_list|)
expr_stmt|;
block|}
comment|/**    * test TaskAttemptID     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTaskAttemptID ()
specifier|public
name|void
name|testTaskAttemptID
parameter_list|()
block|{
name|TaskAttemptID
name|task
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"001"
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"attempt_001_0002_m_000003_4"
argument_list|,
name|TaskAttemptID
operator|.
name|getTaskAttemptIDsPattern
argument_list|(
literal|"001"
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_001_0002_m_000003"
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attempt_001_0001_r_000002_3"
argument_list|,
name|TaskAttemptID
operator|.
name|getTaskAttemptIDsPattern
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"001_0001_m_000001_2"
argument_list|,
name|TaskAttemptID
operator|.
name|getTaskAttemptIDsPatternWOPrefix
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test Reporter.NULL    *     */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReporter ()
specifier|public
name|void
name|testReporter
parameter_list|()
block|{
name|Reporter
name|nullReporter
init|=
name|Reporter
operator|.
name|NULL
decl_stmt|;
name|assertNull
argument_list|(
name|nullReporter
operator|.
name|getCounter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nullReporter
operator|.
name|getCounter
argument_list|(
literal|"group"
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getInputSplit method removed
try|try
block|{
name|assertNull
argument_list|(
name|nullReporter
operator|.
name|getInputSplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NULL reporter has no input"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nullReporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

