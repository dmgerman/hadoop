begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJob
specifier|public
class|class
name|TestJob
block|{
annotation|@
name|Test
DECL|method|testJobToString ()
specifier|public
name|void
name|testJobToString
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Cluster
name|cluster
init|=
name|mock
argument_list|(
name|Cluster
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientProtocol
name|client
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cluster
operator|.
name|getClient
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|JobID
name|jobid
init|=
operator|new
name|JobID
argument_list|(
literal|"1014873536921"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|JobStatus
name|status
init|=
operator|new
name|JobStatus
argument_list|(
name|jobid
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|State
operator|.
name|FAILED
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|"root"
argument_list|,
literal|"TestJobToString"
argument_list|,
literal|"job file"
argument_list|,
literal|"tracking url"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getJobStatus
argument_list|(
name|jobid
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getTaskReports
argument_list|(
name|jobid
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TaskReport
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getTaskReports
argument_list|(
name|jobid
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TaskReport
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getTaskCompletionEvents
argument_list|(
name|jobid
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TaskCompletionEvent
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|cluster
argument_list|,
name|status
argument_list|,
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|job
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUGICredentialsPropogation ()
specifier|public
name|void
name|testUGICredentialsPropogation
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|Text
name|tokenService
init|=
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|Text
name|secretName
init|=
operator|new
name|Text
argument_list|(
literal|"secret"
argument_list|)
decl_stmt|;
name|byte
name|secret
index|[]
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|tokenService
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secretName
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|token
argument_list|,
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|secret
argument_list|,
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|secretName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

