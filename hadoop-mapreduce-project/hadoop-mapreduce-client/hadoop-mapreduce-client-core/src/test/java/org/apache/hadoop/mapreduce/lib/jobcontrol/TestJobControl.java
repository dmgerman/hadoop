begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJobControl
specifier|public
class|class
name|TestJobControl
block|{
comment|/*    * Tests for the circular dependency between the jobs in job control. If there    * is a circular dependency, all the jobs in job control will be failed.    */
annotation|@
name|Test
DECL|method|testCircularDependency ()
specifier|public
name|void
name|testCircularDependency
parameter_list|()
throws|throws
name|IOException
block|{
name|ControlledJob
name|job1
init|=
operator|new
name|ControlledJob
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|job1
operator|.
name|setJobName
argument_list|(
literal|"job1"
argument_list|)
expr_stmt|;
name|ControlledJob
name|job2
init|=
operator|new
name|ControlledJob
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|job2
operator|.
name|setJobName
argument_list|(
literal|"job2"
argument_list|)
expr_stmt|;
name|ControlledJob
name|job3
init|=
operator|new
name|ControlledJob
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|job3
operator|.
name|setJobName
argument_list|(
literal|"job3"
argument_list|)
expr_stmt|;
name|job1
operator|.
name|addDependingJob
argument_list|(
name|job2
argument_list|)
expr_stmt|;
name|job2
operator|.
name|addDependingJob
argument_list|(
name|job3
argument_list|)
expr_stmt|;
name|job3
operator|.
name|addDependingJob
argument_list|(
name|job1
argument_list|)
expr_stmt|;
name|JobControl
name|jobControl
init|=
operator|new
name|JobControl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|jobControl
operator|.
name|addJob
argument_list|(
name|job1
argument_list|)
expr_stmt|;
name|jobControl
operator|.
name|addJob
argument_list|(
name|job2
argument_list|)
expr_stmt|;
name|jobControl
operator|.
name|addJob
argument_list|(
name|job3
argument_list|)
expr_stmt|;
name|jobControl
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// assert that all jobs are failed due to cyclic dependency
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|failedJobs
init|=
name|jobControl
operator|.
name|getFailedJobList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|failedJobs
operator|.
name|contains
argument_list|(
name|job1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failedJobs
operator|.
name|contains
argument_list|(
name|job2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failedJobs
operator|.
name|contains
argument_list|(
name|job3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

