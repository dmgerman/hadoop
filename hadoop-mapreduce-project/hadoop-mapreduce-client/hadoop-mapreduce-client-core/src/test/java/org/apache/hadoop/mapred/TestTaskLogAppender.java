begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTaskLogAppender
specifier|public
class|class
name|TestTaskLogAppender
block|{
comment|/**  * test TaskLogAppender   */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTaskLogAppender ()
specifier|public
name|void
name|testTaskLogAppender
parameter_list|()
block|{
name|TaskLogAppender
name|appender
init|=
operator|new
name|TaskLogAppender
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TaskLogAppender
operator|.
name|TASKID_PROPERTY
argument_list|,
literal|"attempt_01_02_m03_04_001"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TaskLogAppender
operator|.
name|LOGSIZE_PROPERTY
argument_list|,
literal|"1003"
argument_list|)
expr_stmt|;
name|appender
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|appender
operator|.
name|getTaskId
argument_list|()
argument_list|,
literal|"attempt_01_02_m03_04_001"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appender
operator|.
name|getTotalLogFileSize
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appender
operator|.
name|getIsCleanup
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test writer
name|Writer
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|appender
operator|.
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Layout
name|layout
init|=
operator|new
name|PatternLayout
argument_list|(
literal|"%-5p [%t]: %m%n"
argument_list|)
decl_stmt|;
name|appender
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|Category
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LoggingEvent
name|event
init|=
operator|new
name|LoggingEvent
argument_list|(
literal|"fqnOfCategoryClass"
argument_list|,
name|logger
argument_list|,
name|Priority
operator|.
name|INFO
argument_list|,
literal|"message"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
decl_stmt|;
name|appender
operator|.
name|append
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|appender
operator|.
name|flush
argument_list|()
expr_stmt|;
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// test cleanup should not changed
name|appender
operator|=
operator|new
name|TaskLogAppender
argument_list|()
expr_stmt|;
name|appender
operator|.
name|setIsCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|appender
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|appender
operator|.
name|getIsCleanup
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

