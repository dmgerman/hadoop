begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|annotation
operator|.
name|Checkpointable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_class
DECL|class|TestPreemptableFileOutputCommitter
specifier|public
class|class
name|TestPreemptableFileOutputCommitter
block|{
annotation|@
name|Test
DECL|method|testPartialOutputCleanup ()
specifier|public
name|void
name|testPartialOutputCleanup
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|tid0
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1363718006656"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/hadoop/out"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://user/hadoop/out"
argument_list|)
decl_stmt|;
name|Path
name|p0
init|=
operator|new
name|Path
argument_list|(
name|a
argument_list|,
literal|"_temporary/1/attempt_1363718006656_0001_r_000014_0"
argument_list|)
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|a
argument_list|,
literal|"_temporary/1/attempt_1363718006656_0001_r_000014_1"
argument_list|)
decl_stmt|;
name|Path
name|p2
init|=
operator|new
name|Path
argument_list|(
name|a
argument_list|,
literal|"_temporary/1/attempt_1363718006656_0001_r_000013_0"
argument_list|)
decl_stmt|;
comment|// (p3 does not exist)
name|Path
name|p3
init|=
operator|new
name|Path
argument_list|(
name|a
argument_list|,
literal|"_temporary/1/attempt_1363718006656_0001_r_000014_2"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fsa
init|=
operator|new
name|FileStatus
index|[
literal|3
index|]
decl_stmt|;
name|fsa
index|[
literal|0
index|]
operator|=
operator|new
name|FileStatus
argument_list|()
expr_stmt|;
name|fsa
index|[
literal|0
index|]
operator|.
name|setPath
argument_list|(
name|p0
argument_list|)
expr_stmt|;
name|fsa
index|[
literal|1
index|]
operator|=
operator|new
name|FileStatus
argument_list|()
expr_stmt|;
name|fsa
index|[
literal|1
index|]
operator|.
name|setPath
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|fsa
index|[
literal|2
index|]
operator|=
operator|new
name|FileStatus
argument_list|()
expr_stmt|;
name|fsa
index|[
literal|2
index|]
operator|.
name|setPath
argument_list|(
name|p2
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|p0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|p1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|p2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|p3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p1
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|p
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|eq
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|context
init|=
name|mock
argument_list|(
name|TaskAttemptContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tid0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PartialFileOutputCommitter
name|foc
init|=
operator|new
name|TestPFOC
argument_list|(
name|p
argument_list|,
name|context
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|foc
operator|.
name|cleanUpPartialOutputForTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p1
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p3
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|p2
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Checkpointable
DECL|class|TestPFOC
specifier|static
class|class
name|TestPFOC
extends|extends
name|PartialFileOutputCommitter
block|{
DECL|field|fs
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|method|TestPFOC (Path outputPath, TaskAttemptContext ctxt, FileSystem fs)
name|TestPFOC
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|ctxt
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|ctxt
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fsFor (Path p, Configuration conf)
name|FileSystem
name|fsFor
parameter_list|(
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|fs
return|;
block|}
block|}
block|}
end_class

end_unit

