begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DataDrivenDBInputFormat
operator|.
name|DataDrivenDBInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Splitters. Splitters should build parts of sql sentences for split result.   */
end_comment

begin_class
DECL|class|TestSplitters
specifier|public
class|class
name|TestSplitters
block|{
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|configuration
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testBooleanSplitter ()
specifier|public
name|void
name|testBooleanSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanSplitter
name|splitter
init|=
operator|new
name|BooleanSplitter
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column = FALSE column = FALSE"
block|,
literal|"column IS NULL column IS NULL"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
expr_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column = FALSE column = FALSE"
block|,
literal|".*column = TRUE"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testFloatSplitter ()
specifier|public
name|void
name|testFloatSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|FloatSplitter
name|splitter
init|=
operator|new
name|FloatSplitter
argument_list|()
decl_stmt|;
name|ResultSet
name|results
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|results
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*column IS NULL"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|results
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|results
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|results
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|results
operator|.
name|getDouble
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|7.0
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|results
argument_list|,
literal|"column1"
argument_list|)
expr_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column1>= 5.0 column1< 6.0"
block|,
literal|"column1>= 6.0 column1<= 7.0"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testBigDecimalSplitter ()
specifier|public
name|void
name|testBigDecimalSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|BigDecimalSplitter
name|splitter
init|=
operator|new
name|BigDecimalSplitter
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*column IS NULL"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getBigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column1"
argument_list|)
expr_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column1>= 10 column1< 11"
block|,
literal|"column1>= 11 column1<= 12"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testIntegerSplitter ()
specifier|public
name|void
name|testIntegerSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|IntegerSplitter
name|splitter
init|=
operator|new
name|IntegerSplitter
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*column IS NULL"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|8L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|19L
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column1"
argument_list|)
expr_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column1>= 8 column1< 13"
block|,
literal|"column1>= 13 column1< 18"
block|,
literal|"column1>= 18 column1<= 19"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testTextSplitter ()
specifier|public
name|void
name|testTextSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column IS NULL column IS NULL"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitter
operator|.
name|split
argument_list|(
name|configuration
argument_list|,
name|result
argument_list|,
literal|"column1"
argument_list|)
expr_stmt|;
name|assertSplits
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"column1>= 'result1' column1< 'result1.'"
block|,
literal|"column1>= 'result1' column1<= 'result2'"
block|}
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSplits (String[] expectedSplitRE, List<InputSplit> splits)
specifier|private
name|void
name|assertSplits
parameter_list|(
name|String
index|[]
name|expectedSplitRE
parameter_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expectedSplitRE
operator|.
name|length
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSplitRE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DataDrivenDBInputSplit
name|split
init|=
operator|(
name|DataDrivenDBInputSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|actualExpr
init|=
name|split
operator|.
name|getLowerClause
argument_list|()
operator|+
literal|" "
operator|+
name|split
operator|.
name|getUpperClause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Split #"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" expression is wrong."
operator|+
literal|" Expected "
operator|+
name|expectedSplitRE
index|[
name|i
index|]
operator|+
literal|" Actual "
operator|+
name|actualExpr
argument_list|,
name|Pattern
operator|.
name|matches
argument_list|(
name|expectedSplitRE
index|[
name|i
index|]
argument_list|,
name|actualExpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

