begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|MockFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestTokenCache
specifier|public
class|class
name|TestTokenCache
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|renewer
specifier|private
specifier|static
name|String
name|renewer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"mapred/host@REALM"
argument_list|)
expr_stmt|;
name|renewer
operator|=
name|Master
operator|.
name|getMasterPrincipal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObtainTokens ()
specifier|public
name|void
name|testObtainTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|addDelegationTokens
argument_list|(
name|eq
argument_list|(
name|renewer
argument_list|)
argument_list|,
name|eq
argument_list|(
name|credentials
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testBinaryCredentials ()
specifier|public
name|void
name|testBinaryCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"test/build/data"
argument_list|)
argument_list|)
decl_stmt|;
comment|// ick, but need fq path minus file:/
name|String
name|binaryTokenFile
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"tokenFile"
argument_list|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
literal|"service1"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
literal|"service2"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs3
init|=
name|createFileSystemForServiceName
argument_list|(
literal|"service3"
argument_list|)
decl_stmt|;
comment|// get the tokens for fs1& fs2 and write out to binary creds file
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token1
init|=
name|fs1
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token2
init|=
name|fs2
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|token2
operator|.
name|getService
argument_list|()
argument_list|,
name|token2
argument_list|)
expr_stmt|;
comment|// wait to set, else the obtain tokens call above will fail with FNF
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CREDENTIALS_BINARY
argument_list|,
name|binaryTokenFile
argument_list|)
expr_stmt|;
name|creds
operator|.
name|writeTokenStorageFile
argument_list|(
operator|new
name|Path
argument_list|(
name|binaryTokenFile
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// re-init creds and add a newer token for fs1
name|creds
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|newerToken1
init|=
name|fs1
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|newerToken1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|newerToken1
operator|.
name|getService
argument_list|()
argument_list|,
name|newerToken1
argument_list|)
expr_stmt|;
name|checkToken
argument_list|(
name|creds
argument_list|,
name|newerToken1
argument_list|)
expr_stmt|;
comment|// get token for fs1, see that fs2's token was loaded
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs1
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkToken
argument_list|(
name|creds
argument_list|,
name|newerToken1
argument_list|,
name|token2
argument_list|)
expr_stmt|;
comment|// get token for fs2, nothing should change since already present
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs2
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkToken
argument_list|(
name|creds
argument_list|,
name|newerToken1
argument_list|,
name|token2
argument_list|)
expr_stmt|;
comment|// get token for fs3, should only add token for fs3
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs3
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token3
init|=
name|creds
operator|.
name|getToken
argument_list|(
operator|new
name|Text
argument_list|(
name|fs3
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|token3
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkToken
argument_list|(
name|creds
argument_list|,
name|newerToken1
argument_list|,
name|token2
argument_list|,
name|token3
argument_list|)
expr_stmt|;
comment|// be paranoid, check one last time that nothing changes
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs1
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs2
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs3
argument_list|,
name|creds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkToken
argument_list|(
name|creds
argument_list|,
name|newerToken1
argument_list|,
name|token2
argument_list|,
name|token3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkToken (Credentials creds, Token<?> ... tokens)
specifier|private
name|void
name|checkToken
parameter_list|(
name|Credentials
name|creds
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
modifier|...
name|tokens
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|tokens
operator|.
name|length
argument_list|,
name|creds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|credsToken
init|=
name|creds
operator|.
name|getToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|credsToken
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|credsToken
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFileSystemForServiceName (final String service)
specifier|private
name|MockFileSystem
name|createFileSystemForServiceName
parameter_list|(
specifier|final
name|String
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|MockFileSystem
name|mockFs
init|=
operator|new
name|MockFileSystem
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|unique
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
comment|// use unique value so when we restore from token storage, we can
comment|// tell if it's really the same token
name|token
operator|.
name|setKind
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token"
operator|+
name|unique
operator|++
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
block|)
function|;
return|return
name|mockFs
return|;
block|}
end_class

begin_function
annotation|@
name|Test
DECL|method|testSingleTokenFetch ()
specifier|public
name|void
name|testSingleTokenFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"mapred/host@REALM"
argument_list|)
expr_stmt|;
name|String
name|renewer
init|=
name|Master
operator|.
name|getMasterPrincipal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|MockFileSystem
name|mockFs
init|=
operator|(
name|MockFileSystem
operator|)
name|fs
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"host:0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|URI
argument_list|(
literal|"mockfs://host:0"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|mockPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[]
block|{
name|mockPath
block|,
name|mockPath
block|}
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|addDelegationTokens
argument_list|(
literal|"me"
argument_list|,
name|credentials
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|credentials
argument_list|,
name|paths
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testCleanUpTokenReferral ()
specifier|public
name|void
name|testCleanUpTokenReferral
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CREDENTIALS_BINARY
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|cleanUpTokenReferral
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CREDENTIALS_BINARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

