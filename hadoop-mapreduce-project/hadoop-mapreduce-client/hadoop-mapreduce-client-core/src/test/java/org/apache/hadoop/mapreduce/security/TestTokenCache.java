begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Master
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestTokenCache
specifier|public
class|class
name|TestTokenCache
block|{
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testGetDelegationTokensNotImplemented ()
specifier|public
name|void
name|testGetDelegationTokensNotImplemented
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"mapred/host@REALM"
argument_list|)
expr_stmt|;
name|String
name|renewer
init|=
name|Master
operator|.
name|getMasterPrincipal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|setupSingleFsWithoutGetDelegationTokens
argument_list|()
decl_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|fs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManagedFileSystem ()
specifier|public
name|void
name|testManagedFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"mapred/host@REALM"
argument_list|)
expr_stmt|;
name|String
name|renewer
init|=
name|Master
operator|.
name|getMasterPrincipal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|singleFs
init|=
name|setupSingleFs
argument_list|()
decl_stmt|;
name|FileSystem
name|multiFs
init|=
name|setupMultiFs
argument_list|(
name|singleFs
argument_list|,
name|renewer
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|singleFs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|singleFs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|multiFs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodesInternal
argument_list|(
name|multiFs
argument_list|,
name|credentials
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|singleFs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|multiFs
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
comment|// A call to getDelegationToken would have generated an exception.
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setupSingleFsWithoutGetDelegationTokens ()
specifier|private
name|FileSystem
name|setupSingleFsWithoutGetDelegationTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"singlefs4"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|URI
argument_list|(
literal|"singlefs4:///"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|mockToken
init|=
operator|(
name|Token
argument_list|<
name|?
argument_list|>
operator|)
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockToken
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"singlefs4"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|mockToken
return|;
block|}
block|}
block|)
function|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationTokens
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mockFs
return|;
block|}
end_class

begin_function
DECL|method|setupSingleFs ()
specifier|private
name|FileSystem
name|setupSingleFs
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"singlefs1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|URI
argument_list|(
literal|"singlefs1:///"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|mockToken
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockToken
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"singlefs1"
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|mockToken
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationTokens
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"getDelegationTokens(renewer) should not be called"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationTokens
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
return|return
name|mockFs
return|;
block|}
end_function

begin_function
DECL|method|setupMultiFs (final FileSystem singleFs, final String renewer, final Credentials credentials)
specifier|private
name|FileSystem
name|setupMultiFs
parameter_list|(
specifier|final
name|FileSystem
name|singleFs
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|URI
argument_list|(
literal|"multifs:///"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationTokens
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"getDelegationTokens(renewer) should not be called"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|newTokens
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|credentials
operator|.
name|getToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"singlefs1"
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
name|newTokens
operator|.
name|addAll
argument_list|(
name|singleFs
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTokens
operator|.
name|add
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"singlefs1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Token
argument_list|<
name|?
argument_list|>
name|mockToken2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockToken2
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"singlefs2"
argument_list|)
argument_list|)
expr_stmt|;
name|newTokens
operator|.
name|add
argument_list|(
name|mockToken2
argument_list|)
expr_stmt|;
return|return
name|newTokens
return|;
block|}
block|}
block|)
function|;
end_function

begin_return
return|return
name|mockFs
return|;
end_return

unit|} }
end_unit

