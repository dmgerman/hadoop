begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapTaskCompletionEventsUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_class
DECL|class|TestEventFetcher
specifier|public
class|class
name|TestEventFetcher
block|{
annotation|@
name|Test
DECL|method|testConsecutiveFetch ()
specifier|public
name|void
name|testConsecutiveFetch
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|MAX_EVENTS_TO_FETCH
init|=
literal|100
decl_stmt|;
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskUmbilicalProtocol
name|umbilical
init|=
name|mock
argument_list|(
name|TaskUmbilicalProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|umbilical
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMockedCompletionEventsUpdate
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|umbilical
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMockedCompletionEventsUpdate
argument_list|(
literal|0
argument_list|,
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|umbilical
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMockedCompletionEventsUpdate
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|,
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|umbilical
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
operator|*
literal|2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMockedCompletionEventsUpdate
argument_list|(
name|MAX_EVENTS_TO_FETCH
operator|*
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ShuffleScheduler
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scheduler
init|=
name|mock
argument_list|(
name|ShuffleScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionReporter
name|reporter
init|=
name|mock
argument_list|(
name|ExceptionReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventFetcherForTest
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ef
init|=
operator|new
name|EventFetcherForTest
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|tid
argument_list|,
name|umbilical
argument_list|,
name|scheduler
argument_list|,
name|reporter
argument_list|,
name|MAX_EVENTS_TO_FETCH
argument_list|)
decl_stmt|;
name|ef
operator|.
name|getMapCompletionEvents
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|reporter
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|reportException
argument_list|(
name|any
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|umbilical
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|umbilical
argument_list|)
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|umbilical
argument_list|)
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|umbilical
argument_list|)
operator|.
name|getMapCompletionEvents
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
operator|*
literal|2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|MAX_EVENTS_TO_FETCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|,
name|times
argument_list|(
name|MAX_EVENTS_TO_FETCH
operator|*
literal|2
operator|+
literal|3
argument_list|)
argument_list|)
operator|.
name|addKnownMapOutput
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockedCompletionEventsUpdate ( int startIdx, int numEvents)
specifier|private
name|MapTaskCompletionEventsUpdate
name|getMockedCompletionEventsUpdate
parameter_list|(
name|int
name|startIdx
parameter_list|,
name|int
name|numEvents
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TaskCompletionEvent
argument_list|>
name|tceList
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskCompletionEvent
argument_list|>
argument_list|(
name|numEvents
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEvents
condition|;
operator|++
name|i
control|)
block|{
name|int
name|eventIdx
init|=
name|startIdx
operator|+
name|i
decl_stmt|;
name|TaskCompletionEvent
name|tce
init|=
operator|new
name|TaskCompletionEvent
argument_list|(
name|eventIdx
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|eventIdx
argument_list|,
literal|0
argument_list|)
argument_list|,
name|eventIdx
argument_list|,
literal|true
argument_list|,
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|SUCCEEDED
argument_list|,
literal|"http://somehost:8888"
argument_list|)
decl_stmt|;
name|tceList
operator|.
name|add
argument_list|(
name|tce
argument_list|)
expr_stmt|;
block|}
name|TaskCompletionEvent
index|[]
name|events
init|=
block|{}
decl_stmt|;
return|return
operator|new
name|MapTaskCompletionEventsUpdate
argument_list|(
name|tceList
operator|.
name|toArray
argument_list|(
name|events
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|EventFetcherForTest
specifier|private
specifier|static
class|class
name|EventFetcherForTest
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|EventFetcher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|EventFetcherForTest (TaskAttemptID reduce, TaskUmbilicalProtocol umbilical, ShuffleScheduler<K,V> scheduler, ExceptionReporter reporter, int maxEventsToFetch)
specifier|public
name|EventFetcherForTest
parameter_list|(
name|TaskAttemptID
name|reduce
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|ShuffleScheduler
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|scheduler
parameter_list|,
name|ExceptionReporter
name|reporter
parameter_list|,
name|int
name|maxEventsToFetch
parameter_list|)
block|{
name|super
argument_list|(
name|reduce
argument_list|,
name|umbilical
argument_list|,
name|scheduler
argument_list|,
name|reporter
argument_list|,
name|maxEventsToFetch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMapCompletionEvents ()
specifier|public
name|int
name|getMapCompletionEvents
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getMapCompletionEvents
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

