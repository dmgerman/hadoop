begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLineRecordReader
specifier|public
class|class
name|TestLineRecordReader
block|{
DECL|method|testSplitRecords (String testFileName, long firstSplitLength)
specifier|private
name|void
name|testSplitRecords
parameter_list|(
name|String
name|testFileName
parameter_list|,
name|long
name|firstSplitLength
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|testFileUrl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot find "
operator|+
name|testFileName
argument_list|,
name|testFileUrl
argument_list|)
expr_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|testFileUrl
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|testFileSize
init|=
name|testFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|Path
name|testFilePath
init|=
operator|new
name|Path
argument_list|(
name|testFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|LineRecordReader
operator|.
name|MAX_LINE_LENGTH
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected test data at "
operator|+
name|testFile
argument_list|,
name|testFileSize
operator|>
name|firstSplitLength
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|context
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
operator|new
name|TaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
comment|// read the data without splitting to count the records
name|FileSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
name|testFilePath
argument_list|,
literal|0
argument_list|,
name|testFileSize
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|LineRecordReader
name|reader
init|=
operator|new
name|LineRecordReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|int
name|numRecordsNoSplits
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
operator|++
name|numRecordsNoSplits
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// count the records in the first split
name|split
operator|=
operator|new
name|FileSplit
argument_list|(
name|testFilePath
argument_list|,
literal|0
argument_list|,
name|firstSplitLength
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|LineRecordReader
argument_list|()
expr_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|int
name|numRecordsFirstSplit
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
operator|++
name|numRecordsFirstSplit
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// count the records in the second split
name|split
operator|=
operator|new
name|FileSplit
argument_list|(
name|testFilePath
argument_list|,
name|firstSplitLength
argument_list|,
name|testFileSize
operator|-
name|firstSplitLength
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|LineRecordReader
argument_list|()
expr_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|int
name|numRecordsRemainingSplits
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
operator|++
name|numRecordsRemainingSplits
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of records in bzip2 compressed split"
argument_list|,
name|numRecordsNoSplits
argument_list|,
name|numRecordsFirstSplit
operator|+
name|numRecordsRemainingSplits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBzip2SplitEndsAtCR ()
specifier|public
name|void
name|testBzip2SplitEndsAtCR
parameter_list|()
throws|throws
name|IOException
block|{
comment|// the test data contains a carriage-return at the end of the first
comment|// split which ends at compressed offset 136498 and the next
comment|// character is not a linefeed
name|testSplitRecords
argument_list|(
literal|"blockEndingInCR.txt.bz2"
argument_list|,
literal|136498
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBzip2SplitEndsAtCRThenLF ()
specifier|public
name|void
name|testBzip2SplitEndsAtCRThenLF
parameter_list|()
throws|throws
name|IOException
block|{
comment|// the test data contains a carriage-return at the end of the first
comment|// split which ends at compressed offset 136498 and the next
comment|// character is a linefeed
name|testSplitRecords
argument_list|(
literal|"blockEndingInCRThenLF.txt.bz2"
argument_list|,
literal|136498
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

