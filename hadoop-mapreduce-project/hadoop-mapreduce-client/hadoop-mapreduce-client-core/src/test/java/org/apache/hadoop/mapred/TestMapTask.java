begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapTask
operator|.
name|MapOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|TaskReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|TestMapTask
specifier|public
class|class
name|TestMapTask
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|File
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
argument_list|,
name|TestMapTask
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
expr_stmt|;
block|}
comment|// Verify output files for shuffle have group read permission even when
comment|// the configured umask normally would prevent it.
annotation|@
name|Test
DECL|method|testShufflePermissions ()
specifier|public
name|void
name|testShufflePermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|TEST_ROOT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|MapOutputFile
name|mof
init|=
operator|new
name|MROutputFiles
argument_list|()
decl_stmt|;
name|mof
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|attemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|MapTask
name|mockTask
init|=
name|mock
argument_list|(
name|MapTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mof
argument_list|)
operator|.
name|when
argument_list|(
name|mockTask
argument_list|)
operator|.
name|getMapOutputFile
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|attemptId
argument_list|)
operator|.
name|when
argument_list|(
name|mockTask
argument_list|)
operator|.
name|getTaskID
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Progress
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockTask
argument_list|)
operator|.
name|getSortPhase
argument_list|()
expr_stmt|;
name|TaskReporter
name|mockReporter
init|=
name|mock
argument_list|(
name|TaskReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|Counter
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockReporter
argument_list|)
operator|.
name|getCounter
argument_list|(
name|any
argument_list|(
name|TaskCounter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MapOutputCollector
operator|.
name|Context
name|ctx
init|=
operator|new
name|MapOutputCollector
operator|.
name|Context
argument_list|(
name|mockTask
argument_list|,
name|conf
argument_list|,
name|mockReporter
argument_list|)
decl_stmt|;
name|MapOutputBuffer
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mob
init|=
operator|new
name|MapOutputBuffer
argument_list|<>
argument_list|()
decl_stmt|;
name|mob
operator|.
name|init
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|mob
operator|.
name|flush
argument_list|()
expr_stmt|;
name|mob
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|outputFile
init|=
name|mof
operator|.
name|getOutputFile
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FsPermission
name|perms
init|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|outputFile
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect output file perms"
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|,
name|perms
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|indexFile
init|=
name|mof
operator|.
name|getOutputIndexFile
argument_list|()
decl_stmt|;
name|perms
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|indexFile
argument_list|)
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect index file perms"
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|,
name|perms
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

