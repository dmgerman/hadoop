begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|CombineOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|Shuffle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapOutputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ReduceTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleConsumerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RawKeyValueIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_comment
comment|/**   * A JUnit for testing availability and accessibility of shuffle related API.   * It is needed for maintaining comptability with external sub-classes of   * ShuffleConsumerPlugin and AuxiliaryService(s) like ShuffleHandler.   *   * The importance of this test is for preserving API with 3rd party plugins.   */
end_comment

begin_class
DECL|class|TestShufflePlugin
specifier|public
class|class
name|TestShufflePlugin
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|class|TestShuffleConsumerPlugin
specifier|static
class|class
name|TestShuffleConsumerPlugin
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ShuffleConsumerPlugin
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|init (ShuffleConsumerPlugin.Context<K, V> context)
specifier|public
name|void
name|init
parameter_list|(
name|ShuffleConsumerPlugin
operator|.
name|Context
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|context
parameter_list|)
block|{
comment|// just verify that Context has kept its public interface
name|context
operator|.
name|getReduceId
argument_list|()
expr_stmt|;
name|context
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|context
operator|.
name|getLocalFS
argument_list|()
expr_stmt|;
name|context
operator|.
name|getUmbilical
argument_list|()
expr_stmt|;
name|context
operator|.
name|getLocalDirAllocator
argument_list|()
expr_stmt|;
name|context
operator|.
name|getReporter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getCodec
argument_list|()
expr_stmt|;
name|context
operator|.
name|getCombinerClass
argument_list|()
expr_stmt|;
name|context
operator|.
name|getCombineCollector
argument_list|()
expr_stmt|;
name|context
operator|.
name|getSpilledRecordsCounter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getReduceCombineInputCounter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getShuffledMapsCounter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getReduceShuffleBytes
argument_list|()
expr_stmt|;
name|context
operator|.
name|getFailedShuffleCounter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getMergedMapOutputsCounter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|context
operator|.
name|getCopyPhase
argument_list|()
expr_stmt|;
name|context
operator|.
name|getMergePhase
argument_list|()
expr_stmt|;
name|context
operator|.
name|getReduceTask
argument_list|()
expr_stmt|;
name|context
operator|.
name|getMapOutputFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|RawKeyValueIterator
name|run
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
comment|/**    * A testing method instructing core hadoop to load an external ShuffleConsumerPlugin    * as if it came from a 3rd party.    */
DECL|method|testPluginAbility ()
specifier|public
name|void
name|testPluginAbility
parameter_list|()
block|{
try|try
block|{
comment|// create JobConf with mapreduce.job.shuffle.consumer.plugin=TestShuffleConsumerPlugin
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|MRConfig
operator|.
name|SHUFFLE_CONSUMER_PLUGIN
argument_list|,
name|TestShufflePlugin
operator|.
name|TestShuffleConsumerPlugin
operator|.
name|class
argument_list|,
name|ShuffleConsumerPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|ShuffleConsumerPlugin
name|shuffleConsumerPlugin
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ShuffleConsumerPlugin
argument_list|>
name|clazz
init|=
name|jobConf
operator|.
name|getClass
argument_list|(
name|MRConfig
operator|.
name|SHUFFLE_CONSUMER_PLUGIN
argument_list|,
name|Shuffle
operator|.
name|class
argument_list|,
name|ShuffleConsumerPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to get "
operator|+
name|MRConfig
operator|.
name|SHUFFLE_CONSUMER_PLUGIN
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
comment|// load 3rd party plugin through core's factory method
name|shuffleConsumerPlugin
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to load "
operator|+
name|MRConfig
operator|.
name|SHUFFLE_CONSUMER_PLUGIN
argument_list|,
name|shuffleConsumerPlugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Threw exception:"
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|/**    * A testing method verifying availability and accessibility of API that is needed    * for sub-classes of ShuffleConsumerPlugin    */
DECL|method|testConsumerApi ()
specifier|public
name|void
name|testConsumerApi
parameter_list|()
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|ShuffleConsumerPlugin
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|shuffleConsumerPlugin
init|=
operator|new
name|TestShuffleConsumerPlugin
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
comment|//mock creation
name|ReduceTask
name|mockReduceTask
init|=
name|mock
argument_list|(
name|ReduceTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskUmbilicalProtocol
name|mockUmbilical
init|=
name|mock
argument_list|(
name|TaskUmbilicalProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|Reporter
name|mockReporter
init|=
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFileSystem
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
argument_list|>
name|combinerClass
init|=
name|jobConf
operator|.
name|getCombinerClass
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// needed for mock with generic
name|CombineOutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mockCombineOutputCollector
init|=
operator|(
name|CombineOutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mock
argument_list|(
name|CombineOutputCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|mockTaskAttemptID
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirAllocator
name|mockLocalDirAllocator
init|=
name|mock
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompressionCodec
name|mockCompressionCodec
init|=
name|mock
argument_list|(
name|CompressionCodec
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counter
name|mockCounter
init|=
name|mock
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskStatus
name|mockTaskStatus
init|=
name|mock
argument_list|(
name|TaskStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Progress
name|mockProgress
init|=
name|mock
argument_list|(
name|Progress
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapOutputFile
name|mockMapOutputFile
init|=
name|mock
argument_list|(
name|MapOutputFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|dirs
init|=
name|jobConf
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
comment|// verify that these APIs are available through super class handler
name|ShuffleConsumerPlugin
operator|.
name|Context
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|context
init|=
operator|new
name|ShuffleConsumerPlugin
operator|.
name|Context
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|mockTaskAttemptID
argument_list|,
name|jobConf
argument_list|,
name|mockFileSystem
argument_list|,
name|mockUmbilical
argument_list|,
name|mockLocalDirAllocator
argument_list|,
name|mockReporter
argument_list|,
name|mockCompressionCodec
argument_list|,
name|combinerClass
argument_list|,
name|mockCombineOutputCollector
argument_list|,
name|mockCounter
argument_list|,
name|mockCounter
argument_list|,
name|mockCounter
argument_list|,
name|mockCounter
argument_list|,
name|mockCounter
argument_list|,
name|mockCounter
argument_list|,
name|mockTaskStatus
argument_list|,
name|mockProgress
argument_list|,
name|mockProgress
argument_list|,
name|mockTask
argument_list|,
name|mockMapOutputFile
argument_list|)
decl_stmt|;
name|shuffleConsumerPlugin
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|shuffleConsumerPlugin
operator|.
name|run
argument_list|()
expr_stmt|;
name|shuffleConsumerPlugin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Threw exception:"
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// verify that these APIs are available for 3rd party plugins
name|mockReduceTask
operator|.
name|getTaskID
argument_list|()
expr_stmt|;
name|mockReduceTask
operator|.
name|getJobID
argument_list|()
expr_stmt|;
name|mockReduceTask
operator|.
name|getNumMaps
argument_list|()
expr_stmt|;
name|mockReduceTask
operator|.
name|getPartition
argument_list|()
expr_stmt|;
name|mockReporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * A testing method verifying availability and accessibility of API needed for    * AuxiliaryService(s) which are "Shuffle-Providers" (ShuffleHandler and 3rd party plugins)    */
DECL|method|testProviderApi ()
specifier|public
name|void
name|testProviderApi
parameter_list|()
block|{
name|ApplicationId
name|mockApplicationId
init|=
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockApplicationId
operator|.
name|setClusterTimestamp
argument_list|(
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|mockApplicationId
operator|.
name|setId
argument_list|(
name|mock
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|LocalDirAllocator
name|mockLocalDirAllocator
init|=
name|mock
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|mockJobConf
init|=
name|mock
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|mockLocalDirAllocator
operator|.
name|getLocalPathToRead
argument_list|(
literal|""
argument_list|,
name|mockJobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Threw exception:"
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

