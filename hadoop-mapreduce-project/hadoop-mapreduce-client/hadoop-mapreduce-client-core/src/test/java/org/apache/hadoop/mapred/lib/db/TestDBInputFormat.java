begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|NullDBWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
operator|.
name|DBConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DriverForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDBInputFormat
specifier|public
class|class
name|TestDBInputFormat
block|{
comment|/**    * test DBInputFormat class. Class should split result for chunks    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDBInputFormat ()
specifier|public
name|void
name|testDBInputFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|configuration
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|setupDriver
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|DBInputFormat
argument_list|<
name|NullDBWritable
argument_list|>
name|format
init|=
operator|new
name|DBInputFormat
argument_list|<
name|NullDBWritable
argument_list|>
argument_list|()
decl_stmt|;
name|format
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|format
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|DBInputFormat
operator|.
name|DBInputSplit
name|splitter
init|=
operator|new
name|DBInputFormat
operator|.
name|DBInputSplit
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Reporter
name|reporter
init|=
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|NullDBWritable
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|splitter
argument_list|,
name|configuration
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|lSplits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|configuration
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|lSplits
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lSplits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test reader .Some simple tests
name|assertEquals
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|reader
operator|.
name|createKey
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * test configuration for db. should works DBConfiguration.* parameters.     */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSetInput ()
specifier|public
name|void
name|testSetInput
parameter_list|()
block|{
name|JobConf
name|configuration
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"field1"
block|,
literal|"field2"
block|}
decl_stmt|;
name|DBInputFormat
operator|.
name|setInput
argument_list|(
name|configuration
argument_list|,
name|NullDBWritable
operator|.
name|class
argument_list|,
literal|"table"
argument_list|,
literal|"conditions"
argument_list|,
literal|"orderBy"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.hadoop.mapred.lib.db.DBInputFormat$NullDBWritable"
argument_list|,
name|configuration
operator|.
name|getClass
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CLASS_PROPERTY
argument_list|,
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"table"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_TABLE_NAME_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|configuration
operator|.
name|getStrings
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_FIELD_NAMES_PROPERTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field1"
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field2"
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"conditions"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CONDITIONS_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"orderBy"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_ORDER_BY_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|DBInputFormat
operator|.
name|setInput
argument_list|(
name|configuration
argument_list|,
name|NullDBWritable
operator|.
name|class
argument_list|,
literal|"query"
argument_list|,
literal|"countQuery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"query"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_QUERY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"countQuery"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_COUNT_QUERY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|jConfiguration
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|DBConfiguration
operator|.
name|configureDB
argument_list|(
name|jConfiguration
argument_list|,
literal|"driverClass"
argument_list|,
literal|"dbUrl"
argument_list|,
literal|"user"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"driverClass"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|DRIVER_CLASS_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dbUrl"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|URL_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|USERNAME_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|PASSWORD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|jConfiguration
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|DBConfiguration
operator|.
name|configureDB
argument_list|(
name|jConfiguration
argument_list|,
literal|"driverClass"
argument_list|,
literal|"dbUrl"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"driverClass"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|DRIVER_CLASS_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dbUrl"
argument_list|,
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|URL_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|USERNAME_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jConfiguration
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|PASSWORD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * test DBRecordReader. This reader should creates keys, values, know about position..     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDBRecordReader ()
specifier|public
name|void
name|testDBRecordReader
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
name|mock
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBConfiguration
name|dbConfig
init|=
name|mock
argument_list|(
name|DBConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|fields
init|=
block|{
literal|"field1"
block|,
literal|"filed2"
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|DBRecordReader
name|reader
init|=
operator|new
name|DBInputFormat
argument_list|<
name|NullDBWritable
argument_list|>
argument_list|()
operator|.
operator|new
name|DBRecordReader
argument_list|(
operator|new
name|DBInputSplit
argument_list|()
argument_list|,
name|NullDBWritable
operator|.
name|class
argument_list|,
name|job
argument_list|,
name|DriverForTest
operator|.
name|getConnection
argument_list|()
argument_list|,
name|dbConfig
argument_list|,
literal|"condition"
argument_list|,
name|fields
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
name|LongWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DBWritable
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.hadoop.mapred.lib.db.DBInputFormat$NullDBWritable"
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDriver (JobConf configuration)
specifier|private
name|void
name|setupDriver
parameter_list|(
name|JobConf
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|URL_PROPERTY
argument_list|,
literal|"testUrl"
argument_list|)
expr_stmt|;
name|DriverManager
operator|.
name|registerDriver
argument_list|(
operator|new
name|DriverForTest
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|DRIVER_CLASS_PROPERTY
argument_list|,
name|DriverForTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

