begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestFileInputFormat
specifier|public
class|class
name|TestFileInputFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testTmpDir
specifier|private
specifier|static
name|String
name|testTmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|testTmpDir
argument_list|,
literal|"TestFIF"
argument_list|)
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|numThreads
specifier|private
name|int
name|numThreads
decl_stmt|;
DECL|method|TestFileInputFormat (int numThreads)
specifier|public
name|TestFileInputFormat
parameter_list|(
name|int
name|numThreads
parameter_list|)
block|{
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with numThreads: "
operator|+
name|numThreads
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|1
block|}
block|,
block|{
literal|5
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Test Dir: "
operator|+
name|TEST_ROOT_DIR
argument_list|)
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumInputFilesRecursively ()
specifier|public
name|void
name|testNumInputFilesRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR_RECURSIVE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fileInputFormat
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fileInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input splits are not correct"
argument_list|,
literal|3
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifySplits
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"test:/a1/a2/file2"
argument_list|,
literal|"test:/a1/a2/file3"
argument_list|,
literal|"test:/a1/file1"
argument_list|)
argument_list|,
name|splits
argument_list|)
expr_stmt|;
comment|// Using the deprecated configuration
name|conf
operator|=
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|job
operator|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splits
operator|=
name|fileInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|verifySplits
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"test:/a1/a2/file2"
argument_list|,
literal|"test:/a1/a2/file3"
argument_list|,
literal|"test:/a1/file1"
argument_list|)
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumInputFilesWithoutRecursively ()
specifier|public
name|void
name|testNumInputFilesWithoutRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fileInputFormat
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fileInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input splits are not correct"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifySplits
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"test:/a1/a2"
argument_list|,
literal|"test:/a1/file1"
argument_list|)
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListLocatedStatus ()
specifier|public
name|void
name|testListLocatedStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.test.impl.disable.cache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"test:///a1/a2"
argument_list|)
expr_stmt|;
name|MockFileSystem
name|mockFs
init|=
operator|(
name|MockFileSystem
operator|)
operator|new
name|Path
argument_list|(
literal|"test:///"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"listLocatedStatus already called"
argument_list|,
literal|0
argument_list|,
name|mockFs
operator|.
name|numListLocatedStatusCalls
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fileInputFormat
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fileInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input splits are not correct"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"listLocatedStatuss calls"
argument_list|,
literal|1
argument_list|,
name|mockFs
operator|.
name|numListLocatedStatusCalls
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusSimple ()
specifier|public
name|void
name|testListStatusSimple
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|configureTestSimple
argument_list|(
name|conf
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fif
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
name|fif
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|verifyFileStatuses
argument_list|(
name|expectedPaths
argument_list|,
name|statuses
argument_list|,
name|localFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusNestedRecursive ()
specifier|public
name|void
name|testListStatusNestedRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|configureTestNestedRecursive
argument_list|(
name|conf
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fif
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
name|fif
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|verifyFileStatuses
argument_list|(
name|expectedPaths
argument_list|,
name|statuses
argument_list|,
name|localFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusNestedNonRecursive ()
specifier|public
name|void
name|testListStatusNestedNonRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|configureTestNestedNonRecursive
argument_list|(
name|conf
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fif
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
name|fif
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|verifyFileStatuses
argument_list|(
name|expectedPaths
argument_list|,
name|statuses
argument_list|,
name|localFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusErrorOnNonExistantDir ()
specifier|public
name|void
name|testListStatusErrorOnNonExistantDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileInputFormat
operator|.
name|LIST_STATUS_NUM_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|configureTestErrorOnNonExistantDir
argument_list|(
name|conf
argument_list|,
name|localFs
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fif
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
try|try
block|{
name|fif
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an IOException for a missing Input path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Path
name|expectedExceptionPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input2"
argument_list|)
decl_stmt|;
name|expectedExceptionPath
operator|=
name|localFs
operator|.
name|makeQualified
argument_list|(
name|expectedExceptionPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidInputException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input path does not exist: "
operator|+
name|expectedExceptionPath
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureTestSimple (Configuration conf, FileSystem localFs)
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|configureTestSimple
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input2"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|+
literal|","
operator|+
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|Path
name|in1File1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|in1File2
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|in1File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|in1File2
argument_list|)
expr_stmt|;
name|Path
name|in2File1
init|=
operator|new
name|Path
argument_list|(
name|base2
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|in2File2
init|=
operator|new
name|Path
argument_list|(
name|base2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|in2File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|in2File2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|in1File1
argument_list|,
name|in1File2
argument_list|,
name|in2File1
argument_list|,
name|in2File2
argument_list|)
decl_stmt|;
return|return
name|expectedPaths
return|;
block|}
DECL|method|configureTestNestedRecursive (Configuration conf, FileSystem localFs)
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|configureTestNestedRecursive
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR_RECURSIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|Path
name|inDir1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|inDir2
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|Path
name|inFile1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir1File1
init|=
operator|new
name|Path
argument_list|(
name|inDir1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir1File2
init|=
operator|new
name|Path
argument_list|(
name|inDir1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|dir2File1
init|=
operator|new
name|Path
argument_list|(
name|inDir2
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir2File2
init|=
operator|new
name|Path
argument_list|(
name|inDir2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|inDir1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|inDir2
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|inFile1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir1File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir1File2
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir2File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir2File2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|inFile1
argument_list|,
name|dir1File1
argument_list|,
name|dir1File2
argument_list|,
name|dir2File1
argument_list|,
name|dir2File2
argument_list|)
decl_stmt|;
return|return
name|expectedPaths
return|;
block|}
DECL|method|configureTestNestedNonRecursive (Configuration conf, FileSystem localFs)
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|configureTestNestedNonRecursive
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR_RECURSIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|Path
name|inDir1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|inDir2
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|Path
name|inFile1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir1File1
init|=
operator|new
name|Path
argument_list|(
name|inDir1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir1File2
init|=
operator|new
name|Path
argument_list|(
name|inDir1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|dir2File1
init|=
operator|new
name|Path
argument_list|(
name|inDir2
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|dir2File2
init|=
operator|new
name|Path
argument_list|(
name|inDir2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|inDir1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|inDir2
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|inFile1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir1File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir1File2
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir2File1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|dir2File2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|inFile1
argument_list|,
name|inDir1
argument_list|,
name|inDir2
argument_list|)
decl_stmt|;
return|return
name|expectedPaths
return|;
block|}
DECL|method|configureTestErrorOnNonExistantDir (Configuration conf, FileSystem localFs)
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|configureTestErrorOnNonExistantDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input2"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|+
literal|","
operator|+
name|localFs
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR_RECURSIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|Path
name|inFile1
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|inFile2
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|inFile1
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|createNewFile
argument_list|(
name|inFile2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
return|return
name|expectedPaths
return|;
block|}
DECL|method|verifyFileStatuses (List<Path> expectedPaths, List<FileStatus> fetchedStatuses, final FileSystem localFs)
specifier|public
specifier|static
name|void
name|verifyFileStatuses
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|expectedPaths
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fetchedStatuses
parameter_list|,
specifier|final
name|FileSystem
name|localFs
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPaths
operator|.
name|size
argument_list|()
argument_list|,
name|fetchedStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Path
argument_list|>
name|fqExpectedPaths
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|expectedPaths
argument_list|,
operator|new
name|Function
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|apply
parameter_list|(
name|Path
name|input
parameter_list|)
block|{
return|return
name|localFs
operator|.
name|makeQualified
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|expectedPathSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fqExpectedPaths
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fetchedStatuses
control|)
block|{
if|if
condition|(
operator|!
name|expectedPathSet
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Found extra fetched status: "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Not all expectedPaths matched: "
operator|+
name|expectedPathSet
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|expectedPathSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySplits (List<String> expected, List<InputSplit> splits)
specifier|private
name|void
name|verifySplits
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|pathsFromSplits
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|splits
argument_list|,
operator|new
name|Function
argument_list|<
name|InputSplit
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|InputSplit
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|FileSplit
operator|)
name|input
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|expected
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|splitPathString
range|:
name|pathsFromSplits
control|)
block|{
if|if
condition|(
operator|!
name|expectedSet
operator|.
name|remove
argument_list|(
name|splitPathString
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Found extra split: "
operator|+
name|splitPathString
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Not all expectedPaths matched: "
operator|+
name|expectedSet
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|expectedSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|private
name|Configuration
name|getConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.test.impl.disable.cache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.test.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"test:///a1"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|numListLocatedStatusCalls
name|int
name|numListLocatedStatusCalls
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test:/a1"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/file1"
argument_list|)
argument_list|)
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test:/a1/a2"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2/file2"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|151
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2/file3"
argument_list|)
argument_list|)
block|}
return|;
block|}
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|globStatus (Path pathPattern, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|globStatus
parameter_list|(
name|Path
name|pathPattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
name|pathPattern
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|listStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (Path p, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BlockLocation
index|[]
block|{
operator|new
name|BlockLocation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"localhost:50010"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (Path f, PathFilter filter)
specifier|protected
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
operator|++
name|numListLocatedStatusCalls
expr_stmt|;
return|return
name|super
operator|.
name|listLocatedStatus
argument_list|(
name|f
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

