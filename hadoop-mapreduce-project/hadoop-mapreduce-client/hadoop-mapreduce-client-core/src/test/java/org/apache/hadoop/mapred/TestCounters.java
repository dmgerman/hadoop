begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestCounters checks the sanity and recoverability of {@code Counters}  */
end_comment

begin_class
DECL|class|TestCounters
specifier|public
class|class
name|TestCounters
block|{
DECL|enum|myCounters
DECL|enumConstant|TEST1
DECL|enumConstant|TEST2
enum|enum
name|myCounters
block|{
name|TEST1
block|,
name|TEST2
block|}
empty_stmt|;
DECL|field|MAX_VALUE
specifier|private
specifier|static
specifier|final
name|long
name|MAX_VALUE
init|=
literal|10
decl_stmt|;
comment|// Generates enum based counters
DECL|method|getEnumCounters (Enum[] keys)
specifier|private
name|Counters
name|getEnumCounters
parameter_list|(
name|Enum
index|[]
name|keys
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|Enum
name|key
range|:
name|keys
control|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_VALUE
condition|;
operator|++
name|i
control|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|key
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
comment|// Generate string based counters
DECL|method|getEnumCounters (String[] gNames, String[] cNames)
specifier|private
name|Counters
name|getEnumCounters
parameter_list|(
name|String
index|[]
name|gNames
parameter_list|,
name|String
index|[]
name|cNames
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|gName
range|:
name|gNames
control|)
block|{
for|for
control|(
name|String
name|cName
range|:
name|cNames
control|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_VALUE
condition|;
operator|++
name|i
control|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|gName
argument_list|,
name|cName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|counters
return|;
block|}
comment|/**    * Test counter recovery    */
DECL|method|testCounter (Counters counter)
specifier|private
name|void
name|testCounter
parameter_list|(
name|Counters
name|counter
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|compactEscapedString
init|=
name|counter
operator|.
name|makeEscapedCompactString
argument_list|()
decl_stmt|;
name|Counters
name|recoveredCounter
init|=
name|Counters
operator|.
name|fromEscapedCompactString
argument_list|(
name|compactEscapedString
argument_list|)
decl_stmt|;
comment|// Check for recovery from string
name|assertEquals
argument_list|(
literal|"Recovered counter does not match on content"
argument_list|,
name|counter
argument_list|,
name|recoveredCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"recovered counter has wrong hash code"
argument_list|,
name|counter
operator|.
name|hashCode
argument_list|()
argument_list|,
name|recoveredCounter
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounters ()
specifier|public
name|void
name|testCounters
parameter_list|()
throws|throws
name|IOException
block|{
name|Enum
index|[]
name|keysWithResource
init|=
block|{
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
block|,
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
block|}
decl_stmt|;
name|Enum
index|[]
name|keysWithoutResource
init|=
block|{
name|myCounters
operator|.
name|TEST1
block|,
name|myCounters
operator|.
name|TEST2
block|}
decl_stmt|;
name|String
index|[]
name|groups
init|=
block|{
literal|"group1"
block|,
literal|"group2"
block|,
literal|"group{}()[]"
block|}
decl_stmt|;
name|String
index|[]
name|counters
init|=
block|{
literal|"counter1"
block|,
literal|"counter2"
block|,
literal|"counter{}()[]"
block|}
decl_stmt|;
try|try
block|{
comment|// I. Check enum counters that have resource bundler
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|keysWithResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// II. Check enum counters that dont have resource bundler
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|keysWithoutResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// III. Check string counters
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|groups
argument_list|,
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|pe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testLegacyNames ()
specifier|public
name|void
name|testLegacyNames
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|JobCounter
operator|.
name|DATA_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"file"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"DATA_LOCAL_MAPS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.JobInProgress$Counter"
argument_list|,
literal|"DATA_LOCAL_MAPS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|FileSystemCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name and method"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"file"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounter"
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|TestCounters
argument_list|()
operator|.
name|testCounters
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

