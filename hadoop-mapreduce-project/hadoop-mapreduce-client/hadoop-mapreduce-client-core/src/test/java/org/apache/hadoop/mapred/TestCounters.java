begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|CountersExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|GroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|FrameworkCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupFactory
operator|.
name|FrameworkGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TestCounters checks the sanity and recoverability of {@code Counters}  */
end_comment

begin_class
DECL|class|TestCounters
specifier|public
class|class
name|TestCounters
block|{
DECL|enum|myCounters
DECL|enumConstant|TEST1
DECL|enumConstant|TEST2
enum|enum
name|myCounters
block|{
name|TEST1
block|,
name|TEST2
block|}
empty_stmt|;
DECL|field|MAX_VALUE
specifier|private
specifier|static
specifier|final
name|long
name|MAX_VALUE
init|=
literal|10
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCounters
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FRAMEWORK_COUNTER
specifier|static
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|FRAMEWORK_COUNTER
init|=
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
decl_stmt|;
DECL|field|FRAMEWORK_COUNTER_VALUE
specifier|static
specifier|final
name|long
name|FRAMEWORK_COUNTER_VALUE
init|=
literal|8
decl_stmt|;
DECL|field|FS_SCHEME
specifier|static
specifier|final
name|String
name|FS_SCHEME
init|=
literal|"HDFS"
decl_stmt|;
DECL|field|FS_COUNTER
specifier|static
specifier|final
name|FileSystemCounter
name|FS_COUNTER
init|=
name|FileSystemCounter
operator|.
name|BYTES_READ
decl_stmt|;
DECL|field|FS_COUNTER_VALUE
specifier|static
specifier|final
name|long
name|FS_COUNTER_VALUE
init|=
literal|10
decl_stmt|;
comment|// Generates enum based counters
DECL|method|getEnumCounters (Enum[] keys)
specifier|private
name|Counters
name|getEnumCounters
parameter_list|(
name|Enum
index|[]
name|keys
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|Enum
name|key
range|:
name|keys
control|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_VALUE
condition|;
operator|++
name|i
control|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|key
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
comment|// Generate string based counters
DECL|method|getEnumCounters (String[] gNames, String[] cNames)
specifier|private
name|Counters
name|getEnumCounters
parameter_list|(
name|String
index|[]
name|gNames
parameter_list|,
name|String
index|[]
name|cNames
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|gName
range|:
name|gNames
control|)
block|{
for|for
control|(
name|String
name|cName
range|:
name|cNames
control|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_VALUE
condition|;
operator|++
name|i
control|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|gName
argument_list|,
name|cName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|counters
return|;
block|}
comment|/**    * Test counter recovery    */
DECL|method|testCounter (Counters counter)
specifier|private
name|void
name|testCounter
parameter_list|(
name|Counters
name|counter
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|compactEscapedString
init|=
name|counter
operator|.
name|makeEscapedCompactString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"compactEscapedString should not contain null"
argument_list|,
name|compactEscapedString
operator|.
name|contains
argument_list|(
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
name|Counters
name|recoveredCounter
init|=
name|Counters
operator|.
name|fromEscapedCompactString
argument_list|(
name|compactEscapedString
argument_list|)
decl_stmt|;
comment|// Check for recovery from string
name|assertEquals
argument_list|(
literal|"Recovered counter does not match on content"
argument_list|,
name|counter
argument_list|,
name|recoveredCounter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounters ()
specifier|public
name|void
name|testCounters
parameter_list|()
throws|throws
name|IOException
block|{
name|Enum
index|[]
name|keysWithResource
init|=
block|{
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
block|,
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
block|}
decl_stmt|;
name|Enum
index|[]
name|keysWithoutResource
init|=
block|{
name|myCounters
operator|.
name|TEST1
block|,
name|myCounters
operator|.
name|TEST2
block|}
decl_stmt|;
name|String
index|[]
name|groups
init|=
block|{
literal|"group1"
block|,
literal|"group2"
block|,
literal|"group{}()[]"
block|}
decl_stmt|;
name|String
index|[]
name|counters
init|=
block|{
literal|"counter1"
block|,
literal|"counter2"
block|,
literal|"counter{}()[]"
block|}
decl_stmt|;
try|try
block|{
comment|// I. Check enum counters that have resource bundler
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|keysWithResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// II. Check enum counters that dont have resource bundler
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|keysWithoutResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// III. Check string counters
name|testCounter
argument_list|(
name|getEnumCounters
argument_list|(
name|groups
argument_list|,
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|pe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify counter value works    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testCounterValue ()
specifier|public
name|void
name|testCounterValue
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUMBER_TESTS
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|NUMBER_INC
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|long
name|initValue
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|long
name|expectedValue
init|=
name|initValue
decl_stmt|;
name|Counter
name|counter
init|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setValue
argument_list|(
name|initValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not initialized correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUMBER_INC
condition|;
name|j
operator|++
control|)
block|{
name|int
name|incValue
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|incValue
argument_list|)
expr_stmt|;
name|expectedValue
operator|+=
name|incValue
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not incremented correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectedValue
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|counter
operator|.
name|setValue
argument_list|(
name|expectedValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not set correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testReadWithLegacyNames ()
specifier|public
name|void
name|testReadWithLegacyNames
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|JobCounter
operator|.
name|DATA_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"file"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkLegacyNames
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testWriteWithLegacyNames ()
specifier|public
name|void
name|testWriteWithLegacyNames
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|Task
operator|.
name|Counter
operator|.
name|MAP_INPUT_RECORDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|JobInProgress
operator|.
name|Counter
operator|.
name|DATA_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkLegacyNames
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|checkLegacyNames (Counters counters)
specifier|private
name|void
name|checkLegacyNames
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy enum"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|Task
operator|.
name|Counter
operator|.
name|MAP_INPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"DATA_LOCAL_MAPS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.JobInProgress$Counter"
argument_list|,
literal|"DATA_LOCAL_MAPS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy enum"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobInProgress
operator|.
name|Counter
operator|.
name|DATA_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|FileSystemCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New name and method"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"file"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Legacy name"
argument_list|,
literal|1
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testCounterIteratorConcurrency ()
specifier|public
name|void
name|testCounterIteratorConcurrency
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group1"
argument_list|,
literal|"counter1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iterator
init|=
name|counters
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group2"
argument_list|,
literal|"counter2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testGroupIteratorConcurrency ()
specifier|public
name|void
name|testGroupIteratorConcurrency
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group1"
argument_list|,
literal|"counter1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
name|counters
operator|.
name|getGroup
argument_list|(
literal|"group1"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|iterator
init|=
name|group
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group1"
argument_list|,
literal|"counter2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileSystemGroupIteratorConcurrency ()
specifier|public
name|void
name|testFileSystemGroupIteratorConcurrency
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
comment|// create 2 filesystem counter groups
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs1"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs2"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Iterate over the counters in this group while updating counters in
comment|// the group
name|Group
name|group
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|FileSystemCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|iterator
init|=
name|group
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs3"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs3"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyGetGroupNames ()
specifier|public
name|void
name|testLegacyGetGroupNames
parameter_list|()
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
comment|// create 2 filesystem counter groups
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs1"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
literal|"fs2"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group1"
argument_list|,
literal|"counter1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|counters
operator|.
name|getGroupNames
argument_list|()
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|expectedGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedGroups
operator|.
name|add
argument_list|(
literal|"group1"
argument_list|)
expr_stmt|;
name|expectedGroups
operator|.
name|add
argument_list|(
literal|"FileSystemCounters"
argument_list|)
expr_stmt|;
comment|//Legacy Name
name|expectedGroups
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.mapreduce.FileSystemCounter"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedGroups
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMakeCompactString ()
specifier|public
name|void
name|testMakeCompactString
parameter_list|()
block|{
specifier|final
name|String
name|GC1
init|=
literal|"group1.counter1:1"
decl_stmt|;
specifier|final
name|String
name|GC2
init|=
literal|"group2.counter2:3"
decl_stmt|;
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group1"
argument_list|,
literal|"counter1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group1.counter1:1"
argument_list|,
name|counters
operator|.
name|makeCompactString
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrCounter
argument_list|(
literal|"group2"
argument_list|,
literal|"counter2"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|cs
init|=
name|counters
operator|.
name|makeCompactString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad compact string"
argument_list|,
name|cs
operator|.
name|equals
argument_list|(
name|GC1
operator|+
literal|','
operator|+
name|GC2
argument_list|)
operator|||
name|cs
operator|.
name|equals
argument_list|(
name|GC2
operator|+
literal|','
operator|+
name|GC1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounterLimits ()
specifier|public
name|void
name|testCounterLimits
parameter_list|()
block|{
name|testMaxCountersLimits
argument_list|(
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|testMaxGroupsLimits
argument_list|(
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxCountersLimits (final Counters counters)
specifier|private
name|void
name|testMaxCountersLimits
parameter_list|(
specifier|final
name|Counters
name|counters
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|MAX_COUNTER_LIMIT
condition|;
operator|++
name|i
control|)
block|{
name|counters
operator|.
name|findCounter
argument_list|(
literal|"test"
argument_list|,
literal|"test"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|setExpected
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|(
name|CountersExceededException
operator|.
name|class
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|counters
operator|.
name|findCounter
argument_list|(
literal|"test"
argument_list|,
literal|"bad"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxGroupsLimits (final Counters counters)
specifier|private
name|void
name|testMaxGroupsLimits
parameter_list|(
specifier|final
name|Counters
name|counters
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|MAX_GROUP_LIMIT
condition|;
operator|++
name|i
control|)
block|{
comment|// assuming COUNTERS_MAX> GROUPS_MAX
name|counters
operator|.
name|findCounter
argument_list|(
literal|"test"
operator|+
name|i
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|setExpected
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|(
name|CountersExceededException
operator|.
name|class
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|counters
operator|.
name|findCounter
argument_list|(
literal|"bad"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|setExpected (Counters counters)
specifier|private
name|void
name|setExpected
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|counters
operator|.
name|findCounter
argument_list|(
name|FRAMEWORK_COUNTER
argument_list|)
operator|.
name|setValue
argument_list|(
name|FRAMEWORK_COUNTER_VALUE
argument_list|)
expr_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
name|FS_SCHEME
argument_list|,
name|FS_COUNTER
argument_list|)
operator|.
name|setValue
argument_list|(
name|FS_COUNTER_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExpected (Counters counters)
specifier|private
name|void
name|checkExpected
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|FRAMEWORK_COUNTER_VALUE
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|FRAMEWORK_COUNTER
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FS_COUNTER_VALUE
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|FS_SCHEME
argument_list|,
name|FS_COUNTER
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldThrow (Class<? extends Exception> ecls, Runnable runnable)
specifier|private
name|void
name|shouldThrow
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|ecls
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CountersExceededException
name|e
parameter_list|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should've thrown "
operator|+
name|ecls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|TestCounters
argument_list|()
operator|.
name|testCounters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testFrameworkCounter ()
specifier|public
name|void
name|testFrameworkCounter
parameter_list|()
block|{
name|GroupFactory
name|groupFactory
init|=
operator|new
name|GroupFactoryForTest
argument_list|()
decl_stmt|;
name|FrameworkGroupFactory
name|frameworkGroupFactory
init|=
name|groupFactory
operator|.
name|newFrameworkGroupFactory
argument_list|(
name|JobCounter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
operator|(
name|Group
operator|)
name|frameworkGroupFactory
operator|.
name|newGroup
argument_list|(
literal|"JobCounter"
argument_list|)
decl_stmt|;
name|FrameworkCounterGroup
name|counterGroup
init|=
operator|(
name|FrameworkCounterGroup
operator|)
name|group
operator|.
name|getUnderlyingGroup
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count1
init|=
name|counterGroup
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|count1
argument_list|)
expr_stmt|;
comment|// Verify no exception get thrown when finding an unknown counter
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count2
init|=
name|counterGroup
operator|.
name|findCounter
argument_list|(
literal|"Unknown"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|count2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testTaskCounter ()
specifier|public
name|void
name|testTaskCounter
parameter_list|()
block|{
name|GroupFactory
name|groupFactory
init|=
operator|new
name|GroupFactoryForTest
argument_list|()
decl_stmt|;
name|FrameworkGroupFactory
name|frameworkGroupFactory
init|=
name|groupFactory
operator|.
name|newFrameworkGroupFactory
argument_list|(
name|TaskCounter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
operator|(
name|Group
operator|)
name|frameworkGroupFactory
operator|.
name|newGroup
argument_list|(
literal|"TaskCounter"
argument_list|)
decl_stmt|;
name|FrameworkCounterGroup
name|counterGroup
init|=
operator|(
name|FrameworkCounterGroup
operator|)
name|group
operator|.
name|getUnderlyingGroup
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count1
init|=
name|counterGroup
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|count1
argument_list|)
expr_stmt|;
name|count1
operator|.
name|increment
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|count1
operator|.
name|increment
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify no exception get thrown when finding an unknown counter
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count2
init|=
name|counterGroup
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_PHYSICAL_MEMORY_BYTES_MAX
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|count2
argument_list|)
expr_stmt|;
name|count2
operator|.
name|increment
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|count2
operator|.
name|increment
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesystemCounter ()
specifier|public
name|void
name|testFilesystemCounter
parameter_list|()
block|{
name|GroupFactory
name|groupFactory
init|=
operator|new
name|GroupFactoryForTest
argument_list|()
decl_stmt|;
name|Group
name|fsGroup
init|=
name|groupFactory
operator|.
name|newFileSystemGroup
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count1
init|=
name|fsGroup
operator|.
name|findCounter
argument_list|(
literal|"ANY_BYTES_READ"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|count1
argument_list|)
expr_stmt|;
comment|// Verify no exception get thrown when finding an unknown counter
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|count2
init|=
name|fsGroup
operator|.
name|findCounter
argument_list|(
literal|"Unknown"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|count2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|GroupFactoryForTest
class|class
name|GroupFactoryForTest
extends|extends
name|GroupFactory
block|{
specifier|public
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|newFrameworkGroupFactory (final Class<T> cls)
name|FrameworkGroupFactory
argument_list|<
name|Group
argument_list|>
name|newFrameworkGroupFactory
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|super
operator|.
name|newFrameworkGroupFactory
argument_list|(
name|cls
argument_list|)
return|;
block|}
DECL|method|newFileSystemGroup ()
specifier|public
name|Group
name|newFileSystemGroup
parameter_list|()
block|{
return|return
name|super
operator|.
name|newFileSystemGroup
argument_list|()
return|;
block|}
block|}
end_class

end_unit

