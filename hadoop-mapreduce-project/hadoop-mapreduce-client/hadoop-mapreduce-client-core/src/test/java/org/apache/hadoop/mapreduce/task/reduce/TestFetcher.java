begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Void
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapOutputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|nimbusds
operator|.
name|jose
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Test that the Fetcher does what we expect it to.  */
end_comment

begin_class
DECL|class|TestFetcher
specifier|public
class|class
name|TestFetcher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|job
name|JobConf
name|job
init|=
literal|null
decl_stmt|;
DECL|field|jobWithRetry
name|JobConf
name|jobWithRetry
init|=
literal|null
decl_stmt|;
DECL|field|id
name|TaskAttemptID
name|id
init|=
literal|null
decl_stmt|;
DECL|field|ss
name|ShuffleSchedulerImpl
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|ss
init|=
literal|null
decl_stmt|;
DECL|field|mm
name|MergeManagerImpl
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mm
init|=
literal|null
decl_stmt|;
DECL|field|r
name|Reporter
name|r
init|=
literal|null
decl_stmt|;
DECL|field|metrics
name|ShuffleClientMetrics
name|metrics
init|=
literal|null
decl_stmt|;
DECL|field|except
name|ExceptionReporter
name|except
init|=
literal|null
decl_stmt|;
DECL|field|key
name|SecretKey
name|key
init|=
literal|null
decl_stmt|;
DECL|field|connection
name|HttpURLConnection
name|connection
init|=
literal|null
decl_stmt|;
DECL|field|allErrs
name|Counters
operator|.
name|Counter
name|allErrs
init|=
literal|null
decl_stmt|;
DECL|field|encHash
specifier|final
name|String
name|encHash
init|=
literal|"vFE234EIFCiBgYs2tCXY/SjT8Kg="
decl_stmt|;
DECL|field|host
specifier|final
name|MapHost
name|host
init|=
operator|new
name|MapHost
argument_list|(
literal|"localhost"
argument_list|,
literal|"http://localhost:8080/"
argument_list|)
decl_stmt|;
DECL|field|map1ID
specifier|final
name|TaskAttemptID
name|map1ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_1_1"
argument_list|)
decl_stmt|;
DECL|field|map2ID
specifier|final
name|TaskAttemptID
name|map2ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_2_1"
argument_list|)
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_FETCH_RETRY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|jobWithRetry
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|jobWithRetry
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_FETCH_RETRY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_r_1_1"
argument_list|)
expr_stmt|;
name|ss
operator|=
name|mock
argument_list|(
name|ShuffleSchedulerImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|mm
operator|=
name|mock
argument_list|(
name|MergeManagerImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|r
operator|=
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|mock
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|except
operator|=
name|mock
argument_list|(
name|ExceptionReporter
operator|.
name|class
argument_list|)
expr_stmt|;
name|key
operator|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
name|connection
operator|=
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|allErrs
operator|=
name|mock
argument_list|(
name|Counters
operator|.
name|Counter
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getCounter
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allErrs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map1ID
argument_list|)
expr_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map2ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ss
operator|.
name|getMapsForHost
argument_list|(
name|host
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"<<<< "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReduceOutOfDiskSpace ()
specifier|public
name|void
name|testReduceOutOfDiskSpace
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReduceOutOfDiskSpace"
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|DiskErrorException
argument_list|(
literal|"No disk space available"
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|reportLocalError
argument_list|(
name|any
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCopyFromHostConnectionTimeout ()
specifier|public
name|void
name|testCopyFromHostConnectionTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|(
literal|"This is a fake timeout :)"
argument_list|)
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostConnectionRejected ()
specifier|public
name|void
name|testCopyFromHostConnectionRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Fetcher
operator|.
name|TOO_MANY_REQ_STATUS_CODE
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|fetcher
init|=
operator|new
name|FakeFetcher
argument_list|<>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|fetcher
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No host failure is expected."
argument_list|,
name|ss
operator|.
name|hostFailureCount
argument_list|(
name|host
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No fetch failure is expected."
argument_list|,
name|ss
operator|.
name|fetchFailureCount
argument_list|(
name|map1ID
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No fetch failure is expected."
argument_list|,
name|ss
operator|.
name|fetchFailureCount
argument_list|(
name|map2ID
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|penalize
argument_list|(
name|eq
argument_list|(
name|host
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostBogusHeader ()
specifier|public
name|void
name|testCopyFromHostBogusHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"\u00010 BOGUS DATA\nBOGUS DATA\nBOGUS DATA\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostIncompatibleShuffleVersion ()
specifier|public
name|void
name|testCopyFromHostIncompatibleShuffleVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"other"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.1"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.0"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|connection
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostIncompatibleShuffleVersionWithRetry ()
specifier|public
name|void
name|testCopyFromHostIncompatibleShuffleVersionWithRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"other"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.1"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.0"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.0.1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|jobWithRetry
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|connection
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostWait ()
specifier|public
name|void
name|testCopyFromHostWait
parameter_list|()
throws|throws
name|Exception
block|{
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
comment|//Defaults to null, which is what we want to test
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromHostCompressFailure ()
specifier|public
name|void
name|testCopyFromHostCompressFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|mock
argument_list|(
name|InMemoryMapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|InternalError
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|immo
argument_list|)
operator|.
name|shuffle
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromHostOnAnyException ()
specifier|public
name|void
name|testCopyFromHostOnAnyException
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|mock
argument_list|(
name|InMemoryMapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|immo
argument_list|)
operator|.
name|shuffle
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromHostWithRetry ()
specifier|public
name|void
name|testCopyFromHostWithRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|mock
argument_list|(
name|InMemoryMapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
name|ss
operator|=
name|mock
argument_list|(
name|ShuffleSchedulerImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|jobWithRetry
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
specifier|final
name|long
name|retryTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Emulate host down for 3 seconds.
if|if
condition|(
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|retryTime
operator|)
operator|<=
literal|3000
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|InternalError
argument_list|()
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|immo
argument_list|)
operator|.
name|shuffle
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromHostWithRetryThenTimeout ()
specifier|public
name|void
name|testCopyFromHostWithRetryThenTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|mock
argument_list|(
name|InMemoryMapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|jobWithRetry
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|(
literal|"forced timeout"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"forced error"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|immo
argument_list|)
operator|.
name|shuffle
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFromHostExtraBytes ()
specifier|public
name|void
name|testCopyFromHostExtraBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|14
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ios
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dos
argument_list|)
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|ios
operator|.
name|write
argument_list|(
literal|"MAPDATA123"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ios
operator|.
name|finish
argument_list|()
expr_stmt|;
name|ShuffleHeader
name|header2
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map2ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|14
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ios2
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dos
argument_list|)
decl_stmt|;
name|header2
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|ios2
operator|.
name|write
argument_list|(
literal|"MAPDATA456"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ios2
operator|.
name|finish
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// 8< 10 therefore there appear to be extra bytes in the IFileInputStream
name|IFileWrappedMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mapOut
init|=
operator|new
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|map1ID
argument_list|,
name|mm
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IFileWrappedMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mapOut2
init|=
operator|new
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|map2ID
argument_list|,
name|mm
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapOut
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapOut2
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptedIFile ()
specifier|public
name|void
name|testCorruptedIFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|fetcher
init|=
literal|7
decl_stmt|;
name|Path
name|onDiskMapOutputPath
init|=
operator|new
name|Path
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/foo"
argument_list|)
decl_stmt|;
name|Path
name|shuffledToDisk
init|=
name|OnDiskMapOutput
operator|.
name|getTempPath
argument_list|(
name|onDiskMapOutputPath
argument_list|,
name|fetcher
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
operator|.
name|getRaw
argument_list|()
expr_stmt|;
name|IFileWrappedMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|odmo
init|=
operator|new
name|OnDiskMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|map1ID
argument_list|,
name|mm
argument_list|,
literal|100L
argument_list|,
name|job
argument_list|,
name|fetcher
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|,
name|onDiskMapOutputPath
argument_list|)
decl_stmt|;
name|String
name|mapData
init|=
literal|"MAPDATA12345678901234567890"
decl_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|14
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ios
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dos
argument_list|)
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|int
name|headerSize
init|=
name|dos
operator|.
name|size
argument_list|()
decl_stmt|;
try|try
block|{
name|ios
operator|.
name|write
argument_list|(
name|mapData
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ios
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|dataSize
init|=
name|bout
operator|.
name|size
argument_list|()
operator|-
name|headerSize
decl_stmt|;
comment|// Ensure that the OnDiskMapOutput shuffler can successfully read the data.
name|MapHost
name|host
init|=
operator|new
name|MapHost
argument_list|(
literal|"TestHost"
argument_list|,
literal|"http://test/url"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Read past the shuffle header.
name|bin
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
name|headerSize
index|]
argument_list|,
literal|0
argument_list|,
name|headerSize
argument_list|)
expr_stmt|;
name|odmo
operator|.
name|shuffle
argument_list|(
name|host
argument_list|,
name|bin
argument_list|,
name|dataSize
argument_list|,
name|dataSize
argument_list|,
name|metrics
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Now corrupt the IFile data.
name|byte
index|[]
name|corrupted
init|=
name|bout
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|corrupted
index|[
name|headerSize
operator|+
operator|(
name|dataSize
operator|/
literal|2
operator|)
index|]
operator|=
literal|0x0
expr_stmt|;
try|try
block|{
name|bin
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|corrupted
argument_list|)
expr_stmt|;
comment|// Read past the shuffle header.
name|bin
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
name|headerSize
index|]
argument_list|,
literal|0
argument_list|,
name|headerSize
argument_list|)
expr_stmt|;
name|odmo
operator|.
name|shuffle
argument_list|(
name|host
argument_list|,
name|bin
argument_list|,
name|dataSize
argument_list|,
name|dataSize
argument_list|,
name|metrics
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"OnDiskMapOutput.shuffle didn't detect the corrupted map partition file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The expected checksum exception was thrown."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Ensure that the shuffled file can be read.
name|IFileInputStream
name|iFin
init|=
operator|new
name|IFileInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|shuffledToDisk
argument_list|)
argument_list|,
name|dataSize
argument_list|,
name|job
argument_list|)
decl_stmt|;
try|try
block|{
name|iFin
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
name|dataSize
index|]
argument_list|,
literal|0
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iFin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testInterruptInMemory ()
specifier|public
name|void
name|testInterruptInMemory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|FETCHER
init|=
literal|2
decl_stmt|;
name|IFileWrappedMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|spy
argument_list|(
operator|new
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|mm
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mm
argument_list|)
operator|.
name|waitForResource
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|ss
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StuckInputStream
name|in
init|=
operator|new
name|StuckInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|connection
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|,
name|FETCHER
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for read in inputstream
name|in
operator|.
name|waitForFetcher
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// rely on test timeout to kill if stuck
name|assertTrue
argument_list|(
name|in
operator|.
name|wasClosedProperly
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|immo
argument_list|)
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testInterruptOnDisk ()
specifier|public
name|void
name|testInterruptOnDisk
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|FETCHER
init|=
literal|7
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"file:///tmp/foo"
argument_list|)
decl_stmt|;
name|Path
name|pTmp
init|=
name|OnDiskMapOutput
operator|.
name|getTempPath
argument_list|(
name|p
argument_list|,
name|FETCHER
argument_list|)
decl_stmt|;
name|FileSystem
name|mFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|IFileWrappedMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|odmo
init|=
name|spy
argument_list|(
operator|new
name|OnDiskMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|map1ID
argument_list|,
name|mm
argument_list|,
literal|100L
argument_list|,
name|job
argument_list|,
name|FETCHER
argument_list|,
literal|true
argument_list|,
name|mFs
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|odmo
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mm
argument_list|)
operator|.
name|waitForResource
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|ss
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StuckInputStream
name|in
init|=
operator|new
name|StuckInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|connection
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|,
name|FETCHER
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for read in inputstream
name|in
operator|.
name|waitForFetcher
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// rely on test timeout to kill if stuck
name|assertTrue
argument_list|(
name|in
operator|.
name|wasClosedProperly
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mFs
argument_list|)
operator|.
name|create
argument_list|(
name|eq
argument_list|(
name|pTmp
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|pTmp
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|odmo
argument_list|)
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromHostWithRetryUnreserve ()
specifier|public
name|void
name|testCopyFromHostWithRetryUnreserve
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryMapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|immo
init|=
name|mock
argument_list|(
name|InMemoryMapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|jobWithRetry
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
comment|// Verify that unreserve occurs if an exception happens after shuffle
comment|// buffer is reserved.
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|immo
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"forced error"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|immo
argument_list|)
operator|.
name|shuffle
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|immo
argument_list|)
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
DECL|class|FakeFetcher
specifier|public
specifier|static
class|class
name|FakeFetcher
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Fetcher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|// If connection need to be reopen.
DECL|field|renewConnection
specifier|private
name|boolean
name|renewConnection
init|=
literal|false
decl_stmt|;
DECL|method|FakeFetcher (JobConf job, TaskAttemptID reduceId, ShuffleSchedulerImpl<K,V> scheduler, MergeManagerImpl<K,V> merger, Reporter reporter, ShuffleClientMetrics metrics, ExceptionReporter exceptionReporter, SecretKey jobTokenSecret, HttpURLConnection connection)
specifier|public
name|FakeFetcher
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskAttemptID
name|reduceId
parameter_list|,
name|ShuffleSchedulerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|scheduler
parameter_list|,
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|ShuffleClientMetrics
name|metrics
parameter_list|,
name|ExceptionReporter
name|exceptionReporter
parameter_list|,
name|SecretKey
name|jobTokenSecret
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|job
argument_list|,
name|reduceId
argument_list|,
name|scheduler
argument_list|,
name|merger
argument_list|,
name|reporter
argument_list|,
name|metrics
argument_list|,
name|exceptionReporter
argument_list|,
name|jobTokenSecret
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
DECL|method|FakeFetcher (JobConf job, TaskAttemptID reduceId, ShuffleSchedulerImpl<K,V> scheduler, MergeManagerImpl<K,V> merger, Reporter reporter, ShuffleClientMetrics metrics, ExceptionReporter exceptionReporter, SecretKey jobTokenSecret, HttpURLConnection connection, boolean renewConnection)
specifier|public
name|FakeFetcher
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskAttemptID
name|reduceId
parameter_list|,
name|ShuffleSchedulerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|scheduler
parameter_list|,
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|ShuffleClientMetrics
name|metrics
parameter_list|,
name|ExceptionReporter
name|exceptionReporter
parameter_list|,
name|SecretKey
name|jobTokenSecret
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|,
name|boolean
name|renewConnection
parameter_list|)
block|{
name|super
argument_list|(
name|job
argument_list|,
name|reduceId
argument_list|,
name|scheduler
argument_list|,
name|merger
argument_list|,
name|reporter
argument_list|,
name|metrics
argument_list|,
name|exceptionReporter
argument_list|,
name|jobTokenSecret
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|renewConnection
operator|=
name|renewConnection
expr_stmt|;
block|}
DECL|method|FakeFetcher (JobConf job, TaskAttemptID reduceId, ShuffleSchedulerImpl<K,V> scheduler, MergeManagerImpl<K,V> merger, Reporter reporter, ShuffleClientMetrics metrics, ExceptionReporter exceptionReporter, SecretKey jobTokenSecret, HttpURLConnection connection, int id)
specifier|public
name|FakeFetcher
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskAttemptID
name|reduceId
parameter_list|,
name|ShuffleSchedulerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|scheduler
parameter_list|,
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|ShuffleClientMetrics
name|metrics
parameter_list|,
name|ExceptionReporter
name|exceptionReporter
parameter_list|,
name|SecretKey
name|jobTokenSecret
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|job
argument_list|,
name|reduceId
argument_list|,
name|scheduler
argument_list|,
name|merger
argument_list|,
name|reporter
argument_list|,
name|metrics
argument_list|,
name|exceptionReporter
argument_list|,
name|jobTokenSecret
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openConnection (URL url)
specifier|protected
name|void
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|connection
operator|||
name|renewConnection
condition|)
block|{
name|super
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|// already 'opened' the mocked connection
return|return;
block|}
block|}
DECL|class|StuckInputStream
specifier|static
class|class
name|StuckInputStream
extends|extends
name|FilterInputStream
block|{
DECL|field|stuck
name|boolean
name|stuck
init|=
literal|false
decl_stmt|;
DECL|field|closed
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|StuckInputStream (InputStream inner)
name|StuckInputStream
parameter_list|(
name|InputStream
name|inner
parameter_list|)
block|{
name|super
argument_list|(
name|inner
argument_list|)
expr_stmt|;
block|}
DECL|method|freeze ()
name|int
name|freeze
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|stuck
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
comment|// connection doesn't throw InterruptedException, but may return some
comment|// bytes geq 0 or throw an exception
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
operator|||
name|closed
condition|)
block|{
comment|// spin
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"underlying stream closed, triggered an error"
argument_list|)
throw|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|freeze
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|freeze
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|freeze
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|waitForFetcher ()
specifier|public
specifier|synchronized
name|void
name|waitForFetcher
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|stuck
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|wasClosedProperly ()
specifier|public
name|boolean
name|wasClosedProperly
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
block|}
block|}
end_class

end_unit

