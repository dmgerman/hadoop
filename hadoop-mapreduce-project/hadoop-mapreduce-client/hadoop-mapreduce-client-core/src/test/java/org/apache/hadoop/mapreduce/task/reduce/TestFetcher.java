begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test that the Fetcher does what we expect it to.  */
end_comment

begin_class
DECL|class|TestFetcher
specifier|public
class|class
name|TestFetcher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|FakeFetcher
specifier|public
specifier|static
class|class
name|FakeFetcher
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Fetcher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|connection
specifier|private
name|HttpURLConnection
name|connection
decl_stmt|;
DECL|method|FakeFetcher (JobConf job, TaskAttemptID reduceId, ShuffleScheduler<K,V> scheduler, MergeManager<K,V> merger, Reporter reporter, ShuffleClientMetrics metrics, ExceptionReporter exceptionReporter, SecretKey jobTokenSecret, HttpURLConnection connection)
specifier|public
name|FakeFetcher
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskAttemptID
name|reduceId
parameter_list|,
name|ShuffleScheduler
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|scheduler
parameter_list|,
name|MergeManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|ShuffleClientMetrics
name|metrics
parameter_list|,
name|ExceptionReporter
name|exceptionReporter
parameter_list|,
name|SecretKey
name|jobTokenSecret
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|job
argument_list|,
name|reduceId
argument_list|,
name|scheduler
argument_list|,
name|merger
argument_list|,
name|reporter
argument_list|,
name|metrics
argument_list|,
name|exceptionReporter
argument_list|,
name|jobTokenSecret
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openConnection (URL url)
specifier|protected
name|HttpURLConnection
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
return|return
name|connection
return|;
block|}
return|return
name|super
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCopyFromHostBogusHeader ()
specifier|public
name|void
name|testCopyFromHostBogusHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCopyFromHostBogusHeader"
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|id
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_r_1_1"
argument_list|)
decl_stmt|;
name|ShuffleScheduler
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|ss
init|=
name|mock
argument_list|(
name|ShuffleScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MergeManager
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mm
init|=
name|mock
argument_list|(
name|MergeManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Reporter
name|r
init|=
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|ShuffleClientMetrics
name|metrics
init|=
name|mock
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionReporter
name|except
init|=
name|mock
argument_list|(
name|ExceptionReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecretKey
name|key
init|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
operator|.
name|Counter
name|allErrs
init|=
name|mock
argument_list|(
name|Counters
operator|.
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getCounter
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allErrs
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|MapHost
name|host
init|=
operator|new
name|MapHost
argument_list|(
literal|"localhost"
argument_list|,
literal|"http://localhost:8080/"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|map1ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_1_1"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map1ID
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|map2ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_2_1"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map2ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ss
operator|.
name|getMapsForHost
argument_list|(
name|host
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|String
name|encHash
init|=
literal|"vFE234EIFCiBgYs2tCXY/SjT8Kg="
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"\u00010 BOGUS DATA\nBOGUS DATA\nBOGUS DATA\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCopyFromHostWait ()
specifier|public
name|void
name|testCopyFromHostWait
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCopyFromHostWait"
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|id
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_r_1_1"
argument_list|)
decl_stmt|;
name|ShuffleScheduler
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|ss
init|=
name|mock
argument_list|(
name|ShuffleScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MergeManager
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mm
init|=
name|mock
argument_list|(
name|MergeManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Reporter
name|r
init|=
name|mock
argument_list|(
name|Reporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|ShuffleClientMetrics
name|metrics
init|=
name|mock
argument_list|(
name|ShuffleClientMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionReporter
name|except
init|=
name|mock
argument_list|(
name|ExceptionReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecretKey
name|key
init|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
operator|.
name|Counter
name|allErrs
init|=
name|mock
argument_list|(
name|Counters
operator|.
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getCounter
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allErrs
argument_list|)
expr_stmt|;
name|Fetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|underTest
init|=
operator|new
name|FakeFetcher
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|ss
argument_list|,
name|mm
argument_list|,
name|r
argument_list|,
name|metrics
argument_list|,
name|except
argument_list|,
name|key
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|MapHost
name|host
init|=
operator|new
name|MapHost
argument_list|(
literal|"localhost"
argument_list|,
literal|"http://localhost:8080/"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|map1ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_1_1"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map1ID
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|map2ID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_0_1_m_2_1"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map2ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ss
operator|.
name|getMapsForHost
argument_list|(
name|host
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|String
name|encHash
init|=
literal|"vFE234EIFCiBgYs2tCXY/SjT8Kg="
decl_stmt|;
name|String
name|replyHash
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|encHash
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|replyHash
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|map1ID
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//Defaults to WAIT, which is what we want to test
name|MapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|mapOut
init|=
operator|new
name|MapOutput
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
name|map1ID
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mm
operator|.
name|reserve
argument_list|(
name|any
argument_list|(
name|TaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapOut
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|copyFromHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allErrs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map1ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|copyFailed
argument_list|(
name|map2ID
argument_list|,
name|host
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map1ID
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ss
argument_list|)
operator|.
name|putBackKnownMapOutput
argument_list|(
name|any
argument_list|(
name|MapHost
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|map2ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

