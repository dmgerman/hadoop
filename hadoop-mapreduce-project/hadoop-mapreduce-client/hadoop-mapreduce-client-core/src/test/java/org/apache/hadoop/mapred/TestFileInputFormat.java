begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileInputFormat
specifier|public
class|class
name|TestFileInputFormat
block|{
annotation|@
name|Test
DECL|method|testListLocatedStatus ()
specifier|public
name|void
name|testListLocatedStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.test.impl.disable.cache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"test:///a1/a2"
argument_list|)
expr_stmt|;
name|MockFileSystem
name|mockFs
init|=
operator|(
name|MockFileSystem
operator|)
operator|new
name|Path
argument_list|(
literal|"test:///"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"listLocatedStatus already called"
argument_list|,
literal|0
argument_list|,
name|mockFs
operator|.
name|numListLocatedStatusCalls
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TextInputFormat
name|fileInputFormat
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|fileInputFormat
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|fileInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input splits are not correct"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"listLocatedStatuss calls"
argument_list|,
literal|1
argument_list|,
name|mockFs
operator|.
name|numListLocatedStatusCalls
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|private
name|Configuration
name|getConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.test.impl.disable.cache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.test.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"test:///a1"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|numListLocatedStatusCalls
name|int
name|numListLocatedStatusCalls
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test:/a1"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/file1"
argument_list|)
argument_list|)
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test:/a1/a2"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2/file2"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|151
argument_list|,
literal|150
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test:/a1/a2/file3"
argument_list|)
argument_list|)
block|}
return|;
block|}
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|globStatus (Path pathPattern, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|globStatus
parameter_list|(
name|Path
name|pathPattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
name|pathPattern
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|listStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (Path p, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BlockLocation
index|[]
block|{
operator|new
name|BlockLocation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"localhost:50010"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (Path f, PathFilter filter)
specifier|protected
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
operator|++
name|numListLocatedStatusCalls
expr_stmt|;
return|return
name|super
operator|.
name|listLocatedStatus
argument_list|(
name|f
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

