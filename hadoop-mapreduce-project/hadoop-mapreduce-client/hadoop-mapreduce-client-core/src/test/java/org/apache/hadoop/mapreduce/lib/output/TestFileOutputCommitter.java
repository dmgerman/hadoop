begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestFileOutputCommitter
specifier|public
class|class
name|TestFileOutputCommitter
block|{
DECL|field|outDir
specifier|private
specifier|static
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestFileOutputCommitter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|SUB_DIR
specifier|private
specifier|final
specifier|static
name|String
name|SUB_DIR
init|=
literal|"SUB_DIR"
decl_stmt|;
DECL|field|OUT_SUB_DIR
specifier|private
specifier|final
specifier|static
name|Path
name|OUT_SUB_DIR
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|SUB_DIR
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFileOutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A random task attempt id for testing.
DECL|field|attempt
specifier|private
specifier|static
specifier|final
name|String
name|attempt
init|=
literal|"attempt_200707121733_0001_m_000000_0"
decl_stmt|;
DECL|field|partFile
specifier|private
specifier|static
specifier|final
name|String
name|partFile
init|=
literal|"part-m-00000"
decl_stmt|;
DECL|field|taskID
specifier|private
specifier|static
specifier|final
name|TaskAttemptID
name|taskID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
DECL|field|attempt1
specifier|private
specifier|static
specifier|final
name|String
name|attempt1
init|=
literal|"attempt_200707121733_0001_m_000001_0"
decl_stmt|;
DECL|field|taskID1
specifier|private
specifier|static
specifier|final
name|TaskAttemptID
name|taskID1
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attempt1
argument_list|)
decl_stmt|;
DECL|field|key1
specifier|private
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
decl_stmt|;
DECL|field|key2
specifier|private
name|Text
name|key2
init|=
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
decl_stmt|;
DECL|field|val1
specifier|private
name|Text
name|val1
init|=
operator|new
name|Text
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
DECL|field|val2
specifier|private
name|Text
name|val2
init|=
operator|new
name|Text
argument_list|(
literal|"val2"
argument_list|)
decl_stmt|;
DECL|method|cleanup ()
specifier|private
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
DECL|method|writeOutput (RecordWriter theRecordWriter, TaskAttemptContext context)
specifier|private
name|void
name|writeOutput
parameter_list|(
name|RecordWriter
name|theRecordWriter
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|NullWritable
name|nullWritable
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|nullWritable
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|theRecordWriter
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeMapFileOutput (RecordWriter theRecordWriter, TaskAttemptContext context)
specifier|private
name|void
name|writeMapFileOutput
parameter_list|(
name|RecordWriter
name|theRecordWriter
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|int
name|key
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|key
operator|=
name|i
expr_stmt|;
name|Text
name|val
init|=
operator|(
name|i
operator|%
literal|2
operator|==
literal|1
operator|)
condition|?
name|val1
else|:
name|val2
decl_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|key
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|theRecordWriter
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRecoveryInternal (int commitVersion, int recoveryVersion)
specifier|private
name|void
name|testRecoveryInternal
parameter_list|(
name|int
name|commitVersion
parameter_list|,
name|int
name|recoveryVersion
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|commitVersion
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
name|Path
name|jobTempDir1
init|=
name|committer
operator|.
name|getCommittedTaskPath
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|File
name|jtd
init|=
operator|new
name|File
argument_list|(
name|jobTempDir1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitVersion
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Version 1 commits to temporary dir "
operator|+
name|jtd
argument_list|,
name|jtd
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|validateContent
argument_list|(
name|jtd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"Version 2 commits to output dir "
operator|+
name|jtd
argument_list|,
name|jtd
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//now while running the second app attempt,
comment|//recover the task output from first attempt
name|Configuration
name|conf2
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|recoveryVersion
argument_list|)
expr_stmt|;
name|JobContext
name|jContext2
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf2
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext2
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf2
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer2
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext2
argument_list|)
decl_stmt|;
name|committer2
operator|.
name|setupJob
argument_list|(
name|tContext2
argument_list|)
expr_stmt|;
name|Path
name|jobTempDir2
init|=
name|committer2
operator|.
name|getCommittedTaskPath
argument_list|(
name|tContext2
argument_list|)
decl_stmt|;
name|File
name|jtd2
init|=
operator|new
name|File
argument_list|(
name|jobTempDir2
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|committer2
operator|.
name|recoverTask
argument_list|(
name|tContext2
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveryVersion
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Version 1 recovers to "
operator|+
name|jtd2
argument_list|,
name|jtd2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|validateContent
argument_list|(
name|jtd2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"Version 2 commits to output dir "
operator|+
name|jtd2
argument_list|,
name|jtd2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitVersion
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Version 2  recovery moves to output dir from "
operator|+
name|jtd
argument_list|,
name|jtd
operator|.
name|list
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|committer2
operator|.
name|commitJob
argument_list|(
name|jContext2
argument_list|)
expr_stmt|;
name|validateContent
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryV1 ()
specifier|public
name|void
name|testRecoveryV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecoveryInternal
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryV2 ()
specifier|public
name|void
name|testRecoveryV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecoveryInternal
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryUpgradeV1V2 ()
specifier|public
name|void
name|testRecoveryUpgradeV1V2
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecoveryInternal
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|validateContent (Path dir)
specifier|private
name|void
name|validateContent
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|validateContent
argument_list|(
operator|new
name|File
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateContent (File dir)
specifier|private
name|void
name|validateContent
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|partFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find "
operator|+
name|expectedFile
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuffer
name|expectedOutput
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key1
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|val1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|val1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|val2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key2
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|val2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|slurp
argument_list|(
name|expectedFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|output
argument_list|,
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateMapFileOutputContent ( FileSystem fs, Path dir)
specifier|private
name|void
name|validateMapFileOutputContent
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// map output is a directory with index and data files
name|Path
name|expectedMapDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|partFile
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|expectedMapDir
argument_list|)
operator|.
name|isDirectory
argument_list|()
operator|)
assert|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|expectedMapDir
argument_list|)
decl_stmt|;
name|int
name|fileCount
init|=
literal|0
decl_stmt|;
name|boolean
name|dataFileFound
init|=
literal|false
decl_stmt|;
name|boolean
name|indexFileFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
operator|++
name|fileCount
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MapFile
operator|.
name|INDEX_FILE_NAME
argument_list|)
condition|)
block|{
name|indexFileFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MapFile
operator|.
name|DATA_FILE_NAME
argument_list|)
condition|)
block|{
name|dataFileFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
assert|assert
operator|(
name|fileCount
operator|>
literal|0
operator|)
assert|;
assert|assert
operator|(
name|dataFileFound
operator|&&
name|indexFileFound
operator|)
assert|;
block|}
DECL|method|testCommitterInternal (int version, boolean taskCleanup)
specifier|private
name|void
name|testCommitterInternal
parameter_list|(
name|int
name|version
parameter_list|,
name|boolean
name|taskCleanup
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_TASK_CLEANUP_ENABLED
argument_list|,
name|taskCleanup
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// check task and job temp directories exist
name|File
name|jobOutputDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|FileOutputCommitter
operator|.
name|PENDING_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|taskOutputDir
init|=
operator|new
name|File
argument_list|(
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|committer
operator|.
name|getWorkPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"job temp dir does not exist"
argument_list|,
name|jobOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"task temp dir does not exist"
argument_list|,
name|taskOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"job temp dir does not exist"
argument_list|,
name|jobOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|1
operator|||
name|taskCleanup
condition|)
block|{
comment|// Task temp dir gets renamed in v1 and deleted if taskCleanup is
comment|// enabled in v2
name|assertFalse
argument_list|(
literal|"task temp dir still exists"
argument_list|,
name|taskOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// By default, in v2 the task temp dir is only deleted during commitJob
name|assertTrue
argument_list|(
literal|"task temp dir does not exist"
argument_list|,
name|taskOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Entire job temp directory gets deleted, including task temp dir
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"job temp dir still exists"
argument_list|,
name|jobOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"task temp dir still exists"
argument_list|,
name|taskOutputDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate output
name|validateContent
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterV1 ()
specifier|public
name|void
name|testCommitterV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterInternal
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterV2 ()
specifier|public
name|void
name|testCommitterV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterInternal
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterV2TaskCleanupEnabled ()
specifier|public
name|void
name|testCommitterV2TaskCleanupEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterInternal
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterWithDuplicatedCommitV1 ()
specifier|public
name|void
name|testCommitterWithDuplicatedCommitV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterWithDuplicatedCommitInternal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterWithDuplicatedCommitV2 ()
specifier|public
name|void
name|testCommitterWithDuplicatedCommitV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterWithDuplicatedCommitInternal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommitterWithDuplicatedCommitInternal (int version)
specifier|private
name|void
name|testCommitterWithDuplicatedCommitInternal
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
comment|// validate output
name|validateContent
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
comment|// commit job again on a successful commit job.
try|try
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Duplicate commit success: wrong behavior for version 1."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Duplicate commit failed: wrong behavior for version 2."
argument_list|)
expr_stmt|;
block|}
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterWithFailureV1 ()
specifier|public
name|void
name|testCommitterWithFailureV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterWithFailureInternal
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testCommitterWithFailureInternal
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterWithFailureV2 ()
specifier|public
name|void
name|testCommitterWithFailureV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterWithFailureInternal
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testCommitterWithFailureInternal
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommitterWithFailureInternal (int version, int maxAttempts)
specifier|private
name|void
name|testCommitterWithFailureInternal
parameter_list|(
name|int
name|version
parameter_list|,
name|int
name|maxAttempts
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS
argument_list|,
name|maxAttempts
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|CommitterWithFailedThenSucceed
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
try|try
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
comment|// (1,1), (1,2), (2,1) shouldn't reach to here.
if|if
condition|(
name|version
operator|==
literal|1
operator|||
name|maxAttempts
operator|<=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit successful: wrong behavior for version 1."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// (2,2) shouldn't reach to here.
if|if
condition|(
name|version
operator|==
literal|2
operator|&&
name|maxAttempts
operator|>
literal|2
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit failed: wrong behavior for version 2."
argument_list|)
expr_stmt|;
block|}
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterRepeatableV1 ()
specifier|public
name|void
name|testCommitterRepeatableV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterRetryInternal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterRepeatableV2 ()
specifier|public
name|void
name|testCommitterRepeatableV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testCommitterRetryInternal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// retry committer for 2 times.
DECL|method|testCommitterRetryInternal (int version)
specifier|private
name|void
name|testCommitterRetryInternal
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// only attempt for 1 time.
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|CommitterWithFailedThenSucceed
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
try|try
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit successful: wrong behavior for the first time "
operator|+
literal|"commit."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// commit again.
try|try
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
comment|// version 1 shouldn't reach to here.
if|if
condition|(
name|version
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit successful after retry: wrong behavior for "
operator|+
literal|"version 1."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit failed after retry: wrong behavior for"
operator|+
literal|" version 2."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|committer
operator|.
name|getJobAttemptPath
argument_list|(
name|jContext
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapFileOutputCommitterInternal (int version)
specifier|private
name|void
name|testMapFileOutputCommitterInternal
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|MapFileOutputFormat
name|theOutputFormat
init|=
operator|new
name|MapFileOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeMapFileOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do commit
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
comment|// Ensure getReaders call works and also ignores
comment|// hidden filenames (_ or . prefixes)
name|MapFile
operator|.
name|Reader
index|[]
name|readers
init|=
block|{}
decl_stmt|;
try|try
block|{
name|readers
operator|=
name|MapFileOutputFormat
operator|.
name|getReaders
argument_list|(
name|outDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// validate output
name|validateMapFileOutputContent
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|readers
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMapFileOutputCommitterV1 ()
specifier|public
name|void
name|testMapFileOutputCommitterV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testMapFileOutputCommitterInternal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapFileOutputCommitterV2 ()
specifier|public
name|void
name|testMapFileOutputCommitterV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testMapFileOutputCommitterInternal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidVersionNumber ()
specifier|public
name|void
name|testInvalidVersionNumber
parameter_list|()
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should've thrown an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//test passed
block|}
block|}
DECL|method|testAbortInternal (int version)
specifier|private
name|void
name|testAbortInternal
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// do setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do abort
name|committer
operator|.
name|abortTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|committer
operator|.
name|getWorkPath
argument_list|()
argument_list|,
name|partFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"task temp dir still exists"
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|committer
operator|.
name|abortJob
argument_list|(
name|jContext
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|expectedFile
operator|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|FileOutputCommitter
operator|.
name|PENDING_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"job temp dir still exists"
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output directory not empty"
argument_list|,
literal|0
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbortV1 ()
specifier|public
name|void
name|testAbortV1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testAbortInternal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbortV2 ()
specifier|public
name|void
name|testAbortV2
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testAbortInternal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeFileSystem
specifier|public
specifier|static
class|class
name|FakeFileSystem
extends|extends
name|RawLocalFileSystem
block|{
DECL|method|FakeFileSystem ()
specifier|public
name|FakeFileSystem
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"faildel:///"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path p, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|p
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fake delete failed"
argument_list|)
throw|;
block|}
block|}
DECL|method|testFailAbortInternal (int version)
specifier|private
name|void
name|testFailAbortInternal
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"faildel:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.faildel.impl"
argument_list|,
name|FakeFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
decl_stmt|;
name|FileOutputCommitter
name|committer
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
decl_stmt|;
comment|// do setup
name|committer
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
comment|// write output
name|TextOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|theRecordWriter
argument_list|,
name|tContext
argument_list|)
expr_stmt|;
comment|// do abort
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|committer
operator|.
name|abortTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake delete failed"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|jtd
init|=
name|committer
operator|.
name|getJobAttemptPath
argument_list|(
name|jContext
argument_list|)
decl_stmt|;
name|File
name|jobTmpDir
init|=
operator|new
name|File
argument_list|(
name|jtd
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|ttd
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|File
name|taskTmpDir
init|=
operator|new
name|File
argument_list|(
name|ttd
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
name|taskTmpDir
argument_list|,
name|partFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedFile
operator|+
literal|" does not exists"
argument_list|,
name|expectedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|th
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|committer
operator|.
name|abortJob
argument_list|(
name|jContext
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|th
operator|=
name|ie
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake delete failed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"job temp dir does not exists"
argument_list|,
name|jobTmpDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailAbortV1 ()
specifier|public
name|void
name|testFailAbortV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testFailAbortInternal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailAbortV2 ()
specifier|public
name|void
name|testFailAbortV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testFailAbortInternal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|class|RLFS
specifier|static
class|class
name|RLFS
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|needNull
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|needNull
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|initialValue
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
DECL|method|RLFS ()
specifier|public
name|RLFS
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needNull
operator|.
name|get
argument_list|()
operator|&&
name|OUT_SUB_DIR
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|needNull
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lie once per thread
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
DECL|method|testConcurrentCommitTaskWithSubDir (int version)
specifier|private
name|void
name|testConcurrentCommitTaskWithSubDir
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|RLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
specifier|final
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileOutputCommitter
name|amCommitter
init|=
operator|new
name|FileOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|jContext
argument_list|)
decl_stmt|;
name|amCommitter
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
specifier|final
name|TaskAttemptContext
index|[]
name|taCtx
init|=
operator|new
name|TaskAttemptContextImpl
index|[
literal|2
index|]
decl_stmt|;
name|taCtx
index|[
literal|0
index|]
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID
argument_list|)
expr_stmt|;
name|taCtx
index|[
literal|1
index|]
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskID1
argument_list|)
expr_stmt|;
specifier|final
name|TextOutputFormat
index|[]
name|tof
init|=
operator|new
name|TextOutputFormat
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tof
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tof
index|[
name|i
index|]
operator|=
operator|new
name|TextOutputFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|getDefaultWorkFile
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|String
name|extension
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileOutputCommitter
name|foc
init|=
operator|(
name|FileOutputCommitter
operator|)
name|getOutputCommitter
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|foc
operator|.
name|getWorkPath
argument_list|()
argument_list|,
name|SUB_DIR
argument_list|)
argument_list|,
name|getUniqueFile
argument_list|(
name|context
argument_list|,
name|getOutputName
argument_list|(
name|context
argument_list|)
argument_list|,
name|extension
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|ExecutorService
name|executor
init|=
name|HadoopExecutors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taCtx
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|taskIdx
init|=
name|i
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|OutputCommitter
name|outputCommitter
init|=
name|tof
index|[
name|taskIdx
index|]
operator|.
name|getOutputCommitter
argument_list|(
name|taCtx
index|[
name|taskIdx
index|]
argument_list|)
decl_stmt|;
name|outputCommitter
operator|.
name|setupTask
argument_list|(
name|taCtx
index|[
name|taskIdx
index|]
argument_list|)
expr_stmt|;
specifier|final
name|RecordWriter
name|rw
init|=
name|tof
index|[
name|taskIdx
index|]
operator|.
name|getRecordWriter
argument_list|(
name|taCtx
index|[
name|taskIdx
index|]
argument_list|)
decl_stmt|;
name|writeOutput
argument_list|(
name|rw
argument_list|,
name|taCtx
index|[
name|taskIdx
index|]
argument_list|)
expr_stmt|;
name|outputCommitter
operator|.
name|commitTask
argument_list|(
name|taCtx
index|[
name|taskIdx
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Awaiting thread termination!"
argument_list|)
expr_stmt|;
block|}
block|}
name|amCommitter
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
specifier|final
name|RawLocalFileSystem
name|lfs
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|lfs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Must not end up with sub_dir/sub_dir"
argument_list|,
name|lfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|OUT_SUB_DIR
argument_list|,
name|SUB_DIR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate output
name|validateContent
argument_list|(
name|OUT_SUB_DIR
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentCommitTaskWithSubDirV1 ()
specifier|public
name|void
name|testConcurrentCommitTaskWithSubDirV1
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentCommitTaskWithSubDir
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentCommitTaskWithSubDirV2 ()
specifier|public
name|void
name|testConcurrentCommitTaskWithSubDirV2
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentCommitTaskWithSubDir
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|slurp (File f)
specifier|public
specifier|static
name|String
name|slurp
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|f
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
comment|/**    * The class provides a overrided implementation of commitJobInternal which    * causes the commit failed for the first time then succeed.    */
DECL|class|CommitterWithFailedThenSucceed
specifier|public
specifier|static
class|class
name|CommitterWithFailedThenSucceed
extends|extends
name|FileOutputCommitter
block|{
DECL|field|firstTimeFail
name|boolean
name|firstTimeFail
init|=
literal|true
decl_stmt|;
DECL|method|CommitterWithFailedThenSucceed (Path outputPath, JobContext context)
specifier|public
name|CommitterWithFailedThenSucceed
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJobInternal (JobContext context)
specifier|protected
name|void
name|commitJobInternal
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|commitJobInternal
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstTimeFail
condition|)
block|{
name|firstTimeFail
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
else|else
block|{
comment|// succeed then, nothing to do
block|}
block|}
block|}
block|}
end_class

end_unit

