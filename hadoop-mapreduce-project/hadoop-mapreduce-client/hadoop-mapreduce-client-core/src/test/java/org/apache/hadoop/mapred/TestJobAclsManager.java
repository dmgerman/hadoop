begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the job acls manager  */
end_comment

begin_class
DECL|class|TestJobAclsManager
specifier|public
class|class
name|TestJobAclsManager
block|{
annotation|@
name|Test
DECL|method|testClusterAdmins ()
specifier|public
name|void
name|testClusterAdmins
parameter_list|()
block|{
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|tmpJobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jobOwner
init|=
literal|"testuser"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
name|jobOwner
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
name|jobOwner
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|clusterAdmin
init|=
literal|"testuser2"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
name|clusterAdmin
argument_list|)
expr_stmt|;
name|JobACLsManager
name|aclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpJobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
name|tmpJobACLs
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|clusterAdmin
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// cluster admin should have access
name|boolean
name|val
init|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cluster admin should have view access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cluster admin should have modify access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterNoAdmins ()
specifier|public
name|void
name|testClusterNoAdmins
parameter_list|()
block|{
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|tmpJobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jobOwner
init|=
literal|"testuser"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|noAdminUser
init|=
literal|"testuser2"
decl_stmt|;
name|JobACLsManager
name|aclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpJobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
name|tmpJobACLs
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|noAdminUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// random user should not have access
name|boolean
name|val
init|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"random user should not have view access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"random user should not have modify access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|jobOwner
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// Owner should have access
name|val
operator|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"owner should have view access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"owner should have modify access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclsOff ()
specifier|public
name|void
name|testAclsOff
parameter_list|()
block|{
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|tmpJobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jobOwner
init|=
literal|"testuser"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
name|jobOwner
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|noAdminUser
init|=
literal|"testuser2"
decl_stmt|;
name|JobACLsManager
name|aclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpJobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
name|tmpJobACLs
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|noAdminUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// acls off so anyone should have access
name|boolean
name|val
init|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"acls off so anyone should have access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroups ()
specifier|public
name|void
name|testGroups
parameter_list|()
block|{
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|tmpJobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jobOwner
init|=
literal|"testuser"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
name|jobOwner
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"testuser2"
decl_stmt|;
name|String
name|adminGroup
init|=
literal|"adminGroup"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
literal|" "
operator|+
name|adminGroup
argument_list|)
expr_stmt|;
name|JobACLsManager
name|aclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpJobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
name|tmpJobACLs
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user
argument_list|,
operator|new
name|String
index|[]
block|{
name|adminGroup
block|}
argument_list|)
decl_stmt|;
comment|// acls off so anyone should have access
name|boolean
name|val
init|=
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|,
name|jobOwner
argument_list|,
name|jobACLs
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"user in admin group should have access"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

