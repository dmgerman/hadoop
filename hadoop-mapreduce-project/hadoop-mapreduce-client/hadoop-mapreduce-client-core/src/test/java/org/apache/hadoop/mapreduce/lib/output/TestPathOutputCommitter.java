begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskInputOutputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_comment
comment|/**  * Test the path output committer binding to FileOutputFormat.  */
end_comment

begin_class
DECL|class|TestPathOutputCommitter
specifier|public
class|class
name|TestPathOutputCommitter
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testFileOutputCommitterOverrride ()
specifier|public
name|void
name|testFileOutputCommitterOverrride
parameter_list|()
throws|throws
name|Throwable
block|{
name|TaskContext
name|context
init|=
operator|new
name|TaskContext
argument_list|()
decl_stmt|;
name|Path
name|workPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///work"
argument_list|)
decl_stmt|;
name|context
operator|.
name|setOutputCommitter
argument_list|(
operator|new
name|SimpleCommitter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|context
argument_list|,
name|workPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|workPath
argument_list|,
name|FileOutputFormat
operator|.
name|getWorkOutputPath
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileOutputCommitterNullWorkPath ()
specifier|public
name|void
name|testFileOutputCommitterNullWorkPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|TaskContext
name|context
init|=
operator|new
name|TaskContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setOutputCommitter
argument_list|(
operator|new
name|SimpleCommitter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|FileOutputFormat
operator|.
name|getWorkOutputPath
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SimpleCommitter
specifier|private
specifier|static
class|class
name|SimpleCommitter
extends|extends
name|PathOutputCommitter
block|{
DECL|field|workPath
specifier|private
specifier|final
name|Path
name|workPath
decl_stmt|;
DECL|method|SimpleCommitter (Path outputPath, TaskAttemptContext context, Path workPath)
name|SimpleCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|,
name|Path
name|workPath
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|workPath
operator|=
name|workPath
expr_stmt|;
block|}
DECL|method|SimpleCommitter (Path outputPath, JobContext context, Path workPath)
name|SimpleCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|JobContext
name|context
parameter_list|,
name|Path
name|workPath
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|workPath
operator|=
name|workPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkPath ()
specifier|public
name|Path
name|getWorkPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|workPath
return|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext jobContext)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext taskContext)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{      }
block|}
comment|/**    * Stub task context.    */
DECL|class|TaskContext
specifier|public
class|class
name|TaskContext
implements|implements
name|TaskInputOutputContext
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
block|{
DECL|field|outputCommitter
specifier|private
name|OutputCommitter
name|outputCommitter
decl_stmt|;
DECL|method|setOutputCommitter (OutputCommitter outputCommitter)
specifier|public
name|void
name|setOutputCommitter
parameter_list|(
name|OutputCommitter
name|outputCommitter
parameter_list|)
block|{
name|this
operator|.
name|outputCommitter
operator|=
name|outputCommitter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOutputCommitter ()
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|()
block|{
return|return
name|outputCommitter
return|;
block|}
annotation|@
name|Override
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey ()
specifier|public
name|String
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentValue ()
specifier|public
name|String
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|write (String key, String value)
specifier|public
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
DECL|method|getTaskAttemptID ()
specifier|public
name|TaskAttemptID
name|getTaskAttemptID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String msg)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|msg
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (Enum<?> counterName)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|counterName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String groupName, String counterName)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNumReduceTasks ()
specifier|public
name|int
name|getNumReduceTasks
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputKeyClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getOutputKeyClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputValueClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getOutputValueClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMapOutputKeyClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getMapOutputKeyClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMapOutputValueClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getMapOutputValueClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getJobName ()
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getInputFormatClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getInputFormatClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMapperClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getMapperClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCombinerClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getCombinerClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getReducerClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getReducerClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputFormatClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getOutputFormatClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getPartitionerClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Partitioner
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getPartitionerClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSortComparator ()
specifier|public
name|RawComparator
argument_list|<
name|?
argument_list|>
name|getSortComparator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getJar ()
specifier|public
name|String
name|getJar
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCombinerKeyGroupingComparator ()
specifier|public
name|RawComparator
argument_list|<
name|?
argument_list|>
name|getCombinerKeyGroupingComparator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getGroupingComparator ()
specifier|public
name|RawComparator
argument_list|<
name|?
argument_list|>
name|getGroupingComparator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getJobSetupCleanupNeeded ()
specifier|public
name|boolean
name|getJobSetupCleanupNeeded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskCleanupNeeded ()
specifier|public
name|boolean
name|getTaskCleanupNeeded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileEnabled ()
specifier|public
name|boolean
name|getProfileEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileParams ()
specifier|public
name|String
name|getProfileParams
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileTaskRange (boolean isMap)
specifier|public
name|Configuration
operator|.
name|IntegerRanges
name|getProfileTaskRange
parameter_list|(
name|boolean
name|isMap
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSymlink ()
specifier|public
name|boolean
name|getSymlink
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getArchiveClassPaths ()
specifier|public
name|Path
index|[]
name|getArchiveClassPaths
parameter_list|()
block|{
return|return
operator|new
name|Path
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheArchives ()
specifier|public
name|URI
index|[]
name|getCacheArchives
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|URI
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheFiles ()
specifier|public
name|URI
index|[]
name|getCacheFiles
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|URI
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalCacheArchives ()
specifier|public
name|Path
index|[]
name|getLocalCacheArchives
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalCacheFiles ()
specifier|public
name|Path
index|[]
name|getLocalCacheFiles
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getFileClassPaths ()
specifier|public
name|Path
index|[]
name|getFileClassPaths
parameter_list|()
block|{
return|return
operator|new
name|Path
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getArchiveTimestamps ()
specifier|public
name|String
index|[]
name|getArchiveTimestamps
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getFileTimestamps ()
specifier|public
name|String
index|[]
name|getFileTimestamps
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxMapAttempts ()
specifier|public
name|int
name|getMaxMapAttempts
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxReduceAttempts ()
specifier|public
name|int
name|getMaxReduceAttempts
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

