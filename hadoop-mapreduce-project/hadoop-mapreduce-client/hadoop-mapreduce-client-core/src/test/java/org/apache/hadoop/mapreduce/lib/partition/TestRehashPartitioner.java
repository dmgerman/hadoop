begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.partition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestRehashPartitioner
specifier|public
class|class
name|TestRehashPartitioner
block|{
comment|/** number of partitions */
DECL|field|PARTITIONS
specifier|private
specifier|static
specifier|final
name|int
name|PARTITIONS
init|=
literal|32
decl_stmt|;
comment|/** step in sequence */
DECL|field|STEP
specifier|private
specifier|static
specifier|final
name|int
name|STEP
init|=
literal|3
decl_stmt|;
comment|/** end of test sequence */
DECL|field|END
specifier|private
specifier|static
specifier|final
name|int
name|END
init|=
literal|100000
decl_stmt|;
comment|/** maximum error for considering too big/small bucket */
DECL|field|MAX_ERROR
specifier|private
specifier|static
specifier|final
name|double
name|MAX_ERROR
init|=
literal|0.20
decl_stmt|;
comment|/** maximum number of oddly sized buckets */
DECL|field|MAX_BADBUCKETS
specifier|private
specifier|static
specifier|final
name|double
name|MAX_BADBUCKETS
init|=
literal|0.10
decl_stmt|;
comment|/** test partitioner for patterns */
annotation|@
name|Test
DECL|method|testPatterns ()
specifier|public
name|void
name|testPatterns
parameter_list|()
block|{
name|int
name|results
index|[]
init|=
operator|new
name|int
index|[
name|PARTITIONS
index|]
decl_stmt|;
name|RehashPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
name|p
init|=
operator|new
name|RehashPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
comment|/* test sequence 4, 8, 12, ... 128 */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|END
condition|;
name|i
operator|+=
name|STEP
control|)
block|{
name|results
index|[
name|p
operator|.
name|getPartition
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
literal|null
argument_list|,
name|PARTITIONS
argument_list|)
index|]
operator|++
expr_stmt|;
block|}
name|int
name|badbuckets
init|=
literal|0
decl_stmt|;
name|Integer
name|min
init|=
name|Collections
operator|.
name|min
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ArrayUtils
operator|.
name|toObject
argument_list|(
name|results
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|max
init|=
name|Collections
operator|.
name|max
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ArrayUtils
operator|.
name|toObject
argument_list|(
name|results
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|avg
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2.0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dumping buckets distribution: min="
operator|+
name|min
operator|+
literal|" avg="
operator|+
name|avg
operator|+
literal|" max="
operator|+
name|max
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PARTITIONS
condition|;
name|i
operator|++
control|)
block|{
name|double
name|var
init|=
operator|(
name|results
index|[
name|i
index|]
operator|-
name|avg
operator|)
operator|/
call|(
name|double
call|)
argument_list|(
name|avg
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"bucket "
operator|+
name|i
operator|+
literal|" "
operator|+
name|results
index|[
name|i
index|]
operator|+
literal|" items, variance "
operator|+
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|var
argument_list|)
operator|>
name|MAX_ERROR
condition|)
name|badbuckets
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|badbuckets
operator|+
literal|" of "
operator|+
name|PARTITIONS
operator|+
literal|" are too small or large buckets"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"too many overflow buckets"
argument_list|,
name|badbuckets
operator|<
name|PARTITIONS
operator|*
name|MAX_BADBUCKETS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

