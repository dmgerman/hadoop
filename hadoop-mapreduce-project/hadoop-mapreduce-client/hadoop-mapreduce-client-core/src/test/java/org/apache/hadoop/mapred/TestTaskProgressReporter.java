begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SortedRanges
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
operator|.
name|TaskCheckpointID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTaskProgressReporter
specifier|public
class|class
name|TestTaskProgressReporter
block|{
DECL|field|statusUpdateTimes
specifier|private
specifier|static
name|int
name|statusUpdateTimes
init|=
literal|0
decl_stmt|;
comment|// set to true if the thread is existed with ExitUtil.terminate
DECL|field|threadExited
specifier|volatile
name|boolean
name|threadExited
init|=
literal|false
decl_stmt|;
DECL|field|LOCAL_BYTES_WRITTEN
specifier|final
specifier|static
name|int
name|LOCAL_BYTES_WRITTEN
init|=
literal|1024
decl_stmt|;
DECL|field|fakeUmbilical
specifier|private
name|FakeUmbilical
name|fakeUmbilical
init|=
operator|new
name|FakeUmbilical
argument_list|()
decl_stmt|;
DECL|class|DummyTask
specifier|private
specifier|static
class|class
name|DummyTask
extends|extends
name|Task
block|{
annotation|@
name|Override
DECL|method|run (JobConf job, TaskUmbilicalProtocol umbilical)
specifier|public
name|void
name|run
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
DECL|method|isMapTask ()
specifier|public
name|boolean
name|isMapTask
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|FakeUmbilical
specifier|private
specifier|static
class|class
name|FakeUmbilical
implements|implements
name|TaskUmbilicalProtocol
block|{
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getTask (JvmContext context)
specifier|public
name|JvmTask
name|getTask
parameter_list|(
name|JvmContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|statusUpdate (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
name|AMFeedback
name|statusUpdate
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|statusUpdateTimes
operator|++
expr_stmt|;
name|AMFeedback
name|feedback
init|=
operator|new
name|AMFeedback
argument_list|()
decl_stmt|;
name|feedback
operator|.
name|setTaskFound
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|feedback
operator|.
name|setPreemption
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|feedback
return|;
block|}
annotation|@
name|Override
DECL|method|reportDiagnosticInfo (TaskAttemptID taskid, String trace)
specifier|public
name|void
name|reportDiagnosticInfo
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|String
name|trace
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|reportNextRecordRange (TaskAttemptID taskid, Range range)
specifier|public
name|void
name|reportNextRecordRange
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|Range
name|range
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|done (TaskAttemptID taskid)
specifier|public
name|void
name|done
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|commitPending (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
name|void
name|commitPending
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
DECL|method|canCommit (TaskAttemptID taskid)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|shuffleError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|shuffleError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|fsError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|fsError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|fatalError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|fatalError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|getMapCompletionEvents ( JobID jobId, int fromIndex, int maxLocs, TaskAttemptID id)
specifier|public
name|MapTaskCompletionEventsUpdate
name|getMapCompletionEvents
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|maxLocs
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|preempted (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
name|void
name|preempted
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
DECL|method|getCheckpointID (TaskID taskID)
specifier|public
name|TaskCheckpointID
name|getCheckpointID
parameter_list|(
name|TaskID
name|taskID
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setCheckpointID (TaskID tid, TaskCheckpointID cid)
specifier|public
name|void
name|setCheckpointID
parameter_list|(
name|TaskID
name|tid
parameter_list|,
name|TaskCheckpointID
name|cid
parameter_list|)
block|{     }
block|}
DECL|class|DummyTaskReporter
specifier|private
class|class
name|DummyTaskReporter
extends|extends
name|Task
operator|.
name|TaskReporter
block|{
DECL|field|taskLimitIsChecked
specifier|volatile
name|boolean
name|taskLimitIsChecked
init|=
literal|false
decl_stmt|;
DECL|method|DummyTaskReporter (Task task)
specifier|public
name|DummyTaskReporter
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|task
operator|.
name|super
argument_list|(
name|task
operator|.
name|getProgress
argument_list|()
argument_list|,
name|fakeUmbilical
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setProgress (float progress)
specifier|public
name|void
name|setProgress
parameter_list|(
name|float
name|progress
parameter_list|)
block|{
name|super
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkTaskLimits ()
specifier|protected
name|void
name|checkTaskLimits
parameter_list|()
throws|throws
name|TaskLimitException
block|{
name|taskLimitIsChecked
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|checkTaskLimits
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTaskProgress ()
specifier|public
name|void
name|testTaskProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_PROGRESS_REPORT_INTERVAL
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
operator|new
name|DummyTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|DummyTaskReporter
name|reporter
init|=
operator|new
name|DummyTaskReporter
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|reporter
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2100
argument_list|)
expr_stmt|;
name|task
operator|.
name|setTaskDone
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|resetDoneFlag
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusUpdateTimes
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testBytesWrittenRespectingLimit ()
specifier|public
name|void
name|testBytesWrittenRespectingLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add 1024 to the limit to account for writes not controlled by the test
name|testBytesWrittenLimit
argument_list|(
name|LOCAL_BYTES_WRITTEN
operator|+
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testBytesWrittenExceedingLimit ()
specifier|public
name|void
name|testBytesWrittenExceedingLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|testBytesWrittenLimit
argument_list|(
name|LOCAL_BYTES_WRITTEN
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is to test the limit on BYTES_WRITTEN. The test is limited in that    * the check is done only once at the first loop of TaskReport#run.    * @param limit the limit on BYTES_WRITTEN in local file system    * @param failFast should the task fail fast with such limit?    * @throws Exception    */
DECL|method|testBytesWrittenLimit (long limit, boolean failFast)
specifier|public
name|void
name|testBytesWrittenLimit
parameter_list|(
name|long
name|limit
parameter_list|,
name|boolean
name|failFast
parameter_list|)
throws|throws
name|Exception
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
name|threadExited
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|UncaughtExceptionHandler
name|h
init|=
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|th
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Uncaught exception: "
operator|+
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ExitUtil
operator|.
name|ExitException
condition|)
block|{
name|threadExited
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// To disable task reporter sleeping
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_PROGRESS_REPORT_INTERVAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_LOCAL_WRITE_LIMIT_BYTES
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testBytesWrittenLimit-tmpFile-"
operator|+
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|localFS
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|LOCAL_BYTES_WRITTEN
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Task
name|task
init|=
operator|new
name|DummyTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DummyTaskReporter
name|reporter
init|=
operator|new
name|DummyTaskReporter
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|reporter
argument_list|)
decl_stmt|;
name|t
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setProgressFlag
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|reporter
operator|.
name|taskLimitIsChecked
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
name|task
operator|.
name|setTaskDone
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|resetDoneFlag
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|failFast
argument_list|,
name|threadExited
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

