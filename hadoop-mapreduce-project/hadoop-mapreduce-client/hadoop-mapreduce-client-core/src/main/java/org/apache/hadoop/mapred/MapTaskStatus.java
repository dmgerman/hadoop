begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MapTaskStatus
class|class
name|MapTaskStatus
extends|extends
name|TaskStatus
block|{
DECL|field|mapFinishTime
specifier|private
name|long
name|mapFinishTime
init|=
literal|0
decl_stmt|;
DECL|method|MapTaskStatus ()
specifier|public
name|MapTaskStatus
parameter_list|()
block|{}
DECL|method|MapTaskStatus (TaskAttemptID taskid, float progress, int numSlots, State runState, String diagnosticInfo, String stateString, String taskTracker, Phase phase, Counters counters)
specifier|public
name|MapTaskStatus
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|float
name|progress
parameter_list|,
name|int
name|numSlots
parameter_list|,
name|State
name|runState
parameter_list|,
name|String
name|diagnosticInfo
parameter_list|,
name|String
name|stateString
parameter_list|,
name|String
name|taskTracker
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|Counters
name|counters
parameter_list|)
block|{
name|super
argument_list|(
name|taskid
argument_list|,
name|progress
argument_list|,
name|numSlots
argument_list|,
name|runState
argument_list|,
name|diagnosticInfo
argument_list|,
name|stateString
argument_list|,
name|taskTracker
argument_list|,
name|phase
argument_list|,
name|counters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIsMap ()
specifier|public
name|boolean
name|getIsMap
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Sets finishTime.     * @param finishTime finish time of task.    */
annotation|@
name|Override
DECL|method|setFinishTime (long finishTime)
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|super
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
comment|// set mapFinishTime if it hasn't been set before
if|if
condition|(
name|getMapFinishTime
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setMapFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getShuffleFinishTime() not supported for MapTask"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setShuffleFinishTime (long shuffleFinishTime)
name|void
name|setShuffleFinishTime
parameter_list|(
name|long
name|shuffleFinishTime
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setShuffleFinishTime() not supported for MapTask"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getMapFinishTime ()
specifier|public
name|long
name|getMapFinishTime
parameter_list|()
block|{
return|return
name|mapFinishTime
return|;
block|}
annotation|@
name|Override
DECL|method|setMapFinishTime (long mapFinishTime)
name|void
name|setMapFinishTime
parameter_list|(
name|long
name|mapFinishTime
parameter_list|)
block|{
name|this
operator|.
name|mapFinishTime
operator|=
name|mapFinishTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|statusUpdate (TaskStatus status)
specifier|synchronized
name|void
name|statusUpdate
parameter_list|(
name|TaskStatus
name|status
parameter_list|)
block|{
name|super
operator|.
name|statusUpdate
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getMapFinishTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|mapFinishTime
operator|=
name|status
operator|.
name|getMapFinishTime
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|mapFinishTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|mapFinishTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addFetchFailedMap (TaskAttemptID mapTaskId)
specifier|public
name|void
name|addFetchFailedMap
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"addFetchFailedMap() not supported for MapTask"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

