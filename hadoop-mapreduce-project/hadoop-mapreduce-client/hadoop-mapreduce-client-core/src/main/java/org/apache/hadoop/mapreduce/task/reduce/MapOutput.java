begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BoundedByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapOutputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_class
DECL|class|MapOutput
class|class
name|MapOutput
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapOutput
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ID
specifier|private
specifier|static
name|AtomicInteger
name|ID
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|WAIT
name|WAIT
block|,
DECL|enumConstant|MEMORY
name|MEMORY
block|,
DECL|enumConstant|DISK
name|DISK
block|}
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|merger
specifier|private
specifier|final
name|MergeManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
decl_stmt|;
DECL|field|mapId
specifier|private
specifier|final
name|TaskAttemptID
name|mapId
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
DECL|field|memory
specifier|private
specifier|final
name|byte
index|[]
name|memory
decl_stmt|;
DECL|field|byteStream
specifier|private
name|BoundedByteArrayOutputStream
name|byteStream
decl_stmt|;
DECL|field|localFS
specifier|private
specifier|final
name|FileSystem
name|localFS
decl_stmt|;
DECL|field|tmpOutputPath
specifier|private
specifier|final
name|Path
name|tmpOutputPath
decl_stmt|;
DECL|field|outputPath
specifier|private
specifier|final
name|Path
name|outputPath
decl_stmt|;
DECL|field|disk
specifier|private
specifier|final
name|OutputStream
name|disk
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|primaryMapOutput
specifier|private
specifier|final
name|boolean
name|primaryMapOutput
decl_stmt|;
DECL|method|MapOutput (TaskAttemptID mapId, MergeManager<K,V> merger, long size, JobConf conf, LocalDirAllocator localDirAllocator, int fetcher, boolean primaryMapOutput, MapOutputFile mapOutputFile)
name|MapOutput
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|MergeManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|long
name|size
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|LocalDirAllocator
name|localDirAllocator
parameter_list|,
name|int
name|fetcher
parameter_list|,
name|boolean
name|primaryMapOutput
parameter_list|,
name|MapOutputFile
name|mapOutputFile
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|ID
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapId
operator|=
name|mapId
expr_stmt|;
name|this
operator|.
name|merger
operator|=
name|merger
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|DISK
expr_stmt|;
name|memory
operator|=
literal|null
expr_stmt|;
name|byteStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|outputPath
operator|=
name|mapOutputFile
operator|.
name|getInputFileForWrite
argument_list|(
name|mapId
operator|.
name|getTaskID
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|tmpOutputPath
operator|=
name|outputPath
operator|.
name|suffix
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fetcher
argument_list|)
argument_list|)
expr_stmt|;
name|disk
operator|=
name|localFS
operator|.
name|create
argument_list|(
name|tmpOutputPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|primaryMapOutput
operator|=
name|primaryMapOutput
expr_stmt|;
block|}
DECL|method|MapOutput (TaskAttemptID mapId, MergeManager<K,V> merger, int size, boolean primaryMapOutput)
name|MapOutput
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|MergeManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merger
parameter_list|,
name|int
name|size
parameter_list|,
name|boolean
name|primaryMapOutput
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|ID
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapId
operator|=
name|mapId
expr_stmt|;
name|this
operator|.
name|merger
operator|=
name|merger
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|MEMORY
expr_stmt|;
name|byteStream
operator|=
operator|new
name|BoundedByteArrayOutputStream
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|memory
operator|=
name|byteStream
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|localFS
operator|=
literal|null
expr_stmt|;
name|disk
operator|=
literal|null
expr_stmt|;
name|outputPath
operator|=
literal|null
expr_stmt|;
name|tmpOutputPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|primaryMapOutput
operator|=
name|primaryMapOutput
expr_stmt|;
block|}
DECL|method|MapOutput (TaskAttemptID mapId)
specifier|public
name|MapOutput
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|ID
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapId
operator|=
name|mapId
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|WAIT
expr_stmt|;
name|merger
operator|=
literal|null
expr_stmt|;
name|memory
operator|=
literal|null
expr_stmt|;
name|byteStream
operator|=
literal|null
expr_stmt|;
name|size
operator|=
operator|-
literal|1
expr_stmt|;
name|localFS
operator|=
literal|null
expr_stmt|;
name|disk
operator|=
literal|null
expr_stmt|;
name|outputPath
operator|=
literal|null
expr_stmt|;
name|tmpOutputPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|primaryMapOutput
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|isPrimaryMapOutput ()
specifier|public
name|boolean
name|isPrimaryMapOutput
parameter_list|()
block|{
return|return
name|primaryMapOutput
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|MapOutput
condition|)
block|{
return|return
name|id
operator|==
operator|(
operator|(
name|MapOutput
operator|)
name|obj
operator|)
operator|.
name|id
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getOutputPath ()
specifier|public
name|Path
name|getOutputPath
parameter_list|()
block|{
return|return
name|outputPath
return|;
block|}
DECL|method|getMemory ()
specifier|public
name|byte
index|[]
name|getMemory
parameter_list|()
block|{
return|return
name|memory
return|;
block|}
DECL|method|getArrayStream ()
specifier|public
name|BoundedByteArrayOutputStream
name|getArrayStream
parameter_list|()
block|{
return|return
name|byteStream
return|;
block|}
DECL|method|getDisk ()
specifier|public
name|OutputStream
name|getDisk
parameter_list|()
block|{
return|return
name|disk
return|;
block|}
DECL|method|getMapId ()
specifier|public
name|TaskAttemptID
name|getMapId
parameter_list|()
block|{
return|return
name|mapId
return|;
block|}
DECL|method|getType ()
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|commit ()
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|MEMORY
condition|)
block|{
name|merger
operator|.
name|closeInMemoryFile
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DISK
condition|)
block|{
name|localFS
operator|.
name|rename
argument_list|(
name|tmpOutputPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|merger
operator|.
name|closeOnDiskFile
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot commit MapOutput of type WAIT!"
argument_list|)
throw|;
block|}
block|}
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|MEMORY
condition|)
block|{
name|merger
operator|.
name|unreserve
argument_list|(
name|memory
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DISK
condition|)
block|{
try|try
block|{
name|localFS
operator|.
name|delete
argument_list|(
name|tmpOutputPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"failure to clean up "
operator|+
name|tmpOutputPath
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot commit MapOutput with of type WAIT!"
argument_list|)
throw|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MapOutput("
operator|+
name|mapId
operator|+
literal|", "
operator|+
name|type
operator|+
literal|")"
return|;
block|}
DECL|class|MapOutputComparator
specifier|public
specifier|static
class|class
name|MapOutputComparator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|MapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|compare (MapOutput<K, V> o1, MapOutput<K, V> o2)
specifier|public
name|int
name|compare
parameter_list|(
name|MapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o1
parameter_list|,
name|MapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|id
operator|==
name|o2
operator|.
name|id
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|size
operator|<
name|o2
operator|.
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|size
operator|>
name|o2
operator|.
name|size
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|id
operator|<
name|o2
operator|.
name|id
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

