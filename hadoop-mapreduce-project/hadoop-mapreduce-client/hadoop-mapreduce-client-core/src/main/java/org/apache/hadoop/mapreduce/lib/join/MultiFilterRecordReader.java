begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Base class for Composite join returning values derived from multiple  * sources, but generally not tuples.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultiFilterRecordReader
specifier|public
specifier|abstract
class|class
name|MultiFilterRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|CompositeRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|V
argument_list|>
block|{
DECL|field|ivalue
specifier|private
name|TupleWritable
name|ivalue
init|=
literal|null
decl_stmt|;
DECL|method|MultiFilterRecordReader (int id, Configuration conf, int capacity, Class<? extends WritableComparator> cmpcl)
specifier|public
name|MultiFilterRecordReader
parameter_list|(
name|int
name|id
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|capacity
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|capacity
argument_list|,
name|cmpcl
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * For each tuple emitted, return a value (typically one of the values    * in the tuple).    * Modifying the Writables in the tuple is permitted and unlikely to affect    * join behavior in most cases, but it is not recommended. It's safer to    * clone first.    */
DECL|method|emit (TupleWritable dst)
specifier|protected
specifier|abstract
name|V
name|emit
parameter_list|(
name|TupleWritable
name|dst
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Default implementation offers {@link #emit} every Tuple from the    * collector (the outer join of child RRs).    */
DECL|method|combine (Object[] srcs, TupleWritable dst)
specifier|protected
name|boolean
name|combine
parameter_list|(
name|Object
index|[]
name|srcs
parameter_list|,
name|TupleWritable
name|dst
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|createKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|createValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jc
operator|.
name|flush
argument_list|(
name|ivalue
argument_list|)
condition|)
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|jc
operator|.
name|key
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|emit
argument_list|(
name|ivalue
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ivalue
operator|==
literal|null
condition|)
block|{
name|ivalue
operator|=
name|createTupleWritable
argument_list|()
expr_stmt|;
block|}
name|jc
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|q
init|=
name|getRecordReaderQueue
argument_list|()
decl_stmt|;
name|K
name|iterkey
init|=
name|createKey
argument_list|()
decl_stmt|;
while|while
condition|(
name|q
operator|!=
literal|null
operator|&&
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fillJoinCollector
argument_list|(
name|iterkey
argument_list|)
expr_stmt|;
name|jc
operator|.
name|reset
argument_list|(
name|iterkey
argument_list|)
expr_stmt|;
if|if
condition|(
name|jc
operator|.
name|flush
argument_list|(
name|ivalue
argument_list|)
condition|)
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|jc
operator|.
name|key
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|emit
argument_list|(
name|ivalue
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|jc
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return an iterator returning a single value from the tuple.    * @see MultiFilterDelegationIterator    */
DECL|method|getDelegate ()
specifier|protected
name|ResetableIterator
argument_list|<
name|V
argument_list|>
name|getDelegate
parameter_list|()
block|{
return|return
operator|new
name|MultiFilterDelegationIterator
argument_list|()
return|;
block|}
comment|/**    * Proxy the JoinCollector, but include callback to emit.    */
DECL|class|MultiFilterDelegationIterator
specifier|protected
class|class
name|MultiFilterDelegationIterator
implements|implements
name|ResetableIterator
argument_list|<
name|V
argument_list|>
block|{
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|jc
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next (V val)
specifier|public
name|boolean
name|next
parameter_list|(
name|V
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
decl_stmt|;
if|if
condition|(
name|ret
operator|=
name|jc
operator|.
name|flush
argument_list|(
name|ivalue
argument_list|)
condition|)
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|emit
argument_list|(
name|ivalue
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|replay (V val)
specifier|public
name|boolean
name|replay
parameter_list|(
name|V
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|emit
argument_list|(
name|ivalue
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|jc
operator|.
name|reset
argument_list|(
name|jc
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|add (V item)
specifier|public
name|void
name|add
parameter_list|(
name|V
name|item
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|jc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|jc
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

