begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|HashPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|LazyOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_comment
comment|/**  * The main entry point and job submitter. It may either be used as a command  * line-based or API-based method to launch Pipes jobs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Submitter
specifier|public
class|class
name|Submitter
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Submitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PRESERVE_COMMANDFILE
specifier|public
specifier|static
specifier|final
name|String
name|PRESERVE_COMMANDFILE
init|=
literal|"mapreduce.pipes.commandfile.preserve"
decl_stmt|;
DECL|field|EXECUTABLE
specifier|public
specifier|static
specifier|final
name|String
name|EXECUTABLE
init|=
literal|"mapreduce.pipes.executable"
decl_stmt|;
DECL|field|INTERPRETOR
specifier|public
specifier|static
specifier|final
name|String
name|INTERPRETOR
init|=
literal|"mapreduce.pipes.executable.interpretor"
decl_stmt|;
DECL|field|IS_JAVA_MAP
specifier|public
specifier|static
specifier|final
name|String
name|IS_JAVA_MAP
init|=
literal|"mapreduce.pipes.isjavamapper"
decl_stmt|;
DECL|field|IS_JAVA_RR
specifier|public
specifier|static
specifier|final
name|String
name|IS_JAVA_RR
init|=
literal|"mapreduce.pipes.isjavarecordreader"
decl_stmt|;
DECL|field|IS_JAVA_RW
specifier|public
specifier|static
specifier|final
name|String
name|IS_JAVA_RW
init|=
literal|"mapreduce.pipes.isjavarecordwriter"
decl_stmt|;
DECL|field|IS_JAVA_REDUCE
specifier|public
specifier|static
specifier|final
name|String
name|IS_JAVA_REDUCE
init|=
literal|"mapreduce.pipes.isjavareducer"
decl_stmt|;
DECL|field|PARTITIONER
specifier|public
specifier|static
specifier|final
name|String
name|PARTITIONER
init|=
literal|"mapreduce.pipes.partitioner"
decl_stmt|;
DECL|field|INPUT_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_FORMAT
init|=
literal|"mapreduce.pipes.inputformat"
decl_stmt|;
DECL|field|PORT
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
literal|"mapreduce.pipes.command.port"
decl_stmt|;
DECL|method|Submitter ()
specifier|public
name|Submitter
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Submitter (Configuration conf)
specifier|public
name|Submitter
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the URI of the application's executable.    * @param conf    * @return the URI where the application's executable is located    */
DECL|method|getExecutable (JobConf conf)
specifier|public
specifier|static
name|String
name|getExecutable
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|Submitter
operator|.
name|EXECUTABLE
argument_list|)
return|;
block|}
comment|/**    * Set the URI for the application's executable. Normally this is a hdfs:     * location.    * @param conf    * @param executable The URI of the application's executable.    */
DECL|method|setExecutable (JobConf conf, String executable)
specifier|public
specifier|static
name|void
name|setExecutable
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|executable
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|Submitter
operator|.
name|EXECUTABLE
argument_list|,
name|executable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set whether the job is using a Java RecordReader.    * @param conf the configuration to modify    * @param value the new value    */
DECL|method|setIsJavaRecordReader (JobConf conf, boolean value)
specifier|public
specifier|static
name|void
name|setIsJavaRecordReader
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_RR
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether the job is using a Java RecordReader    * @param conf the configuration to check    * @return is it a Java RecordReader?    */
DECL|method|getIsJavaRecordReader (JobConf conf)
specifier|public
specifier|static
name|boolean
name|getIsJavaRecordReader
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_RR
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether the Mapper is written in Java.    * @param conf the configuration to modify    * @param value the new value    */
DECL|method|setIsJavaMapper (JobConf conf, boolean value)
specifier|public
specifier|static
name|void
name|setIsJavaMapper
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_MAP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether the job is using a Java Mapper.    * @param conf the configuration to check    * @return is it a Java Mapper?    */
DECL|method|getIsJavaMapper (JobConf conf)
specifier|public
specifier|static
name|boolean
name|getIsJavaMapper
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_MAP
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether the Reducer is written in Java.    * @param conf the configuration to modify    * @param value the new value    */
DECL|method|setIsJavaReducer (JobConf conf, boolean value)
specifier|public
specifier|static
name|void
name|setIsJavaReducer
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_REDUCE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether the job is using a Java Reducer.    * @param conf the configuration to check    * @return is it a Java Reducer?    */
DECL|method|getIsJavaReducer (JobConf conf)
specifier|public
specifier|static
name|boolean
name|getIsJavaReducer
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_REDUCE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether the job will use a Java RecordWriter.    * @param conf the configuration to modify    * @param value the new value to set    */
DECL|method|setIsJavaRecordWriter (JobConf conf, boolean value)
specifier|public
specifier|static
name|void
name|setIsJavaRecordWriter
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_RW
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Will the reduce use a Java RecordWriter?    * @param conf the configuration to check    * @return true, if the output of the job will be written by Java    */
DECL|method|getIsJavaRecordWriter (JobConf conf)
specifier|public
specifier|static
name|boolean
name|getIsJavaRecordWriter
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_RW
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set the configuration, if it doesn't already have a value for the given    * key.    * @param conf the configuration to modify    * @param key the key to set    * @param value the new "default" value to set    */
DECL|method|setIfUnset (JobConf conf, String key, String value)
specifier|private
specifier|static
name|void
name|setIfUnset
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Save away the user's original partitioner before we override it.    * @param conf the configuration to modify    * @param cls the user's partitioner class    */
DECL|method|setJavaPartitioner (JobConf conf, Class cls)
specifier|static
name|void
name|setJavaPartitioner
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Class
name|cls
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|Submitter
operator|.
name|PARTITIONER
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the user's original partitioner.    * @param conf the configuration to look in    * @return the class that the user submitted    */
DECL|method|getJavaPartitioner (JobConf conf)
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Partitioner
argument_list|>
name|getJavaPartitioner
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
name|Submitter
operator|.
name|PARTITIONER
argument_list|,
name|HashPartitioner
operator|.
name|class
argument_list|,
name|Partitioner
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Does the user want to keep the command file for debugging? If this is    * true, pipes will write a copy of the command data to a file in the    * task directory named "downlink.data", which may be used to run the C++    * program under the debugger. You probably also want to set     * JobConf.setKeepFailedTaskFiles(true) to keep the entire directory from    * being deleted.    * To run using the data file, set the environment variable     * "mapreduce.pipes.commandfile" to point to the file.    * @param conf the configuration to check    * @return will the framework save the command file?    */
DECL|method|getKeepCommandFile (JobConf conf)
specifier|public
specifier|static
name|boolean
name|getKeepCommandFile
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Submitter
operator|.
name|PRESERVE_COMMANDFILE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether to keep the command file for debugging    * @param conf the configuration to modify    * @param keep the new value    */
DECL|method|setKeepCommandFile (JobConf conf, boolean keep)
specifier|public
specifier|static
name|void
name|setKeepCommandFile
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|boolean
name|keep
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Submitter
operator|.
name|PRESERVE_COMMANDFILE
argument_list|,
name|keep
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit a job to the map/reduce cluster. All of the necessary modifications    * to the job to run under pipes are made to the configuration.    * @param conf the job to submit to the cluster (MODIFIED)    * @throws IOException    * @deprecated Use {@link Submitter#runJob(JobConf)}    */
annotation|@
name|Deprecated
DECL|method|submitJob (JobConf conf)
specifier|public
specifier|static
name|RunningJob
name|submitJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|runJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Submit a job to the map/reduce cluster. All of the necessary modifications    * to the job to run under pipes are made to the configuration.    * @param conf the job to submit to the cluster (MODIFIED)    * @throws IOException    */
DECL|method|runJob (JobConf conf)
specifier|public
specifier|static
name|RunningJob
name|runJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setupPipesJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Submit a job to the Map-Reduce framework.    * This returns a handle to the {@link RunningJob} which can be used to track    * the running-job.    *     * @param conf the job configuration.    * @return a handle to the {@link RunningJob} which can be used to track the    *         running-job.    * @throws IOException    */
DECL|method|jobSubmit (JobConf conf)
specifier|public
specifier|static
name|RunningJob
name|jobSubmit
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setupPipesJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|setupPipesJob (JobConf conf)
specifier|private
specifier|static
name|void
name|setupPipesJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// default map output types to Text
if|if
condition|(
operator|!
name|getIsJavaMapper
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setMapRunnerClass
argument_list|(
name|PipesMapRunner
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Save the user's partitioner and hook in our's.
name|setJavaPartitioner
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|getPartitionerClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPartitionerClass
argument_list|(
name|PipesPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getIsJavaReducer
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setReducerClass
argument_list|(
name|PipesReducer
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getIsJavaRecordWriter
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|textClassname
init|=
name|Text
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_CLASS
argument_list|,
name|textClassname
argument_list|)
expr_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|MAP_OUTPUT_VALUE_CLASS
argument_list|,
name|textClassname
argument_list|)
expr_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|OUTPUT_KEY_CLASS
argument_list|,
name|textClassname
argument_list|)
expr_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|OUTPUT_VALUE_CLASS
argument_list|,
name|textClassname
argument_list|)
expr_stmt|;
comment|// Use PipesNonJavaInputFormat if necessary to handle progress reporting
comment|// from C++ RecordReaders ...
if|if
condition|(
operator|!
name|getIsJavaRecordReader
argument_list|(
name|conf
argument_list|)
operator|&&
operator|!
name|getIsJavaMapper
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|Submitter
operator|.
name|INPUT_FORMAT
argument_list|,
name|conf
operator|.
name|getInputFormat
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|InputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|PipesNonJavaInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|exec
init|=
name|getExecutable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|exec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No application program defined."
argument_list|)
throw|;
block|}
comment|// add default debug script only when executable is expressed as
comment|//<path>#<executable>
if|if
condition|(
name|exec
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|// set default gdb commands for map and reduce task
name|String
name|defScript
init|=
literal|"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script"
decl_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|MAP_DEBUG_SCRIPT
argument_list|,
name|defScript
argument_list|)
expr_stmt|;
name|setIfUnset
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_DEBUG_SCRIPT
argument_list|,
name|defScript
argument_list|)
expr_stmt|;
block|}
name|URI
index|[]
name|fileCache
init|=
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileCache
operator|==
literal|null
condition|)
block|{
name|fileCache
operator|=
operator|new
name|URI
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|URI
index|[]
name|tmp
init|=
operator|new
name|URI
index|[
name|fileCache
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileCache
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
literal|1
argument_list|,
name|fileCache
operator|.
name|length
argument_list|)
expr_stmt|;
name|fileCache
operator|=
name|tmp
expr_stmt|;
block|}
try|try
block|{
name|fileCache
index|[
literal|0
index|]
operator|=
operator|new
name|URI
argument_list|(
name|exec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|IOException
name|ie
init|=
operator|new
name|IOException
argument_list|(
literal|"Problem parsing execable URI "
operator|+
name|exec
argument_list|)
decl_stmt|;
name|ie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
name|DistributedCache
operator|.
name|setCacheFiles
argument_list|(
name|fileCache
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * A command line parser for the CLI-based Pipes job submitter.    */
DECL|class|CommandLineParser
specifier|static
class|class
name|CommandLineParser
block|{
DECL|field|options
specifier|private
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|method|addOption (String longName, boolean required, String description, String paramName)
name|void
name|addOption
parameter_list|(
name|String
name|longName
parameter_list|,
name|boolean
name|required
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|paramName
parameter_list|)
block|{
name|Option
name|option
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
name|paramName
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withDescription
argument_list|(
name|description
argument_list|)
operator|.
name|isRequired
argument_list|(
name|required
argument_list|)
operator|.
name|create
argument_list|(
name|longName
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
DECL|method|addArgument (String name, boolean required, String description)
name|void
name|addArgument
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|required
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|Option
name|option
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
name|name
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withDescription
argument_list|(
name|description
argument_list|)
operator|.
name|isRequired
argument_list|(
name|required
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
DECL|method|createParser ()
name|Parser
name|createParser
parameter_list|()
block|{
name|Parser
name|result
init|=
operator|new
name|BasicParser
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|printUsage ()
name|void
name|printUsage
parameter_list|()
block|{
comment|// The CLI package should do this for us, but I can't figure out how
comment|// to make it print something reasonable.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: pipes "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-input<path>] // Input directory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-output<path>] // Output directory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-jar<jar file> // jar filename"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-inputformat<class>] // InputFormat class"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-map<class>] // Java Map class"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-partitioner<class>] // Java Partitioner"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-reduce<class>] // Java Reduce class"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-writer<class>] // Java RecordWriter"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-program<executable>] // executable URI"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-reduces<num>] // number of reduces"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [-lazyOutput<true/false>] // createOutputLazily"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|GenericOptionsParser
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|InterfaceType
parameter_list|>
DECL|method|getClass (CommandLine cl, String key, JobConf conf, Class<InterfaceType> cls )
name|Class
argument_list|<
name|?
extends|extends
name|InterfaceType
argument_list|>
name|getClass
parameter_list|(
name|CommandLine
name|cl
parameter_list|,
name|String
name|key
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Class
argument_list|<
name|InterfaceType
argument_list|>
name|cls
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|conf
operator|.
name|getClassByName
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|cls
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLineParser
name|cli
init|=
operator|new
name|CommandLineParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|cli
operator|.
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|cli
operator|.
name|addOption
argument_list|(
literal|"input"
argument_list|,
literal|false
argument_list|,
literal|"input path to the maps"
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|"output path from the reduces"
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"jar"
argument_list|,
literal|false
argument_list|,
literal|"job jar file"
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"inputformat"
argument_list|,
literal|false
argument_list|,
literal|"java classname of InputFormat"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
comment|//cli.addArgument("javareader", false, "is the RecordReader in Java");
name|cli
operator|.
name|addOption
argument_list|(
literal|"map"
argument_list|,
literal|false
argument_list|,
literal|"java classname of Mapper"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"partitioner"
argument_list|,
literal|false
argument_list|,
literal|"java classname of Partitioner"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"reduce"
argument_list|,
literal|false
argument_list|,
literal|"java classname of Reducer"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"writer"
argument_list|,
literal|false
argument_list|,
literal|"java classname of OutputFormat"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"program"
argument_list|,
literal|false
argument_list|,
literal|"URI to application executable"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"reduces"
argument_list|,
literal|false
argument_list|,
literal|"number of reduces"
argument_list|,
literal|"num"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"jobconf"
argument_list|,
literal|false
argument_list|,
literal|"\"n1=v1,n2=v2,..\" (Deprecated) Optional. Add or override a JobConf property."
argument_list|,
literal|"key=val"
argument_list|)
expr_stmt|;
name|cli
operator|.
name|addOption
argument_list|(
literal|"lazyOutput"
argument_list|,
literal|false
argument_list|,
literal|"Optional. Create output lazily"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
name|cli
operator|.
name|createParser
argument_list|()
decl_stmt|;
try|try
block|{
name|GenericOptionsParser
name|genericParser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|CommandLine
name|results
init|=
name|parser
operator|.
name|parse
argument_list|(
name|cli
operator|.
name|options
argument_list|,
name|genericParser
operator|.
name|getRemainingArgs
argument_list|()
argument_list|)
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"input"
argument_list|)
condition|)
block|{
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"input"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"output"
argument_list|)
condition|)
block|{
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"output"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
name|job
operator|.
name|setJar
argument_list|(
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"inputformat"
argument_list|)
condition|)
block|{
name|setIsJavaRecordReader
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|getClass
argument_list|(
name|results
argument_list|,
literal|"inputformat"
argument_list|,
name|job
argument_list|,
name|InputFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"javareader"
argument_list|)
condition|)
block|{
name|setIsJavaRecordReader
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"map"
argument_list|)
condition|)
block|{
name|setIsJavaMapper
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|getClass
argument_list|(
name|results
argument_list|,
literal|"map"
argument_list|,
name|job
argument_list|,
name|Mapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"partitioner"
argument_list|)
condition|)
block|{
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|getClass
argument_list|(
name|results
argument_list|,
literal|"partitioner"
argument_list|,
name|job
argument_list|,
name|Partitioner
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"reduce"
argument_list|)
condition|)
block|{
name|setIsJavaReducer
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|getClass
argument_list|(
name|results
argument_list|,
literal|"reduce"
argument_list|,
name|job
argument_list|,
name|Reducer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"reduces"
argument_list|)
condition|)
block|{
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"reduces"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"writer"
argument_list|)
condition|)
block|{
name|setIsJavaRecordWriter
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|getClass
argument_list|(
name|results
argument_list|,
literal|"writer"
argument_list|,
name|job
argument_list|,
name|OutputFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"lazyOutput"
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"lazyOutput"
argument_list|)
argument_list|)
condition|)
block|{
name|LazyOutputFormat
operator|.
name|setOutputFormatClass
argument_list|(
name|job
argument_list|,
name|job
operator|.
name|getOutputFormat
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"program"
argument_list|)
condition|)
block|{
name|setExecutable
argument_list|(
name|job
argument_list|,
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"program"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hasOption
argument_list|(
literal|"jobconf"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-jobconf option is deprecated, please use -D instead."
argument_list|)
expr_stmt|;
name|String
name|options
init|=
name|results
operator|.
name|getOptionValue
argument_list|(
literal|"jobconf"
argument_list|)
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|options
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|keyVal
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
index|[]
name|keyValSplit
init|=
name|keyVal
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|keyValSplit
index|[
literal|0
index|]
argument_list|,
name|keyValSplit
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if they gave us a jar file, include it into the class path
name|String
name|jarFile
init|=
name|job
operator|.
name|getJar
argument_list|()
decl_stmt|;
if|if
condition|(
name|jarFile
operator|!=
literal|null
condition|)
block|{
specifier|final
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[]
block|{
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
operator|.
name|pathToFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarFile
argument_list|)
argument_list|)
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
comment|//FindBugs complains that creating a URLClassLoader should be
comment|//in a doPrivileged() block.
name|ClassLoader
name|loader
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|job
operator|.
name|setClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error : "
operator|+
name|pe
argument_list|)
expr_stmt|;
name|cli
operator|.
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|/**    * Submit a pipes job based on the command line arguments.    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
operator|new
name|Submitter
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

