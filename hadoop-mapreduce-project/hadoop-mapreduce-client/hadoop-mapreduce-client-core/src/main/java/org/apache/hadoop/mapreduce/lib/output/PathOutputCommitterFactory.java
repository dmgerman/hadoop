begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A factory for committers implementing the {@link PathOutputCommitter}  * methods, and so can be used from {@link FileOutputFormat}.  * The base implementation returns {@link FileOutputCommitter} instances.  *  * Algorithm:  *<ol>  *<li>If an explicit committer factory is named, it is used.</li>  *<li>The output path is examined.  *   If is non null and there is an explicit schema for that filesystem,  *   its factory is instantiated.</li>  *<li>Otherwise, an instance of {@link FileOutputCommitter} is  *   created.</li>  *</ol>  *  * In {@link FileOutputFormat}, the created factory has its method  * {@link #createOutputCommitter(Path, TaskAttemptContext)} with a task  * attempt context and a possibly null path.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PathOutputCommitterFactory
specifier|public
class|class
name|PathOutputCommitterFactory
extends|extends
name|Configured
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PathOutputCommitterFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Name of the configuration option used to configure the    * output committer factory to use unless there is a specific    * one for a schema.    */
DECL|field|COMMITTER_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|COMMITTER_FACTORY_CLASS
init|=
literal|"mapreduce.outputcommitter.factory.class"
decl_stmt|;
comment|/**    * Scheme prefix for per-filesystem scheme committers.    */
DECL|field|COMMITTER_FACTORY_SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|COMMITTER_FACTORY_SCHEME
init|=
literal|"mapreduce.outputcommitter.factory.scheme"
decl_stmt|;
comment|/**    * String format pattern for per-filesystem scheme committers.    */
DECL|field|COMMITTER_FACTORY_SCHEME_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|COMMITTER_FACTORY_SCHEME_PATTERN
init|=
name|COMMITTER_FACTORY_SCHEME
operator|+
literal|".%s"
decl_stmt|;
comment|/**    * The {@link FileOutputCommitter} factory.    */
DECL|field|FILE_COMMITTER_FACTORY
specifier|public
specifier|static
specifier|final
name|String
name|FILE_COMMITTER_FACTORY
init|=
literal|"org.apache.hadoop.mapreduce.lib.output.FileOutputCommitterFactory"
decl_stmt|;
comment|/**    * The {@link FileOutputCommitter} factory.    */
DECL|field|NAMED_COMMITTER_FACTORY
specifier|public
specifier|static
specifier|final
name|String
name|NAMED_COMMITTER_FACTORY
init|=
literal|"org.apache.hadoop.mapreduce.lib.output.NamedCommitterFactory"
decl_stmt|;
comment|/**    * The named output committer.    * Creates any committer listed in    */
DECL|field|NAMED_COMMITTER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|NAMED_COMMITTER_CLASS
init|=
literal|"mapreduce.outputcommitter.named.classname"
decl_stmt|;
comment|/**    * Default committer factory name: {@value}.    */
DECL|field|COMMITTER_FACTORY_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|COMMITTER_FACTORY_DEFAULT
init|=
name|FILE_COMMITTER_FACTORY
decl_stmt|;
comment|/**    * Create an output committer for a task attempt.    * @param outputPath output path. This may be null.    * @param context context    * @return a new committer    * @throws IOException problems instantiating the committer    */
DECL|method|createOutputCommitter ( Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFileOutputCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**    * Create an instance of the default committer, a {@link FileOutputCommitter}    * for a task.    * @param outputPath the task's output path, or or null if no output path    * has been defined.    * @param context the task attempt context    * @return the committer to use    * @throws IOException problems instantiating the committer    */
DECL|method|createFileOutputCommitter ( Path outputPath, TaskAttemptContext context)
specifier|protected
specifier|final
name|PathOutputCommitter
name|createFileOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating FileOutputCommitter for path {} and context {}"
argument_list|,
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileOutputCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**    * Get the committer factory for a configuration.    * @param outputPath the job's output path. If null, it means that the    * schema is unknown and a per-schema factory cannot be determined.    * @param conf configuration    * @return an instantiated committer factory    */
DECL|method|getCommitterFactory ( Path outputPath, Configuration conf)
specifier|public
specifier|static
name|PathOutputCommitterFactory
name|getCommitterFactory
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// determine which key to look up the overall one or a schema-specific
comment|// key
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for committer factory for path {}"
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|COMMITTER_FACTORY_CLASS
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
argument_list|)
operator|&&
name|outputPath
operator|!=
literal|null
condition|)
block|{
comment|// there is no explicit factory and there's an output path
comment|// Get the scheme of the destination
name|String
name|scheme
init|=
name|outputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|// and see if it has a key
name|String
name|schemeKey
init|=
name|String
operator|.
name|format
argument_list|(
name|COMMITTER_FACTORY_SCHEME_PATTERN
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|schemeKey
argument_list|)
argument_list|)
condition|)
block|{
comment|// it does, so use that key in the classname lookup
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using schema-specific factory for {}"
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|key
operator|=
name|schemeKey
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No scheme-specific factory defined in {}"
argument_list|,
name|schemeKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create the factory. Before using Configuration.getClass, check
comment|// for an empty configuration value, as that raises ClassNotFoundException.
name|Class
argument_list|<
name|?
extends|extends
name|PathOutputCommitterFactory
argument_list|>
name|factory
decl_stmt|;
name|String
name|trimmedValue
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|trimmedValue
argument_list|)
condition|)
block|{
comment|// empty/null value, use default
name|LOG
operator|.
name|debug
argument_list|(
literal|"No output committer factory defined,"
operator|+
literal|" defaulting to FileOutputCommitterFactory"
argument_list|)
expr_stmt|;
name|factory
operator|=
name|FileOutputCommitterFactory
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
comment|// key is set, get the class
name|factory
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|key
argument_list|,
name|FileOutputCommitterFactory
operator|.
name|class
argument_list|,
name|PathOutputCommitterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using OutputCommitter factory class {} from key {}"
argument_list|,
name|factory
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create the committer factory for a task attempt and destination, then    * create the committer from it.    * @param outputPath the task's output path, or or null if no output path    * has been defined.    * @param context the task attempt context    * @return the committer to use    * @throws IOException problems instantiating the committer    */
DECL|method|createCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
specifier|static
name|PathOutputCommitter
name|createCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getCommitterFactory
argument_list|(
name|outputPath
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|createOutputCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

