begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_comment
comment|/**************************************************  * Describes the current status of a job.  This is  * not intended to be a comprehensive piece of data.  * For that, look at JobProfile.  *************************************************  **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|JobStatus
specifier|public
class|class
name|JobStatus
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
block|{
DECL|field|RUNNING
specifier|public
specifier|static
specifier|final
name|int
name|RUNNING
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|SUCCEEDED
specifier|public
specifier|static
specifier|final
name|int
name|SUCCEEDED
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|FAILED
specifier|public
specifier|static
specifier|final
name|int
name|FAILED
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|PREP
specifier|public
specifier|static
specifier|final
name|int
name|PREP
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|PREP
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|KILLED
specifier|public
specifier|static
specifier|final
name|int
name|KILLED
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|UNKNOWN
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"UNKNOWN"
decl_stmt|;
DECL|field|runStates
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|runStates
init|=
block|{
name|UNKNOWN
block|,
literal|"RUNNING"
block|,
literal|"SUCCEEDED"
block|,
literal|"FAILED"
block|,
literal|"PREP"
block|,
literal|"KILLED"
block|}
decl_stmt|;
comment|/**    * Helper method to get human-readable state of the job.    * @param state job state    * @return human-readable state of the job    */
DECL|method|getJobRunState (int state)
specifier|public
specifier|static
name|String
name|getJobRunState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|<
literal|1
operator|||
name|state
operator|>=
name|runStates
operator|.
name|length
condition|)
block|{
return|return
name|UNKNOWN
return|;
block|}
return|return
name|runStates
index|[
name|state
index|]
return|;
block|}
DECL|method|getEnum (int state)
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
name|getEnum
parameter_list|(
name|int
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
literal|1
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
return|;
case|case
literal|2
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
return|;
case|case
literal|3
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
return|;
case|case
literal|4
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|PREP
return|;
case|case
literal|5
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    */
DECL|method|JobStatus ()
specifier|public
name|JobStatus
parameter_list|()
block|{   }
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param cleanupProgress The progress made on cleanup    * @param runState The current state of the job    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.    */
DECL|method|JobStatus (JobID jobid, float mapProgress, float reduceProgress, float cleanupProgress, int runState, String user, String jobName, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param runState The current state of the job    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.    */
DECL|method|JobStatus (JobID jobid, float mapProgress, float reduceProgress, int runState, String user, String jobName, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
literal|0.0f
argument_list|,
name|runState
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param runState The current state of the job    * @param jp Priority of the job.    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.    */
DECL|method|JobStatus (JobID jobid, float mapProgress, float reduceProgress, float cleanupProgress, int runState, JobPriority jp, String user, String jobName, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
literal|0.0f
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param setupProgress The progress made on the setup    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param cleanupProgress The progress made on the cleanup    * @param runState The current state of the job    * @param jp Priority of the job.    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.    */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, int runState, JobPriority jp, String user, String jobName, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
literal|"default"
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
comment|/**     * Create a job status object for a given jobid.     * @param jobid The jobid of the job     * @param setupProgress The progress made on the setup     * @param mapProgress The progress made on the maps     * @param reduceProgress The progress made on the reduces     * @param cleanupProgress The progress made on the cleanup     * @param runState The current state of the job     * @param jp Priority of the job.     * @param user userid of the person who submitted the job.     * @param jobName user-specified job name.     * @param jobFile job configuration file.      * @param trackingUrl link to the web-ui for details of the job.     * @param isUber Whether job running in uber mode     */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, int runState, JobPriority jp, String user, String jobName, String jobFile, String trackingUrl, boolean isUber)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|isUber
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
literal|"default"
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
name|isUber
argument_list|)
expr_stmt|;
block|}
comment|/**     * Create a job status object for a given jobid.     * @param jobid The jobid of the job     * @param setupProgress The progress made on the setup     * @param mapProgress The progress made on the maps     * @param reduceProgress The progress made on the reduces     * @param cleanupProgress The progress made on the cleanup     * @param runState The current state of the job     * @param jp Priority of the job.     * @param user userid of the person who submitted the job.     * @param jobName user-specified job name.     * @param queue job queue name.     * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.     */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, int runState, JobPriority jp, String user, String jobName, String queue, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|queue
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**     * Create a job status object for a given jobid.     * @param jobid The jobid of the job     * @param setupProgress The progress made on the setup     * @param mapProgress The progress made on the maps     * @param reduceProgress The progress made on the reduces     * @param cleanupProgress The progress made on the cleanup     * @param runState The current state of the job     * @param jp Priority of the job.     * @param user userid of the person who submitted the job.     * @param jobName user-specified job name.     * @param queue job queue name.     * @param jobFile job configuration file.      * @param trackingUrl link to the web-ui for details of the job.     * @param isUber Whether job running in uber mode     */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, int runState, JobPriority jp, String user, String jobName, String queue, String jobFile, String trackingUrl, boolean isUber)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|int
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|isUber
parameter_list|)
block|{
name|super
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|getEnum
argument_list|(
name|runState
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|jp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|queue
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
name|isUber
argument_list|)
expr_stmt|;
block|}
DECL|method|downgrade (org.apache.hadoop.mapreduce.JobStatus stat)
specifier|public
specifier|static
name|JobStatus
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
name|stat
parameter_list|)
block|{
name|JobStatus
name|old
init|=
operator|new
name|JobStatus
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|stat
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|,
name|stat
operator|.
name|getSetupProgress
argument_list|()
argument_list|,
name|stat
operator|.
name|getMapProgress
argument_list|()
argument_list|,
name|stat
operator|.
name|getReduceProgress
argument_list|()
argument_list|,
name|stat
operator|.
name|getCleanupProgress
argument_list|()
argument_list|,
name|stat
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|stat
operator|.
name|getPriority
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|stat
operator|.
name|getUsername
argument_list|()
argument_list|,
name|stat
operator|.
name|getJobName
argument_list|()
argument_list|,
name|stat
operator|.
name|getQueue
argument_list|()
argument_list|,
name|stat
operator|.
name|getJobFile
argument_list|()
argument_list|,
name|stat
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|stat
operator|.
name|isUber
argument_list|()
argument_list|)
decl_stmt|;
name|old
operator|.
name|setStartTime
argument_list|(
name|stat
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|old
operator|.
name|setFinishTime
argument_list|(
name|stat
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|old
operator|.
name|setSchedulingInfo
argument_list|(
name|stat
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|old
operator|.
name|setHistoryFile
argument_list|(
name|stat
operator|.
name|getHistoryFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
comment|/**    * @deprecated use getJobID instead    */
annotation|@
name|Deprecated
DECL|method|getJobId ()
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return The jobid of the Job    */
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|JobID
operator|.
name|downgrade
argument_list|(
name|super
operator|.
name|getJobID
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return the priority of the job    * @return job priority    */
DECL|method|getJobPriority ()
specifier|public
specifier|synchronized
name|JobPriority
name|getJobPriority
parameter_list|()
block|{
return|return
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|super
operator|.
name|getPriority
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**     * Sets the map progress of this job     * @param p The value of map progress to set to     */
DECL|method|setMapProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setMapProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|super
operator|.
name|setMapProgress
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**     * Sets the cleanup progress of this job     * @param p The value of cleanup progress to set to     */
DECL|method|setCleanupProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setCleanupProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|super
operator|.
name|setCleanupProgress
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**     * Sets the setup progress of this job     * @param p The value of setup progress to set to     */
DECL|method|setSetupProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setSetupProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|super
operator|.
name|setSetupProgress
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**     * Sets the reduce progress of this Job     * @param p The value of reduce progress to set to     */
DECL|method|setReduceProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setReduceProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|super
operator|.
name|setReduceProgress
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the finish time of the job     * @param finishTime The finishTime of the job     */
DECL|method|setFinishTime (long finishTime)
specifier|protected
specifier|synchronized
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|super
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set the job history file url for a completed job     */
DECL|method|setHistoryFile (String historyFile)
specifier|protected
specifier|synchronized
name|void
name|setHistoryFile
parameter_list|(
name|String
name|historyFile
parameter_list|)
block|{
name|super
operator|.
name|setHistoryFile
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set the link to the web-ui for details of the job.     */
DECL|method|setTrackingUrl (String trackingUrl)
specifier|protected
specifier|synchronized
name|void
name|setTrackingUrl
parameter_list|(
name|String
name|trackingUrl
parameter_list|)
block|{
name|super
operator|.
name|setTrackingUrl
argument_list|(
name|trackingUrl
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set the job retire flag to true.     */
DECL|method|setRetired ()
specifier|protected
specifier|synchronized
name|void
name|setRetired
parameter_list|()
block|{
name|super
operator|.
name|setRetired
argument_list|()
expr_stmt|;
block|}
comment|/**     * Change the current run state of the job.     */
DECL|method|setRunState (int state)
specifier|protected
specifier|synchronized
name|void
name|setRunState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|super
operator|.
name|setState
argument_list|(
name|getEnum
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * @return running state of the job     */
DECL|method|getRunState ()
specifier|public
specifier|synchronized
name|int
name|getRunState
parameter_list|()
block|{
return|return
name|super
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Set the start time of the job     * @param startTime The startTime of the job     */
DECL|method|setStartTime (long startTime)
specifier|protected
specifier|synchronized
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|super
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**     * @param userName The username of the job     */
DECL|method|setUsername (String userName)
specifier|protected
specifier|synchronized
name|void
name|setUsername
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|super
operator|.
name|setUsername
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Used to set the scheduling information associated to a particular Job.     *      * @param schedulingInfo Scheduling information of the job     */
DECL|method|setSchedulingInfo (String schedulingInfo)
specifier|protected
specifier|synchronized
name|void
name|setSchedulingInfo
parameter_list|(
name|String
name|schedulingInfo
parameter_list|)
block|{
name|super
operator|.
name|setSchedulingInfo
argument_list|(
name|schedulingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|setJobACLs (Map<JobACL, AccessControlList> acls)
specifier|protected
specifier|synchronized
name|void
name|setJobACLs
parameter_list|(
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
parameter_list|)
block|{
name|super
operator|.
name|setJobACLs
argument_list|(
name|acls
argument_list|)
expr_stmt|;
block|}
DECL|method|setFailureInfo (String failureInfo)
specifier|public
specifier|synchronized
name|void
name|setFailureInfo
parameter_list|(
name|String
name|failureInfo
parameter_list|)
block|{
name|super
operator|.
name|setFailureInfo
argument_list|(
name|failureInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the priority of the job, defaulting to NORMAL.    * @param jp new job priority    */
DECL|method|setJobPriority (JobPriority jp)
specifier|public
specifier|synchronized
name|void
name|setJobPriority
parameter_list|(
name|JobPriority
name|jp
parameter_list|)
block|{
name|super
operator|.
name|setPriority
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|jp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * @return Percentage of progress in maps      */
DECL|method|mapProgress ()
specifier|public
specifier|synchronized
name|float
name|mapProgress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getMapProgress
argument_list|()
return|;
block|}
comment|/**     * @return Percentage of progress in cleanup      */
DECL|method|cleanupProgress ()
specifier|public
specifier|synchronized
name|float
name|cleanupProgress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getCleanupProgress
argument_list|()
return|;
block|}
comment|/**     * @return Percentage of progress in setup      */
DECL|method|setupProgress ()
specifier|public
specifier|synchronized
name|float
name|setupProgress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getSetupProgress
argument_list|()
return|;
block|}
comment|/**     * @return Percentage of progress in reduce      */
DECL|method|reduceProgress ()
specifier|public
specifier|synchronized
name|float
name|reduceProgress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReduceProgress
argument_list|()
return|;
block|}
comment|// A utility to convert new job runstates to the old ones.
DECL|method|getOldNewJobRunState ( org.apache.hadoop.mapreduce.JobStatus.State state)
specifier|static
name|int
name|getOldNewJobRunState
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

