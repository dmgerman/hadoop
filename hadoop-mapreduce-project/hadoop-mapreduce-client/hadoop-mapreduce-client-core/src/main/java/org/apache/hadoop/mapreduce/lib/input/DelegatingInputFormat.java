begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * An {@link InputFormat} that delegates behavior of paths to multiple other  * InputFormats.  *   * @see MultipleInputs#addInputPath(Job, Path, Class, Class)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DelegatingInputFormat
specifier|public
class|class
name|DelegatingInputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|InputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Job
name|jobCopy
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|formatMap
init|=
name|MultipleInputs
operator|.
name|getInputFormatMap
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
name|mapperMap
init|=
name|MultipleInputs
operator|.
name|getMapperTypeMap
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|formatPaths
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// First, build a map of InputFormats to Paths
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|entry
range|:
name|formatMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|formatPaths
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|formatPaths
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|formatPaths
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|formatEntry
range|:
name|formatPaths
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|formatClass
init|=
name|formatEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|InputFormat
name|format
init|=
operator|(
name|InputFormat
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|formatClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|formatEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|mapperPaths
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Now, for each set of paths that have a common InputFormat, build
comment|// a map of Mappers to the paths they're used for
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
init|=
name|mapperMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mapperPaths
operator|.
name|containsKey
argument_list|(
name|mapperClass
argument_list|)
condition|)
block|{
name|mapperPaths
operator|.
name|put
argument_list|(
name|mapperClass
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mapperPaths
operator|.
name|get
argument_list|(
name|mapperClass
argument_list|)
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// Now each set of paths that has a common InputFormat and Mapper can
comment|// be added to the same job, and split together.
for|for
control|(
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|mapEntry
range|:
name|mapperPaths
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|paths
operator|=
name|mapEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapperClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|mapperClass
operator|=
name|job
operator|.
name|getMapperClass
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mapper class is not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobCopy
argument_list|,
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|paths
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get splits for each input path and tag with InputFormat
comment|// and Mapper types by wrapping in a TaggedInputSplit.
name|List
argument_list|<
name|InputSplit
argument_list|>
name|pathSplits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|jobCopy
argument_list|)
decl_stmt|;
for|for
control|(
name|InputSplit
name|pathSplit
range|:
name|pathSplits
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|TaggedInputSplit
argument_list|(
name|pathSplit
argument_list|,
name|conf
argument_list|,
name|format
operator|.
name|getClass
argument_list|()
argument_list|,
name|mapperClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|splits
return|;
block|}
annotation|@
name|Override
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|DelegatingRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

