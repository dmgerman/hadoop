begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.chain
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|Chain
operator|.
name|ChainBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The ChainReducer class allows to chain multiple Mapper classes after a  * Reducer within the Reducer task.  *   *<p>  * For each record output by the Reducer, the Mapper classes are invoked in a  * chained (or piped) fashion. The output of the reducer becomes the input of  * the first mapper and output of first becomes the input of the second, and so  * on until the last Mapper, the output of the last Mapper will be written to  * the task's output.  *</p>  *<p>  * The key functionality of this feature is that the Mappers in the chain do not  * need to be aware that they are executed after the Reducer or in a chain. This  * enables having reusable specialized Mappers that can be combined to perform  * composite operations within a single task.  *</p>  *<p>  * Special care has to be taken when creating chains that the key/values output  * by a Mapper are valid for the following Mapper in the chain. It is assumed  * all Mappers and the Reduce in the chain use matching output and input key and  * value classes as no conversion is done by the chaining code.  *</p>  *<p> Using the ChainMapper and the ChainReducer classes is possible to  * compose Map/Reduce jobs that look like<code>[MAP+ / REDUCE MAP*]</code>. And  * immediate benefit of this pattern is a dramatic reduction in disk IO.</p>  *<p>  * IMPORTANT: There is no need to specify the output key/value classes for the  * ChainReducer, this is done by the setReducer or the addMapper for the last  * element in the chain.  *</p>  * ChainReducer usage pattern:  *<p>  *   *<pre>  * ...  * Job = new Job(conf);  * ....  *  * Configuration reduceConf = new Configuration(false);  * ...  * ChainReducer.setReducer(job, XReduce.class, LongWritable.class, Text.class,  *   Text.class, Text.class, true, reduceConf);  *  * ChainReducer.addMapper(job, CMap.class, Text.class, Text.class,  *   LongWritable.class, Text.class, false, null);  *  * ChainReducer.addMapper(job, DMap.class, LongWritable.class, Text.class,  *   LongWritable.class, LongWritable.class, true, null);  *  * ...  *  * job.waitForCompletion(true);  * ...  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ChainReducer
specifier|public
class|class
name|ChainReducer
parameter_list|<
name|KEYIN
parameter_list|,
name|VALUEIN
parameter_list|,
name|KEYOUT
parameter_list|,
name|VALUEOUT
parameter_list|>
extends|extends
name|Reducer
argument_list|<
name|KEYIN
argument_list|,
name|VALUEIN
argument_list|,
name|KEYOUT
argument_list|,
name|VALUEOUT
argument_list|>
block|{
comment|/**    * Sets the {@link Reducer} class to the chain job.    *     *<p>    * The key and values are passed from one element of the chain to the next, by    * value. For the added Reducer the configuration given for it,    *<code>reducerConf</code>, have precedence over the job's Configuration.    * This precedence is in effect when the task is running.    *</p>    *<p>    * IMPORTANT: There is no need to specify the output key/value classes for the    * ChainReducer, this is done by the setReducer or the addMapper for the last    * element in the chain.    *</p>    *     * @param job    *          the job    * @param klass    *          the Reducer class to add.    * @param inputKeyClass    *          reducer input key class.    * @param inputValueClass    *          reducer input value class.    * @param outputKeyClass    *          reducer output key class.    * @param outputValueClass    *          reducer output value class.    * @param reducerConf    *          a configuration for the Reducer class. It is recommended to use a    *          Configuration without default values using the    *<code>Configuration(boolean loadDefaults)</code> constructor with    *          FALSE.    */
DECL|method|setReducer (Job job, Class<? extends Reducer> klass, Class<?> inputKeyClass, Class<?> inputValueClass, Class<?> outputKeyClass, Class<?> outputValueClass, Configuration reducerConf)
specifier|public
specifier|static
name|void
name|setReducer
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|>
name|klass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|inputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|inputValueClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Configuration
name|reducerConf
parameter_list|)
block|{
name|job
operator|.
name|setReducerClass
argument_list|(
name|ChainReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
name|Chain
operator|.
name|setReducer
argument_list|(
name|job
argument_list|,
name|klass
argument_list|,
name|inputKeyClass
argument_list|,
name|inputValueClass
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|reducerConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a {@link Mapper} class to the chain reducer.    *     *<p>    * The key and values are passed from one element of the chain to the next, by    * value For the added Mapper the configuration given for it,    *<code>mapperConf</code>, have precedence over the job's Configuration. This    * precedence is in effect when the task is running.    *</p>    *<p>    * IMPORTANT: There is no need to specify the output key/value classes for the    * ChainMapper, this is done by the addMapper for the last mapper in the    * chain.    *</p>    *     * @param job    *          The job.    * @param klass    *          the Mapper class to add.    * @param inputKeyClass    *          mapper input key class.    * @param inputValueClass    *          mapper input value class.    * @param outputKeyClass    *          mapper output key class.    * @param outputValueClass    *          mapper output value class.    * @param mapperConf    *          a configuration for the Mapper class. It is recommended to use a    *          Configuration without default values using the    *<code>Configuration(boolean loadDefaults)</code> constructor with    *          FALSE.    */
DECL|method|addMapper (Job job, Class<? extends Mapper> klass, Class<?> inputKeyClass, Class<?> inputValueClass, Class<?> outputKeyClass, Class<?> outputValueClass, Configuration mapperConf)
specifier|public
specifier|static
name|void
name|addMapper
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|klass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|inputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|inputValueClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Configuration
name|mapperConf
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
name|Chain
operator|.
name|addMapper
argument_list|(
literal|false
argument_list|,
name|job
argument_list|,
name|klass
argument_list|,
name|inputKeyClass
argument_list|,
name|inputValueClass
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|mapperConf
argument_list|)
expr_stmt|;
block|}
DECL|field|chain
specifier|private
name|Chain
name|chain
decl_stmt|;
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|chain
operator|=
operator|new
name|Chain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setup
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|run (Context context)
specifier|public
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// if no reducer is set, just do nothing
if|if
condition|(
name|chain
operator|.
name|getReducer
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|numMappers
init|=
name|chain
operator|.
name|getAllMappers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// if there are no mappers in chain, run the reducer
if|if
condition|(
name|numMappers
operator|==
literal|0
condition|)
block|{
name|chain
operator|.
name|runReducer
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// add reducer and all mappers with proper context
name|ChainBlockingQueue
argument_list|<
name|Chain
operator|.
name|KeyValuePair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|inputqueue
decl_stmt|;
name|ChainBlockingQueue
argument_list|<
name|Chain
operator|.
name|KeyValuePair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|outputqueue
decl_stmt|;
comment|// add reducer
name|outputqueue
operator|=
name|chain
operator|.
name|createBlockingQueue
argument_list|()
expr_stmt|;
name|chain
operator|.
name|addReducer
argument_list|(
name|context
argument_list|,
name|outputqueue
argument_list|)
expr_stmt|;
comment|// add all mappers except last one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMappers
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|inputqueue
operator|=
name|outputqueue
expr_stmt|;
name|outputqueue
operator|=
name|chain
operator|.
name|createBlockingQueue
argument_list|()
expr_stmt|;
name|chain
operator|.
name|addMapper
argument_list|(
name|inputqueue
argument_list|,
name|outputqueue
argument_list|,
name|context
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// add last mapper
name|chain
operator|.
name|addMapper
argument_list|(
name|outputqueue
argument_list|,
name|context
argument_list|,
name|numMappers
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// start all threads
name|chain
operator|.
name|startAllThreads
argument_list|()
expr_stmt|;
comment|// wait for all threads
name|chain
operator|.
name|joinAllThreads
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

