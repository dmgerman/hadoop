begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * This class supports MapReduce jobs that have multiple input paths with  * a different {@link InputFormat} and {@link Mapper} for each path   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultipleInputs
specifier|public
class|class
name|MultipleInputs
block|{
comment|/**    * Add a {@link Path} with a custom {@link InputFormat} to the list of    * inputs for the map-reduce job.    *     * @param conf The configuration of the job    * @param path {@link Path} to be added to the list of inputs for the job    * @param inputFormatClass {@link InputFormat} class to use for this path    */
DECL|method|addInputPath (JobConf conf, Path path, Class<? extends InputFormat> inputFormatClass)
specifier|public
specifier|static
name|void
name|addInputPath
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
block|{
name|String
name|inputFormatMapping
init|=
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|";"
operator|+
name|inputFormatClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|inputFormats
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.formats"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.formats"
argument_list|,
name|inputFormats
operator|==
literal|null
condition|?
name|inputFormatMapping
else|:
name|inputFormats
operator|+
literal|","
operator|+
name|inputFormatMapping
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|DelegatingInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a {@link Path} with a custom {@link InputFormat} and    * {@link Mapper} to the list of inputs for the map-reduce job.    *     * @param conf The configuration of the job    * @param path {@link Path} to be added to the list of inputs for the job    * @param inputFormatClass {@link InputFormat} class to use for this path    * @param mapperClass {@link Mapper} class to use for this path    */
DECL|method|addInputPath (JobConf conf, Path path, Class<? extends InputFormat> inputFormatClass, Class<? extends Mapper> mapperClass)
specifier|public
specifier|static
name|void
name|addInputPath
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
parameter_list|)
block|{
name|addInputPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
name|String
name|mapperMapping
init|=
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|";"
operator|+
name|mapperClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|mappers
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.mappers"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.mappers"
argument_list|,
name|mappers
operator|==
literal|null
condition|?
name|mapperMapping
else|:
name|mappers
operator|+
literal|","
operator|+
name|mapperMapping
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|DelegatingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieves a map of {@link Path}s to the {@link InputFormat} class    * that should be used for them.    *     * @param conf The confuration of the job    * @see #addInputPath(JobConf, Path, Class)    * @return A map of paths to inputformats for the job    */
DECL|method|getInputFormatMap (JobConf conf)
specifier|static
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|getInputFormatMap
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathMappings
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.formats"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathMapping
range|:
name|pathMappings
control|)
block|{
name|String
index|[]
name|split
init|=
name|pathMapping
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|InputFormat
name|inputFormat
decl_stmt|;
try|try
block|{
name|inputFormat
operator|=
operator|(
name|InputFormat
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|m
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|inputFormat
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
comment|/**    * Retrieves a map of {@link Path}s to the {@link Mapper} class that    * should be used for them.    *     * @param conf The confuration of the job    * @see #addInputPath(JobConf, Path, Class, Class)    * @return A map of paths to mappers for the job    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getMapperTypeMap (JobConf conf)
specifier|static
name|Map
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
name|getMapperTypeMap
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.mappers"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathMappings
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.input.multipleinputs.dir.mappers"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathMapping
range|:
name|pathMappings
control|)
block|{
name|String
index|[]
name|split
init|=
name|pathMapping
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapClass
decl_stmt|;
try|try
block|{
name|mapClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
operator|)
name|conf
operator|.
name|getClassByName
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|m
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|mapClass
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

