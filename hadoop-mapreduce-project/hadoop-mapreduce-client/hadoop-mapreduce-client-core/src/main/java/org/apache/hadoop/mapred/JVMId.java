begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_class
DECL|class|JVMId
class|class
name|JVMId
block|{
DECL|field|isMap
name|boolean
name|isMap
decl_stmt|;
DECL|field|jobId
specifier|final
name|JobID
name|jobId
decl_stmt|;
DECL|field|jvmId
specifier|private
name|long
name|jvmId
decl_stmt|;
DECL|field|JVM
specifier|private
specifier|static
specifier|final
name|String
name|JVM
init|=
literal|"jvm"
decl_stmt|;
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|char
name|SEPARATOR
init|=
literal|'_'
decl_stmt|;
DECL|field|idFormat
specifier|private
specifier|static
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|JVMId (JobID jobId, boolean isMap, long id)
specifier|public
name|JVMId
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|jvmId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
name|isMap
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
block|}
DECL|method|JVMId (String jtIdentifier, int jobId, boolean isMap, long id)
specifier|public
name|JVMId
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|JobID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|)
argument_list|,
name|isMap
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|JVMId ()
specifier|public
name|JVMId
parameter_list|()
block|{
name|jobId
operator|=
operator|new
name|JobID
argument_list|()
expr_stmt|;
block|}
DECL|method|isMapJVM ()
specifier|public
name|boolean
name|isMapJVM
parameter_list|()
block|{
return|return
name|isMap
return|;
block|}
DECL|method|getJobId ()
specifier|public
name|JobID
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// Generated by IntelliJ IDEA 13.1.
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JVMId
name|jvmId1
init|=
operator|(
name|JVMId
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|isMap
operator|!=
name|jvmId1
operator|.
name|isMap
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|jvmId
operator|!=
name|jvmId1
operator|.
name|jvmId
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|jobId
operator|.
name|equals
argument_list|(
name|jvmId1
operator|.
name|jobId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Generated by IntelliJ IDEA 13.1.
name|int
name|result
init|=
operator|(
name|isMap
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|jobId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|jvmId
operator|^
operator|(
name|jvmId
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are    * defined as greater then maps.    **/
DECL|method|compareTo (JVMId that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|JVMId
name|that
parameter_list|)
block|{
name|int
name|jobComp
init|=
name|this
operator|.
name|jobId
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobComp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|isMap
operator|==
name|that
operator|.
name|isMap
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|jvmId
argument_list|,
name|that
operator|.
name|jvmId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|isMap
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
else|else
block|{
return|return
name|jobComp
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appendTo
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|JVM
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This method does NOT override org.apache.hadoop.mapred.ID to accept 64-bit    * ID to support work-preserving RM restart.    * @return 64-bit JVM id.    */
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|jvmId
return|;
block|}
comment|/**    * Add the unique id to the given StringBuilder.    * @param builder the builder to append to    * @return the passed in builder.    */
DECL|method|appendTo (StringBuilder builder)
specifier|protected
name|StringBuilder
name|appendTo
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
return|return
name|jobId
operator|.
name|appendTo
argument_list|(
name|builder
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|isMap
condition|?
literal|'m'
else|:
literal|'r'
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|jvmId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jvmId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isMap
argument_list|)
expr_stmt|;
block|}
comment|/** Construct a JVMId object from given string     * @return constructed JVMId object or null if the given String is null    * @throws IllegalArgumentException if the given string is malformed    */
DECL|method|forName (String str)
specifier|public
specifier|static
name|JVMId
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|String
index|[]
name|parts
init|=
name|str
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|JVM
argument_list|)
condition|)
block|{
name|boolean
name|isMap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parts
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
condition|)
name|isMap
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|parts
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"r"
argument_list|)
condition|)
name|isMap
operator|=
literal|false
expr_stmt|;
else|else
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
return|return
operator|new
name|JVMId
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|isMap
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//fall below
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TaskId string : "
operator|+
name|str
operator|+
literal|" is not properly formed"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

