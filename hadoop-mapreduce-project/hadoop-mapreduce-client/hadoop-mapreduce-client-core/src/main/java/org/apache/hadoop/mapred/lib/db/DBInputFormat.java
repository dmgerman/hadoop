begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|DBInputFormat
specifier|public
class|class
name|DBInputFormat
parameter_list|<
name|T
extends|extends
name|DBWritable
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
argument_list|<
name|T
argument_list|>
implements|implements
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|T
argument_list|>
implements|,
name|JobConfigurable
block|{
comment|/**    * A RecordReader that reads records from a SQL table.    * Emits LongWritables containing the record number as     * key and DBWritables as value.      */
DECL|class|DBRecordReader
specifier|protected
class|class
name|DBRecordReader
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBRecordReader
argument_list|<
name|T
argument_list|>
implements|implements
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|T
argument_list|>
block|{
comment|/**      * The constructor is kept to be compatible with M/R 1.x      *      * @param split The InputSplit to read data for      * @throws SQLException      */
DECL|method|DBRecordReader (DBInputSplit split, Class<T> inputClass, JobConf job)
specifier|protected
name|DBRecordReader
parameter_list|(
name|DBInputSplit
name|split
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|inputClass
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|split
argument_list|,
name|inputClass
argument_list|,
name|job
argument_list|,
name|connection
argument_list|,
name|dbConf
argument_list|,
name|conditions
argument_list|,
name|fieldNames
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param split The InputSplit to read data for      * @throws SQLException       */
DECL|method|DBRecordReader (DBInputSplit split, Class<T> inputClass, JobConf job, Connection conn, DBConfiguration dbConfig, String cond, String [] fields, String table)
specifier|protected
name|DBRecordReader
parameter_list|(
name|DBInputSplit
name|split
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|inputClass
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|DBConfiguration
name|dbConfig
parameter_list|,
name|String
name|cond
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|split
argument_list|,
name|inputClass
argument_list|,
name|job
argument_list|,
name|conn
argument_list|,
name|dbConfig
argument_list|,
name|cond
argument_list|,
name|fields
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|createKey ()
specifier|public
name|LongWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|LongWritable
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|createValue ()
specifier|public
name|T
name|createValue
parameter_list|()
block|{
return|return
name|super
operator|.
name|createValue
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getPos
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|next (LongWritable key, T value)
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
comment|/**    * A RecordReader implementation that just passes through to a wrapped    * RecordReader built with the new API.    */
DECL|class|DBRecordReaderWrapper
specifier|private
specifier|static
class|class
name|DBRecordReaderWrapper
parameter_list|<
name|T
extends|extends
name|DBWritable
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|T
argument_list|>
block|{
DECL|field|rr
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBRecordReader
argument_list|<
name|T
argument_list|>
name|rr
decl_stmt|;
DECL|method|DBRecordReaderWrapper ( org.apache.hadoop.mapreduce.lib.db.DBRecordReader<T> inner)
specifier|public
name|DBRecordReaderWrapper
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBRecordReader
argument_list|<
name|T
argument_list|>
name|inner
parameter_list|)
block|{
name|this
operator|.
name|rr
operator|=
name|inner
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createKey ()
specifier|public
name|LongWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|LongWritable
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|T
name|createValue
parameter_list|()
block|{
return|return
name|rr
operator|.
name|createValue
argument_list|()
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rr
operator|.
name|getProgress
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rr
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|next (LongWritable key, T value)
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
comment|/**    * A Class that does nothing, implementing DBWritable    */
DECL|class|NullDBWritable
specifier|public
specifier|static
class|class
name|NullDBWritable
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|NullDBWritable
implements|implements
name|DBWritable
implements|,
name|Writable
block|{   }
comment|/**    * A InputSplit that spans a set of rows    */
DECL|class|DBInputSplit
specifier|protected
specifier|static
class|class
name|DBInputSplit
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBInputSplit
implements|implements
name|InputSplit
block|{
comment|/**      * Default Constructor      */
DECL|method|DBInputSplit ()
specifier|public
name|DBInputSplit
parameter_list|()
block|{     }
comment|/**      * Convenience Constructor      * @param start the index of the first row to select      * @param end the index of the last row to select      */
DECL|method|DBInputSplit (long start, long end)
specifier|public
name|DBInputSplit
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|T
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// wrap the DBRR in a shim class to deal with API differences.
return|return
operator|new
name|DBRecordReaderWrapper
argument_list|<
name|T
argument_list|>
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBRecordReader
argument_list|<
name|T
argument_list|>
operator|)
name|createDBRecordReader
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBInputSplit
operator|)
name|split
argument_list|,
name|job
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getSplits (JobConf job, int chunks)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|chunks
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
argument_list|>
name|newSplits
init|=
name|super
operator|.
name|getSplits
argument_list|(
name|Job
operator|.
name|getInstance
argument_list|(
name|job
argument_list|)
argument_list|)
decl_stmt|;
name|InputSplit
index|[]
name|ret
init|=
operator|new
name|InputSplit
index|[
name|newSplits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
name|s
range|:
name|newSplits
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBInputSplit
name|split
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|DBInputSplit
operator|)
name|s
decl_stmt|;
name|ret
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|DBInputSplit
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|,
name|split
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Initializes the map-part of the job with the appropriate input settings.    *     * @param job The job    * @param inputClass the class object implementing DBWritable, which is the     * Java object holding tuple fields.    * @param tableName The table to read data from    * @param conditions The condition which to select data with, eg. '(updated&gt;    * 20070101 AND length&gt; 0)'    * @param orderBy the fieldNames in the orderBy clause.    * @param fieldNames The field names in the table    * @see #setInput(JobConf, Class, String, String)    */
DECL|method|setInput (JobConf job, Class<? extends DBWritable> inputClass, String tableName,String conditions, String orderBy, String... fieldNames)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|DBWritable
argument_list|>
name|inputClass
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|conditions
parameter_list|,
name|String
name|orderBy
parameter_list|,
name|String
modifier|...
name|fieldNames
parameter_list|)
block|{
name|job
operator|.
name|setInputFormat
argument_list|(
name|DBInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBConfiguration
name|dbConf
init|=
operator|new
name|DBConfiguration
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setInputClass
argument_list|(
name|inputClass
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputFieldNames
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputOrderBy
argument_list|(
name|orderBy
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the map-part of the job with the appropriate input settings.    *     * @param job The job    * @param inputClass the class object implementing DBWritable, which is the     * Java object holding tuple fields.    * @param inputQuery the input query to select fields. Example :     * "SELECT f1, f2, f3 FROM Mytable ORDER BY f1"    * @param inputCountQuery the input query that returns the number of records in    * the table.     * Example : "SELECT COUNT(f1) FROM Mytable"    * @see #setInput(JobConf, Class, String, String, String, String...)    */
DECL|method|setInput (JobConf job, Class<? extends DBWritable> inputClass, String inputQuery, String inputCountQuery)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|DBWritable
argument_list|>
name|inputClass
parameter_list|,
name|String
name|inputQuery
parameter_list|,
name|String
name|inputCountQuery
parameter_list|)
block|{
name|job
operator|.
name|setInputFormat
argument_list|(
name|DBInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBConfiguration
name|dbConf
init|=
operator|new
name|DBConfiguration
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setInputClass
argument_list|(
name|inputClass
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputQuery
argument_list|(
name|inputQuery
argument_list|)
expr_stmt|;
name|dbConf
operator|.
name|setInputCountQuery
argument_list|(
name|inputCountQuery
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

