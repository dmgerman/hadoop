begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.partition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
operator|.
name|KeyFieldHelper
operator|.
name|KeyDescription
import|;
end_import

begin_comment
comment|/**      *  Defines a way to partition keys based on certain key fields (also see   *  {@link KeyFieldBasedComparator}.   *  The key specification supported is of the form -k pos1[,pos2], where,   *  pos is of the form f[.c][opts], where f is the number   *  of the key field to use, and c is the number of the first character from   *  the beginning of the field. Fields and character posns are numbered    *  starting with 1; a character position of zero in pos2 indicates the   *  field's last character. If '.c' is omitted from pos1, it defaults to 1   *  (the beginning of the field); if omitted from pos2, it defaults to 0    *  (the end of the field).   *    */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|KeyFieldBasedPartitioner
specifier|public
class|class
name|KeyFieldBasedPartitioner
parameter_list|<
name|K2
parameter_list|,
name|V2
parameter_list|>
extends|extends
name|Partitioner
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
implements|implements
name|Configurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|KeyFieldBasedPartitioner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|PARTITIONER_OPTIONS
specifier|public
specifier|static
name|String
name|PARTITIONER_OPTIONS
init|=
literal|"mapreduce.partition.keypartitioner.options"
decl_stmt|;
DECL|field|numOfPartitionFields
specifier|private
name|int
name|numOfPartitionFields
decl_stmt|;
DECL|field|keyFieldHelper
specifier|private
name|KeyFieldHelper
name|keyFieldHelper
init|=
operator|new
name|KeyFieldHelper
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|keyFieldHelper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|String
name|keyFieldSeparator
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_FIELD_SEPERATOR
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|keyFieldHelper
operator|.
name|setKeyFieldSeparator
argument_list|(
name|keyFieldSeparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"num.key.fields.for.partition"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using deprecated num.key.fields.for.partition. "
operator|+
literal|"Use mapreduce.partition.keypartitioner.options instead"
argument_list|)
expr_stmt|;
name|this
operator|.
name|numOfPartitionFields
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"num.key.fields.for.partition"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keyFieldHelper
operator|.
name|setKeyFieldSpec
argument_list|(
literal|1
argument_list|,
name|numOfPartitionFields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|option
init|=
name|conf
operator|.
name|get
argument_list|(
name|PARTITIONER_OPTIONS
argument_list|)
decl_stmt|;
name|keyFieldHelper
operator|.
name|parseOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getPartition (K2 key, V2 value, int numReduceTasks)
specifier|public
name|int
name|getPartition
parameter_list|(
name|K2
name|key
parameter_list|,
name|V2
name|value
parameter_list|,
name|int
name|numReduceTasks
parameter_list|)
block|{
name|byte
index|[]
name|keyBytes
decl_stmt|;
name|List
argument_list|<
name|KeyDescription
argument_list|>
name|allKeySpecs
init|=
name|keyFieldHelper
operator|.
name|keySpecs
argument_list|()
decl_stmt|;
if|if
condition|(
name|allKeySpecs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|getPartition
argument_list|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|,
name|numReduceTasks
argument_list|)
return|;
block|}
try|try
block|{
name|keyBytes
operator|=
name|key
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The current system does not "
operator|+
literal|"support UTF-8 encoding!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// return 0 if the key is empty
if|if
condition|(
name|keyBytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
index|[]
name|lengthIndicesFirst
init|=
name|keyFieldHelper
operator|.
name|getWordLengths
argument_list|(
name|keyBytes
argument_list|,
literal|0
argument_list|,
name|keyBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|currentHash
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyDescription
name|keySpec
range|:
name|allKeySpecs
control|)
block|{
name|int
name|startChar
init|=
name|keyFieldHelper
operator|.
name|getStartOffset
argument_list|(
name|keyBytes
argument_list|,
literal|0
argument_list|,
name|keyBytes
operator|.
name|length
argument_list|,
name|lengthIndicesFirst
argument_list|,
name|keySpec
argument_list|)
decl_stmt|;
comment|// no key found! continue
if|if
condition|(
name|startChar
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|endChar
init|=
name|keyFieldHelper
operator|.
name|getEndOffset
argument_list|(
name|keyBytes
argument_list|,
literal|0
argument_list|,
name|keyBytes
operator|.
name|length
argument_list|,
name|lengthIndicesFirst
argument_list|,
name|keySpec
argument_list|)
decl_stmt|;
name|currentHash
operator|=
name|hashCode
argument_list|(
name|keyBytes
argument_list|,
name|startChar
argument_list|,
name|endChar
argument_list|,
name|currentHash
argument_list|)
expr_stmt|;
block|}
return|return
name|getPartition
argument_list|(
name|currentHash
argument_list|,
name|numReduceTasks
argument_list|)
return|;
block|}
DECL|method|hashCode (byte[] b, int start, int end, int currentHash)
specifier|protected
name|int
name|hashCode
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|currentHash
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|currentHash
operator|=
literal|31
operator|*
name|currentHash
operator|+
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|currentHash
return|;
block|}
DECL|method|getPartition (int hash, int numReduceTasks)
specifier|protected
name|int
name|getPartition
parameter_list|(
name|int
name|hash
parameter_list|,
name|int
name|numReduceTasks
parameter_list|)
block|{
return|return
operator|(
name|hash
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|numReduceTasks
return|;
block|}
comment|/**    * Set the {@link KeyFieldBasedPartitioner} options used for     * {@link Partitioner}    *     * @param keySpec the key specification of the form -k pos1[,pos2], where,    *  pos is of the form f[.c][opts], where f is the number    *  of the key field to use, and c is the number of the first character from    *  the beginning of the field. Fields and character posns are numbered     *  starting with 1; a character position of zero in pos2 indicates the    *  field's last character. If '.c' is omitted from pos1, it defaults to 1    *  (the beginning of the field); if omitted from pos2, it defaults to 0     *  (the end of the field).    */
DECL|method|setKeyFieldPartitionerOptions (Job job, String keySpec)
specifier|public
name|void
name|setKeyFieldPartitionerOptions
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|keySpec
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|PARTITIONER_OPTIONS
argument_list|,
name|keySpec
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the {@link KeyFieldBasedPartitioner} options    */
DECL|method|getKeyFieldPartitionerOption (JobContext job)
specifier|public
name|String
name|getKeyFieldPartitionerOption
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|PARTITIONER_OPTIONS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

