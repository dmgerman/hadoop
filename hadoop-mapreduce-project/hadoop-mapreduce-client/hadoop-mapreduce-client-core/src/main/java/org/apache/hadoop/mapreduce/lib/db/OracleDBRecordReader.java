begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A RecordReader that reads records from an Oracle SQL table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|OracleDBRecordReader
specifier|public
class|class
name|OracleDBRecordReader
parameter_list|<
name|T
extends|extends
name|DBWritable
parameter_list|>
extends|extends
name|DBRecordReader
argument_list|<
name|T
argument_list|>
block|{
comment|/** Configuration key to set to a timezone string. */
DECL|field|SESSION_TIMEZONE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SESSION_TIMEZONE_KEY
init|=
literal|"oracle.sessionTimeZone"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OracleDBRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OracleDBRecordReader (DBInputFormat.DBInputSplit split, Class<T> inputClass, Configuration conf, Connection conn, DBConfiguration dbConfig, String cond, String [] fields, String table)
specifier|public
name|OracleDBRecordReader
parameter_list|(
name|DBInputFormat
operator|.
name|DBInputSplit
name|split
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|inputClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|DBConfiguration
name|dbConfig
parameter_list|,
name|String
name|cond
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|split
argument_list|,
name|inputClass
argument_list|,
name|conf
argument_list|,
name|conn
argument_list|,
name|dbConfig
argument_list|,
name|cond
argument_list|,
name|fields
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|setSessionTimeZone
argument_list|(
name|conf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the query for selecting the records from an Oracle DB. */
DECL|method|getSelectQuery ()
specifier|protected
name|String
name|getSelectQuery
parameter_list|()
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|DBConfiguration
name|dbConf
init|=
name|getDBConf
argument_list|()
decl_stmt|;
name|String
name|conditions
init|=
name|getConditions
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|getTableName
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
name|getFieldNames
argument_list|()
decl_stmt|;
comment|// Oracle-specific codepath to use rownum instead of LIMIT/OFFSET.
if|if
condition|(
name|dbConf
operator|.
name|getInputQuery
argument_list|()
operator|==
literal|null
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|append
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|fieldNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|conditions
operator|!=
literal|null
operator|&&
name|conditions
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|query
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
name|String
name|orderBy
init|=
name|dbConf
operator|.
name|getInputOrderBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|orderBy
operator|!=
literal|null
operator|&&
name|orderBy
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ORDER BY "
argument_list|)
operator|.
name|append
argument_list|(
name|orderBy
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//PREBUILT QUERY
name|query
operator|.
name|append
argument_list|(
name|dbConf
operator|.
name|getInputQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DBInputFormat
operator|.
name|DBInputSplit
name|split
init|=
name|getSplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|querystring
init|=
name|query
operator|.
name|toString
argument_list|()
decl_stmt|;
name|query
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"SELECT * FROM (SELECT a.*,ROWNUM dbif_rno FROM ( "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|querystring
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" ) a WHERE rownum<= "
argument_list|)
operator|.
name|append
argument_list|(
name|split
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" ) WHERE dbif_rno> "
argument_list|)
operator|.
name|append
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore, will not throw.
block|}
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Set session time zone    * @param conf The current configuration.    * We read the 'oracle.sessionTimeZone' property from here.    * @param conn The connection to alter the timezone properties of.    */
DECL|method|setSessionTimeZone (Configuration conf, Connection conn)
specifier|public
specifier|static
name|void
name|setSessionTimeZone
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// need to use reflection to call the method setSessionTimeZone on
comment|// the OracleConnection class because oracle specific java libraries are
comment|// not accessible in this context.
name|Method
name|method
decl_stmt|;
try|try
block|{
name|method
operator|=
name|conn
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setSessionTimeZone"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not find method setSessionTimeZone in "
operator|+
name|conn
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// rethrow SQLException
throw|throw
operator|new
name|SQLException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Need to set the time zone in order for Java
comment|// to correctly access the column "TIMESTAMP WITH LOCAL TIME ZONE".
comment|// We can't easily get the correct Oracle-specific timezone string
comment|// from Java; just let the user set the timezone in a property.
name|String
name|clientTimeZone
init|=
name|conf
operator|.
name|get
argument_list|(
name|SESSION_TIMEZONE_KEY
argument_list|,
literal|"GMT"
argument_list|)
decl_stmt|;
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|clientTimeZone
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time zone has been set to "
operator|+
name|clientTimeZone
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Time zone "
operator|+
name|clientTimeZone
operator|+
literal|" could not be set on Oracle database."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting default time zone: GMT"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// "GMT" timezone is guaranteed to exist.
name|method
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
literal|"GMT"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex2
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not set time zone for oracle connection"
argument_list|,
name|ex2
argument_list|)
expr_stmt|;
comment|// rethrow SQLException
throw|throw
operator|new
name|SQLException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

