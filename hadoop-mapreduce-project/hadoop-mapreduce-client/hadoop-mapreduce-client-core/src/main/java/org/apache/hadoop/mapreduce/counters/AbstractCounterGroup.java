begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.counters
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceBundles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_comment
comment|/**  * An abstract class to provide common implementation of the  * generic counter group in both mapred and mapreduce package.  *  * @param<T> type of the counter for the group  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|AbstractCounterGroup
specifier|public
specifier|abstract
class|class
name|AbstractCounterGroup
parameter_list|<
name|T
extends|extends
name|Counter
parameter_list|>
implements|implements
name|CounterGroupBase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|counters
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|counters
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|limits
specifier|private
specifier|final
name|Limits
name|limits
decl_stmt|;
DECL|method|AbstractCounterGroup (String name, String displayName, Limits limits)
specifier|public
name|AbstractCounterGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|limits
operator|=
name|limits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getDisplayName ()
specifier|public
specifier|synchronized
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
annotation|@
name|Override
DECL|method|setDisplayName (String displayName)
specifier|public
specifier|synchronized
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addCounter (T counter)
specifier|public
specifier|synchronized
name|void
name|addCounter
parameter_list|(
name|T
name|counter
parameter_list|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|limits
operator|.
name|incrCounters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addCounter (String counterName, String displayName, long value)
specifier|public
specifier|synchronized
name|T
name|addCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|String
name|saveName
init|=
name|Limits
operator|.
name|filterCounterName
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
name|T
name|counter
init|=
name|findCounterImpl
argument_list|(
name|saveName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
return|return
name|addCounterImpl
argument_list|(
name|saveName
argument_list|,
name|displayName
argument_list|,
name|value
argument_list|)
return|;
block|}
name|counter
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|counter
return|;
block|}
DECL|method|addCounterImpl (String name, String displayName, long value)
specifier|private
name|T
name|addCounterImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|T
name|counter
init|=
name|newCounter
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addCounter
argument_list|(
name|counter
argument_list|)
expr_stmt|;
return|return
name|counter
return|;
block|}
annotation|@
name|Override
DECL|method|findCounter (String counterName, String displayName)
specifier|public
specifier|synchronized
name|T
name|findCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
comment|// Take lock to avoid two threads not finding a counter and trying to add
comment|// the same counter.
name|String
name|saveName
init|=
name|Limits
operator|.
name|filterCounterName
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
name|T
name|counter
init|=
name|findCounterImpl
argument_list|(
name|saveName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
return|return
name|addCounterImpl
argument_list|(
name|saveName
argument_list|,
name|displayName
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
name|counter
return|;
block|}
annotation|@
name|Override
DECL|method|findCounter (String counterName, boolean create)
specifier|public
name|T
name|findCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
return|return
name|findCounterImpl
argument_list|(
name|Limits
operator|.
name|filterCounterName
argument_list|(
name|counterName
argument_list|)
argument_list|,
name|create
argument_list|)
return|;
block|}
comment|// Lock the object. Cannot simply use concurrent constructs on the counters
comment|// data-structure (like putIfAbsent) because of localization, limits etc.
DECL|method|findCounterImpl (String counterName, boolean create)
specifier|private
specifier|synchronized
name|T
name|findCounterImpl
parameter_list|(
name|String
name|counterName
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|T
name|counter
init|=
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|String
name|localized
init|=
name|ResourceBundles
operator|.
name|getCounterName
argument_list|(
name|getName
argument_list|()
argument_list|,
name|counterName
argument_list|,
name|counterName
argument_list|)
decl_stmt|;
return|return
name|addCounterImpl
argument_list|(
name|counterName
argument_list|,
name|localized
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
name|counter
return|;
block|}
annotation|@
name|Override
DECL|method|findCounter (String counterName)
specifier|public
name|T
name|findCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|counterName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Abstract factory method to create a new counter of type T    * @param counterName of the counter    * @param displayName of the counter    * @param value of the counter    * @return a new counter    */
DECL|method|newCounter (String counterName, String displayName, long value)
specifier|protected
specifier|abstract
name|T
name|newCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
function_decl|;
comment|/**    * Abstract factory method to create a new counter of type T    * @return a new counter object    */
DECL|method|newCounter ()
specifier|protected
specifier|abstract
name|T
name|newCounter
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|counters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * GenericGroup ::= displayName #counter counter*    */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|counters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|counters
operator|.
name|values
argument_list|()
control|)
block|{
name|counter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|displayName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|counters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|T
name|counter
init|=
name|newCounter
argument_list|()
decl_stmt|;
name|counter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|limits
operator|.
name|incrCounters
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|counters
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object genericRight)
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|genericRight
parameter_list|)
block|{
if|if
condition|(
name|genericRight
operator|instanceof
name|CounterGroupBase
argument_list|<
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|CounterGroupBase
argument_list|<
name|T
argument_list|>
name|right
init|=
operator|(
name|CounterGroupBase
argument_list|<
name|T
argument_list|>
operator|)
name|genericRight
decl_stmt|;
return|return
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|right
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|counters
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|incrAllCounters (CounterGroupBase<T> rightGroup)
specifier|public
name|void
name|incrAllCounters
parameter_list|(
name|CounterGroupBase
argument_list|<
name|T
argument_list|>
name|rightGroup
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Counter
name|right
range|:
name|rightGroup
control|)
block|{
name|Counter
name|left
init|=
name|findCounter
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|,
name|right
operator|.
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|left
operator|.
name|increment
argument_list|(
name|right
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LimitExceededException
name|e
parameter_list|)
block|{
name|counters
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

