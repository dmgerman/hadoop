begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|fieldsel
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class implements a mapper/reducer class that can be used to perform  * field selections in a manner similar to unix cut. The input data is treated  * as fields separated by a user specified separator (the default value is  * "\t"). The user can specify a list of fields that form the map output keys,  * and a list of fields that form the map output values. If the inputformat is  * TextInputFormat, the mapper will ignore the key to the map function. and the  * fields are from the value only. Otherwise, the fields are the union of those  * from the key and those from the value.  *   * The field separator is under attribute "mapreduce.fieldsel.data.field.separator"  *   * The map output field list spec is under attribute   * "mapreduce.fieldsel.map.output.key.value.fields.spec".  * The value is expected to be like "keyFieldsSpec:valueFieldsSpec"  * key/valueFieldsSpec are comma (,) separated field spec: fieldSpec,fieldSpec,fieldSpec ...  * Each field spec can be a simple number (e.g. 5) specifying a specific field, or a range  * (like 2-5) to specify a range of fields, or an open range (like 3-) specifying all   * the fields starting from field 3. The open range field spec applies value fields only.  * They have no effect on the key fields.  *   * Here is an example: "4,3,0,1:6,5,1-3,7-". It specifies to use fields 4,3,0 and 1 for keys,  * and use fields 6,5,1,2,3,7 and above for values.  *   * The reduce output field list spec is under attribute   * "mapreduce.fieldsel.reduce.output.key.value.fields.spec".  *   * The reducer extracts output key/value pairs in a similar manner, except that  * the key is never ignored.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FieldSelectionMapReduce
specifier|public
class|class
name|FieldSelectionMapReduce
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Mapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
implements|,
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|mapOutputKeyValueSpec
specifier|private
name|String
name|mapOutputKeyValueSpec
decl_stmt|;
DECL|field|ignoreInputKey
specifier|private
name|boolean
name|ignoreInputKey
decl_stmt|;
DECL|field|fieldSeparator
specifier|private
name|String
name|fieldSeparator
init|=
literal|"\t"
decl_stmt|;
DECL|field|mapOutputKeyFieldList
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|mapOutputKeyFieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mapOutputValueFieldList
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|mapOutputValueFieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|allMapValueFieldsFrom
specifier|private
name|int
name|allMapValueFieldsFrom
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|reduceOutputKeyValueSpec
specifier|private
name|String
name|reduceOutputKeyValueSpec
decl_stmt|;
DECL|field|reduceOutputKeyFieldList
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|reduceOutputKeyFieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceOutputValueFieldList
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|reduceOutputValueFieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|allReduceValueFieldsFrom
specifier|private
name|int
name|allReduceValueFieldsFrom
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"FieldSelectionMapReduce"
argument_list|)
decl_stmt|;
DECL|method|specToString ()
specifier|private
name|String
name|specToString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"fieldSeparator: "
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mapOutputKeyValueSpec: "
argument_list|)
operator|.
name|append
argument_list|(
name|mapOutputKeyValueSpec
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"reduceOutputKeyValueSpec: "
argument_list|)
operator|.
name|append
argument_list|(
name|reduceOutputKeyValueSpec
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"allMapValueFieldsFrom: "
argument_list|)
operator|.
name|append
argument_list|(
name|allMapValueFieldsFrom
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"allReduceValueFieldsFrom: "
argument_list|)
operator|.
name|append
argument_list|(
name|allReduceValueFieldsFrom
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mapOutputKeyFieldList.length: "
argument_list|)
operator|.
name|append
argument_list|(
name|mapOutputKeyFieldList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|mapOutputKeyFieldList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|mapOutputKeyFieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"mapOutputValueFieldList.length: "
argument_list|)
operator|.
name|append
argument_list|(
name|mapOutputValueFieldList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|mapOutputValueFieldList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|mapOutputValueFieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"reduceOutputKeyFieldList.length: "
argument_list|)
operator|.
name|append
argument_list|(
name|reduceOutputKeyFieldList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|reduceOutputKeyFieldList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|reduceOutputKeyFieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"reduceOutputValueFieldList.length: "
argument_list|)
operator|.
name|append
argument_list|(
name|reduceOutputValueFieldList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|reduceOutputValueFieldList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|reduceOutputValueFieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The identify function. Input key/value pair is written directly to output.    */
DECL|method|map (K key, V val, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldSelectionHelper
name|helper
init|=
operator|new
name|FieldSelectionHelper
argument_list|(
name|FieldSelectionHelper
operator|.
name|emptyText
argument_list|,
name|FieldSelectionHelper
operator|.
name|emptyText
argument_list|)
decl_stmt|;
name|helper
operator|.
name|extractOutputKeyValue
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldSeparator
argument_list|,
name|mapOutputKeyFieldList
argument_list|,
name|mapOutputValueFieldList
argument_list|,
name|allMapValueFieldsFrom
argument_list|,
name|ignoreInputKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|helper
operator|.
name|getKey
argument_list|()
argument_list|,
name|helper
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parseOutputKeyValueSpec ()
specifier|private
name|void
name|parseOutputKeyValueSpec
parameter_list|()
block|{
name|allMapValueFieldsFrom
operator|=
name|FieldSelectionHelper
operator|.
name|parseOutputKeyValueSpec
argument_list|(
name|mapOutputKeyValueSpec
argument_list|,
name|mapOutputKeyFieldList
argument_list|,
name|mapOutputValueFieldList
argument_list|)
expr_stmt|;
name|allReduceValueFieldsFrom
operator|=
name|FieldSelectionHelper
operator|.
name|parseOutputKeyValueSpec
argument_list|(
name|reduceOutputKeyValueSpec
argument_list|,
name|reduceOutputKeyFieldList
argument_list|,
name|reduceOutputValueFieldList
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|fieldSeparator
operator|=
name|job
operator|.
name|get
argument_list|(
name|FieldSelectionHelper
operator|.
name|DATA_FIELD_SEPERATOR
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapOutputKeyValueSpec
operator|=
name|job
operator|.
name|get
argument_list|(
name|FieldSelectionHelper
operator|.
name|MAP_OUTPUT_KEY_VALUE_SPEC
argument_list|,
literal|"0-:"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreInputKey
operator|=
name|TextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getInputFormat
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reduceOutputKeyValueSpec
operator|=
name|job
operator|.
name|get
argument_list|(
name|FieldSelectionHelper
operator|.
name|REDUCE_OUTPUT_KEY_VALUE_SPEC
argument_list|,
literal|"0-:"
argument_list|)
expr_stmt|;
name|parseOutputKeyValueSpec
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|specToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keyStr
init|=
name|key
operator|.
name|toString
argument_list|()
operator|+
name|this
operator|.
name|fieldSeparator
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldSelectionHelper
name|helper
init|=
operator|new
name|FieldSelectionHelper
argument_list|()
decl_stmt|;
name|helper
operator|.
name|extractOutputKeyValue
argument_list|(
name|keyStr
argument_list|,
name|values
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldSeparator
argument_list|,
name|reduceOutputKeyFieldList
argument_list|,
name|reduceOutputValueFieldList
argument_list|,
name|allReduceValueFieldsFrom
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|helper
operator|.
name|getKey
argument_list|()
argument_list|,
name|helper
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

