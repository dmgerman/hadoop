begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
operator|.
name|ControlledJob
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Job
specifier|public
class|class
name|Job
extends|extends
name|ControlledJob
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SUCCESS
specifier|final
specifier|public
specifier|static
name|int
name|SUCCESS
init|=
literal|0
decl_stmt|;
DECL|field|WAITING
specifier|final
specifier|public
specifier|static
name|int
name|WAITING
init|=
literal|1
decl_stmt|;
DECL|field|RUNNING
specifier|final
specifier|public
specifier|static
name|int
name|RUNNING
init|=
literal|2
decl_stmt|;
DECL|field|READY
specifier|final
specifier|public
specifier|static
name|int
name|READY
init|=
literal|3
decl_stmt|;
DECL|field|FAILED
specifier|final
specifier|public
specifier|static
name|int
name|FAILED
init|=
literal|4
decl_stmt|;
DECL|field|DEPENDENT_FAILED
specifier|final
specifier|public
specifier|static
name|int
name|DEPENDENT_FAILED
init|=
literal|5
decl_stmt|;
comment|/**     * Construct a job.    * @param jobConf a mapred job configuration representing a job to be executed.    * @param dependingJobs an array of jobs the current job depends on    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|Job (JobConf jobConf, ArrayList<?> dependingJobs)
specifier|public
name|Job
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|ArrayList
argument_list|<
name|?
argument_list|>
name|dependingJobs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
argument_list|(
name|jobConf
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|ControlledJob
argument_list|>
operator|)
name|dependingJobs
argument_list|)
expr_stmt|;
block|}
DECL|method|Job (JobConf conf)
specifier|public
name|Job
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the mapred ID of this job as assigned by the mapred framework.    */
DECL|method|getAssignedJobID ()
specifier|public
name|JobID
name|getAssignedJobID
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|temp
init|=
name|super
operator|.
name|getMapredJobId
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|JobID
operator|.
name|downgrade
argument_list|(
name|temp
argument_list|)
return|;
block|}
comment|/**    * @deprecated setAssignedJobID should not be called.    * JOBID is set by the framework.    */
annotation|@
name|Deprecated
DECL|method|setAssignedJobID (JobID mapredJobID)
specifier|public
name|void
name|setAssignedJobID
parameter_list|(
name|JobID
name|mapredJobID
parameter_list|)
block|{
comment|// do nothing
block|}
comment|/**    * @return the mapred job conf of this job    */
DECL|method|getJobConf ()
specifier|public
specifier|synchronized
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
operator|new
name|JobConf
argument_list|(
name|super
operator|.
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Set the mapred job conf for this job.    * @param jobConf the mapred job conf for this job.    */
DECL|method|setJobConf (JobConf jobConf)
specifier|public
specifier|synchronized
name|void
name|setJobConf
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|setJob
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
argument_list|(
name|jobConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception"
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the state of this job    */
DECL|method|getState ()
specifier|public
specifier|synchronized
name|int
name|getState
parameter_list|()
block|{
name|State
name|state
init|=
name|super
operator|.
name|getJobState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|SUCCESS
condition|)
block|{
return|return
name|SUCCESS
return|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|WAITING
condition|)
block|{
return|return
name|WAITING
return|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|RUNNING
condition|)
block|{
return|return
name|RUNNING
return|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|READY
condition|)
block|{
return|return
name|READY
return|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|FAILED
condition|)
block|{
return|return
name|FAILED
return|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
return|return
name|DEPENDENT_FAILED
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * This is a no-op function, Its a behavior change from 1.x We no more can    * change the state from job    *     * @param state    *          the new state for this job.    */
annotation|@
name|Deprecated
DECL|method|setState (int state)
specifier|protected
specifier|synchronized
name|void
name|setState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
comment|// No-Op, we dont want to change the sate
block|}
comment|/**    * Add a job to this jobs' dependency list.     * Dependent jobs can only be added while a Job     * is waiting to run, not during or afterwards.    *     * @param dependingJob Job that this Job depends on.    * @return<tt>true</tt> if the Job was added.    */
DECL|method|addDependingJob (Job dependingJob)
specifier|public
specifier|synchronized
name|boolean
name|addDependingJob
parameter_list|(
name|Job
name|dependingJob
parameter_list|)
block|{
return|return
name|super
operator|.
name|addDependingJob
argument_list|(
name|dependingJob
argument_list|)
return|;
block|}
comment|/**    * @return the job client of this job    */
DECL|method|getJobClient ()
specifier|public
name|JobClient
name|getJobClient
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|JobClient
argument_list|(
name|super
operator|.
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * @return the depending jobs of this job    */
DECL|method|getDependingJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getDependingJobs
parameter_list|()
block|{
return|return
name|JobControl
operator|.
name|castToJobList
argument_list|(
name|super
operator|.
name|getDependentJobs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the mapred ID of this job as assigned by the mapred framework.    */
DECL|method|getMapredJobID ()
specifier|public
specifier|synchronized
name|String
name|getMapredJobID
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|getMapredJobId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getMapredJobId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This is no-op method for backward compatibility. It's a behavior change    * from 1.x, we can not change job ids from job.    *     * @param mapredJobID    *          the mapred job ID for this job.    */
annotation|@
name|Deprecated
DECL|method|setMapredJobID (String mapredJobID)
specifier|public
specifier|synchronized
name|void
name|setMapredJobID
parameter_list|(
name|String
name|mapredJobID
parameter_list|)
block|{
name|setAssignedJobID
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|mapredJobID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

