begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|AbstractCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * String conversion utilities for counters.  * Candidate for deprecation since we start to use JSON in 0.21+  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CountersStrings
specifier|public
class|class
name|CountersStrings
block|{
DECL|field|GROUP_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|GROUP_OPEN
init|=
literal|'{'
decl_stmt|;
DECL|field|GROUP_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|GROUP_CLOSE
init|=
literal|'}'
decl_stmt|;
DECL|field|COUNTER_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|COUNTER_OPEN
init|=
literal|'['
decl_stmt|;
DECL|field|COUNTER_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|COUNTER_CLOSE
init|=
literal|']'
decl_stmt|;
DECL|field|UNIT_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|UNIT_OPEN
init|=
literal|'('
decl_stmt|;
DECL|field|UNIT_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|UNIT_CLOSE
init|=
literal|')'
decl_stmt|;
DECL|field|charsToEscape
specifier|private
specifier|static
name|char
index|[]
name|charsToEscape
init|=
block|{
name|GROUP_OPEN
block|,
name|GROUP_CLOSE
block|,
name|COUNTER_OPEN
block|,
name|COUNTER_CLOSE
block|,
name|UNIT_OPEN
block|,
name|UNIT_CLOSE
block|}
decl_stmt|;
comment|/**    * Make the pre 0.21 counter string (for e.g. old job history files)    * [(actual-name)(display-name)(value)]    * @param counter to stringify    * @return the stringified result    */
DECL|method|toEscapedCompactString (Counter counter)
specifier|public
specifier|static
name|String
name|toEscapedCompactString
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
comment|// First up, obtain the strings that need escaping. This will help us
comment|// determine the buffer length apriori.
name|String
name|escapedName
decl_stmt|,
name|escapedDispName
decl_stmt|;
name|long
name|currentValue
decl_stmt|;
synchronized|synchronized
init|(
name|counter
init|)
block|{
name|escapedName
operator|=
name|escape
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|escapedDispName
operator|=
name|escape
argument_list|(
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|currentValue
operator|=
name|counter
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|int
name|length
init|=
name|escapedName
operator|.
name|length
argument_list|()
operator|+
name|escapedDispName
operator|.
name|length
argument_list|()
operator|+
literal|4
decl_stmt|;
name|length
operator|+=
literal|8
expr_stmt|;
comment|// For the following delimiting characters
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|COUNTER_OPEN
argument_list|)
expr_stmt|;
comment|// Add the counter name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the display name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedDispName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the value
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|COUNTER_CLOSE
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Make the 0.21 counter group string.    * format: {(actual-name)(display-name)(value)[][][]}    * where [] are compact strings for the counters within.    * @param<G> type of the group    * @param group to stringify    * @return the stringified result    */
specifier|public
specifier|static
parameter_list|<
name|G
extends|extends
name|CounterGroupBase
argument_list|<
name|?
argument_list|>
parameter_list|>
DECL|method|toEscapedCompactString (G group)
name|String
name|toEscapedCompactString
parameter_list|(
name|G
name|group
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|escapedStrs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|length
decl_stmt|;
name|String
name|escapedName
decl_stmt|,
name|escapedDispName
decl_stmt|;
synchronized|synchronized
init|(
name|group
init|)
block|{
comment|// First up, obtain the strings that need escaping. This will help us
comment|// determine the buffer length apriori.
name|escapedName
operator|=
name|escape
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|escapedDispName
operator|=
name|escape
argument_list|(
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|length
operator|=
name|escapedName
operator|.
name|length
argument_list|()
operator|+
name|escapedDispName
operator|.
name|length
argument_list|()
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|String
name|escapedStr
init|=
name|toEscapedCompactString
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|escapedStrs
operator|.
name|add
argument_list|(
name|escapedStr
argument_list|)
expr_stmt|;
name|length
operator|+=
name|escapedStr
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|length
operator|+=
literal|6
expr_stmt|;
comment|// for all the delimiting characters below
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|GROUP_OPEN
argument_list|)
expr_stmt|;
comment|// group start
comment|// Add the group name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the display name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedDispName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// write the value
for|for
control|(
name|String
name|escaped
range|:
name|escapedStrs
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|GROUP_CLOSE
argument_list|)
expr_stmt|;
comment|// group end
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Make the pre 0.21 counters string    * @param<C> type of the counter    * @param<G> type of the counter group    * @param<T> type of the counters object    * @param counters the object to stringify    * @return the string in the following format    * {(groupName)(group-displayName)[(counterName)(displayName)(value)]*}*    */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Counter
parameter_list|,
name|G
extends|extends
name|CounterGroupBase
argument_list|<
name|C
argument_list|>
parameter_list|,
name|T
extends|extends
name|AbstractCounters
argument_list|<
name|C
argument_list|,
name|G
argument_list|>
parameter_list|>
DECL|method|toEscapedCompactString (T counters)
name|String
name|toEscapedCompactString
parameter_list|(
name|T
name|counters
parameter_list|)
block|{
name|String
index|[]
name|groupsArray
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|counters
init|)
block|{
name|groupsArray
operator|=
operator|new
name|String
index|[
name|counters
operator|.
name|countCounters
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// First up, obtain the escaped string for each group so that we can
comment|// determine the buffer length apriori.
for|for
control|(
name|G
name|group
range|:
name|counters
control|)
block|{
name|String
name|escapedString
init|=
name|toEscapedCompactString
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|groupsArray
index|[
name|i
operator|++
index|]
operator|=
name|escapedString
expr_stmt|;
name|length
operator|+=
name|escapedString
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now construct the buffer
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groupsArray
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Escapes all the delimiters for counters i.e {,[,(,),],}
DECL|method|escape (String string)
specifier|private
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|string
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|charsToEscape
argument_list|)
return|;
block|}
comment|// Unescapes all the delimiters for counters i.e {,[,(,),],}
DECL|method|unescape (String string)
specifier|private
specifier|static
name|String
name|unescape
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|string
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|charsToEscape
argument_list|)
return|;
block|}
comment|// Extracts a block (data enclosed within delimeters) ignoring escape
comment|// sequences. Throws ParseException if an incomplete block is found else
comment|// returns null.
DECL|method|getBlock (String str, char open, char close, IntWritable index)
specifier|private
specifier|static
name|String
name|getBlock
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|open
parameter_list|,
name|char
name|close
parameter_list|,
name|IntWritable
name|index
parameter_list|)
throws|throws
name|ParseException
block|{
name|StringBuilder
name|split
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|StringUtils
operator|.
name|findNext
argument_list|(
name|str
argument_list|,
name|open
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|index
operator|.
name|get
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|split
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// clear the buffer
if|if
condition|(
name|next
operator|>=
literal|0
condition|)
block|{
operator|++
name|next
expr_stmt|;
comment|// move over '('
name|next
operator|=
name|StringUtils
operator|.
name|findNext
argument_list|(
name|str
argument_list|,
name|close
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|next
argument_list|,
name|split
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|>=
literal|0
condition|)
block|{
operator|++
name|next
expr_stmt|;
comment|// move over ')'
name|index
operator|.
name|set
argument_list|(
name|next
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|toString
argument_list|()
return|;
comment|// found a block
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unexpected end of block"
argument_list|,
name|next
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
comment|// found nothing
block|}
comment|/**    * Parse a pre 0.21 counters string into a counter object.    * @param<C> type of the counter    * @param<G> type of the counter group    * @param<T> type of the counters object    * @param compactString to parse    * @param counters an empty counters object to hold the result    * @return the counters object holding the result    * @throws ParseException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Counter
parameter_list|,
name|G
extends|extends
name|CounterGroupBase
argument_list|<
name|C
argument_list|>
parameter_list|,
name|T
extends|extends
name|AbstractCounters
argument_list|<
name|C
argument_list|,
name|G
argument_list|>
parameter_list|>
DECL|method|parseEscapedCompactString (String compactString, T counters)
name|T
name|parseEscapedCompactString
parameter_list|(
name|String
name|compactString
parameter_list|,
name|T
name|counters
parameter_list|)
throws|throws
name|ParseException
block|{
name|IntWritable
name|index
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the group to work on
name|String
name|groupString
init|=
name|getBlock
argument_list|(
name|compactString
argument_list|,
name|GROUP_OPEN
argument_list|,
name|GROUP_CLOSE
argument_list|,
name|index
argument_list|)
decl_stmt|;
while|while
condition|(
name|groupString
operator|!=
literal|null
condition|)
block|{
name|IntWritable
name|groupIndex
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the actual name
name|String
name|groupName
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|groupIndex
argument_list|)
argument_list|)
decl_stmt|;
name|groupName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|unescape
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the display name
name|String
name|groupDisplayName
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|groupIndex
argument_list|)
argument_list|)
decl_stmt|;
name|groupDisplayName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|unescape
argument_list|(
name|groupDisplayName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the counters
name|G
name|group
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|setDisplayName
argument_list|(
name|groupDisplayName
argument_list|)
expr_stmt|;
name|String
name|counterString
init|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|COUNTER_OPEN
argument_list|,
name|COUNTER_CLOSE
argument_list|,
name|groupIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|counterString
operator|!=
literal|null
condition|)
block|{
name|IntWritable
name|counterIndex
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the actual name
name|String
name|counterName
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
argument_list|)
decl_stmt|;
name|counterName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|unescape
argument_list|(
name|counterName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the display name
name|String
name|counterDisplayName
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
argument_list|)
decl_stmt|;
name|counterDisplayName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|unescape
argument_list|(
name|counterDisplayName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the value
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add the counter
name|Counter
name|counter
init|=
name|group
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setDisplayName
argument_list|(
name|counterDisplayName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Get the next counter
name|counterString
operator|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|COUNTER_OPEN
argument_list|,
name|COUNTER_CLOSE
argument_list|,
name|groupIndex
argument_list|)
expr_stmt|;
block|}
name|groupString
operator|=
name|getBlock
argument_list|(
name|compactString
argument_list|,
name|GROUP_OPEN
argument_list|,
name|GROUP_CLOSE
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
block|}
end_class

end_unit

