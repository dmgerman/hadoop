begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * JobID represents the immutable and unique identifier for   * the job. JobID consists of two parts. First part   * represents the jobtracker identifier, so that jobID to jobtracker map   * is defined. For cluster setup this string is the jobtracker   * start time, for local setting, it is "local" and a random number.  * Second part of the JobID is the job number.<br>   * An example JobID is :   *<code>job_200707121733_0003</code> , which represents the third job   * running at the jobtracker started at<code>200707121733</code>.   *<p>  * Applications should never construct or parse JobID strings, but rather   * use appropriate constructors or {@link #forName(String)} method.   *   * @see TaskID  * @see TaskAttemptID  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|JobID
specifier|public
class|class
name|JobID
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ID
implements|implements
name|Comparable
argument_list|<
name|ID
argument_list|>
block|{
DECL|field|JOB
specifier|protected
specifier|static
specifier|final
name|String
name|JOB
init|=
literal|"job"
decl_stmt|;
comment|// Jobid regex for various tools and framework components
DECL|field|JOBID_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|JOBID_REGEX
init|=
name|JOB
operator|+
name|SEPARATOR
operator|+
literal|"[0-9]+"
operator|+
name|SEPARATOR
operator|+
literal|"[0-9]+"
decl_stmt|;
DECL|field|jtIdentifier
specifier|private
specifier|final
name|Text
name|jtIdentifier
decl_stmt|;
DECL|field|idFormat
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a JobID object     * @param jtIdentifier jobTracker identifier    * @param id job number    */
DECL|method|JobID (String jtIdentifier, int id)
specifier|public
name|JobID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|jtIdentifier
operator|=
operator|new
name|Text
argument_list|(
name|jtIdentifier
argument_list|)
expr_stmt|;
block|}
DECL|method|JobID ()
specifier|public
name|JobID
parameter_list|()
block|{
name|jtIdentifier
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
DECL|method|getJtIdentifier ()
specifier|public
name|String
name|getJtIdentifier
parameter_list|()
block|{
return|return
name|jtIdentifier
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|JobID
name|that
init|=
operator|(
name|JobID
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|jtIdentifier
operator|.
name|equals
argument_list|(
name|that
operator|.
name|jtIdentifier
argument_list|)
return|;
block|}
comment|/**Compare JobIds by first jtIdentifiers, then by job numbers*/
annotation|@
name|Override
DECL|method|compareTo (ID o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ID
name|o
parameter_list|)
block|{
name|JobID
name|that
init|=
operator|(
name|JobID
operator|)
name|o
decl_stmt|;
name|int
name|jtComp
init|=
name|this
operator|.
name|jtIdentifier
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|jtIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtComp
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|id
operator|-
name|that
operator|.
name|id
return|;
block|}
else|else
return|return
name|jtComp
return|;
block|}
comment|/**    * Add the stuff after the "job" prefix to the given builder. This is useful,    * because the sub-ids use this substring at the start of their string.    * @param builder the builder to append to    * @return the builder that was passed in    */
DECL|method|appendTo (StringBuilder builder)
specifier|public
name|StringBuilder
name|appendTo
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|jtIdentifier
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|jtIdentifier
operator|.
name|hashCode
argument_list|()
operator|+
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appendTo
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|JOB
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|jtIdentifier
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|jtIdentifier
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** Construct a JobId object from given string     * @return constructed JobId object or null if the given String is null    * @throws IllegalArgumentException if the given string is malformed    */
DECL|method|forName (String str)
specifier|public
specifier|static
name|JobID
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|String
index|[]
name|parts
init|=
name|str
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|JOB
argument_list|)
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//fall below
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JobId string : "
operator|+
name|str
operator|+
literal|" is not properly formed"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

