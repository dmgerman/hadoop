begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|EncoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_comment
comment|/**  * Event Writer is an utility class used to write events to the underlying  * stream. Typically, one event writer (which translates to one stream)   * is created per job   *   */
end_comment

begin_class
DECL|class|EventWriter
class|class
name|EventWriter
block|{
DECL|field|VERSION
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"Avro-Json"
decl_stmt|;
DECL|field|out
specifier|private
name|FSDataOutputStream
name|out
decl_stmt|;
DECL|field|writer
specifier|private
name|DatumWriter
argument_list|<
name|Event
argument_list|>
name|writer
init|=
operator|new
name|SpecificDatumWriter
argument_list|<
name|Event
argument_list|>
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|encoder
specifier|private
name|Encoder
name|encoder
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EventWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|EventWriter (FSDataOutputStream out)
name|EventWriter
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|Event
operator|.
name|SCHEMA$
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|EncoderFactory
operator|.
name|get
argument_list|()
operator|.
name|jsonEncoder
argument_list|(
name|Event
operator|.
name|SCHEMA$
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|write (HistoryEvent event)
specifier|synchronized
name|void
name|write
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|Event
name|wrapper
init|=
operator|new
name|Event
argument_list|()
decl_stmt|;
name|wrapper
operator|.
name|type
operator|=
name|event
operator|.
name|getEventType
argument_list|()
expr_stmt|;
name|wrapper
operator|.
name|event
operator|=
name|event
operator|.
name|getDatum
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|wrapper
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|flush ()
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|GROUPS
specifier|private
specifier|static
specifier|final
name|Schema
name|GROUPS
init|=
name|Schema
operator|.
name|createArray
argument_list|(
name|JhCounterGroup
operator|.
name|SCHEMA$
argument_list|)
decl_stmt|;
DECL|field|COUNTERS
specifier|private
specifier|static
specifier|final
name|Schema
name|COUNTERS
init|=
name|Schema
operator|.
name|createArray
argument_list|(
name|JhCounter
operator|.
name|SCHEMA$
argument_list|)
decl_stmt|;
DECL|method|toAvro (Counters counters)
specifier|static
name|JhCounters
name|toAvro
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
return|return
name|toAvro
argument_list|(
name|counters
argument_list|,
literal|"COUNTERS"
argument_list|)
return|;
block|}
DECL|method|toAvro (Counters counters, String name)
specifier|static
name|JhCounters
name|toAvro
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|JhCounters
name|result
init|=
operator|new
name|JhCounters
argument_list|()
decl_stmt|;
name|result
operator|.
name|name
operator|=
operator|new
name|Utf8
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|groups
operator|=
operator|new
name|ArrayList
argument_list|<
name|JhCounterGroup
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
return|return
name|result
return|;
for|for
control|(
name|CounterGroup
name|group
range|:
name|counters
control|)
block|{
name|JhCounterGroup
name|g
init|=
operator|new
name|JhCounterGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|name
operator|=
operator|new
name|Utf8
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|displayName
operator|=
operator|new
name|Utf8
argument_list|(
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|counts
operator|=
operator|new
name|ArrayList
argument_list|<
name|JhCounter
argument_list|>
argument_list|(
name|group
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|JhCounter
name|c
init|=
operator|new
name|JhCounter
argument_list|()
decl_stmt|;
name|c
operator|.
name|name
operator|=
operator|new
name|Utf8
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|displayName
operator|=
operator|new
name|Utf8
argument_list|(
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|value
operator|=
name|counter
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|g
operator|.
name|counts
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|groups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

