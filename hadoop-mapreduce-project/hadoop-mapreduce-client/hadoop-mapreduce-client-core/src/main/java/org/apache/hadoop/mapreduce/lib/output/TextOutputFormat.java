begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/** An {@link OutputFormat} that writes plain text files. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TextOutputFormat
specifier|public
class|class
name|TextOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FileOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|SEPERATOR
specifier|public
specifier|static
name|String
name|SEPERATOR
init|=
literal|"mapreduce.output.textoutputformat.separator"
decl_stmt|;
DECL|class|LineRecordWriter
specifier|protected
specifier|static
class|class
name|LineRecordWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|utf8
specifier|private
specifier|static
specifier|final
name|String
name|utf8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|newline
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|newline
decl_stmt|;
static|static
block|{
try|try
block|{
name|newline
operator|=
literal|"\n"
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't find "
operator|+
name|utf8
operator|+
literal|" encoding"
argument_list|)
throw|;
block|}
block|}
DECL|field|out
specifier|protected
name|DataOutputStream
name|out
decl_stmt|;
DECL|field|keyValueSeparator
specifier|private
specifier|final
name|byte
index|[]
name|keyValueSeparator
decl_stmt|;
DECL|method|LineRecordWriter (DataOutputStream out, String keyValueSeparator)
specifier|public
name|LineRecordWriter
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|keyValueSeparator
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
try|try
block|{
name|this
operator|.
name|keyValueSeparator
operator|=
name|keyValueSeparator
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't find "
operator|+
name|utf8
operator|+
literal|" encoding"
argument_list|)
throw|;
block|}
block|}
DECL|method|LineRecordWriter (DataOutputStream out)
specifier|public
name|LineRecordWriter
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write the object to the byte stream, handling Text as a special      * case.      * @param o the object to print      * @throws IOException if the write throws, we pass it on      */
DECL|method|writeObject (Object o)
specifier|private
name|void
name|writeObject
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|to
init|=
operator|(
name|Text
operator|)
name|o
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|to
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|to
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|o
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (K key, V value)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|nullKey
init|=
name|key
operator|==
literal|null
operator|||
name|key
operator|instanceof
name|NullWritable
decl_stmt|;
name|boolean
name|nullValue
init|=
name|value
operator|==
literal|null
operator|||
name|value
operator|instanceof
name|NullWritable
decl_stmt|;
if|if
condition|(
name|nullKey
operator|&&
name|nullValue
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|nullKey
condition|)
block|{
name|writeObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|nullKey
operator|||
name|nullValue
operator|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|keyValueSeparator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nullValue
condition|)
block|{
name|writeObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
DECL|method|close (TaskAttemptContext context)
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|getRecordWriter (TaskAttemptContext job )
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|isCompressed
init|=
name|getCompressOutput
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|keyValueSeparator
init|=
name|conf
operator|.
name|get
argument_list|(
name|SEPERATOR
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|String
name|extension
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|getOutputCompressorClass
argument_list|(
name|job
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|)
decl_stmt|;
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|extension
operator|=
name|codec
operator|.
name|getDefaultExtension
argument_list|()
expr_stmt|;
block|}
name|Path
name|file
init|=
name|getDefaultWorkFile
argument_list|(
name|job
argument_list|,
name|extension
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCompressed
condition|)
block|{
name|FSDataOutputStream
name|fileOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|LineRecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|fileOut
argument_list|,
name|keyValueSeparator
argument_list|)
return|;
block|}
else|else
block|{
name|FSDataOutputStream
name|fileOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|LineRecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fileOut
argument_list|)
argument_list|)
argument_list|,
name|keyValueSeparator
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

