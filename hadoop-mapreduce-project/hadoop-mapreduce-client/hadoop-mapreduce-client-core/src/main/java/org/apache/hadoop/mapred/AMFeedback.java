begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * This class is a simple struct to include both the taskFound information and  * a possible preemption request coming from the AM.  */
end_comment

begin_class
DECL|class|AMFeedback
specifier|public
class|class
name|AMFeedback
implements|implements
name|Writable
block|{
DECL|field|taskFound
name|boolean
name|taskFound
decl_stmt|;
DECL|field|preemption
name|boolean
name|preemption
decl_stmt|;
DECL|method|setTaskFound (boolean t)
specifier|public
name|void
name|setTaskFound
parameter_list|(
name|boolean
name|t
parameter_list|)
block|{
name|taskFound
operator|=
name|t
expr_stmt|;
block|}
DECL|method|getTaskFound ()
specifier|public
name|boolean
name|getTaskFound
parameter_list|()
block|{
return|return
name|taskFound
return|;
block|}
DECL|method|setPreemption (boolean preemption)
specifier|public
name|void
name|setPreemption
parameter_list|(
name|boolean
name|preemption
parameter_list|)
block|{
name|this
operator|.
name|preemption
operator|=
name|preemption
expr_stmt|;
block|}
DECL|method|getPreemption ()
specifier|public
name|boolean
name|getPreemption
parameter_list|()
block|{
return|return
name|preemption
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|taskFound
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|preemption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|taskFound
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|preemption
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

