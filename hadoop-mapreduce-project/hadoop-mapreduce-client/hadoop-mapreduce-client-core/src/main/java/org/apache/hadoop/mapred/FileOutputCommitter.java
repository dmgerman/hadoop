begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/** An {@link OutputCommitter} that commits files specified   * in job output directory i.e. ${mapreduce.output.fileoutputformat.outputdir}.   **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FileOutputCommitter
specifier|public
class|class
name|FileOutputCommitter
extends|extends
name|OutputCommitter
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.FileOutputCommitter"
argument_list|)
decl_stmt|;
comment|/**    * Temporary directory name     */
DECL|field|TEMP_DIR_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_DIR_NAME
init|=
literal|"_temporary"
decl_stmt|;
DECL|field|SUCCEEDED_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SUCCEEDED_FILE_NAME
init|=
literal|"_SUCCESS"
decl_stmt|;
DECL|field|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
specifier|static
specifier|final
name|String
name|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
init|=
literal|"mapreduce.fileoutputcommitter.marksuccessfuljobs"
decl_stmt|;
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobAttemptBaseDirName
argument_list|(
name|context
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|tmpDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|tmpDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// True if the job requires output.dir marked on successful job.
comment|// Note that by default it is set to true.
DECL|method|shouldMarkOutputDir (JobConf conf)
specifier|private
name|boolean
name|shouldMarkOutputDir
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//delete the task temp directory from the current jobtempdir
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
name|FileSystem
name|outputFileSystem
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobAttemptBaseDirName
argument_list|(
name|context
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|tmpDir
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
condition|)
block|{
name|fileSys
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Task temp dir could not be deleted "
operator|+
name|tmpDir
argument_list|)
expr_stmt|;
block|}
comment|//move the job output to final place
name|Path
name|jobOutputPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobAttemptBaseDirName
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|moveJobOutputs
argument_list|(
name|outputFileSystem
argument_list|,
name|jobOutputPath
argument_list|,
name|outputPath
argument_list|,
name|jobOutputPath
argument_list|)
expr_stmt|;
comment|// delete the _temporary folder in the output folder
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// check if the output-dir marking is required
if|if
condition|(
name|shouldMarkOutputDir
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
condition|)
block|{
comment|// create a _success file in the output folder
name|markOutputDirSuccessful
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Create a _success file in the job's output folder
DECL|method|markOutputDirSuccessful (JobContext context)
specifier|private
name|void
name|markOutputDirSuccessful
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
comment|// get the o/p path
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
comment|// get the filesys
name|FileSystem
name|fileSys
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create a file in the output folder to mark the job completion
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|SUCCEEDED_FILE_NAME
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|moveJobOutputs (FileSystem fs, final Path origJobOutputPath, Path finalOutputDir, Path jobOutput)
specifier|private
name|void
name|moveJobOutputs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|origJobOutputPath
parameter_list|,
name|Path
name|finalOutputDir
parameter_list|,
name|Path
name|jobOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Told to move job output from "
operator|+
name|jobOutput
operator|+
literal|" to "
operator|+
name|finalOutputDir
operator|+
literal|" and orig job output path is "
operator|+
name|origJobOutputPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|jobOutput
argument_list|)
condition|)
block|{
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|fs
argument_list|,
name|finalOutputDir
argument_list|,
name|jobOutput
argument_list|,
name|origJobOutputPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|jobOutput
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|finalOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete earlier output of job"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|jobOutput
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to save output of job"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moved job output file from "
operator|+
name|jobOutput
operator|+
literal|" to "
operator|+
name|finalOutputPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|jobOutput
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Job output file "
operator|+
name|jobOutput
operator|+
literal|" is a dir"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|paths
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|jobOutput
argument_list|)
decl_stmt|;
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|fs
argument_list|,
name|finalOutputDir
argument_list|,
name|jobOutput
argument_list|,
name|origJobOutputPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalOutputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating dirs along job output path "
operator|+
name|finalOutputPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|path
range|:
name|paths
control|)
block|{
name|moveJobOutputs
argument_list|(
name|fs
argument_list|,
name|origJobOutputPath
argument_list|,
name|finalOutputDir
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|cleanupJob (JobContext context)
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
comment|// do the clean up of temporary directory
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|tmpDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|context
operator|.
name|getProgressible
argument_list|()
operator|.
name|progress
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
condition|)
block|{
name|fileSys
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Output Path is Null in cleanup"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext context, int runState)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|int
name|runState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// simply delete the _temporary dir from the o/p folder of the job
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|setupTask (TaskAttemptContext context)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// FileOutputCommitter's setupTask doesn't do anything. Because the
comment|// temporary task directory is created on demand when the
comment|// task is writing.
block|}
DECL|method|commitTask (TaskAttemptContext context)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|taskOutputPath
init|=
name|getTempTaskOutputPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|attemptId
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskOutputPath
operator|!=
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|taskOutputPath
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|context
operator|.
name|getProgressible
argument_list|()
operator|.
name|progress
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|taskOutputPath
argument_list|)
condition|)
block|{
comment|// Move the task outputs to the current job attempt output dir
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|outputFileSystem
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|jobOutputPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobTempDirName
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|moveTaskOutputs
argument_list|(
name|context
argument_list|,
name|outputFileSystem
argument_list|,
name|jobOutputPath
argument_list|,
name|taskOutputPath
argument_list|)
expr_stmt|;
comment|// Delete the temporary task-specific output directory
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|taskOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to delete the temporary output"
operator|+
literal|" directory of task: "
operator|+
name|attemptId
operator|+
literal|" - "
operator|+
name|taskOutputPath
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Saved output of task '"
operator|+
name|attemptId
operator|+
literal|"' to "
operator|+
name|jobOutputPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|moveTaskOutputs (TaskAttemptContext context, FileSystem fs, Path jobOutputDir, Path taskOutput)
specifier|private
name|void
name|moveTaskOutputs
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|jobOutputDir
parameter_list|,
name|Path
name|taskOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptID
name|attemptId
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
name|context
operator|.
name|getProgressible
argument_list|()
operator|.
name|progress
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Told to move taskoutput from "
operator|+
name|taskOutput
operator|+
literal|" to "
operator|+
name|jobOutputDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|taskOutput
argument_list|)
condition|)
block|{
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|fs
argument_list|,
name|jobOutputDir
argument_list|,
name|taskOutput
argument_list|,
name|getTempTaskOutputPath
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|taskOutput
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|finalOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete earlier output of task: "
operator|+
name|attemptId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|taskOutput
argument_list|,
name|finalOutputPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to save output of task: "
operator|+
name|attemptId
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moved "
operator|+
name|taskOutput
operator|+
literal|" to "
operator|+
name|finalOutputPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|taskOutput
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Taskoutput "
operator|+
name|taskOutput
operator|+
literal|" is a dir"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|paths
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|taskOutput
argument_list|)
decl_stmt|;
name|Path
name|finalOutputPath
init|=
name|getFinalPath
argument_list|(
name|fs
argument_list|,
name|jobOutputDir
argument_list|,
name|taskOutput
argument_list|,
name|getTempTaskOutputPath
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalOutputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating dirs along path "
operator|+
name|finalOutputPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|path
range|:
name|paths
control|)
block|{
name|moveTaskOutputs
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|jobOutputDir
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|taskOutputPath
init|=
name|getTempTaskOutputPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskOutputPath
operator|!=
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|taskOutputPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getProgressible
argument_list|()
operator|.
name|progress
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|taskOutputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getFinalPath (FileSystem fs, Path jobOutputDir, Path taskOutput, Path taskOutputPath)
specifier|private
name|Path
name|getFinalPath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|jobOutputDir
parameter_list|,
name|Path
name|taskOutput
parameter_list|,
name|Path
name|taskOutputPath
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|taskOutputUri
init|=
name|taskOutput
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|taskOutputPathUri
init|=
name|taskOutputPath
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|relativePath
init|=
name|taskOutputPathUri
operator|.
name|relativize
argument_list|(
name|taskOutputUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskOutputUri
operator|==
name|relativePath
condition|)
block|{
comment|//taskOutputPath is not a parent of taskOutput
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not get the relative path: base = "
operator|+
name|taskOutputPathUri
operator|+
literal|" child = "
operator|+
name|taskOutputUri
argument_list|)
throw|;
block|}
if|if
condition|(
name|relativePath
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|jobOutputDir
argument_list|,
name|relativePath
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|jobOutputDir
return|;
block|}
block|}
DECL|method|needsTaskCommit (TaskAttemptContext context)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|taskOutputPath
init|=
name|getTempTaskOutputPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskOutputPath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProgressible
argument_list|()
operator|.
name|progress
argument_list|()
expr_stmt|;
comment|// Get the file-system for the task output directory
name|FileSystem
name|fs
init|=
name|taskOutputPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// since task output path is created on demand,
comment|// if it exists, task needs a commit
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|taskOutputPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getTempTaskOutputPath (TaskAttemptContext taskContext)
name|Path
name|getTempTaskOutputPath
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
name|taskContext
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
operator|(
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"_"
operator|+
name|taskContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getWorkPath (TaskAttemptContext taskContext, Path basePath)
name|Path
name|getWorkPath
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|,
name|Path
name|basePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ${mapred.out.dir}/_temporary
name|Path
name|jobTmpDir
init|=
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jobTmpDir
operator|.
name|getFileSystem
argument_list|(
name|taskContext
operator|.
name|getJobConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|jobTmpDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The temporary job-output directory "
operator|+
name|jobTmpDir
operator|.
name|toString
argument_list|()
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
comment|// ${mapred.out.dir}/_temporary/_${taskid}
name|String
name|taskid
init|=
name|taskContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|taskTmpDir
init|=
operator|new
name|Path
argument_list|(
name|jobTmpDir
argument_list|,
literal|"_"
operator|+
name|taskid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|taskTmpDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|taskTmpDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|taskTmpDir
return|;
block|}
annotation|@
name|Override
DECL|method|isRecoverySupported ()
specifier|public
name|boolean
name|isRecoverySupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|recoverTask (TaskAttemptContext context)
specifier|public
name|void
name|recoverTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
name|Path
name|jobOutputPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobTempDirName
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|previousAttempt
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRConstants
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|0
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|previousAttempt
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot recover task output for first attempt..."
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileSystem
name|outputFileSystem
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|pathToRecover
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|getJobAttemptBaseDirName
argument_list|(
name|previousAttempt
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFileSystem
operator|.
name|exists
argument_list|(
name|pathToRecover
argument_list|)
condition|)
block|{
comment|// Move the task outputs to their final place
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to recover task from "
operator|+
name|pathToRecover
operator|+
literal|" into "
operator|+
name|jobOutputPath
argument_list|)
expr_stmt|;
name|moveJobOutputs
argument_list|(
name|outputFileSystem
argument_list|,
name|pathToRecover
argument_list|,
name|jobOutputPath
argument_list|,
name|pathToRecover
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saved output of job to "
operator|+
name|jobOutputPath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJobAttemptBaseDirName (JobContext context)
specifier|protected
specifier|static
name|String
name|getJobAttemptBaseDirName
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
name|int
name|appAttemptId
init|=
name|context
operator|.
name|getJobConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRConstants
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|getJobAttemptBaseDirName
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
DECL|method|getJobTempDirName (TaskAttemptContext context)
specifier|protected
specifier|static
name|String
name|getJobTempDirName
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|int
name|appAttemptId
init|=
name|context
operator|.
name|getJobConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRConstants
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|getJobAttemptBaseDirName
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
DECL|method|getJobAttemptBaseDirName (int appAttemptId)
specifier|protected
specifier|static
name|String
name|getJobAttemptBaseDirName
parameter_list|(
name|int
name|appAttemptId
parameter_list|)
block|{
return|return
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
operator|+
name|appAttemptId
return|;
block|}
DECL|method|getTaskAttemptBaseDirName ( TaskAttemptContext context)
specifier|protected
specifier|static
name|String
name|getTaskAttemptBaseDirName
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
name|getJobTempDirName
argument_list|(
name|context
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"_"
operator|+
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

