begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.filecache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|filecache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_comment
comment|/**  * Distribute application-specific large, read-only files efficiently.  *  *<p><code>DistributedCache</code> is a facility provided by the Map-Reduce  * framework to cache files (text, archives, jars etc.) needed by applications.  *</p>  *  *<p>Applications specify the files, via urls (hdfs:// or http://) to be cached  * via the {@link org.apache.hadoop.mapred.JobConf}. The  *<code>DistributedCache</code> assumes that the files specified via urls are  * already present on the {@link FileSystem} at the path specified by the url  * and are accessible by every machine in the cluster.</p>  *  *<p>The framework will copy the necessary files on to the worker node before  * any tasks for the job are executed on that node. Its efficiency stems from  * the fact that the files are only copied once per job and the ability to  * cache archives which are un-archived on the workers.</p>  *  *<p><code>DistributedCache</code> can be used to distribute simple, read-only  * data/text files and/or more complex types such as archives, jars etc.  * Archives (zip, tar and tgz/tar.gz files) are un-archived at the worker nodes.  * Jars may be optionally added to the classpath of the tasks, a rudimentary  * software distribution mechanism.  Files have execution permissions.  * In older version of Hadoop Map/Reduce users could optionally ask for symlinks  * to be created in the working directory of the child task.  In the current  * version symlinks are always created.  If the URL does not have a fragment  * the name of the file or directory will be used. If multiple files or  * directories map to the same link name, the last one added, will be used.  All  * others will not even be downloaded.</p>  *  *<p><code>DistributedCache</code> tracks modification timestamps of the cache  * files. Clearly the cache files should not be modified by the application  * or externally while the job is executing.</p>  *  *<p>Here is an illustrative example on how to use the  *<code>DistributedCache</code>:</p>  *<p><blockquote><pre>  *     // Setting up the cache for the application  *  *     1. Copy the requisite files to the<code>FileSystem</code>:  *  *     $ bin/hadoop fs -copyFromLocal lookup.dat /myapp/lookup.dat  *     $ bin/hadoop fs -copyFromLocal map.zip /myapp/map.zip  *     $ bin/hadoop fs -copyFromLocal mylib.jar /myapp/mylib.jar  *     $ bin/hadoop fs -copyFromLocal mytar.tar /myapp/mytar.tar  *     $ bin/hadoop fs -copyFromLocal mytgz.tgz /myapp/mytgz.tgz  *     $ bin/hadoop fs -copyFromLocal mytargz.tar.gz /myapp/mytargz.tar.gz  *  *     2. Setup the application's<code>JobConf</code>:  *  *     JobConf job = new JobConf();  *     DistributedCache.addCacheFile(new URI("/myapp/lookup.dat#lookup.dat"),  *                                   job);  *     DistributedCache.addCacheArchive(new URI("/myapp/map.zip"), job);  *     DistributedCache.addFileToClassPath(new Path("/myapp/mylib.jar"), job);  *     DistributedCache.addCacheArchive(new URI("/myapp/mytar.tar"), job);  *     DistributedCache.addCacheArchive(new URI("/myapp/mytgz.tgz"), job);  *     DistributedCache.addCacheArchive(new URI("/myapp/mytargz.tar.gz"), job);  *  *     3. Use the cached files in the {@link org.apache.hadoop.mapred.Mapper}  *     or {@link org.apache.hadoop.mapred.Reducer}:  *  *     public static class MapClass extends MapReduceBase  *     implements Mapper&lt;K, V, K, V&gt; {  *  *       private Path[] localArchives;  *       private Path[] localFiles;  *  *       public void configure(JobConf job) {  *         // Get the cached archives/files  *         File f = new File("./map.zip/some/file/in/zip.txt");  *       }  *  *       public void map(K key, V value,  *                       OutputCollector&lt;K, V&gt; output, Reporter reporter)  *       throws IOException {  *         // Use data from the cached archives/files here  *         // ...  *         // ...  *         output.collect(k, v);  *       }  *     }  *  *</pre></blockquote>  *  * It is also very common to use the DistributedCache by using  * {@link org.apache.hadoop.util.GenericOptionsParser}.  *  * This class includes methods that should be used by users  * (specifically those mentioned in the example above, as well  * as {@link DistributedCache#addArchiveToClassPath(Path, Configuration)}),  * as well as methods intended for use by the MapReduce framework  * (e.g., {@link org.apache.hadoop.mapred.JobClient}).  *  * @see org.apache.hadoop.mapred.JobConf  * @see org.apache.hadoop.mapred.JobClient  * @see org.apache.hadoop.mapreduce.Job  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
annotation|@
name|Deprecated
DECL|class|DistributedCache
specifier|public
class|class
name|DistributedCache
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
block|{
comment|/**    * Warning: {@link #CACHE_FILES_SIZES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_FILES_SIZES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_FILES_SIZES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_FILES_SIZES
init|=
literal|"mapred.cache.files.filesizes"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_ARCHIVES_SIZES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_ARCHIVES_SIZES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_ARCHIVES_SIZES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_ARCHIVES_SIZES
init|=
literal|"mapred.cache.archives.filesizes"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_ARCHIVES_TIMESTAMPS} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_ARCHIVES_TIMESTAMPS}    */
annotation|@
name|Deprecated
DECL|field|CACHE_ARCHIVES_TIMESTAMPS
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_ARCHIVES_TIMESTAMPS
init|=
literal|"mapred.cache.archives.timestamps"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_FILES_TIMESTAMPS} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_FILE_TIMESTAMPS}    */
annotation|@
name|Deprecated
DECL|field|CACHE_FILES_TIMESTAMPS
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_FILES_TIMESTAMPS
init|=
literal|"mapred.cache.files.timestamps"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_ARCHIVES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_ARCHIVES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_ARCHIVES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_ARCHIVES
init|=
literal|"mapred.cache.archives"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_FILES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_FILES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_FILES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_FILES
init|=
literal|"mapred.cache.files"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_LOCALARCHIVES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_LOCALARCHIVES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_LOCALARCHIVES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_LOCALARCHIVES
init|=
literal|"mapred.cache.localArchives"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_LOCALFILES} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_LOCALFILES}    */
annotation|@
name|Deprecated
DECL|field|CACHE_LOCALFILES
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_LOCALFILES
init|=
literal|"mapred.cache.localFiles"
decl_stmt|;
comment|/**    * Warning: {@link #CACHE_SYMLINK} is not a *public* constant.    * The variable is kept for M/R 1.x applications, M/R 2.x applications should    * use {@link MRJobConfig#CACHE_SYMLINK}    */
annotation|@
name|Deprecated
DECL|field|CACHE_SYMLINK
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_SYMLINK
init|=
literal|"mapred.create.symlink"
decl_stmt|;
comment|/**    * Add a archive that has been localized to the conf.  Used    * by internal DistributedCache code.    * @param conf The conf to modify to contain the localized caches    * @param str a comma separated list of local archives    */
annotation|@
name|Deprecated
DECL|method|addLocalArchives (Configuration conf, String str)
specifier|public
specifier|static
name|void
name|addLocalArchives
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|String
name|archives
init|=
name|conf
operator|.
name|get
argument_list|(
name|CACHE_LOCALARCHIVES
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CACHE_LOCALARCHIVES
argument_list|,
name|archives
operator|==
literal|null
condition|?
name|str
else|:
name|archives
operator|+
literal|","
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a file that has been localized to the conf..  Used    * by internal DistributedCache code.    * @param conf The conf to modify to contain the localized caches    * @param str a comma separated list of local files    */
annotation|@
name|Deprecated
DECL|method|addLocalFiles (Configuration conf, String str)
specifier|public
specifier|static
name|void
name|addLocalFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|String
name|files
init|=
name|conf
operator|.
name|get
argument_list|(
name|CACHE_LOCALFILES
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CACHE_LOCALFILES
argument_list|,
name|files
operator|==
literal|null
condition|?
name|str
else|:
name|files
operator|+
literal|","
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method create symlinks for all files in a given dir in another    * directory. Currently symlinks cannot be disabled. This is a NO-OP.    *    * @param conf the configuration    * @param jobCacheDir the target directory for creating symlinks    * @param workDir the directory in which the symlinks are created    * @throws IOException    * @deprecated Internal to MapReduce framework.  Use DistributedCacheManager    * instead.    */
annotation|@
name|Deprecated
DECL|method|createAllSymlink ( Configuration conf, File jobCacheDir, File workDir)
specifier|public
specifier|static
name|void
name|createAllSymlink
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|File
name|jobCacheDir
parameter_list|,
name|File
name|workDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing
block|}
comment|/**    * Returns {@link FileStatus} of a given cache file on hdfs. Internal to    * MapReduce.    * @param conf configuration    * @param cache cache file    * @return<code>FileStatus</code> of a given cache file on hdfs    * @throws IOException    */
annotation|@
name|Deprecated
DECL|method|getFileStatus (Configuration conf, URI cache)
specifier|public
specifier|static
name|FileStatus
name|getFileStatus
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cache
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|cache
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns mtime of a given cache file on hdfs. Internal to MapReduce.    * @param conf configuration    * @param cache cache file    * @return mtime of a given cache file on hdfs    * @throws IOException    */
annotation|@
name|Deprecated
DECL|method|getTimestamp (Configuration conf, URI cache)
specifier|public
specifier|static
name|long
name|getTimestamp
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileStatus
argument_list|(
name|conf
argument_list|,
name|cache
argument_list|)
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
comment|/**    * This is to check the timestamp of the archives to be localized.    * Used by internal MapReduce code.    * @param conf Configuration which stores the timestamp's    * @param timestamps comma separated list of timestamps of archives.    * The order should be the same as the order in which the archives are added.    */
annotation|@
name|Deprecated
DECL|method|setArchiveTimestamps (Configuration conf, String timestamps)
specifier|public
specifier|static
name|void
name|setArchiveTimestamps
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|timestamps
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CACHE_ARCHIVES_TIMESTAMPS
argument_list|,
name|timestamps
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is to check the timestamp of the files to be localized.    * Used by internal MapReduce code.    * @param conf Configuration which stores the timestamp's    * @param timestamps comma separated list of timestamps of files.    * The order should be the same as the order in which the files are added.    */
annotation|@
name|Deprecated
DECL|method|setFileTimestamps (Configuration conf, String timestamps)
specifier|public
specifier|static
name|void
name|setFileTimestamps
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|timestamps
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CACHE_FILES_TIMESTAMPS
argument_list|,
name|timestamps
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the conf to contain the location for localized archives.  Used    * by internal DistributedCache code.    * @param conf The conf to modify to contain the localized caches    * @param str a comma separated list of local archives    */
annotation|@
name|Deprecated
DECL|method|setLocalArchives (Configuration conf, String str)
specifier|public
specifier|static
name|void
name|setLocalArchives
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CACHE_LOCALARCHIVES
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the conf to contain the location for localized files.  Used    * by internal DistributedCache code.    * @param conf The conf to modify to contain the localized caches    * @param str a comma separated list of local files    */
annotation|@
name|Deprecated
DECL|method|setLocalFiles (Configuration conf, String str)
specifier|public
specifier|static
name|void
name|setLocalFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CACHE_LOCALFILES
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

