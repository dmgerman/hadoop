begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_comment
comment|/**  * Class containing utility methods to be used by JobHistoryEventHandler.  */
end_comment

begin_class
DECL|class|JobHistoryEventUtils
specifier|public
specifier|final
class|class
name|JobHistoryEventUtils
block|{
DECL|method|JobHistoryEventUtils ()
specifier|private
name|JobHistoryEventUtils
parameter_list|()
block|{   }
comment|// Number of bytes of config which can be published in one shot to ATSv2.
DECL|field|ATS_CONFIG_PUBLISH_SIZE_BYTES
specifier|public
specifier|static
specifier|final
name|int
name|ATS_CONFIG_PUBLISH_SIZE_BYTES
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
DECL|method|countersToJSON (Counters counters)
specifier|public
specifier|static
name|JsonNode
name|countersToJSON
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ArrayNode
name|nodes
init|=
name|mapper
operator|.
name|createArrayNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CounterGroup
name|counterGroup
range|:
name|counters
control|)
block|{
name|ObjectNode
name|groupNode
init|=
name|nodes
operator|.
name|addObject
argument_list|()
decl_stmt|;
name|groupNode
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
name|counterGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groupNode
operator|.
name|put
argument_list|(
literal|"DISPLAY_NAME"
argument_list|,
name|counterGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayNode
name|countersNode
init|=
name|groupNode
operator|.
name|putArray
argument_list|(
literal|"COUNTERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|counterGroup
control|)
block|{
name|ObjectNode
name|counterNode
init|=
name|countersNode
operator|.
name|addObject
argument_list|()
decl_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
name|counter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"DISPLAY_NAME"
argument_list|,
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"VALUE"
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
DECL|method|countersToTimelineMetric (Counters counters, long timestamp)
specifier|public
specifier|static
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|countersToTimelineMetric
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|countersToTimelineMetric
argument_list|(
name|counters
argument_list|,
name|timestamp
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|countersToTimelineMetric (Counters counters, long timestamp, String groupNamePrefix)
specifier|public
specifier|static
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|countersToTimelineMetric
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|String
name|groupNamePrefix
parameter_list|)
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|entityMetrics
init|=
operator|new
name|HashSet
argument_list|<
name|TimelineMetric
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CounterGroup
name|g
range|:
name|counters
control|)
block|{
name|String
name|groupName
init|=
name|g
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|Counter
name|c
range|:
name|g
control|)
block|{
name|String
name|name
init|=
name|groupNamePrefix
operator|+
name|groupName
operator|+
literal|":"
operator|+
name|c
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TimelineMetric
name|metric
init|=
operator|new
name|TimelineMetric
argument_list|()
decl_stmt|;
name|metric
operator|.
name|setId
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|metric
operator|.
name|addValue
argument_list|(
name|timestamp
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entityMetrics
operator|.
name|add
argument_list|(
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entityMetrics
return|;
block|}
block|}
end_class

end_unit

