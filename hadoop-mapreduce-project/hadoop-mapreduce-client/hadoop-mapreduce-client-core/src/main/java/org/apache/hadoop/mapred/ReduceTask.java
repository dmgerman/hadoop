begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SortedRanges
operator|.
name|SkipRangeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormatCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|Shuffle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/** A Reduce task. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ReduceTask
specifier|public
class|class
name|ReduceTask
extends|extends
name|Task
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|ReduceTask
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ReduceTask
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReduceTask
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|numMaps
specifier|private
name|int
name|numMaps
decl_stmt|;
DECL|field|codec
specifier|private
name|CompressionCodec
name|codec
decl_stmt|;
block|{
name|getProgress
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"reduce"
argument_list|)
expr_stmt|;
name|setPhase
parameter_list|(
name|TaskStatus
operator|.
name|Phase
operator|.
name|SHUFFLE
parameter_list|)
constructor_decl|;
comment|// phase to start with
block|}
DECL|field|copyPhase
specifier|private
name|Progress
name|copyPhase
decl_stmt|;
DECL|field|sortPhase
specifier|private
name|Progress
name|sortPhase
decl_stmt|;
DECL|field|reducePhase
specifier|private
name|Progress
name|reducePhase
decl_stmt|;
DECL|field|shuffledMapsCounter
specifier|private
name|Counters
operator|.
name|Counter
name|shuffledMapsCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|SHUFFLED_MAPS
argument_list|)
decl_stmt|;
DECL|field|reduceShuffleBytes
specifier|private
name|Counters
operator|.
name|Counter
name|reduceShuffleBytes
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_SHUFFLE_BYTES
argument_list|)
decl_stmt|;
DECL|field|reduceInputKeyCounter
specifier|private
name|Counters
operator|.
name|Counter
name|reduceInputKeyCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|)
decl_stmt|;
DECL|field|reduceInputValueCounter
specifier|private
name|Counters
operator|.
name|Counter
name|reduceInputValueCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
decl_stmt|;
DECL|field|reduceOutputCounter
specifier|private
name|Counters
operator|.
name|Counter
name|reduceOutputCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_OUTPUT_RECORDS
argument_list|)
decl_stmt|;
DECL|field|reduceCombineInputCounter
specifier|private
name|Counters
operator|.
name|Counter
name|reduceCombineInputCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|COMBINE_INPUT_RECORDS
argument_list|)
decl_stmt|;
DECL|field|reduceCombineOutputCounter
specifier|private
name|Counters
operator|.
name|Counter
name|reduceCombineOutputCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|COMBINE_OUTPUT_RECORDS
argument_list|)
decl_stmt|;
DECL|field|fileOutputByteCounter
specifier|private
name|Counters
operator|.
name|Counter
name|fileOutputByteCounter
init|=
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|FileOutputFormatCounter
operator|.
name|BYTES_WRITTEN
argument_list|)
decl_stmt|;
comment|// A custom comparator for map output files. Here the ordering is determined
comment|// by the file's size and path. In case of files with same size and different
comment|// file paths, the first parameter is considered smaller than the second one.
comment|// In case of files with same size and path are considered equal.
DECL|field|mapOutputFileComparator
specifier|private
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
name|mapOutputFileComparator
init|=
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|a
parameter_list|,
name|FileStatus
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getLen
argument_list|()
operator|<
name|b
operator|.
name|getLen
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|a
operator|.
name|getLen
argument_list|()
operator|==
name|b
operator|.
name|getLen
argument_list|()
condition|)
if|if
condition|(
name|a
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
else|else
return|return
operator|-
literal|1
return|;
else|else
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
comment|// A sorted set for keeping a set of map output files on disk
DECL|field|mapOutputFilesOnDisk
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|FileStatus
argument_list|>
name|mapOutputFilesOnDisk
init|=
operator|new
name|TreeSet
argument_list|<
name|FileStatus
argument_list|>
argument_list|(
name|mapOutputFileComparator
argument_list|)
decl_stmt|;
DECL|method|ReduceTask ()
specifier|public
name|ReduceTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|ReduceTask (String jobFile, TaskAttemptID taskId, int partition, int numMaps, int numSlotsRequired)
specifier|public
name|ReduceTask
parameter_list|(
name|String
name|jobFile
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|int
name|partition
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numSlotsRequired
parameter_list|)
block|{
name|super
argument_list|(
name|jobFile
argument_list|,
name|taskId
argument_list|,
name|partition
argument_list|,
name|numSlotsRequired
argument_list|)
expr_stmt|;
name|this
operator|.
name|numMaps
operator|=
name|numMaps
expr_stmt|;
block|}
DECL|method|initCodec ()
specifier|private
name|CompressionCodec
name|initCodec
parameter_list|()
block|{
comment|// check if map-outputs are to be compressed
if|if
condition|(
name|conf
operator|.
name|getCompressMapOutput
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|conf
operator|.
name|getMapOutputCompressorClass
argument_list|(
name|DefaultCodec
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isMapTask ()
specifier|public
name|boolean
name|isMapTask
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getNumMaps ()
specifier|public
name|int
name|getNumMaps
parameter_list|()
block|{
return|return
name|numMaps
return|;
block|}
comment|/**    * Localize the given JobConf to be specific for this task.    */
annotation|@
name|Override
DECL|method|localizeConfiguration (JobConf conf)
specifier|public
name|void
name|localizeConfiguration
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|localizeConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
comment|// write the number of maps
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|numMaps
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|// Get the input files for the reducer.
DECL|method|getMapFiles (FileSystem fs, boolean isLocal)
specifier|private
name|Path
index|[]
name|getMapFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|isLocal
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLocal
condition|)
block|{
comment|// for local jobs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
operator|++
name|i
control|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|mapOutputFile
operator|.
name|getInputFile
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// for non local jobs
for|for
control|(
name|FileStatus
name|filestatus
range|:
name|mapOutputFilesOnDisk
control|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|filestatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileList
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|class|ReduceValuesIterator
specifier|private
class|class
name|ReduceValuesIterator
parameter_list|<
name|KEY
parameter_list|,
name|VALUE
parameter_list|>
extends|extends
name|ValuesIterator
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
block|{
DECL|method|ReduceValuesIterator (RawKeyValueIterator in, RawComparator<KEY> comparator, Class<KEY> keyClass, Class<VALUE> valClass, Configuration conf, Progressable reporter)
specifier|public
name|ReduceValuesIterator
parameter_list|(
name|RawKeyValueIterator
name|in
parameter_list|,
name|RawComparator
argument_list|<
name|KEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|KEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|VALUE
argument_list|>
name|valClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|VALUE
name|next
parameter_list|()
block|{
name|reduceInputValueCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|moveToNext
argument_list|()
return|;
block|}
DECL|method|moveToNext ()
specifier|protected
name|VALUE
name|moveToNext
parameter_list|()
block|{
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|informReduceProgress ()
specifier|public
name|void
name|informReduceProgress
parameter_list|()
block|{
name|reducePhase
operator|.
name|set
argument_list|(
name|super
operator|.
name|in
operator|.
name|getProgress
argument_list|()
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
comment|// update progress
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SkippingReduceValuesIterator
specifier|private
class|class
name|SkippingReduceValuesIterator
parameter_list|<
name|KEY
parameter_list|,
name|VALUE
parameter_list|>
extends|extends
name|ReduceValuesIterator
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
block|{
DECL|field|skipIt
specifier|private
name|SkipRangeIterator
name|skipIt
decl_stmt|;
DECL|field|umbilical
specifier|private
name|TaskUmbilicalProtocol
name|umbilical
decl_stmt|;
DECL|field|skipGroupCounter
specifier|private
name|Counters
operator|.
name|Counter
name|skipGroupCounter
decl_stmt|;
DECL|field|skipRecCounter
specifier|private
name|Counters
operator|.
name|Counter
name|skipRecCounter
decl_stmt|;
DECL|field|grpIndex
specifier|private
name|long
name|grpIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|keyClass
specifier|private
name|Class
argument_list|<
name|KEY
argument_list|>
name|keyClass
decl_stmt|;
DECL|field|valClass
specifier|private
name|Class
argument_list|<
name|VALUE
argument_list|>
name|valClass
decl_stmt|;
DECL|field|skipWriter
specifier|private
name|SequenceFile
operator|.
name|Writer
name|skipWriter
decl_stmt|;
DECL|field|toWriteSkipRecs
specifier|private
name|boolean
name|toWriteSkipRecs
decl_stmt|;
DECL|field|hasNext
specifier|private
name|boolean
name|hasNext
decl_stmt|;
DECL|field|reporter
specifier|private
name|TaskReporter
name|reporter
decl_stmt|;
DECL|method|SkippingReduceValuesIterator (RawKeyValueIterator in, RawComparator<KEY> comparator, Class<KEY> keyClass, Class<VALUE> valClass, Configuration conf, TaskReporter reporter, TaskUmbilicalProtocol umbilical)
specifier|public
name|SkippingReduceValuesIterator
parameter_list|(
name|RawKeyValueIterator
name|in
parameter_list|,
name|RawComparator
argument_list|<
name|KEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|KEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|VALUE
argument_list|>
name|valClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|this
operator|.
name|umbilical
operator|=
name|umbilical
expr_stmt|;
name|this
operator|.
name|skipGroupCounter
operator|=
name|reporter
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_SKIPPED_GROUPS
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipRecCounter
operator|=
name|reporter
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_SKIPPED_RECORDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|toWriteSkipRecs
operator|=
name|toWriteSkipRecs
argument_list|()
operator|&&
name|SkipBadRecords
operator|.
name|getSkipOutputPath
argument_list|(
name|conf
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|keyClass
operator|=
name|keyClass
expr_stmt|;
name|this
operator|.
name|valClass
operator|=
name|valClass
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|skipIt
operator|=
name|getSkipRanges
argument_list|()
operator|.
name|skipRangeIterator
argument_list|()
expr_stmt|;
name|mayBeSkip
argument_list|()
expr_stmt|;
block|}
DECL|method|nextKey ()
specifier|public
name|void
name|nextKey
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|nextKey
argument_list|()
expr_stmt|;
name|mayBeSkip
argument_list|()
expr_stmt|;
block|}
DECL|method|more ()
specifier|public
name|boolean
name|more
parameter_list|()
block|{
return|return
name|super
operator|.
name|more
argument_list|()
operator|&&
name|hasNext
return|;
block|}
DECL|method|mayBeSkip ()
specifier|private
name|void
name|mayBeSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|hasNext
operator|=
name|skipIt
operator|.
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Further groups got skipped."
argument_list|)
expr_stmt|;
return|return;
block|}
name|grpIndex
operator|++
expr_stmt|;
name|long
name|nextGrpIndex
init|=
name|skipIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|skip
init|=
literal|0
decl_stmt|;
name|long
name|skipRec
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|grpIndex
operator|<
name|nextGrpIndex
operator|&&
name|super
operator|.
name|more
argument_list|()
condition|)
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|VALUE
name|value
init|=
name|moveToNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWriteSkipRecs
condition|)
block|{
name|writeSkippedRec
argument_list|(
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|skipRec
operator|++
expr_stmt|;
block|}
name|super
operator|.
name|nextKey
argument_list|()
expr_stmt|;
name|grpIndex
operator|++
expr_stmt|;
name|skip
operator|++
expr_stmt|;
block|}
comment|//close the skip writer once all the ranges are skipped
if|if
condition|(
name|skip
operator|>
literal|0
operator|&&
name|skipIt
operator|.
name|skippedAllRanges
argument_list|()
operator|&&
name|skipWriter
operator|!=
literal|null
condition|)
block|{
name|skipWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|skipGroupCounter
operator|.
name|increment
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|skipRecCounter
operator|.
name|increment
argument_list|(
name|skipRec
argument_list|)
expr_stmt|;
name|reportNextRecordRange
argument_list|(
name|umbilical
argument_list|,
name|grpIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|writeSkippedRec (KEY key, VALUE value)
specifier|private
name|void
name|writeSkippedRec
parameter_list|(
name|KEY
name|key
parameter_list|,
name|VALUE
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|skipWriter
operator|==
literal|null
condition|)
block|{
name|Path
name|skipDir
init|=
name|SkipBadRecords
operator|.
name|getSkipOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|skipFile
init|=
operator|new
name|Path
argument_list|(
name|skipDir
argument_list|,
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|skipWriter
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|skipFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|skipFile
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
name|skipWriter
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|run (JobConf job, final TaskUmbilicalProtocol umbilical)
specifier|public
name|void
name|run
parameter_list|(
name|JobConf
name|job
parameter_list|,
specifier|final
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|job
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SKIP_RECORDS
argument_list|,
name|isSkipping
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMapOrReduce
argument_list|()
condition|)
block|{
name|copyPhase
operator|=
name|getProgress
argument_list|()
operator|.
name|addPhase
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
name|sortPhase
operator|=
name|getProgress
argument_list|()
operator|.
name|addPhase
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
name|reducePhase
operator|=
name|getProgress
argument_list|()
operator|.
name|addPhase
argument_list|(
literal|"reduce"
argument_list|)
expr_stmt|;
block|}
comment|// start thread that will handle communication with parent
name|TaskReporter
name|reporter
init|=
name|startReporter
argument_list|(
name|umbilical
argument_list|)
decl_stmt|;
name|boolean
name|useNewApi
init|=
name|job
operator|.
name|getUseNewReducer
argument_list|()
decl_stmt|;
name|initialize
argument_list|(
name|job
argument_list|,
name|getJobID
argument_list|()
argument_list|,
name|reporter
argument_list|,
name|useNewApi
argument_list|)
expr_stmt|;
comment|// check if it is a cleanupJobTask
if|if
condition|(
name|jobCleanup
condition|)
block|{
name|runJobCleanupTask
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|jobSetup
condition|)
block|{
name|runJobSetupTask
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|taskCleanup
condition|)
block|{
name|runTaskCleanupTask
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Initialize the codec
name|codec
operator|=
name|initCodec
argument_list|()
expr_stmt|;
name|RawKeyValueIterator
name|rIter
init|=
literal|null
decl_stmt|;
name|boolean
name|isLocal
init|=
literal|false
decl_stmt|;
comment|// local if
comment|// 1) framework == local or
comment|// 2) framework == null and job tracker address == local
name|String
name|framework
init|=
name|job
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|)
decl_stmt|;
name|String
name|masterAddr
init|=
name|job
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"local"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|framework
operator|==
literal|null
operator|&&
name|masterAddr
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
operator|)
operator|||
operator|(
name|framework
operator|!=
literal|null
operator|&&
name|framework
operator|.
name|equals
argument_list|(
name|MRConfig
operator|.
name|LOCAL_FRAMEWORK_NAME
argument_list|)
operator|)
condition|)
block|{
name|isLocal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isLocal
condition|)
block|{
name|Class
name|combinerClass
init|=
name|conf
operator|.
name|getCombinerClass
argument_list|()
decl_stmt|;
name|CombineOutputCollector
name|combineCollector
init|=
operator|(
literal|null
operator|!=
name|combinerClass
operator|)
condition|?
operator|new
name|CombineOutputCollector
argument_list|(
name|reduceCombineOutputCounter
argument_list|,
name|reporter
argument_list|,
name|conf
argument_list|)
else|:
literal|null
decl_stmt|;
name|Shuffle
name|shuffle
init|=
operator|new
name|Shuffle
argument_list|(
name|getTaskID
argument_list|()
argument_list|,
name|job
argument_list|,
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
argument_list|,
name|umbilical
argument_list|,
name|super
operator|.
name|lDirAlloc
argument_list|,
name|reporter
argument_list|,
name|codec
argument_list|,
name|combinerClass
argument_list|,
name|combineCollector
argument_list|,
name|spilledRecordsCounter
argument_list|,
name|reduceCombineInputCounter
argument_list|,
name|shuffledMapsCounter
argument_list|,
name|reduceShuffleBytes
argument_list|,
name|failedShuffleCounter
argument_list|,
name|mergedMapOutputsCounter
argument_list|,
name|taskStatus
argument_list|,
name|copyPhase
argument_list|,
name|sortPhase
argument_list|,
name|this
argument_list|,
name|mapOutputFile
argument_list|)
decl_stmt|;
name|rIter
operator|=
name|shuffle
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// local job runner doesn't have a copy phase
name|copyPhase
operator|.
name|complete
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|rfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|rIter
operator|=
name|Merger
operator|.
name|merge
argument_list|(
name|job
argument_list|,
name|rfs
argument_list|,
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|codec
argument_list|,
name|getMapFiles
argument_list|(
name|rfs
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|!
name|conf
operator|.
name|getKeepFailedTaskFiles
argument_list|()
argument_list|,
name|job
operator|.
name|getInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|100
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|job
operator|.
name|getOutputKeyComparator
argument_list|()
argument_list|,
name|reporter
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// free up the data structures
name|mapOutputFilesOnDisk
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sortPhase
operator|.
name|complete
argument_list|()
expr_stmt|;
comment|// sort is complete
name|setPhase
argument_list|(
name|TaskStatus
operator|.
name|Phase
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|statusUpdate
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
name|Class
name|keyClass
init|=
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
decl_stmt|;
name|Class
name|valueClass
init|=
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
decl_stmt|;
name|RawComparator
name|comparator
init|=
name|job
operator|.
name|getOutputValueGroupingComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|useNewApi
condition|)
block|{
name|runNewReducer
argument_list|(
name|job
argument_list|,
name|umbilical
argument_list|,
name|reporter
argument_list|,
name|rIter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runOldReducer
argument_list|(
name|job
argument_list|,
name|umbilical
argument_list|,
name|reporter
argument_list|,
name|rIter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|)
expr_stmt|;
block|}
name|done
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|INKEY
parameter_list|,
name|INVALUE
parameter_list|,
name|OUTKEY
parameter_list|,
name|OUTVALUE
parameter_list|>
DECL|method|runOldReducer (JobConf job, TaskUmbilicalProtocol umbilical, final TaskReporter reporter, RawKeyValueIterator rIter, RawComparator<INKEY> comparator, Class<INKEY> keyClass, Class<INVALUE> valueClass)
name|void
name|runOldReducer
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
specifier|final
name|TaskReporter
name|reporter
parameter_list|,
name|RawKeyValueIterator
name|rIter
parameter_list|,
name|RawComparator
argument_list|<
name|INKEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|INKEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|INVALUE
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|reducer
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|job
operator|.
name|getReducerClass
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
comment|// make output collector
name|String
name|finalName
init|=
name|getOutputName
argument_list|(
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RecordWriter
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|out
init|=
operator|new
name|OldTrackingRecordWriter
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
argument_list|(
name|this
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|,
name|finalName
argument_list|)
decl_stmt|;
name|OutputCollector
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|collector
init|=
operator|new
name|OutputCollector
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|collect
parameter_list|(
name|OUTKEY
name|key
parameter_list|,
name|OUTVALUE
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// indicate that progress update needs to be sent
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// apply reduce function
try|try
block|{
comment|//increment processed counter only if skipping feature is enabled
name|boolean
name|incrProcCount
init|=
name|SkipBadRecords
operator|.
name|getReducerMaxSkipGroups
argument_list|(
name|job
argument_list|)
operator|>
literal|0
operator|&&
name|SkipBadRecords
operator|.
name|getAutoIncrReducerProcCount
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|ReduceValuesIterator
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|>
name|values
init|=
name|isSkipping
argument_list|()
condition|?
operator|new
name|SkippingReduceValuesIterator
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|>
argument_list|(
name|rIter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|,
name|umbilical
argument_list|)
else|:
operator|new
name|ReduceValuesIterator
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|>
argument_list|(
name|rIter
argument_list|,
name|job
operator|.
name|getOutputValueGroupingComparator
argument_list|()
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|values
operator|.
name|informReduceProgress
argument_list|()
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|more
argument_list|()
condition|)
block|{
name|reduceInputKeyCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reducer
operator|.
name|reduce
argument_list|(
name|values
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|collector
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrProcCount
condition|)
block|{
name|reporter
operator|.
name|incrCounter
argument_list|(
name|SkipBadRecords
operator|.
name|COUNTER_GROUP
argument_list|,
name|SkipBadRecords
operator|.
name|COUNTER_REDUCE_PROCESSED_GROUPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|nextKey
argument_list|()
expr_stmt|;
name|values
operator|.
name|informReduceProgress
argument_list|()
expr_stmt|;
block|}
comment|//Clean up: repeated in catch block below
name|reducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
comment|//End of clean up.
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
try|try
block|{
name|reducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
try|try
block|{
name|out
operator|.
name|close
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
throw|throw
name|ioe
throw|;
block|}
block|}
DECL|class|OldTrackingRecordWriter
specifier|static
class|class
name|OldTrackingRecordWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|real
specifier|private
specifier|final
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|real
decl_stmt|;
DECL|field|reduceOutputCounter
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
name|reduceOutputCounter
decl_stmt|;
DECL|field|fileOutputByteCounter
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
name|fileOutputByteCounter
decl_stmt|;
DECL|field|fsStats
specifier|private
specifier|final
name|List
argument_list|<
name|Statistics
argument_list|>
name|fsStats
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|OldTrackingRecordWriter (ReduceTask reduce, JobConf job, TaskReporter reporter, String finalName)
specifier|public
name|OldTrackingRecordWriter
parameter_list|(
name|ReduceTask
name|reduce
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|,
name|String
name|finalName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reduceOutputCounter
operator|=
name|reduce
operator|.
name|reduceOutputCounter
expr_stmt|;
name|this
operator|.
name|fileOutputByteCounter
operator|=
name|reduce
operator|.
name|fileOutputByteCounter
expr_stmt|;
name|List
argument_list|<
name|Statistics
argument_list|>
name|matchedStats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getOutputFormat
argument_list|()
operator|instanceof
name|FileOutputFormat
condition|)
block|{
name|matchedStats
operator|=
name|getFsStatistics
argument_list|(
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|job
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
name|fsStats
operator|=
name|matchedStats
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|this
operator|.
name|real
operator|=
name|job
operator|.
name|getOutputFormat
argument_list|()
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|finalName
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (K key, V value)
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|real
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
name|reduceOutputCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (Reporter reporter)
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|real
operator|.
name|close
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputBytes (List<Statistics> stats)
specifier|private
name|long
name|getOutputBytes
parameter_list|(
name|List
argument_list|<
name|Statistics
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|long
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Statistics
name|stat
range|:
name|stats
control|)
block|{
name|bytesWritten
operator|=
name|bytesWritten
operator|+
name|stat
operator|.
name|getBytesWritten
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesWritten
return|;
block|}
block|}
DECL|class|NewTrackingRecordWriter
specifier|static
class|class
name|NewTrackingRecordWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|real
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|real
decl_stmt|;
DECL|field|outputRecordCounter
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|outputRecordCounter
decl_stmt|;
DECL|field|fileOutputByteCounter
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|fileOutputByteCounter
decl_stmt|;
DECL|field|fsStats
specifier|private
specifier|final
name|List
argument_list|<
name|Statistics
argument_list|>
name|fsStats
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|NewTrackingRecordWriter (ReduceTask reduce, org.apache.hadoop.mapreduce.TaskAttemptContext taskContext)
name|NewTrackingRecordWriter
parameter_list|(
name|ReduceTask
name|reduce
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|this
operator|.
name|outputRecordCounter
operator|=
name|reduce
operator|.
name|reduceOutputCounter
expr_stmt|;
name|this
operator|.
name|fileOutputByteCounter
operator|=
name|reduce
operator|.
name|fileOutputByteCounter
expr_stmt|;
name|List
argument_list|<
name|Statistics
argument_list|>
name|matchedStats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reduce
operator|.
name|outputFormat
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
condition|)
block|{
name|matchedStats
operator|=
name|getFsStatistics
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|taskContext
argument_list|)
argument_list|,
name|taskContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fsStats
operator|=
name|matchedStats
expr_stmt|;
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|this
operator|.
name|real
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|reduce
operator|.
name|outputFormat
operator|.
name|getRecordWriter
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|real
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (K key, V value)
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|bytesOutPrev
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|real
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|long
name|bytesOutCurr
init|=
name|getOutputBytes
argument_list|(
name|fsStats
argument_list|)
decl_stmt|;
name|fileOutputByteCounter
operator|.
name|increment
argument_list|(
name|bytesOutCurr
operator|-
name|bytesOutPrev
argument_list|)
expr_stmt|;
name|outputRecordCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputBytes (List<Statistics> stats)
specifier|private
name|long
name|getOutputBytes
parameter_list|(
name|List
argument_list|<
name|Statistics
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|long
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Statistics
name|stat
range|:
name|stats
control|)
block|{
name|bytesWritten
operator|=
name|bytesWritten
operator|+
name|stat
operator|.
name|getBytesWritten
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesWritten
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|INKEY
parameter_list|,
name|INVALUE
parameter_list|,
name|OUTKEY
parameter_list|,
name|OUTVALUE
parameter_list|>
DECL|method|runNewReducer (JobConf job, final TaskUmbilicalProtocol umbilical, final TaskReporter reporter, RawKeyValueIterator rIter, RawComparator<INKEY> comparator, Class<INKEY> keyClass, Class<INVALUE> valueClass )
name|void
name|runNewReducer
parameter_list|(
name|JobConf
name|job
parameter_list|,
specifier|final
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
specifier|final
name|TaskReporter
name|reporter
parameter_list|,
name|RawKeyValueIterator
name|rIter
parameter_list|,
name|RawComparator
argument_list|<
name|INKEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|INKEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|INVALUE
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// wrap value iterator to report progress.
specifier|final
name|RawKeyValueIterator
name|rawIter
init|=
name|rIter
decl_stmt|;
name|rIter
operator|=
operator|new
name|RawKeyValueIterator
argument_list|()
block|{
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rawIter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataInputBuffer
name|getKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rawIter
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
name|rawIter
operator|.
name|getProgress
argument_list|()
return|;
block|}
specifier|public
name|DataInputBuffer
name|getValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rawIter
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|rawIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|setProgress
argument_list|(
name|rawIter
operator|.
name|getProgress
argument_list|()
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
expr_stmt|;
comment|// make a task context so we can get the classes
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
argument_list|(
name|job
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
comment|// make a reducer
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|reducer
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskContext
operator|.
name|getReducerClass
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|trackedRW
init|=
operator|new
name|NewTrackingRecordWriter
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
argument_list|(
name|this
argument_list|,
name|taskContext
argument_list|)
decl_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
literal|"mapred.skip.on"
argument_list|,
name|isSkipping
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SKIP_RECORDS
argument_list|,
name|isSkipping
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
operator|.
name|Context
name|reducerContext
init|=
name|createReduceContext
argument_list|(
name|reducer
argument_list|,
name|job
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|rIter
argument_list|,
name|reduceInputKeyCounter
argument_list|,
name|reduceInputValueCounter
argument_list|,
name|trackedRW
argument_list|,
name|committer
argument_list|,
name|reporter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|)
decl_stmt|;
name|reducer
operator|.
name|run
argument_list|(
name|reducerContext
argument_list|)
expr_stmt|;
name|trackedRW
operator|.
name|close
argument_list|(
name|reducerContext
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

