begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A class that allows a map/red job to work on a sample of sequence files.  * The sample is decided by the filter class set by the job.  * @deprecated Use   * {@link org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFilter}  * instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileInputFilter
specifier|public
class|class
name|SequenceFileInputFilter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|FILTER_CLASS
specifier|final
specifier|private
specifier|static
name|String
name|FILTER_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|FILTER_CLASS
decl_stmt|;
DECL|method|SequenceFileInputFilter ()
specifier|public
name|SequenceFileInputFilter
parameter_list|()
block|{   }
comment|/** Create a record reader for the given split    * @param split file split    * @param job job configuration    * @param reporter reporter who sends report to task tracker    * @return RecordReader    */
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|FilterRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
operator|(
name|FileSplit
operator|)
name|split
argument_list|)
return|;
block|}
comment|/** set the filter class    *     * @param conf application configuration    * @param filterClass filter class    */
DECL|method|setFilterClass (Configuration conf, Class filterClass)
specifier|public
specifier|static
name|void
name|setFilterClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
name|filterClass
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FILTER_CLASS
argument_list|,
name|filterClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * filter interface    */
DECL|interface|Filter
specifier|public
interface|interface
name|Filter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|Filter
block|{   }
comment|/**    * base class for Filters    */
DECL|class|FilterBase
specifier|public
specifier|static
specifier|abstract
class|class
name|FilterBase
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|FilterBase
implements|implements
name|Filter
block|{   }
comment|/** Records filter by matching key to regex    */
DECL|class|RegexFilter
specifier|public
specifier|static
class|class
name|RegexFilter
extends|extends
name|FilterBase
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
DECL|field|rf
name|RegexFilter
name|rf
decl_stmt|;
DECL|method|setPattern (Configuration conf, String regex)
specifier|public
specifier|static
name|void
name|setPattern
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|PatternSyntaxException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|RegexFilter
operator|.
name|setPattern
argument_list|(
name|conf
argument_list|,
name|regex
argument_list|)
expr_stmt|;
block|}
DECL|method|RegexFilter ()
specifier|public
name|RegexFilter
parameter_list|()
block|{
name|rf
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|RegexFilter
argument_list|()
expr_stmt|;
block|}
comment|/** configure the Filter by checking the configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|rf
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Filtering method      * If key matches the regex, return true; otherwise return false      * @see org.apache.hadoop.mapred.SequenceFileInputFilter.Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|rf
operator|.
name|accept
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|/** This class returns a percentage of records    * The percentage is determined by a filtering frequency<i>f</i> using    * the criteria record# % f == 0.    * For example, if the frequency is 10, one out of 10 records is returned.    */
DECL|class|PercentFilter
specifier|public
specifier|static
class|class
name|PercentFilter
extends|extends
name|FilterBase
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
DECL|field|pf
name|PercentFilter
name|pf
decl_stmt|;
comment|/** set the frequency and stores it in conf      * @param conf configuration      * @param frequency filtering frequencey      */
DECL|method|setFrequency (Configuration conf, int frequency)
specifier|public
specifier|static
name|void
name|setFrequency
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|frequency
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|PercentFilter
operator|.
name|setFrequency
argument_list|(
name|conf
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
block|}
DECL|method|PercentFilter ()
specifier|public
name|PercentFilter
parameter_list|()
block|{
name|pf
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|PercentFilter
argument_list|()
expr_stmt|;
block|}
comment|/** configure the filter by checking the configuration      *       * @param conf configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|pf
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Filtering method      * If record# % frequency==0, return true; otherwise return false      * @see org.apache.hadoop.mapred.SequenceFileInputFilter.Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|pf
operator|.
name|accept
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|/** This class returns a set of records by examing the MD5 digest of its    * key against a filtering frequency<i>f</i>. The filtering criteria is    * MD5(key) % f == 0.    */
DECL|class|MD5Filter
specifier|public
specifier|static
class|class
name|MD5Filter
extends|extends
name|FilterBase
block|{
DECL|field|MD5_LEN
specifier|public
specifier|static
specifier|final
name|int
name|MD5_LEN
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|MD5Filter
operator|.
name|MD5_LEN
decl_stmt|;
DECL|field|mf
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|MD5Filter
name|mf
decl_stmt|;
comment|/** set the filtering frequency in configuration      *       * @param conf configuration      * @param frequency filtering frequency      */
DECL|method|setFrequency (Configuration conf, int frequency)
specifier|public
specifier|static
name|void
name|setFrequency
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|frequency
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|MD5Filter
operator|.
name|setFrequency
argument_list|(
name|conf
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
block|}
DECL|method|MD5Filter ()
specifier|public
name|MD5Filter
parameter_list|()
block|{
name|mf
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFilter
operator|.
name|MD5Filter
argument_list|()
expr_stmt|;
block|}
comment|/** configure the filter according to configuration      *       * @param conf configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|mf
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Filtering method      * If MD5(key) % frequency==0, return true; otherwise return false      * @see org.apache.hadoop.mapred.SequenceFileInputFilter.Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|mf
operator|.
name|accept
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|FilterRecordReader
specifier|private
specifier|static
class|class
name|FilterRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|filter
specifier|private
name|Filter
name|filter
decl_stmt|;
DECL|method|FilterRecordReader (Configuration conf, FileSplit split)
specifier|public
name|FilterRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|split
argument_list|)
expr_stmt|;
comment|// instantiate filter
name|filter
operator|=
operator|(
name|Filter
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|FILTER_CLASS
argument_list|,
name|PercentFilter
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|next (K key, V value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|next
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|getCurrentValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

