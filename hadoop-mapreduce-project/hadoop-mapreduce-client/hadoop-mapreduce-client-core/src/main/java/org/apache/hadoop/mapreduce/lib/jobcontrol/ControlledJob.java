begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**   *  This class encapsulates a MapReduce job and its dependency. It monitors   *  the states of the depending jobs and updates the state of this job.  *  A job starts in the WAITING state. If it does not have any depending jobs,  *  or all of the depending jobs are in SUCCESS state, then the job state   *  will become READY. If any depending jobs fail, the job will fail too.   *  When in READY state, the job can be submitted to Hadoop for execution, with  *  the state changing into RUNNING state. From RUNNING state, the job   *  can get into SUCCESS or FAILED state, depending   *  the status of the job execution.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ControlledJob
specifier|public
class|class
name|ControlledJob
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ControlledJob
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A job will be in one of the following states
DECL|enum|State
DECL|enumConstant|SUCCESS
DECL|enumConstant|WAITING
DECL|enumConstant|RUNNING
DECL|enumConstant|READY
DECL|enumConstant|FAILED
specifier|public
specifier|static
enum|enum
name|State
block|{
name|SUCCESS
block|,
name|WAITING
block|,
name|RUNNING
block|,
name|READY
block|,
name|FAILED
block|,
DECL|enumConstant|DEPENDENT_FAILED
name|DEPENDENT_FAILED
block|}
empty_stmt|;
DECL|field|CREATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_DIR
init|=
literal|"mapreduce.jobcontrol.createdir.ifnotexist"
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|controlID
specifier|private
name|String
name|controlID
decl_stmt|;
comment|// assigned and used by JobControl class
DECL|field|job
specifier|private
name|Job
name|job
decl_stmt|;
comment|// mapreduce job to be executed.
comment|// some info for human consumption, e.g. the reason why the job failed
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
comment|// the jobs the current job depends on
DECL|field|dependingJobs
specifier|private
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|dependingJobs
decl_stmt|;
comment|/**     * Construct a job.    * @param job a mapreduce job to be executed.    * @param dependingJobs an array of jobs the current job depends on    */
DECL|method|ControlledJob (Job job, List<ControlledJob> dependingJobs)
specifier|public
name|ControlledJob
parameter_list|(
name|Job
name|job
parameter_list|,
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|dependingJobs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|dependingJobs
operator|=
name|dependingJobs
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|WAITING
expr_stmt|;
name|this
operator|.
name|controlID
operator|=
literal|"unassigned"
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|"just initialized"
expr_stmt|;
block|}
comment|/**    * Construct a job.    *     * @param conf mapred job configuration representing a job to be executed.    * @throws IOException    */
DECL|method|ControlledJob (Configuration conf)
specifier|public
name|ControlledJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"job name:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"job id:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|controlID
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"job state:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"job mapred id:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"job message:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|message
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dependingJobs
operator|==
literal|null
operator|||
name|this
operator|.
name|dependingJobs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"job has no depending job:\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"job has "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|dependingJobs
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" dependeng jobs:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|dependingJobs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t depending job "
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|":\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|this
operator|.
name|dependingJobs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getJobName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return the job name of this job    */
DECL|method|getJobName ()
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|job
operator|.
name|getJobName
argument_list|()
return|;
block|}
comment|/**    * Set the job name for  this job.    * @param jobName the job name    */
DECL|method|setJobName (String jobName)
specifier|public
name|void
name|setJobName
parameter_list|(
name|String
name|jobName
parameter_list|)
block|{
name|job
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the job ID of this job assigned by JobControl    */
DECL|method|getJobID ()
specifier|public
name|String
name|getJobID
parameter_list|()
block|{
return|return
name|this
operator|.
name|controlID
return|;
block|}
comment|/**    * Set the job ID for  this job.    * @param id the job ID    */
DECL|method|setJobID (String id)
specifier|public
name|void
name|setJobID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|controlID
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * @return the mapred ID of this job as assigned by the mapred framework.    */
DECL|method|getMapredJobId ()
specifier|public
specifier|synchronized
name|JobID
name|getMapredJobId
parameter_list|()
block|{
return|return
name|this
operator|.
name|job
operator|.
name|getJobID
argument_list|()
return|;
block|}
comment|/**    * @return the mapreduce job     */
DECL|method|getJob ()
specifier|public
specifier|synchronized
name|Job
name|getJob
parameter_list|()
block|{
return|return
name|this
operator|.
name|job
return|;
block|}
comment|/**    * Set the mapreduce job    * @param job the mapreduce job for this job.    */
DECL|method|setJob (Job job)
specifier|public
specifier|synchronized
name|void
name|setJob
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
comment|/**    * @return the state of this job    */
DECL|method|getJobState ()
specifier|public
specifier|synchronized
name|State
name|getJobState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**    * Set the state for this job.    * @param state the new state for this job.    */
DECL|method|setJobState (State state)
specifier|protected
specifier|synchronized
name|void
name|setJobState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * @return the message of this job    */
DECL|method|getMessage ()
specifier|public
specifier|synchronized
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|message
return|;
block|}
comment|/**    * Set the message for this job.    * @param message the message for this job.    */
DECL|method|setMessage (String message)
specifier|public
specifier|synchronized
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
comment|/**    * @return the depending jobs of this job    */
DECL|method|getDependentJobs ()
specifier|public
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|getDependentJobs
parameter_list|()
block|{
return|return
name|this
operator|.
name|dependingJobs
return|;
block|}
comment|/**    * Add a job to this jobs' dependency list.     * Dependent jobs can only be added while a Job     * is waiting to run, not during or afterwards.    *     * @param dependingJob Job that this Job depends on.    * @return<tt>true</tt> if the Job was added.    */
DECL|method|addDependingJob (ControlledJob dependingJob)
specifier|public
specifier|synchronized
name|boolean
name|addDependingJob
parameter_list|(
name|ControlledJob
name|dependingJob
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|WAITING
condition|)
block|{
comment|//only allowed to add jobs when waiting
if|if
condition|(
name|this
operator|.
name|dependingJobs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|dependingJobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ControlledJob
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|dependingJobs
operator|.
name|add
argument_list|(
name|dependingJob
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * @return true if this job is in a complete state    */
DECL|method|isCompleted ()
specifier|public
specifier|synchronized
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|FAILED
operator|||
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|DEPENDENT_FAILED
operator|||
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|SUCCESS
return|;
block|}
comment|/**    * @return true if this job is in READY state    */
DECL|method|isReady ()
specifier|public
specifier|synchronized
name|boolean
name|isReady
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|READY
return|;
block|}
DECL|method|killJob ()
specifier|public
name|void
name|killJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
DECL|method|failJob (String message)
specifier|public
specifier|synchronized
name|void
name|failJob
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
name|job
operator|!=
literal|null
operator|&&
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|RUNNING
condition|)
block|{
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|FAILED
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
block|}
comment|/**    * Check the state of this running job. The state may     * remain the same, become SUCCESS or FAILED.    */
DECL|method|checkRunningState ()
specifier|private
name|void
name|checkRunningState
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|SUCCESS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|FAILED
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|"Job failed!"
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|FAILED
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
comment|/**    * Check and update the state of this job. The state changes      * depending on its current state and the states of the depending jobs.    */
DECL|method|checkState ()
specifier|synchronized
name|State
name|checkState
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|RUNNING
condition|)
block|{
name|checkRunningState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|state
operator|!=
name|State
operator|.
name|WAITING
condition|)
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
if|if
condition|(
name|this
operator|.
name|dependingJobs
operator|==
literal|null
operator|||
name|this
operator|.
name|dependingJobs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|READY
expr_stmt|;
return|return
name|this
operator|.
name|state
return|;
block|}
name|ControlledJob
name|pred
init|=
literal|null
decl_stmt|;
name|int
name|n
init|=
name|this
operator|.
name|dependingJobs
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|pred
operator|=
name|this
operator|.
name|dependingJobs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|State
name|s
init|=
name|pred
operator|.
name|checkState
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|WAITING
operator|||
name|s
operator|==
name|State
operator|.
name|READY
operator|||
name|s
operator|==
name|State
operator|.
name|RUNNING
condition|)
block|{
break|break;
comment|// a pred is still not completed, continue in WAITING
comment|// state
block|}
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|FAILED
operator|||
name|s
operator|==
name|State
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|DEPENDENT_FAILED
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|"depending job "
operator|+
name|i
operator|+
literal|" with jobID "
operator|+
name|pred
operator|.
name|getJobID
argument_list|()
operator|+
literal|" failed. "
operator|+
name|pred
operator|.
name|getMessage
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// pred must be in success state
if|if
condition|(
name|i
operator|==
name|n
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|READY
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**    * Submit this job to mapred. The state becomes RUNNING if submission     * is successful, FAILED otherwise.      */
DECL|method|submit ()
specifier|protected
specifier|synchronized
name|void
name|submit
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CREATE_DIR
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|inputPaths
index|[]
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|inputPaths
index|[
name|i
index|]
argument_list|)
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|inputPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{              }
block|}
block|}
block|}
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|RUNNING
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getJobName
argument_list|()
operator|+
literal|" got an error while submitting "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|FAILED
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

