begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A Convenience class that creates output lazily.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|LazyOutputFormat
specifier|public
class|class
name|LazyOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FilterOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Set the underlying output format for LazyOutputFormat.    * @param job the {@link JobConf} to modify    * @param theClass the underlying class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setOutputFormatClass (JobConf job, Class<? extends OutputFormat> theClass)
specifier|public
specifier|static
name|void
name|setOutputFormatClass
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|theClass
parameter_list|)
block|{
name|job
operator|.
name|setOutputFormat
argument_list|(
name|LazyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setClass
argument_list|(
literal|"mapreduce.output.lazyoutputformat.outputformat"
argument_list|,
name|theClass
argument_list|,
name|OutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRecordWriter (FileSystem ignored, JobConf job, String name, Progressable progress)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseOut
operator|==
literal|null
condition|)
block|{
name|getBaseOutputFormat
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LazyRecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
name|baseOut
argument_list|,
name|name
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkOutputSpecs (FileSystem ignored, JobConf job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseOut
operator|==
literal|null
condition|)
block|{
name|getBaseOutputFormat
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|checkOutputSpecs
argument_list|(
name|ignored
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getBaseOutputFormat (JobConf job)
specifier|private
name|void
name|getBaseOutputFormat
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|baseOut
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|job
operator|.
name|getClass
argument_list|(
literal|"mapreduce.output.lazyoutputformat.outputformat"
argument_list|,
literal|null
argument_list|,
name|OutputFormat
operator|.
name|class
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseOut
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Ouput format not set for LazyOutputFormat"
argument_list|)
throw|;
block|}
block|}
comment|/**    *<code>LazyRecordWriter</code> is a convenience     * class that works with LazyOutputFormat.    */
DECL|class|LazyRecordWriter
specifier|private
specifier|static
class|class
name|LazyRecordWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FilterRecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|of
specifier|final
name|OutputFormat
name|of
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|progress
specifier|final
name|Progressable
name|progress
decl_stmt|;
DECL|field|job
specifier|final
name|JobConf
name|job
decl_stmt|;
DECL|method|LazyRecordWriter (JobConf job, OutputFormat of, String name, Progressable progress)
specifier|public
name|LazyRecordWriter
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|OutputFormat
name|of
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|of
operator|=
name|of
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (Reporter reporter)
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rawWriter
operator|!=
literal|null
condition|)
block|{
name|rawWriter
operator|.
name|close
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (K key, V value)
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rawWriter
operator|==
literal|null
condition|)
block|{
name|createRecordWriter
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRecordWriter ()
specifier|private
name|void
name|createRecordWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|rawWriter
operator|=
name|of
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|name
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

