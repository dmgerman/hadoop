begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Used by the {@link HistoryViewer} to print job history in a machine-readable  * JSON format.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JSONHistoryViewerPrinter
class|class
name|JSONHistoryViewerPrinter
implements|implements
name|HistoryViewerPrinter
block|{
DECL|field|job
specifier|private
name|JobHistoryParser
operator|.
name|JobInfo
name|job
decl_stmt|;
DECL|field|printAll
specifier|private
name|boolean
name|printAll
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|field|json
specifier|private
name|JSONObject
name|json
decl_stmt|;
DECL|method|JSONHistoryViewerPrinter (JobHistoryParser.JobInfo job, boolean printAll, String scheme)
name|JSONHistoryViewerPrinter
parameter_list|(
name|JobHistoryParser
operator|.
name|JobInfo
name|job
parameter_list|,
name|boolean
name|printAll
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|printAll
operator|=
name|printAll
expr_stmt|;
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
comment|/**    * Print out the Job History to the given {@link PrintStream} in a    * machine-readable JSON format.    * @param ps the {@link PrintStream} to print to    * @throws IOException when a problem occurs while printing    */
annotation|@
name|Override
DECL|method|print (PrintStream ps)
specifier|public
name|void
name|print
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
name|json
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|printJobDetails
argument_list|()
expr_stmt|;
name|printTaskSummary
argument_list|()
expr_stmt|;
name|printTasks
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|ps
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|json
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|je
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failure parsing JSON document: "
operator|+
name|je
operator|.
name|getMessage
argument_list|()
argument_list|,
name|je
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|printJobDetails ()
specifier|private
name|void
name|printJobDetails
parameter_list|()
throws|throws
name|JSONException
block|{
name|json
operator|.
name|put
argument_list|(
literal|"hadoopJob"
argument_list|,
name|job
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|job
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"jobName"
argument_list|,
name|job
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"jobConf"
argument_list|,
name|job
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"submittedAt"
argument_list|,
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"launchedAt"
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"finishedAt"
argument_list|,
name|job
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
operator|(
operator|(
name|job
operator|.
name|getJobStatus
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"Incomplete"
else|:
name|job
operator|.
name|getJobStatus
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|printJobCounters
argument_list|(
name|job
operator|.
name|getTotalCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getMapCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getReduceCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobCounters (Counters totalCounters, Counters mapCounters, Counters reduceCounters)
specifier|private
name|void
name|printJobCounters
parameter_list|(
name|Counters
name|totalCounters
parameter_list|,
name|Counters
name|mapCounters
parameter_list|,
name|Counters
name|reduceCounters
parameter_list|)
throws|throws
name|JSONException
block|{
comment|// Killed jobs might not have counters
if|if
condition|(
name|totalCounters
operator|!=
literal|null
condition|)
block|{
name|JSONObject
name|jGroups
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|totalCounters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|CounterGroup
name|totalGroup
init|=
name|totalCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|mapGroup
init|=
name|mapCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|reduceGroup
init|=
name|reduceCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|ctrItr
init|=
name|totalGroup
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|JSONArray
name|jGroup
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
while|while
condition|(
name|ctrItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JSONObject
name|jCounter
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|counter
init|=
name|ctrItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|counter
operator|.
name|getName
argument_list|()
decl_stmt|;
name|long
name|mapValue
init|=
name|mapGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reduceValue
init|=
name|reduceGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|totalValue
init|=
name|counter
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"counterName"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"mapValue"
argument_list|,
name|mapValue
argument_list|)
expr_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"reduceValue"
argument_list|,
name|reduceValue
argument_list|)
expr_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"totalValue"
argument_list|,
name|totalValue
argument_list|)
expr_stmt|;
name|jGroup
operator|.
name|put
argument_list|(
name|jCounter
argument_list|)
expr_stmt|;
block|}
name|jGroups
operator|.
name|put
argument_list|(
name|fixGroupNameForShuffleErrors
argument_list|(
name|totalGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|jGroup
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"counters"
argument_list|,
name|jGroups
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printTaskSummary ()
specifier|private
name|void
name|printTaskSummary
parameter_list|()
throws|throws
name|JSONException
block|{
name|HistoryViewer
operator|.
name|SummarizedJob
name|ts
init|=
operator|new
name|HistoryViewer
operator|.
name|SummarizedJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|JSONObject
name|jSums
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONObject
name|jSumSetup
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"total"
argument_list|,
name|ts
operator|.
name|totalSetups
argument_list|)
expr_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"successful"
argument_list|,
name|ts
operator|.
name|numFinishedSetups
argument_list|)
expr_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|ts
operator|.
name|numFailedSetups
argument_list|)
expr_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"killed"
argument_list|,
name|ts
operator|.
name|numKilledSetups
argument_list|)
expr_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|ts
operator|.
name|setupStarted
argument_list|)
expr_stmt|;
name|jSumSetup
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|ts
operator|.
name|setupFinished
argument_list|)
expr_stmt|;
name|jSums
operator|.
name|put
argument_list|(
literal|"setup"
argument_list|,
name|jSumSetup
argument_list|)
expr_stmt|;
name|JSONObject
name|jSumMap
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"total"
argument_list|,
name|ts
operator|.
name|totalMaps
argument_list|)
expr_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"successful"
argument_list|,
name|job
operator|.
name|getSucceededMaps
argument_list|()
argument_list|)
expr_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|ts
operator|.
name|numFailedMaps
argument_list|)
expr_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"killed"
argument_list|,
name|ts
operator|.
name|numKilledMaps
argument_list|)
expr_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|ts
operator|.
name|mapStarted
argument_list|)
expr_stmt|;
name|jSumMap
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|ts
operator|.
name|mapFinished
argument_list|)
expr_stmt|;
name|jSums
operator|.
name|put
argument_list|(
literal|"map"
argument_list|,
name|jSumMap
argument_list|)
expr_stmt|;
name|JSONObject
name|jSumReduce
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"total"
argument_list|,
name|ts
operator|.
name|totalReduces
argument_list|)
expr_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"successful"
argument_list|,
name|job
operator|.
name|getSucceededReduces
argument_list|()
argument_list|)
expr_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|ts
operator|.
name|numFailedReduces
argument_list|)
expr_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"killed"
argument_list|,
name|ts
operator|.
name|numKilledReduces
argument_list|)
expr_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|ts
operator|.
name|reduceStarted
argument_list|)
expr_stmt|;
name|jSumReduce
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|ts
operator|.
name|reduceFinished
argument_list|)
expr_stmt|;
name|jSums
operator|.
name|put
argument_list|(
literal|"reduce"
argument_list|,
name|jSumReduce
argument_list|)
expr_stmt|;
name|JSONObject
name|jSumCleanup
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"total"
argument_list|,
name|ts
operator|.
name|totalCleanups
argument_list|)
expr_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"successful"
argument_list|,
name|ts
operator|.
name|numFinishedCleanups
argument_list|)
expr_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|ts
operator|.
name|numFailedCleanups
argument_list|)
expr_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"killed"
argument_list|,
name|ts
operator|.
name|numKilledCleanups
argument_list|)
expr_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|ts
operator|.
name|cleanupStarted
argument_list|)
expr_stmt|;
name|jSumCleanup
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|ts
operator|.
name|cleanupFinished
argument_list|)
expr_stmt|;
name|jSums
operator|.
name|put
argument_list|(
literal|"cleanup"
argument_list|,
name|jSumCleanup
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"taskSummary"
argument_list|,
name|jSums
argument_list|)
expr_stmt|;
block|}
DECL|method|printTasks ()
specifier|private
name|void
name|printTasks
parameter_list|()
throws|throws
name|JSONException
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|JSONArray
name|jTasks
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|TASK_CLEANUP
argument_list|)
operator|&&
operator|(
operator|(
name|printAll
operator|&&
name|task
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|||
name|task
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|task
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|JSONObject
name|jTask
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jTask
operator|.
name|put
argument_list|(
literal|"taskId"
argument_list|,
name|task
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jTask
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|task
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jTask
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|task
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|jTask
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|jTask
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|task
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|task
operator|.
name|getError
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jTask
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|task
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|jTask
operator|.
name|put
argument_list|(
literal|"inputSplits"
argument_list|,
name|task
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|printAll
condition|)
block|{
name|printTaskCounters
argument_list|(
name|jTask
argument_list|,
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|jAtt
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|jAtt
operator|.
name|put
argument_list|(
literal|"attemptId"
argument_list|,
name|attempt
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|jAtt
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
name|jAtt
operator|.
name|put
argument_list|(
literal|"shuffleFinished"
argument_list|,
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|jAtt
operator|.
name|put
argument_list|(
literal|"sortFinished"
argument_list|,
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jAtt
operator|.
name|put
argument_list|(
literal|"finishTime"
argument_list|,
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|jAtt
operator|.
name|put
argument_list|(
literal|"hostName"
argument_list|,
name|attempt
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|attempt
operator|.
name|getError
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jAtt
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|task
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|taskLogsUrl
init|=
name|HistoryViewer
operator|.
name|getTaskLogsUrl
argument_list|(
name|scheme
argument_list|,
name|attempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskLogsUrl
operator|!=
literal|null
condition|)
block|{
name|jAtt
operator|.
name|put
argument_list|(
literal|"taskLogs"
argument_list|,
name|taskLogsUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|jTask
operator|.
name|put
argument_list|(
literal|"attempts"
argument_list|,
name|jAtt
argument_list|)
expr_stmt|;
block|}
name|jTasks
operator|.
name|put
argument_list|(
name|jTask
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"tasks"
argument_list|,
name|jTasks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printTaskCounters (JSONObject jTask, Counters taskCounters)
specifier|private
name|void
name|printTaskCounters
parameter_list|(
name|JSONObject
name|jTask
parameter_list|,
name|Counters
name|taskCounters
parameter_list|)
throws|throws
name|JSONException
block|{
comment|// Killed tasks might not have counters
if|if
condition|(
name|taskCounters
operator|!=
literal|null
condition|)
block|{
name|JSONObject
name|jGroups
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|taskCounters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|CounterGroup
name|group
init|=
name|taskCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|ctrItr
init|=
name|group
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|JSONArray
name|jGroup
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
while|while
condition|(
name|ctrItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JSONObject
name|jCounter
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|counter
init|=
name|ctrItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"counterName"
argument_list|,
name|counter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jCounter
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|jGroup
operator|.
name|put
argument_list|(
name|jCounter
argument_list|)
expr_stmt|;
block|}
name|jGroups
operator|.
name|put
argument_list|(
name|fixGroupNameForShuffleErrors
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|jGroup
argument_list|)
expr_stmt|;
block|}
name|jTask
operator|.
name|put
argument_list|(
literal|"counters"
argument_list|,
name|jGroups
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fixGroupNameForShuffleErrors (String name)
specifier|private
name|String
name|fixGroupNameForShuffleErrors
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|retName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"Shuffle Errors"
argument_list|)
condition|)
block|{
name|retName
operator|=
literal|"org.apache.hadoop.mapreduce.task.reduce.Fetcher.ShuffleErrors"
expr_stmt|;
block|}
return|return
name|retName
return|;
block|}
block|}
end_class

end_unit

