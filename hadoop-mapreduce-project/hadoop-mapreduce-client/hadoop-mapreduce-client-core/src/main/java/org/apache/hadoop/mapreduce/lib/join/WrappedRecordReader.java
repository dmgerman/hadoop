begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Proxy class for a RecordReader participating in the join framework.  *   * This class keeps track of the&quot;head&quot; key-value pair for the  * provided RecordReader and keeps a store of values matching a key when  * this source is participating in a join.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|WrappedRecordReader
specifier|public
class|class
name|WrappedRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|U
extends|extends
name|Writable
parameter_list|>
extends|extends
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|U
argument_list|>
block|{
DECL|field|empty
specifier|protected
name|boolean
name|empty
init|=
literal|false
decl_stmt|;
DECL|field|rr
specifier|private
name|RecordReader
argument_list|<
name|K
argument_list|,
name|U
argument_list|>
name|rr
decl_stmt|;
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
comment|// index at which values will be inserted in collector
DECL|field|cmp
specifier|protected
name|WritableComparator
name|cmp
init|=
literal|null
decl_stmt|;
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
comment|// key at the top of this RR
DECL|field|value
specifier|private
name|U
name|value
decl_stmt|;
comment|// value assoc with key
DECL|field|vjoin
specifier|private
name|ResetableIterator
argument_list|<
name|U
argument_list|>
name|vjoin
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|keyclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyclass
init|=
literal|null
decl_stmt|;
DECL|field|valueclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueclass
init|=
literal|null
decl_stmt|;
DECL|method|WrappedRecordReader (int id)
specifier|protected
name|WrappedRecordReader
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|vjoin
operator|=
operator|new
name|StreamBackedIterator
argument_list|<
name|U
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * For a given RecordReader rr, occupy position id in collector.    */
DECL|method|WrappedRecordReader (int id, RecordReader<K,U> rr, Class<? extends WritableComparator> cmpcl)
name|WrappedRecordReader
parameter_list|(
name|int
name|id
parameter_list|,
name|RecordReader
argument_list|<
name|K
argument_list|,
name|U
argument_list|>
name|rr
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|rr
operator|=
name|rr
expr_stmt|;
if|if
condition|(
name|cmpcl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cmp
operator|=
name|cmpcl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|vjoin
operator|=
operator|new
name|StreamBackedIterator
argument_list|<
name|U
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|rr
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|nextKeyValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|empty
condition|)
block|{
name|keyclass
operator|=
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
name|valueclass
operator|=
name|value
operator|.
name|getClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|null
condition|)
block|{
name|cmp
operator|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|keyclass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Request new key from proxied RR.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createKey ()
specifier|public
name|K
name|createKey
parameter_list|()
block|{
if|if
condition|(
name|keyclass
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|K
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyclass
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
operator|(
name|K
operator|)
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createValue ()
specifier|public
name|U
name|createValue
parameter_list|()
block|{
if|if
condition|(
name|valueclass
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|U
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueclass
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
operator|(
name|U
operator|)
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|id ()
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * Return the key at the head of this RR.    */
DECL|method|key ()
specifier|public
name|K
name|key
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**    * Clone the key at the head of this RR into the object supplied.    */
DECL|method|key (K qkey)
specifier|public
name|void
name|key
parameter_list|(
name|K
name|qkey
parameter_list|)
throws|throws
name|IOException
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|qkey
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return true if the RR- including the k,v pair stored in this object-    * is exhausted.    */
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|empty
return|;
block|}
comment|/**    * Skip key-value pairs with keys less than or equal to the key provided.    */
DECL|method|skip (K key)
specifier|public
name|void
name|skip
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
while|while
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|()
argument_list|,
name|key
argument_list|)
operator|<=
literal|0
operator|&&
name|next
argument_list|()
condition|)
empty_stmt|;
block|}
block|}
comment|/**    * Add an iterator to the collector at the position occupied by this    * RecordReader over the values in this stream paired with the key    * provided (ie register a stream of values from this source matching K    * with a collector).    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|accept (CompositeRecordReader.JoinCollector i, K key)
specifier|public
name|void
name|accept
parameter_list|(
name|CompositeRecordReader
operator|.
name|JoinCollector
name|i
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|vjoin
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
argument_list|()
operator|!=
literal|null
operator|&&
literal|0
operator|==
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|key
argument_list|()
argument_list|)
condition|)
block|{
do|do
block|{
name|vjoin
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
argument_list|()
operator|&&
literal|0
operator|==
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|key
argument_list|()
argument_list|)
condition|)
do|;
block|}
name|i
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|vjoin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read the next k,v pair into the head of this object; return true iff    * the RR and this are exhausted.    */
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Read the next k,v pair into the head of this object; return true iff    * the RR and this are exhausted.    */
DECL|method|next ()
specifier|private
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|empty
operator|=
operator|!
name|rr
operator|.
name|nextKeyValue
argument_list|()
expr_stmt|;
name|key
operator|=
name|rr
operator|.
name|getCurrentKey
argument_list|()
expr_stmt|;
name|value
operator|=
name|rr
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
return|return
operator|!
name|empty
return|;
block|}
comment|/**    * Get current key     */
DECL|method|getCurrentKey ()
specifier|public
name|K
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|rr
operator|.
name|getCurrentKey
argument_list|()
return|;
block|}
comment|/**    * Get current value    */
DECL|method|getCurrentValue ()
specifier|public
name|U
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|rr
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Request progress from proxied RR.    */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|rr
operator|.
name|getProgress
argument_list|()
return|;
block|}
comment|/**    * Forward close request to proxied RR.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Implement Comparable contract (compare key at head of proxied RR    * with that of another).    */
DECL|method|compareTo (ComposableRecordReader<K,?> other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|()
argument_list|,
name|other
operator|.
name|key
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return true iff compareTo(other) retn true.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Explicit type check prior to cast
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|ComposableRecordReader
operator|&&
literal|0
operator|==
name|compareTo
argument_list|(
operator|(
name|ComposableRecordReader
operator|)
name|other
argument_list|)
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
assert|assert
literal|false
operator|:
literal|"hashCode not designed"
assert|;
return|return
literal|42
return|;
block|}
block|}
end_class

end_unit

