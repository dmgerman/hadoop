begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormatCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|AbstractCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|AbstractCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|FrameworkCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|FileSystemCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|GenericCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|Limits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|CountersStrings
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A set of named counters.  *  *<p><code>Counters</code> represent global counters, defined either by the  * Map-Reduce framework or applications. Each<code>Counter</code> can be of  * any {@link Enum} type.</p>  *  *<p><code>Counters</code> are bunched into {@link Group}s, each comprising of  * counters from a particular<code>Enum</code> class.  * @deprecated Use {@link org.apache.hadoop.mapreduce.Counters} instead.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Counters
specifier|public
class|class
name|Counters
extends|extends
name|AbstractCounters
argument_list|<
name|Counters
operator|.
name|Counter
argument_list|,
name|Counters
operator|.
name|Group
argument_list|>
block|{
DECL|method|Counters ()
specifier|public
name|Counters
parameter_list|()
block|{
name|super
argument_list|(
name|groupFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|Counters (org.apache.hadoop.mapreduce.Counters newCounters)
specifier|public
name|Counters
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|newCounters
parameter_list|)
block|{
name|super
argument_list|(
name|newCounters
argument_list|,
name|groupFactory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Downgrade new {@link org.apache.hadoop.mapreduce.Counters} to old Counters    * @param newCounters new Counters    * @return old Counters instance corresponding to newCounters    */
DECL|method|downgrade (org.apache.hadoop.mapreduce.Counters newCounters)
specifier|static
name|Counters
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|newCounters
parameter_list|)
block|{
return|return
operator|new
name|Counters
argument_list|(
name|newCounters
argument_list|)
return|;
block|}
comment|/**    * A counter record, comprising its name and value.    */
DECL|interface|Counter
specifier|public
interface|interface
name|Counter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
block|{
comment|/**      * Returns the compact stringified version of the counter in the format      * [(actual-name)(display-name)(value)]      * @return the stringified result      */
DECL|method|makeEscapedCompactString ()
name|String
name|makeEscapedCompactString
parameter_list|()
function_decl|;
comment|/**      * Checks for (content) equality of two (basic) counters      * @param counter to compare      * @return true if content equals      * @deprecated      */
annotation|@
name|Deprecated
DECL|method|contentEquals (Counter counter)
name|boolean
name|contentEquals
parameter_list|(
name|Counter
name|counter
parameter_list|)
function_decl|;
comment|/**      * @return the value of the counter      */
DECL|method|getCounter ()
name|long
name|getCounter
parameter_list|()
function_decl|;
block|}
DECL|class|OldCounterImpl
specifier|static
class|class
name|OldCounterImpl
extends|extends
name|GenericCounter
implements|implements
name|Counter
block|{
DECL|method|OldCounterImpl ()
name|OldCounterImpl
parameter_list|()
block|{     }
DECL|method|OldCounterImpl (String name, String displayName, long value)
name|OldCounterImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
specifier|synchronized
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|contentEquals (Counter counter)
specifier|public
name|boolean
name|contentEquals
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
return|return
name|equals
argument_list|(
name|counter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter ()
specifier|public
name|long
name|getCounter
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
comment|/**    *<code>Group</code> of counters, comprising of counters from a particular    *  counter {@link Enum} class.    *    *<p><code>Group</code>handles localization of the class name and the    *  counter names.</p>    */
DECL|interface|Group
specifier|public
specifier|static
interface|interface
name|Group
extends|extends
name|CounterGroupBase
argument_list|<
name|Counter
argument_list|>
block|{
comment|/**      * @param counterName the name of the counter      * @return the value of the specified counter, or 0 if the counter does      * not exist.      */
DECL|method|getCounter (String counterName)
name|long
name|getCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
function_decl|;
comment|/**      * @return the compact stringified version of the group in the format      * {(actual-name)(display-name)(value)[][][]} where [] are compact strings      * for the counters within.      */
DECL|method|makeEscapedCompactString ()
name|String
name|makeEscapedCompactString
parameter_list|()
function_decl|;
comment|/**      * Get the counter for the given id and create it if it doesn't exist.      * @param id the numeric id of the counter within the group      * @param name the internal counter name      * @return the counter      * @deprecated use {@link #findCounter(String)} instead      */
annotation|@
name|Deprecated
DECL|method|getCounter (int id, String name)
name|Counter
name|getCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**      * Get the counter for the given name and create it if it doesn't exist.      * @param name the internal counter name      * @return the counter      */
DECL|method|getCounterForName (String name)
name|Counter
name|getCounterForName
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
comment|// All the group impls need this for legacy group interface
DECL|method|getCounterValue (Group group, String counterName)
specifier|static
name|long
name|getCounterValue
parameter_list|(
name|Group
name|group
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|Counter
name|counter
init|=
name|group
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
return|return
name|counter
operator|.
name|getValue
argument_list|()
return|;
return|return
literal|0L
return|;
block|}
comment|// Mix the generic group implementation into the Group interface
DECL|class|GenericGroup
specifier|private
specifier|static
class|class
name|GenericGroup
extends|extends
name|AbstractCounterGroup
argument_list|<
name|Counter
argument_list|>
implements|implements
name|Group
block|{
DECL|method|GenericGroup (String name, String displayName, Limits limits)
name|GenericGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|limits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String counterName)
specifier|public
name|long
name|getCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getCounterValue
argument_list|(
name|this
argument_list|,
name|counterName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (int id, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounterForName (String name)
specifier|public
name|Counter
name|getCounterForName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter (String counterName, String displayName, long value)
specifier|protected
name|Counter
name|newCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|OldCounterImpl
argument_list|(
name|counterName
argument_list|,
name|displayName
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter ()
specifier|protected
name|Counter
name|newCounter
parameter_list|()
block|{
return|return
operator|new
name|OldCounterImpl
argument_list|()
return|;
block|}
block|}
comment|// Mix the framework group implementation into the Group interface
DECL|class|FrameworkGroupImpl
specifier|private
specifier|static
class|class
name|FrameworkGroupImpl
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
extends|extends
name|FrameworkCounterGroup
argument_list|<
name|T
argument_list|,
name|Counter
argument_list|>
implements|implements
name|Group
block|{
comment|// Mix the framework counter implmementation into the Counter interface
DECL|class|FrameworkCounterImpl
class|class
name|FrameworkCounterImpl
extends|extends
name|FrameworkCounter
implements|implements
name|Counter
block|{
DECL|method|FrameworkCounterImpl (T key)
name|FrameworkCounterImpl
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contentEquals (Counter counter)
specifier|public
name|boolean
name|contentEquals
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
return|return
name|equals
argument_list|(
name|counter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter ()
specifier|public
name|long
name|getCounter
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
DECL|method|FrameworkGroupImpl (Class<T> cls)
name|FrameworkGroupImpl
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|super
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String counterName)
specifier|public
name|long
name|getCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getCounterValue
argument_list|(
name|this
argument_list|,
name|counterName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getCounter (int id, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounterForName (String name)
specifier|public
name|Counter
name|getCounterForName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter (T key)
specifier|protected
name|Counter
name|newCounter
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
operator|new
name|FrameworkCounterImpl
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|// Mix the file system counter group implementation into the Group interface
DECL|class|FSGroupImpl
specifier|private
specifier|static
class|class
name|FSGroupImpl
extends|extends
name|FileSystemCounterGroup
argument_list|<
name|Counter
argument_list|>
implements|implements
name|Group
block|{
DECL|class|FSCounterImpl
specifier|private
class|class
name|FSCounterImpl
extends|extends
name|FSCounter
implements|implements
name|Counter
block|{
DECL|method|FSCounterImpl (String scheme, FileSystemCounter key)
name|FSCounterImpl
parameter_list|(
name|String
name|scheme
parameter_list|,
name|FileSystemCounter
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|scheme
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|contentEquals (Counter counter)
specifier|public
name|boolean
name|contentEquals
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCounter ()
specifier|public
name|long
name|getCounter
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newCounter (String scheme, FileSystemCounter key)
specifier|protected
name|Counter
name|newCounter
parameter_list|(
name|String
name|scheme
parameter_list|,
name|FileSystemCounter
name|key
parameter_list|)
block|{
return|return
operator|new
name|FSCounterImpl
argument_list|(
name|scheme
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String counterName)
specifier|public
name|long
name|getCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getCounterValue
argument_list|(
name|this
argument_list|,
name|counterName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getCounter (int id, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounterForName (String name)
specifier|public
name|Counter
name|getCounterForName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|findCounter (String group, String name)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"MAP_INPUT_BYTES"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Counter name MAP_INPUT_BYTES is deprecated. "
operator|+
literal|"Use FileInputFormatCounters as group name and "
operator|+
literal|" BYTES_READ as counter name instead"
argument_list|)
expr_stmt|;
return|return
name|findCounter
argument_list|(
name|FileInputFormatCounter
operator|.
name|BYTES_READ
argument_list|)
return|;
block|}
return|return
name|getGroup
argument_list|(
name|group
argument_list|)
operator|.
name|getCounterForName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Provide factory methods for counter group factory implementation.    * See also the GroupFactory in    *  {@link org.apache.hadoop.mapreduce.Counters mapreduce.Counters}    */
DECL|class|GroupFactory
specifier|static
class|class
name|GroupFactory
extends|extends
name|CounterGroupFactory
argument_list|<
name|Counter
argument_list|,
name|Group
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|newFrameworkGroupFactory (final Class<T> cls)
name|FrameworkGroupFactory
argument_list|<
name|Group
argument_list|>
name|newFrameworkGroupFactory
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
operator|new
name|FrameworkGroupFactory
argument_list|<
name|Group
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Group
name|newGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FrameworkGroupImpl
argument_list|<
name|T
argument_list|>
argument_list|(
name|cls
argument_list|)
return|;
comment|// impl in this package
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newGenericGroup (String name, String displayName, Limits limits)
specifier|protected
name|Group
name|newGenericGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
return|return
operator|new
name|GenericGroup
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|limits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newFileSystemGroup ()
specifier|protected
name|Group
name|newFileSystemGroup
parameter_list|()
block|{
return|return
operator|new
name|FSGroupImpl
argument_list|()
return|;
block|}
block|}
DECL|field|groupFactory
specifier|private
specifier|static
specifier|final
name|GroupFactory
name|groupFactory
init|=
operator|new
name|GroupFactory
argument_list|()
decl_stmt|;
comment|/**    * Find a counter by using strings    * @param group the name of the group    * @param id the id of the counter within the group (0 to N-1)    * @param name the internal name of the counter    * @return the counter for that name    * @deprecated use {@link findCounter(String, String)} instead    */
annotation|@
name|Deprecated
DECL|method|findCounter (String group, int id, String name)
specifier|public
name|Counter
name|findCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Increments the specified counter by the specified amount, creating it if    * it didn't already exist.    * @param key identifies a counter    * @param amount amount by which counter is to be incremented    */
DECL|method|incrCounter (Enum<?> key, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|findCounter
argument_list|(
name|key
argument_list|)
operator|.
name|increment
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the specified counter by the specified amount, creating it if    * it didn't already exist.    * @param group the name of the group    * @param counter the internal name of the counter    * @param amount amount by which counter is to be incremented    */
DECL|method|incrCounter (String group, String counter, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|counter
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|findCounter
argument_list|(
name|group
argument_list|,
name|counter
argument_list|)
operator|.
name|increment
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns current value of the specified counter, or 0 if the counter    * does not exist.    * @param key the counter enum to lookup    * @return the counter value or 0 if counter not found    */
DECL|method|getCounter (Enum<?> key)
specifier|public
specifier|synchronized
name|long
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Increments multiple counters by their amounts in another Counters    * instance.    * @param other the other Counters instance    */
DECL|method|incrAllCounters (Counters other)
specifier|public
specifier|synchronized
name|void
name|incrAllCounters
parameter_list|(
name|Counters
name|other
parameter_list|)
block|{
for|for
control|(
name|Group
name|otherGroup
range|:
name|other
control|)
block|{
name|Group
name|group
init|=
name|getGroup
argument_list|(
name|otherGroup
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|group
operator|.
name|setDisplayName
argument_list|(
name|otherGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|otherCounter
range|:
name|otherGroup
control|)
block|{
name|Counter
name|counter
init|=
name|group
operator|.
name|getCounterForName
argument_list|(
name|otherCounter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setDisplayName
argument_list|(
name|otherCounter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|otherCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return the total number of counters    * @deprecated use {@link #countCounters()} instead    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|countCounters
argument_list|()
return|;
block|}
comment|/**    * Convenience method for computing the sum of two sets of counters.    * @param a the first counters    * @param b the second counters    * @return a new summed counters object    */
DECL|method|sum (Counters a, Counters b)
specifier|public
specifier|static
name|Counters
name|sum
parameter_list|(
name|Counters
name|a
parameter_list|,
name|Counters
name|b
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|counters
return|;
block|}
comment|/**    * Logs the current counter values.    * @param log The log to use.    */
DECL|method|log (Log log)
specifier|public
name|void
name|log
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Counters: "
operator|+
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    "
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"="
operator|+
name|counter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Represent the counter in a textual format that can be converted back to    * its object form    * @return the string in the following format    * {(groupName)(group-displayName)[(counterName)(displayName)(value)][]*}*    */
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
return|return
name|toEscapedCompactString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Convert a stringified (by {@link #makeEscapedCompactString()} counter    * representation into a counter object.    * @param compactString to parse    * @return a new counters object    * @throws ParseException    */
DECL|method|fromEscapedCompactString (String compactString)
specifier|public
specifier|static
name|Counters
name|fromEscapedCompactString
parameter_list|(
name|String
name|compactString
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|parseEscapedCompactString
argument_list|(
name|compactString
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

