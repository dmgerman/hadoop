begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * A wrapper class for a record reader that handles a single file split. It  * delegates most of the methods to the wrapped instance. A concrete subclass  * needs to provide a constructor that calls this parent constructor with the  * appropriate input format. The subclass constructor must satisfy the specific  * constructor signature that is required by  *<code>CombineFileRecordReader</code>.  *  * Subclassing is needed to get a concrete record reader wrapper because of the  * constructor requirement.  *  * @see CombineFileRecordReader  * @see CombineFileInputFormat  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CombineFileRecordReaderWrapper
specifier|public
specifier|abstract
class|class
name|CombineFileRecordReaderWrapper
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
DECL|method|CombineFileRecordReaderWrapper (FileInputFormat<K,V> inputFormat, CombineFileSplit split, Configuration conf, Reporter reporter, Integer idx)
specifier|protected
name|CombineFileRecordReaderWrapper
parameter_list|(
name|FileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|inputFormat
parameter_list|,
name|CombineFileSplit
name|split
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|Integer
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSplit
name|fileSplit
init|=
operator|new
name|FileSplit
argument_list|(
name|split
operator|.
name|getPath
argument_list|(
name|idx
argument_list|)
argument_list|,
name|split
operator|.
name|getOffset
argument_list|(
name|idx
argument_list|)
argument_list|,
name|split
operator|.
name|getLength
argument_list|(
name|idx
argument_list|)
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
argument_list|)
decl_stmt|;
name|delegate
operator|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|fileSplit
argument_list|,
operator|(
name|JobConf
operator|)
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
DECL|method|next (K key, V value)
specifier|public
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|createKey ()
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|createKey
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|createValue
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getProgress
argument_list|()
return|;
block|}
block|}
end_class

end_unit

