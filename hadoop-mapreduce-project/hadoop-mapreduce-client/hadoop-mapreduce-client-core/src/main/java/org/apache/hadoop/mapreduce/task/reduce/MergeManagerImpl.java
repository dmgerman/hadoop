begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapOutputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Merger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RawKeyValueIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Merger
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|CombineOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|CombineValuesIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|MapOutput
operator|.
name|MapOutputComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MergeManagerImpl
specifier|public
class|class
name|MergeManagerImpl
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|MergeManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MergeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* Maximum percentage of the in-memory limit that a single shuffle can     * consume*/
DECL|field|DEFAULT_SHUFFLE_MEMORY_LIMIT_PERCENT
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_SHUFFLE_MEMORY_LIMIT_PERCENT
init|=
literal|0.25f
decl_stmt|;
DECL|field|reduceId
specifier|private
specifier|final
name|TaskAttemptID
name|reduceId
decl_stmt|;
DECL|field|jobConf
specifier|private
specifier|final
name|JobConf
name|jobConf
decl_stmt|;
DECL|field|localFS
specifier|private
specifier|final
name|FileSystem
name|localFS
decl_stmt|;
DECL|field|rfs
specifier|private
specifier|final
name|FileSystem
name|rfs
decl_stmt|;
DECL|field|localDirAllocator
specifier|private
specifier|final
name|LocalDirAllocator
name|localDirAllocator
decl_stmt|;
DECL|field|mapOutputFile
specifier|protected
name|MapOutputFile
name|mapOutputFile
decl_stmt|;
DECL|field|inMemoryMergedMapOutputs
name|Set
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemoryMergedMapOutputs
init|=
operator|new
name|TreeSet
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
operator|new
name|MapOutputComparator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|memToMemMerger
specifier|private
name|IntermediateMemoryToMemoryMerger
name|memToMemMerger
decl_stmt|;
DECL|field|inMemoryMapOutputs
name|Set
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemoryMapOutputs
init|=
operator|new
name|TreeSet
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
operator|new
name|MapOutputComparator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|inMemoryMerger
specifier|private
specifier|final
name|MergeThread
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
name|inMemoryMerger
decl_stmt|;
DECL|field|onDiskMapOutputs
name|Set
argument_list|<
name|CompressAwarePath
argument_list|>
name|onDiskMapOutputs
init|=
operator|new
name|TreeSet
argument_list|<
name|CompressAwarePath
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|onDiskMerger
specifier|private
specifier|final
name|OnDiskMerger
name|onDiskMerger
decl_stmt|;
DECL|field|memoryLimit
specifier|private
specifier|final
name|long
name|memoryLimit
decl_stmt|;
DECL|field|usedMemory
specifier|private
name|long
name|usedMemory
decl_stmt|;
DECL|field|commitMemory
specifier|private
name|long
name|commitMemory
decl_stmt|;
DECL|field|maxSingleShuffleLimit
specifier|private
specifier|final
name|long
name|maxSingleShuffleLimit
decl_stmt|;
DECL|field|memToMemMergeOutputsThreshold
specifier|private
specifier|final
name|int
name|memToMemMergeOutputsThreshold
decl_stmt|;
DECL|field|mergeThreshold
specifier|private
specifier|final
name|long
name|mergeThreshold
decl_stmt|;
DECL|field|ioSortFactor
specifier|private
specifier|final
name|int
name|ioSortFactor
decl_stmt|;
DECL|field|reporter
specifier|private
specifier|final
name|Reporter
name|reporter
decl_stmt|;
DECL|field|exceptionReporter
specifier|private
specifier|final
name|ExceptionReporter
name|exceptionReporter
decl_stmt|;
comment|/**    * Combiner class to run during in-memory merge, if defined.    */
DECL|field|combinerClass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|>
name|combinerClass
decl_stmt|;
comment|/**    * Resettable collector used for combine.    */
DECL|field|combineCollector
specifier|private
specifier|final
name|CombineOutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|combineCollector
decl_stmt|;
DECL|field|spilledRecordsCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|spilledRecordsCounter
decl_stmt|;
DECL|field|reduceCombineInputCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|reduceCombineInputCounter
decl_stmt|;
DECL|field|mergedMapOutputsCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
decl_stmt|;
DECL|field|codec
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
DECL|field|mergePhase
specifier|private
specifier|final
name|Progress
name|mergePhase
decl_stmt|;
DECL|method|MergeManagerImpl (TaskAttemptID reduceId, JobConf jobConf, FileSystem localFS, LocalDirAllocator localDirAllocator, Reporter reporter, CompressionCodec codec, Class<? extends Reducer> combinerClass, CombineOutputCollector<K,V> combineCollector, Counters.Counter spilledRecordsCounter, Counters.Counter reduceCombineInputCounter, Counters.Counter mergedMapOutputsCounter, ExceptionReporter exceptionReporter, Progress mergePhase, MapOutputFile mapOutputFile)
specifier|public
name|MergeManagerImpl
parameter_list|(
name|TaskAttemptID
name|reduceId
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|FileSystem
name|localFS
parameter_list|,
name|LocalDirAllocator
name|localDirAllocator
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|>
name|combinerClass
parameter_list|,
name|CombineOutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|combineCollector
parameter_list|,
name|Counters
operator|.
name|Counter
name|spilledRecordsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|reduceCombineInputCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|,
name|ExceptionReporter
name|exceptionReporter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|,
name|MapOutputFile
name|mapOutputFile
parameter_list|)
block|{
name|this
operator|.
name|reduceId
operator|=
name|reduceId
expr_stmt|;
name|this
operator|.
name|jobConf
operator|=
name|jobConf
expr_stmt|;
name|this
operator|.
name|localDirAllocator
operator|=
name|localDirAllocator
expr_stmt|;
name|this
operator|.
name|exceptionReporter
operator|=
name|exceptionReporter
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|combinerClass
operator|=
name|combinerClass
expr_stmt|;
name|this
operator|.
name|combineCollector
operator|=
name|combineCollector
expr_stmt|;
name|this
operator|.
name|reduceCombineInputCounter
operator|=
name|reduceCombineInputCounter
expr_stmt|;
name|this
operator|.
name|spilledRecordsCounter
operator|=
name|spilledRecordsCounter
expr_stmt|;
name|this
operator|.
name|mergedMapOutputsCounter
operator|=
name|mergedMapOutputsCounter
expr_stmt|;
name|this
operator|.
name|mapOutputFile
operator|=
name|mapOutputFile
expr_stmt|;
name|this
operator|.
name|mapOutputFile
operator|.
name|setConf
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|localFS
operator|=
name|localFS
expr_stmt|;
name|this
operator|.
name|rfs
operator|=
operator|(
operator|(
name|LocalFileSystem
operator|)
name|localFS
operator|)
operator|.
name|getRaw
argument_list|()
expr_stmt|;
specifier|final
name|float
name|maxInMemCopyUse
init|=
name|jobConf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_INPUT_BUFFER_PERCENT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHUFFLE_INPUT_BUFFER_PERCENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxInMemCopyUse
operator|>
literal|1.0
operator|||
name|maxInMemCopyUse
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value for "
operator|+
name|MRJobConfig
operator|.
name|SHUFFLE_INPUT_BUFFER_PERCENT
operator|+
literal|": "
operator|+
name|maxInMemCopyUse
argument_list|)
throw|;
block|}
comment|// Allow unit tests to fix Runtime memory
name|this
operator|.
name|memoryLimit
operator|=
call|(
name|long
call|)
argument_list|(
name|jobConf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_TOTAL_BYTES
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|*
name|maxInMemCopyUse
argument_list|)
expr_stmt|;
name|this
operator|.
name|ioSortFactor
operator|=
name|jobConf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|float
name|singleShuffleMemoryLimitPercent
init|=
name|jobConf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_MEMORY_LIMIT_PERCENT
argument_list|,
name|DEFAULT_SHUFFLE_MEMORY_LIMIT_PERCENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleShuffleMemoryLimitPercent
operator|<=
literal|0.0f
operator|||
name|singleShuffleMemoryLimitPercent
operator|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value for "
operator|+
name|MRJobConfig
operator|.
name|SHUFFLE_MEMORY_LIMIT_PERCENT
operator|+
literal|": "
operator|+
name|singleShuffleMemoryLimitPercent
argument_list|)
throw|;
block|}
name|usedMemory
operator|=
literal|0L
expr_stmt|;
name|commitMemory
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|maxSingleShuffleLimit
operator|=
call|(
name|long
call|)
argument_list|(
name|memoryLimit
operator|*
name|singleShuffleMemoryLimitPercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|memToMemMergeOutputsThreshold
operator|=
name|jobConf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMTOMEM_THRESHOLD
argument_list|,
name|ioSortFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeThreshold
operator|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|memoryLimit
operator|*
name|jobConf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_MERGE_PERCENT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHUFFLE_MERGE_PERCENT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MergerManager: memoryLimit="
operator|+
name|memoryLimit
operator|+
literal|", "
operator|+
literal|"maxSingleShuffleLimit="
operator|+
name|maxSingleShuffleLimit
operator|+
literal|", "
operator|+
literal|"mergeThreshold="
operator|+
name|mergeThreshold
operator|+
literal|", "
operator|+
literal|"ioSortFactor="
operator|+
name|ioSortFactor
operator|+
literal|", "
operator|+
literal|"memToMemMergeOutputsThreshold="
operator|+
name|memToMemMergeOutputsThreshold
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxSingleShuffleLimit
operator|>=
name|this
operator|.
name|mergeThreshold
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid configuration: "
operator|+
literal|"maxSingleShuffleLimit should be less than mergeThreshold"
operator|+
literal|"maxSingleShuffleLimit: "
operator|+
name|this
operator|.
name|maxSingleShuffleLimit
operator|+
literal|"mergeThreshold: "
operator|+
name|this
operator|.
name|mergeThreshold
argument_list|)
throw|;
block|}
name|boolean
name|allowMemToMemMerge
init|=
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMTOMEM_ENABLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowMemToMemMerge
condition|)
block|{
name|this
operator|.
name|memToMemMerger
operator|=
operator|new
name|IntermediateMemoryToMemoryMerger
argument_list|(
name|this
argument_list|,
name|memToMemMergeOutputsThreshold
argument_list|)
expr_stmt|;
name|this
operator|.
name|memToMemMerger
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|memToMemMerger
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|inMemoryMerger
operator|=
name|createInMemoryMerger
argument_list|()
expr_stmt|;
name|this
operator|.
name|inMemoryMerger
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|onDiskMerger
operator|=
operator|new
name|OnDiskMerger
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|onDiskMerger
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergePhase
operator|=
name|mergePhase
expr_stmt|;
block|}
DECL|method|createInMemoryMerger ()
specifier|protected
name|MergeThread
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
name|createInMemoryMerger
parameter_list|()
block|{
return|return
operator|new
name|InMemoryMerger
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createOnDiskMerger ()
specifier|protected
name|MergeThread
argument_list|<
name|CompressAwarePath
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
name|createOnDiskMerger
parameter_list|()
block|{
return|return
operator|new
name|OnDiskMerger
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getReduceId ()
name|TaskAttemptID
name|getReduceId
parameter_list|()
block|{
return|return
name|reduceId
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getExceptionReporter ()
name|ExceptionReporter
name|getExceptionReporter
parameter_list|()
block|{
return|return
name|exceptionReporter
return|;
block|}
annotation|@
name|Override
DECL|method|waitForResource ()
specifier|public
name|void
name|waitForResource
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|inMemoryMerger
operator|.
name|waitForMerge
argument_list|()
expr_stmt|;
block|}
DECL|method|canShuffleToMemory (long requestedSize)
specifier|private
name|boolean
name|canShuffleToMemory
parameter_list|(
name|long
name|requestedSize
parameter_list|)
block|{
return|return
operator|(
name|requestedSize
operator|<
name|maxSingleShuffleLimit
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|reserve (TaskAttemptID mapId, long requestedSize, int fetcher )
specifier|public
specifier|synchronized
name|MapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reserve
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|long
name|requestedSize
parameter_list|,
name|int
name|fetcher
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canShuffleToMemory
argument_list|(
name|requestedSize
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|mapId
operator|+
literal|": Shuffling to disk since "
operator|+
name|requestedSize
operator|+
literal|" is greater than maxSingleShuffleLimit ("
operator|+
name|maxSingleShuffleLimit
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
operator|new
name|OnDiskMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|mapId
argument_list|,
name|reduceId
argument_list|,
name|this
argument_list|,
name|requestedSize
argument_list|,
name|jobConf
argument_list|,
name|mapOutputFile
argument_list|,
name|fetcher
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Stall shuffle if we are above the memory limit
comment|// It is possible that all threads could just be stalling and not make
comment|// progress at all. This could happen when:
comment|//
comment|// requested size is causing the used memory to go above limit&&
comment|// requested size< singleShuffleLimit&&
comment|// current used size< mergeThreshold (merge will not get triggered)
comment|//
comment|// To avoid this from happening, we allow exactly one thread to go past
comment|// the memory limit. We check (usedMemory> memoryLimit) and not
comment|// (usedMemory + requestedSize> memoryLimit). When this thread is done
comment|// fetching, this will automatically trigger a merge thereby unlocking
comment|// all the stalled threads
if|if
condition|(
name|usedMemory
operator|>
name|memoryLimit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|mapId
operator|+
literal|": Stalling shuffle since usedMemory ("
operator|+
name|usedMemory
operator|+
literal|") is greater than memoryLimit ("
operator|+
name|memoryLimit
operator|+
literal|")."
operator|+
literal|" CommitMemory is ("
operator|+
name|commitMemory
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Allow the in-memory shuffle to progress
name|LOG
operator|.
name|debug
argument_list|(
name|mapId
operator|+
literal|": Proceeding with shuffle since usedMemory ("
operator|+
name|usedMemory
operator|+
literal|") is lesser than memoryLimit ("
operator|+
name|memoryLimit
operator|+
literal|")."
operator|+
literal|"CommitMemory is ("
operator|+
name|commitMemory
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|unconditionalReserve
argument_list|(
name|mapId
argument_list|,
name|requestedSize
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Unconditional Reserve is used by the Memory-to-Memory thread    * @return    */
DECL|method|unconditionalReserve ( TaskAttemptID mapId, long requestedSize, boolean primaryMapOutput)
specifier|private
specifier|synchronized
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|unconditionalReserve
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|long
name|requestedSize
parameter_list|,
name|boolean
name|primaryMapOutput
parameter_list|)
block|{
name|usedMemory
operator|+=
name|requestedSize
expr_stmt|;
return|return
operator|new
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|jobConf
argument_list|,
name|mapId
argument_list|,
name|this
argument_list|,
operator|(
name|int
operator|)
name|requestedSize
argument_list|,
name|codec
argument_list|,
name|primaryMapOutput
argument_list|)
return|;
block|}
DECL|method|unreserve (long size)
specifier|synchronized
name|void
name|unreserve
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|usedMemory
operator|-=
name|size
expr_stmt|;
block|}
DECL|method|closeInMemoryFile (InMemoryMapOutput<K,V> mapOutput)
specifier|public
specifier|synchronized
name|void
name|closeInMemoryFile
parameter_list|(
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapOutput
parameter_list|)
block|{
name|inMemoryMapOutputs
operator|.
name|add
argument_list|(
name|mapOutput
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"closeInMemoryFile -> map-output of size: "
operator|+
name|mapOutput
operator|.
name|getSize
argument_list|()
operator|+
literal|", inMemoryMapOutputs.size() -> "
operator|+
name|inMemoryMapOutputs
operator|.
name|size
argument_list|()
operator|+
literal|", commitMemory -> "
operator|+
name|commitMemory
operator|+
literal|", usedMemory ->"
operator|+
name|usedMemory
argument_list|)
expr_stmt|;
name|commitMemory
operator|+=
name|mapOutput
operator|.
name|getSize
argument_list|()
expr_stmt|;
comment|// Can hang if mergeThreshold is really low.
if|if
condition|(
name|commitMemory
operator|>=
name|mergeThreshold
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting inMemoryMerger's merge since commitMemory="
operator|+
name|commitMemory
operator|+
literal|"> mergeThreshold="
operator|+
name|mergeThreshold
operator|+
literal|". Current usedMemory="
operator|+
name|usedMemory
argument_list|)
expr_stmt|;
name|inMemoryMapOutputs
operator|.
name|addAll
argument_list|(
name|inMemoryMergedMapOutputs
argument_list|)
expr_stmt|;
name|inMemoryMergedMapOutputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inMemoryMerger
operator|.
name|startMerge
argument_list|(
name|inMemoryMapOutputs
argument_list|)
expr_stmt|;
name|commitMemory
operator|=
literal|0L
expr_stmt|;
comment|// Reset commitMemory.
block|}
if|if
condition|(
name|memToMemMerger
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inMemoryMapOutputs
operator|.
name|size
argument_list|()
operator|>=
name|memToMemMergeOutputsThreshold
condition|)
block|{
name|memToMemMerger
operator|.
name|startMerge
argument_list|(
name|inMemoryMapOutputs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|closeInMemoryMergedFile (InMemoryMapOutput<K,V> mapOutput)
specifier|public
specifier|synchronized
name|void
name|closeInMemoryMergedFile
parameter_list|(
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapOutput
parameter_list|)
block|{
name|inMemoryMergedMapOutputs
operator|.
name|add
argument_list|(
name|mapOutput
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"closeInMemoryMergedFile -> size: "
operator|+
name|mapOutput
operator|.
name|getSize
argument_list|()
operator|+
literal|", inMemoryMergedMapOutputs.size() -> "
operator|+
name|inMemoryMergedMapOutputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|closeOnDiskFile (CompressAwarePath file)
specifier|public
specifier|synchronized
name|void
name|closeOnDiskFile
parameter_list|(
name|CompressAwarePath
name|file
parameter_list|)
block|{
name|onDiskMapOutputs
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|onDiskMapOutputs
operator|.
name|size
argument_list|()
operator|>=
operator|(
literal|2
operator|*
name|ioSortFactor
operator|-
literal|1
operator|)
condition|)
block|{
name|onDiskMerger
operator|.
name|startMerge
argument_list|(
name|onDiskMapOutputs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|RawKeyValueIterator
name|close
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Wait for on-going merges to complete
if|if
condition|(
name|memToMemMerger
operator|!=
literal|null
condition|)
block|{
name|memToMemMerger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|inMemoryMerger
operator|.
name|close
argument_list|()
expr_stmt|;
name|onDiskMerger
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|memory
init|=
operator|new
name|ArrayList
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|inMemoryMergedMapOutputs
argument_list|)
decl_stmt|;
name|inMemoryMergedMapOutputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|memory
operator|.
name|addAll
argument_list|(
name|inMemoryMapOutputs
argument_list|)
expr_stmt|;
name|inMemoryMapOutputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CompressAwarePath
argument_list|>
name|disk
init|=
operator|new
name|ArrayList
argument_list|<
name|CompressAwarePath
argument_list|>
argument_list|(
name|onDiskMapOutputs
argument_list|)
decl_stmt|;
name|onDiskMapOutputs
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|finalMerge
argument_list|(
name|jobConf
argument_list|,
name|rfs
argument_list|,
name|memory
argument_list|,
name|disk
argument_list|)
return|;
block|}
DECL|class|IntermediateMemoryToMemoryMerger
specifier|private
class|class
name|IntermediateMemoryToMemoryMerger
extends|extends
name|MergeThread
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|IntermediateMemoryToMemoryMerger (MergeManagerImpl<K, V> manager, int mergeFactor)
specifier|public
name|IntermediateMemoryToMemoryMerger
parameter_list|(
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|manager
parameter_list|,
name|int
name|mergeFactor
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|mergeFactor
argument_list|,
name|exceptionReporter
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"InMemoryMerger - Thread to do in-memory merge of in-memory "
operator|+
literal|"shuffled map-outputs"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge (List<InMemoryMapOutput<K, V>> inputs)
specifier|public
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputs
operator|==
literal|null
operator|||
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|TaskAttemptID
name|dummyMapId
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMapId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemorySegments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|mergeOutputSize
init|=
name|createInMemorySegments
argument_list|(
name|inputs
argument_list|,
name|inMemorySegments
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|noInMemorySegments
init|=
name|inMemorySegments
operator|.
name|size
argument_list|()
decl_stmt|;
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mergedMapOutputs
init|=
name|unconditionalReserve
argument_list|(
name|dummyMapId
argument_list|,
name|mergeOutputSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
init|=
operator|new
name|InMemoryWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|mergedMapOutputs
operator|.
name|getArrayStream
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating Memory-to-Memory merge with "
operator|+
name|noInMemorySegments
operator|+
literal|" segments of total-size: "
operator|+
name|mergeOutputSize
argument_list|)
expr_stmt|;
name|RawKeyValueIterator
name|rIter
init|=
name|Merger
operator|.
name|merge
argument_list|(
name|jobConf
argument_list|,
name|rfs
argument_list|,
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|inMemorySegments
argument_list|,
name|inMemorySegments
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|reduceId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getOutputKeyComparator
argument_list|()
argument_list|,
name|reporter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Merger
operator|.
name|writeFile
argument_list|(
name|rIter
argument_list|,
name|writer
argument_list|,
name|reporter
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reduceId
operator|+
literal|" Memory-to-Memory merge of the "
operator|+
name|noInMemorySegments
operator|+
literal|" files in-memory complete."
argument_list|)
expr_stmt|;
comment|// Note the output of the merge
name|closeInMemoryMergedFile
argument_list|(
name|mergedMapOutputs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InMemoryMerger
specifier|private
class|class
name|InMemoryMerger
extends|extends
name|MergeThread
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|InMemoryMerger (MergeManagerImpl<K, V> manager)
specifier|public
name|InMemoryMerger
parameter_list|(
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|exceptionReporter
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"InMemoryMerger - Thread to merge in-memory shuffled map-outputs"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge (List<InMemoryMapOutput<K,V>> inputs)
specifier|public
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputs
operator|==
literal|null
operator|||
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|//name this output file same as the name of the first file that is
comment|//there in the current list of inmem files (this is guaranteed to
comment|//be absent on the disk currently. So we don't overwrite a prev.
comment|//created spill). Also we need to create the output file now since
comment|//it is not guaranteed that this file will be present after merge
comment|//is called (we delete empty files as soon as we see them
comment|//in the merge method)
comment|//figure out the mapId
name|TaskAttemptID
name|mapId
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMapId
argument_list|()
decl_stmt|;
name|TaskID
name|mapTaskId
init|=
name|mapId
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemorySegments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|mergeOutputSize
init|=
name|createInMemorySegments
argument_list|(
name|inputs
argument_list|,
name|inMemorySegments
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|noInMemorySegments
init|=
name|inMemorySegments
operator|.
name|size
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|mapOutputFile
operator|.
name|getInputFileForWrite
argument_list|(
name|mapTaskId
argument_list|,
name|mergeOutputSize
argument_list|)
operator|.
name|suffix
argument_list|(
name|Task
operator|.
name|MERGED_OUTPUT_PREFIX
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|CryptoUtils
operator|.
name|wrapIfNecessary
argument_list|(
name|jobConf
argument_list|,
name|rfs
operator|.
name|create
argument_list|(
name|outputPath
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
init|=
operator|new
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|jobConf
argument_list|,
name|out
argument_list|,
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RawKeyValueIterator
name|rIter
init|=
literal|null
decl_stmt|;
name|CompressAwarePath
name|compressAwarePath
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating in-memory merge with "
operator|+
name|noInMemorySegments
operator|+
literal|" segments..."
argument_list|)
expr_stmt|;
name|rIter
operator|=
name|Merger
operator|.
name|merge
argument_list|(
name|jobConf
argument_list|,
name|rfs
argument_list|,
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|inMemorySegments
argument_list|,
name|inMemorySegments
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|reduceId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getOutputKeyComparator
argument_list|()
argument_list|,
name|reporter
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|combinerClass
condition|)
block|{
name|Merger
operator|.
name|writeFile
argument_list|(
name|rIter
argument_list|,
name|writer
argument_list|,
name|reporter
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|combineCollector
operator|.
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|combineAndSpill
argument_list|(
name|rIter
argument_list|,
name|reduceCombineInputCounter
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressAwarePath
operator|=
operator|new
name|CompressAwarePath
argument_list|(
name|outputPath
argument_list|,
name|writer
operator|.
name|getRawLength
argument_list|()
argument_list|,
name|writer
operator|.
name|getCompressedLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reduceId
operator|+
literal|" Merge of the "
operator|+
name|noInMemorySegments
operator|+
literal|" files in-memory complete."
operator|+
literal|" Local file is "
operator|+
name|outputPath
operator|+
literal|" of size "
operator|+
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|outputPath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//make sure that we delete the ondisk file that we created
comment|//earlier when we invoked cloneFileAttributes
name|localFS
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Note the output of the merge
name|closeOnDiskFile
argument_list|(
name|compressAwarePath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OnDiskMerger
specifier|private
class|class
name|OnDiskMerger
extends|extends
name|MergeThread
argument_list|<
name|CompressAwarePath
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|OnDiskMerger (MergeManagerImpl<K, V> manager)
specifier|public
name|OnDiskMerger
parameter_list|(
name|MergeManagerImpl
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|ioSortFactor
argument_list|,
name|exceptionReporter
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"OnDiskMerger - Thread to merge on-disk map-outputs"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge (List<CompressAwarePath> inputs)
specifier|public
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|CompressAwarePath
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sanity check
if|if
condition|(
name|inputs
operator|==
literal|null
operator|||
name|inputs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No ondisk files to merge..."
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|approxOutputSize
init|=
literal|0
decl_stmt|;
name|int
name|bytesPerSum
init|=
name|jobConf
operator|.
name|getInt
argument_list|(
literal|"io.bytes.per.checksum"
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OnDiskMerger: We have  "
operator|+
name|inputs
operator|.
name|size
argument_list|()
operator|+
literal|" map outputs on disk. Triggering merge..."
argument_list|)
expr_stmt|;
comment|// 1. Prepare the list of files to be merged.
for|for
control|(
name|CompressAwarePath
name|file
range|:
name|inputs
control|)
block|{
name|approxOutputSize
operator|+=
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
comment|// add the checksum length
name|approxOutputSize
operator|+=
name|ChecksumFileSystem
operator|.
name|getChecksumLength
argument_list|(
name|approxOutputSize
argument_list|,
name|bytesPerSum
argument_list|)
expr_stmt|;
comment|// 2. Start the on-disk merge process
name|Path
name|outputPath
init|=
name|localDirAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|approxOutputSize
argument_list|,
name|jobConf
argument_list|)
operator|.
name|suffix
argument_list|(
name|Task
operator|.
name|MERGED_OUTPUT_PREFIX
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|CryptoUtils
operator|.
name|wrapIfNecessary
argument_list|(
name|jobConf
argument_list|,
name|rfs
operator|.
name|create
argument_list|(
name|outputPath
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
init|=
operator|new
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|jobConf
argument_list|,
name|out
argument_list|,
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RawKeyValueIterator
name|iter
init|=
literal|null
decl_stmt|;
name|CompressAwarePath
name|compressAwarePath
decl_stmt|;
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|reduceId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|iter
operator|=
name|Merger
operator|.
name|merge
argument_list|(
name|jobConf
argument_list|,
name|rfs
argument_list|,
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|jobConf
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|codec
argument_list|,
name|inputs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|inputs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ioSortFactor
argument_list|,
name|tmpDir
argument_list|,
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|jobConf
operator|.
name|getOutputKeyComparator
argument_list|()
argument_list|,
name|reporter
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
name|mergedMapOutputsCounter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Merger
operator|.
name|writeFile
argument_list|(
name|iter
argument_list|,
name|writer
argument_list|,
name|reporter
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressAwarePath
operator|=
operator|new
name|CompressAwarePath
argument_list|(
name|outputPath
argument_list|,
name|writer
operator|.
name|getRawLength
argument_list|()
argument_list|,
name|writer
operator|.
name|getCompressedLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|localFS
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|closeOnDiskFile
argument_list|(
name|compressAwarePath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reduceId
operator|+
literal|" Finished merging "
operator|+
name|inputs
operator|.
name|size
argument_list|()
operator|+
literal|" map output files on disk of total-size "
operator|+
name|approxOutputSize
operator|+
literal|"."
operator|+
literal|" Local output file is "
operator|+
name|outputPath
operator|+
literal|" of size "
operator|+
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|outputPath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|combineAndSpill ( RawKeyValueIterator kvIter, Counters.Counter inCounter)
specifier|private
name|void
name|combineAndSpill
parameter_list|(
name|RawKeyValueIterator
name|kvIter
parameter_list|,
name|Counters
operator|.
name|Counter
name|inCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
name|jobConf
decl_stmt|;
name|Reducer
name|combiner
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|combinerClass
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
init|=
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|V
argument_list|>
name|valClass
init|=
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
decl_stmt|;
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
init|=
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getCombinerKeyGroupingComparator
argument_list|()
decl_stmt|;
try|try
block|{
name|CombineValuesIterator
name|values
init|=
operator|new
name|CombineValuesIterator
argument_list|(
name|kvIter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|,
name|inCounter
argument_list|)
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|more
argument_list|()
condition|)
block|{
name|combiner
operator|.
name|reduce
argument_list|(
name|values
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|combineCollector
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|values
operator|.
name|nextKey
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|combiner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createInMemorySegments (List<InMemoryMapOutput<K,V>> inMemoryMapOutputs, List<Segment<K, V>> inMemorySegments, long leaveBytes )
specifier|private
name|long
name|createInMemorySegments
parameter_list|(
name|List
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemoryMapOutputs
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemorySegments
parameter_list|,
name|long
name|leaveBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalSize
init|=
literal|0L
decl_stmt|;
comment|// We could use fullSize could come from the RamManager, but files can be
comment|// closed but not yet present in inMemoryMapOutputs
name|long
name|fullSize
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mo
range|:
name|inMemoryMapOutputs
control|)
block|{
name|fullSize
operator|+=
name|mo
operator|.
name|getMemory
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
while|while
condition|(
name|fullSize
operator|>
name|leaveBytes
condition|)
block|{
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mo
init|=
name|inMemoryMapOutputs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|mo
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|data
operator|.
name|length
decl_stmt|;
name|totalSize
operator|+=
name|size
expr_stmt|;
name|fullSize
operator|-=
name|size
expr_stmt|;
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
init|=
operator|new
name|InMemoryReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|MergeManagerImpl
operator|.
name|this
argument_list|,
name|mo
operator|.
name|getMapId
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|inMemorySegments
operator|.
name|add
argument_list|(
operator|new
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|,
operator|(
name|mo
operator|.
name|isPrimaryMapOutput
argument_list|()
condition|?
name|mergedMapOutputsCounter
else|:
literal|null
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|totalSize
return|;
block|}
DECL|class|RawKVIteratorReader
class|class
name|RawKVIteratorReader
extends|extends
name|IFile
operator|.
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|kvIter
specifier|private
specifier|final
name|RawKeyValueIterator
name|kvIter
decl_stmt|;
DECL|method|RawKVIteratorReader (RawKeyValueIterator kvIter, long size)
specifier|public
name|RawKVIteratorReader
parameter_list|(
name|RawKeyValueIterator
name|kvIter
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|spilledRecordsCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|kvIter
operator|=
name|kvIter
expr_stmt|;
block|}
DECL|method|nextRawKey (DataInputBuffer key)
specifier|public
name|boolean
name|nextRawKey
parameter_list|(
name|DataInputBuffer
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kvIter
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|DataInputBuffer
name|kb
init|=
name|kvIter
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|int
name|kp
init|=
name|kb
operator|.
name|getPosition
argument_list|()
decl_stmt|;
specifier|final
name|int
name|klen
init|=
name|kb
operator|.
name|getLength
argument_list|()
operator|-
name|kp
decl_stmt|;
name|key
operator|.
name|reset
argument_list|(
name|kb
operator|.
name|getData
argument_list|()
argument_list|,
name|kp
argument_list|,
name|klen
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|klen
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|nextRawValue (DataInputBuffer value)
specifier|public
name|void
name|nextRawValue
parameter_list|(
name|DataInputBuffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataInputBuffer
name|vb
init|=
name|kvIter
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|vp
init|=
name|vb
operator|.
name|getPosition
argument_list|()
decl_stmt|;
specifier|final
name|int
name|vlen
init|=
name|vb
operator|.
name|getLength
argument_list|()
operator|-
name|vp
decl_stmt|;
name|value
operator|.
name|reset
argument_list|(
name|vb
operator|.
name|getData
argument_list|()
argument_list|,
name|vp
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|vlen
expr_stmt|;
block|}
DECL|method|getPosition ()
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|bytesRead
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|kvIter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finalMerge (JobConf job, FileSystem fs, List<InMemoryMapOutput<K,V>> inMemoryMapOutputs, List<CompressAwarePath> onDiskMapOutputs )
specifier|private
name|RawKeyValueIterator
name|finalMerge
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|InMemoryMapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|inMemoryMapOutputs
parameter_list|,
name|List
argument_list|<
name|CompressAwarePath
argument_list|>
name|onDiskMapOutputs
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"finalMerge called with "
operator|+
name|inMemoryMapOutputs
operator|.
name|size
argument_list|()
operator|+
literal|" in-memory map-outputs and "
operator|+
name|onDiskMapOutputs
operator|.
name|size
argument_list|()
operator|+
literal|" on-disk map-outputs"
argument_list|)
expr_stmt|;
specifier|final
name|float
name|maxRedPer
init|=
name|job
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_INPUT_BUFFER_PERCENT
argument_list|,
literal|0f
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRedPer
operator|>
literal|1.0
operator|||
name|maxRedPer
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_INPUT_BUFFER_PERCENT
operator|+
name|maxRedPer
argument_list|)
throw|;
block|}
name|int
name|maxInMemReduce
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|*
name|maxRedPer
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// merge config params
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
init|=
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
init|=
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
decl_stmt|;
name|boolean
name|keepInputs
init|=
name|job
operator|.
name|getKeepFailedTaskFiles
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|reduceId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
init|=
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getOutputKeyComparator
argument_list|()
decl_stmt|;
comment|// segments required to vacate memory
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|memDiskSegments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|inMemToDiskBytes
init|=
literal|0
decl_stmt|;
name|boolean
name|mergePhaseFinished
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inMemoryMapOutputs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TaskID
name|mapId
init|=
name|inMemoryMapOutputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMapId
argument_list|()
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|inMemToDiskBytes
operator|=
name|createInMemorySegments
argument_list|(
name|inMemoryMapOutputs
argument_list|,
name|memDiskSegments
argument_list|,
name|maxInMemReduce
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numMemDiskSegments
init|=
name|memDiskSegments
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMemDiskSegments
operator|>
literal|0
operator|&&
name|ioSortFactor
operator|>
name|onDiskMapOutputs
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// If we reach here, it implies that we have less than io.sort.factor
comment|// disk segments and this will be incremented by 1 (result of the
comment|// memory segments merge). Since this total would still be
comment|//<= io.sort.factor, we will not do any more intermediate merges,
comment|// the merge of all these disk segments would be directly fed to the
comment|// reduce method
name|mergePhaseFinished
operator|=
literal|true
expr_stmt|;
comment|// must spill to disk, but can't retain in-mem for intermediate merge
specifier|final
name|Path
name|outputPath
init|=
name|mapOutputFile
operator|.
name|getInputFileForWrite
argument_list|(
name|mapId
argument_list|,
name|inMemToDiskBytes
argument_list|)
operator|.
name|suffix
argument_list|(
name|Task
operator|.
name|MERGED_OUTPUT_PREFIX
argument_list|)
decl_stmt|;
specifier|final
name|RawKeyValueIterator
name|rIter
init|=
name|Merger
operator|.
name|merge
argument_list|(
name|job
argument_list|,
name|fs
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|memDiskSegments
argument_list|,
name|numMemDiskSegments
argument_list|,
name|tmpDir
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
name|mergePhase
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|CryptoUtils
operator|.
name|wrapIfNecessary
argument_list|(
name|job
argument_list|,
name|fs
operator|.
name|create
argument_list|(
name|outputPath
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
init|=
operator|new
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
name|out
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|Merger
operator|.
name|writeFile
argument_list|(
name|rIter
argument_list|,
name|writer
argument_list|,
name|reporter
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|onDiskMapOutputs
operator|.
name|add
argument_list|(
operator|new
name|CompressAwarePath
argument_list|(
name|outputPath
argument_list|,
name|writer
operator|.
name|getRawLength
argument_list|()
argument_list|,
name|writer
operator|.
name|getCompressedLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
comment|// add to list of final disk outputs.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|outputPath
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// NOTHING
block|}
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|writer
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Merged "
operator|+
name|numMemDiskSegments
operator|+
literal|" segments, "
operator|+
name|inMemToDiskBytes
operator|+
literal|" bytes to disk to satisfy "
operator|+
literal|"reduce memory limit"
argument_list|)
expr_stmt|;
name|inMemToDiskBytes
operator|=
literal|0
expr_stmt|;
name|memDiskSegments
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMemToDiskBytes
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keeping "
operator|+
name|numMemDiskSegments
operator|+
literal|" segments, "
operator|+
name|inMemToDiskBytes
operator|+
literal|" bytes in memory for "
operator|+
literal|"intermediate, on-disk merge"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// segments on disk
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|diskSegments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|onDiskBytes
init|=
name|inMemToDiskBytes
decl_stmt|;
name|long
name|rawBytes
init|=
name|inMemToDiskBytes
decl_stmt|;
name|CompressAwarePath
index|[]
name|onDisk
init|=
name|onDiskMapOutputs
operator|.
name|toArray
argument_list|(
operator|new
name|CompressAwarePath
index|[
name|onDiskMapOutputs
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|CompressAwarePath
name|file
range|:
name|onDisk
control|)
block|{
name|long
name|fileLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|onDiskBytes
operator|+=
name|fileLength
expr_stmt|;
name|rawBytes
operator|+=
operator|(
name|file
operator|.
name|getRawDataLength
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|file
operator|.
name|getRawDataLength
argument_list|()
else|:
name|fileLength
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disk file: "
operator|+
name|file
operator|+
literal|" Length is "
operator|+
name|fileLength
argument_list|)
expr_stmt|;
name|diskSegments
operator|.
name|add
argument_list|(
operator|new
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|keepInputs
argument_list|,
operator|(
name|file
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Task
operator|.
name|MERGED_OUTPUT_PREFIX
argument_list|)
condition|?
literal|null
else|:
name|mergedMapOutputsCounter
operator|)
argument_list|,
name|file
operator|.
name|getRawDataLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|onDisk
operator|.
name|length
operator|+
literal|" files, "
operator|+
name|onDiskBytes
operator|+
literal|" bytes from disk"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|diskSegments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o1
parameter_list|,
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getLength
argument_list|()
operator|==
name|o2
operator|.
name|getLength
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|o1
operator|.
name|getLength
argument_list|()
operator|<
name|o2
operator|.
name|getLength
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// build final list of segments from merged backed by disk + in-mem
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|finalSegments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|inMemBytes
init|=
name|createInMemorySegments
argument_list|(
name|inMemoryMapOutputs
argument_list|,
name|finalSegments
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|finalSegments
operator|.
name|size
argument_list|()
operator|+
literal|" segments, "
operator|+
name|inMemBytes
operator|+
literal|" bytes from memory into reduce"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|onDiskBytes
condition|)
block|{
specifier|final
name|int
name|numInMemSegments
init|=
name|memDiskSegments
operator|.
name|size
argument_list|()
decl_stmt|;
name|diskSegments
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|memDiskSegments
argument_list|)
expr_stmt|;
name|memDiskSegments
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Pass mergePhase only if there is a going to be intermediate
comment|// merges. See comment where mergePhaseFinished is being set
name|Progress
name|thisPhase
init|=
operator|(
name|mergePhaseFinished
operator|)
condition|?
literal|null
else|:
name|mergePhase
decl_stmt|;
name|RawKeyValueIterator
name|diskMerge
init|=
name|Merger
operator|.
name|merge
argument_list|(
name|job
argument_list|,
name|fs
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|codec
argument_list|,
name|diskSegments
argument_list|,
name|ioSortFactor
argument_list|,
name|numInMemSegments
argument_list|,
name|tmpDir
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
literal|false
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
name|thisPhase
argument_list|)
decl_stmt|;
name|diskSegments
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|finalSegments
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|diskMerge
return|;
block|}
name|finalSegments
operator|.
name|add
argument_list|(
operator|new
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
operator|new
name|RawKVIteratorReader
argument_list|(
name|diskMerge
argument_list|,
name|onDiskBytes
argument_list|)
argument_list|,
literal|true
argument_list|,
name|rawBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Merger
operator|.
name|merge
argument_list|(
name|job
argument_list|,
name|fs
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|finalSegments
argument_list|,
name|finalSegments
operator|.
name|size
argument_list|()
argument_list|,
name|tmpDir
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|spilledRecordsCounter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|CompressAwarePath
specifier|static
class|class
name|CompressAwarePath
extends|extends
name|Path
block|{
DECL|field|rawDataLength
specifier|private
name|long
name|rawDataLength
decl_stmt|;
DECL|field|compressedSize
specifier|private
name|long
name|compressedSize
decl_stmt|;
DECL|method|CompressAwarePath (Path path, long rawDataLength, long compressSize)
specifier|public
name|CompressAwarePath
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|rawDataLength
parameter_list|,
name|long
name|compressSize
parameter_list|)
block|{
name|super
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawDataLength
operator|=
name|rawDataLength
expr_stmt|;
name|this
operator|.
name|compressedSize
operator|=
name|compressSize
expr_stmt|;
block|}
DECL|method|getRawDataLength ()
specifier|public
name|long
name|getRawDataLength
parameter_list|()
block|{
return|return
name|rawDataLength
return|;
block|}
DECL|method|getCompressedSize ()
specifier|public
name|long
name|getCompressedSize
parameter_list|()
block|{
return|return
name|compressedSize
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Object obj)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|CompressAwarePath
condition|)
block|{
name|CompressAwarePath
name|compPath
init|=
operator|(
name|CompressAwarePath
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|compressedSize
operator|<
name|compPath
operator|.
name|getCompressedSize
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getCompressedSize
argument_list|()
operator|>
name|compPath
operator|.
name|getCompressedSize
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Not returning 0 here so that objects with the same size (but
comment|// different paths) are still added to the TreeSet.
block|}
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

