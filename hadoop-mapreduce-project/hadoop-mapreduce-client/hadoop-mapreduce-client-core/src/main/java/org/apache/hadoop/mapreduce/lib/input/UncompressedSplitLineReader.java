begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * SplitLineReader for uncompressed files.  * This class can split the file correctly even if the delimiter is multi-bytes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|UncompressedSplitLineReader
specifier|public
class|class
name|UncompressedSplitLineReader
extends|extends
name|SplitLineReader
block|{
DECL|field|needAdditionalRecord
specifier|private
name|boolean
name|needAdditionalRecord
init|=
literal|false
decl_stmt|;
DECL|field|splitLength
specifier|private
name|long
name|splitLength
decl_stmt|;
comment|/** Total bytes read from the input stream. */
DECL|field|totalBytesRead
specifier|private
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
DECL|field|finished
specifier|private
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
DECL|field|usingCRLF
specifier|private
name|boolean
name|usingCRLF
decl_stmt|;
DECL|field|unusedBytes
specifier|private
name|int
name|unusedBytes
init|=
literal|0
decl_stmt|;
DECL|field|lastBytesRead
specifier|private
name|int
name|lastBytesRead
init|=
literal|0
decl_stmt|;
DECL|method|UncompressedSplitLineReader (FSDataInputStream in, Configuration conf, byte[] recordDelimiterBytes, long splitLength)
specifier|public
name|UncompressedSplitLineReader
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|recordDelimiterBytes
parameter_list|,
name|long
name|splitLength
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|conf
argument_list|,
name|recordDelimiterBytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|splitLength
operator|=
name|splitLength
expr_stmt|;
name|usingCRLF
operator|=
operator|(
name|recordDelimiterBytes
operator|==
literal|null
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillBuffer (InputStream in, byte[] buffer, boolean inDelimiter)
specifier|protected
name|int
name|fillBuffer
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|boolean
name|inDelimiter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxBytesToRead
init|=
name|buffer
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|totalBytesRead
operator|<
name|splitLength
condition|)
block|{
name|maxBytesToRead
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxBytesToRead
argument_list|,
call|(
name|int
call|)
argument_list|(
name|splitLength
operator|-
name|totalBytesRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|maxBytesToRead
argument_list|)
decl_stmt|;
name|lastBytesRead
operator|=
name|bytesRead
expr_stmt|;
comment|// If the split ended in the middle of a record delimiter then we need
comment|// to read one additional record, as the consumer of the next split will
comment|// not recognize the partial delimiter as a record.
comment|// However if using the default delimiter and the next character is a
comment|// linefeed then next split will treat it as a delimiter all by itself
comment|// and the additional record read should not be performed.
if|if
condition|(
name|totalBytesRead
operator|==
name|splitLength
operator|&&
name|inDelimiter
operator|&&
name|bytesRead
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|usingCRLF
condition|)
block|{
name|needAdditionalRecord
operator|=
operator|(
name|buffer
index|[
literal|0
index|]
operator|!=
literal|'\n'
operator|)
expr_stmt|;
block|}
else|else
block|{
name|needAdditionalRecord
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
block|}
return|return
name|bytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|readLine (Text str, int maxLineLength, int maxBytesToConsume)
specifier|public
name|int
name|readLine
parameter_list|(
name|Text
name|str
parameter_list|,
name|int
name|maxLineLength
parameter_list|,
name|int
name|maxBytesToConsume
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|finished
condition|)
block|{
comment|// only allow at most one more record to be read after the stream
comment|// reports the split ended
if|if
condition|(
name|totalBytesRead
operator|>
name|splitLength
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
block|}
name|bytesRead
operator|=
name|totalBytesRead
expr_stmt|;
name|int
name|bytesConsumed
init|=
name|super
operator|.
name|readLine
argument_list|(
name|str
argument_list|,
name|maxLineLength
argument_list|,
name|maxBytesToConsume
argument_list|)
decl_stmt|;
name|bytesRead
operator|=
name|totalBytesRead
operator|-
name|bytesRead
expr_stmt|;
comment|// No records left.
if|if
condition|(
name|bytesConsumed
operator|==
literal|0
operator|&&
name|bytesRead
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|bufferSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
comment|// Add the remaining buffer size not used for the last call
comment|// of fillBuffer method.
if|if
condition|(
name|lastBytesRead
operator|<=
literal|0
condition|)
block|{
name|bytesRead
operator|+=
name|bufferSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|bytesRead
operator|+=
name|bufferSize
operator|-
name|lastBytesRead
expr_stmt|;
block|}
comment|// Adjust the size of the buffer not used for this record.
comment|// The size is carried over for the next calculation.
name|bytesRead
operator|+=
name|unusedBytes
expr_stmt|;
name|unusedBytes
operator|=
name|bufferSize
operator|-
name|getBufferPosn
argument_list|()
expr_stmt|;
name|bytesRead
operator|-=
name|unusedBytes
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|bytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|needAdditionalRecordAfterSplit ()
specifier|public
name|boolean
name|needAdditionalRecordAfterSplit
parameter_list|()
block|{
return|return
operator|!
name|finished
operator|&&
name|needAdditionalRecord
return|;
block|}
block|}
end_class

end_unit

