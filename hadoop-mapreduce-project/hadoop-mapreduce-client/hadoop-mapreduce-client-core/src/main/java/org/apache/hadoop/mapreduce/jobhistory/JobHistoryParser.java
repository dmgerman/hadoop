begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_comment
comment|/**  * Default Parser for the JobHistory files. Typical usage is  * JobHistoryParser parser = new JobHistoryParser(fs, historyFile);  * job = parser.parse();  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobHistoryParser
specifier|public
class|class
name|JobHistoryParser
implements|implements
name|HistoryEventHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobHistoryParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|info
specifier|private
name|JobInfo
name|info
init|=
literal|null
decl_stmt|;
DECL|field|parseException
specifier|private
name|IOException
name|parseException
init|=
literal|null
decl_stmt|;
comment|/**    * Create a job history parser for the given history file using the     * given file system    * @param fs    * @param file    * @throws IOException    */
DECL|method|JobHistoryParser (FileSystem fs, String file)
specifier|public
name|JobHistoryParser
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the job history parser for the given history file using the     * given file system    * @param fs    * @param historyFile    * @throws IOException    */
DECL|method|JobHistoryParser (FileSystem fs, Path historyFile)
specifier|public
name|JobHistoryParser
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|historyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|historyFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the history parser based on the input stream    * @param in    */
DECL|method|JobHistoryParser (FSDataInputStream in)
specifier|public
name|JobHistoryParser
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
DECL|method|parse (HistoryEventHandler handler)
specifier|public
specifier|synchronized
name|void
name|parse
parameter_list|(
name|HistoryEventHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
name|parse
argument_list|(
operator|new
name|EventReader
argument_list|(
name|in
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Only used for unit tests.    */
annotation|@
name|Private
DECL|method|parse (EventReader reader, HistoryEventHandler handler)
specifier|public
specifier|synchronized
name|void
name|parse
parameter_list|(
name|EventReader
name|reader
parameter_list|,
name|HistoryEventHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|eventCtr
init|=
literal|0
decl_stmt|;
name|HistoryEvent
name|event
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|event
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|++
name|eventCtr
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception parsing history file after "
operator|+
name|eventCtr
operator|+
literal|" events"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|parseException
operator|=
name|ioe
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Parse the entire history file and populate the JobInfo object    * The first invocation will populate the object, subsequent calls    * will return the already parsed object.     * The input stream is closed on return     *     * This api ignores partial records and stops parsing on encountering one.    * {@link #getParseException()} can be used to fetch the exception, if any.    *     * @return The populated jobInfo object    * @throws IOException    * @see #getParseException()    */
DECL|method|parse ()
specifier|public
specifier|synchronized
name|JobInfo
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|parse
argument_list|(
operator|new
name|EventReader
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Only used for unit tests.    */
annotation|@
name|Private
DECL|method|parse (EventReader reader)
specifier|public
specifier|synchronized
name|JobInfo
name|parse
parameter_list|(
name|EventReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
return|;
block|}
name|info
operator|=
operator|new
name|JobInfo
argument_list|()
expr_stmt|;
name|parse
argument_list|(
name|reader
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Get the parse exception, if any.    *     * @return the parse exception, if any    * @see #parse()    */
DECL|method|getParseException ()
specifier|public
specifier|synchronized
name|IOException
name|getParseException
parameter_list|()
block|{
return|return
name|parseException
return|;
block|}
annotation|@
name|Override
DECL|method|handleEvent (HistoryEvent event)
specifier|public
name|void
name|handleEvent
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
block|{
name|EventType
name|type
init|=
name|event
operator|.
name|getEventType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JOB_SUBMITTED
case|:
name|handleJobSubmittedEvent
argument_list|(
operator|(
name|JobSubmittedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_STATUS_CHANGED
case|:
break|break;
case|case
name|JOB_INFO_CHANGED
case|:
name|handleJobInfoChangeEvent
argument_list|(
operator|(
name|JobInfoChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_INITED
case|:
name|handleJobInitedEvent
argument_list|(
operator|(
name|JobInitedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_PRIORITY_CHANGED
case|:
name|handleJobPriorityChangeEvent
argument_list|(
operator|(
name|JobPriorityChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FAILED
case|:
case|case
name|JOB_KILLED
case|:
name|handleJobFailedEvent
argument_list|(
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FINISHED
case|:
name|handleJobFinishedEvent
argument_list|(
operator|(
name|JobFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_STARTED
case|:
name|handleTaskStartedEvent
argument_list|(
operator|(
name|TaskStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_FAILED
case|:
name|handleTaskFailedEvent
argument_list|(
operator|(
name|TaskFailedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_UPDATED
case|:
name|handleTaskUpdatedEvent
argument_list|(
operator|(
name|TaskUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_FINISHED
case|:
name|handleTaskFinishedEvent
argument_list|(
operator|(
name|TaskFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_STARTED
case|:
case|case
name|CLEANUP_ATTEMPT_STARTED
case|:
case|case
name|REDUCE_ATTEMPT_STARTED
case|:
case|case
name|SETUP_ATTEMPT_STARTED
case|:
name|handleTaskAttemptStartedEvent
argument_list|(
operator|(
name|TaskAttemptStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_FAILED
case|:
case|case
name|CLEANUP_ATTEMPT_FAILED
case|:
case|case
name|REDUCE_ATTEMPT_FAILED
case|:
case|case
name|SETUP_ATTEMPT_FAILED
case|:
case|case
name|MAP_ATTEMPT_KILLED
case|:
case|case
name|CLEANUP_ATTEMPT_KILLED
case|:
case|case
name|REDUCE_ATTEMPT_KILLED
case|:
case|case
name|SETUP_ATTEMPT_KILLED
case|:
name|handleTaskAttemptFailedEvent
argument_list|(
operator|(
name|TaskAttemptUnsuccessfulCompletionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_FINISHED
case|:
name|handleMapAttemptFinishedEvent
argument_list|(
operator|(
name|MapAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCE_ATTEMPT_FINISHED
case|:
name|handleReduceAttemptFinishedEvent
argument_list|(
operator|(
name|ReduceAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETUP_ATTEMPT_FINISHED
case|:
case|case
name|CLEANUP_ATTEMPT_FINISHED
case|:
name|handleTaskAttemptFinishedEvent
argument_list|(
operator|(
name|TaskAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|AM_STARTED
case|:
name|handleAMStartedEvent
argument_list|(
operator|(
name|AMStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|handleTaskAttemptFinishedEvent (TaskAttemptFinishedEvent event)
specifier|private
name|void
name|handleTaskAttemptFinishedEvent
parameter_list|(
name|TaskAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|attemptInfo
init|=
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|attemptInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|status
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|state
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|counters
operator|=
name|event
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|hostname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleReduceAttemptFinishedEvent (ReduceAttemptFinishedEvent event)
specifier|private
name|void
name|handleReduceAttemptFinishedEvent
parameter_list|(
name|ReduceAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|attemptInfo
init|=
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|attemptInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|status
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|state
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|shuffleFinishTime
operator|=
name|event
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|sortFinishTime
operator|=
name|event
operator|.
name|getSortFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|counters
operator|=
name|event
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|hostname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|port
operator|=
name|event
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|rackname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMapAttemptFinishedEvent (MapAttemptFinishedEvent event)
specifier|private
name|void
name|handleMapAttemptFinishedEvent
parameter_list|(
name|MapAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|attemptInfo
init|=
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|attemptInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|status
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|state
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|mapFinishTime
operator|=
name|event
operator|.
name|getMapFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|counters
operator|=
name|event
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|hostname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|port
operator|=
name|event
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|rackname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleTaskAttemptFailedEvent ( TaskAttemptUnsuccessfulCompletionEvent event)
specifier|private
name|void
name|handleTaskAttemptFailedEvent
parameter_list|(
name|TaskAttemptUnsuccessfulCompletionEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|attemptInfo
init|=
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|attemptInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|error
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|status
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|hostname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|port
operator|=
name|event
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|rackname
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|shuffleFinishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|sortFinishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|mapFinishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|taskInfo
operator|.
name|status
argument_list|)
condition|)
block|{
comment|//this is a successful task
if|if
condition|(
name|attemptInfo
operator|.
name|getAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|taskInfo
operator|.
name|getSuccessfulAttemptId
argument_list|()
argument_list|)
condition|)
block|{
comment|// the failed attempt is the one that made this task successful
comment|// so its no longer successful. Reset fields set in
comment|// handleTaskFinishedEvent()
name|taskInfo
operator|.
name|counters
operator|=
literal|null
expr_stmt|;
name|taskInfo
operator|.
name|finishTime
operator|=
operator|-
literal|1
expr_stmt|;
name|taskInfo
operator|.
name|status
operator|=
literal|null
expr_stmt|;
name|taskInfo
operator|.
name|successfulAttemptId
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleTaskAttemptStartedEvent (TaskAttemptStartedEvent event)
specifier|private
name|void
name|handleTaskAttemptStartedEvent
parameter_list|(
name|TaskAttemptStartedEvent
name|event
parameter_list|)
block|{
name|TaskAttemptID
name|attemptId
init|=
name|event
operator|.
name|getTaskAttemptId
argument_list|()
decl_stmt|;
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|attemptInfo
init|=
operator|new
name|TaskAttemptInfo
argument_list|()
decl_stmt|;
name|attemptInfo
operator|.
name|startTime
operator|=
name|event
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|attemptId
operator|=
name|event
operator|.
name|getTaskAttemptId
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|httpPort
operator|=
name|event
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|trackerName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|attemptInfo
operator|.
name|taskType
operator|=
name|event
operator|.
name|getTaskType
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|shufflePort
operator|=
name|event
operator|.
name|getShufflePort
argument_list|()
expr_stmt|;
name|attemptInfo
operator|.
name|containerId
operator|=
name|event
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|attemptInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|handleTaskFinishedEvent (TaskFinishedEvent event)
specifier|private
name|void
name|handleTaskFinishedEvent
parameter_list|(
name|TaskFinishedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|taskInfo
operator|.
name|counters
operator|=
name|event
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|status
operator|=
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|successfulAttemptId
operator|=
name|event
operator|.
name|getSuccessfulTaskAttemptId
argument_list|()
expr_stmt|;
block|}
DECL|method|handleTaskUpdatedEvent (TaskUpdatedEvent event)
specifier|private
name|void
name|handleTaskUpdatedEvent
parameter_list|(
name|TaskUpdatedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|taskInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
block|}
DECL|method|handleTaskFailedEvent (TaskFailedEvent event)
specifier|private
name|void
name|handleTaskFailedEvent
parameter_list|(
name|TaskFailedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|info
operator|.
name|tasksMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|taskInfo
operator|.
name|status
operator|=
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|error
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|taskInfo
operator|.
name|failedDueToAttemptId
operator|=
name|event
operator|.
name|getFailedAttemptID
argument_list|()
expr_stmt|;
name|info
operator|.
name|errorInfo
operator|=
literal|"Task "
operator|+
name|taskInfo
operator|.
name|taskId
operator|+
literal|" failed "
operator|+
name|taskInfo
operator|.
name|attemptsMap
operator|.
name|size
argument_list|()
operator|+
literal|" times "
expr_stmt|;
block|}
DECL|method|handleTaskStartedEvent (TaskStartedEvent event)
specifier|private
name|void
name|handleTaskStartedEvent
parameter_list|(
name|TaskStartedEvent
name|event
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|()
decl_stmt|;
name|taskInfo
operator|.
name|taskId
operator|=
name|event
operator|.
name|getTaskId
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|startTime
operator|=
name|event
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|taskType
operator|=
name|event
operator|.
name|getTaskType
argument_list|()
expr_stmt|;
name|taskInfo
operator|.
name|splitLocations
operator|=
name|event
operator|.
name|getSplitLocations
argument_list|()
expr_stmt|;
name|info
operator|.
name|tasksMap
operator|.
name|put
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|handleJobFailedEvent (JobUnsuccessfulCompletionEvent event)
specifier|private
name|void
name|handleJobFailedEvent
parameter_list|(
name|JobUnsuccessfulCompletionEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|finishedMaps
operator|=
name|event
operator|.
name|getFinishedMaps
argument_list|()
expr_stmt|;
name|info
operator|.
name|finishedReduces
operator|=
name|event
operator|.
name|getFinishedReduces
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobStatus
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleJobFinishedEvent (JobFinishedEvent event)
specifier|private
name|void
name|handleJobFinishedEvent
parameter_list|(
name|JobFinishedEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|finishTime
operator|=
name|event
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|finishedMaps
operator|=
name|event
operator|.
name|getFinishedMaps
argument_list|()
expr_stmt|;
name|info
operator|.
name|finishedReduces
operator|=
name|event
operator|.
name|getFinishedReduces
argument_list|()
expr_stmt|;
name|info
operator|.
name|failedMaps
operator|=
name|event
operator|.
name|getFailedMaps
argument_list|()
expr_stmt|;
name|info
operator|.
name|failedReduces
operator|=
name|event
operator|.
name|getFailedReduces
argument_list|()
expr_stmt|;
name|info
operator|.
name|totalCounters
operator|=
name|event
operator|.
name|getTotalCounters
argument_list|()
expr_stmt|;
name|info
operator|.
name|mapCounters
operator|=
name|event
operator|.
name|getMapCounters
argument_list|()
expr_stmt|;
name|info
operator|.
name|reduceCounters
operator|=
name|event
operator|.
name|getReduceCounters
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobStatus
operator|=
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
DECL|method|handleJobPriorityChangeEvent (JobPriorityChangeEvent event)
specifier|private
name|void
name|handleJobPriorityChangeEvent
parameter_list|(
name|JobPriorityChangeEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|priority
operator|=
name|event
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
DECL|method|handleJobInitedEvent (JobInitedEvent event)
specifier|private
name|void
name|handleJobInitedEvent
parameter_list|(
name|JobInitedEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|launchTime
operator|=
name|event
operator|.
name|getLaunchTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|totalMaps
operator|=
name|event
operator|.
name|getTotalMaps
argument_list|()
expr_stmt|;
name|info
operator|.
name|totalReduces
operator|=
name|event
operator|.
name|getTotalReduces
argument_list|()
expr_stmt|;
name|info
operator|.
name|uberized
operator|=
name|event
operator|.
name|getUberized
argument_list|()
expr_stmt|;
block|}
DECL|method|handleAMStartedEvent (AMStartedEvent event)
specifier|private
name|void
name|handleAMStartedEvent
parameter_list|(
name|AMStartedEvent
name|event
parameter_list|)
block|{
name|AMInfo
name|amInfo
init|=
operator|new
name|AMInfo
argument_list|()
decl_stmt|;
name|amInfo
operator|.
name|appAttemptId
operator|=
name|event
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|amInfo
operator|.
name|startTime
operator|=
name|event
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|amInfo
operator|.
name|containerId
operator|=
name|event
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|amInfo
operator|.
name|nodeManagerHost
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|amInfo
operator|.
name|nodeManagerPort
operator|=
name|event
operator|.
name|getNodeManagerPort
argument_list|()
expr_stmt|;
name|amInfo
operator|.
name|nodeManagerHttpPort
operator|=
name|event
operator|.
name|getNodeManagerHttpPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|amInfos
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|amInfos
operator|=
operator|new
name|LinkedList
argument_list|<
name|AMInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|amInfos
operator|.
name|add
argument_list|(
name|amInfo
argument_list|)
expr_stmt|;
name|info
operator|.
name|latestAmInfo
operator|=
name|amInfo
expr_stmt|;
block|}
DECL|method|handleJobInfoChangeEvent (JobInfoChangeEvent event)
specifier|private
name|void
name|handleJobInfoChangeEvent
parameter_list|(
name|JobInfoChangeEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|submitTime
operator|=
name|event
operator|.
name|getSubmitTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|launchTime
operator|=
name|event
operator|.
name|getLaunchTime
argument_list|()
expr_stmt|;
block|}
DECL|method|handleJobSubmittedEvent (JobSubmittedEvent event)
specifier|private
name|void
name|handleJobSubmittedEvent
parameter_list|(
name|JobSubmittedEvent
name|event
parameter_list|)
block|{
name|info
operator|.
name|jobid
operator|=
name|event
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobname
operator|=
name|event
operator|.
name|getJobName
argument_list|()
expr_stmt|;
name|info
operator|.
name|username
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|submitTime
operator|=
name|event
operator|.
name|getSubmitTime
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobConfPath
operator|=
name|event
operator|.
name|getJobConfPath
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobACLs
operator|=
name|event
operator|.
name|getJobAcls
argument_list|()
expr_stmt|;
name|info
operator|.
name|jobQueueName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|event
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The class where job information is aggregated into after parsing    */
DECL|class|JobInfo
specifier|public
specifier|static
class|class
name|JobInfo
block|{
DECL|field|errorInfo
name|String
name|errorInfo
init|=
literal|""
decl_stmt|;
DECL|field|submitTime
name|long
name|submitTime
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
decl_stmt|;
DECL|field|jobid
name|JobID
name|jobid
decl_stmt|;
DECL|field|username
name|String
name|username
decl_stmt|;
DECL|field|jobname
name|String
name|jobname
decl_stmt|;
DECL|field|jobQueueName
name|String
name|jobQueueName
decl_stmt|;
DECL|field|jobConfPath
name|String
name|jobConfPath
decl_stmt|;
DECL|field|launchTime
name|long
name|launchTime
decl_stmt|;
DECL|field|totalMaps
name|int
name|totalMaps
decl_stmt|;
DECL|field|totalReduces
name|int
name|totalReduces
decl_stmt|;
DECL|field|failedMaps
name|int
name|failedMaps
decl_stmt|;
DECL|field|failedReduces
name|int
name|failedReduces
decl_stmt|;
DECL|field|finishedMaps
name|int
name|finishedMaps
decl_stmt|;
DECL|field|finishedReduces
name|int
name|finishedReduces
decl_stmt|;
DECL|field|jobStatus
name|String
name|jobStatus
decl_stmt|;
DECL|field|totalCounters
name|Counters
name|totalCounters
decl_stmt|;
DECL|field|mapCounters
name|Counters
name|mapCounters
decl_stmt|;
DECL|field|reduceCounters
name|Counters
name|reduceCounters
decl_stmt|;
DECL|field|priority
name|JobPriority
name|priority
decl_stmt|;
DECL|field|jobACLs
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
decl_stmt|;
DECL|field|tasksMap
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasksMap
decl_stmt|;
DECL|field|amInfos
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
decl_stmt|;
DECL|field|latestAmInfo
name|AMInfo
name|latestAmInfo
decl_stmt|;
DECL|field|uberized
name|boolean
name|uberized
decl_stmt|;
comment|/** Create a job info object where job information will be stored      * after a parse      */
DECL|method|JobInfo ()
specifier|public
name|JobInfo
parameter_list|()
block|{
name|submitTime
operator|=
name|launchTime
operator|=
name|finishTime
operator|=
operator|-
literal|1
expr_stmt|;
name|totalMaps
operator|=
name|totalReduces
operator|=
name|failedMaps
operator|=
name|failedReduces
operator|=
literal|0
expr_stmt|;
name|finishedMaps
operator|=
name|finishedReduces
operator|=
literal|0
expr_stmt|;
name|username
operator|=
name|jobname
operator|=
name|jobConfPath
operator|=
name|jobQueueName
operator|=
literal|""
expr_stmt|;
name|tasksMap
operator|=
operator|new
name|HashMap
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
argument_list|()
expr_stmt|;
name|jobACLs
operator|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
expr_stmt|;
name|priority
operator|=
name|JobPriority
operator|.
name|NORMAL
expr_stmt|;
block|}
comment|/** Print all the job information */
DECL|method|printAll ()
specifier|public
name|void
name|printAll
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JOBNAME: "
operator|+
name|jobname
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"USERNAME: "
operator|+
name|username
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JOB_QUEUE_NAME: "
operator|+
name|jobQueueName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SUBMIT_TIME"
operator|+
name|submitTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"LAUNCH_TIME: "
operator|+
name|launchTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JOB_STATUS: "
operator|+
name|jobStatus
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PRIORITY: "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TOTAL_MAPS: "
operator|+
name|totalMaps
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TOTAL_REDUCES: "
operator|+
name|totalReduces
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapCounters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MAP_COUNTERS:"
operator|+
name|mapCounters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reduceCounters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REDUCE_COUNTERS:"
operator|+
name|reduceCounters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalCounters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TOTAL_COUNTERS: "
operator|+
name|totalCounters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"UBERIZED: "
operator|+
name|uberized
argument_list|)
expr_stmt|;
if|if
condition|(
name|amInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|amInfos
control|)
block|{
name|amInfo
operator|.
name|printAll
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|TaskInfo
name|ti
range|:
name|tasksMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ti
operator|.
name|printAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** @return the job submit time */
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|submitTime
return|;
block|}
comment|/** @return the job finish time */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
comment|/** @return the job id */
DECL|method|getJobId ()
specifier|public
name|JobID
name|getJobId
parameter_list|()
block|{
return|return
name|jobid
return|;
block|}
comment|/** @return the user name */
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/** @return the job name */
DECL|method|getJobname ()
specifier|public
name|String
name|getJobname
parameter_list|()
block|{
return|return
name|jobname
return|;
block|}
comment|/** @return the job queue name */
DECL|method|getJobQueueName ()
specifier|public
name|String
name|getJobQueueName
parameter_list|()
block|{
return|return
name|jobQueueName
return|;
block|}
comment|/** @return the path for the job configuration file */
DECL|method|getJobConfPath ()
specifier|public
name|String
name|getJobConfPath
parameter_list|()
block|{
return|return
name|jobConfPath
return|;
block|}
comment|/** @return the job launch time */
DECL|method|getLaunchTime ()
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
return|return
name|launchTime
return|;
block|}
comment|/** @return the total number of maps */
DECL|method|getTotalMaps ()
specifier|public
name|long
name|getTotalMaps
parameter_list|()
block|{
return|return
name|totalMaps
return|;
block|}
comment|/** @return the total number of reduces */
DECL|method|getTotalReduces ()
specifier|public
name|long
name|getTotalReduces
parameter_list|()
block|{
return|return
name|totalReduces
return|;
block|}
comment|/** @return the total number of failed maps */
DECL|method|getFailedMaps ()
specifier|public
name|long
name|getFailedMaps
parameter_list|()
block|{
return|return
name|failedMaps
return|;
block|}
comment|/** @return the number of failed reduces */
DECL|method|getFailedReduces ()
specifier|public
name|long
name|getFailedReduces
parameter_list|()
block|{
return|return
name|failedReduces
return|;
block|}
comment|/** @return the number of finished maps */
DECL|method|getFinishedMaps ()
specifier|public
name|long
name|getFinishedMaps
parameter_list|()
block|{
return|return
name|finishedMaps
return|;
block|}
comment|/** @return the number of finished reduces */
DECL|method|getFinishedReduces ()
specifier|public
name|long
name|getFinishedReduces
parameter_list|()
block|{
return|return
name|finishedReduces
return|;
block|}
comment|/** @return the job status */
DECL|method|getJobStatus ()
specifier|public
name|String
name|getJobStatus
parameter_list|()
block|{
return|return
name|jobStatus
return|;
block|}
DECL|method|getErrorInfo ()
specifier|public
name|String
name|getErrorInfo
parameter_list|()
block|{
return|return
name|errorInfo
return|;
block|}
comment|/** @return the counters for the job */
DECL|method|getTotalCounters ()
specifier|public
name|Counters
name|getTotalCounters
parameter_list|()
block|{
return|return
name|totalCounters
return|;
block|}
comment|/** @return the map counters for the job */
DECL|method|getMapCounters ()
specifier|public
name|Counters
name|getMapCounters
parameter_list|()
block|{
return|return
name|mapCounters
return|;
block|}
comment|/** @return the reduce counters for the job */
DECL|method|getReduceCounters ()
specifier|public
name|Counters
name|getReduceCounters
parameter_list|()
block|{
return|return
name|reduceCounters
return|;
block|}
comment|/** @return the map of all tasks in this job */
DECL|method|getAllTasks ()
specifier|public
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|getAllTasks
parameter_list|()
block|{
return|return
name|tasksMap
return|;
block|}
comment|/** @return the priority of this job */
DECL|method|getPriority ()
specifier|public
name|String
name|getPriority
parameter_list|()
block|{
return|return
name|priority
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getJobACLs ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
name|jobACLs
return|;
block|}
comment|/** @return the uberized status of this job */
DECL|method|getUberized ()
specifier|public
name|boolean
name|getUberized
parameter_list|()
block|{
return|return
name|uberized
return|;
block|}
comment|/** @return the AMInfo for the job's AppMaster */
DECL|method|getAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAMInfos
parameter_list|()
block|{
return|return
name|amInfos
return|;
block|}
comment|/** @return the AMInfo for the newest AppMaster */
DECL|method|getLatestAMInfo ()
specifier|public
name|AMInfo
name|getLatestAMInfo
parameter_list|()
block|{
return|return
name|latestAmInfo
return|;
block|}
empty_stmt|;
block|}
comment|/**    * TaskInformation is aggregated in this class after parsing    */
DECL|class|TaskInfo
specifier|public
specifier|static
class|class
name|TaskInfo
block|{
DECL|field|taskId
name|TaskID
name|taskId
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
decl_stmt|;
DECL|field|taskType
name|TaskType
name|taskType
decl_stmt|;
DECL|field|splitLocations
name|String
name|splitLocations
decl_stmt|;
DECL|field|counters
name|Counters
name|counters
decl_stmt|;
DECL|field|status
name|String
name|status
decl_stmt|;
DECL|field|error
name|String
name|error
decl_stmt|;
DECL|field|failedDueToAttemptId
name|TaskAttemptID
name|failedDueToAttemptId
decl_stmt|;
DECL|field|successfulAttemptId
name|TaskAttemptID
name|successfulAttemptId
decl_stmt|;
DECL|field|attemptsMap
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|attemptsMap
decl_stmt|;
DECL|method|TaskInfo ()
specifier|public
name|TaskInfo
parameter_list|()
block|{
name|startTime
operator|=
name|finishTime
operator|=
operator|-
literal|1
expr_stmt|;
name|error
operator|=
name|splitLocations
operator|=
literal|""
expr_stmt|;
name|attemptsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|printAll ()
specifier|public
name|void
name|printAll
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TASK_ID:"
operator|+
name|taskId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"START_TIME: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FINISH_TIME:"
operator|+
name|finishTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TASK_TYPE:"
operator|+
name|taskType
argument_list|)
expr_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COUNTERS:"
operator|+
name|counters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskAttemptInfo
name|tinfo
range|:
name|attemptsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|tinfo
operator|.
name|printAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** @return the Task ID */
DECL|method|getTaskId ()
specifier|public
name|TaskID
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/** @return the start time of this task */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/** @return the finish time of this task */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
comment|/** @return the task type */
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
comment|/** @return the split locations */
DECL|method|getSplitLocations ()
specifier|public
name|String
name|getSplitLocations
parameter_list|()
block|{
return|return
name|splitLocations
return|;
block|}
comment|/** @return the counters for this task */
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
comment|/** @return the task status */
DECL|method|getTaskStatus ()
specifier|public
name|String
name|getTaskStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/** @return the attempt Id that caused this task to fail */
DECL|method|getFailedDueToAttemptId ()
specifier|public
name|TaskAttemptID
name|getFailedDueToAttemptId
parameter_list|()
block|{
return|return
name|failedDueToAttemptId
return|;
block|}
comment|/** @return the attempt Id that caused this task to succeed */
DECL|method|getSuccessfulAttemptId ()
specifier|public
name|TaskAttemptID
name|getSuccessfulAttemptId
parameter_list|()
block|{
return|return
name|successfulAttemptId
return|;
block|}
comment|/** @return the error */
DECL|method|getError ()
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/** @return the map of all attempts for this task */
DECL|method|getAllTaskAttempts ()
specifier|public
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|getAllTaskAttempts
parameter_list|()
block|{
return|return
name|attemptsMap
return|;
block|}
block|}
comment|/**    * Task Attempt Information is aggregated in this class after parsing    */
DECL|class|TaskAttemptInfo
specifier|public
specifier|static
class|class
name|TaskAttemptInfo
block|{
DECL|field|attemptId
name|TaskAttemptID
name|attemptId
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
decl_stmt|;
DECL|field|shuffleFinishTime
name|long
name|shuffleFinishTime
decl_stmt|;
DECL|field|sortFinishTime
name|long
name|sortFinishTime
decl_stmt|;
DECL|field|mapFinishTime
name|long
name|mapFinishTime
decl_stmt|;
DECL|field|error
name|String
name|error
decl_stmt|;
DECL|field|status
name|String
name|status
decl_stmt|;
DECL|field|state
name|String
name|state
decl_stmt|;
DECL|field|taskType
name|TaskType
name|taskType
decl_stmt|;
DECL|field|trackerName
name|String
name|trackerName
decl_stmt|;
DECL|field|counters
name|Counters
name|counters
decl_stmt|;
DECL|field|httpPort
name|int
name|httpPort
decl_stmt|;
DECL|field|shufflePort
name|int
name|shufflePort
decl_stmt|;
DECL|field|hostname
name|String
name|hostname
decl_stmt|;
DECL|field|port
name|int
name|port
decl_stmt|;
DECL|field|rackname
name|String
name|rackname
decl_stmt|;
DECL|field|containerId
name|ContainerId
name|containerId
decl_stmt|;
comment|/** Create a Task Attempt Info which will store attempt level information      * on a history parse.      */
DECL|method|TaskAttemptInfo ()
specifier|public
name|TaskAttemptInfo
parameter_list|()
block|{
name|startTime
operator|=
name|finishTime
operator|=
name|shuffleFinishTime
operator|=
name|sortFinishTime
operator|=
name|mapFinishTime
operator|=
operator|-
literal|1
expr_stmt|;
name|error
operator|=
name|state
operator|=
name|trackerName
operator|=
name|hostname
operator|=
name|rackname
operator|=
literal|""
expr_stmt|;
name|port
operator|=
operator|-
literal|1
expr_stmt|;
name|httpPort
operator|=
operator|-
literal|1
expr_stmt|;
name|shufflePort
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Print all the information about this attempt.      */
DECL|method|printAll ()
specifier|public
name|void
name|printAll
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ATTEMPT_ID:"
operator|+
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"START_TIME: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FINISH_TIME:"
operator|+
name|finishTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR:"
operator|+
name|error
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TASK_STATUS:"
operator|+
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"STATE:"
operator|+
name|state
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TASK_TYPE:"
operator|+
name|taskType
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TRACKER_NAME:"
operator|+
name|trackerName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HTTP_PORT:"
operator|+
name|httpPort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SHUFFLE_PORT:"
operator|+
name|shufflePort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CONTIANER_ID:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COUNTERS:"
operator|+
name|counters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return the attempt Id */
DECL|method|getAttemptId ()
specifier|public
name|TaskAttemptID
name|getAttemptId
parameter_list|()
block|{
return|return
name|attemptId
return|;
block|}
comment|/** @return the start time of the attempt */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/** @return the finish time of the attempt */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
comment|/** @return the shuffle finish time. Applicable only for reduce attempts */
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
return|return
name|shuffleFinishTime
return|;
block|}
comment|/** @return the sort finish time. Applicable only for reduce attempts */
DECL|method|getSortFinishTime ()
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
return|return
name|sortFinishTime
return|;
block|}
comment|/** @return the map finish time. Applicable only for map attempts */
DECL|method|getMapFinishTime ()
specifier|public
name|long
name|getMapFinishTime
parameter_list|()
block|{
return|return
name|mapFinishTime
return|;
block|}
comment|/** @return the error string */
DECL|method|getError ()
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/** @return the state */
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/** @return the task status */
DECL|method|getTaskStatus ()
specifier|public
name|String
name|getTaskStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/** @return the task type */
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
comment|/** @return the tracker name where the attempt executed */
DECL|method|getTrackerName ()
specifier|public
name|String
name|getTrackerName
parameter_list|()
block|{
return|return
name|trackerName
return|;
block|}
comment|/** @return the host name */
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/** @return the port */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/** @return the rack name */
DECL|method|getRackname ()
specifier|public
name|String
name|getRackname
parameter_list|()
block|{
return|return
name|rackname
return|;
block|}
comment|/** @return the counters for the attempt */
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
comment|/** @return the HTTP port for the tracker */
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
comment|/** @return the Shuffle port for the tracker */
DECL|method|getShufflePort ()
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
return|return
name|shufflePort
return|;
block|}
comment|/** @return the ContainerId for the tracker */
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
block|}
comment|/**    * Stores AM information    */
DECL|class|AMInfo
specifier|public
specifier|static
class|class
name|AMInfo
block|{
DECL|field|appAttemptId
name|ApplicationAttemptId
name|appAttemptId
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|containerId
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeManagerHost
name|String
name|nodeManagerHost
decl_stmt|;
DECL|field|nodeManagerPort
name|int
name|nodeManagerPort
decl_stmt|;
DECL|field|nodeManagerHttpPort
name|int
name|nodeManagerHttpPort
decl_stmt|;
comment|/**      * Create a AM Info which will store AM level information on a history      * parse.      */
DECL|method|AMInfo ()
specifier|public
name|AMInfo
parameter_list|()
block|{
name|startTime
operator|=
operator|-
literal|1
expr_stmt|;
name|nodeManagerHost
operator|=
literal|""
expr_stmt|;
name|nodeManagerHttpPort
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|AMInfo (ApplicationAttemptId appAttemptId, long startTime, ContainerId containerId, String nodeManagerHost, int nodeManagerPort, int nodeManagerHttpPort)
specifier|public
name|AMInfo
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|long
name|startTime
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|nodeManagerHost
parameter_list|,
name|int
name|nodeManagerPort
parameter_list|,
name|int
name|nodeManagerHttpPort
parameter_list|)
block|{
name|this
operator|.
name|appAttemptId
operator|=
name|appAttemptId
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nodeManagerHost
operator|=
name|nodeManagerHost
expr_stmt|;
name|this
operator|.
name|nodeManagerPort
operator|=
name|nodeManagerPort
expr_stmt|;
name|this
operator|.
name|nodeManagerHttpPort
operator|=
name|nodeManagerHttpPort
expr_stmt|;
block|}
comment|/**      * Print all the information about this AM.      */
DECL|method|printAll ()
specifier|public
name|void
name|printAll
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"APPLICATION_ATTEMPT_ID:"
operator|+
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"START_TIME: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CONTAINER_ID: "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NODE_MANAGER_HOST: "
operator|+
name|nodeManagerHost
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NODE_MANAGER_PORT: "
operator|+
name|nodeManagerPort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NODE_MANAGER_HTTP_PORT: "
operator|+
name|nodeManagerHttpPort
argument_list|)
expr_stmt|;
block|}
comment|/** @return the ApplicationAttemptId */
DECL|method|getAppAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|()
block|{
return|return
name|appAttemptId
return|;
block|}
comment|/** @return the start time of the AM */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/** @return the container id for the AM */
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
comment|/** @return the host name for the node manager on which the AM is running */
DECL|method|getNodeManagerHost ()
specifier|public
name|String
name|getNodeManagerHost
parameter_list|()
block|{
return|return
name|nodeManagerHost
return|;
block|}
comment|/** @return the port for the node manager running the AM */
DECL|method|getNodeManagerPort ()
specifier|public
name|int
name|getNodeManagerPort
parameter_list|()
block|{
return|return
name|nodeManagerPort
return|;
block|}
comment|/** @return the http port for the node manager running the AM */
DECL|method|getNodeManagerHttpPort ()
specifier|public
name|int
name|getNodeManagerHttpPort
parameter_list|()
block|{
return|return
name|nodeManagerHttpPort
return|;
block|}
block|}
block|}
end_class

end_unit

