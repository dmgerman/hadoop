begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.split
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|SerializationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|SplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The class that is used by the Job clients to write splits (both the meta  * and the raw bytes parts)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobSplitWriter
specifier|public
class|class
name|JobSplitWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobSplitWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|splitVersion
specifier|private
specifier|static
specifier|final
name|int
name|splitVersion
init|=
name|JobSplit
operator|.
name|META_SPLIT_VERSION
decl_stmt|;
DECL|field|SPLIT_FILE_HEADER
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SPLIT_FILE_HEADER
decl_stmt|;
static|static
block|{
try|try
block|{
name|SPLIT_FILE_HEADER
operator|=
literal|"SPL"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|u
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|u
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createSplitFiles (Path jobSubmitDir, Configuration conf, FileSystem fs, List<InputSplit> splits)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|InputSplit
parameter_list|>
name|void
name|createSplitFiles
parameter_list|(
name|Path
name|jobSubmitDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|T
index|[]
name|array
init|=
operator|(
name|T
index|[]
operator|)
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|InputSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|createSplitFiles
argument_list|(
name|jobSubmitDir
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
DECL|method|createSplitFiles (Path jobSubmitDir, Configuration conf, FileSystem fs, T[] splits)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|InputSplit
parameter_list|>
name|void
name|createSplitFiles
parameter_list|(
name|Path
name|jobSubmitDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|T
index|[]
name|splits
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FSDataOutputStream
name|out
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|JobSubmissionFiles
operator|.
name|getJobSplitFile
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SplitMetaInfo
index|[]
name|info
init|=
name|writeNewSplits
argument_list|(
name|conf
argument_list|,
name|splits
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeJobSplitMetaInfo
argument_list|(
name|fs
argument_list|,
name|JobSubmissionFiles
operator|.
name|getJobSplitMetaFile
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobSubmissionFiles
operator|.
name|JOB_FILE_PERMISSION
argument_list|)
argument_list|,
name|splitVersion
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|createSplitFiles (Path jobSubmitDir, Configuration conf, FileSystem fs, org.apache.hadoop.mapred.InputSplit[] splits)
specifier|public
specifier|static
name|void
name|createSplitFiles
parameter_list|(
name|Path
name|jobSubmitDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[]
name|splits
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|JobSubmissionFiles
operator|.
name|getJobSplitFile
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SplitMetaInfo
index|[]
name|info
init|=
name|writeOldSplits
argument_list|(
name|splits
argument_list|,
name|out
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeJobSplitMetaInfo
argument_list|(
name|fs
argument_list|,
name|JobSubmissionFiles
operator|.
name|getJobSplitMetaFile
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobSubmissionFiles
operator|.
name|JOB_FILE_PERMISSION
argument_list|)
argument_list|,
name|splitVersion
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (FileSystem fs, Path splitFile, Configuration job)
specifier|private
specifier|static
name|FSDataOutputStream
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|splitFile
parameter_list|,
name|Configuration
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|splitFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobSubmissionFiles
operator|.
name|JOB_FILE_PERMISSION
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|replication
init|=
name|job
operator|.
name|getInt
argument_list|(
name|Job
operator|.
name|SUBMIT_REPLICATION
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|splitFile
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|)
expr_stmt|;
name|writeSplitHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|writeSplitHeader (FSDataOutputStream out)
specifier|private
specifier|static
name|void
name|writeSplitHeader
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|SPLIT_FILE_HEADER
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|splitVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|InputSplit
parameter_list|>
DECL|method|writeNewSplits (Configuration conf, T[] array, FSDataOutputStream out)
name|SplitMetaInfo
index|[]
name|writeNewSplits
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|T
index|[]
name|array
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SplitMetaInfo
index|[]
name|info
init|=
operator|new
name|SplitMetaInfo
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|SerializationFactory
name|factory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|maxBlockLocations
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_KEY
argument_list|,
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|split
range|:
name|array
control|)
block|{
name|long
name|prevCount
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|split
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Serializer
argument_list|<
name|T
argument_list|>
name|serializer
init|=
name|factory
operator|.
name|getSerializer
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|split
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|long
name|currCount
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|length
operator|>
name|maxBlockLocations
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Max block location exceeded for split: "
operator|+
name|split
operator|+
literal|" splitsize: "
operator|+
name|locations
operator|.
name|length
operator|+
literal|" maxsize: "
operator|+
name|maxBlockLocations
argument_list|)
expr_stmt|;
name|locations
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|locations
argument_list|,
name|maxBlockLocations
argument_list|)
expr_stmt|;
block|}
name|info
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|JobSplit
operator|.
name|SplitMetaInfo
argument_list|(
name|locations
argument_list|,
name|offset
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|currCount
operator|-
name|prevCount
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|writeOldSplits ( org.apache.hadoop.mapred.InputSplit[] splits, FSDataOutputStream out, Configuration conf)
specifier|private
specifier|static
name|SplitMetaInfo
index|[]
name|writeOldSplits
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[]
name|splits
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|SplitMetaInfo
index|[]
name|info
init|=
operator|new
name|SplitMetaInfo
index|[
name|splits
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|offset
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|int
name|maxBlockLocations
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_KEY
argument_list|,
name|MRConfig
operator|.
name|MAX_BLOCK_LOCATIONS_DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|long
name|prevLen
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|split
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|split
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
name|currLen
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|length
operator|>
name|maxBlockLocations
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Max block location exceeded for split: "
operator|+
name|split
operator|+
literal|" splitsize: "
operator|+
name|locations
operator|.
name|length
operator|+
literal|" maxsize: "
operator|+
name|maxBlockLocations
argument_list|)
expr_stmt|;
name|locations
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|locations
argument_list|,
name|maxBlockLocations
argument_list|)
expr_stmt|;
block|}
name|info
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|JobSplit
operator|.
name|SplitMetaInfo
argument_list|(
name|locations
argument_list|,
name|offset
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|currLen
operator|-
name|prevLen
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|writeJobSplitMetaInfo (FileSystem fs, Path filename, FsPermission p, int splitMetaInfoVersion, JobSplit.SplitMetaInfo[] allSplitMetaInfo)
specifier|private
specifier|static
name|void
name|writeJobSplitMetaInfo
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filename
parameter_list|,
name|FsPermission
name|p
parameter_list|,
name|int
name|splitMetaInfoVersion
parameter_list|,
name|JobSplit
operator|.
name|SplitMetaInfo
index|[]
name|allSplitMetaInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write the splits meta-info to a file for the job tracker
name|FSDataOutputStream
name|out
init|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|JobSplit
operator|.
name|META_SPLIT_FILE_HEADER
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|splitMetaInfoVersion
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|allSplitMetaInfo
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|JobSplit
operator|.
name|SplitMetaInfo
name|splitMetaInfo
range|:
name|allSplitMetaInfo
control|)
block|{
name|splitMetaInfo
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

