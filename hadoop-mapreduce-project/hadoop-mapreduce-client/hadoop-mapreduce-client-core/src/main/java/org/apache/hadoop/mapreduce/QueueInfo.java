begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_comment
comment|/**  * Class that contains the information regarding the Job Queues which are   * maintained by the Hadoop Map/Reduce framework.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|QueueInfo
specifier|public
class|class
name|QueueInfo
implements|implements
name|Writable
block|{
DECL|field|queueName
specifier|private
name|String
name|queueName
init|=
literal|""
decl_stmt|;
comment|//The scheduling Information object is read back as String.
comment|//Once the scheduling information is set there is no way to recover it.
DECL|field|schedulingInfo
specifier|private
name|String
name|schedulingInfo
decl_stmt|;
DECL|field|queueState
specifier|private
name|QueueState
name|queueState
decl_stmt|;
comment|// Jobs submitted to the queue
DECL|field|stats
specifier|private
name|JobStatus
index|[]
name|stats
decl_stmt|;
DECL|field|children
specifier|private
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|children
decl_stmt|;
DECL|field|props
specifier|private
name|Properties
name|props
decl_stmt|;
comment|/**    * Default constructor for QueueInfo.    *     */
DECL|method|QueueInfo ()
specifier|public
name|QueueInfo
parameter_list|()
block|{
comment|// make it running by default.
name|this
operator|.
name|queueState
operator|=
name|QueueState
operator|.
name|RUNNING
expr_stmt|;
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a new QueueInfo object using the queue name and the    * scheduling information passed.    *     * @param queueName Name of the job queue    * @param schedulingInfo Scheduling Information associated with the job    * queue    */
DECL|method|QueueInfo (String queueName, String schedulingInfo)
specifier|public
name|QueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|schedulingInfo
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|schedulingInfo
operator|=
name|schedulingInfo
expr_stmt|;
block|}
comment|/**    *     * @param queueName    * @param schedulingInfo    * @param state    * @param stats    */
DECL|method|QueueInfo (String queueName, String schedulingInfo, QueueState state, JobStatus[] stats)
specifier|public
name|QueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|schedulingInfo
parameter_list|,
name|QueueState
name|state
parameter_list|,
name|JobStatus
index|[]
name|stats
parameter_list|)
block|{
name|this
argument_list|(
name|queueName
argument_list|,
name|schedulingInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueState
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
comment|/**    * Set the queue name of the JobQueueInfo    *     * @param queueName Name of the job queue.    */
DECL|method|setQueueName (String queueName)
specifier|protected
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
comment|/**    * Get the queue name from JobQueueInfo    *     * @return queue name    */
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
comment|/**    * Set the scheduling information associated to particular job queue    *     * @param schedulingInfo    */
DECL|method|setSchedulingInfo (String schedulingInfo)
specifier|protected
name|void
name|setSchedulingInfo
parameter_list|(
name|String
name|schedulingInfo
parameter_list|)
block|{
name|this
operator|.
name|schedulingInfo
operator|=
name|schedulingInfo
expr_stmt|;
block|}
comment|/**    * Gets the scheduling information associated to particular job queue.    * If nothing is set would return<b>"N/A"</b>    *     * @return Scheduling information associated to particular Job Queue    */
DECL|method|getSchedulingInfo ()
specifier|public
name|String
name|getSchedulingInfo
parameter_list|()
block|{
if|if
condition|(
name|schedulingInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|schedulingInfo
return|;
block|}
else|else
block|{
return|return
literal|"N/A"
return|;
block|}
block|}
comment|/**    * Set the state of the queue    * @param state state of the queue.    */
DECL|method|setState (QueueState state)
specifier|protected
name|void
name|setState
parameter_list|(
name|QueueState
name|state
parameter_list|)
block|{
name|queueState
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * Return the queue state    * @return the queue state.    */
DECL|method|getState ()
specifier|public
name|QueueState
name|getState
parameter_list|()
block|{
return|return
name|queueState
return|;
block|}
DECL|method|setJobStatuses (JobStatus[] stats)
specifier|protected
name|void
name|setJobStatuses
parameter_list|(
name|JobStatus
index|[]
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
comment|/**     * Get immediate children.    *     * @return list of QueueInfo    */
DECL|method|getQueueChildren ()
specifier|public
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|getQueueChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|setQueueChildren (List<QueueInfo> children)
specifier|protected
name|void
name|setQueueChildren
parameter_list|(
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
comment|/**    * Get properties.    *     * @return Properties    */
DECL|method|getProperties ()
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
DECL|method|setProperties (Properties props)
specifier|protected
name|void
name|setProperties
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
comment|/**    * Get the jobs submitted to queue    * @return list of JobStatus for the submitted jobs    */
DECL|method|getJobStatuses ()
specifier|public
name|JobStatus
index|[]
name|getJobStatuses
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|queueName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|queueState
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|QueueState
operator|.
name|class
argument_list|)
expr_stmt|;
name|schedulingInfo
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|stats
operator|=
operator|new
name|JobStatus
index|[
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stats
index|[
name|i
index|]
operator|=
operator|new
name|JobStatus
argument_list|()
expr_stmt|;
name|stats
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|QueueInfo
name|childQueueInfo
init|=
operator|new
name|QueueInfo
argument_list|()
decl_stmt|;
name|childQueueInfo
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|childQueueInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|queueState
argument_list|)
expr_stmt|;
if|if
condition|(
name|schedulingInfo
operator|!=
literal|null
condition|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|schedulingInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
literal|"N/A"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|JobStatus
name|stat
range|:
name|stats
control|)
block|{
name|stat
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QueueInfo
name|childQueueInfo
range|:
name|children
control|)
block|{
name|childQueueInfo
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

