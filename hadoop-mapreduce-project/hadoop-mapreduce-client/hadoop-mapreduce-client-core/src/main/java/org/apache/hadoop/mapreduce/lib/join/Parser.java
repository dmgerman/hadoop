begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StreamTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Very simple shift-reduce parser for join expressions.  *  * This should be sufficient for the user extension permitted now, but ought to  * be replaced with a parser generator if more complex grammars are supported.  * In particular, this&quot;shift-reduce&quot; parser has no states. Each set  * of formals requires a different internal node type, which is responsible for  * interpreting the list of tokens it receives. This is sufficient for the  * current grammar, but it has several annoying properties that might inhibit  * extension. In particular, parenthesis are always function calls; an  * algebraic or filter grammar would not only require a node type, but must  * also work around the internals of this parser.  *  * For most other cases, adding classes to the hierarchy- particularly by  * extending JoinRecordReader and MultiFilterRecordReader- is fairly  * straightforward. One need only override the relevant method(s) (usually only  * {@link CompositeRecordReader#combine}) and include a property to map its  * value to an identifier in the parser.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Parser
specifier|public
class|class
name|Parser
block|{
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|enum|TType
DECL|enumConstant|CIF
DECL|enumConstant|IDENT
DECL|enumConstant|COMMA
DECL|enumConstant|LPAREN
DECL|enumConstant|RPAREN
DECL|enumConstant|QUOT
DECL|enumConstant|NUM
specifier|public
enum|enum
name|TType
block|{
name|CIF
block|,
name|IDENT
block|,
name|COMMA
block|,
name|LPAREN
block|,
name|RPAREN
block|,
name|QUOT
block|,
name|NUM
block|, }
comment|/**    * Tagged-union type for tokens from the join expression.    * @see Parser.TType    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Token
specifier|public
specifier|static
class|class
name|Token
block|{
DECL|field|type
specifier|private
name|TType
name|type
decl_stmt|;
DECL|method|Token (TType type)
name|Token
parameter_list|(
name|TType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|TType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getNode ()
specifier|public
name|Node
name|getNode
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected nodetype"
argument_list|)
throw|;
block|}
DECL|method|getNum ()
specifier|public
name|double
name|getNum
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected numtype"
argument_list|)
throw|;
block|}
DECL|method|getStr ()
specifier|public
name|String
name|getStr
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected strtype"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|NumToken
specifier|public
specifier|static
class|class
name|NumToken
extends|extends
name|Token
block|{
DECL|field|num
specifier|private
name|double
name|num
decl_stmt|;
DECL|method|NumToken (double num)
specifier|public
name|NumToken
parameter_list|(
name|double
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|TType
operator|.
name|NUM
argument_list|)
expr_stmt|;
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getNum ()
specifier|public
name|double
name|getNum
parameter_list|()
block|{
return|return
name|num
return|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|NodeToken
specifier|public
specifier|static
class|class
name|NodeToken
extends|extends
name|Token
block|{
DECL|field|node
specifier|private
name|Node
name|node
decl_stmt|;
DECL|method|NodeToken (Node node)
name|NodeToken
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|TType
operator|.
name|CIF
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
DECL|method|getNode ()
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|StrToken
specifier|public
specifier|static
class|class
name|StrToken
extends|extends
name|Token
block|{
DECL|field|str
specifier|private
name|String
name|str
decl_stmt|;
DECL|method|StrToken (TType type, String str)
specifier|public
name|StrToken
parameter_list|(
name|TType
name|type
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|str
operator|=
name|str
expr_stmt|;
block|}
DECL|method|getStr ()
specifier|public
name|String
name|getStr
parameter_list|()
block|{
return|return
name|str
return|;
block|}
block|}
comment|/**    * Simple lexer wrapping a StreamTokenizer.    * This encapsulates the creation of tagged-union Tokens and initializes the    * SteamTokenizer.    */
DECL|class|Lexer
specifier|private
specifier|static
class|class
name|Lexer
block|{
DECL|field|tok
specifier|private
name|StreamTokenizer
name|tok
decl_stmt|;
DECL|method|Lexer (String s)
name|Lexer
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|tok
operator|=
operator|new
name|StreamTokenizer
argument_list|(
operator|new
name|CharArrayReader
argument_list|(
name|s
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tok
operator|.
name|quoteChar
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|tok
operator|.
name|parseNumbers
argument_list|()
expr_stmt|;
name|tok
operator|.
name|ordinaryChar
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|tok
operator|.
name|ordinaryChar
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|tok
operator|.
name|ordinaryChar
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|tok
operator|.
name|wordChars
argument_list|(
literal|'$'
argument_list|,
literal|'$'
argument_list|)
expr_stmt|;
name|tok
operator|.
name|wordChars
argument_list|(
literal|'_'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
DECL|method|next ()
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|type
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|StreamTokenizer
operator|.
name|TT_EOF
case|:
case|case
name|StreamTokenizer
operator|.
name|TT_EOL
case|:
return|return
literal|null
return|;
case|case
name|StreamTokenizer
operator|.
name|TT_NUMBER
case|:
return|return
operator|new
name|NumToken
argument_list|(
name|tok
operator|.
name|nval
argument_list|)
return|;
case|case
name|StreamTokenizer
operator|.
name|TT_WORD
case|:
return|return
operator|new
name|StrToken
argument_list|(
name|TType
operator|.
name|IDENT
argument_list|,
name|tok
operator|.
name|sval
argument_list|)
return|;
case|case
literal|'"'
case|:
return|return
operator|new
name|StrToken
argument_list|(
name|TType
operator|.
name|QUOT
argument_list|,
name|tok
operator|.
name|sval
argument_list|)
return|;
default|default:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|','
case|:
return|return
operator|new
name|Token
argument_list|(
name|TType
operator|.
name|COMMA
argument_list|)
return|;
case|case
literal|'('
case|:
return|return
operator|new
name|Token
argument_list|(
name|TType
operator|.
name|LPAREN
argument_list|)
return|;
case|case
literal|')'
case|:
return|return
operator|new
name|Token
argument_list|(
name|TType
operator|.
name|RPAREN
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Node
specifier|public
specifier|abstract
specifier|static
class|class
name|Node
extends|extends
name|ComposableInputFormat
block|{
comment|/**      * Return the node type registered for the particular identifier.      * By default, this is a CNode for any composite node and a WNode      * for&quot;wrapped&quot; nodes. User nodes will likely be composite      * nodes.      * @see #addIdentifier(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)      * @see CompositeInputFormat#setFormat(org.apache.hadoop.mapred.JobConf)      */
DECL|method|forIdent (String ident)
specifier|static
name|Node
name|forIdent
parameter_list|(
name|String
name|ident
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|nodeCstrMap
operator|.
name|containsKey
argument_list|(
name|ident
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No nodetype for "
operator|+
name|ident
argument_list|)
throw|;
block|}
return|return
name|nodeCstrMap
operator|.
name|get
argument_list|(
name|ident
argument_list|)
operator|.
name|newInstance
argument_list|(
name|ident
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|ncstrSig
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|ncstrSig
init|=
block|{
name|String
operator|.
name|class
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
DECL|field|nodeCstrMap
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
argument_list|>
name|nodeCstrMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
DECL|field|rrCstrMap
name|ComposableRecordReader
argument_list|>
argument_list|>
name|rrCstrMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
name|ComposableRecordReader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * For a given identifier, add a mapping to the nodetype for the parse      * tree and to the ComposableRecordReader to be created, including the      * formals required to invoke the constructor.      * The nodetype and constructor signature should be filled in from the      * child node.      */
DECL|method|addIdentifier (String ident, Class<?>[] mcstrSig, Class<? extends Node> nodetype, Class<? extends ComposableRecordReader> cl)
specifier|protected
specifier|static
name|void
name|addIdentifier
parameter_list|(
name|String
name|ident
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|mcstrSig
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|nodetype
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ComposableRecordReader
argument_list|>
name|cl
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|ncstr
init|=
name|nodetype
operator|.
name|getDeclaredConstructor
argument_list|(
name|ncstrSig
argument_list|)
decl_stmt|;
name|ncstr
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeCstrMap
operator|.
name|put
argument_list|(
name|ident
argument_list|,
name|ncstr
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|ComposableRecordReader
argument_list|>
name|mcstr
init|=
name|cl
operator|.
name|getDeclaredConstructor
argument_list|(
name|mcstrSig
argument_list|)
decl_stmt|;
name|mcstr
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rrCstrMap
operator|.
name|put
argument_list|(
name|ident
argument_list|,
name|mcstr
argument_list|)
expr_stmt|;
block|}
comment|// inst
DECL|field|id
specifier|protected
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ident
specifier|protected
name|String
name|ident
decl_stmt|;
DECL|field|cmpcl
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
decl_stmt|;
DECL|method|Node (String ident)
specifier|protected
name|Node
parameter_list|(
name|String
name|ident
parameter_list|)
block|{
name|this
operator|.
name|ident
operator|=
name|ident
expr_stmt|;
block|}
DECL|method|setID (int id)
specifier|protected
name|void
name|setID
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|setKeyComparator ( Class<? extends WritableComparator> cmpcl)
specifier|protected
name|void
name|setKeyComparator
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
block|{
name|this
operator|.
name|cmpcl
operator|=
name|cmpcl
expr_stmt|;
block|}
DECL|method|parse (List<Token> args, Configuration conf)
specifier|abstract
name|void
name|parse
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|args
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Nodetype in the parse tree for&quot;wrapped&quot; InputFormats.    */
DECL|class|WNode
specifier|static
class|class
name|WNode
extends|extends
name|Node
block|{
DECL|field|cstrSig
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|cstrSig
init|=
block|{
name|Integer
operator|.
name|TYPE
block|,
name|RecordReader
operator|.
name|class
block|,
name|Class
operator|.
name|class
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addIdentifier (String ident, Class<? extends ComposableRecordReader> cl)
specifier|static
name|void
name|addIdentifier
parameter_list|(
name|String
name|ident
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ComposableRecordReader
argument_list|>
name|cl
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|Node
operator|.
name|addIdentifier
argument_list|(
name|ident
argument_list|,
name|cstrSig
argument_list|,
name|WNode
operator|.
name|class
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
DECL|field|indir
specifier|private
name|String
name|indir
decl_stmt|;
DECL|field|inf
specifier|private
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inf
decl_stmt|;
DECL|method|WNode (String ident)
specifier|public
name|WNode
parameter_list|(
name|String
name|ident
parameter_list|)
block|{
name|super
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
comment|/**      * Let the first actual define the InputFormat and the second define      * the<tt>mapred.input.dir</tt> property.      */
annotation|@
name|Override
DECL|method|parse (List<Token> ll, Configuration conf)
specifier|public
name|void
name|parse
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|ll
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Token
argument_list|>
name|i
init|=
name|ll
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|TType
operator|.
name|COMMA
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|inf
operator|=
operator|(
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getStr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parse error"
argument_list|)
throw|;
block|}
name|Token
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|TType
operator|.
name|QUOT
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected quoted string"
argument_list|)
throw|;
block|}
name|indir
operator|=
name|t
operator|.
name|getStr
argument_list|()
expr_stmt|;
comment|// no check for ll.isEmpty() to permit extension
block|}
DECL|method|getConf (Configuration jconf)
specifier|private
name|Configuration
name|getConf
parameter_list|(
name|Configuration
name|jconf
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jconf
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|indir
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|inf
operator|.
name|getSplits
argument_list|(
operator|new
name|JobContextImpl
argument_list|(
name|getConf
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext taskContext)
specifier|public
name|ComposableRecordReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|rrCstrMap
operator|.
name|containsKey
argument_list|(
name|ident
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No RecordReader for "
operator|+
name|ident
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|(
name|taskContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|context
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WrappedStatusReporter
argument_list|(
name|taskContext
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rrCstrMap
operator|.
name|get
argument_list|(
name|ident
argument_list|)
operator|.
name|newInstance
argument_list|(
name|id
argument_list|,
name|inf
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
argument_list|,
name|cmpcl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ident
operator|+
literal|"("
operator|+
name|inf
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|",\""
operator|+
name|indir
operator|+
literal|"\")"
return|;
block|}
block|}
DECL|class|WrappedStatusReporter
specifier|private
specifier|static
class|class
name|WrappedStatusReporter
extends|extends
name|StatusReporter
block|{
DECL|field|context
name|TaskAttemptContext
name|context
decl_stmt|;
DECL|method|WrappedStatusReporter (TaskAttemptContext context)
specifier|public
name|WrappedStatusReporter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCounter (Enum<?> name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
name|context
operator|.
name|getCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String group, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|context
operator|.
name|getCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|context
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Internal nodetype for&quot;composite&quot; InputFormats.    */
DECL|class|CNode
specifier|static
class|class
name|CNode
extends|extends
name|Node
block|{
DECL|field|cstrSig
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|cstrSig
init|=
block|{
name|Integer
operator|.
name|TYPE
block|,
name|Configuration
operator|.
name|class
block|,
name|Integer
operator|.
name|TYPE
block|,
name|Class
operator|.
name|class
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addIdentifier (String ident, Class<? extends ComposableRecordReader> cl)
specifier|static
name|void
name|addIdentifier
parameter_list|(
name|String
name|ident
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ComposableRecordReader
argument_list|>
name|cl
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|Node
operator|.
name|addIdentifier
argument_list|(
name|ident
argument_list|,
name|cstrSig
argument_list|,
name|CNode
operator|.
name|class
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
comment|// inst
DECL|field|kids
specifier|private
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|kids
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CNode (String ident)
specifier|public
name|CNode
parameter_list|(
name|String
name|ident
parameter_list|)
block|{
name|super
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setKeyComparator (Class<? extends WritableComparator> cmpcl)
specifier|public
name|void
name|setKeyComparator
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
block|{
name|super
operator|.
name|setKeyComparator
argument_list|(
name|cmpcl
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|kids
control|)
block|{
name|n
operator|.
name|setKeyComparator
argument_list|(
name|cmpcl
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Combine InputSplits from child InputFormats into a      * {@link CompositeInputSplit}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|InputSplit
argument_list|>
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|InputSplit
argument_list|>
argument_list|>
argument_list|(
name|kids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|tmp
init|=
name|kids
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tmp
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error gathering splits from child RReader"
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|splits
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|tmp
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inconsistent split cardinality from child "
operator|+
name|i
operator|+
literal|" ("
operator|+
name|splits
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|tmp
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|splits
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|size
init|=
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|CompositeInputSplit
name|split
init|=
operator|new
name|CompositeInputSplit
argument_list|(
name|splits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|split
operator|.
name|add
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// child types unknowable
specifier|public
name|ComposableRecordReader
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext taskContext)
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
operator|(
name|split
operator|instanceof
name|CompositeInputSplit
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid split type:"
operator|+
name|split
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|CompositeInputSplit
name|spl
init|=
operator|(
name|CompositeInputSplit
operator|)
name|split
decl_stmt|;
specifier|final
name|int
name|capacity
init|=
name|kids
operator|.
name|size
argument_list|()
decl_stmt|;
name|CompositeRecordReader
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|rrCstrMap
operator|.
name|containsKey
argument_list|(
name|ident
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No RecordReader for "
operator|+
name|ident
argument_list|)
throw|;
block|}
name|ret
operator|=
operator|(
name|CompositeRecordReader
operator|)
name|rrCstrMap
operator|.
name|get
argument_list|(
name|ident
argument_list|)
operator|.
name|newInstance
argument_list|(
name|id
argument_list|,
name|taskContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|capacity
argument_list|,
name|cmpcl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|kids
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|createRecordReader
argument_list|(
name|spl
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|taskContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ComposableRecordReader
operator|)
name|ret
return|;
block|}
comment|/**      * Parse a list of comma-separated nodes.      */
DECL|method|parse (List<Token> args, Configuration conf)
specifier|public
name|void
name|parse
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|args
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ListIterator
argument_list|<
name|Token
argument_list|>
name|i
init|=
name|args
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|t
operator|.
name|getNode
argument_list|()
operator|.
name|setID
argument_list|(
name|i
operator|.
name|previousIndex
argument_list|()
operator|>>
literal|1
argument_list|)
expr_stmt|;
name|kids
operator|.
name|add
argument_list|(
name|t
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|TType
operator|.
name|COMMA
operator|.
name|equals
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected ','"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ident
operator|+
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|kids
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|n
operator|.
name|toString
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|reduce (Stack<Token> st, Configuration conf)
specifier|private
specifier|static
name|Token
name|reduce
parameter_list|(
name|Stack
argument_list|<
name|Token
argument_list|>
name|st
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|Token
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|st
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|TType
operator|.
name|LPAREN
operator|.
name|equals
argument_list|(
name|st
operator|.
name|peek
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|args
operator|.
name|addFirst
argument_list|(
name|st
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|st
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unmatched ')'"
argument_list|)
throw|;
block|}
name|st
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|TType
operator|.
name|IDENT
operator|.
name|equals
argument_list|(
name|st
operator|.
name|peek
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Identifier expected"
argument_list|)
throw|;
block|}
name|Node
name|n
init|=
name|Node
operator|.
name|forIdent
argument_list|(
name|st
operator|.
name|pop
argument_list|()
operator|.
name|getStr
argument_list|()
argument_list|)
decl_stmt|;
name|n
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeToken
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/**    * Given an expression and an optional comparator, build a tree of    * InputFormats using the comparator to sort keys.    */
DECL|method|parse (String expr, Configuration conf)
specifier|static
name|Node
name|parse
parameter_list|(
name|String
name|expr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|expr
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expression is null"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_COMPARATOR
argument_list|,
literal|null
argument_list|,
name|WritableComparator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Lexer
name|lex
init|=
operator|new
name|Lexer
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|Token
argument_list|>
name|st
init|=
operator|new
name|Stack
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|Token
name|tok
decl_stmt|;
while|while
condition|(
operator|(
name|tok
operator|=
name|lex
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|TType
operator|.
name|RPAREN
operator|.
name|equals
argument_list|(
name|tok
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|st
operator|.
name|push
argument_list|(
name|reduce
argument_list|(
name|st
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|.
name|push
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|st
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|TType
operator|.
name|CIF
operator|.
name|equals
argument_list|(
name|st
operator|.
name|peek
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|ret
init|=
name|st
operator|.
name|pop
argument_list|()
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmpcl
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setKeyComparator
argument_list|(
name|cmpcl
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing ')'"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

