begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|MapHost
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ShuffleSchedulerImpl
specifier|public
class|class
name|ShuffleSchedulerImpl
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ShuffleScheduler
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|SHUFFLE_START
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Long
argument_list|>
name|SHUFFLE_START
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|protected
name|Long
name|initialValue
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
block|}
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShuffleSchedulerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_MAPS_AT_ONCE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_MAPS_AT_ONCE
init|=
literal|20
decl_stmt|;
DECL|field|INITIAL_PENALTY
specifier|private
specifier|static
specifier|final
name|long
name|INITIAL_PENALTY
init|=
literal|10000
decl_stmt|;
DECL|field|PENALTY_GROWTH_RATE
specifier|private
specifier|static
specifier|final
name|float
name|PENALTY_GROWTH_RATE
init|=
literal|1.3f
decl_stmt|;
DECL|field|REPORT_FAILURE_LIMIT
specifier|private
specifier|final
specifier|static
name|int
name|REPORT_FAILURE_LIMIT
init|=
literal|10
decl_stmt|;
DECL|field|BYTES_PER_MILLIS_TO_MBS
specifier|private
specifier|static
specifier|final
name|float
name|BYTES_PER_MILLIS_TO_MBS
init|=
literal|1000f
operator|/
literal|1024
operator|/
literal|1024
decl_stmt|;
DECL|field|finishedMaps
specifier|private
specifier|final
name|boolean
index|[]
name|finishedMaps
decl_stmt|;
DECL|field|totalMaps
specifier|private
specifier|final
name|int
name|totalMaps
decl_stmt|;
DECL|field|remainingMaps
specifier|private
name|int
name|remainingMaps
decl_stmt|;
DECL|field|mapLocations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MapHost
argument_list|>
name|mapLocations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MapHost
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pendingHosts
specifier|private
name|Set
argument_list|<
name|MapHost
argument_list|>
name|pendingHosts
init|=
operator|new
name|HashSet
argument_list|<
name|MapHost
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|obsoleteMaps
specifier|private
name|Set
argument_list|<
name|TaskAttemptID
argument_list|>
name|obsoleteMaps
init|=
operator|new
name|HashSet
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceId
specifier|private
specifier|final
name|TaskAttemptID
name|reduceId
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|penalties
specifier|private
specifier|final
name|DelayQueue
argument_list|<
name|Penalty
argument_list|>
name|penalties
init|=
operator|new
name|DelayQueue
argument_list|<
name|Penalty
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|referee
specifier|private
specifier|final
name|Referee
name|referee
init|=
operator|new
name|Referee
argument_list|()
decl_stmt|;
DECL|field|failureCounts
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|IntWritable
argument_list|>
name|failureCounts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|hostFailures
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IntWritable
argument_list|>
name|hostFailures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|TaskStatus
name|status
decl_stmt|;
DECL|field|reporter
specifier|private
specifier|final
name|ExceptionReporter
name|reporter
decl_stmt|;
DECL|field|abortFailureLimit
specifier|private
specifier|final
name|int
name|abortFailureLimit
decl_stmt|;
DECL|field|progress
specifier|private
specifier|final
name|Progress
name|progress
decl_stmt|;
DECL|field|shuffledMapsCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|shuffledMapsCounter
decl_stmt|;
DECL|field|reduceShuffleBytes
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|reduceShuffleBytes
decl_stmt|;
DECL|field|failedShuffleCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|failedShuffleCounter
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|lastProgressTime
specifier|private
name|long
name|lastProgressTime
decl_stmt|;
DECL|field|copyTimeTracker
specifier|private
specifier|final
name|CopyTimeTracker
name|copyTimeTracker
decl_stmt|;
DECL|field|maxMapRuntime
specifier|private
specifier|volatile
name|int
name|maxMapRuntime
init|=
literal|0
decl_stmt|;
DECL|field|maxFailedUniqueFetches
specifier|private
specifier|final
name|int
name|maxFailedUniqueFetches
decl_stmt|;
DECL|field|maxFetchFailuresBeforeReporting
specifier|private
specifier|final
name|int
name|maxFetchFailuresBeforeReporting
decl_stmt|;
DECL|field|totalBytesShuffledTillNow
specifier|private
name|long
name|totalBytesShuffledTillNow
init|=
literal|0
decl_stmt|;
DECL|field|mbpsFormat
specifier|private
specifier|final
name|DecimalFormat
name|mbpsFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
DECL|field|reportReadErrorImmediately
specifier|private
specifier|final
name|boolean
name|reportReadErrorImmediately
decl_stmt|;
DECL|field|maxPenalty
specifier|private
name|long
name|maxPenalty
init|=
name|MRJobConfig
operator|.
name|DEFAULT_MAX_SHUFFLE_FETCH_RETRY_DELAY
decl_stmt|;
DECL|field|maxHostFailures
specifier|private
name|int
name|maxHostFailures
decl_stmt|;
DECL|method|ShuffleSchedulerImpl (JobConf job, TaskStatus status, TaskAttemptID reduceId, ExceptionReporter reporter, Progress progress, Counters.Counter shuffledMapsCounter, Counters.Counter reduceShuffleBytes, Counters.Counter failedShuffleCounter)
specifier|public
name|ShuffleSchedulerImpl
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskStatus
name|status
parameter_list|,
name|TaskAttemptID
name|reduceId
parameter_list|,
name|ExceptionReporter
name|reporter
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Counters
operator|.
name|Counter
name|shuffledMapsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|reduceShuffleBytes
parameter_list|,
name|Counters
operator|.
name|Counter
name|failedShuffleCounter
parameter_list|)
block|{
name|totalMaps
operator|=
name|job
operator|.
name|getNumMapTasks
argument_list|()
expr_stmt|;
name|abortFailureLimit
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|30
argument_list|,
name|totalMaps
operator|/
literal|10
argument_list|)
expr_stmt|;
name|copyTimeTracker
operator|=
operator|new
name|CopyTimeTracker
argument_list|()
expr_stmt|;
name|remainingMaps
operator|=
name|totalMaps
expr_stmt|;
name|finishedMaps
operator|=
operator|new
name|boolean
index|[
name|remainingMaps
index|]
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|reduceId
operator|=
name|reduceId
expr_stmt|;
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
name|this
operator|.
name|shuffledMapsCounter
operator|=
name|shuffledMapsCounter
expr_stmt|;
name|this
operator|.
name|reduceShuffleBytes
operator|=
name|reduceShuffleBytes
expr_stmt|;
name|this
operator|.
name|failedShuffleCounter
operator|=
name|failedShuffleCounter
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|lastProgressTime
operator|=
name|startTime
expr_stmt|;
name|referee
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxFailedUniqueFetches
operator|=
name|Math
operator|.
name|min
argument_list|(
name|totalMaps
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFetchFailuresBeforeReporting
operator|=
name|job
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_FETCH_FAILURES
argument_list|,
name|REPORT_FAILURE_LIMIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|reportReadErrorImmediately
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_NOTIFY_READERROR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxPenalty
operator|=
name|job
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MAX_SHUFFLE_FETCH_RETRY_DELAY
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAX_SHUFFLE_FETCH_RETRY_DELAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHostFailures
operator|=
name|job
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_SHUFFLE_FETCH_HOST_FAILURES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAX_SHUFFLE_FETCH_HOST_FAILURES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve (TaskCompletionEvent event)
specifier|public
name|void
name|resolve
parameter_list|(
name|TaskCompletionEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getTaskStatus
argument_list|()
condition|)
block|{
case|case
name|SUCCEEDED
case|:
name|URI
name|u
init|=
name|getBaseURI
argument_list|(
name|reduceId
argument_list|,
name|event
operator|.
name|getTaskTrackerHttp
argument_list|()
argument_list|)
decl_stmt|;
name|addKnownMapOutput
argument_list|(
name|u
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|u
operator|.
name|getPort
argument_list|()
argument_list|,
name|u
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|maxMapRuntime
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxMapRuntime
argument_list|,
name|event
operator|.
name|getTaskRunTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
case|case
name|KILLED
case|:
case|case
name|OBSOLETE
case|:
name|obsoleteMapOutput
argument_list|(
name|event
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring obsolete output of "
operator|+
name|event
operator|.
name|getTaskStatus
argument_list|()
operator|+
literal|" map-task: '"
operator|+
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIPFAILED
case|:
name|tipFailed
argument_list|(
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring output of failed map TIP: '"
operator|+
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|getBaseURI (TaskAttemptID reduceId, String url)
specifier|static
name|URI
name|getBaseURI
parameter_list|(
name|TaskAttemptID
name|reduceId
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|StringBuffer
name|baseUrl
init|=
operator|new
name|StringBuffer
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseUrl
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|baseUrl
operator|.
name|append
argument_list|(
literal|"mapOutput?job="
argument_list|)
expr_stmt|;
name|baseUrl
operator|.
name|append
argument_list|(
name|reduceId
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|baseUrl
operator|.
name|append
argument_list|(
literal|"&reduce="
argument_list|)
expr_stmt|;
name|baseUrl
operator|.
name|append
argument_list|(
name|reduceId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|baseUrl
operator|.
name|append
argument_list|(
literal|"&map="
argument_list|)
expr_stmt|;
name|URI
name|u
init|=
name|URI
operator|.
name|create
argument_list|(
name|baseUrl
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|u
return|;
block|}
DECL|method|copySucceeded (TaskAttemptID mapId, MapHost host, long bytes, long startMillis, long endMillis, MapOutput<K,V> output )
specifier|public
specifier|synchronized
name|void
name|copySucceeded
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|MapHost
name|host
parameter_list|,
name|long
name|bytes
parameter_list|,
name|long
name|startMillis
parameter_list|,
name|long
name|endMillis
parameter_list|,
name|MapOutput
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|failureCounts
operator|.
name|remove
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
name|hostFailures
operator|.
name|remove
argument_list|(
name|host
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mapIndex
init|=
name|mapId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finishedMaps
index|[
name|mapIndex
index|]
condition|)
block|{
name|output
operator|.
name|commit
argument_list|()
expr_stmt|;
name|finishedMaps
index|[
name|mapIndex
index|]
operator|=
literal|true
expr_stmt|;
name|shuffledMapsCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|remainingMaps
operator|==
literal|0
condition|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// update single copy task status
name|long
name|copyMillis
init|=
operator|(
name|endMillis
operator|-
name|startMillis
operator|)
decl_stmt|;
if|if
condition|(
name|copyMillis
operator|==
literal|0
condition|)
name|copyMillis
operator|=
literal|1
expr_stmt|;
name|float
name|bytesPerMillis
init|=
operator|(
name|float
operator|)
name|bytes
operator|/
name|copyMillis
decl_stmt|;
name|float
name|transferRate
init|=
name|bytesPerMillis
operator|*
name|BYTES_PER_MILLIS_TO_MBS
decl_stmt|;
name|String
name|individualProgress
init|=
literal|"copy task("
operator|+
name|mapId
operator|+
literal|" succeeded"
operator|+
literal|" at "
operator|+
name|mbpsFormat
operator|.
name|format
argument_list|(
name|transferRate
argument_list|)
operator|+
literal|" MB/s)"
decl_stmt|;
comment|// update the aggregated status
name|copyTimeTracker
operator|.
name|add
argument_list|(
name|startMillis
argument_list|,
name|endMillis
argument_list|)
expr_stmt|;
name|totalBytesShuffledTillNow
operator|+=
name|bytes
expr_stmt|;
name|updateStatus
argument_list|(
name|individualProgress
argument_list|)
expr_stmt|;
name|reduceShuffleBytes
operator|.
name|increment
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|lastProgressTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"map "
operator|+
name|mapId
operator|+
literal|" done "
operator|+
name|status
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateStatus (String individualProgress)
specifier|private
specifier|synchronized
name|void
name|updateStatus
parameter_list|(
name|String
name|individualProgress
parameter_list|)
block|{
name|int
name|mapsDone
init|=
name|totalMaps
operator|-
name|remainingMaps
decl_stmt|;
name|long
name|totalCopyMillis
init|=
name|copyTimeTracker
operator|.
name|getCopyMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalCopyMillis
operator|==
literal|0
condition|)
name|totalCopyMillis
operator|=
literal|1
expr_stmt|;
name|float
name|bytesPerMillis
init|=
operator|(
name|float
operator|)
name|totalBytesShuffledTillNow
operator|/
name|totalCopyMillis
decl_stmt|;
name|float
name|transferRate
init|=
name|bytesPerMillis
operator|*
name|BYTES_PER_MILLIS_TO_MBS
decl_stmt|;
name|progress
operator|.
name|set
argument_list|(
operator|(
name|float
operator|)
name|mapsDone
operator|/
name|totalMaps
argument_list|)
expr_stmt|;
name|String
name|statusString
init|=
name|mapsDone
operator|+
literal|" / "
operator|+
name|totalMaps
operator|+
literal|" copied."
decl_stmt|;
name|status
operator|.
name|setStateString
argument_list|(
name|statusString
argument_list|)
expr_stmt|;
if|if
condition|(
name|individualProgress
operator|!=
literal|null
condition|)
block|{
name|progress
operator|.
name|setStatus
argument_list|(
name|individualProgress
operator|+
literal|" Aggregated copy rate("
operator|+
name|mapsDone
operator|+
literal|" of "
operator|+
name|totalMaps
operator|+
literal|" at "
operator|+
name|mbpsFormat
operator|.
name|format
argument_list|(
name|transferRate
argument_list|)
operator|+
literal|" MB/s)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|progress
operator|.
name|setStatus
argument_list|(
literal|"copy("
operator|+
name|mapsDone
operator|+
literal|" of "
operator|+
name|totalMaps
operator|+
literal|" at "
operator|+
name|mbpsFormat
operator|.
name|format
argument_list|(
name|transferRate
argument_list|)
operator|+
literal|" MB/s)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateStatus ()
specifier|private
name|void
name|updateStatus
parameter_list|()
block|{
name|updateStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|hostFailed (String hostname)
specifier|public
specifier|synchronized
name|void
name|hostFailed
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
if|if
condition|(
name|hostFailures
operator|.
name|containsKey
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
name|IntWritable
name|x
init|=
name|hostFailures
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|x
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hostFailures
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|hostFailureCount (String hostname)
specifier|synchronized
name|int
name|hostFailureCount
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hostFailures
operator|.
name|containsKey
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
name|failures
operator|=
name|hostFailures
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|failures
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fetchFailureCount (TaskAttemptID mapId)
specifier|synchronized
name|int
name|fetchFailureCount
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|)
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|failureCounts
operator|.
name|containsKey
argument_list|(
name|mapId
argument_list|)
condition|)
block|{
name|failures
operator|=
name|failureCounts
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|failures
return|;
block|}
DECL|method|copyFailed (TaskAttemptID mapId, MapHost host, boolean readError, boolean connectExcpt)
specifier|public
specifier|synchronized
name|void
name|copyFailed
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|,
name|MapHost
name|host
parameter_list|,
name|boolean
name|readError
parameter_list|,
name|boolean
name|connectExcpt
parameter_list|)
block|{
name|int
name|failures
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|failureCounts
operator|.
name|containsKey
argument_list|(
name|mapId
argument_list|)
condition|)
block|{
name|IntWritable
name|x
init|=
name|failureCounts
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|x
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|failures
operator|=
name|x
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|failureCounts
operator|.
name|put
argument_list|(
name|mapId
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|hostname
init|=
name|host
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|IntWritable
name|hostFailedNum
init|=
name|hostFailures
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
comment|// MAPREDUCE-6361: hostname could get cleanup from hostFailures in another
comment|// thread with copySucceeded.
comment|// In this case, add back hostname to hostFailures to get rid of NPE issue.
if|if
condition|(
name|hostFailedNum
operator|==
literal|null
condition|)
block|{
name|hostFailures
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//report failure if already retried maxHostFailures times
name|boolean
name|hostFail
init|=
name|hostFailures
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
operator|.
name|get
argument_list|()
operator|>
name|getMaxHostFailures
argument_list|()
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|failures
operator|>=
name|abortFailureLimit
condition|)
block|{
try|try
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|failures
operator|+
literal|" failures downloading "
operator|+
name|mapId
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|reporter
operator|.
name|reportException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|checkAndInformMRAppMaster
argument_list|(
name|failures
argument_list|,
name|mapId
argument_list|,
name|readError
argument_list|,
name|connectExcpt
argument_list|,
name|hostFail
argument_list|)
expr_stmt|;
name|checkReducerHealth
argument_list|()
expr_stmt|;
name|long
name|delay
init|=
call|(
name|long
call|)
argument_list|(
name|INITIAL_PENALTY
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|PENALTY_GROWTH_RATE
argument_list|,
name|failures
argument_list|)
argument_list|)
decl_stmt|;
name|penalize
argument_list|(
name|host
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|delay
argument_list|,
name|maxPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|failedShuffleCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ask the shuffle scheduler to penalize a given host for a given amount    * of time before it reassigns a new fetcher to fetch from the host.    * @param host The host to penalize.    * @param delay The time to wait for before retrying    */
DECL|method|penalize (MapHost host, long delay)
name|void
name|penalize
parameter_list|(
name|MapHost
name|host
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|host
operator|.
name|penalize
argument_list|()
expr_stmt|;
name|penalties
operator|.
name|add
argument_list|(
operator|new
name|Penalty
argument_list|(
name|host
argument_list|,
name|delay
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reportLocalError (IOException ioe)
specifier|public
name|void
name|reportLocalError
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle failed : local error on this node: "
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle failed : local error on this node"
argument_list|)
expr_stmt|;
block|}
name|reporter
operator|.
name|reportException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Notify the MRAppMaster
comment|// after every read error, if 'reportReadErrorImmediately' is true or
comment|// after every 'maxFetchFailuresBeforeReporting' failures
DECL|method|checkAndInformMRAppMaster ( int failures, TaskAttemptID mapId, boolean readError, boolean connectExcpt, boolean hostFailed)
specifier|private
name|void
name|checkAndInformMRAppMaster
parameter_list|(
name|int
name|failures
parameter_list|,
name|TaskAttemptID
name|mapId
parameter_list|,
name|boolean
name|readError
parameter_list|,
name|boolean
name|connectExcpt
parameter_list|,
name|boolean
name|hostFailed
parameter_list|)
block|{
if|if
condition|(
name|connectExcpt
operator|||
operator|(
name|reportReadErrorImmediately
operator|&&
name|readError
operator|)
operator|||
operator|(
operator|(
name|failures
operator|%
name|maxFetchFailuresBeforeReporting
operator|)
operator|==
literal|0
operator|)
operator|||
name|hostFailed
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reporting fetch failure for "
operator|+
name|mapId
operator|+
literal|" to MRAppMaster."
argument_list|)
expr_stmt|;
name|status
operator|.
name|addFetchFailedMap
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|)
name|mapId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkReducerHealth ()
specifier|private
name|void
name|checkReducerHealth
parameter_list|()
block|{
specifier|final
name|float
name|MAX_ALLOWED_FAILED_FETCH_ATTEMPT_PERCENT
init|=
literal|0.5f
decl_stmt|;
specifier|final
name|float
name|MIN_REQUIRED_PROGRESS_PERCENT
init|=
literal|0.5f
decl_stmt|;
specifier|final
name|float
name|MAX_ALLOWED_STALL_TIME_PERCENT
init|=
literal|0.5f
decl_stmt|;
name|long
name|totalFailures
init|=
name|failedShuffleCounter
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|doneMaps
init|=
name|totalMaps
operator|-
name|remainingMaps
decl_stmt|;
name|boolean
name|reducerHealthy
init|=
operator|(
operator|(
operator|(
name|float
operator|)
name|totalFailures
operator|/
operator|(
name|totalFailures
operator|+
name|doneMaps
operator|)
operator|)
operator|<
name|MAX_ALLOWED_FAILED_FETCH_ATTEMPT_PERCENT
operator|)
decl_stmt|;
comment|// check if the reducer has progressed enough
name|boolean
name|reducerProgressedEnough
init|=
operator|(
operator|(
operator|(
name|float
operator|)
name|doneMaps
operator|/
name|totalMaps
operator|)
operator|>=
name|MIN_REQUIRED_PROGRESS_PERCENT
operator|)
decl_stmt|;
comment|// check if the reducer is stalled for a long time
comment|// duration for which the reducer is stalled
name|int
name|stallDuration
init|=
call|(
name|int
call|)
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lastProgressTime
argument_list|)
decl_stmt|;
comment|// duration for which the reducer ran with progress
name|int
name|shuffleProgressDuration
init|=
call|(
name|int
call|)
argument_list|(
name|lastProgressTime
operator|-
name|startTime
argument_list|)
decl_stmt|;
comment|// min time the reducer should run without getting killed
name|int
name|minShuffleRunDuration
init|=
name|Math
operator|.
name|max
argument_list|(
name|shuffleProgressDuration
argument_list|,
name|maxMapRuntime
argument_list|)
decl_stmt|;
name|boolean
name|reducerStalled
init|=
operator|(
operator|(
operator|(
name|float
operator|)
name|stallDuration
operator|/
name|minShuffleRunDuration
operator|)
operator|>=
name|MAX_ALLOWED_STALL_TIME_PERCENT
operator|)
decl_stmt|;
comment|// kill if not healthy and has insufficient progress
if|if
condition|(
operator|(
name|failureCounts
operator|.
name|size
argument_list|()
operator|>=
name|maxFailedUniqueFetches
operator|||
name|failureCounts
operator|.
name|size
argument_list|()
operator|==
operator|(
name|totalMaps
operator|-
name|doneMaps
operator|)
operator|)
operator|&&
operator|!
name|reducerHealthy
operator|&&
operator|(
operator|!
name|reducerProgressedEnough
operator|||
name|reducerStalled
operator|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shuffle failed with too many fetch failures "
operator|+
literal|"and insufficient progress!"
argument_list|)
expr_stmt|;
name|String
name|errorMsg
init|=
literal|"Exceeded MAX_FAILED_UNIQUE_FETCHES; bailing-out."
decl_stmt|;
name|reporter
operator|.
name|reportException
argument_list|(
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tipFailed (TaskID taskId)
specifier|public
specifier|synchronized
name|void
name|tipFailed
parameter_list|(
name|TaskID
name|taskId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|finishedMaps
index|[
name|taskId
operator|.
name|getId
argument_list|()
index|]
condition|)
block|{
name|finishedMaps
index|[
name|taskId
operator|.
name|getId
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|--
name|remainingMaps
operator|==
literal|0
condition|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|updateStatus
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addKnownMapOutput (String hostName, String hostUrl, TaskAttemptID mapId)
specifier|public
specifier|synchronized
name|void
name|addKnownMapOutput
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|hostUrl
parameter_list|,
name|TaskAttemptID
name|mapId
parameter_list|)
block|{
name|MapHost
name|host
init|=
name|mapLocations
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
operator|new
name|MapHost
argument_list|(
name|hostName
argument_list|,
name|hostUrl
argument_list|)
expr_stmt|;
name|mapLocations
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
name|host
operator|.
name|addKnownMap
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
comment|// Mark the host as pending
if|if
condition|(
name|host
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|PENDING
condition|)
block|{
name|pendingHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|obsoleteMapOutput (TaskAttemptID mapId)
specifier|public
specifier|synchronized
name|void
name|obsoleteMapOutput
parameter_list|(
name|TaskAttemptID
name|mapId
parameter_list|)
block|{
name|obsoleteMaps
operator|.
name|add
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
block|}
DECL|method|putBackKnownMapOutput (MapHost host, TaskAttemptID mapId)
specifier|public
specifier|synchronized
name|void
name|putBackKnownMapOutput
parameter_list|(
name|MapHost
name|host
parameter_list|,
name|TaskAttemptID
name|mapId
parameter_list|)
block|{
name|host
operator|.
name|addKnownMap
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
specifier|synchronized
name|MapHost
name|getHost
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|pendingHosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|MapHost
argument_list|>
name|iter
init|=
name|pendingHosts
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Safe to take one because we know pendingHosts isn't empty
name|MapHost
name|host
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numToPick
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|pendingHosts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numToPick
condition|;
operator|++
name|i
control|)
block|{
name|host
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|pendingHosts
operator|.
name|remove
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|host
operator|.
name|markBusy
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning "
operator|+
name|host
operator|+
literal|" with "
operator|+
name|host
operator|.
name|getNumKnownMapOutputs
argument_list|()
operator|+
literal|" to "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SHUFFLE_START
operator|.
name|set
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|host
return|;
block|}
DECL|method|getMapsForHost (MapHost host)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|getMapsForHost
parameter_list|(
name|MapHost
name|host
parameter_list|)
block|{
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|list
init|=
name|host
operator|.
name|getAndClearKnownMaps
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|TaskAttemptID
argument_list|>
name|itr
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|includedMaps
init|=
literal|0
decl_stmt|;
name|int
name|totalSize
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// find the maps that we still need, up to the limit
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TaskAttemptID
name|id
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|obsoleteMaps
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|&&
operator|!
name|finishedMaps
index|[
name|id
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
index|]
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|includedMaps
operator|>=
name|MAX_MAPS_AT_ONCE
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// put back the maps left after the limit
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TaskAttemptID
name|id
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|obsoleteMaps
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|&&
operator|!
name|finishedMaps
index|[
name|id
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
index|]
condition|)
block|{
name|host
operator|.
name|addKnownMap
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assigned "
operator|+
name|includedMaps
operator|+
literal|" of "
operator|+
name|totalSize
operator|+
literal|" to "
operator|+
name|host
operator|+
literal|" to "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|freeHost (MapHost host)
specifier|public
specifier|synchronized
name|void
name|freeHost
parameter_list|(
name|MapHost
name|host
parameter_list|)
block|{
if|if
condition|(
name|host
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|PENALIZED
condition|)
block|{
if|if
condition|(
name|host
operator|.
name|markAvailable
argument_list|()
operator|==
name|State
operator|.
name|PENDING
condition|)
block|{
name|pendingHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|host
operator|+
literal|" freed by "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|SHUFFLE_START
operator|.
name|get
argument_list|()
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
DECL|method|resetKnownMaps ()
specifier|public
specifier|synchronized
name|void
name|resetKnownMaps
parameter_list|()
block|{
name|mapLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|obsoleteMaps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingHosts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait until the shuffle finishes or until the timeout.    * @param millis maximum wait time    * @return true if the shuffle is done    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|waitUntilDone (int millis )
specifier|public
specifier|synchronized
name|boolean
name|waitUntilDone
parameter_list|(
name|int
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|remainingMaps
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|millis
argument_list|)
expr_stmt|;
return|return
name|remainingMaps
operator|==
literal|0
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * A structure that records the penalty for a host.    */
DECL|class|Penalty
specifier|private
specifier|static
class|class
name|Penalty
implements|implements
name|Delayed
block|{
DECL|field|host
name|MapHost
name|host
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|Penalty (MapHost host, long delay)
name|Penalty
parameter_list|(
name|MapHost
name|host
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|delay
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|remainingTime
init|=
name|endTime
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
return|return
name|unit
operator|.
name|convert
argument_list|(
name|remainingTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Delayed o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
name|long
name|other
init|=
operator|(
operator|(
name|Penalty
operator|)
name|o
operator|)
operator|.
name|endTime
decl_stmt|;
return|return
name|endTime
operator|==
name|other
condition|?
literal|0
else|:
operator|(
name|endTime
operator|<
name|other
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
comment|/**    * A thread that takes hosts off of the penalty list when the timer expires.    */
DECL|class|Referee
specifier|private
class|class
name|Referee
extends|extends
name|Thread
block|{
DECL|method|Referee ()
specifier|public
name|Referee
parameter_list|()
block|{
name|setName
argument_list|(
literal|"ShufflePenaltyReferee"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// take the first host that has an expired penalty
name|MapHost
name|host
init|=
name|penalties
operator|.
name|take
argument_list|()
operator|.
name|host
decl_stmt|;
synchronized|synchronized
init|(
name|ShuffleSchedulerImpl
operator|.
name|this
init|)
block|{
if|if
condition|(
name|host
operator|.
name|markAvailable
argument_list|()
operator|==
name|MapHost
operator|.
name|State
operator|.
name|PENDING
condition|)
block|{
name|pendingHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|ShuffleSchedulerImpl
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|reporter
operator|.
name|reportException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|referee
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|referee
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|getMaxHostFailures ()
specifier|public
name|int
name|getMaxHostFailures
parameter_list|()
block|{
return|return
name|maxHostFailures
return|;
block|}
DECL|class|CopyTimeTracker
specifier|private
specifier|static
class|class
name|CopyTimeTracker
block|{
DECL|field|intervals
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
DECL|field|copyMillis
name|long
name|copyMillis
decl_stmt|;
DECL|method|CopyTimeTracker ()
specifier|public
name|CopyTimeTracker
parameter_list|()
block|{
name|intervals
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|copyMillis
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|add (long s, long e)
specifier|public
name|void
name|add
parameter_list|(
name|long
name|s
parameter_list|,
name|long
name|e
parameter_list|)
block|{
name|Interval
name|interval
init|=
operator|new
name|Interval
argument_list|(
name|s
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|copyMillis
operator|=
name|getTotalCopyMillis
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|method|getCopyMillis ()
specifier|public
name|long
name|getCopyMillis
parameter_list|()
block|{
return|return
name|copyMillis
return|;
block|}
comment|// This method captures the time during which any copy was in progress
comment|// each copy time period is record in the Interval list
DECL|method|getTotalCopyMillis (Interval newInterval)
specifier|private
name|long
name|getTotalCopyMillis
parameter_list|(
name|Interval
name|newInterval
parameter_list|)
block|{
if|if
condition|(
name|newInterval
operator|==
literal|null
condition|)
block|{
return|return
name|copyMillis
return|;
block|}
name|List
argument_list|<
name|Interval
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Interval
argument_list|>
argument_list|(
name|intervals
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Interval
name|interval
range|:
name|intervals
control|)
block|{
if|if
condition|(
name|interval
operator|.
name|end
operator|<
name|newInterval
operator|.
name|start
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interval
operator|.
name|start
operator|>
name|newInterval
operator|.
name|end
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|newInterval
argument_list|)
expr_stmt|;
name|newInterval
operator|=
name|interval
expr_stmt|;
block|}
else|else
block|{
name|newInterval
operator|=
operator|new
name|Interval
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|interval
operator|.
name|start
argument_list|,
name|newInterval
operator|.
name|start
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|newInterval
operator|.
name|end
argument_list|,
name|interval
operator|.
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|newInterval
argument_list|)
expr_stmt|;
name|intervals
operator|=
name|result
expr_stmt|;
comment|//compute total millis
name|long
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Interval
name|interval
range|:
name|intervals
control|)
block|{
name|length
operator|+=
name|interval
operator|.
name|getIntervalLength
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
DECL|class|Interval
specifier|private
specifier|static
class|class
name|Interval
block|{
DECL|field|start
specifier|final
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|final
name|long
name|end
decl_stmt|;
DECL|method|Interval (long s, long e)
specifier|public
name|Interval
parameter_list|(
name|long
name|s
parameter_list|,
name|long
name|e
parameter_list|)
block|{
name|start
operator|=
name|s
expr_stmt|;
name|end
operator|=
name|e
expr_stmt|;
block|}
DECL|method|getIntervalLength ()
specifier|public
name|long
name|getIntervalLength
parameter_list|()
block|{
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

