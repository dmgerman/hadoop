begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * Merger is an utility class used by the Map and Reduce tasks for merging  * both their memory and disk segments  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Merger
specifier|public
class|class
name|Merger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Merger
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Local directories
DECL|field|lDirAlloc
specifier|private
specifier|static
name|LocalDirAllocator
name|lDirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, CompressionCodec codec, Path[] inputs, boolean deleteInputs, int mergeFactor, Path tmpDir, RawComparator<K> comparator, Progressable reporter, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|Path
index|[]
name|inputs
parameter_list|,
name|boolean
name|deleteInputs
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|inputs
argument_list|,
name|deleteInputs
argument_list|,
name|codec
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
literal|null
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, CompressionCodec codec, Path[] inputs, boolean deleteInputs, int mergeFactor, Path tmpDir, RawComparator<K> comparator, Progressable reporter, Counters.Counter readsCounter, Counters.Counter writesCounter, Counters.Counter mergedMapOutputsCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|Path
index|[]
name|inputs
parameter_list|,
name|boolean
name|deleteInputs
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|inputs
argument_list|,
name|deleteInputs
argument_list|,
name|codec
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|mergedMapOutputsCounter
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, List<Segment<K, V>> segments, int mergeFactor, Path tmpDir, RawComparator<K> comparator, Progressable reporter, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|merge
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|segments
argument_list|,
name|mergeFactor
argument_list|,
name|tmpDir
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
literal|false
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, List<Segment<K, V>> segments, int mergeFactor, Path tmpDir, RawComparator<K> comparator, Progressable reporter, boolean sortSegments, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|sortSegments
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, CompressionCodec codec, List<Segment<K, V>> segments, int mergeFactor, Path tmpDir, RawComparator<K> comparator, Progressable reporter, boolean sortSegments, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|sortSegments
argument_list|,
name|codec
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, List<Segment<K, V>> segments, int mergeFactor, int inMemSegments, Path tmpDir, RawComparator<K> comparator, Progressable reporter, boolean sortSegments, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|int
name|inMemSegments
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|sortSegments
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|inMemSegments
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|merge (Configuration conf, FileSystem fs, Class<K> keyClass, Class<V> valueClass, CompressionCodec codec, List<Segment<K, V>> segments, int mergeFactor, int inMemSegments, Path tmpDir, RawComparator<K> comparator, Progressable reporter, boolean sortSegments, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|int
name|mergeFactor
parameter_list|,
name|int
name|inMemSegments
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MergeQueue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|sortSegments
argument_list|,
name|codec
argument_list|)
operator|.
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|mergeFactor
argument_list|,
name|inMemSegments
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
DECL|method|writeFile (RawKeyValueIterator records, Writer<K, V> writer, Progressable progressable, Configuration conf)
name|void
name|writeFile
parameter_list|(
name|RawKeyValueIterator
name|records
parameter_list|,
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
parameter_list|,
name|Progressable
name|progressable
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|progressBar
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|JobContext
operator|.
name|RECORDS_BEFORE_PROGRESS
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|long
name|recordCtr
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|records
operator|.
name|next
argument_list|()
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|records
operator|.
name|getKey
argument_list|()
argument_list|,
name|records
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|recordCtr
operator|++
operator|)
operator|%
name|progressBar
operator|)
operator|==
literal|0
condition|)
block|{
name|progressable
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Segment
specifier|public
specifier|static
class|class
name|Segment
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
block|{
DECL|field|reader
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
init|=
literal|null
decl_stmt|;
DECL|field|key
specifier|final
name|DataInputBuffer
name|key
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|file
name|Path
name|file
init|=
literal|null
decl_stmt|;
DECL|field|preserve
name|boolean
name|preserve
init|=
literal|false
decl_stmt|;
DECL|field|codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
DECL|field|segmentOffset
name|long
name|segmentOffset
init|=
literal|0
decl_stmt|;
DECL|field|segmentLength
name|long
name|segmentLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|rawDataLength
name|long
name|rawDataLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|mapOutputsCounter
name|Counters
operator|.
name|Counter
name|mapOutputsCounter
init|=
literal|null
decl_stmt|;
DECL|method|Segment (Configuration conf, FileSystem fs, Path file, CompressionCodec codec, boolean preserve)
specifier|public
name|Segment
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|boolean
name|preserve
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|preserve
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Segment (Configuration conf, FileSystem fs, Path file, CompressionCodec codec, boolean preserve, Counters.Counter mergedMapOutputsCounter)
specifier|public
name|Segment
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|boolean
name|preserve
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|codec
argument_list|,
name|preserve
argument_list|,
name|mergedMapOutputsCounter
argument_list|)
expr_stmt|;
block|}
DECL|method|Segment (Configuration conf, FileSystem fs, Path file, CompressionCodec codec, boolean preserve, Counters.Counter mergedMapOutputsCounter, long rawDataLength)
specifier|public
name|Segment
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|boolean
name|preserve
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|,
name|long
name|rawDataLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|codec
argument_list|,
name|preserve
argument_list|,
name|mergedMapOutputsCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawDataLength
operator|=
name|rawDataLength
expr_stmt|;
block|}
DECL|method|Segment (Configuration conf, FileSystem fs, Path file, long segmentOffset, long segmentLength, CompressionCodec codec, boolean preserve)
specifier|public
name|Segment
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|long
name|segmentOffset
parameter_list|,
name|long
name|segmentLength
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|boolean
name|preserve
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
name|segmentOffset
argument_list|,
name|segmentLength
argument_list|,
name|codec
argument_list|,
name|preserve
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Segment (Configuration conf, FileSystem fs, Path file, long segmentOffset, long segmentLength, CompressionCodec codec, boolean preserve, Counters.Counter mergedMapOutputsCounter)
specifier|public
name|Segment
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|long
name|segmentOffset
parameter_list|,
name|long
name|segmentLength
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|boolean
name|preserve
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|preserve
operator|=
name|preserve
expr_stmt|;
name|this
operator|.
name|segmentOffset
operator|=
name|segmentOffset
expr_stmt|;
name|this
operator|.
name|segmentLength
operator|=
name|segmentLength
expr_stmt|;
name|this
operator|.
name|mapOutputsCounter
operator|=
name|mergedMapOutputsCounter
expr_stmt|;
block|}
DECL|method|Segment (Reader<K, V> reader, boolean preserve)
specifier|public
name|Segment
parameter_list|(
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
parameter_list|,
name|boolean
name|preserve
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|preserve
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Segment (Reader<K, V> reader, boolean preserve, long rawDataLength)
specifier|public
name|Segment
parameter_list|(
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
parameter_list|,
name|boolean
name|preserve
parameter_list|,
name|long
name|rawDataLength
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|preserve
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawDataLength
operator|=
name|rawDataLength
expr_stmt|;
block|}
DECL|method|Segment (Reader<K, V> reader, boolean preserve, Counters.Counter mapOutputsCounter)
specifier|public
name|Segment
parameter_list|(
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
parameter_list|,
name|boolean
name|preserve
parameter_list|,
name|Counters
operator|.
name|Counter
name|mapOutputsCounter
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|preserve
operator|=
name|preserve
expr_stmt|;
name|this
operator|.
name|segmentLength
operator|=
name|reader
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapOutputsCounter
operator|=
name|mapOutputsCounter
expr_stmt|;
block|}
DECL|method|init (Counters.Counter readsCounter)
name|void
name|init
parameter_list|(
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|segmentOffset
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|in
argument_list|,
name|segmentLength
argument_list|,
name|codec
argument_list|,
name|readsCounter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapOutputsCounter
operator|!=
literal|null
condition|)
block|{
name|mapOutputsCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|inMemory ()
name|boolean
name|inMemory
parameter_list|()
block|{
return|return
name|fs
operator|==
literal|null
return|;
block|}
DECL|method|getKey ()
name|DataInputBuffer
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getValue (DataInputBuffer value)
name|DataInputBuffer
name|getValue
parameter_list|(
name|DataInputBuffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|nextRawValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
operator|(
name|reader
operator|==
literal|null
operator|)
condition|?
name|segmentLength
else|:
name|reader
operator|.
name|getLength
argument_list|()
return|;
block|}
DECL|method|getRawDataLength ()
specifier|public
name|long
name|getRawDataLength
parameter_list|()
block|{
return|return
operator|(
name|rawDataLength
operator|>
literal|0
operator|)
condition|?
name|rawDataLength
else|:
name|getLength
argument_list|()
return|;
block|}
DECL|method|nextRawKey ()
name|boolean
name|nextRawKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|nextRawKey
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|nextRawValue (DataInputBuffer value)
name|void
name|nextRawValue
parameter_list|(
name|DataInputBuffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|nextRawValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|closeReader ()
name|void
name|closeReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeReader
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|preserve
operator|&&
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPosition ()
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|getPosition
argument_list|()
return|;
block|}
comment|// This method is used by BackupStore to extract the
comment|// absolute position after a reset
DECL|method|getActualPosition ()
name|long
name|getActualPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|segmentOffset
operator|+
name|reader
operator|.
name|getPosition
argument_list|()
return|;
block|}
DECL|method|getReader ()
name|Reader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
comment|// This method is used by BackupStore to reinitialize the
comment|// reader to start reading from a different segment offset
DECL|method|reinitReader (int offset)
name|void
name|reinitReader
parameter_list|(
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inMemory
argument_list|()
condition|)
block|{
name|closeReader
argument_list|()
expr_stmt|;
name|segmentOffset
operator|=
name|offset
expr_stmt|;
name|segmentLength
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
operator|-
name|segmentOffset
expr_stmt|;
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Boolean variable for including/considering final merge as part of sort
comment|// phase or not. This is true in map task, false in reduce task. It is
comment|// used in calculating mergeProgress.
DECL|field|includeFinalMerge
specifier|static
name|boolean
name|includeFinalMerge
init|=
literal|false
decl_stmt|;
comment|/**    * Sets the boolean variable includeFinalMerge to true. Called from    * map task before calling merge() so that final merge of map task    * is also considered as part of sort phase.    */
DECL|method|considerFinalMergeForProgress ()
specifier|static
name|void
name|considerFinalMergeForProgress
parameter_list|()
block|{
name|includeFinalMerge
operator|=
literal|true
expr_stmt|;
block|}
DECL|class|MergeQueue
specifier|private
specifier|static
class|class
name|MergeQueue
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
extends|extends
name|PriorityQueue
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
implements|implements
name|RawKeyValueIterator
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
decl_stmt|;
DECL|field|codec
name|CompressionCodec
name|codec
decl_stmt|;
DECL|field|segments
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|comparator
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
decl_stmt|;
DECL|field|totalBytesProcessed
specifier|private
name|long
name|totalBytesProcessed
decl_stmt|;
DECL|field|progPerByte
specifier|private
name|float
name|progPerByte
decl_stmt|;
DECL|field|mergeProgress
specifier|private
name|Progress
name|mergeProgress
init|=
operator|new
name|Progress
argument_list|()
decl_stmt|;
DECL|field|reporter
name|Progressable
name|reporter
decl_stmt|;
DECL|field|key
name|DataInputBuffer
name|key
decl_stmt|;
DECL|field|value
specifier|final
name|DataInputBuffer
name|value
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|diskIFileValue
specifier|final
name|DataInputBuffer
name|diskIFileValue
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|minSegment
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|minSegment
decl_stmt|;
DECL|field|segmentComparator
name|Comparator
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segmentComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o1
parameter_list|,
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getLength
argument_list|()
operator|==
name|o2
operator|.
name|getLength
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|o1
operator|.
name|getLength
argument_list|()
operator|<
name|o2
operator|.
name|getLength
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
decl_stmt|;
DECL|method|MergeQueue (Configuration conf, FileSystem fs, Path[] inputs, boolean deleteInputs, CompressionCodec codec, RawComparator<K> comparator, Progressable reporter)
specifier|public
name|MergeQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
index|[]
name|inputs
parameter_list|,
name|boolean
name|deleteInputs
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|inputs
argument_list|,
name|deleteInputs
argument_list|,
name|codec
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MergeQueue (Configuration conf, FileSystem fs, Path[] inputs, boolean deleteInputs, CompressionCodec codec, RawComparator<K> comparator, Progressable reporter, Counters.Counter mergedMapOutputsCounter)
specifier|public
name|MergeQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
index|[]
name|inputs
parameter_list|,
name|boolean
name|deleteInputs
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|inputs
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MergeQ: adding: "
operator|+
name|file
argument_list|)
expr_stmt|;
name|segments
operator|.
name|add
argument_list|(
operator|new
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
operator|!
name|deleteInputs
argument_list|,
operator|(
name|file
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Task
operator|.
name|MERGED_OUTPUT_PREFIX
argument_list|)
condition|?
literal|null
else|:
name|mergedMapOutputsCounter
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Sort segments on file-lengths
name|Collections
operator|.
name|sort
argument_list|(
name|segments
argument_list|,
name|segmentComparator
argument_list|)
expr_stmt|;
block|}
DECL|method|MergeQueue (Configuration conf, FileSystem fs, List<Segment<K, V>> segments, RawComparator<K> comparator, Progressable reporter)
specifier|public
name|MergeQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|MergeQueue (Configuration conf, FileSystem fs, List<Segment<K, V>> segments, RawComparator<K> comparator, Progressable reporter, boolean sortSegments)
specifier|public
name|MergeQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|segments
operator|=
name|segments
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
if|if
condition|(
name|sortSegments
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|segments
argument_list|,
name|segmentComparator
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|MergeQueue (Configuration conf, FileSystem fs, List<Segment<K, V>> segments, RawComparator<K> comparator, Progressable reporter, boolean sortSegments, CompressionCodec codec)
specifier|public
name|MergeQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segments
parameter_list|,
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|,
name|Progressable
name|reporter
parameter_list|,
name|boolean
name|sortSegments
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|segments
argument_list|,
name|comparator
argument_list|,
name|reporter
argument_list|,
name|sortSegments
argument_list|)
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
decl_stmt|;
while|while
condition|(
operator|(
name|segment
operator|=
name|pop
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|segment
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getKey ()
specifier|public
name|DataInputBuffer
name|getKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|key
return|;
block|}
DECL|method|getValue ()
specifier|public
name|DataInputBuffer
name|getValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|value
return|;
block|}
DECL|method|adjustPriorityQueue (Segment<K, V> reader)
specifier|private
name|void
name|adjustPriorityQueue
parameter_list|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startPos
init|=
name|reader
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|reader
operator|.
name|nextRawKey
argument_list|()
decl_stmt|;
name|long
name|endPos
init|=
name|reader
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|totalBytesProcessed
operator|+=
name|endPos
operator|-
name|startPos
expr_stmt|;
name|mergeProgress
operator|.
name|set
argument_list|(
name|totalBytesProcessed
operator|*
name|progPerByte
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNext
condition|)
block|{
name|adjustTop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pop
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|minSegment
operator|!=
literal|null
condition|)
block|{
comment|//minSegment is non-null for all invocations of next except the first
comment|//one. For the first invocation, the priority queue is ready for use
comment|//but for the subsequent invocations, first adjust the queue
name|adjustPriorityQueue
argument_list|(
name|minSegment
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|minSegment
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|minSegment
operator|=
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|minSegment
operator|.
name|inMemory
argument_list|()
condition|)
block|{
comment|//When we load the value from an inmemory segment, we reset
comment|//the "value" DIB in this class to the inmem segment's byte[].
comment|//When we load the value bytes from disk, we shouldn't use
comment|//the same byte[] since it would corrupt the data in the inmem
comment|//segment. So we maintain an explicit DIB for value bytes
comment|//obtained from disk, and if the current segment is a disk
comment|//segment, we reset the "value" DIB to the byte[] in that (so
comment|//we reuse the disk segment DIB whenever we consider
comment|//a disk segment).
name|value
operator|.
name|reset
argument_list|(
name|diskIFileValue
operator|.
name|getData
argument_list|()
argument_list|,
name|diskIFileValue
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|startPos
init|=
name|minSegment
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|key
operator|=
name|minSegment
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|minSegment
operator|.
name|getValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|long
name|endPos
init|=
name|minSegment
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|totalBytesProcessed
operator|+=
name|endPos
operator|-
name|startPos
expr_stmt|;
name|mergeProgress
operator|.
name|set
argument_list|(
name|totalBytesProcessed
operator|*
name|progPerByte
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|lessThan (Object a, Object b)
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|DataInputBuffer
name|key1
init|=
operator|(
operator|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|a
operator|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|key2
init|=
operator|(
operator|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|b
operator|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|s1
init|=
name|key1
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|int
name|l1
init|=
name|key1
operator|.
name|getLength
argument_list|()
operator|-
name|s1
decl_stmt|;
name|int
name|s2
init|=
name|key2
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|int
name|l2
init|=
name|key2
operator|.
name|getLength
argument_list|()
operator|-
name|s2
decl_stmt|;
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|key1
operator|.
name|getData
argument_list|()
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|key2
operator|.
name|getData
argument_list|()
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|method|merge (Class<K> keyClass, Class<V> valueClass, int factor, Path tmpDir, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
specifier|public
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|int
name|factor
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|merge
argument_list|(
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|,
name|tmpDir
argument_list|,
name|readsCounter
argument_list|,
name|writesCounter
argument_list|,
name|mergePhase
argument_list|)
return|;
block|}
DECL|method|merge (Class<K> keyClass, Class<V> valueClass, int factor, int inMem, Path tmpDir, Counters.Counter readsCounter, Counters.Counter writesCounter, Progress mergePhase)
name|RawKeyValueIterator
name|merge
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|,
name|int
name|factor
parameter_list|,
name|int
name|inMem
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|Counters
operator|.
name|Counter
name|readsCounter
parameter_list|,
name|Counters
operator|.
name|Counter
name|writesCounter
parameter_list|,
name|Progress
name|mergePhase
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|segments
operator|.
name|size
argument_list|()
operator|+
literal|" sorted segments"
argument_list|)
expr_stmt|;
comment|/*        * If there are inMemory segments, then they come first in the segments        * list and then the sorted disk segments. Otherwise(if there are only        * disk segments), then they are sorted segments if there are more than        * factor segments in the segments list.        */
name|int
name|numSegments
init|=
name|segments
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|origFactor
init|=
name|factor
decl_stmt|;
name|int
name|passNo
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|mergePhase
operator|!=
literal|null
condition|)
block|{
name|mergeProgress
operator|=
name|mergePhase
expr_stmt|;
block|}
name|long
name|totalBytes
init|=
name|computeBytesInMerges
argument_list|(
name|factor
argument_list|,
name|inMem
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalBytes
operator|!=
literal|0
condition|)
block|{
name|progPerByte
operator|=
literal|1.0f
operator|/
operator|(
name|float
operator|)
name|totalBytes
expr_stmt|;
block|}
comment|//create the MergeStreams from the sorted map created in the constructor
comment|//and dump the final output to a file
do|do
block|{
comment|//get the factor for this pass of merge. We assume in-memory segments
comment|//are the first entries in the segment list and that the pass factor
comment|//doesn't apply to them
name|factor
operator|=
name|getPassFactor
argument_list|(
name|factor
argument_list|,
name|passNo
argument_list|,
name|numSegments
operator|-
name|inMem
argument_list|)
expr_stmt|;
if|if
condition|(
literal|1
operator|==
name|passNo
condition|)
block|{
name|factor
operator|+=
name|inMem
expr_stmt|;
block|}
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|segmentsToMerge
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|segmentsConsidered
init|=
literal|0
decl_stmt|;
name|int
name|numSegmentsToConsider
init|=
name|factor
decl_stmt|;
name|long
name|startBytes
init|=
literal|0
decl_stmt|;
comment|// starting bytes of segments of this merge
while|while
condition|(
literal|true
condition|)
block|{
comment|//extract the smallest 'factor' number of segments
comment|//Call cleanup on the empty segments (no key/value data)
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mStream
init|=
name|getSegmentDescriptors
argument_list|(
name|numSegmentsToConsider
argument_list|)
decl_stmt|;
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
range|:
name|mStream
control|)
block|{
comment|// Initialize the segment at the last possible moment;
comment|// this helps in ensuring we don't use buffers until we need them
name|segment
operator|.
name|init
argument_list|(
name|readsCounter
argument_list|)
expr_stmt|;
name|long
name|startPos
init|=
name|segment
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|segment
operator|.
name|nextRawKey
argument_list|()
decl_stmt|;
name|long
name|endPos
init|=
name|segment
operator|.
name|getPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNext
condition|)
block|{
name|startBytes
operator|+=
name|endPos
operator|-
name|startPos
expr_stmt|;
name|segmentsToMerge
operator|.
name|add
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|segmentsConsidered
operator|++
expr_stmt|;
block|}
else|else
block|{
name|segment
operator|.
name|close
argument_list|()
expr_stmt|;
name|numSegments
operator|--
expr_stmt|;
comment|//we ignore this segment for the merge
block|}
block|}
comment|//if we have the desired number of segments
comment|//or looked at all available segments, we break
if|if
condition|(
name|segmentsConsidered
operator|==
name|factor
operator|||
name|segments
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|numSegmentsToConsider
operator|=
name|factor
operator|-
name|segmentsConsidered
expr_stmt|;
block|}
comment|//feed the streams to the priority queue
name|initialize
argument_list|(
name|segmentsToMerge
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
range|:
name|segmentsToMerge
control|)
block|{
name|put
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
comment|//if we have lesser number of segments remaining, then just return the
comment|//iterator, else do another single level merge
if|if
condition|(
name|numSegments
operator|<=
name|factor
condition|)
block|{
if|if
condition|(
operator|!
name|includeFinalMerge
condition|)
block|{
comment|// for reduce task
comment|// Reset totalBytesProcessed and recalculate totalBytes from the
comment|// remaining segments to track the progress of the final merge.
comment|// Final merge is considered as the progress of the reducePhase,
comment|// the 3rd phase of reduce task.
name|totalBytesProcessed
operator|=
literal|0
expr_stmt|;
name|totalBytes
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segmentsToMerge
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|totalBytes
operator|+=
name|segmentsToMerge
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRawDataLength
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|totalBytes
operator|!=
literal|0
condition|)
comment|//being paranoid
name|progPerByte
operator|=
literal|1.0f
operator|/
operator|(
name|float
operator|)
name|totalBytes
expr_stmt|;
name|totalBytesProcessed
operator|+=
name|startBytes
expr_stmt|;
if|if
condition|(
name|totalBytes
operator|!=
literal|0
condition|)
name|mergeProgress
operator|.
name|set
argument_list|(
name|totalBytesProcessed
operator|*
name|progPerByte
argument_list|)
expr_stmt|;
else|else
name|mergeProgress
operator|.
name|set
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Last pass and no segments left - we're done
name|LOG
operator|.
name|info
argument_list|(
literal|"Down to the last merge-pass, with "
operator|+
name|numSegments
operator|+
literal|" segments left of total size: "
operator|+
operator|(
name|totalBytes
operator|-
name|totalBytesProcessed
operator|)
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|segmentsToMerge
operator|.
name|size
argument_list|()
operator|+
literal|" intermediate segments out of a total of "
operator|+
operator|(
name|segments
operator|.
name|size
argument_list|()
operator|+
name|segmentsToMerge
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|bytesProcessedInPrevMerges
init|=
name|totalBytesProcessed
decl_stmt|;
name|totalBytesProcessed
operator|+=
name|startBytes
expr_stmt|;
comment|//we want to spread the creation of temp files on multiple disks if
comment|//available under the space constraints
name|long
name|approxOutputSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
range|:
name|segmentsToMerge
control|)
block|{
name|approxOutputSize
operator|+=
name|s
operator|.
name|getLength
argument_list|()
operator|+
name|ChecksumFileSystem
operator|.
name|getApproxChkSumLength
argument_list|(
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|tmpFilename
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"intermediate"
argument_list|)
operator|.
name|suffix
argument_list|(
literal|"."
operator|+
name|passNo
argument_list|)
decl_stmt|;
name|Path
name|outputFile
init|=
name|lDirAlloc
operator|.
name|getLocalPathForWrite
argument_list|(
name|tmpFilename
operator|.
name|toString
argument_list|()
argument_list|,
name|approxOutputSize
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
init|=
operator|new
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|outputFile
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|codec
argument_list|,
name|writesCounter
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|this
argument_list|,
name|writer
argument_list|,
name|reporter
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//we finished one single level merge; now clean up the priority
comment|//queue
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add the newly create segment to the list of segments to be merged
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tempSegment
init|=
operator|new
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|outputFile
argument_list|,
name|codec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Insert new merged segment into the sorted list
name|int
name|pos
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|segments
argument_list|,
name|tempSegment
argument_list|,
name|segmentComparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
comment|// binary search failed. So position to be inserted at is -pos-1
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
name|segments
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|tempSegment
argument_list|)
expr_stmt|;
name|numSegments
operator|=
name|segments
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Subtract the difference between expected size of new segment and
comment|// actual size of new segment(Expected size of new segment is
comment|// inputBytesOfThisMerge) from totalBytes. Expected size and actual
comment|// size will match(almost) if combiner is not called in merge.
name|long
name|inputBytesOfThisMerge
init|=
name|totalBytesProcessed
operator|-
name|bytesProcessedInPrevMerges
decl_stmt|;
name|totalBytes
operator|-=
name|inputBytesOfThisMerge
operator|-
name|tempSegment
operator|.
name|getRawDataLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalBytes
operator|!=
literal|0
condition|)
block|{
name|progPerByte
operator|=
literal|1.0f
operator|/
operator|(
name|float
operator|)
name|totalBytes
expr_stmt|;
block|}
name|passNo
operator|++
expr_stmt|;
block|}
comment|//we are worried about only the first pass merge factor. So reset the
comment|//factor to what it originally was
name|factor
operator|=
name|origFactor
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
comment|/**      * Determine the number of segments to merge in a given pass. Assuming more      * than factor segments, the first pass should attempt to bring the total      * number of segments - 1 to be divisible by the factor - 1 (each pass      * takes X segments and produces 1) to minimize the number of merges.      */
DECL|method|getPassFactor (int factor, int passNo, int numSegments)
specifier|private
name|int
name|getPassFactor
parameter_list|(
name|int
name|factor
parameter_list|,
name|int
name|passNo
parameter_list|,
name|int
name|numSegments
parameter_list|)
block|{
if|if
condition|(
name|passNo
operator|>
literal|1
operator|||
name|numSegments
operator|<=
name|factor
operator|||
name|factor
operator|==
literal|1
condition|)
return|return
name|factor
return|;
name|int
name|mod
init|=
operator|(
name|numSegments
operator|-
literal|1
operator|)
operator|%
operator|(
name|factor
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
condition|)
return|return
name|factor
return|;
return|return
name|mod
operator|+
literal|1
return|;
block|}
comment|/** Return (& remove) the requested number of segment descriptors from the      * sorted map.      */
DECL|method|getSegmentDescriptors (int numDescriptors)
specifier|private
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getSegmentDescriptors
parameter_list|(
name|int
name|numDescriptors
parameter_list|)
block|{
if|if
condition|(
name|numDescriptors
operator|>
name|segments
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|subList
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|segments
argument_list|)
decl_stmt|;
name|segments
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|subList
return|;
block|}
name|List
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|subList
init|=
operator|new
name|ArrayList
argument_list|<
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|segments
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numDescriptors
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDescriptors
condition|;
operator|++
name|i
control|)
block|{
name|segments
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|subList
return|;
block|}
comment|/**      * Compute expected size of input bytes to merges, will be used in      * calculating mergeProgress. This simulates the above merge() method and      * tries to obtain the number of bytes that are going to be merged in all      * merges(assuming that there is no combiner called while merging).      * @param factor mapreduce.task.io.sort.factor      * @param inMem  number of segments in memory to be merged      */
DECL|method|computeBytesInMerges (int factor, int inMem)
name|long
name|computeBytesInMerges
parameter_list|(
name|int
name|factor
parameter_list|,
name|int
name|inMem
parameter_list|)
block|{
name|int
name|numSegments
init|=
name|segments
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|segmentSizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|numSegments
argument_list|)
decl_stmt|;
name|long
name|totalBytes
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|numSegments
operator|-
name|inMem
decl_stmt|;
comment|// factor for 1st pass
name|int
name|f
init|=
name|getPassFactor
argument_list|(
name|factor
argument_list|,
literal|1
argument_list|,
name|n
argument_list|)
operator|+
name|inMem
decl_stmt|;
name|n
operator|=
name|numSegments
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
comment|// Not handling empty segments here assuming that it would not affect
comment|// much in calculation of mergeProgress.
name|segmentSizes
operator|.
name|add
argument_list|(
name|segments
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRawDataLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If includeFinalMerge is true, allow the following while loop iterate
comment|// for 1 more iteration. This is to include final merge as part of the
comment|// computation of expected input bytes of merges
name|boolean
name|considerFinalMerge
init|=
name|includeFinalMerge
decl_stmt|;
while|while
condition|(
name|n
operator|>
name|f
operator|||
name|considerFinalMerge
condition|)
block|{
if|if
condition|(
name|n
operator|<=
name|f
condition|)
block|{
name|considerFinalMerge
operator|=
literal|false
expr_stmt|;
block|}
name|long
name|mergedSize
init|=
literal|0
decl_stmt|;
name|f
operator|=
name|Math
operator|.
name|min
argument_list|(
name|f
argument_list|,
name|segmentSizes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|f
condition|;
name|j
operator|++
control|)
block|{
name|mergedSize
operator|+=
name|segmentSizes
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|totalBytes
operator|+=
name|mergedSize
expr_stmt|;
comment|// insert new size into the sorted list
name|int
name|pos
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|segmentSizes
argument_list|,
name|mergedSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
name|segmentSizes
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|mergedSize
argument_list|)
expr_stmt|;
name|n
operator|-=
operator|(
name|f
operator|-
literal|1
operator|)
expr_stmt|;
name|f
operator|=
name|factor
expr_stmt|;
block|}
return|return
name|totalBytes
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
name|mergeProgress
return|;
block|}
block|}
block|}
end_class

end_unit

