begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.split
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_comment
comment|/**  * A utility that reads the split meta info and creates  * split meta info objects  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|SplitMetaInfoReader
specifier|public
class|class
name|SplitMetaInfoReader
block|{
DECL|method|readSplitMetaInfo ( JobID jobId, FileSystem fs, Configuration conf, Path jobSubmitDir)
specifier|public
specifier|static
name|JobSplit
operator|.
name|TaskSplitMetaInfo
index|[]
name|readSplitMetaInfo
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|jobSubmitDir
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|maxMetaInfoSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|SPLIT_METAINFO_MAXSIZE
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SPLIT_METAINFO_MAXSIZE
argument_list|)
decl_stmt|;
name|Path
name|metaSplitFile
init|=
name|JobSubmissionFiles
operator|.
name|getJobSplitMetaFile
argument_list|(
name|jobSubmitDir
argument_list|)
decl_stmt|;
name|String
name|jobSplitFile
init|=
name|JobSubmissionFiles
operator|.
name|getJobSplitFile
argument_list|(
name|jobSubmitDir
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileStatus
name|fStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|metaSplitFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxMetaInfoSize
operator|>
literal|0
operator|&&
name|fStatus
operator|.
name|getLen
argument_list|()
operator|>
name|maxMetaInfoSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Split metadata size exceeded "
operator|+
name|maxMetaInfoSize
operator|+
literal|". Aborting job "
operator|+
name|jobId
argument_list|)
throw|;
block|}
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|metaSplitFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|JobSplit
operator|.
name|META_SPLIT_FILE_HEADER
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|JobSplit
operator|.
name|META_SPLIT_FILE_HEADER
argument_list|,
name|header
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid header on split file"
argument_list|)
throw|;
block|}
name|int
name|vers
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|vers
operator|!=
name|JobSplit
operator|.
name|META_SPLIT_VERSION
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported split version "
operator|+
name|vers
argument_list|)
throw|;
block|}
name|int
name|numSplits
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|//TODO: check for insane values
name|JobSplit
operator|.
name|TaskSplitMetaInfo
index|[]
name|allSplitMetaInfo
init|=
operator|new
name|JobSplit
operator|.
name|TaskSplitMetaInfo
index|[
name|numSplits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
name|i
operator|++
control|)
block|{
name|JobSplit
operator|.
name|SplitMetaInfo
name|splitMetaInfo
init|=
operator|new
name|JobSplit
operator|.
name|SplitMetaInfo
argument_list|()
decl_stmt|;
name|splitMetaInfo
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|JobSplit
operator|.
name|TaskSplitIndex
name|splitIndex
init|=
operator|new
name|JobSplit
operator|.
name|TaskSplitIndex
argument_list|(
name|jobSplitFile
argument_list|,
name|splitMetaInfo
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
name|allSplitMetaInfo
index|[
name|i
index|]
operator|=
operator|new
name|JobSplit
operator|.
name|TaskSplitMetaInfo
argument_list|(
name|splitIndex
argument_list|,
name|splitMetaInfo
operator|.
name|getLocations
argument_list|()
argument_list|,
name|splitMetaInfo
operator|.
name|getInputDataLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|allSplitMetaInfo
return|;
block|}
block|}
end_class

end_unit

