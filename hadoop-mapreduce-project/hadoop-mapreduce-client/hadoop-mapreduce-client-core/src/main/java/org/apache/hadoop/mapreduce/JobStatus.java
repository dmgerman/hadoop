begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_comment
comment|/**************************************************  * Describes the current status of a job.  **************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JobStatus
specifier|public
class|class
name|JobStatus
implements|implements
name|Writable
implements|,
name|Cloneable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|JobStatus
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|JobStatus
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Current state of the job     */
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
DECL|enumConstant|RUNNING
name|RUNNING
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|SUCCEEDED
name|SUCCEEDED
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|FAILED
name|FAILED
argument_list|(
literal|3
argument_list|)
block|,
DECL|enumConstant|PREP
name|PREP
argument_list|(
literal|4
argument_list|)
block|,
DECL|enumConstant|KILLED
name|KILLED
argument_list|(
literal|5
argument_list|)
block|;
DECL|field|value
name|int
name|value
decl_stmt|;
DECL|method|State (int value)
name|State
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
empty_stmt|;
DECL|field|jobid
specifier|private
name|JobID
name|jobid
decl_stmt|;
DECL|field|mapProgress
specifier|private
name|float
name|mapProgress
decl_stmt|;
DECL|field|reduceProgress
specifier|private
name|float
name|reduceProgress
decl_stmt|;
DECL|field|cleanupProgress
specifier|private
name|float
name|cleanupProgress
decl_stmt|;
DECL|field|setupProgress
specifier|private
name|float
name|setupProgress
decl_stmt|;
DECL|field|runState
specifier|private
name|State
name|runState
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
DECL|field|priority
specifier|private
name|JobPriority
name|priority
decl_stmt|;
DECL|field|schedulingInfo
specifier|private
name|String
name|schedulingInfo
init|=
literal|"NA"
decl_stmt|;
DECL|field|failureInfo
specifier|private
name|String
name|failureInfo
init|=
literal|"NA"
decl_stmt|;
DECL|field|jobACLs
specifier|private
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobName
specifier|private
name|String
name|jobName
decl_stmt|;
DECL|field|jobFile
specifier|private
name|String
name|jobFile
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|isRetired
specifier|private
name|boolean
name|isRetired
decl_stmt|;
DECL|field|historyFile
specifier|private
name|String
name|historyFile
init|=
literal|""
decl_stmt|;
DECL|field|trackingUrl
specifier|private
name|String
name|trackingUrl
init|=
literal|""
decl_stmt|;
DECL|field|numUsedSlots
specifier|private
name|int
name|numUsedSlots
decl_stmt|;
DECL|field|numReservedSlots
specifier|private
name|int
name|numReservedSlots
decl_stmt|;
DECL|field|usedMem
specifier|private
name|int
name|usedMem
decl_stmt|;
DECL|field|reservedMem
specifier|private
name|int
name|reservedMem
decl_stmt|;
DECL|field|neededMem
specifier|private
name|int
name|neededMem
decl_stmt|;
DECL|field|isUber
specifier|private
name|boolean
name|isUber
decl_stmt|;
comment|/**    */
DECL|method|JobStatus ()
specifier|public
name|JobStatus
parameter_list|()
block|{   }
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param setupProgress The progress made on the setup    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param cleanupProgress The progress made on the cleanup    * @param runState The current state of the job    * @param jp Priority of the job.    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param jobFile job configuration file.    * @param trackingUrl link to the web-ui for details of the job.    */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, State runState, JobPriority jp, String user, String jobName, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|State
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
literal|"default"
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**     * Create a job status object for a given jobid.     * @param jobid The jobid of the job     * @param setupProgress The progress made on the setup     * @param mapProgress The progress made on the maps     * @param reduceProgress The progress made on the reduces     * @param cleanupProgress The progress made on the cleanup     * @param runState The current state of the job     * @param jp Priority of the job.     * @param user userid of the person who submitted the job.     * @param jobName user-specified job name.     * @param queue queue name     * @param jobFile job configuration file.     * @param trackingUrl link to the web-ui for details of the job.     */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, State runState, JobPriority jp, String user, String jobName, String queue, String jobFile, String trackingUrl)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|State
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|queue
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a job status object for a given jobid.    * @param jobid The jobid of the job    * @param setupProgress The progress made on the setup    * @param mapProgress The progress made on the maps    * @param reduceProgress The progress made on the reduces    * @param cleanupProgress The progress made on the cleanup    * @param runState The current state of the job    * @param jp Priority of the job.    * @param user userid of the person who submitted the job.    * @param jobName user-specified job name.    * @param queue queue name    * @param jobFile job configuration file.    * @param trackingUrl link to the web-ui for details of the job.    * @param isUber Whether job running in uber mode    */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, State runState, JobPriority jp, String user, String jobName, String queue, String jobFile, String trackingUrl, boolean isUber)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|State
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|isUber
parameter_list|)
block|{
name|this
argument_list|(
name|jobid
argument_list|,
name|setupProgress
argument_list|,
name|mapProgress
argument_list|,
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|runState
argument_list|,
name|jp
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|queue
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|,
name|isUber
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**   * Create a job status object for a given jobid.   * @param jobid The jobid of the job   * @param setupProgress The progress made on the setup   * @param mapProgress The progress made on the maps   * @param reduceProgress The progress made on the reduces   * @param cleanupProgress The progress made on the cleanup   * @param runState The current state of the job   * @param jp Priority of the job.   * @param user userid of the person who submitted the job.   * @param jobName user-specified job name.   * @param queue queue name   * @param jobFile job configuration file.   * @param trackingUrl link to the web-ui for details of the job.   * @param isUber Whether job running in uber mode   * @param historyFile history file   */
DECL|method|JobStatus (JobID jobid, float setupProgress, float mapProgress, float reduceProgress, float cleanupProgress, State runState, JobPriority jp, String user, String jobName, String queue, String jobFile, String trackingUrl, boolean isUber, String historyFile)
specifier|public
name|JobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|float
name|setupProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|cleanupProgress
parameter_list|,
name|State
name|runState
parameter_list|,
name|JobPriority
name|jp
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|jobFile
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|isUber
parameter_list|,
name|String
name|historyFile
parameter_list|)
block|{
name|this
operator|.
name|jobid
operator|=
name|jobid
expr_stmt|;
name|this
operator|.
name|setupProgress
operator|=
name|setupProgress
expr_stmt|;
name|this
operator|.
name|mapProgress
operator|=
name|mapProgress
expr_stmt|;
name|this
operator|.
name|reduceProgress
operator|=
name|reduceProgress
expr_stmt|;
name|this
operator|.
name|cleanupProgress
operator|=
name|cleanupProgress
expr_stmt|;
name|this
operator|.
name|runState
operator|=
name|runState
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Job Priority cannot be null."
argument_list|)
throw|;
block|}
name|priority
operator|=
name|jp
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
name|this
operator|.
name|jobFile
operator|=
name|jobFile
expr_stmt|;
name|this
operator|.
name|trackingUrl
operator|=
name|trackingUrl
expr_stmt|;
name|this
operator|.
name|isUber
operator|=
name|isUber
expr_stmt|;
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
block|}
comment|/**    * Sets the map progress of this job    * @param p The value of map progress to set to    */
DECL|method|setMapProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setMapProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|this
operator|.
name|mapProgress
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the cleanup progress of this job    * @param p The value of cleanup progress to set to    */
DECL|method|setCleanupProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setCleanupProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|this
operator|.
name|cleanupProgress
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the setup progress of this job    * @param p The value of setup progress to set to    */
DECL|method|setSetupProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setSetupProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|this
operator|.
name|setupProgress
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the reduce progress of this Job    * @param p The value of reduce progress to set to    */
DECL|method|setReduceProgress (float p)
specifier|protected
specifier|synchronized
name|void
name|setReduceProgress
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|this
operator|.
name|reduceProgress
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the priority of the job, defaulting to NORMAL.    * @param jp new job priority    */
DECL|method|setPriority (JobPriority jp)
specifier|protected
specifier|synchronized
name|void
name|setPriority
parameter_list|(
name|JobPriority
name|jp
parameter_list|)
block|{
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Job priority cannot be null."
argument_list|)
throw|;
block|}
name|priority
operator|=
name|jp
expr_stmt|;
block|}
comment|/**     * Set the finish time of the job    * @param finishTime The finishTime of the job    */
DECL|method|setFinishTime (long finishTime)
specifier|protected
specifier|synchronized
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
block|}
comment|/**    * Set the job history file url for a completed job    */
DECL|method|setHistoryFile (String historyFile)
specifier|protected
specifier|synchronized
name|void
name|setHistoryFile
parameter_list|(
name|String
name|historyFile
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
block|}
comment|/**    * Set the link to the web-ui for details of the job.    */
DECL|method|setTrackingUrl (String trackingUrl)
specifier|protected
specifier|synchronized
name|void
name|setTrackingUrl
parameter_list|(
name|String
name|trackingUrl
parameter_list|)
block|{
name|this
operator|.
name|trackingUrl
operator|=
name|trackingUrl
expr_stmt|;
block|}
comment|/**    * Set the job retire flag to true.    */
DECL|method|setRetired ()
specifier|protected
specifier|synchronized
name|void
name|setRetired
parameter_list|()
block|{
name|this
operator|.
name|isRetired
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Change the current run state of the job.    */
DECL|method|setState (State state)
specifier|protected
specifier|synchronized
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|runState
operator|=
name|state
expr_stmt|;
block|}
comment|/**     * Set the start time of the job    * @param startTime The startTime of the job    */
DECL|method|setStartTime (long startTime)
specifier|protected
specifier|synchronized
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
comment|/**    * @param userName The username of the job    */
DECL|method|setUsername (String userName)
specifier|protected
specifier|synchronized
name|void
name|setUsername
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|userName
expr_stmt|;
block|}
comment|/**    * Used to set the scheduling information associated to a particular Job.    *     * @param schedulingInfo Scheduling information of the job    */
DECL|method|setSchedulingInfo (String schedulingInfo)
specifier|protected
specifier|synchronized
name|void
name|setSchedulingInfo
parameter_list|(
name|String
name|schedulingInfo
parameter_list|)
block|{
name|this
operator|.
name|schedulingInfo
operator|=
name|schedulingInfo
expr_stmt|;
block|}
comment|/**    * Set the job acls.    *     * @param acls {@link Map} from {@link JobACL} to {@link AccessControlList}    */
DECL|method|setJobACLs (Map<JobACL, AccessControlList> acls)
specifier|protected
specifier|synchronized
name|void
name|setJobACLs
parameter_list|(
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
parameter_list|)
block|{
name|this
operator|.
name|jobACLs
operator|=
name|acls
expr_stmt|;
block|}
comment|/**    * Set queue name    * @param queue queue name    */
DECL|method|setQueue (String queue)
specifier|protected
specifier|synchronized
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
comment|/**    * Set diagnostic information.    * @param failureInfo diagnostic information    */
DECL|method|setFailureInfo (String failureInfo)
specifier|protected
specifier|synchronized
name|void
name|setFailureInfo
parameter_list|(
name|String
name|failureInfo
parameter_list|)
block|{
name|this
operator|.
name|failureInfo
operator|=
name|failureInfo
expr_stmt|;
block|}
comment|/**    * Get queue name    * @return queue name    */
DECL|method|getQueue ()
specifier|public
specifier|synchronized
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
comment|/**    * @return Percentage of progress in maps     */
DECL|method|getMapProgress ()
specifier|public
specifier|synchronized
name|float
name|getMapProgress
parameter_list|()
block|{
return|return
name|mapProgress
return|;
block|}
comment|/**    * @return Percentage of progress in cleanup     */
DECL|method|getCleanupProgress ()
specifier|public
specifier|synchronized
name|float
name|getCleanupProgress
parameter_list|()
block|{
return|return
name|cleanupProgress
return|;
block|}
comment|/**    * @return Percentage of progress in setup     */
DECL|method|getSetupProgress ()
specifier|public
specifier|synchronized
name|float
name|getSetupProgress
parameter_list|()
block|{
return|return
name|setupProgress
return|;
block|}
comment|/**    * @return Percentage of progress in reduce     */
DECL|method|getReduceProgress ()
specifier|public
specifier|synchronized
name|float
name|getReduceProgress
parameter_list|()
block|{
return|return
name|reduceProgress
return|;
block|}
comment|/**    * @return running state of the job    */
DECL|method|getState ()
specifier|public
specifier|synchronized
name|State
name|getState
parameter_list|()
block|{
return|return
name|runState
return|;
block|}
comment|/**    * @return start time of the job    */
DECL|method|getStartTime ()
specifier|synchronized
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|cnse
parameter_list|)
block|{
comment|// Shouldn't happen since we do implement Clonable
throw|throw
operator|new
name|InternalError
argument_list|(
name|cnse
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return The jobid of the Job    */
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|jobid
return|;
block|}
comment|/**    * @return the username of the job    */
DECL|method|getUsername ()
specifier|public
specifier|synchronized
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
comment|/**    * Gets the Scheduling information associated to a particular Job.    * @return the scheduling information of the job    */
DECL|method|getSchedulingInfo ()
specifier|public
specifier|synchronized
name|String
name|getSchedulingInfo
parameter_list|()
block|{
return|return
name|schedulingInfo
return|;
block|}
comment|/**    * Get the job acls.    *     * @return a {@link Map} from {@link JobACL} to {@link AccessControlList}    */
DECL|method|getJobACLs ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
name|jobACLs
return|;
block|}
comment|/**    * Return the priority of the job    * @return job priority    */
DECL|method|getPriority ()
specifier|public
specifier|synchronized
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
comment|/**     * Gets any available info on the reason of failure of the job.     * @return diagnostic information on why a job might have failed.     */
DECL|method|getFailureInfo ()
specifier|public
specifier|synchronized
name|String
name|getFailureInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|failureInfo
return|;
block|}
comment|/**    * Returns true if the status is for a completed job.    */
DECL|method|isJobComplete ()
specifier|public
specifier|synchronized
name|boolean
name|isJobComplete
parameter_list|()
block|{
return|return
operator|(
name|runState
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|||
name|runState
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
operator|||
name|runState
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
operator|)
return|;
block|}
comment|///////////////////////////////////////
comment|// Writable
comment|///////////////////////////////////////
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|jobid
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|setupProgress
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|mapProgress
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|reduceProgress
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|cleanupProgress
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|runState
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|schedulingInfo
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isRetired
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|historyFile
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|trackingUrl
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
comment|// Serialize the job's ACLs
name|out
operator|.
name|writeInt
argument_list|(
name|jobACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|entry
range|:
name|jobACLs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jobid
operator|=
operator|new
name|JobID
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobid
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|setupProgress
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapProgress
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|this
operator|.
name|reduceProgress
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|this
operator|.
name|cleanupProgress
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|this
operator|.
name|runState
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|State
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|JobPriority
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|schedulingInfo
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|isRetired
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|historyFile
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|trackingUrl
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobFile
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|isUber
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// De-serialize the job's ACLs
name|int
name|numACLs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numACLs
condition|;
name|i
operator|++
control|)
block|{
name|JobACL
name|aclType
init|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|JobACL
operator|.
name|class
argument_list|)
decl_stmt|;
name|AccessControlList
name|acl
init|=
operator|new
name|AccessControlList
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|acl
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobACLs
operator|.
name|put
argument_list|(
name|aclType
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the user-specified job name.    */
DECL|method|getJobName ()
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
comment|/**    * Get the configuration file for the job.    */
DECL|method|getJobFile ()
specifier|public
name|String
name|getJobFile
parameter_list|()
block|{
return|return
name|jobFile
return|;
block|}
comment|/**    * Get the link to the web-ui for details of the job.    */
DECL|method|getTrackingUrl ()
specifier|public
specifier|synchronized
name|String
name|getTrackingUrl
parameter_list|()
block|{
return|return
name|trackingUrl
return|;
block|}
comment|/**    * Get the finish time of the job.    */
DECL|method|getFinishTime ()
specifier|public
specifier|synchronized
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
comment|/**    * Check whether the job has retired.    */
DECL|method|isRetired ()
specifier|public
specifier|synchronized
name|boolean
name|isRetired
parameter_list|()
block|{
return|return
name|isRetired
return|;
block|}
comment|/**    * @return the job history file name for a completed job. If job is not     * completed or history file not available then return null.    */
DECL|method|getHistoryFile ()
specifier|public
specifier|synchronized
name|String
name|getHistoryFile
parameter_list|()
block|{
return|return
name|historyFile
return|;
block|}
comment|/**    * @return number of used mapred slots    */
DECL|method|getNumUsedSlots ()
specifier|public
name|int
name|getNumUsedSlots
parameter_list|()
block|{
return|return
name|numUsedSlots
return|;
block|}
comment|/**    * @param n number of used mapred slots    */
DECL|method|setNumUsedSlots (int n)
specifier|public
name|void
name|setNumUsedSlots
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|numUsedSlots
operator|=
name|n
expr_stmt|;
block|}
comment|/**    * @return the number of reserved slots    */
DECL|method|getNumReservedSlots ()
specifier|public
name|int
name|getNumReservedSlots
parameter_list|()
block|{
return|return
name|numReservedSlots
return|;
block|}
comment|/**    * @param n the number of reserved slots    */
DECL|method|setNumReservedSlots (int n)
specifier|public
name|void
name|setNumReservedSlots
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|numReservedSlots
operator|=
name|n
expr_stmt|;
block|}
comment|/**    * @return the used memory    */
DECL|method|getUsedMem ()
specifier|public
name|int
name|getUsedMem
parameter_list|()
block|{
return|return
name|usedMem
return|;
block|}
comment|/**    * @param m the used memory    */
DECL|method|setUsedMem (int m)
specifier|public
name|void
name|setUsedMem
parameter_list|(
name|int
name|m
parameter_list|)
block|{
name|this
operator|.
name|usedMem
operator|=
name|m
expr_stmt|;
block|}
comment|/**    * @return the reserved memory    */
DECL|method|getReservedMem ()
specifier|public
name|int
name|getReservedMem
parameter_list|()
block|{
return|return
name|reservedMem
return|;
block|}
comment|/**    * @param r the reserved memory    */
DECL|method|setReservedMem (int r)
specifier|public
name|void
name|setReservedMem
parameter_list|(
name|int
name|r
parameter_list|)
block|{
name|this
operator|.
name|reservedMem
operator|=
name|r
expr_stmt|;
block|}
comment|/**    * @return the needed memory    */
DECL|method|getNeededMem ()
specifier|public
name|int
name|getNeededMem
parameter_list|()
block|{
return|return
name|neededMem
return|;
block|}
comment|/**    * @param n the needed memory    */
DECL|method|setNeededMem (int n)
specifier|public
name|void
name|setNeededMem
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|neededMem
operator|=
name|n
expr_stmt|;
block|}
comment|/**    * Whether job running in uber mode    * @return job in uber-mode    */
DECL|method|isUber ()
specifier|public
specifier|synchronized
name|boolean
name|isUber
parameter_list|()
block|{
return|return
name|isUber
return|;
block|}
comment|/**    * Set uber-mode flag     * @param isUber Whether job running in uber-mode    */
DECL|method|setUber (boolean isUber)
specifier|public
specifier|synchronized
name|void
name|setUber
parameter_list|(
name|boolean
name|isUber
parameter_list|)
block|{
name|this
operator|.
name|isUber
operator|=
name|isUber
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"job-id : "
operator|+
name|jobid
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"uber-mode : "
operator|+
name|isUber
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"map-progress : "
operator|+
name|mapProgress
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"reduce-progress : "
operator|+
name|reduceProgress
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"cleanup-progress : "
operator|+
name|cleanupProgress
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"setup-progress : "
operator|+
name|setupProgress
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"runstate : "
operator|+
name|runState
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"start-time : "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"user-name : "
operator|+
name|user
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"priority : "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"scheduling-info : "
operator|+
name|schedulingInfo
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"num-used-slots"
operator|+
name|numUsedSlots
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"num-reserved-slots"
operator|+
name|numReservedSlots
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"used-mem"
operator|+
name|usedMem
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"reserved-mem"
operator|+
name|reservedMem
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"needed-mem"
operator|+
name|neededMem
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

