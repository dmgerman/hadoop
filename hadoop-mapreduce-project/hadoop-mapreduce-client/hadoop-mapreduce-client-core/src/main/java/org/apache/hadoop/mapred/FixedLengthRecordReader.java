begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * A reader to read fixed length records from a split.  Record offset is  * returned as key and the record as bytes is returned in value.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FixedLengthRecordReader
specifier|public
class|class
name|FixedLengthRecordReader
implements|implements
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
DECL|field|recordLength
specifier|private
name|int
name|recordLength
decl_stmt|;
comment|// Make use of the new API implementation to avoid code duplication.
DECL|field|reader
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FixedLengthRecordReader
name|reader
decl_stmt|;
DECL|method|FixedLengthRecordReader (Configuration job, FileSplit split, int recordLength)
specifier|public
name|FixedLengthRecordReader
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|FileSplit
name|split
parameter_list|,
name|int
name|recordLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|recordLength
operator|=
name|recordLength
expr_stmt|;
name|reader
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FixedLengthRecordReader
argument_list|(
name|recordLength
argument_list|)
expr_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|job
argument_list|,
name|split
operator|.
name|getStart
argument_list|()
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createKey ()
specifier|public
name|LongWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|LongWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createValue ()
specifier|public
name|BytesWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[
name|recordLength
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|next (LongWritable key, BytesWritable value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|dataRead
init|=
name|reader
operator|.
name|nextKeyValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataRead
condition|)
block|{
name|LongWritable
name|newKey
init|=
name|reader
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|BytesWritable
name|newValue
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|set
argument_list|(
name|newKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
return|return
name|dataRead
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

