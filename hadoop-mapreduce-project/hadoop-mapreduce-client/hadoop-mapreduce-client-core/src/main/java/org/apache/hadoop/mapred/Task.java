begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|SerializationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|reduce
operator|.
name|WrappedReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|ReduceContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|MRJobConfUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for tasks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Task
specifier|abstract
specifier|public
class|class
name|Task
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MERGED_OUTPUT_PREFIX
specifier|public
specifier|static
name|String
name|MERGED_OUTPUT_PREFIX
init|=
literal|".merged"
decl_stmt|;
DECL|field|DEFAULT_COMBINE_RECORDS_BEFORE_PROGRESS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_COMBINE_RECORDS_BEFORE_PROGRESS
init|=
literal|10000
decl_stmt|;
DECL|field|HDFS_URI_SCHEME
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_URI_SCHEME
init|=
literal|"hdfs"
decl_stmt|;
comment|/**    * @deprecated Provided for compatibility. Use {@link TaskCounter} instead.    */
annotation|@
name|Deprecated
DECL|enum|Counter
specifier|public
enum|enum
name|Counter
block|{
DECL|enumConstant|MAP_INPUT_RECORDS
name|MAP_INPUT_RECORDS
block|,
DECL|enumConstant|MAP_OUTPUT_RECORDS
name|MAP_OUTPUT_RECORDS
block|,
DECL|enumConstant|MAP_SKIPPED_RECORDS
name|MAP_SKIPPED_RECORDS
block|,
DECL|enumConstant|MAP_INPUT_BYTES
name|MAP_INPUT_BYTES
block|,
DECL|enumConstant|MAP_OUTPUT_BYTES
name|MAP_OUTPUT_BYTES
block|,
DECL|enumConstant|MAP_OUTPUT_MATERIALIZED_BYTES
name|MAP_OUTPUT_MATERIALIZED_BYTES
block|,
DECL|enumConstant|COMBINE_INPUT_RECORDS
name|COMBINE_INPUT_RECORDS
block|,
DECL|enumConstant|COMBINE_OUTPUT_RECORDS
name|COMBINE_OUTPUT_RECORDS
block|,
DECL|enumConstant|REDUCE_INPUT_GROUPS
name|REDUCE_INPUT_GROUPS
block|,
DECL|enumConstant|REDUCE_SHUFFLE_BYTES
name|REDUCE_SHUFFLE_BYTES
block|,
DECL|enumConstant|REDUCE_INPUT_RECORDS
name|REDUCE_INPUT_RECORDS
block|,
DECL|enumConstant|REDUCE_OUTPUT_RECORDS
name|REDUCE_OUTPUT_RECORDS
block|,
DECL|enumConstant|REDUCE_SKIPPED_GROUPS
name|REDUCE_SKIPPED_GROUPS
block|,
DECL|enumConstant|REDUCE_SKIPPED_RECORDS
name|REDUCE_SKIPPED_RECORDS
block|,
DECL|enumConstant|SPILLED_RECORDS
name|SPILLED_RECORDS
block|,
DECL|enumConstant|SPLIT_RAW_BYTES
name|SPLIT_RAW_BYTES
block|,
DECL|enumConstant|CPU_MILLISECONDS
name|CPU_MILLISECONDS
block|,
DECL|enumConstant|PHYSICAL_MEMORY_BYTES
name|PHYSICAL_MEMORY_BYTES
block|,
DECL|enumConstant|VIRTUAL_MEMORY_BYTES
name|VIRTUAL_MEMORY_BYTES
block|,
DECL|enumConstant|COMMITTED_HEAP_BYTES
name|COMMITTED_HEAP_BYTES
block|,
DECL|enumConstant|MAP_PHYSICAL_MEMORY_BYTES_MAX
name|MAP_PHYSICAL_MEMORY_BYTES_MAX
block|,
DECL|enumConstant|MAP_VIRTUAL_MEMORY_BYTES_MAX
name|MAP_VIRTUAL_MEMORY_BYTES_MAX
block|,
DECL|enumConstant|REDUCE_PHYSICAL_MEMORY_BYTES_MAX
name|REDUCE_PHYSICAL_MEMORY_BYTES_MAX
block|,
DECL|enumConstant|REDUCE_VIRTUAL_MEMORY_BYTES_MAX
name|REDUCE_VIRTUAL_MEMORY_BYTES_MAX
block|}
comment|/**    * Counters to measure the usage of the different file systems.    * Always return the String array with two elements. First one is the name of      * BYTES_READ counter and second one is of the BYTES_WRITTEN counter.    */
DECL|method|getFileSystemCounterNames (String uriScheme)
specifier|protected
specifier|static
name|String
index|[]
name|getFileSystemCounterNames
parameter_list|(
name|String
name|uriScheme
parameter_list|)
block|{
name|String
name|scheme
init|=
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|uriScheme
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|scheme
operator|+
literal|"_BYTES_READ"
block|,
name|scheme
operator|+
literal|"_BYTES_WRITTEN"
block|}
return|;
block|}
comment|/**    * Name of the FileSystem counters' group    */
DECL|field|FILESYSTEM_COUNTER_GROUP
specifier|protected
specifier|static
specifier|final
name|String
name|FILESYSTEM_COUNTER_GROUP
init|=
literal|"FileSystemCounters"
decl_stmt|;
comment|///////////////////////////////////////////////////////////
comment|// Helper methods to construct task-output paths
comment|///////////////////////////////////////////////////////////
comment|/** Construct output file names so that, when an output directory listing is    * sorted lexicographically, positions correspond to output partitions.*/
DECL|field|NUMBER_FORMAT
specifier|private
specifier|static
specifier|final
name|NumberFormat
name|NUMBER_FORMAT
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|NUMBER_FORMAT
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputName (int partition)
specifier|static
specifier|synchronized
name|String
name|getOutputName
parameter_list|(
name|int
name|partition
parameter_list|)
block|{
return|return
literal|"part-"
operator|+
name|NUMBER_FORMAT
operator|.
name|format
argument_list|(
name|partition
argument_list|)
return|;
block|}
comment|////////////////////////////////////////////
comment|// Fields
comment|////////////////////////////////////////////
DECL|field|jobFile
specifier|private
name|String
name|jobFile
decl_stmt|;
comment|// job configuration file
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
comment|// user running the job
DECL|field|taskId
specifier|private
name|TaskAttemptID
name|taskId
decl_stmt|;
comment|// unique, includes job id
DECL|field|partition
specifier|private
name|int
name|partition
decl_stmt|;
comment|// id within job
DECL|field|encryptedSpillKey
specifier|private
name|byte
index|[]
name|encryptedSpillKey
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|}
decl_stmt|;
comment|// Key Used to encrypt
comment|// intermediate spills
DECL|field|taskStatus
name|TaskStatus
name|taskStatus
decl_stmt|;
comment|// current status of the task
DECL|field|jobRunStateForCleanup
specifier|protected
name|JobStatus
operator|.
name|State
name|jobRunStateForCleanup
decl_stmt|;
DECL|field|jobCleanup
specifier|protected
name|boolean
name|jobCleanup
init|=
literal|false
decl_stmt|;
DECL|field|jobSetup
specifier|protected
name|boolean
name|jobSetup
init|=
literal|false
decl_stmt|;
DECL|field|taskCleanup
specifier|protected
name|boolean
name|taskCleanup
init|=
literal|false
decl_stmt|;
comment|// An opaque data field used to attach extra data to each task. This is used
comment|// by the Hadoop scheduler for Mesos to associate a Mesos task ID with each
comment|// task and recover these IDs on the TaskTracker.
DECL|field|extraData
specifier|protected
name|BytesWritable
name|extraData
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
comment|//skip ranges based on failed ranges from previous attempts
DECL|field|skipRanges
specifier|private
name|SortedRanges
name|skipRanges
init|=
operator|new
name|SortedRanges
argument_list|()
decl_stmt|;
DECL|field|skipping
specifier|private
name|boolean
name|skipping
init|=
literal|false
decl_stmt|;
DECL|field|writeSkipRecs
specifier|private
name|boolean
name|writeSkipRecs
init|=
literal|true
decl_stmt|;
comment|//currently processing record start index
DECL|field|currentRecStartIndex
specifier|private
specifier|volatile
name|long
name|currentRecStartIndex
decl_stmt|;
DECL|field|currentRecIndexIterator
specifier|private
name|Iterator
argument_list|<
name|Long
argument_list|>
name|currentRecIndexIterator
init|=
name|skipRanges
operator|.
name|skipRangeIterator
argument_list|()
decl_stmt|;
DECL|field|pTree
specifier|private
name|ResourceCalculatorProcessTree
name|pTree
decl_stmt|;
DECL|field|initCpuCumulativeTime
specifier|private
name|long
name|initCpuCumulativeTime
init|=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
decl_stmt|;
DECL|field|conf
specifier|protected
name|JobConf
name|conf
decl_stmt|;
DECL|field|mapOutputFile
specifier|protected
name|MapOutputFile
name|mapOutputFile
decl_stmt|;
DECL|field|lDirAlloc
specifier|protected
name|LocalDirAllocator
name|lDirAlloc
decl_stmt|;
DECL|field|MAX_RETRIES
specifier|private
specifier|final
specifier|static
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
DECL|field|jobContext
specifier|protected
name|JobContext
name|jobContext
decl_stmt|;
DECL|field|taskContext
specifier|protected
name|TaskAttemptContext
name|taskContext
decl_stmt|;
DECL|field|outputFormat
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
decl_stmt|;
DECL|field|committer
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|spilledRecordsCounter
specifier|protected
specifier|final
name|Counters
operator|.
name|Counter
name|spilledRecordsCounter
decl_stmt|;
DECL|field|failedShuffleCounter
specifier|protected
specifier|final
name|Counters
operator|.
name|Counter
name|failedShuffleCounter
decl_stmt|;
DECL|field|mergedMapOutputsCounter
specifier|protected
specifier|final
name|Counters
operator|.
name|Counter
name|mergedMapOutputsCounter
decl_stmt|;
DECL|field|numSlotsRequired
specifier|private
name|int
name|numSlotsRequired
decl_stmt|;
DECL|field|umbilical
specifier|protected
name|TaskUmbilicalProtocol
name|umbilical
decl_stmt|;
DECL|field|tokenSecret
specifier|protected
name|SecretKey
name|tokenSecret
decl_stmt|;
DECL|field|shuffleSecret
specifier|protected
name|SecretKey
name|shuffleSecret
decl_stmt|;
DECL|field|gcUpdater
specifier|protected
name|GcTimeUpdater
name|gcUpdater
decl_stmt|;
DECL|field|mustPreempt
specifier|final
name|AtomicBoolean
name|mustPreempt
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|uberized
specifier|private
name|boolean
name|uberized
init|=
literal|false
decl_stmt|;
comment|////////////////////////////////////////////
comment|// Constructors
comment|////////////////////////////////////////////
DECL|method|Task ()
specifier|public
name|Task
parameter_list|()
block|{
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|taskId
operator|=
operator|new
name|TaskAttemptID
argument_list|()
expr_stmt|;
name|spilledRecordsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|SPILLED_RECORDS
argument_list|)
expr_stmt|;
name|failedShuffleCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|FAILED_SHUFFLE
argument_list|)
expr_stmt|;
name|mergedMapOutputsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MERGED_MAP_OUTPUTS
argument_list|)
expr_stmt|;
name|gcUpdater
operator|=
operator|new
name|GcTimeUpdater
argument_list|()
expr_stmt|;
block|}
DECL|method|Task (String jobFile, TaskAttemptID taskId, int partition, int numSlotsRequired)
specifier|public
name|Task
parameter_list|(
name|String
name|jobFile
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|int
name|partition
parameter_list|,
name|int
name|numSlotsRequired
parameter_list|)
block|{
name|this
operator|.
name|jobFile
operator|=
name|jobFile
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|numSlotsRequired
operator|=
name|numSlotsRequired
expr_stmt|;
name|this
operator|.
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMapTask
argument_list|()
argument_list|,
name|this
operator|.
name|taskId
argument_list|,
literal|0.0f
argument_list|,
name|numSlotsRequired
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|isMapTask
argument_list|()
condition|?
name|TaskStatus
operator|.
name|Phase
operator|.
name|MAP
else|:
name|TaskStatus
operator|.
name|Phase
operator|.
name|SHUFFLE
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|spilledRecordsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|SPILLED_RECORDS
argument_list|)
expr_stmt|;
name|failedShuffleCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|FAILED_SHUFFLE
argument_list|)
expr_stmt|;
name|mergedMapOutputsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MERGED_MAP_OUTPUTS
argument_list|)
expr_stmt|;
name|gcUpdater
operator|=
operator|new
name|GcTimeUpdater
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setTaskDone ()
name|void
name|setTaskDone
parameter_list|()
block|{
name|taskDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////
comment|// Accessors
comment|////////////////////////////////////////////
DECL|method|setJobFile (String jobFile)
specifier|public
name|void
name|setJobFile
parameter_list|(
name|String
name|jobFile
parameter_list|)
block|{
name|this
operator|.
name|jobFile
operator|=
name|jobFile
expr_stmt|;
block|}
DECL|method|getJobFile ()
specifier|public
name|String
name|getJobFile
parameter_list|()
block|{
return|return
name|jobFile
return|;
block|}
DECL|method|getTaskID ()
specifier|public
name|TaskAttemptID
name|getTaskID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
DECL|method|getNumSlotsRequired ()
specifier|public
name|int
name|getNumSlotsRequired
parameter_list|()
block|{
return|return
name|numSlotsRequired
return|;
block|}
DECL|method|getCounters ()
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
comment|/**    * Get the job name for this task.    * @return the job name    */
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|taskId
operator|.
name|getJobID
argument_list|()
return|;
block|}
comment|/**    * Set the job token secret     * @param tokenSecret the secret    */
DECL|method|setJobTokenSecret (SecretKey tokenSecret)
specifier|public
name|void
name|setJobTokenSecret
parameter_list|(
name|SecretKey
name|tokenSecret
parameter_list|)
block|{
name|this
operator|.
name|tokenSecret
operator|=
name|tokenSecret
expr_stmt|;
block|}
comment|/**    * Get Encrypted spill key    * @return encrypted spill key    */
DECL|method|getEncryptedSpillKey ()
specifier|public
name|byte
index|[]
name|getEncryptedSpillKey
parameter_list|()
block|{
return|return
name|encryptedSpillKey
return|;
block|}
comment|/**    * Set Encrypted spill key    * @param encryptedSpillKey key    */
DECL|method|setEncryptedSpillKey (byte[] encryptedSpillKey)
specifier|public
name|void
name|setEncryptedSpillKey
parameter_list|(
name|byte
index|[]
name|encryptedSpillKey
parameter_list|)
block|{
if|if
condition|(
name|encryptedSpillKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encryptedSpillKey
operator|=
name|encryptedSpillKey
expr_stmt|;
block|}
block|}
comment|/**    * Get the job token secret    * @return the token secret    */
DECL|method|getJobTokenSecret ()
specifier|public
name|SecretKey
name|getJobTokenSecret
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenSecret
return|;
block|}
comment|/**    * Set the secret key used to authenticate the shuffle    * @param shuffleSecret the secret    */
DECL|method|setShuffleSecret (SecretKey shuffleSecret)
specifier|public
name|void
name|setShuffleSecret
parameter_list|(
name|SecretKey
name|shuffleSecret
parameter_list|)
block|{
name|this
operator|.
name|shuffleSecret
operator|=
name|shuffleSecret
expr_stmt|;
block|}
comment|/**    * Get the secret key used to authenticate the shuffle    * @return the shuffle secret    */
DECL|method|getShuffleSecret ()
specifier|public
name|SecretKey
name|getShuffleSecret
parameter_list|()
block|{
return|return
name|this
operator|.
name|shuffleSecret
return|;
block|}
comment|/**    * Get the index of this task within the job.    * @return the integer part of the task id    */
DECL|method|getPartition ()
specifier|public
name|int
name|getPartition
parameter_list|()
block|{
return|return
name|partition
return|;
block|}
comment|/**    * Return current phase of the task.     * needs to be synchronized as communication thread sends the phase every second    * @return the curent phase of the task    */
DECL|method|getPhase ()
specifier|public
specifier|synchronized
name|TaskStatus
operator|.
name|Phase
name|getPhase
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskStatus
operator|.
name|getPhase
argument_list|()
return|;
block|}
comment|/**    * Set current phase of the task.     * @param phase task phase     */
DECL|method|setPhase (TaskStatus.Phase phase)
specifier|protected
specifier|synchronized
name|void
name|setPhase
parameter_list|(
name|TaskStatus
operator|.
name|Phase
name|phase
parameter_list|)
block|{
name|this
operator|.
name|taskStatus
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get whether to write skip records.    */
DECL|method|toWriteSkipRecs ()
specifier|protected
name|boolean
name|toWriteSkipRecs
parameter_list|()
block|{
return|return
name|writeSkipRecs
return|;
block|}
comment|/**    * Set whether to write skip records.    */
DECL|method|setWriteSkipRecs (boolean writeSkipRecs)
specifier|protected
name|void
name|setWriteSkipRecs
parameter_list|(
name|boolean
name|writeSkipRecs
parameter_list|)
block|{
name|this
operator|.
name|writeSkipRecs
operator|=
name|writeSkipRecs
expr_stmt|;
block|}
comment|/**    * Report a fatal error to the parent (task) tracker.    */
DECL|method|reportFatalError (TaskAttemptID id, Throwable throwable, String logMsg, boolean fastFail)
specifier|protected
name|void
name|reportFatalError
parameter_list|(
name|TaskAttemptID
name|id
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|String
name|logMsg
parameter_list|,
name|boolean
name|fastFail
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|isShutdownInProgress
argument_list|()
condition|)
block|{
return|return;
block|}
name|Throwable
name|tCause
init|=
name|throwable
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|String
name|cause
init|=
name|tCause
operator|==
literal|null
condition|?
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|throwable
argument_list|)
else|:
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|tCause
argument_list|)
decl_stmt|;
try|try
block|{
name|umbilical
operator|.
name|fatalError
argument_list|(
name|id
argument_list|,
name|cause
argument_list|,
name|fastFail
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to contact the tasktracker"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets a handle to the Statistics instance based on the scheme associated    * with path.    *     * @param path the path.    * @param conf the configuration to extract the scheme from if not part of     *   the path.    * @return a Statistics instance, or null if none is found for the scheme.    */
DECL|method|getFsStatistics (Path path, Configuration conf)
specifier|protected
specifier|static
name|List
argument_list|<
name|Statistics
argument_list|>
name|getFsStatistics
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Statistics
argument_list|>
name|matchedStats
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
for|for
control|(
name|Statistics
name|stats
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|stats
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|matchedStats
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchedStats
return|;
block|}
comment|/**    * Get skipRanges.    */
DECL|method|getSkipRanges ()
specifier|public
name|SortedRanges
name|getSkipRanges
parameter_list|()
block|{
return|return
name|skipRanges
return|;
block|}
comment|/**    * Set skipRanges.    */
DECL|method|setSkipRanges (SortedRanges skipRanges)
specifier|public
name|void
name|setSkipRanges
parameter_list|(
name|SortedRanges
name|skipRanges
parameter_list|)
block|{
name|this
operator|.
name|skipRanges
operator|=
name|skipRanges
expr_stmt|;
block|}
comment|/**    * Is Task in skipping mode.    */
DECL|method|isSkipping ()
specifier|public
name|boolean
name|isSkipping
parameter_list|()
block|{
return|return
name|skipping
return|;
block|}
comment|/**    * Sets whether to run Task in skipping mode.    * @param skipping    */
DECL|method|setSkipping (boolean skipping)
specifier|public
name|void
name|setSkipping
parameter_list|(
name|boolean
name|skipping
parameter_list|)
block|{
name|this
operator|.
name|skipping
operator|=
name|skipping
expr_stmt|;
block|}
comment|/**    * Return current state of the task.     * needs to be synchronized as communication thread     * sends the state every second    * @return task state    */
DECL|method|getState ()
specifier|synchronized
name|TaskStatus
operator|.
name|State
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskStatus
operator|.
name|getRunState
argument_list|()
return|;
block|}
comment|/**    * Set current state of the task.     * @param state    */
DECL|method|setState (TaskStatus.State state)
specifier|synchronized
name|void
name|setState
parameter_list|(
name|TaskStatus
operator|.
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|setTaskCleanupTask ()
name|void
name|setTaskCleanupTask
parameter_list|()
block|{
name|taskCleanup
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isTaskCleanupTask ()
name|boolean
name|isTaskCleanupTask
parameter_list|()
block|{
return|return
name|taskCleanup
return|;
block|}
DECL|method|isJobCleanupTask ()
name|boolean
name|isJobCleanupTask
parameter_list|()
block|{
return|return
name|jobCleanup
return|;
block|}
DECL|method|isJobAbortTask ()
name|boolean
name|isJobAbortTask
parameter_list|()
block|{
comment|// the task is an abort task if its marked for cleanup and the final
comment|// expected state is either failed or killed.
return|return
name|isJobCleanupTask
argument_list|()
operator|&&
operator|(
name|jobRunStateForCleanup
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
operator|||
name|jobRunStateForCleanup
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
operator|)
return|;
block|}
DECL|method|isJobSetupTask ()
name|boolean
name|isJobSetupTask
parameter_list|()
block|{
return|return
name|jobSetup
return|;
block|}
DECL|method|setJobSetupTask ()
name|void
name|setJobSetupTask
parameter_list|()
block|{
name|jobSetup
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setJobCleanupTask ()
name|void
name|setJobCleanupTask
parameter_list|()
block|{
name|jobCleanup
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Sets the task to do job abort in the cleanup.    * @param status the final runstate of the job.     */
DECL|method|setJobCleanupTaskState (JobStatus.State status)
name|void
name|setJobCleanupTaskState
parameter_list|(
name|JobStatus
operator|.
name|State
name|status
parameter_list|)
block|{
name|jobRunStateForCleanup
operator|=
name|status
expr_stmt|;
block|}
DECL|method|isMapOrReduce ()
name|boolean
name|isMapOrReduce
parameter_list|()
block|{
return|return
operator|!
name|jobSetup
operator|&&
operator|!
name|jobCleanup
operator|&&
operator|!
name|taskCleanup
return|;
block|}
comment|/**    * Get the name of the user running the job/task. TaskTracker needs task's    * user name even before it's JobConf is localized. So we explicitly serialize    * the user name.    *     * @return user    */
DECL|method|getUser ()
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setUser (String user)
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|////////////////////////////////////////////
comment|// Writable methods
comment|////////////////////////////////////////////
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numSlotsRequired
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|skipRanges
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|skipping
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|jobCleanup
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobCleanup
condition|)
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|jobRunStateForCleanup
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|jobSetup
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|writeSkipRecs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|taskCleanup
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|encryptedSpillKey
operator|.
name|length
argument_list|)
expr_stmt|;
name|extraData
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|encryptedSpillKey
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|jobFile
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|TaskAttemptID
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|partition
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|numSlotsRequired
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|taskStatus
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|skipRanges
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|currentRecIndexIterator
operator|=
name|skipRanges
operator|.
name|skipRangeIterator
argument_list|()
expr_stmt|;
name|currentRecStartIndex
operator|=
name|currentRecIndexIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|skipping
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|jobCleanup
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|jobCleanup
condition|)
block|{
name|jobRunStateForCleanup
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|jobSetup
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|writeSkipRecs
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|taskCleanup
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskCleanup
condition|)
block|{
name|setPhase
argument_list|(
name|TaskStatus
operator|.
name|Phase
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
block|}
name|user
operator|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|encryptedSpillKey
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|extraData
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|encryptedSpillKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|taskId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Localize the given JobConf to be specific for this task.    */
DECL|method|localizeConfiguration (JobConf conf)
specifier|public
name|void
name|localizeConfiguration
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|TASK_ID
argument_list|,
name|taskId
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|TASK_ISMAP
argument_list|,
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|TASK_PARTITION
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|ID
argument_list|,
name|taskId
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Run this task as a part of the named job.  This method is executed in the    * child process and is what invokes user-supplied map, reduce, etc. methods.    * @param umbilical for progress reports    */
DECL|method|run (JobConf job, TaskUmbilicalProtocol umbilical)
specifier|public
specifier|abstract
name|void
name|run
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
function_decl|;
DECL|field|taskProgress
specifier|private
specifier|transient
name|Progress
name|taskProgress
init|=
operator|new
name|Progress
argument_list|()
decl_stmt|;
comment|// Current counters
DECL|field|counters
specifier|private
specifier|transient
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
comment|/* flag to track whether task is done */
DECL|field|taskDone
specifier|private
name|AtomicBoolean
name|taskDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|isMapTask ()
specifier|public
specifier|abstract
name|boolean
name|isMapTask
parameter_list|()
function_decl|;
DECL|method|getProgress ()
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
name|taskProgress
return|;
block|}
DECL|method|initialize (JobConf job, JobID id, Reporter reporter, boolean useNewApi)
specifier|public
name|void
name|initialize
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|JobID
name|id
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|boolean
name|useNewApi
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|jobContext
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|job
argument_list|,
name|id
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|taskContext
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
argument_list|,
name|taskId
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|getState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
condition|)
block|{
name|setState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useNewApi
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"using new api for output committer"
argument_list|)
expr_stmt|;
block|}
name|outputFormat
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|committer
operator|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|committer
operator|=
name|conf
operator|.
name|getOutputCommitter
argument_list|()
expr_stmt|;
block|}
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|committer
operator|instanceof
name|FileOutputCommitter
operator|)
condition|)
block|{
name|FileOutputFormat
operator|.
name|setWorkOutputPath
argument_list|(
name|conf
argument_list|,
operator|(
operator|(
name|FileOutputCommitter
operator|)
name|committer
operator|)
operator|.
name|getTaskAttemptPath
argument_list|(
name|taskContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileOutputFormat
operator|.
name|setWorkOutputPath
argument_list|(
name|conf
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
block|}
name|committer
operator|.
name|setupTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ResourceCalculatorProcessTree
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|MRConfig
operator|.
name|RESOURCE_CALCULATOR_PROCESS_TREE
argument_list|,
literal|null
argument_list|,
name|ResourceCalculatorProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
name|pTree
operator|=
name|ResourceCalculatorProcessTree
operator|.
name|getResourceCalculatorProcessTree
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
literal|"JVM_PID"
argument_list|)
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Using ResourceCalculatorProcessTree : "
operator|+
name|pTree
argument_list|)
expr_stmt|;
if|if
condition|(
name|pTree
operator|!=
literal|null
condition|)
block|{
name|pTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
name|initCpuCumulativeTime
operator|=
name|pTree
operator|.
name|getCumulativeCpuTime
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|normalizeStatus (String status, Configuration conf)
specifier|public
specifier|static
name|String
name|normalizeStatus
parameter_list|(
name|String
name|status
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Check to see if the status string is too long
comment|// and truncate it if needed.
name|int
name|progressStatusLength
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRConfig
operator|.
name|PROGRESS_STATUS_LEN_LIMIT_KEY
argument_list|,
name|MRConfig
operator|.
name|PROGRESS_STATUS_LEN_LIMIT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|length
argument_list|()
operator|>
name|progressStatusLength
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Task status: \""
operator|+
name|status
operator|+
literal|"\" truncated to max limit ("
operator|+
name|progressStatusLength
operator|+
literal|" characters)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|status
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|progressStatusLength
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskReporter
specifier|public
class|class
name|TaskReporter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
implements|implements
name|Runnable
implements|,
name|Reporter
block|{
DECL|field|umbilical
specifier|private
name|TaskUmbilicalProtocol
name|umbilical
decl_stmt|;
DECL|field|split
specifier|private
name|InputSplit
name|split
init|=
literal|null
decl_stmt|;
DECL|field|taskProgress
specifier|private
name|Progress
name|taskProgress
decl_stmt|;
DECL|field|pingThread
specifier|private
name|Thread
name|pingThread
init|=
literal|null
decl_stmt|;
DECL|field|done
specifier|private
name|boolean
name|done
init|=
literal|true
decl_stmt|;
DECL|field|lock
specifier|private
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|diskLimitCheckStatus
specifier|private
specifier|volatile
name|String
name|diskLimitCheckStatus
init|=
literal|null
decl_stmt|;
DECL|field|diskLimitCheckThread
specifier|private
name|Thread
name|diskLimitCheckThread
init|=
literal|null
decl_stmt|;
comment|/**      * flag that indicates whether progress update needs to be sent to parent.      * If true, it has been set. If false, it has been reset.       * Using AtomicBoolean since we need an atomic read& reset method.       */
DECL|field|progressFlag
specifier|private
name|AtomicBoolean
name|progressFlag
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|TaskReporter (Progress taskProgress, TaskUmbilicalProtocol umbilical)
specifier|public
name|TaskReporter
parameter_list|(
name|Progress
name|taskProgress
parameter_list|,
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
block|{
name|this
operator|.
name|umbilical
operator|=
name|umbilical
expr_stmt|;
name|this
operator|.
name|taskProgress
operator|=
name|taskProgress
expr_stmt|;
block|}
comment|// getters and setters for flag
DECL|method|setProgressFlag ()
name|void
name|setProgressFlag
parameter_list|()
block|{
name|progressFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|resetProgressFlag ()
name|boolean
name|resetProgressFlag
parameter_list|()
block|{
return|return
name|progressFlag
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|taskProgress
operator|.
name|setStatus
argument_list|(
name|normalizeStatus
argument_list|(
name|status
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// indicate that progress update needs to be sent
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|setProgress (float progress)
specifier|public
name|void
name|setProgress
parameter_list|(
name|float
name|progress
parameter_list|)
block|{
comment|// set current phase progress.
comment|// This method assumes that task has phases.
name|taskProgress
operator|.
name|phase
argument_list|()
operator|.
name|set
argument_list|(
name|progress
argument_list|)
expr_stmt|;
comment|// indicate that progress update needs to be sent
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|taskProgress
operator|.
name|getProgress
argument_list|()
return|;
block|}
empty_stmt|;
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{
comment|// indicate that progress update needs to be sent
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|getCounter (String group, String name)
specifier|public
name|Counters
operator|.
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|counter
return|;
block|}
DECL|method|getCounter (Enum<?> name)
specifier|public
name|Counters
operator|.
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
name|counters
operator|==
literal|null
condition|?
literal|null
else|:
name|counters
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|incrCounter (Enum key, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|Enum
name|key
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|key
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|incrCounter (String group, String counter, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|counter
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|group
argument_list|,
name|counter
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipping
operator|&&
name|SkipBadRecords
operator|.
name|COUNTER_GROUP
operator|.
name|equals
argument_list|(
name|group
argument_list|)
operator|&&
operator|(
name|SkipBadRecords
operator|.
name|COUNTER_MAP_PROCESSED_RECORDS
operator|.
name|equals
argument_list|(
name|counter
argument_list|)
operator|||
name|SkipBadRecords
operator|.
name|COUNTER_REDUCE_PROCESSED_GROUPS
operator|.
name|equals
argument_list|(
name|counter
argument_list|)
operator|)
condition|)
block|{
comment|//if application reports the processed records, move the
comment|//currentRecStartIndex to the next.
comment|//currentRecStartIndex is the start index which has not yet been
comment|//finished and is still in task's stomach.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|currentRecStartIndex
operator|=
name|currentRecIndexIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|setInputSplit (InputSplit split)
specifier|public
name|void
name|setInputSplit
parameter_list|(
name|InputSplit
name|split
parameter_list|)
block|{
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
block|}
DECL|method|getInputSplit ()
specifier|public
name|InputSplit
name|getInputSplit
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
if|if
condition|(
name|split
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Input only available on map"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|split
return|;
block|}
block|}
comment|/**      * exception thrown when the task exceeds some configured limits.      */
DECL|class|TaskLimitException
specifier|public
class|class
name|TaskLimitException
extends|extends
name|IOException
block|{
DECL|method|TaskLimitException (String str)
specifier|public
name|TaskLimitException
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * disk limit checker, runs in separate thread when activated.      */
DECL|class|DiskLimitCheck
specifier|public
class|class
name|DiskLimitCheck
implements|implements
name|Runnable
block|{
DECL|field|localFS
specifier|private
name|LocalFileSystem
name|localFS
decl_stmt|;
DECL|field|fsLimit
specifier|private
name|long
name|fsLimit
decl_stmt|;
DECL|field|checkInterval
specifier|private
name|long
name|checkInterval
decl_stmt|;
DECL|field|localDirs
specifier|private
name|String
index|[]
name|localDirs
decl_stmt|;
DECL|field|killOnLimitExceeded
specifier|private
name|boolean
name|killOnLimitExceeded
decl_stmt|;
DECL|method|DiskLimitCheck (JobConf conf)
specifier|public
name|DiskLimitCheck
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsLimit
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SINGLE_DISK_LIMIT_BYTES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_SINGLE_DISK_LIMIT_BYTES
argument_list|)
expr_stmt|;
name|this
operator|.
name|localDirs
operator|=
name|conf
operator|.
name|getLocalDirs
argument_list|()
expr_stmt|;
name|this
operator|.
name|checkInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SINGLE_DISK_LIMIT_CHECK_INTERVAL_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_SINGLE_DISK_LIMIT_CHECK_INTERVAL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|killOnLimitExceeded
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SINGLE_DISK_LIMIT_KILL_LIMIT_EXCEED
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_SINGLE_DISK_LIMIT_KILL_LIMIT_EXCEED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|taskDone
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|localWritesSize
init|=
literal|0L
decl_stmt|;
name|String
name|largestWorkDir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|local
range|:
name|localDirs
control|)
block|{
name|long
name|size
init|=
name|FileUtil
operator|.
name|getDU
argument_list|(
name|localFS
operator|.
name|pathToFile
argument_list|(
operator|new
name|Path
argument_list|(
name|local
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|localWritesSize
operator|<
name|size
condition|)
block|{
name|localWritesSize
operator|=
name|size
expr_stmt|;
name|largestWorkDir
operator|=
name|local
expr_stmt|;
block|}
block|}
if|if
condition|(
name|localWritesSize
operator|>
name|fsLimit
condition|)
block|{
name|String
name|localStatus
init|=
literal|"too much data in local scratch dir="
operator|+
name|largestWorkDir
operator|+
literal|". current size is "
operator|+
name|localWritesSize
operator|+
literal|" the limit is "
operator|+
name|fsLimit
decl_stmt|;
if|if
condition|(
name|killOnLimitExceeded
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|localStatus
argument_list|)
expr_stmt|;
name|diskLimitCheckStatus
operator|=
name|localStatus
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|localStatus
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|checkInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * check the counters to see whether the task has exceeded any configured      * limits.      * @throws TaskLimitException      */
DECL|method|checkTaskLimits ()
specifier|protected
name|void
name|checkTaskLimits
parameter_list|()
throws|throws
name|TaskLimitException
block|{
comment|// check the limit for writing to local file system
name|long
name|limit
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_LOCAL_WRITE_LIMIT_BYTES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_TASK_LOCAL_WRITE_LIMIT_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
name|Counters
operator|.
name|Counter
name|localWritesCounter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localWritesCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|localFS
operator|.
name|getScheme
argument_list|()
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_WRITTEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get LocalFileSystem BYTES_WRITTEN counter"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localWritesCounter
operator|!=
literal|null
operator|&&
name|localWritesCounter
operator|.
name|getCounter
argument_list|()
operator|>
name|limit
condition|)
block|{
throw|throw
operator|new
name|TaskLimitException
argument_list|(
literal|"too much write to local file system."
operator|+
literal|" current value is "
operator|+
name|localWritesCounter
operator|.
name|getCounter
argument_list|()
operator|+
literal|" the limit is "
operator|+
name|limit
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|diskLimitCheckStatus
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|TaskLimitException
argument_list|(
name|diskLimitCheckStatus
argument_list|)
throw|;
block|}
block|}
comment|/**      * The communication thread handles communication with the parent (Task      * Tracker). It sends progress updates if progress has been made or if      * the task needs to let the parent know that it's alive. It also pings      * the parent to see if it's alive.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|3
decl_stmt|;
name|int
name|remainingRetries
init|=
name|MAX_RETRIES
decl_stmt|;
comment|// get current flag value and reset it as well
name|boolean
name|sendProgress
init|=
name|resetProgressFlag
argument_list|()
decl_stmt|;
name|long
name|taskProgressInterval
init|=
name|MRJobConfUtil
operator|.
name|getTaskProgressReportInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|taskDone
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|done
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|boolean
name|taskFound
init|=
literal|true
decl_stmt|;
comment|// whether TT knows about this task
name|AMFeedback
name|amFeedback
init|=
literal|null
decl_stmt|;
comment|// sleep for a bit
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|taskDone
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
name|lock
operator|.
name|wait
argument_list|(
name|taskProgressInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskDone
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|sendProgress
condition|)
block|{
comment|// we need to send progress update
name|updateCounters
argument_list|()
expr_stmt|;
name|checkTaskLimits
argument_list|()
expr_stmt|;
name|taskStatus
operator|.
name|statusUpdate
argument_list|(
name|taskProgress
operator|.
name|get
argument_list|()
argument_list|,
name|taskProgress
operator|.
name|toString
argument_list|()
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|amFeedback
operator|=
name|umbilical
operator|.
name|statusUpdate
argument_list|(
name|taskId
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
name|taskFound
operator|=
name|amFeedback
operator|.
name|getTaskFound
argument_list|()
expr_stmt|;
name|taskStatus
operator|.
name|clearStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// send ping
name|amFeedback
operator|=
name|umbilical
operator|.
name|statusUpdate
argument_list|(
name|taskId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|taskFound
operator|=
name|amFeedback
operator|.
name|getTaskFound
argument_list|()
expr_stmt|;
block|}
comment|// if Task Tracker is not aware of our task ID (probably because it died and
comment|// came back up), kill ourselves
if|if
condition|(
operator|!
name|taskFound
condition|)
block|{
if|if
condition|(
name|uberized
condition|)
block|{
name|taskDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parent died.  Exiting "
operator|+
name|taskId
argument_list|)
expr_stmt|;
name|resetDoneFlag
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|66
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set a flag that says we should preempt this is read by
comment|// ReduceTasks in places of the execution where it is
comment|// safe/easy to preempt
name|boolean
name|lastPreempt
init|=
name|mustPreempt
operator|.
name|get
argument_list|()
decl_stmt|;
name|mustPreempt
operator|.
name|set
argument_list|(
name|mustPreempt
operator|.
name|get
argument_list|()
operator|||
name|amFeedback
operator|.
name|getPreemption
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastPreempt
operator|^
name|mustPreempt
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"PREEMPTION TASK: setting mustPreempt to "
operator|+
name|mustPreempt
operator|.
name|get
argument_list|()
operator|+
literal|" given "
operator|+
name|amFeedback
operator|.
name|getPreemption
argument_list|()
operator|+
literal|" for "
operator|+
name|taskId
operator|+
literal|" task status: "
operator|+
name|taskStatus
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendProgress
operator|=
name|resetProgressFlag
argument_list|()
expr_stmt|;
name|remainingRetries
operator|=
name|MAX_RETRIES
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TaskLimitException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Task exceeded the limits: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
try|try
block|{
name|umbilical
operator|.
name|fatalError
argument_list|(
name|taskId
argument_list|,
name|errMsg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update failure diagnosis"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Killing "
operator|+
name|taskId
argument_list|)
expr_stmt|;
name|resetDoneFlag
argument_list|()
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|69
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Communication exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|remainingRetries
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|remainingRetries
operator|==
literal|0
condition|)
block|{
name|ReflectionUtils
operator|.
name|logThreadInfo
argument_list|(
name|LOG
argument_list|,
literal|"Communication exception"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Last retry, killing "
operator|+
name|taskId
argument_list|)
expr_stmt|;
name|resetDoneFlag
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|65
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Notify that we are done with the work
name|resetDoneFlag
argument_list|()
expr_stmt|;
block|}
DECL|method|resetDoneFlag ()
name|void
name|resetDoneFlag
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|lock
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startCommunicationThread ()
specifier|public
name|void
name|startCommunicationThread
parameter_list|()
block|{
if|if
condition|(
name|pingThread
operator|==
literal|null
condition|)
block|{
name|pingThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"communication thread"
argument_list|)
expr_stmt|;
name|pingThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pingThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startDiskLimitCheckerThreadIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|startDiskLimitCheckerThreadIfNeeded ()
specifier|public
name|void
name|startDiskLimitCheckerThreadIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|diskLimitCheckThread
operator|==
literal|null
operator|&&
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SINGLE_DISK_LIMIT_BYTES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_SINGLE_DISK_LIMIT_BYTES
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|diskLimitCheckThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|DiskLimitCheck
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"disk limit check thread"
argument_list|)
expr_stmt|;
name|diskLimitCheckThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diskLimitCheckThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Issues starting disk monitor thread: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopCommunicationThread ()
specifier|public
name|void
name|stopCommunicationThread
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|pingThread
operator|!=
literal|null
condition|)
block|{
comment|// Intent of the lock is to not send an interrupt in the middle of an
comment|// umbilical.ping or umbilical.statusUpdate
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|//Interrupt if sleeping. Otherwise wait for the RPC call to return.
name|lock
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|lock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|pingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|pingThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    *  Reports the next executing record range to TaskTracker.    *      * @param umbilical    * @param nextRecIndex the record index which would be fed next.    * @throws IOException    */
DECL|method|reportNextRecordRange (final TaskUmbilicalProtocol umbilical, long nextRecIndex)
specifier|protected
name|void
name|reportNextRecordRange
parameter_list|(
specifier|final
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|long
name|nextRecIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|//currentRecStartIndex is the start index which has not yet been finished
comment|//and is still in task's stomach.
name|long
name|len
init|=
name|nextRecIndex
operator|-
name|currentRecStartIndex
operator|+
literal|1
decl_stmt|;
name|SortedRanges
operator|.
name|Range
name|range
init|=
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
name|currentRecStartIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|taskStatus
operator|.
name|setNextRecordRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sending reportNextRecordRange "
operator|+
name|range
argument_list|)
expr_stmt|;
block|}
name|umbilical
operator|.
name|reportNextRecordRange
argument_list|(
name|taskId
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a TaskReporter and start communication thread    */
DECL|method|startReporter (final TaskUmbilicalProtocol umbilical)
name|TaskReporter
name|startReporter
parameter_list|(
specifier|final
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
block|{
comment|// start thread that will handle communication with parent
name|TaskReporter
name|reporter
init|=
operator|new
name|TaskReporter
argument_list|(
name|getProgress
argument_list|()
argument_list|,
name|umbilical
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|startCommunicationThread
argument_list|()
expr_stmt|;
return|return
name|reporter
return|;
block|}
comment|/**    * Update resource information counters    */
DECL|method|updateResourceCounters ()
name|void
name|updateResourceCounters
parameter_list|()
block|{
comment|// Update generic resource counters
name|updateHeapUsageCounter
argument_list|()
expr_stmt|;
comment|// Updating resources specified in ResourceCalculatorProcessTree
if|if
condition|(
name|pTree
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|pTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
name|long
name|cpuTime
init|=
name|pTree
operator|.
name|getCumulativeCpuTime
argument_list|()
decl_stmt|;
name|long
name|pMem
init|=
name|pTree
operator|.
name|getRssMemorySize
argument_list|()
decl_stmt|;
name|long
name|vMem
init|=
name|pTree
operator|.
name|getVirtualMemorySize
argument_list|()
decl_stmt|;
comment|// Remove the CPU time consumed previously by JVM reuse
if|if
condition|(
name|cpuTime
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
operator|&&
name|initCpuCumulativeTime
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|cpuTime
operator|-=
name|initCpuCumulativeTime
expr_stmt|;
block|}
if|if
condition|(
name|cpuTime
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
argument_list|)
operator|.
name|setValue
argument_list|(
name|cpuTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pMem
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
operator|.
name|setValue
argument_list|(
name|pMem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vMem
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
operator|.
name|setValue
argument_list|(
name|vMem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pMem
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|TaskCounter
name|counter
init|=
name|isMapTask
argument_list|()
condition|?
name|TaskCounter
operator|.
name|MAP_PHYSICAL_MEMORY_BYTES_MAX
else|:
name|TaskCounter
operator|.
name|REDUCE_PHYSICAL_MEMORY_BYTES_MAX
decl_stmt|;
name|Counters
operator|.
name|Counter
name|pMemCounter
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|pMemCounter
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|pMemCounter
operator|.
name|getValue
argument_list|()
argument_list|,
name|pMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vMem
operator|!=
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|TaskCounter
name|counter
init|=
name|isMapTask
argument_list|()
condition|?
name|TaskCounter
operator|.
name|MAP_VIRTUAL_MEMORY_BYTES_MAX
else|:
name|TaskCounter
operator|.
name|REDUCE_VIRTUAL_MEMORY_BYTES_MAX
decl_stmt|;
name|Counters
operator|.
name|Counter
name|vMemCounter
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|vMemCounter
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|vMemCounter
operator|.
name|getValue
argument_list|()
argument_list|,
name|vMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * An updater that tracks the amount of time this task has spent in GC.    */
DECL|class|GcTimeUpdater
class|class
name|GcTimeUpdater
block|{
DECL|field|lastGcMillis
specifier|private
name|long
name|lastGcMillis
init|=
literal|0
decl_stmt|;
DECL|field|gcBeans
specifier|private
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcBeans
init|=
literal|null
decl_stmt|;
DECL|method|GcTimeUpdater ()
specifier|public
name|GcTimeUpdater
parameter_list|()
block|{
name|this
operator|.
name|gcBeans
operator|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
expr_stmt|;
name|getElapsedGc
argument_list|()
expr_stmt|;
comment|// Initialize 'lastGcMillis' with the current time spent.
block|}
comment|/**      * @return the number of milliseconds that the gc has used for CPU      * since the last time this method was called.      */
DECL|method|getElapsedGc ()
specifier|protected
name|long
name|getElapsedGc
parameter_list|()
block|{
name|long
name|thisGcMillis
init|=
literal|0
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|gcBean
range|:
name|gcBeans
control|)
block|{
name|thisGcMillis
operator|+=
name|gcBean
operator|.
name|getCollectionTime
argument_list|()
expr_stmt|;
block|}
name|long
name|delta
init|=
name|thisGcMillis
operator|-
name|lastGcMillis
decl_stmt|;
name|this
operator|.
name|lastGcMillis
operator|=
name|thisGcMillis
expr_stmt|;
return|return
name|delta
return|;
block|}
comment|/**      * Increment the gc-elapsed-time counter.      */
DECL|method|incrementGcCounter ()
specifier|public
name|void
name|incrementGcCounter
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|counters
condition|)
block|{
return|return;
comment|// nothing to do.
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
name|gcCounter
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|GC_TIME_MILLIS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|gcCounter
condition|)
block|{
name|gcCounter
operator|.
name|increment
argument_list|(
name|getElapsedGc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An updater that tracks the last number reported for a given file    * system and only creates the counters when they are needed.    */
DECL|class|FileSystemStatisticUpdater
class|class
name|FileSystemStatisticUpdater
block|{
DECL|field|stats
specifier|private
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|stats
decl_stmt|;
DECL|field|readBytesCounter
DECL|field|writeBytesCounter
specifier|private
name|Counters
operator|.
name|Counter
name|readBytesCounter
decl_stmt|,
name|writeBytesCounter
decl_stmt|,
DECL|field|readOpsCounter
DECL|field|largeReadOpsCounter
DECL|field|writeOpsCounter
name|readOpsCounter
decl_stmt|,
name|largeReadOpsCounter
decl_stmt|,
name|writeOpsCounter
decl_stmt|,
DECL|field|readBytesEcCounter
name|readBytesEcCounter
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|method|FileSystemStatisticUpdater (List<FileSystem.Statistics> stats, String scheme)
name|FileSystemStatisticUpdater
parameter_list|(
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|stats
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
DECL|method|updateCounters ()
name|void
name|updateCounters
parameter_list|()
block|{
if|if
condition|(
name|readBytesCounter
operator|==
literal|null
condition|)
block|{
name|readBytesCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeBytesCounter
operator|==
literal|null
condition|)
block|{
name|writeBytesCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_WRITTEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readOpsCounter
operator|==
literal|null
condition|)
block|{
name|readOpsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|READ_OPS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|largeReadOpsCounter
operator|==
literal|null
condition|)
block|{
name|largeReadOpsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|LARGE_READ_OPS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeOpsCounter
operator|==
literal|null
condition|)
block|{
name|writeOpsCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|WRITE_OPS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readBytesEcCounter
operator|==
literal|null
operator|&&
name|scheme
operator|.
name|equals
argument_list|(
name|HDFS_URI_SCHEME
argument_list|)
condition|)
block|{
comment|// EC bytes only applies to hdfs
name|readBytesEcCounter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|scheme
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ_EC
argument_list|)
expr_stmt|;
block|}
name|long
name|readBytes
init|=
literal|0
decl_stmt|;
name|long
name|writeBytes
init|=
literal|0
decl_stmt|;
name|long
name|readOps
init|=
literal|0
decl_stmt|;
name|long
name|largeReadOps
init|=
literal|0
decl_stmt|;
name|long
name|writeOps
init|=
literal|0
decl_stmt|;
name|long
name|readBytesEC
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|stat
range|:
name|stats
control|)
block|{
name|readBytes
operator|=
name|readBytes
operator|+
name|stat
operator|.
name|getBytesRead
argument_list|()
expr_stmt|;
name|writeBytes
operator|=
name|writeBytes
operator|+
name|stat
operator|.
name|getBytesWritten
argument_list|()
expr_stmt|;
name|readOps
operator|=
name|readOps
operator|+
name|stat
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
name|largeReadOps
operator|=
name|largeReadOps
operator|+
name|stat
operator|.
name|getLargeReadOps
argument_list|()
expr_stmt|;
name|writeOps
operator|=
name|writeOps
operator|+
name|stat
operator|.
name|getWriteOps
argument_list|()
expr_stmt|;
name|readBytesEC
operator|=
name|readBytesEC
operator|+
name|stat
operator|.
name|getBytesReadErasureCoded
argument_list|()
expr_stmt|;
block|}
name|readBytesCounter
operator|.
name|setValue
argument_list|(
name|readBytes
argument_list|)
expr_stmt|;
name|writeBytesCounter
operator|.
name|setValue
argument_list|(
name|writeBytes
argument_list|)
expr_stmt|;
name|readOpsCounter
operator|.
name|setValue
argument_list|(
name|readOps
argument_list|)
expr_stmt|;
name|largeReadOpsCounter
operator|.
name|setValue
argument_list|(
name|largeReadOps
argument_list|)
expr_stmt|;
name|writeOpsCounter
operator|.
name|setValue
argument_list|(
name|writeOps
argument_list|)
expr_stmt|;
if|if
condition|(
name|readBytesEcCounter
operator|!=
literal|null
condition|)
block|{
name|readBytesEcCounter
operator|.
name|setValue
argument_list|(
name|readBytesEC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A Map where Key-> URIScheme and value->FileSystemStatisticUpdater    */
DECL|field|statisticUpdaters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FileSystemStatisticUpdater
argument_list|>
name|statisticUpdaters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileSystemStatisticUpdater
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|updateCounters ()
specifier|private
specifier|synchronized
name|void
name|updateCounters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Statistics
name|stat
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
name|String
name|uriScheme
init|=
name|stat
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|uriScheme
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|uriScheme
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|uriScheme
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileSystemStatisticUpdater
name|updater
init|=
name|statisticUpdaters
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updater
operator|==
literal|null
condition|)
block|{
comment|//new FileSystem has been found in the cache
name|updater
operator|=
operator|new
name|FileSystemStatisticUpdater
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|statisticUpdaters
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|updater
argument_list|)
expr_stmt|;
block|}
name|updater
operator|.
name|updateCounters
argument_list|()
expr_stmt|;
block|}
name|gcUpdater
operator|.
name|incrementGcCounter
argument_list|()
expr_stmt|;
name|updateResourceCounters
argument_list|()
expr_stmt|;
block|}
comment|/**    * Updates the {@link TaskCounter#COMMITTED_HEAP_BYTES} counter to reflect the    * current total committed heap space usage of this JVM.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|updateHeapUsageCounter ()
specifier|private
name|void
name|updateHeapUsageCounter
parameter_list|()
block|{
name|long
name|currentHeapUsage
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
decl_stmt|;
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|COMMITTED_HEAP_BYTES
argument_list|)
operator|.
name|setValue
argument_list|(
name|currentHeapUsage
argument_list|)
expr_stmt|;
block|}
DECL|method|done (TaskUmbilicalProtocol umbilical, TaskReporter reporter )
specifier|public
name|void
name|done
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|updateCounters
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskStatus
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|PREEMPTED
condition|)
block|{
comment|// If we are preempted, do no output promotion; signal done and exit
name|committer
operator|.
name|commitTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
name|umbilical
operator|.
name|preempted
argument_list|(
name|taskId
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
name|taskDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|stopCommunicationThread
argument_list|()
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Task:"
operator|+
name|taskId
operator|+
literal|" is done."
operator|+
literal|" And is in the process of committing"
argument_list|)
expr_stmt|;
name|boolean
name|commitRequired
init|=
name|isCommitRequired
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitRequired
condition|)
block|{
name|int
name|retries
init|=
name|MAX_RETRIES
decl_stmt|;
name|setState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|COMMIT_PENDING
argument_list|)
expr_stmt|;
comment|// say the task tracker that task is commit pending
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|umbilical
operator|.
name|commitPending
argument_list|(
name|taskId
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure sending commit pending: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|retries
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|67
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//wait for commit approval and commit
name|commit
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|,
name|committer
argument_list|)
expr_stmt|;
block|}
name|taskDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|stopCommunicationThread
argument_list|()
expr_stmt|;
comment|// Make sure we send at least one set of counter increments. It's
comment|// ok to call updateCounters() in this thread after comm thread stopped.
name|updateCounters
argument_list|()
expr_stmt|;
name|sendLastUpdate
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
comment|//signal the tasktracker that we are done
name|sendDone
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final Counters for "
operator|+
name|taskId
operator|+
literal|": "
operator|+
name|getCounters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      *   File System Counters      *           FILE: Number of bytes read=0      *           FILE: Number of bytes written=146972      *           ...      *   Map-Reduce Framework      *           Map output records=6      *           Map output records=6      *           ...      */
block|}
comment|/**    * Checks if this task has anything to commit, depending on the    * type of task, as well as on whether the {@link OutputCommitter}    * has anything to commit.    *     * @return true if the task has to commit    * @throws IOException    */
DECL|method|isCommitRequired ()
name|boolean
name|isCommitRequired
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|commitRequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isMapOrReduce
argument_list|()
condition|)
block|{
name|commitRequired
operator|=
name|committer
operator|.
name|needsTaskCommit
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
return|return
name|commitRequired
return|;
block|}
comment|/**    * Send a status update to the task tracker    * @param umbilical    * @throws IOException    */
DECL|method|statusUpdate (TaskUmbilicalProtocol umbilical)
specifier|public
name|void
name|statusUpdate
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|retries
init|=
name|MAX_RETRIES
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|umbilical
operator|.
name|statusUpdate
argument_list|(
name|getTaskID
argument_list|()
argument_list|,
name|taskStatus
argument_list|)
operator|.
name|getTaskFound
argument_list|()
condition|)
block|{
if|if
condition|(
name|uberized
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Task no longer available: "
operator|+
name|taskId
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parent died.  Exiting "
operator|+
name|taskId
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|66
argument_list|)
expr_stmt|;
block|}
block|}
name|taskStatus
operator|.
name|clearStatus
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// interrupt ourself
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure sending status update: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|retries
operator|==
literal|0
condition|)
block|{
throw|throw
name|ie
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Sends last status update before sending umbilical.done();     */
DECL|method|sendLastUpdate (TaskUmbilicalProtocol umbilical)
specifier|private
name|void
name|sendLastUpdate
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
block|{
name|taskStatus
operator|.
name|setOutputSize
argument_list|(
name|calculateOutputSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// send a final status report
name|taskStatus
operator|.
name|statusUpdate
argument_list|(
name|taskProgress
operator|.
name|get
argument_list|()
argument_list|,
name|taskProgress
operator|.
name|toString
argument_list|()
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|statusUpdate
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculates the size of output for this task.    *     * @return -1 if it can't be found.    */
DECL|method|calculateOutputSize ()
specifier|private
name|long
name|calculateOutputSize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMapOrReduce
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|isMapTask
argument_list|()
operator|&&
name|conf
operator|.
name|getNumReduceTasks
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Path
name|mapOutput
init|=
name|mapOutputFile
operator|.
name|getOutputFile
argument_list|()
decl_stmt|;
name|FileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|mapOutput
argument_list|)
operator|.
name|getLen
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find output size "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|sendDone (TaskUmbilicalProtocol umbilical)
specifier|private
name|void
name|sendDone
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|retries
init|=
name|MAX_RETRIES
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|umbilical
operator|.
name|done
argument_list|(
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task '"
operator|+
name|taskId
operator|+
literal|"' done."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure signalling completion: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|retries
operator|==
literal|0
condition|)
block|{
throw|throw
name|ie
throw|;
block|}
block|}
block|}
block|}
DECL|method|commit (TaskUmbilicalProtocol umbilical, TaskReporter reporter, org.apache.hadoop.mapreduce.OutputCommitter committer )
specifier|private
name|void
name|commit
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|retries
init|=
name|MAX_RETRIES
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
while|while
condition|(
operator|!
name|umbilical
operator|.
name|canCommit
argument_list|(
name|taskId
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|//ignore
block|}
name|reporter
operator|.
name|setProgressFlag
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure asking whether task can commit: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|retries
operator|==
literal|0
condition|)
block|{
comment|//if it couldn't query successfully then delete the output
name|discardOutput
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|68
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// task can Commit now
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskId
operator|+
literal|" is allowed to commit now"
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|iee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure committing: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|iee
argument_list|)
argument_list|)
expr_stmt|;
comment|//if it couldn't commit a successfully then delete the output
name|discardOutput
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
throw|throw
name|iee
throw|;
block|}
block|}
specifier|private
DECL|method|discardOutput (TaskAttemptContext taskContext)
name|void
name|discardOutput
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{
try|try
block|{
name|committer
operator|.
name|abortTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure cleaning up: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTaskCleanupTask (TaskUmbilicalProtocol umbilical, TaskReporter reporter)
specifier|protected
name|void
name|runTaskCleanupTask
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|taskCleanup
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
name|done
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
DECL|method|taskCleanup (TaskUmbilicalProtocol umbilical)
name|void
name|taskCleanup
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set phase for this task
name|setPhase
argument_list|(
name|TaskStatus
operator|.
name|Phase
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
name|getProgress
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"cleanup"
argument_list|)
expr_stmt|;
name|statusUpdate
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running cleanup for the task"
argument_list|)
expr_stmt|;
comment|// do the cleanup
name|committer
operator|.
name|abortTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
DECL|method|runJobCleanupTask (TaskUmbilicalProtocol umbilical, TaskReporter reporter )
specifier|protected
name|void
name|runJobCleanupTask
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// set phase for this task
name|setPhase
argument_list|(
name|TaskStatus
operator|.
name|Phase
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
name|getProgress
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"cleanup"
argument_list|)
expr_stmt|;
name|statusUpdate
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
comment|// do the cleanup
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up job"
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobRunStateForCleanup
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
operator|||
name|jobRunStateForCleanup
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting job with runstate : "
operator|+
name|jobRunStateForCleanup
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getUseNewMapper
argument_list|()
condition|)
block|{
name|committer
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|jobRunStateForCleanup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
name|oldCommitter
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
operator|)
name|committer
decl_stmt|;
name|oldCommitter
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|jobRunStateForCleanup
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|jobRunStateForCleanup
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Committing job"
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid state of the job for cleanup. State found "
operator|+
name|jobRunStateForCleanup
operator|+
literal|" expecting "
operator|+
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|+
literal|", "
operator|+
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
operator|+
literal|" or "
operator|+
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
throw|;
block|}
comment|// delete the staging area for the job
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keepTaskFiles
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
name|jobTempDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_DIR
argument_list|)
decl_stmt|;
name|Path
name|jobTempDirPath
init|=
operator|new
name|Path
argument_list|(
name|jobTempDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jobTempDirPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobTempDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|done
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
DECL|method|keepTaskFiles (JobConf conf)
specifier|protected
name|boolean
name|keepTaskFiles
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
operator|(
name|conf
operator|.
name|getKeepTaskFilesPattern
argument_list|()
operator|!=
literal|null
operator|||
name|conf
operator|.
name|getKeepFailedTaskFiles
argument_list|()
operator|)
return|;
block|}
DECL|method|runJobSetupTask (TaskUmbilicalProtocol umbilical, TaskReporter reporter )
specifier|protected
name|void
name|runJobSetupTask
parameter_list|(
name|TaskUmbilicalProtocol
name|umbilical
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// do the setup
name|getProgress
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"setup"
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|done
argument_list|(
name|umbilical
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|instanceof
name|JobConf
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|(
name|JobConf
operator|)
name|conf
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mapOutputFile
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|MRConfig
operator|.
name|TASK_LOCAL_OUTPUT_CLASS
argument_list|,
name|MROutputFiles
operator|.
name|class
argument_list|,
name|MapOutputFile
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|lDirAlloc
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
expr_stmt|;
comment|// add the static resolutions (this is required for the junit to
comment|// work on testcases that simulate multiple nodes on a single physical
comment|// node.
name|String
name|hostToResolved
index|[]
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|STATIC_RESOLUTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostToResolved
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|str
range|:
name|hostToResolved
control|)
block|{
name|String
name|name
init|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|resolvedName
init|=
name|str
operator|.
name|substring
argument_list|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|name
argument_list|,
name|resolvedName
argument_list|)
expr_stmt|;
block|}
block|}
name|uberized
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapreduce.task.uberized"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
DECL|method|getMapOutputFile ()
specifier|public
name|MapOutputFile
name|getMapOutputFile
parameter_list|()
block|{
return|return
name|mapOutputFile
return|;
block|}
comment|/**    * OutputCollector for the combiner.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombineOutputCollector
specifier|public
specifier|static
class|class
name|CombineOutputCollector
parameter_list|<
name|K
extends|extends
name|Object
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
implements|implements
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|writer
specifier|private
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
decl_stmt|;
DECL|field|outCounter
specifier|private
name|Counters
operator|.
name|Counter
name|outCounter
decl_stmt|;
DECL|field|progressable
specifier|private
name|Progressable
name|progressable
decl_stmt|;
DECL|field|progressBar
specifier|private
name|long
name|progressBar
decl_stmt|;
DECL|method|CombineOutputCollector (Counters.Counter outCounter, Progressable progressable, Configuration conf)
specifier|public
name|CombineOutputCollector
parameter_list|(
name|Counters
operator|.
name|Counter
name|outCounter
parameter_list|,
name|Progressable
name|progressable
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|outCounter
operator|=
name|outCounter
expr_stmt|;
name|this
operator|.
name|progressable
operator|=
name|progressable
expr_stmt|;
name|progressBar
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|COMBINE_RECORDS_BEFORE_PROGRESS
argument_list|,
name|DEFAULT_COMBINE_RECORDS_BEFORE_PROGRESS
argument_list|)
expr_stmt|;
block|}
DECL|method|setWriter (Writer<K, V> writer)
specifier|public
specifier|synchronized
name|void
name|setWriter
parameter_list|(
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
DECL|method|collect (K key, V value)
specifier|public
specifier|synchronized
name|void
name|collect
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|outCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|outCounter
operator|.
name|getValue
argument_list|()
operator|%
name|progressBar
operator|)
operator|==
literal|0
condition|)
block|{
name|progressable
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Iterates values while keys match in sorted input. */
DECL|class|ValuesIterator
specifier|static
class|class
name|ValuesIterator
parameter_list|<
name|KEY
parameter_list|,
name|VALUE
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|VALUE
argument_list|>
block|{
DECL|field|in
specifier|protected
name|RawKeyValueIterator
name|in
decl_stmt|;
comment|//input iterator
DECL|field|key
specifier|private
name|KEY
name|key
decl_stmt|;
comment|// current key
DECL|field|nextKey
specifier|private
name|KEY
name|nextKey
decl_stmt|;
DECL|field|value
specifier|private
name|VALUE
name|value
decl_stmt|;
comment|// current value
DECL|field|hasNext
specifier|private
name|boolean
name|hasNext
decl_stmt|;
comment|// more w/ this key
DECL|field|more
specifier|private
name|boolean
name|more
decl_stmt|;
comment|// more in file
DECL|field|comparator
specifier|private
name|RawComparator
argument_list|<
name|KEY
argument_list|>
name|comparator
decl_stmt|;
DECL|field|reporter
specifier|protected
name|Progressable
name|reporter
decl_stmt|;
DECL|field|keyDeserializer
specifier|private
name|Deserializer
argument_list|<
name|KEY
argument_list|>
name|keyDeserializer
decl_stmt|;
DECL|field|valDeserializer
specifier|private
name|Deserializer
argument_list|<
name|VALUE
argument_list|>
name|valDeserializer
decl_stmt|;
DECL|field|keyIn
specifier|private
name|DataInputBuffer
name|keyIn
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|valueIn
specifier|private
name|DataInputBuffer
name|valueIn
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|method|ValuesIterator (RawKeyValueIterator in, RawComparator<KEY> comparator, Class<KEY> keyClass, Class<VALUE> valClass, Configuration conf, Progressable reporter)
specifier|public
name|ValuesIterator
parameter_list|(
name|RawKeyValueIterator
name|in
parameter_list|,
name|RawComparator
argument_list|<
name|KEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|KEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|VALUE
argument_list|>
name|valClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|SerializationFactory
name|serializationFactory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|keyDeserializer
operator|=
name|serializationFactory
operator|.
name|getDeserializer
argument_list|(
name|keyClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyDeserializer
operator|.
name|open
argument_list|(
name|keyIn
argument_list|)
expr_stmt|;
name|this
operator|.
name|valDeserializer
operator|=
name|serializationFactory
operator|.
name|getDeserializer
argument_list|(
name|valClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|valDeserializer
operator|.
name|open
argument_list|(
name|this
operator|.
name|valueIn
argument_list|)
expr_stmt|;
name|readNextKey
argument_list|()
expr_stmt|;
name|key
operator|=
name|nextKey
expr_stmt|;
name|nextKey
operator|=
literal|null
expr_stmt|;
comment|// force new instance creation
name|hasNext
operator|=
name|more
expr_stmt|;
block|}
DECL|method|getRawIterator ()
name|RawKeyValueIterator
name|getRawIterator
parameter_list|()
block|{
return|return
name|in
return|;
block|}
comment|/// Iterator methods
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasNext
return|;
block|}
DECL|field|ctr
specifier|private
name|int
name|ctr
init|=
literal|0
decl_stmt|;
DECL|method|next ()
specifier|public
name|VALUE
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"iterate past last value"
argument_list|)
throw|;
block|}
try|try
block|{
name|readNextValue
argument_list|()
expr_stmt|;
name|readNextKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem advancing post rec#"
operator|+
name|ctr
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
comment|/// Auxiliary methods
comment|/** Start processing next unique key. */
DECL|method|nextKey ()
specifier|public
name|void
name|nextKey
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read until we find a new key
while|while
condition|(
name|hasNext
condition|)
block|{
name|readNextKey
argument_list|()
expr_stmt|;
block|}
operator|++
name|ctr
expr_stmt|;
comment|// move the next key to the current one
name|KEY
name|tmpKey
init|=
name|key
decl_stmt|;
name|key
operator|=
name|nextKey
expr_stmt|;
name|nextKey
operator|=
name|tmpKey
expr_stmt|;
name|hasNext
operator|=
name|more
expr_stmt|;
block|}
comment|/** True iff more keys remain. */
DECL|method|more ()
specifier|public
name|boolean
name|more
parameter_list|()
block|{
return|return
name|more
return|;
block|}
comment|/** The current key. */
DECL|method|getKey ()
specifier|public
name|KEY
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**       * read the next key       */
DECL|method|readNextKey ()
specifier|private
name|void
name|readNextKey
parameter_list|()
throws|throws
name|IOException
block|{
name|more
operator|=
name|in
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|more
condition|)
block|{
name|DataInputBuffer
name|nextKeyBytes
init|=
name|in
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|keyIn
operator|.
name|reset
argument_list|(
name|nextKeyBytes
operator|.
name|getData
argument_list|()
argument_list|,
name|nextKeyBytes
operator|.
name|getPosition
argument_list|()
argument_list|,
name|nextKeyBytes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nextKey
operator|=
name|keyDeserializer
operator|.
name|deserialize
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
name|hasNext
operator|=
name|key
operator|!=
literal|null
operator|&&
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|nextKey
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Read the next value      * @throws IOException      */
DECL|method|readNextValue ()
specifier|private
name|void
name|readNextValue
parameter_list|()
throws|throws
name|IOException
block|{
name|DataInputBuffer
name|nextValueBytes
init|=
name|in
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|valueIn
operator|.
name|reset
argument_list|(
name|nextValueBytes
operator|.
name|getData
argument_list|()
argument_list|,
name|nextValueBytes
operator|.
name|getPosition
argument_list|()
argument_list|,
name|nextValueBytes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|valDeserializer
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Iterator to return Combined values */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombineValuesIterator
specifier|public
specifier|static
class|class
name|CombineValuesIterator
parameter_list|<
name|KEY
parameter_list|,
name|VALUE
parameter_list|>
extends|extends
name|ValuesIterator
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
block|{
DECL|field|combineInputCounter
specifier|private
specifier|final
name|Counters
operator|.
name|Counter
name|combineInputCounter
decl_stmt|;
DECL|method|CombineValuesIterator (RawKeyValueIterator in, RawComparator<KEY> comparator, Class<KEY> keyClass, Class<VALUE> valClass, Configuration conf, Reporter reporter, Counters.Counter combineInputCounter)
specifier|public
name|CombineValuesIterator
parameter_list|(
name|RawKeyValueIterator
name|in
parameter_list|,
name|RawComparator
argument_list|<
name|KEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|KEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|VALUE
argument_list|>
name|valClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|Counters
operator|.
name|Counter
name|combineInputCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|this
operator|.
name|combineInputCounter
operator|=
name|combineInputCounter
expr_stmt|;
block|}
DECL|method|next ()
specifier|public
name|VALUE
name|next
parameter_list|()
block|{
name|combineInputCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
specifier|static
parameter_list|<
name|INKEY
parameter_list|,
name|INVALUE
parameter_list|,
name|OUTKEY
parameter_list|,
name|OUTVALUE
parameter_list|>
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
operator|.
name|Context
DECL|method|createReduceContext (org.apache.hadoop.mapreduce.Reducer <INKEY,INVALUE,OUTKEY,OUTVALUE> reducer, Configuration job, org.apache.hadoop.mapreduce.TaskAttemptID taskId, RawKeyValueIterator rIter, org.apache.hadoop.mapreduce.Counter inputKeyCounter, org.apache.hadoop.mapreduce.Counter inputValueCounter, org.apache.hadoop.mapreduce.RecordWriter<OUTKEY,OUTVALUE> output, org.apache.hadoop.mapreduce.OutputCommitter committer, org.apache.hadoop.mapreduce.StatusReporter reporter, RawComparator<INKEY> comparator, Class<INKEY> keyClass, Class<INVALUE> valueClass )
name|createReduceContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|reducer
parameter_list|,
name|Configuration
name|job
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskId
parameter_list|,
name|RawKeyValueIterator
name|rIter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|inputKeyCounter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|inputValueCounter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|output
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
name|reporter
parameter_list|,
name|RawComparator
argument_list|<
name|INKEY
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|INKEY
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|INVALUE
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ReduceContext
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
name|reduceContext
init|=
operator|new
name|ReduceContextImpl
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
argument_list|(
name|job
argument_list|,
name|taskId
argument_list|,
name|rIter
argument_list|,
name|inputKeyCounter
argument_list|,
name|inputValueCounter
argument_list|,
name|output
argument_list|,
name|committer
argument_list|,
name|reporter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
operator|.
name|Context
name|reducerContext
init|=
operator|new
name|WrappedReducer
argument_list|<
name|INKEY
argument_list|,
name|INVALUE
argument_list|,
name|OUTKEY
argument_list|,
name|OUTVALUE
argument_list|>
argument_list|()
operator|.
name|getReducerContext
argument_list|(
name|reduceContext
argument_list|)
decl_stmt|;
return|return
name|reducerContext
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombinerRunner
specifier|public
specifier|static
specifier|abstract
class|class
name|CombinerRunner
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|inputCounter
specifier|protected
specifier|final
name|Counters
operator|.
name|Counter
name|inputCounter
decl_stmt|;
DECL|field|job
specifier|protected
specifier|final
name|JobConf
name|job
decl_stmt|;
DECL|field|reporter
specifier|protected
specifier|final
name|TaskReporter
name|reporter
decl_stmt|;
DECL|method|CombinerRunner (Counters.Counter inputCounter, JobConf job, TaskReporter reporter)
name|CombinerRunner
parameter_list|(
name|Counters
operator|.
name|Counter
name|inputCounter
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|inputCounter
operator|=
name|inputCounter
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * Run the combiner over a set of inputs.      * @param iterator the key/value pairs to use as input      * @param collector the output collector      */
DECL|method|combine (RawKeyValueIterator iterator, OutputCollector<K,V> collector )
specifier|public
specifier|abstract
name|void
name|combine
parameter_list|(
name|RawKeyValueIterator
name|iterator
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
DECL|method|create (JobConf job, TaskAttemptID taskId, Counters.Counter inputCounter, TaskReporter reporter, org.apache.hadoop.mapreduce.OutputCommitter committer )
name|CombinerRunner
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|Counters
operator|.
name|Counter
name|inputCounter
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
operator|)
name|job
operator|.
name|getCombinerClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|OldCombinerRunner
argument_list|(
name|cls
argument_list|,
name|job
argument_list|,
name|inputCounter
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|// make a task context so we can get the classes
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
argument_list|(
name|job
argument_list|,
name|taskId
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|newcls
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
operator|)
name|taskContext
operator|.
name|getCombinerClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|newcls
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|NewCombinerRunner
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|newcls
argument_list|,
name|job
argument_list|,
name|taskId
argument_list|,
name|taskContext
argument_list|,
name|inputCounter
argument_list|,
name|reporter
argument_list|,
name|committer
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OldCombinerRunner
specifier|protected
specifier|static
class|class
name|OldCombinerRunner
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|CombinerRunner
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|combinerClass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|combinerClass
decl_stmt|;
DECL|field|keyClass
specifier|private
specifier|final
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
decl_stmt|;
DECL|field|valueClass
specifier|private
specifier|final
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|OldCombinerRunner (Class<? extends Reducer<K,V,K,V>> cls, JobConf conf, Counters.Counter inputCounter, TaskReporter reporter)
specifier|protected
name|OldCombinerRunner
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|cls
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Counters
operator|.
name|Counter
name|inputCounter
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
block|{
name|super
argument_list|(
name|inputCounter
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|combinerClass
operator|=
name|cls
expr_stmt|;
name|keyClass
operator|=
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
expr_stmt|;
name|valueClass
operator|=
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
expr_stmt|;
name|comparator
operator|=
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|job
operator|.
name|getCombinerKeyGroupingComparator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|combine (RawKeyValueIterator kvIter, OutputCollector<K,V> combineCollector )
specifier|public
name|void
name|combine
parameter_list|(
name|RawKeyValueIterator
name|kvIter
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|combineCollector
parameter_list|)
throws|throws
name|IOException
block|{
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
name|combiner
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|combinerClass
argument_list|,
name|job
argument_list|)
decl_stmt|;
try|try
block|{
name|CombineValuesIterator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|values
init|=
operator|new
name|CombineValuesIterator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|kvIter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|,
name|inputCounter
argument_list|)
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|more
argument_list|()
condition|)
block|{
name|combiner
operator|.
name|reduce
argument_list|(
name|values
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|combineCollector
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|values
operator|.
name|nextKey
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|combiner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NewCombinerRunner
specifier|protected
specifier|static
class|class
name|NewCombinerRunner
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|CombinerRunner
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|field|reducerClass
name|reducerClass
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskId
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|RawComparator
argument_list|<
name|K
argument_list|>
name|comparator
decl_stmt|;
DECL|field|keyClass
specifier|private
specifier|final
name|Class
argument_list|<
name|K
argument_list|>
name|keyClass
decl_stmt|;
DECL|field|valueClass
specifier|private
specifier|final
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
decl_stmt|;
DECL|field|committer
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|NewCombinerRunner (Class reducerClass, JobConf job, org.apache.hadoop.mapreduce.TaskAttemptID taskId, org.apache.hadoop.mapreduce.TaskAttemptContext context, Counters.Counter inputCounter, TaskReporter reporter, org.apache.hadoop.mapreduce.OutputCommitter committer)
name|NewCombinerRunner
parameter_list|(
name|Class
name|reducerClass
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskId
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|context
parameter_list|,
name|Counters
operator|.
name|Counter
name|inputCounter
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
name|committer
parameter_list|)
block|{
name|super
argument_list|(
name|inputCounter
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|this
operator|.
name|reducerClass
operator|=
name|reducerClass
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|keyClass
operator|=
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|context
operator|.
name|getMapOutputKeyClass
argument_list|()
expr_stmt|;
name|valueClass
operator|=
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|context
operator|.
name|getMapOutputValueClass
argument_list|()
expr_stmt|;
name|comparator
operator|=
operator|(
name|RawComparator
argument_list|<
name|K
argument_list|>
operator|)
name|context
operator|.
name|getCombinerKeyGroupingComparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|committer
operator|=
name|committer
expr_stmt|;
block|}
DECL|class|OutputConverter
specifier|private
specifier|static
class|class
name|OutputConverter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|output
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
decl_stmt|;
DECL|method|OutputConverter (OutputCollector<K,V> output)
name|OutputConverter
parameter_list|(
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (org.apache.hadoop.mapreduce.TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|context
parameter_list|)
block|{       }
annotation|@
name|Override
DECL|method|write (K key, V value )
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|combine (RawKeyValueIterator iterator, OutputCollector<K,V> collector )
specifier|public
name|void
name|combine
parameter_list|(
name|RawKeyValueIterator
name|iterator
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// make a reducer
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
name|reducer
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reducerClass
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
operator|.
name|Context
name|reducerContext
init|=
name|createReduceContext
argument_list|(
name|reducer
argument_list|,
name|job
argument_list|,
name|taskId
argument_list|,
name|iterator
argument_list|,
literal|null
argument_list|,
name|inputCounter
argument_list|,
operator|new
name|OutputConverter
argument_list|(
name|collector
argument_list|)
argument_list|,
name|committer
argument_list|,
name|reporter
argument_list|,
name|comparator
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|)
decl_stmt|;
name|reducer
operator|.
name|run
argument_list|(
name|reducerContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExtraData ()
name|BytesWritable
name|getExtraData
parameter_list|()
block|{
return|return
name|extraData
return|;
block|}
DECL|method|setExtraData (BytesWritable extraData)
name|void
name|setExtraData
parameter_list|(
name|BytesWritable
name|extraData
parameter_list|)
block|{
name|this
operator|.
name|extraData
operator|=
name|extraData
expr_stmt|;
block|}
block|}
end_class

end_unit

