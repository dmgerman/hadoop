begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * A factory which creates any named committer identified  * in the option {@link PathOutputCommitterFactory#NAMED_COMMITTER_CLASS}.  */
end_comment

begin_class
DECL|class|NamedCommitterFactory
specifier|public
specifier|final
class|class
name|NamedCommitterFactory
extends|extends
name|PathOutputCommitterFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NamedCommitterFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JavaReflectionMemberAccess"
argument_list|)
annotation|@
name|Override
DECL|method|createOutputCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|PathOutputCommitter
argument_list|>
name|clazz
init|=
name|loadCommitterClass
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using PathOutputCommitter implementation {}"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|PathOutputCommitter
argument_list|>
name|ctor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Path
operator|.
name|class
argument_list|,
name|TaskAttemptContext
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create "
operator|+
name|clazz
operator|+
literal|":"
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Load the class named in {@link #NAMED_COMMITTER_CLASS}.    * @param context job or task context    * @return the committer class    * @throws IOException if no committer was defined.    */
DECL|method|loadCommitterClass ( JobContext context)
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|PathOutputCommitter
argument_list|>
name|loadCommitterClass
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|,
literal|"null context"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No committer defined in "
operator|+
name|NAMED_COMMITTER_CLASS
argument_list|)
throw|;
block|}
return|return
name|conf
operator|.
name|getClass
argument_list|(
name|NAMED_COMMITTER_CLASS
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|PathOutputCommitter
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

