begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|JobHistoryEventUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_comment
comment|/**  * Event to record the failure of a task  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskFailedEvent
specifier|public
class|class
name|TaskFailedEvent
implements|implements
name|HistoryEvent
block|{
DECL|field|datum
specifier|private
name|TaskFailed
name|datum
init|=
literal|null
decl_stmt|;
DECL|field|failedDueToAttempt
specifier|private
name|TaskAttemptID
name|failedDueToAttempt
decl_stmt|;
DECL|field|id
specifier|private
name|TaskID
name|id
decl_stmt|;
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|status
specifier|private
name|String
name|status
decl_stmt|;
DECL|field|error
specifier|private
name|String
name|error
decl_stmt|;
DECL|field|counters
specifier|private
name|Counters
name|counters
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|EMPTY_COUNTERS
specifier|private
specifier|static
specifier|final
name|Counters
name|EMPTY_COUNTERS
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
comment|/**    * Create an event to record task failure.    * @param id Task ID    * @param finishTime Finish time of the task    * @param taskType Type of the task    * @param error Error String    * @param status Status    * @param failedDueToAttempt The attempt id due to which the task failed    * @param counters Counters for the task    * @param startTs task start time.    */
DECL|method|TaskFailedEvent (TaskID id, long finishTime, TaskType taskType, String error, String status, TaskAttemptID failedDueToAttempt, Counters counters, long startTs)
specifier|public
name|TaskFailedEvent
parameter_list|(
name|TaskID
name|id
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|error
parameter_list|,
name|String
name|status
parameter_list|,
name|TaskAttemptID
name|failedDueToAttempt
parameter_list|,
name|Counters
name|counters
parameter_list|,
name|long
name|startTs
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|failedDueToAttempt
operator|=
name|failedDueToAttempt
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTs
expr_stmt|;
block|}
DECL|method|TaskFailedEvent (TaskID id, long finishTime, TaskType taskType, String error, String status, TaskAttemptID failedDueToAttempt, Counters counters)
specifier|public
name|TaskFailedEvent
parameter_list|(
name|TaskID
name|id
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|error
parameter_list|,
name|String
name|status
parameter_list|,
name|TaskAttemptID
name|failedDueToAttempt
parameter_list|,
name|Counters
name|counters
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|finishTime
argument_list|,
name|taskType
argument_list|,
name|error
argument_list|,
name|status
argument_list|,
name|failedDueToAttempt
argument_list|,
name|counters
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskFailedEvent (TaskID id, long finishTime, TaskType taskType, String error, String status, TaskAttemptID failedDueToAttempt)
specifier|public
name|TaskFailedEvent
parameter_list|(
name|TaskID
name|id
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|error
parameter_list|,
name|String
name|status
parameter_list|,
name|TaskAttemptID
name|failedDueToAttempt
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|finishTime
argument_list|,
name|taskType
argument_list|,
name|error
argument_list|,
name|status
argument_list|,
name|failedDueToAttempt
argument_list|,
name|EMPTY_COUNTERS
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskFailedEvent ()
name|TaskFailedEvent
parameter_list|()
block|{}
DECL|method|getDatum ()
specifier|public
name|Object
name|getDatum
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|==
literal|null
condition|)
block|{
name|datum
operator|=
operator|new
name|TaskFailed
argument_list|()
expr_stmt|;
name|datum
operator|.
name|setTaskid
argument_list|(
operator|new
name|Utf8
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setError
argument_list|(
operator|new
name|Utf8
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setTaskType
argument_list|(
operator|new
name|Utf8
argument_list|(
name|taskType
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFailedDueToAttempt
argument_list|(
name|failedDueToAttempt
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Utf8
argument_list|(
name|failedDueToAttempt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setStatus
argument_list|(
operator|new
name|Utf8
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setCounters
argument_list|(
name|EventWriter
operator|.
name|toAvro
argument_list|(
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|datum
return|;
block|}
DECL|method|setDatum (Object odatum)
specifier|public
name|void
name|setDatum
parameter_list|(
name|Object
name|odatum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
operator|(
name|TaskFailed
operator|)
name|odatum
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|TaskID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|getTaskid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|TaskType
operator|.
name|valueOf
argument_list|(
name|datum
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|datum
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|datum
operator|.
name|getError
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|failedDueToAttempt
operator|=
name|datum
operator|.
name|getFailedDueToAttempt
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|getFailedDueToAttempt
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|datum
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|EventReader
operator|.
name|fromAvro
argument_list|(
name|datum
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Gets the task id. */
DECL|method|getTaskId ()
specifier|public
name|TaskID
name|getTaskId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/** Gets the error string. */
DECL|method|getError ()
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/** Gets the finish time of the attempt. */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
comment|/**    * Gets the task start time to be reported to ATSv2.    * @return task start time.    */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/** Gets the task type. */
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
comment|/** Gets the attempt id due to which the task failed. */
DECL|method|getFailedAttemptID ()
specifier|public
name|TaskAttemptID
name|getFailedAttemptID
parameter_list|()
block|{
return|return
name|failedDueToAttempt
return|;
block|}
comment|/**    * Gets the task status.    * @return task status    */
DECL|method|getTaskStatus ()
specifier|public
name|String
name|getTaskStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/** Gets task counters. */
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
comment|/** Gets the event type. */
DECL|method|getEventType ()
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
return|return
name|EventType
operator|.
name|TASK_FAILED
return|;
block|}
annotation|@
name|Override
DECL|method|toTimelineEvent ()
specifier|public
name|TimelineEvent
name|toTimelineEvent
parameter_list|()
block|{
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setId
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|getEventType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"ERROR"
argument_list|,
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"FAILED_ATTEMPT_ID"
argument_list|,
name|getFailedAttemptID
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getFailedAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tEvent
return|;
block|}
annotation|@
name|Override
DECL|method|getTimelineMetrics ()
specifier|public
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|getTimelineMetrics
parameter_list|()
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|JobHistoryEventUtils
operator|.
name|countersToTimelineMetric
argument_list|(
name|getCounters
argument_list|()
argument_list|,
name|finishTime
argument_list|)
decl_stmt|;
return|return
name|metrics
return|;
block|}
block|}
end_class

end_unit

