begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskTrackerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|LogParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogDumper
import|;
end_import

begin_comment
comment|/**  * Interprets the map reduce cli options   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CLI
specifier|public
class|class
name|CLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|protected
name|Cluster
name|cluster
decl_stmt|;
DECL|field|taskTypes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|taskTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map"
argument_list|,
literal|"reduce"
argument_list|,
literal|"setup"
argument_list|,
literal|"cleanup"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|taskStates
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|taskStates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"pending"
argument_list|,
literal|"running"
argument_list|,
literal|"completed"
argument_list|,
literal|"failed"
argument_list|,
literal|"killed"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|CLI ()
specifier|public
name|CLI
parameter_list|()
block|{   }
DECL|method|CLI (Configuration conf)
specifier|public
name|CLI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|displayUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|// process arguments
name|String
name|cmd
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
name|String
name|submitJobFile
init|=
literal|null
decl_stmt|;
name|String
name|jobid
init|=
literal|null
decl_stmt|;
name|String
name|taskid
init|=
literal|null
decl_stmt|;
name|String
name|historyFile
init|=
literal|null
decl_stmt|;
name|String
name|counterGroupName
init|=
literal|null
decl_stmt|;
name|String
name|counterName
init|=
literal|null
decl_stmt|;
name|JobPriority
name|jp
init|=
literal|null
decl_stmt|;
name|String
name|taskType
init|=
literal|null
decl_stmt|;
name|String
name|taskState
init|=
literal|null
decl_stmt|;
name|int
name|fromEvent
init|=
literal|0
decl_stmt|;
name|int
name|nEvents
init|=
literal|0
decl_stmt|;
name|boolean
name|getStatus
init|=
literal|false
decl_stmt|;
name|boolean
name|getCounter
init|=
literal|false
decl_stmt|;
name|boolean
name|killJob
init|=
literal|false
decl_stmt|;
name|boolean
name|listEvents
init|=
literal|false
decl_stmt|;
name|boolean
name|viewHistory
init|=
literal|false
decl_stmt|;
name|boolean
name|viewAllHistory
init|=
literal|false
decl_stmt|;
name|boolean
name|listJobs
init|=
literal|false
decl_stmt|;
name|boolean
name|listAllJobs
init|=
literal|false
decl_stmt|;
name|boolean
name|listActiveTrackers
init|=
literal|false
decl_stmt|;
name|boolean
name|listBlacklistedTrackers
init|=
literal|false
decl_stmt|;
name|boolean
name|displayTasks
init|=
literal|false
decl_stmt|;
name|boolean
name|killTask
init|=
literal|false
decl_stmt|;
name|boolean
name|failTask
init|=
literal|false
decl_stmt|;
name|boolean
name|setJobPriority
init|=
literal|false
decl_stmt|;
name|boolean
name|logs
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"-submit"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|submitJobFile
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-status"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
name|getStatus
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-counter"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|getCounter
operator|=
literal|true
expr_stmt|;
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
name|counterGroupName
operator|=
name|argv
index|[
literal|2
index|]
expr_stmt|;
name|counterName
operator|=
name|argv
index|[
literal|3
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-kill"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
name|killJob
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-set-priority"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
try|try
block|{
name|jp
operator|=
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|iae
argument_list|)
expr_stmt|;
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|setJobPriority
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-events"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
name|fromEvent
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nEvents
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|argv
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|listEvents
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-history"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
operator|&&
operator|!
operator|(
name|argv
operator|.
name|length
operator|==
literal|3
operator|&&
literal|"all"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
operator|)
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|viewHistory
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|3
operator|&&
literal|"all"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|viewAllHistory
operator|=
literal|true
expr_stmt|;
name|historyFile
operator|=
name|argv
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|historyFile
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-list"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
operator|&&
operator|!
operator|(
name|argv
operator|.
name|length
operator|==
literal|2
operator|&&
literal|"all"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
operator|)
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|2
operator|&&
literal|"all"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|listAllJobs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|listJobs
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-kill-task"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|killTask
operator|=
literal|true
expr_stmt|;
name|taskid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fail-task"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|failTask
operator|=
literal|true
expr_stmt|;
name|taskid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-active-trackers"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|listActiveTrackers
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-blacklisted-trackers"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|listBlacklistedTrackers
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-attempt-ids"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
name|taskType
operator|=
name|argv
index|[
literal|2
index|]
expr_stmt|;
name|taskState
operator|=
name|argv
index|[
literal|3
index|]
expr_stmt|;
name|displayTasks
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-logs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|2
operator|||
name|argv
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|logs
operator|=
literal|true
expr_stmt|;
name|jobid
operator|=
name|argv
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|taskid
operator|=
name|argv
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|taskid
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
else|else
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|// initialize cluster
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the request
try|try
block|{
if|if
condition|(
name|submitJobFile
operator|!=
literal|null
condition|)
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
operator|new
name|JobConf
argument_list|(
name|submitJobFile
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getStatus
condition|)
block|{
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Counters not available. Job is retired."
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|getCounter
condition|)
block|{
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Counters not available for retired job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getCounter
argument_list|(
name|counters
argument_list|,
name|counterGroupName
argument_list|,
name|counterName
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|killJob
condition|)
block|{
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killed job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|setJobPriority
condition|)
block|{
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|setPriority
argument_list|(
name|jp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Changed job priority."
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|viewHistory
condition|)
block|{
name|viewHistory
argument_list|(
name|historyFile
argument_list|,
name|viewAllHistory
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listEvents
condition|)
block|{
name|listEvents
argument_list|(
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
argument_list|,
name|fromEvent
argument_list|,
name|nEvents
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listJobs
condition|)
block|{
name|listJobs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listAllJobs
condition|)
block|{
name|listAllJobs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listActiveTrackers
condition|)
block|{
name|listActiveTrackers
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listBlacklistedTrackers
condition|)
block|{
name|listBlacklistedTrackers
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayTasks
condition|)
block|{
name|displayTasks
argument_list|(
name|cluster
operator|.
name|getJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
argument_list|)
argument_list|,
name|taskType
argument_list|,
name|taskState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|killTask
condition|)
block|{
name|TaskAttemptID
name|taskID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|killTask
argument_list|(
name|taskID
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killed task "
operator|+
name|taskid
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not kill task "
operator|+
name|taskid
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|failTask
condition|)
block|{
name|TaskAttemptID
name|taskID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|cluster
operator|.
name|getJob
argument_list|(
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find job "
operator|+
name|jobid
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|failTask
argument_list|(
name|taskID
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killed task "
operator|+
name|taskID
operator|+
literal|" by failing it"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not fail task "
operator|+
name|taskid
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|logs
condition|)
block|{
try|try
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taskAttemptID
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
name|LogParams
name|logParams
init|=
name|cluster
operator|.
name|getLogParams
argument_list|(
name|jobID
argument_list|,
name|taskAttemptID
argument_list|)
decl_stmt|;
name|LogDumper
name|logDumper
init|=
operator|new
name|LogDumper
argument_list|()
decl_stmt|;
name|logDumper
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|logDumper
operator|.
name|dumpAContainersLogs
argument_list|(
name|logParams
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|logParams
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|logParams
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|logParams
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|unwrappedException
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrappedException
operator|instanceof
name|AccessControlException
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|unwrappedException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|re
throw|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|getJobPriorityNames ()
specifier|private
name|String
name|getJobPriorityNames
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|JobPriority
name|p
range|:
name|JobPriority
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|p
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getTaskTypess ()
specifier|private
name|String
name|getTaskTypess
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskType
name|t
range|:
name|TaskType
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Display usage of the command-line tool and terminate execution.    */
DECL|method|displayUsage (String cmd)
specifier|private
name|void
name|displayUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: CLI "
decl_stmt|;
name|String
name|jobPriorityValues
init|=
name|getJobPriorityNames
argument_list|()
decl_stmt|;
name|String
name|taskTypes
init|=
name|getTaskTypess
argument_list|()
decl_stmt|;
name|String
name|taskStates
init|=
literal|"running, completed"
decl_stmt|;
if|if
condition|(
literal|"-submit"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-file>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-status"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-kill"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-counter"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id><group-name><counter-name>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-events"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id><from-event-#><#-of-events>]. Event #s start from 1."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-history"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<jobHistoryFile>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|" [all]]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-kill-task"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-fail-task"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<task-attempt-id>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-set-priority"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id><priority>]. "
operator|+
literal|"Valid values for priorities are: "
operator|+
name|jobPriorityValues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-active-trackers"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-blacklisted-trackers"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-list-attempt-ids"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id><task-type><task-state>]. "
operator|+
literal|"Valid values for<task-type> are "
operator|+
name|taskTypes
operator|+
literal|". "
operator|+
literal|"Valid values for<task-state> are "
operator|+
name|taskStates
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-logs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-id><task-attempt-id>]. "
operator|+
literal|"<task-attempt-id> is optional to get task attempt logs."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|prefix
operator|+
literal|"<command><args>\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-submit<job-file>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-status<job-id>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-counter<job-id><group-name><counter-name>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-kill<job-id>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-set-priority<job-id><priority>]. "
operator|+
literal|"Valid values for priorities are: "
operator|+
name|jobPriorityValues
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-events<job-id><from-event-#><#-of-events>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-history<jobHistoryFile>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-list [all]]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-list-active-trackers]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-list-blacklisted-trackers]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t[-list-attempt-ids<job-id><task-type> "
operator|+
literal|"<task-state>]. "
operator|+
literal|"Valid values for<task-type> are "
operator|+
name|taskTypes
operator|+
literal|". "
operator|+
literal|"Valid values for<task-state> are "
operator|+
name|taskStates
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-kill-task<task-attempt-id>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-fail-task<task-attempt-id>]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-logs<job-id><task-attempt-id>]\n\n"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|viewHistory (String historyFile, boolean all)
specifier|private
name|void
name|viewHistory
parameter_list|(
name|String
name|historyFile
parameter_list|,
name|boolean
name|all
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryViewer
name|historyViewer
init|=
operator|new
name|HistoryViewer
argument_list|(
name|historyFile
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|all
argument_list|)
decl_stmt|;
name|historyViewer
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
DECL|method|getCounter (Counters counters, String counterGroupName, String counterName)
specifier|protected
name|long
name|getCounter
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|String
name|counterGroupName
parameter_list|,
name|String
name|counterName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|counters
operator|.
name|findCounter
argument_list|(
name|counterGroupName
argument_list|,
name|counterName
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * List the events for the given job    * @param jobId the job id for the job's events to list    * @throws IOException    */
DECL|method|listEvents (Job job, int fromEventId, int numEvents)
specifier|private
name|void
name|listEvents
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|numEvents
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TaskCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
name|fromEventId
argument_list|,
name|numEvents
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task completion events for "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of events (from "
operator|+
name|fromEventId
operator|+
literal|") are: "
operator|+
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|event
range|:
name|events
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
operator|+
literal|" "
operator|+
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|+
literal|" "
operator|+
name|getTaskLogURL
argument_list|(
name|event
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskTrackerHttp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTaskLogURL (TaskAttemptID taskId, String baseUrl)
specifier|protected
specifier|static
name|String
name|getTaskLogURL
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|baseUrl
parameter_list|)
block|{
return|return
operator|(
name|baseUrl
operator|+
literal|"/tasklog?plaintext=true&attemptid="
operator|+
name|taskId
operator|)
return|;
block|}
comment|/**    * Dump a list of currently running jobs    * @throws IOException    */
DECL|method|listJobs (Cluster cluster)
specifier|private
name|void
name|listJobs
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|JobStatus
argument_list|>
name|runningJobs
init|=
operator|new
name|ArrayList
argument_list|<
name|JobStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JobStatus
name|job
range|:
name|cluster
operator|.
name|getAllJobStatuses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|runningJobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
name|displayJobList
argument_list|(
name|runningJobs
operator|.
name|toArray
argument_list|(
operator|new
name|JobStatus
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump a list of all jobs submitted.    * @throws IOException    */
DECL|method|listAllJobs (Cluster cluster)
specifier|private
name|void
name|listAllJobs
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|displayJobList
argument_list|(
name|cluster
operator|.
name|getAllJobStatuses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Display the list of active trackers    */
DECL|method|listActiveTrackers (Cluster cluster)
specifier|private
name|void
name|listActiveTrackers
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TaskTrackerInfo
index|[]
name|trackers
init|=
name|cluster
operator|.
name|getActiveTaskTrackers
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskTrackerInfo
name|tracker
range|:
name|trackers
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tracker
operator|.
name|getTaskTrackerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Display the list of blacklisted trackers    */
DECL|method|listBlacklistedTrackers (Cluster cluster)
specifier|private
name|void
name|listBlacklistedTrackers
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TaskTrackerInfo
index|[]
name|trackers
init|=
name|cluster
operator|.
name|getBlackListedTaskTrackers
argument_list|()
decl_stmt|;
if|if
condition|(
name|trackers
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BlackListedNode \t Reason"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskTrackerInfo
name|tracker
range|:
name|trackers
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tracker
operator|.
name|getTaskTrackerName
argument_list|()
operator|+
literal|"\t"
operator|+
name|tracker
operator|.
name|getReasonForBlacklist
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printTaskAttempts (TaskReport report)
specifier|private
name|void
name|printTaskAttempts
parameter_list|(
name|TaskReport
name|report
parameter_list|)
block|{
if|if
condition|(
name|report
operator|.
name|getCurrentStatus
argument_list|()
operator|==
name|TIPStatus
operator|.
name|COMPLETE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|getSuccessfulTaskAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|report
operator|.
name|getCurrentStatus
argument_list|()
operator|==
name|TIPStatus
operator|.
name|RUNNING
condition|)
block|{
for|for
control|(
name|TaskAttemptID
name|t
range|:
name|report
operator|.
name|getRunningTaskAttemptIds
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Display the information about a job's tasks, of a particular type and    * in a particular state    *     * @param job the job    * @param type the type of the task (map/reduce/setup/cleanup)    * @param state the state of the task     * (pending/running/completed/failed/killed)    * @throws IOException when there is an error communicating with the master    * @throws InterruptedException    * @throws IllegalArgumentException if an invalid type/state is passed    */
DECL|method|displayTasks (Job job, String type, String state)
specifier|protected
name|void
name|displayTasks
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|taskTypes
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
operator|+
literal|". Valid types for task are: map, reduce, setup, cleanup."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|taskStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Invalid state: "
operator|+
name|state
operator|+
literal|". Valid states for task are: pending, running, completed, failed, killed."
argument_list|)
throw|;
block|}
name|TaskReport
index|[]
name|reports
init|=
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskReport
name|report
range|:
name|reports
control|)
block|{
name|TIPStatus
name|status
init|=
name|report
operator|.
name|getCurrentStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|state
operator|.
name|equals
argument_list|(
literal|"pending"
argument_list|)
operator|&&
name|status
operator|==
name|TIPStatus
operator|.
name|PENDING
operator|)
operator|||
operator|(
name|state
operator|.
name|equals
argument_list|(
literal|"running"
argument_list|)
operator|&&
name|status
operator|==
name|TIPStatus
operator|.
name|RUNNING
operator|)
operator|||
operator|(
name|state
operator|.
name|equals
argument_list|(
literal|"completed"
argument_list|)
operator|&&
name|status
operator|==
name|TIPStatus
operator|.
name|COMPLETE
operator|)
operator|||
operator|(
name|state
operator|.
name|equals
argument_list|(
literal|"failed"
argument_list|)
operator|&&
name|status
operator|==
name|TIPStatus
operator|.
name|FAILED
operator|)
operator|||
operator|(
name|state
operator|.
name|equals
argument_list|(
literal|"killed"
argument_list|)
operator|&&
name|status
operator|==
name|TIPStatus
operator|.
name|KILLED
operator|)
condition|)
block|{
name|printTaskAttempts
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|displayJobList (JobStatus[] jobs)
specifier|public
name|void
name|displayJobList
parameter_list|(
name|JobStatus
index|[]
name|jobs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|displayJobList
argument_list|(
name|jobs
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|field|headerPattern
specifier|public
specifier|static
name|String
name|headerPattern
init|=
literal|"%23s\t%10s\t%14s\t%12s\t%12s\t%10s\t%15s\t%15s\t%8s\t%8s\t%10s\t%10s\n"
decl_stmt|;
annotation|@
name|Private
DECL|field|dataPattern
specifier|public
specifier|static
name|String
name|dataPattern
init|=
literal|"%23s\t%10s\t%14d\t%12s\t%12s\t%10s\t%14d\t%14d\t%7dM\t%7sM\t%9dM\t%10s\n"
decl_stmt|;
annotation|@
name|Private
DECL|method|displayJobList (JobStatus[] jobs, PrintWriter writer)
specifier|public
name|void
name|displayJobList
parameter_list|(
name|JobStatus
index|[]
name|jobs
parameter_list|,
name|PrintWriter
name|writer
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"Total jobs:"
operator|+
name|jobs
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|headerPattern
argument_list|,
literal|"JobId"
argument_list|,
literal|"State"
argument_list|,
literal|"StartTime"
argument_list|,
literal|"UserName"
argument_list|,
literal|"Queue"
argument_list|,
literal|"Priority"
argument_list|,
literal|"UsedContainers"
argument_list|,
literal|"RsvdContainers"
argument_list|,
literal|"UsedMem"
argument_list|,
literal|"RsvdMem"
argument_list|,
literal|"NeededMem"
argument_list|,
literal|"AM info"
argument_list|)
expr_stmt|;
for|for
control|(
name|JobStatus
name|job
range|:
name|jobs
control|)
block|{
name|writer
operator|.
name|printf
argument_list|(
name|dataPattern
argument_list|,
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|,
name|job
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|job
operator|.
name|getUsername
argument_list|()
argument_list|,
name|job
operator|.
name|getQueue
argument_list|()
argument_list|,
name|job
operator|.
name|getPriority
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|job
operator|.
name|getNumUsedSlots
argument_list|()
argument_list|,
name|job
operator|.
name|getNumReservedSlots
argument_list|()
argument_list|,
name|job
operator|.
name|getUsedMem
argument_list|()
argument_list|,
name|job
operator|.
name|getReservedMem
argument_list|()
argument_list|,
name|job
operator|.
name|getNeededMem
argument_list|()
argument_list|,
name|job
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|CLI
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

