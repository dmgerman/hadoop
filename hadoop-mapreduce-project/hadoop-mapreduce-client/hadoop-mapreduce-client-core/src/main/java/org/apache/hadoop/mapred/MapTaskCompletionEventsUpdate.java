begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * A class that represents the communication between the tasktracker and child  * tasks w.r.t the map task completion events. It also indicates whether the  * child task should reset its events index.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MapTaskCompletionEventsUpdate
specifier|public
class|class
name|MapTaskCompletionEventsUpdate
implements|implements
name|Writable
block|{
DECL|field|events
name|TaskCompletionEvent
index|[]
name|events
decl_stmt|;
DECL|field|reset
name|boolean
name|reset
decl_stmt|;
DECL|method|MapTaskCompletionEventsUpdate ()
specifier|public
name|MapTaskCompletionEventsUpdate
parameter_list|()
block|{ }
DECL|method|MapTaskCompletionEventsUpdate (TaskCompletionEvent[] events, boolean reset)
specifier|public
name|MapTaskCompletionEventsUpdate
parameter_list|(
name|TaskCompletionEvent
index|[]
name|events
parameter_list|,
name|boolean
name|reset
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
name|this
operator|.
name|reset
operator|=
name|reset
expr_stmt|;
block|}
DECL|method|shouldReset ()
specifier|public
name|boolean
name|shouldReset
parameter_list|()
block|{
return|return
name|reset
return|;
block|}
DECL|method|getMapTaskCompletionEvents ()
specifier|public
name|TaskCompletionEvent
index|[]
name|getMapTaskCompletionEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|reset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|event
range|:
name|events
control|)
block|{
name|event
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|events
operator|=
operator|new
name|TaskCompletionEvent
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|events
index|[
name|i
index|]
operator|=
operator|new
name|TaskCompletionEvent
argument_list|()
expr_stmt|;
name|events
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

