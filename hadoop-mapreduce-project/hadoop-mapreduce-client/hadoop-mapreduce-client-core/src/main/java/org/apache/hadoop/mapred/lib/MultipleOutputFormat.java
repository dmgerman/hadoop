begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * This abstract class extends the FileOutputFormat, allowing to write the  * output data to different output files. There are three basic use cases for  * this class.  *   * Case one: This class is used for a map reduce job with at least one reducer.  * The reducer wants to write data to different files depending on the actual  * keys. It is assumed that a key (or value) encodes the actual key (value)  * and the desired location for the actual key (value).  *   * Case two: This class is used for a map only job. The job wants to use an  * output file name that is either a part of the input file name of the input  * data, or some derivation of it.  *   * Case three: This class is used for a map only job. The job wants to use an  * output file name that depends on both the keys and the input file name,  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultipleOutputFormat
specifier|public
specifier|abstract
class|class
name|MultipleOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FileOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Create a composite record writer that can write key/value data to different    * output files    *     * @param fs    *          the file system to use    * @param job    *          the job conf for the job    * @param name    *          the leaf file name for the output file (such as part-00000")    * @param arg3    *          a progressable for reporting progress.    * @return a composite record writer    * @throws IOException    */
DECL|method|getRecordWriter (FileSystem fs, JobConf job, String name, Progressable arg3)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|arg3
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|myFS
init|=
name|fs
decl_stmt|;
specifier|final
name|String
name|myName
init|=
name|generateLeafFileName
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|JobConf
name|myJob
init|=
name|job
decl_stmt|;
specifier|final
name|Progressable
name|myProgressable
init|=
name|arg3
decl_stmt|;
return|return
operator|new
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
comment|// a cache storing the record writers for different output files.
name|TreeMap
argument_list|<
name|String
argument_list|,
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|recordWriters
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the file name based on the key
name|String
name|keyBasedPath
init|=
name|generateFileNameForKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|myName
argument_list|)
decl_stmt|;
comment|// get the file name based on the input file name
name|String
name|finalPath
init|=
name|getInputFileBasedOutputFileName
argument_list|(
name|myJob
argument_list|,
name|keyBasedPath
argument_list|)
decl_stmt|;
comment|// get the actual key
name|K
name|actualKey
init|=
name|generateActualKey
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|V
name|actualValue
init|=
name|generateActualValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rw
init|=
name|this
operator|.
name|recordWriters
operator|.
name|get
argument_list|(
name|finalPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|rw
operator|==
literal|null
condition|)
block|{
comment|// if we don't have the record writer yet for the final path, create
comment|// one
comment|// and add it to the cache
name|rw
operator|=
name|getBaseRecordWriter
argument_list|(
name|myFS
argument_list|,
name|myJob
argument_list|,
name|finalPath
argument_list|,
name|myProgressable
argument_list|)
expr_stmt|;
name|this
operator|.
name|recordWriters
operator|.
name|put
argument_list|(
name|finalPath
argument_list|,
name|rw
argument_list|)
expr_stmt|;
block|}
name|rw
operator|.
name|write
argument_list|(
name|actualKey
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|this
operator|.
name|recordWriters
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rw
init|=
name|this
operator|.
name|recordWriters
operator|.
name|get
argument_list|(
name|keys
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|close
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|recordWriters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
return|;
block|}
comment|/**    * Generate the leaf name for the output file name. The default behavior does    * not change the leaf file name (such as part-00000)    *     * @param name    *          the leaf file name for the output file    * @return the given leaf file name    */
DECL|method|generateLeafFileName (String name)
specifier|protected
name|String
name|generateLeafFileName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
comment|/**    * Generate the file output file name based on the given key and the leaf file    * name. The default behavior is that the file name does not depend on the    * key.    *     * @param key    *          the key of the output data    * @param name    *          the leaf file name    * @return generated file name    */
DECL|method|generateFileNameForKeyValue (K key, V value, String name)
specifier|protected
name|String
name|generateFileNameForKeyValue
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
comment|/**    * Generate the actual key from the given key/value. The default behavior is that    * the actual key is equal to the given key    *     * @param key    *          the key of the output data    * @param value    *          the value of the output data    * @return the actual key derived from the given key/value    */
DECL|method|generateActualKey (K key, V value)
specifier|protected
name|K
name|generateActualKey
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|key
return|;
block|}
comment|/**    * Generate the actual value from the given key and value. The default behavior is that    * the actual value is equal to the given value    *     * @param key    *          the key of the output data    * @param value    *          the value of the output data    * @return the actual value derived from the given key/value    */
DECL|method|generateActualValue (K key, V value)
specifier|protected
name|V
name|generateActualValue
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
comment|/**    * Generate the outfile name based on a given anme and the input file name. If    * the {@link JobContext#MAP_INPUT_FILE} does not exists (i.e. this is not for a map only job),    * the given name is returned unchanged. If the config value for    * "num.of.trailing.legs.to.use" is not set, or set 0 or negative, the given    * name is returned unchanged. Otherwise, return a file name consisting of the    * N trailing legs of the input file name where N is the config value for    * "num.of.trailing.legs.to.use".    *     * @param job    *          the job config    * @param name    *          the output file name    * @return the outfile name based on a given anme and the input file name.    */
DECL|method|getInputFileBasedOutputFileName (JobConf job, String name)
specifier|protected
name|String
name|getInputFileBasedOutputFileName
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|infilepath
init|=
name|job
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_INPUT_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|infilepath
operator|==
literal|null
condition|)
block|{
comment|// if the {@link JobContext#MAP_INPUT_FILE} does not exists,
comment|// then return the given name
return|return
name|name
return|;
block|}
name|int
name|numOfTrailingLegsToUse
init|=
name|job
operator|.
name|getInt
argument_list|(
literal|"mapred.outputformat.numOfTrailingLegs"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numOfTrailingLegsToUse
operator|<=
literal|0
condition|)
block|{
return|return
name|name
return|;
block|}
name|Path
name|infile
init|=
operator|new
name|Path
argument_list|(
name|infilepath
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|infile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|midName
init|=
name|infile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|midName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numOfTrailingLegsToUse
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
break|break;
name|midName
operator|=
name|parent
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|midName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
break|break;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|outPath
operator|=
operator|new
name|Path
argument_list|(
name|midName
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
return|return
name|outPath
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *     * @param fs    *          the file system to use    * @param job    *          a job conf object    * @param name    *          the name of the file over which a record writer object will be    *          constructed    * @param arg3    *          a progressable object    * @return A RecordWriter object over the given file    * @throws IOException    */
DECL|method|getBaseRecordWriter (FileSystem fs, JobConf job, String name, Progressable arg3)
specifier|abstract
specifier|protected
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getBaseRecordWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|arg3
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

