begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Keeps the Ranges sorted by startIndex.  * The added ranges are always ensured to be non-overlapping.  * Provides the SkipRangeIterator, which skips the Ranges   * stored in this object.  */
end_comment

begin_class
DECL|class|SortedRanges
class|class
name|SortedRanges
implements|implements
name|Writable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SortedRanges
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ranges
specifier|private
name|TreeSet
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|TreeSet
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|indicesCount
specifier|private
name|long
name|indicesCount
decl_stmt|;
comment|/**    * Get Iterator which skips the stored ranges.    * The Iterator.next() call return the index starting from 0.    * @return SkipRangeIterator    */
DECL|method|skipRangeIterator ()
specifier|synchronized
name|SkipRangeIterator
name|skipRangeIterator
parameter_list|()
block|{
return|return
operator|new
name|SkipRangeIterator
argument_list|(
name|ranges
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the no of indices stored in the ranges.    * @return indices count    */
DECL|method|getIndicesCount ()
specifier|synchronized
name|long
name|getIndicesCount
parameter_list|()
block|{
return|return
name|indicesCount
return|;
block|}
comment|/**    * Get the sorted set of ranges.    * @return ranges    */
DECL|method|getRanges ()
specifier|synchronized
name|SortedSet
argument_list|<
name|Range
argument_list|>
name|getRanges
parameter_list|()
block|{
return|return
name|ranges
return|;
block|}
comment|/**    * Add the range indices. It is ensured that the added range     * doesn't overlap the existing ranges. If it overlaps, the     * existing overlapping ranges are removed and a single range     * having the superset of all the removed ranges and this range     * is added.     * If the range is of 0 length, doesn't do anything.    * @param range Range to be added.    */
DECL|method|add (Range range)
specifier|synchronized
name|void
name|add
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|startIndex
init|=
name|range
operator|.
name|getStartIndex
argument_list|()
decl_stmt|;
name|long
name|endIndex
init|=
name|range
operator|.
name|getEndIndex
argument_list|()
decl_stmt|;
comment|//make sure that there are no overlapping ranges
name|SortedSet
argument_list|<
name|Range
argument_list|>
name|headSet
init|=
name|ranges
operator|.
name|headSet
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|headSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Range
name|previousRange
init|=
name|headSet
operator|.
name|last
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"previousRange "
operator|+
name|previousRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|startIndex
operator|<
name|previousRange
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
comment|//previousRange overlaps this range
comment|//remove the previousRange
if|if
condition|(
name|ranges
operator|.
name|remove
argument_list|(
name|previousRange
argument_list|)
condition|)
block|{
name|indicesCount
operator|-=
name|previousRange
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|//expand this range
name|startIndex
operator|=
name|previousRange
operator|.
name|getStartIndex
argument_list|()
expr_stmt|;
name|endIndex
operator|=
name|endIndex
operator|>=
name|previousRange
operator|.
name|getEndIndex
argument_list|()
condition|?
name|endIndex
else|:
name|previousRange
operator|.
name|getEndIndex
argument_list|()
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Range
argument_list|>
name|tailSetIt
init|=
name|ranges
operator|.
name|tailSet
argument_list|(
name|range
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tailSetIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|nextRange
init|=
name|tailSetIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"nextRange "
operator|+
name|nextRange
operator|+
literal|"   startIndex:"
operator|+
name|startIndex
operator|+
literal|"  endIndex:"
operator|+
name|endIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|endIndex
operator|>=
name|nextRange
operator|.
name|getStartIndex
argument_list|()
condition|)
block|{
comment|//nextRange overlaps this range
comment|//remove the nextRange
name|tailSetIt
operator|.
name|remove
argument_list|()
expr_stmt|;
name|indicesCount
operator|-=
name|nextRange
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|endIndex
operator|<
name|nextRange
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
comment|//expand this range
name|endIndex
operator|=
name|nextRange
operator|.
name|getEndIndex
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
name|add
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the range indices. If this range is      * found in existing ranges, the existing ranges     * are shrunk.    * If range is of 0 length, doesn't do anything.    * @param range Range to be removed.    */
DECL|method|remove (Range range)
specifier|synchronized
name|void
name|remove
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|startIndex
init|=
name|range
operator|.
name|getStartIndex
argument_list|()
decl_stmt|;
name|long
name|endIndex
init|=
name|range
operator|.
name|getEndIndex
argument_list|()
decl_stmt|;
comment|//make sure that there are no overlapping ranges
name|SortedSet
argument_list|<
name|Range
argument_list|>
name|headSet
init|=
name|ranges
operator|.
name|headSet
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|headSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Range
name|previousRange
init|=
name|headSet
operator|.
name|last
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"previousRange "
operator|+
name|previousRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|startIndex
operator|<
name|previousRange
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
comment|//previousRange overlaps this range
comment|//narrow down the previousRange
if|if
condition|(
name|ranges
operator|.
name|remove
argument_list|(
name|previousRange
argument_list|)
condition|)
block|{
name|indicesCount
operator|-=
name|previousRange
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed previousRange "
operator|+
name|previousRange
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|previousRange
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|startIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|endIndex
operator|<=
name|previousRange
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
name|add
argument_list|(
name|endIndex
argument_list|,
name|previousRange
operator|.
name|getEndIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Range
argument_list|>
name|tailSetIt
init|=
name|ranges
operator|.
name|tailSet
argument_list|(
name|range
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tailSetIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|nextRange
init|=
name|tailSetIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"nextRange "
operator|+
name|nextRange
operator|+
literal|"   startIndex:"
operator|+
name|startIndex
operator|+
literal|"  endIndex:"
operator|+
name|endIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|endIndex
operator|>
name|nextRange
operator|.
name|getStartIndex
argument_list|()
condition|)
block|{
comment|//nextRange overlaps this range
comment|//narrow down the nextRange
name|tailSetIt
operator|.
name|remove
argument_list|()
expr_stmt|;
name|indicesCount
operator|-=
name|nextRange
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|endIndex
operator|<
name|nextRange
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
name|add
argument_list|(
name|endIndex
argument_list|,
name|nextRange
operator|.
name|getEndIndex
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|add (long start, long end)
specifier|private
name|void
name|add
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
if|if
condition|(
name|end
operator|>
name|start
condition|)
block|{
name|Range
name|recRange
init|=
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|recRange
argument_list|)
expr_stmt|;
name|indicesCount
operator|+=
name|recRange
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"added "
operator|+
name|recRange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|indicesCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|ranges
operator|=
operator|new
name|TreeSet
argument_list|<
name|Range
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|range
init|=
operator|new
name|Range
argument_list|()
decl_stmt|;
name|range
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|indicesCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Range
argument_list|>
name|it
init|=
name|ranges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|range
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|range
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Range
argument_list|>
name|it
init|=
name|ranges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|range
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|range
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Index Range. Comprises of start index and length.    * A Range can be of 0 length also. The Range stores indices     * of type long.    */
DECL|class|Range
specifier|static
class|class
name|Range
implements|implements
name|Comparable
argument_list|<
name|Range
argument_list|>
implements|,
name|Writable
block|{
DECL|field|startIndex
specifier|private
name|long
name|startIndex
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|method|Range (long startIndex, long length)
name|Range
parameter_list|(
name|long
name|startIndex
parameter_list|,
name|long
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"length can't be negative"
argument_list|)
throw|;
block|}
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|Range ()
name|Range
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the start index. Start index in inclusive.      * @return startIndex.       */
DECL|method|getStartIndex ()
name|long
name|getStartIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
comment|/**      * Get the end index. End index is exclusive.      * @return endIndex.      */
DECL|method|getEndIndex ()
name|long
name|getEndIndex
parameter_list|()
block|{
return|return
name|startIndex
operator|+
name|length
return|;
block|}
comment|/**     * Get Length.     * @return length     */
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**      * Range is empty if its length is zero.      * @return<code>true</code> if empty      *<code>false</code> otherwise.      */
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|length
operator|==
literal|0
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Range
condition|)
block|{
name|Range
name|range
init|=
operator|(
name|Range
operator|)
name|o
decl_stmt|;
return|return
name|startIndex
operator|==
name|range
operator|.
name|startIndex
operator|&&
name|length
operator|==
name|range
operator|.
name|length
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|startIndex
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|length
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|compareTo (Range o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Range
name|o
parameter_list|)
block|{
comment|// Ensure sgn(x.compareTo(y) == -sgn(y.compareTo(x))
return|return
name|this
operator|.
name|startIndex
operator|<
name|o
operator|.
name|startIndex
condition|?
operator|-
literal|1
else|:
operator|(
name|this
operator|.
name|startIndex
operator|>
name|o
operator|.
name|startIndex
condition|?
literal|1
else|:
operator|(
name|this
operator|.
name|length
operator|<
name|o
operator|.
name|length
condition|?
operator|-
literal|1
else|:
operator|(
name|this
operator|.
name|length
operator|>
name|o
operator|.
name|length
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
operator|)
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|startIndex
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|startIndex
operator|+
literal|":"
operator|+
name|length
return|;
block|}
block|}
comment|/**    * Index Iterator which skips the stored ranges.    */
DECL|class|SkipRangeIterator
specifier|static
class|class
name|SkipRangeIterator
implements|implements
name|Iterator
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|rangeIterator
name|Iterator
argument_list|<
name|Range
argument_list|>
name|rangeIterator
decl_stmt|;
DECL|field|range
name|Range
name|range
init|=
operator|new
name|Range
argument_list|()
decl_stmt|;
DECL|field|next
name|long
name|next
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Constructor      * @param rangeIterator the iterator which gives the ranges.      */
DECL|method|SkipRangeIterator (Iterator<Range> rangeIterator)
name|SkipRangeIterator
parameter_list|(
name|Iterator
argument_list|<
name|Range
argument_list|>
name|rangeIterator
parameter_list|)
block|{
name|this
operator|.
name|rangeIterator
operator|=
name|rangeIterator
expr_stmt|;
name|doNext
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns true till the index reaches Long.MAX_VALUE.      * @return<code>true</code> next index exists.      *<code>false</code> otherwise.      */
DECL|method|hasNext ()
specifier|public
specifier|synchronized
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|<
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**      * Get the next available index. The index starts from 0.      * @return next index      */
DECL|method|next ()
specifier|public
specifier|synchronized
name|Long
name|next
parameter_list|()
block|{
name|long
name|ci
init|=
name|next
decl_stmt|;
name|doNext
argument_list|()
expr_stmt|;
return|return
name|ci
return|;
block|}
DECL|method|doNext ()
specifier|private
name|void
name|doNext
parameter_list|()
block|{
name|next
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"currentIndex "
operator|+
name|next
operator|+
literal|"   "
operator|+
name|range
argument_list|)
expr_stmt|;
name|skipIfInRange
argument_list|()
expr_stmt|;
while|while
condition|(
name|next
operator|>=
name|range
operator|.
name|getEndIndex
argument_list|()
operator|&&
name|rangeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|range
operator|=
name|rangeIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|skipIfInRange
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|skipIfInRange ()
specifier|private
name|void
name|skipIfInRange
parameter_list|()
block|{
if|if
condition|(
name|next
operator|>=
name|range
operator|.
name|getStartIndex
argument_list|()
operator|&&
name|next
operator|<
name|range
operator|.
name|getEndIndex
argument_list|()
condition|)
block|{
comment|//need to skip the range
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping index "
operator|+
name|next
operator|+
literal|"-"
operator|+
name|range
operator|.
name|getEndIndex
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|range
operator|.
name|getEndIndex
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get whether all the ranges have been skipped.      * @return<code>true</code> if all ranges have been skipped.      *<code>false</code> otherwise.      */
DECL|method|skippedAllRanges ()
specifier|synchronized
name|boolean
name|skippedAllRanges
parameter_list|()
block|{
return|return
operator|!
name|rangeIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|next
operator|>
name|range
operator|.
name|getEndIndex
argument_list|()
return|;
block|}
comment|/**      * Remove is not supported. Doesn't apply.      */
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove not supported."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

