begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * This class treats a line in the input as a key/value pair separated by a   * separator character. The separator can be specified in config file   * under the attribute name mapreduce.input.keyvaluelinerecordreader.key.value.separator. The default  * separator is the tab character ('\t').  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|KeyValueLineRecordReader
specifier|public
class|class
name|KeyValueLineRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|KEY_VALUE_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|KEY_VALUE_SEPARATOR
init|=
literal|"mapreduce.input.keyvaluelinerecordreader.key.value.separator"
decl_stmt|;
comment|/**    * @deprecated Use {@link #KEY_VALUE_SEPARATOR}    */
annotation|@
name|Deprecated
DECL|field|KEY_VALUE_SEPERATOR
specifier|public
specifier|static
specifier|final
name|String
name|KEY_VALUE_SEPERATOR
init|=
name|KEY_VALUE_SEPARATOR
decl_stmt|;
DECL|field|lineRecordReader
specifier|private
specifier|final
name|LineRecordReader
name|lineRecordReader
decl_stmt|;
DECL|field|separator
specifier|private
name|byte
name|separator
init|=
operator|(
name|byte
operator|)
literal|'\t'
decl_stmt|;
DECL|field|innerValue
specifier|private
name|Text
name|innerValue
decl_stmt|;
DECL|field|key
specifier|private
name|Text
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|Text
name|value
decl_stmt|;
DECL|method|getKeyClass ()
specifier|public
name|Class
name|getKeyClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
DECL|method|KeyValueLineRecordReader (Configuration conf)
specifier|public
name|KeyValueLineRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|lineRecordReader
operator|=
operator|new
name|LineRecordReader
argument_list|()
expr_stmt|;
name|String
name|sepStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|KEY_VALUE_SEPARATOR
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|this
operator|.
name|separator
operator|=
operator|(
name|byte
operator|)
name|sepStr
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (InputSplit genericSplit, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|genericSplit
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|lineRecordReader
operator|.
name|initialize
argument_list|(
name|genericSplit
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|findSeparator (byte[] utf, int start, int length, byte sep)
specifier|public
specifier|static
name|int
name|findSeparator
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
name|sep
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|utf
index|[
name|i
index|]
operator|==
name|sep
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|setKeyValue (Text key, Text value, byte[] line, int lineLen, int pos)
specifier|public
specifier|static
name|void
name|setKeyValue
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|byte
index|[]
name|line
parameter_list|,
name|int
name|lineLen
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|key
operator|.
name|set
argument_list|(
name|line
argument_list|,
literal|0
argument_list|,
name|lineLen
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|.
name|set
argument_list|(
name|line
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|line
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|lineLen
operator|-
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Read key/value pair in a line. */
DECL|method|nextKeyValue ()
specifier|public
specifier|synchronized
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|line
init|=
literal|null
decl_stmt|;
name|int
name|lineLen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|lineRecordReader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|innerValue
operator|=
name|lineRecordReader
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
name|line
operator|=
name|innerValue
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|lineLen
operator|=
name|innerValue
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
name|int
name|pos
init|=
name|findSeparator
argument_list|(
name|line
argument_list|,
literal|0
argument_list|,
name|lineLen
argument_list|,
name|this
operator|.
name|separator
argument_list|)
decl_stmt|;
name|setKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|line
argument_list|,
name|lineLen
argument_list|,
name|pos
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|Text
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getCurrentValue ()
specifier|public
name|Text
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|lineRecordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|lineRecordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

