begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * An InputFormat capable of performing joins over a set of data sources sorted  * and partitioned the same way.  *  * A user may define new join types by setting the property  *<tt>mapred.join.define.&lt;ident&gt;</tt> to a classname. In the expression  *<tt>mapred.join.expr</tt>, the identifier will be assumed to be a  * ComposableRecordReader.  *<tt>mapred.join.keycomparator</tt> can be a classname used to compare keys  * in the join.  * @see #setFormat  * @see JoinRecordReader  * @see MultiFilterRecordReader  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CompositeInputFormat
specifier|public
class|class
name|CompositeInputFormat
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|>
implements|implements
name|ComposableInputFormat
argument_list|<
name|K
argument_list|,
name|TupleWritable
argument_list|>
block|{
comment|// expression parse tree to which IF requests are proxied
DECL|field|root
specifier|private
name|Parser
operator|.
name|Node
name|root
decl_stmt|;
DECL|method|CompositeInputFormat ()
specifier|public
name|CompositeInputFormat
parameter_list|()
block|{ }
comment|/**    * Interpret a given string as a composite expression.    * {@code    *   func  ::=<ident>([<func>,]*<func>)    *   func  ::= tbl(<class>,"<path>")    *   class ::= @see java.lang.Class#forName(java.lang.String)    *   path  ::= @see org.apache.hadoop.fs.Path#Path(java.lang.String)    * }    * Reads expression from the<tt>mapred.join.expr</tt> property and    * user-supplied join types from<tt>mapred.join.define.&lt;ident&gt;</tt>    *  types. Paths supplied to<tt>tbl</tt> are given as input paths to the    * InputFormat class listed.    * @see #compose(java.lang.String, java.lang.Class, java.lang.String...)    */
DECL|method|setFormat (JobConf job)
specifier|public
name|void
name|setFormat
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|addDefaults
argument_list|()
expr_stmt|;
name|addUserIdentifiers
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|root
operator|=
name|Parser
operator|.
name|parse
argument_list|(
name|job
operator|.
name|get
argument_list|(
literal|"mapred.join.expr"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds the default set of identifiers to the parser.    */
DECL|method|addDefaults ()
specifier|protected
name|void
name|addDefaults
parameter_list|()
block|{
try|try
block|{
name|Parser
operator|.
name|CNode
operator|.
name|addIdentifier
argument_list|(
literal|"inner"
argument_list|,
name|InnerJoinRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|Parser
operator|.
name|CNode
operator|.
name|addIdentifier
argument_list|(
literal|"outer"
argument_list|,
name|OuterJoinRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|Parser
operator|.
name|CNode
operator|.
name|addIdentifier
argument_list|(
literal|"override"
argument_list|,
name|OverrideRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|Parser
operator|.
name|WNode
operator|.
name|addIdentifier
argument_list|(
literal|"tbl"
argument_list|,
name|WrappedRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"FATAL: Failed to init defaults"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Inform the parser of user-defined types.    */
DECL|method|addUserIdentifiers (JobConf job)
specifier|private
name|void
name|addUserIdentifiers
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|x
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^mapred\\.join\\.define\\.(\\w+)$"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kv
range|:
name|job
control|)
block|{
name|Matcher
name|m
init|=
name|x
operator|.
name|matcher
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
name|Parser
operator|.
name|CNode
operator|.
name|addIdentifier
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|job
operator|.
name|getClass
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ComposableRecordReader
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Invalid define for "
operator|+
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Build a CompositeInputSplit from the child InputFormats by assigning the    * ith split from each child to the ith composite split.    */
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|setFormat
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setLong
argument_list|(
literal|"mapred.min.split.size"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|root
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
return|;
block|}
comment|/**    * Construct a CompositeRecordReader for the children of this InputFormat    * as defined in the init expression.    * The outermost join need only be composable, not necessarily a composite.    * Mandating TupleWritable isn't strictly correct.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// child types unknown
DECL|method|getRecordReader ( InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|TupleWritable
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|setFormat
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|root
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Convenience method for constructing composite formats.    * Given InputFormat class (inf), path (p) return:    * {@code tbl(<inf>,<p>) }    */
DECL|method|compose (Class<? extends InputFormat> inf, String path)
specifier|public
specifier|static
name|String
name|compose
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inf
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|compose
argument_list|(
name|inf
operator|.
name|getName
argument_list|()
operator|.
name|intern
argument_list|()
argument_list|,
name|path
argument_list|,
operator|new
name|StringBuffer
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convenience method for constructing composite formats.    * Given operation (op), Object class (inf), set of paths (p) return:    * {@code<op>(tbl(<inf>,<p1>),tbl(<inf>,<p2>),...,tbl(<inf>,<pn>)) }    */
DECL|method|compose (String op, Class<? extends InputFormat> inf, String... path)
specifier|public
specifier|static
name|String
name|compose
parameter_list|(
name|String
name|op
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inf
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
block|{
specifier|final
name|String
name|infname
init|=
name|inf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|(
name|op
operator|+
literal|'('
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|path
control|)
block|{
name|compose
argument_list|(
name|infname
argument_list|,
name|p
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setCharAt
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|')'
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convenience method for constructing composite formats.    * Given operation (op), Object class (inf), set of paths (p) return:    * {@code<op>(tbl(<inf>,<p1>),tbl(<inf>,<p2>),...,tbl(<inf>,<pn>)) }    */
DECL|method|compose (String op, Class<? extends InputFormat> inf, Path... path)
specifier|public
specifier|static
name|String
name|compose
parameter_list|(
name|String
name|op
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inf
parameter_list|,
name|Path
modifier|...
name|path
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|path
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|path
control|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compose
argument_list|(
name|op
argument_list|,
name|inf
argument_list|,
name|tmp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|compose (String inf, String path, StringBuffer sb)
specifier|private
specifier|static
name|StringBuffer
name|compose
parameter_list|(
name|String
name|inf
parameter_list|,
name|String
name|path
parameter_list|,
name|StringBuffer
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"tbl("
operator|+
name|inf
operator|+
literal|",\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
block|}
end_class

end_unit

