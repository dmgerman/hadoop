begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A class that allows a map/red job to work on a sample of sequence files.  * The sample is decided by the filter class set by the job.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileInputFilter
specifier|public
class|class
name|SequenceFileInputFilter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FILTER_CLASS
specifier|final
specifier|public
specifier|static
name|String
name|FILTER_CLASS
init|=
literal|"mapreduce.input.sequencefileinputfilter.class"
decl_stmt|;
DECL|field|FILTER_FREQUENCY
specifier|final
specifier|public
specifier|static
name|String
name|FILTER_FREQUENCY
init|=
literal|"mapreduce.input.sequencefileinputfilter.frequency"
decl_stmt|;
DECL|field|FILTER_REGEX
specifier|final
specifier|public
specifier|static
name|String
name|FILTER_REGEX
init|=
literal|"mapreduce.input.sequencefileinputfilter.regex"
decl_stmt|;
DECL|method|SequenceFileInputFilter ()
specifier|public
name|SequenceFileInputFilter
parameter_list|()
block|{   }
comment|/** Create a record reader for the given split    * @param split file split    * @param context the task-attempt context    * @return RecordReader    */
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|FilterRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
comment|/** set the filter class    *     * @param job The job    * @param filterClass filter class    */
DECL|method|setFilterClass (Job job, Class<?> filterClass)
specifier|public
specifier|static
name|void
name|setFilterClass
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|filterClass
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FILTER_CLASS
argument_list|,
name|filterClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * filter interface    */
DECL|interface|Filter
specifier|public
interface|interface
name|Filter
extends|extends
name|Configurable
block|{
comment|/** filter function      * Decide if a record should be filtered or not      * @param key record key      * @return true if a record is accepted; return false otherwise      */
DECL|method|accept (Object key)
specifier|public
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
function_decl|;
block|}
comment|/**    * base class for Filters    */
DECL|class|FilterBase
specifier|public
specifier|static
specifier|abstract
class|class
name|FilterBase
implements|implements
name|Filter
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
comment|/** Records filter by matching key to regex    */
DECL|class|RegexFilter
specifier|public
specifier|static
class|class
name|RegexFilter
extends|extends
name|FilterBase
block|{
DECL|field|p
specifier|private
name|Pattern
name|p
decl_stmt|;
comment|/** Define the filtering regex and stores it in conf      * @param conf where the regex is set      * @param regex regex used as a filter      */
DECL|method|setPattern (Configuration conf, String regex)
specifier|public
specifier|static
name|void
name|setPattern
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|PatternSyntaxException
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid pattern: "
operator|+
name|regex
argument_list|)
throw|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|FILTER_REGEX
argument_list|,
name|regex
argument_list|)
expr_stmt|;
block|}
DECL|method|RegexFilter ()
specifier|public
name|RegexFilter
parameter_list|()
block|{ }
comment|/** configure the Filter by checking the configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|regex
init|=
name|conf
operator|.
name|get
argument_list|(
name|FILTER_REGEX
argument_list|)
decl_stmt|;
if|if
condition|(
name|regex
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|FILTER_REGEX
operator|+
literal|"not set"
argument_list|)
throw|;
name|this
operator|.
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/** Filtering method      * If key matches the regex, return true; otherwise return false      * @see Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|p
operator|.
name|matcher
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
comment|/** This class returns a percentage of records    * The percentage is determined by a filtering frequency<i>f</i> using    * the criteria record# % f == 0.    * For example, if the frequency is 10, one out of 10 records is returned.    */
DECL|class|PercentFilter
specifier|public
specifier|static
class|class
name|PercentFilter
extends|extends
name|FilterBase
block|{
DECL|field|frequency
specifier|private
name|int
name|frequency
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
comment|/** set the frequency and stores it in conf      * @param conf configuration      * @param frequency filtering frequencey      */
DECL|method|setFrequency (Configuration conf, int frequency)
specifier|public
specifier|static
name|void
name|setFrequency
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|frequency
parameter_list|)
block|{
if|if
condition|(
name|frequency
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negative "
operator|+
name|FILTER_FREQUENCY
operator|+
literal|": "
operator|+
name|frequency
argument_list|)
throw|;
name|conf
operator|.
name|setInt
argument_list|(
name|FILTER_FREQUENCY
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
block|}
DECL|method|PercentFilter ()
specifier|public
name|PercentFilter
parameter_list|()
block|{ }
comment|/** configure the filter by checking the configuration      *       * @param conf configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|FILTER_FREQUENCY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|frequency
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Negative "
operator|+
name|FILTER_FREQUENCY
operator|+
literal|": "
operator|+
name|this
operator|.
name|frequency
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/** Filtering method      * If record# % frequency==0, return true; otherwise return false      * @see Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|boolean
name|accepted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|accepted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|++
name|count
operator|==
name|frequency
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|accepted
return|;
block|}
block|}
comment|/** This class returns a set of records by examing the MD5 digest of its    * key against a filtering frequency<i>f</i>. The filtering criteria is    * MD5(key) % f == 0.    */
DECL|class|MD5Filter
specifier|public
specifier|static
class|class
name|MD5Filter
extends|extends
name|FilterBase
block|{
DECL|field|frequency
specifier|private
name|int
name|frequency
decl_stmt|;
DECL|field|DIGESTER
specifier|private
specifier|static
specifier|final
name|MessageDigest
name|DIGESTER
decl_stmt|;
DECL|field|MD5_LEN
specifier|public
specifier|static
specifier|final
name|int
name|MD5_LEN
init|=
literal|16
decl_stmt|;
DECL|field|digest
specifier|private
name|byte
index|[]
name|digest
init|=
operator|new
name|byte
index|[
name|MD5_LEN
index|]
decl_stmt|;
static|static
block|{
try|try
block|{
name|DIGESTER
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** set the filtering frequency in configuration      *       * @param conf configuration      * @param frequency filtering frequency      */
DECL|method|setFrequency (Configuration conf, int frequency)
specifier|public
specifier|static
name|void
name|setFrequency
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|frequency
parameter_list|)
block|{
if|if
condition|(
name|frequency
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negative "
operator|+
name|FILTER_FREQUENCY
operator|+
literal|": "
operator|+
name|frequency
argument_list|)
throw|;
name|conf
operator|.
name|setInt
argument_list|(
name|FILTER_FREQUENCY
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
block|}
DECL|method|MD5Filter ()
specifier|public
name|MD5Filter
parameter_list|()
block|{ }
comment|/** configure the filter according to configuration      *       * @param conf configuration      */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|FILTER_FREQUENCY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|frequency
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Negative "
operator|+
name|FILTER_FREQUENCY
operator|+
literal|": "
operator|+
name|this
operator|.
name|frequency
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/** Filtering method      * If MD5(key) % frequency==0, return true; otherwise return false      * @see Filter#accept(Object)      */
DECL|method|accept (Object key)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
try|try
block|{
name|long
name|hashcode
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|Text
condition|)
block|{
name|hashcode
operator|=
name|MD5Hashcode
argument_list|(
operator|(
name|Text
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|BytesWritable
condition|)
block|{
name|hashcode
operator|=
name|MD5Hashcode
argument_list|(
operator|(
name|BytesWritable
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|bb
decl_stmt|;
name|bb
operator|=
name|Text
operator|.
name|encode
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hashcode
operator|=
name|MD5Hashcode
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bb
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hashcode
operator|/
name|frequency
operator|*
name|frequency
operator|==
name|hashcode
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|MD5Hashcode (Text key)
specifier|private
name|long
name|MD5Hashcode
parameter_list|(
name|Text
name|key
parameter_list|)
throws|throws
name|DigestException
block|{
return|return
name|MD5Hashcode
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
DECL|method|MD5Hashcode (BytesWritable key)
specifier|private
name|long
name|MD5Hashcode
parameter_list|(
name|BytesWritable
name|key
parameter_list|)
throws|throws
name|DigestException
block|{
return|return
name|MD5Hashcode
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
DECL|method|MD5Hashcode (byte[] bytes, int start, int length)
specifier|synchronized
specifier|private
name|long
name|MD5Hashcode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|DigestException
block|{
name|DIGESTER
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|DIGESTER
operator|.
name|digest
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|MD5_LEN
argument_list|)
expr_stmt|;
name|long
name|hashcode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|hashcode
operator||=
operator|(
operator|(
name|digest
index|[
name|i
index|]
operator|&
literal|0xffL
operator|)
operator|<<
operator|(
literal|8
operator|*
operator|(
literal|7
operator|-
name|i
operator|)
operator|)
operator|)
expr_stmt|;
return|return
name|hashcode
return|;
block|}
block|}
DECL|class|FilterRecordReader
specifier|private
specifier|static
class|class
name|FilterRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|filter
specifier|private
name|Filter
name|filter
decl_stmt|;
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|V
name|value
decl_stmt|;
DECL|method|FilterRecordReader (Configuration conf)
specifier|public
name|FilterRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
comment|// instantiate filter
name|filter
operator|=
operator|(
name|Filter
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|FILTER_CLASS
argument_list|,
name|PercentFilter
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|nextKeyValue ()
specifier|public
specifier|synchronized
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
while|while
condition|(
name|super
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|key
operator|=
name|super
operator|.
name|getCurrentKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|value
operator|=
name|super
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey ()
specifier|public
name|K
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentValue ()
specifier|public
name|V
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

