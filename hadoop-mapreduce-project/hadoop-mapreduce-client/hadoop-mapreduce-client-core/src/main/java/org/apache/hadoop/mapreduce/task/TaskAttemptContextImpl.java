begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_comment
comment|/**  * The context for task attempts.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskAttemptContextImpl
specifier|public
class|class
name|TaskAttemptContextImpl
extends|extends
name|JobContextImpl
implements|implements
name|TaskAttemptContext
block|{
DECL|field|taskId
specifier|private
specifier|final
name|TaskAttemptID
name|taskId
decl_stmt|;
DECL|field|status
specifier|private
name|String
name|status
init|=
literal|""
decl_stmt|;
DECL|field|reporter
specifier|private
name|StatusReporter
name|reporter
decl_stmt|;
DECL|method|TaskAttemptContextImpl (Configuration conf, TaskAttemptID taskId)
specifier|public
name|TaskAttemptContextImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|taskId
argument_list|,
operator|new
name|DummyReporter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskAttemptContextImpl (Configuration conf, TaskAttemptID taskId, StatusReporter reporter)
specifier|public
name|TaskAttemptContextImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|StatusReporter
name|reporter
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|taskId
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**    * Get the unique name for this task attempt.    */
DECL|method|getTaskAttemptID ()
specifier|public
name|TaskAttemptID
name|getTaskAttemptID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**    * Get the last set status message.    * @return the current status message    */
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (Enum<?> counterName)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|counterName
parameter_list|)
block|{
return|return
name|reporter
operator|.
name|getCounter
argument_list|(
name|counterName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String groupName, String counterName)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
return|return
name|reporter
operator|.
name|getCounter
argument_list|(
name|groupName
argument_list|,
name|counterName
argument_list|)
return|;
block|}
comment|/**    * Report progress.    */
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
DECL|method|setStatusString (String status)
specifier|protected
name|void
name|setStatusString
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
comment|/**    * Set the current status of the task to the given string.    */
annotation|@
name|Override
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|String
name|normalizedStatus
init|=
name|Task
operator|.
name|normalizeStatus
argument_list|(
name|status
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|setStatusString
argument_list|(
name|normalizedStatus
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
name|normalizedStatus
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyReporter
specifier|public
specifier|static
class|class
name|DummyReporter
extends|extends
name|StatusReporter
block|{
DECL|method|setStatus (String s)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{     }
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
DECL|method|getCounter (Enum<?> name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
operator|new
name|Counters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getCounter (String group, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Counters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0f
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|reporter
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TaskAttemptContextImpl{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; taskId="
argument_list|)
operator|.
name|append
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", status='"
argument_list|)
operator|.
name|append
argument_list|(
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

