begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|DBOutputFormat
specifier|public
class|class
name|DBOutputFormat
parameter_list|<
name|K
extends|extends
name|DBWritable
parameter_list|,
name|V
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * A RecordWriter that writes the reduce output to a SQL table    */
DECL|class|DBRecordWriter
specifier|protected
class|class
name|DBRecordWriter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|.
name|DBRecordWriter
implements|implements
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|DBRecordWriter (Connection connection, PreparedStatement statement)
specifier|protected
name|DBRecordWriter
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|PreparedStatement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|statement
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|close (Reporter reporter)
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|checkOutputSpecs (FileSystem filesystem, JobConf job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|filesystem
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/** {@inheritDoc} */
DECL|method|getRecordWriter (FileSystem filesystem, JobConf job, String name, Progressable progress)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|filesystem
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|w
init|=
name|super
operator|.
name|getRecordWriter
argument_list|(
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
argument_list|,
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBOutputFormat
operator|.
name|DBRecordWriter
name|writer
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBOutputFormat
operator|.
name|DBRecordWriter
operator|)
name|w
decl_stmt|;
try|try
block|{
return|return
operator|new
name|DBRecordWriter
argument_list|(
name|writer
operator|.
name|getConnection
argument_list|()
argument_list|,
name|writer
operator|.
name|getStatement
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes the reduce-part of the job with the appropriate output settings    *     * @param job The job    * @param tableName The table to insert data into    * @param fieldNames The field names in the table.    */
DECL|method|setOutput (JobConf job, String tableName, String... fieldNames)
specifier|public
specifier|static
name|void
name|setOutput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
modifier|...
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|length
operator|>
literal|0
operator|&&
name|fieldNames
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|DBConfiguration
name|dbConf
init|=
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputFieldNames
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldNames
operator|.
name|length
operator|>
literal|0
condition|)
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|,
name|fieldNames
operator|.
name|length
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field names must be greater than 0"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes the reduce-part of the job with the appropriate output settings    *     * @param job The job    * @param tableName The table to insert data into    * @param fieldCount the number of fields in the table.    */
DECL|method|setOutput (JobConf job, String tableName, int fieldCount)
specifier|public
specifier|static
name|void
name|setOutput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|fieldCount
parameter_list|)
block|{
name|DBConfiguration
name|dbConf
init|=
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputFieldCount
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
block|}
DECL|method|setOutput (JobConf job, String tableName)
specifier|private
specifier|static
name|DBConfiguration
name|setOutput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|job
operator|.
name|setOutputFormat
argument_list|(
name|DBOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReduceSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DBConfiguration
name|dbConf
init|=
operator|new
name|DBConfiguration
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|dbConf
return|;
block|}
block|}
end_class

end_unit

