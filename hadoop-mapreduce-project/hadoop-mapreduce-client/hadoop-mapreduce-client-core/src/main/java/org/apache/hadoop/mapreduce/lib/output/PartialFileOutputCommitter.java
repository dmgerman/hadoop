begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|annotation
operator|.
name|Checkpointable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/** An {@link OutputCommitter} that commits files specified  * in job output directory i.e. ${mapreduce.output.fileoutputformat.outputdir}.  **/
end_comment

begin_class
annotation|@
name|Checkpointable
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|PartialFileOutputCommitter
specifier|public
class|class
name|PartialFileOutputCommitter
extends|extends
name|FileOutputCommitter
implements|implements
name|PartialOutputCommitter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PartialFileOutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PartialFileOutputCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|PartialFileOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|PartialFileOutputCommitter (Path outputPath, JobContext context)
specifier|public
name|PartialFileOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCommittedTaskPath (int appAttemptId, TaskAttemptContext context)
specifier|public
name|Path
name|getCommittedTaskPath
parameter_list|(
name|int
name|appAttemptId
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getJobAttemptPath
argument_list|(
name|appAttemptId
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fsFor (Path p, Configuration conf)
name|FileSystem
name|fsFor
parameter_list|(
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cleanUpPartialOutputForTask (TaskAttemptContext context)
specifier|public
name|void
name|cleanUpPartialOutputForTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we double check this is never invoked from a non-preemptable subclass.
comment|// This should never happen, since the invoking codes is checking it too,
comment|// but it is safer to double check. Errors handling this would produce
comment|// inconsistent output.
if|if
condition|(
operator|!
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Checkpointable
operator|.
name|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invoking cleanUpPartialOutputForTask() "
operator|+
literal|"from non @Preemptable class"
argument_list|)
throw|;
block|}
name|FileSystem
name|fs
init|=
name|fsFor
argument_list|(
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cleanUpPartialOutputForTask: removing everything belonging to "
operator|+
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" in: "
operator|+
name|getCommittedTaskPath
argument_list|(
name|context
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TaskAttemptID
name|taid
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
specifier|final
name|TaskID
name|tid
init|=
name|taid
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|Path
name|pCommit
init|=
name|getCommittedTaskPath
argument_list|(
name|context
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// remove any committed output
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taid
operator|.
name|getId
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|TaskAttemptID
name|oldId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tid
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Path
name|pTask
init|=
operator|new
name|Path
argument_list|(
name|pCommit
argument_list|,
name|oldId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|pTask
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|pTask
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|pTask
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

