begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|TaskReporter
import|;
end_import

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|interface|MapOutputCollector
specifier|public
interface|interface
name|MapOutputCollector
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|method|init (Context context )
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
function_decl|;
DECL|method|collect (K key, V value, int partition )
specifier|public
name|void
name|collect
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|partition
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
function_decl|;
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Context
specifier|public
specifier|static
class|class
name|Context
block|{
DECL|field|mapTask
specifier|private
specifier|final
name|MapTask
name|mapTask
decl_stmt|;
DECL|field|jobConf
specifier|private
specifier|final
name|JobConf
name|jobConf
decl_stmt|;
DECL|field|reporter
specifier|private
specifier|final
name|TaskReporter
name|reporter
decl_stmt|;
DECL|method|Context (MapTask mapTask, JobConf jobConf, TaskReporter reporter)
specifier|public
name|Context
parameter_list|(
name|MapTask
name|mapTask
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|TaskReporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|mapTask
operator|=
name|mapTask
expr_stmt|;
name|this
operator|.
name|jobConf
operator|=
name|jobConf
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
DECL|method|getMapTask ()
specifier|public
name|MapTask
name|getMapTask
parameter_list|()
block|{
return|return
name|mapTask
return|;
block|}
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
name|jobConf
return|;
block|}
DECL|method|getReporter ()
specifier|public
name|TaskReporter
name|getReporter
parameter_list|()
block|{
return|return
name|reporter
return|;
block|}
block|}
block|}
end_interface

end_unit

