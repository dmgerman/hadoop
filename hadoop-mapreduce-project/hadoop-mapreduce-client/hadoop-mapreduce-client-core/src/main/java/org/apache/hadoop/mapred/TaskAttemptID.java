begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_comment
comment|/**  * TaskAttemptID represents the immutable and unique identifier for   * a task attempt. Each task attempt is one particular instance of a Map or  * Reduce Task identified by its TaskID.   *   * TaskAttemptID consists of 2 parts. First part is the   * {@link TaskID}, that this TaskAttemptID belongs to.  * Second part is the task attempt number.<br>   * An example TaskAttemptID is :   *<code>attempt_200707121733_0003_m_000005_0</code> , which represents the  * zeroth task attempt for the fifth map task in the third job   * running at the jobtracker started at<code>200707121733</code>.  *<p>  * Applications should never construct or parse TaskAttemptID strings  * , but rather use appropriate constructors or {@link #forName(String)}   * method.   *   * @see JobID  * @see TaskID  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TaskAttemptID
specifier|public
class|class
name|TaskAttemptID
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
block|{
comment|/**    * Constructs a TaskAttemptID object from given {@link TaskID}.      * @param taskId TaskID that this task belongs to      * @param id the task attempt number    */
DECL|method|TaskAttemptID (TaskID taskId, int id)
specifier|public
name|TaskAttemptID
parameter_list|(
name|TaskID
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|taskId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a TaskId object from given parts.    * @param jtIdentifier jobTracker identifier    * @param jobId job number     * @param isMap whether the tip is a map     * @param taskId taskId number    * @param id the task attempt number    * @deprecated Use {@link #TaskAttemptID(String, int, TaskType, int, int)}.    */
annotation|@
name|Deprecated
DECL|method|TaskAttemptID (String jtIdentifier, int jobId, boolean isMap, int taskId, int id)
specifier|public
name|TaskAttemptID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|int
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|taskId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a TaskId object from given parts.    * @param jtIdentifier jobTracker identifier    * @param jobId job number     * @param type the TaskType     * @param taskId taskId number    * @param id the task attempt number    */
DECL|method|TaskAttemptID (String jtIdentifier, int jobId, TaskType type, int taskId, int id)
specifier|public
name|TaskAttemptID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|type
argument_list|,
name|taskId
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskAttemptID ()
specifier|public
name|TaskAttemptID
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|TaskID
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Downgrade a new TaskAttemptID to an old one    * @param old the new id    * @return either old or a new TaskAttemptID constructed to match old    */
specifier|public
specifier|static
DECL|method|downgrade (org.apache.hadoop.mapreduce.TaskAttemptID old)
name|TaskAttemptID
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|old
parameter_list|)
block|{
if|if
condition|(
name|old
operator|instanceof
name|TaskAttemptID
condition|)
block|{
return|return
operator|(
name|TaskAttemptID
operator|)
name|old
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskAttemptID
argument_list|(
name|TaskID
operator|.
name|downgrade
argument_list|(
name|old
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getTaskID ()
specifier|public
name|TaskID
name|getTaskID
parameter_list|()
block|{
return|return
operator|(
name|TaskID
operator|)
name|super
operator|.
name|getTaskID
argument_list|()
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
operator|(
name|JobID
operator|)
name|super
operator|.
name|getJobID
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
DECL|method|read (DataInput in)
specifier|public
specifier|static
name|TaskAttemptID
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptID
name|taskId
init|=
operator|new
name|TaskAttemptID
argument_list|()
decl_stmt|;
name|taskId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|taskId
return|;
block|}
comment|/** Construct a TaskAttemptID object from given string     * @return constructed TaskAttemptID object or null if the given String is null    * @throws IllegalArgumentException if the given string is malformed    */
DECL|method|forName (String str )
specifier|public
specifier|static
name|TaskAttemptID
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
operator|(
name|TaskAttemptID
operator|)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**     * Returns a regex pattern which matches task attempt IDs. Arguments can     * be given null, in which case that part of the regex will be generic.      * For example to obtain a regex matching<i>all task attempt IDs</i>     * of<i>any jobtracker</i>, in<i>any job</i>, of the<i>first     * map task</i>, we would use :    *<pre>     * TaskAttemptID.getTaskAttemptIDsPattern(null, null, true, 1, null);    *</pre>    * which will return :    *<pre> "attempt_[^_]*_[0-9]*_m_000001_[0-9]*"</pre>     * @param jtIdentifier jobTracker identifier, or null    * @param jobId job number, or null    * @param isMap whether the tip is a map, or null     * @param taskId taskId number, or null    * @param attemptId the task attempt number, or null    * @return a regex pattern matching TaskAttemptIDs    */
annotation|@
name|Deprecated
DECL|method|getTaskAttemptIDsPattern (String jtIdentifier, Integer jobId, Boolean isMap, Integer taskId, Integer attemptId)
specifier|public
specifier|static
name|String
name|getTaskAttemptIDsPattern
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|Boolean
name|isMap
parameter_list|,
name|Integer
name|taskId
parameter_list|,
name|Integer
name|attemptId
parameter_list|)
block|{
return|return
name|getTaskAttemptIDsPattern
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|taskId
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
comment|/**     * Returns a regex pattern which matches task attempt IDs. Arguments can     * be given null, in which case that part of the regex will be generic.      * For example to obtain a regex matching<i>all task attempt IDs</i>     * of<i>any jobtracker</i>, in<i>any job</i>, of the<i>first     * map task</i>, we would use :    *<pre>     * TaskAttemptID.getTaskAttemptIDsPattern(null, null, TaskType.MAP, 1, null);    *</pre>    * which will return :    *<pre> "attempt_[^_]*_[0-9]*_m_000001_[0-9]*"</pre>     * @param jtIdentifier jobTracker identifier, or null    * @param jobId job number, or null    * @param type the {@link TaskType}     * @param taskId taskId number, or null    * @param attemptId the task attempt number, or null    * @return a regex pattern matching TaskAttemptIDs    */
annotation|@
name|Deprecated
DECL|method|getTaskAttemptIDsPattern (String jtIdentifier, Integer jobId, TaskType type, Integer taskId, Integer attemptId)
specifier|public
specifier|static
name|String
name|getTaskAttemptIDsPattern
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|Integer
name|taskId
parameter_list|,
name|Integer
name|attemptId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|ATTEMPT
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getTaskAttemptIDsPatternWOPrefix
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|type
argument_list|,
name|taskId
argument_list|,
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getTaskAttemptIDsPatternWOPrefix (String jtIdentifier , Integer jobId, TaskType type, Integer taskId, Integer attemptId)
specifier|static
name|StringBuilder
name|getTaskAttemptIDsPatternWOPrefix
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|Integer
name|taskId
parameter_list|,
name|Integer
name|attemptId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|TaskID
operator|.
name|getTaskIDsPatternWOPrefix
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|type
argument_list|,
name|taskId
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|attemptId
operator|!=
literal|null
condition|?
name|attemptId
else|:
literal|"[0-9]*"
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

