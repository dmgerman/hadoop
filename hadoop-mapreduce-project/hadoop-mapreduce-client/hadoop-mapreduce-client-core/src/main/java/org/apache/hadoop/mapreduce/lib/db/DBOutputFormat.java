begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A OutputFormat that sends the reduce output to a SQL table.  *<p>   * {@link DBOutputFormat} accepts&lt;key,value&gt; pairs, where   * key has a type extending DBWritable. Returned {@link RecordWriter}   * writes<b>only the key</b> to the database with a batch SQL query.    *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|DBOutputFormat
specifier|public
class|class
name|DBOutputFormat
parameter_list|<
name|K
extends|extends
name|DBWritable
parameter_list|,
name|V
parameter_list|>
extends|extends
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DBOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dbProductName
specifier|public
name|String
name|dbProductName
init|=
literal|"DEFAULT"
decl_stmt|;
DECL|method|checkOutputSpecs (JobContext context)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{}
DECL|method|getOutputCommitter (TaskAttemptContext context)
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|FileOutputCommitter
argument_list|(
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**    * A RecordWriter that writes the reduce output to a SQL table    */
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DBRecordWriter
specifier|public
class|class
name|DBRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|field|statement
specifier|private
name|PreparedStatement
name|statement
decl_stmt|;
DECL|method|DBRecordWriter ()
specifier|public
name|DBRecordWriter
parameter_list|()
throws|throws
name|SQLException
block|{     }
DECL|method|DBRecordWriter (Connection connection , PreparedStatement statement)
specifier|public
name|DBRecordWriter
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|PreparedStatement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
DECL|method|getStatement ()
specifier|public
name|PreparedStatement
name|getStatement
parameter_list|()
block|{
return|return
name|statement
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|close (TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|statement
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|write (K key, V value)
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|statement
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Constructs the query used as the prepared statement to insert data.    *     * @param table    *          the table to insert into    * @param fieldNames    *          the fields to insert into. If field names are unknown, supply an    *          array of nulls.    */
DECL|method|constructQuery (String table, String[] fieldNames)
specifier|public
name|String
name|constructQuery
parameter_list|(
name|String
name|table
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field names may not be null"
argument_list|)
throw|;
block|}
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldNames
operator|.
name|length
operator|>
literal|0
operator|&&
name|fieldNames
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|append
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|fieldNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" VALUES ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|fieldNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dbProductName
operator|.
name|startsWith
argument_list|(
literal|"DB2"
argument_list|)
operator|||
name|dbProductName
operator|.
name|startsWith
argument_list|(
literal|"ORACLE"
argument_list|)
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getRecordWriter (TaskAttemptContext context)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|DBConfiguration
name|dbConf
init|=
operator|new
name|DBConfiguration
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|dbConf
operator|.
name|getOutputTableName
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
name|dbConf
operator|.
name|getOutputFieldNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|String
index|[
name|dbConf
operator|.
name|getOutputFieldCount
argument_list|()
index|]
expr_stmt|;
block|}
try|try
block|{
name|Connection
name|connection
init|=
name|dbConf
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
name|DatabaseMetaData
name|dbMeta
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|this
operator|.
name|dbProductName
operator|=
name|dbMeta
operator|.
name|getDatabaseProductName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|constructQuery
argument_list|(
name|tableName
argument_list|,
name|fieldNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DBRecordWriter
argument_list|(
name|connection
argument_list|,
name|statement
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes the reduce-part of the job with     * the appropriate output settings    *     * @param job The job    * @param tableName The table to insert data into    * @param fieldNames The field names in the table.    */
DECL|method|setOutput (Job job, String tableName, String... fieldNames)
specifier|public
specifier|static
name|void
name|setOutput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
modifier|...
name|fieldNames
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldNames
operator|.
name|length
operator|>
literal|0
operator|&&
name|fieldNames
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|DBConfiguration
name|dbConf
init|=
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputFieldNames
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|,
name|fieldNames
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field names must be greater than 0"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Initializes the reduce-part of the job     * with the appropriate output settings    *     * @param job The job    * @param tableName The table to insert data into    * @param fieldCount the number of fields in the table.    */
DECL|method|setOutput (Job job, String tableName, int fieldCount)
specifier|public
specifier|static
name|void
name|setOutput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|fieldCount
parameter_list|)
throws|throws
name|IOException
block|{
name|DBConfiguration
name|dbConf
init|=
name|setOutput
argument_list|(
name|job
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputFieldCount
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
block|}
DECL|method|setOutput (Job job, String tableName)
specifier|private
specifier|static
name|DBConfiguration
name|setOutput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|DBOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReduceSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DBConfiguration
name|dbConf
init|=
operator|new
name|DBConfiguration
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|dbConf
operator|.
name|setOutputTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|dbConf
return|;
block|}
block|}
end_class

end_unit

