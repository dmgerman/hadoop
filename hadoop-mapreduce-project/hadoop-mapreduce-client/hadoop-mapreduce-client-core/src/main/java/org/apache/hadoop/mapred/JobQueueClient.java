begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  *<code>JobQueueClient</code> is interface provided to the user in order to get  * JobQueue related information from the {@link JobTracker}  *   * It provides the facility to list the JobQueues present and ability to view  * the list of jobs within a specific JobQueue  *   **/
end_comment

begin_class
DECL|class|JobQueueClient
class|class
name|JobQueueClient
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|jc
name|JobClient
name|jc
decl_stmt|;
DECL|method|JobQueueClient ()
specifier|public
name|JobQueueClient
parameter_list|()
block|{   }
DECL|method|JobQueueClient (JobConf conf)
specifier|public
name|JobQueueClient
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|init (JobConf conf)
specifier|private
name|void
name|init
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitcode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|displayUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|exitcode
return|;
block|}
name|String
name|cmd
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|displayQueueList
init|=
literal|false
decl_stmt|;
name|boolean
name|displayQueueInfoWithJobs
init|=
literal|false
decl_stmt|;
name|boolean
name|displayQueueInfoWithoutJobs
init|=
literal|false
decl_stmt|;
name|boolean
name|displayQueueAclsInfoForCurrentUser
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"-list"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|displayQueueList
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-showacls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|displayQueueAclsInfoForCurrentUser
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-info"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|2
operator|&&
operator|!
operator|(
name|argv
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"-showJobs"
argument_list|)
operator|)
condition|)
block|{
name|displayQueueInfoWithoutJobs
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|argv
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"-showJobs"
argument_list|)
condition|)
block|{
name|displayQueueInfoWithJobs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitcode
return|;
block|}
block|}
else|else
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitcode
return|;
block|}
block|}
else|else
block|{
name|displayUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitcode
return|;
block|}
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayQueueList
condition|)
block|{
name|displayQueueList
argument_list|()
expr_stmt|;
name|exitcode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayQueueInfoWithoutJobs
condition|)
block|{
name|displayQueueInfo
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exitcode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayQueueInfoWithJobs
condition|)
block|{
name|displayQueueInfo
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exitcode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayQueueAclsInfoForCurrentUser
condition|)
block|{
name|this
operator|.
name|displayQueueAclsInfoForCurrentUser
argument_list|()
expr_stmt|;
name|exitcode
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|exitcode
return|;
block|}
comment|// format and print information about the passed in job queue.
DECL|method|printJobQueueInfo (JobQueueInfo jobQueueInfo, Writer writer)
name|void
name|printJobQueueInfo
parameter_list|(
name|JobQueueInfo
name|jobQueueInfo
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobQueueInfo
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"No queue found.\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue Name : %s \n"
argument_list|,
name|jobQueueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue State : %s \n"
argument_list|,
name|jobQueueInfo
operator|.
name|getQueueState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Scheduling Info : %s \n"
argument_list|,
name|jobQueueInfo
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|childQueues
init|=
name|jobQueueInfo
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|childQueues
operator|!=
literal|null
operator|&&
name|childQueues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Child Queues : "
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childQueues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JobQueueInfo
name|childQueue
init|=
name|childQueues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
name|childQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|childQueues
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"======================\n"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|displayQueueList ()
specifier|private
name|void
name|displayQueueList
parameter_list|()
throws|throws
name|IOException
block|{
name|JobQueueInfo
index|[]
name|rootQueues
init|=
name|jc
operator|.
name|getRootQueues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|allQueues
init|=
name|expandQueueList
argument_list|(
name|rootQueues
argument_list|)
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|queue
range|:
name|allQueues
control|)
block|{
name|printJobQueueInfo
argument_list|(
name|queue
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expands the hierarchy of queues and gives the list of all queues in     * depth-first order    * @param rootQueues the top-level queues    * @return the list of all the queues in depth-first order.    */
DECL|method|expandQueueList (JobQueueInfo[] rootQueues)
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|expandQueueList
parameter_list|(
name|JobQueueInfo
index|[]
name|rootQueues
parameter_list|)
block|{
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|allQueues
init|=
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|queue
range|:
name|rootQueues
control|)
block|{
name|allQueues
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|JobQueueInfo
index|[]
name|childQueues
init|=
name|queue
operator|.
name|getChildren
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|JobQueueInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|allQueues
operator|.
name|addAll
argument_list|(
name|expandQueueList
argument_list|(
name|childQueues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allQueues
return|;
block|}
comment|/**    * Method used to display information pertaining to a Single JobQueue    * registered with the {@link QueueManager}. Display of the Jobs is determine    * by the boolean    *     * @throws IOException, InterruptedException    */
DECL|method|displayQueueInfo (String queue, boolean showJobs)
specifier|private
name|void
name|displayQueueInfo
parameter_list|(
name|String
name|queue
parameter_list|,
name|boolean
name|showJobs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|JobQueueInfo
name|jobQueueInfo
init|=
name|jc
operator|.
name|getQueueInfo
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobQueueInfo
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue \""
operator|+
name|queue
operator|+
literal|"\" does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
name|printJobQueueInfo
argument_list|(
name|jobQueueInfo
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showJobs
operator|&&
operator|(
name|jobQueueInfo
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
operator|||
name|jobQueueInfo
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|JobStatus
index|[]
name|jobs
init|=
name|jc
operator|.
name|getJobsFromQueue
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobs
operator|==
literal|null
condition|)
name|jobs
operator|=
operator|new
name|JobStatus
index|[
literal|0
index|]
expr_stmt|;
name|jc
operator|.
name|displayJobList
argument_list|(
name|jobs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|displayQueueAclsInfoForCurrentUser ()
specifier|private
name|void
name|displayQueueAclsInfoForCurrentUser
parameter_list|()
throws|throws
name|IOException
block|{
name|QueueAclsInfo
index|[]
name|queueAclsInfoList
init|=
name|jc
operator|.
name|getQueueAclsForCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueAclsInfoList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue acls for user :  "
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nQueue  Operations"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"====================="
argument_list|)
expr_stmt|;
for|for
control|(
name|QueueAclsInfo
name|queueInfo
range|:
name|queueAclsInfoList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
operator|+
literal|"  "
argument_list|)
expr_stmt|;
name|String
index|[]
name|ops
init|=
name|queueInfo
operator|.
name|getOperations
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|int
name|max
init|=
name|ops
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ops
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|ops
index|[
name|j
index|]
operator|.
name|replaceFirst
argument_list|(
literal|"acl-"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|max
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"User "
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have access to any queue. \n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|displayUsage (String cmd)
specifier|private
name|void
name|displayUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: JobQueueClient "
decl_stmt|;
if|if
condition|(
literal|"-queueinfo"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"["
operator|+
name|cmd
operator|+
literal|"<job-queue-name> [-showJobs]]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|prefix
operator|+
literal|"<command><args>\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-list]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-info<job-queue-name> [-showJobs]]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"\t[-showacls] \n\n"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|JobQueueClient
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

