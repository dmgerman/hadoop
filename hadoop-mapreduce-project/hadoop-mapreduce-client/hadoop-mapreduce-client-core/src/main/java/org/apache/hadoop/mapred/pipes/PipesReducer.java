begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SkipBadRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * This class is used to talk to a C++ reduce task.  */
end_comment

begin_class
DECL|class|PipesReducer
class|class
name|PipesReducer
parameter_list|<
name|K2
extends|extends
name|WritableComparable
parameter_list|,
name|V2
extends|extends
name|Writable
parameter_list|,
name|K3
extends|extends
name|WritableComparable
parameter_list|,
name|V3
extends|extends
name|Writable
parameter_list|>
implements|implements
name|Reducer
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|,
name|K3
argument_list|,
name|V3
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PipesReducer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|job
specifier|private
name|JobConf
name|job
decl_stmt|;
DECL|field|application
specifier|private
name|Application
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|,
name|K3
argument_list|,
name|V3
argument_list|>
name|application
init|=
literal|null
decl_stmt|;
DECL|field|downlink
specifier|private
name|DownwardProtocol
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
name|downlink
init|=
literal|null
decl_stmt|;
DECL|field|isOk
specifier|private
name|boolean
name|isOk
init|=
literal|true
decl_stmt|;
DECL|field|skipping
specifier|private
name|boolean
name|skipping
init|=
literal|false
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
comment|//disable the auto increment of the counter. For pipes, no of processed
comment|//records could be different(equal or less) than the no of records input.
name|SkipBadRecords
operator|.
name|setAutoIncrReducerProcCount
argument_list|(
name|job
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|skipping
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SKIP_RECORDS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process all of the keys and values. Start up the application if we haven't    * started it yet.    */
DECL|method|reduce (K2 key, Iterator<V2> values, OutputCollector<K3, V3> output, Reporter reporter )
specifier|public
name|void
name|reduce
parameter_list|(
name|K2
name|key
parameter_list|,
name|Iterator
argument_list|<
name|V2
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|K3
argument_list|,
name|V3
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|isOk
operator|=
literal|false
expr_stmt|;
name|startApplication
argument_list|(
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|downlink
operator|.
name|reduceKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|downlink
operator|.
name|reduceValue
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipping
condition|)
block|{
comment|//flush the streams on every record input if running in skip mode
comment|//so that we don't buffer other records surrounding a bad record.
name|downlink
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|isOk
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startApplication (OutputCollector<K3, V3> output, Reporter reporter)
specifier|private
name|void
name|startApplication
parameter_list|(
name|OutputCollector
argument_list|<
name|K3
argument_list|,
name|V3
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting application"
argument_list|)
expr_stmt|;
name|application
operator|=
operator|new
name|Application
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|,
name|K3
argument_list|,
name|V3
argument_list|>
argument_list|(
name|job
argument_list|,
literal|null
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|K3
argument_list|>
operator|)
name|job
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|V3
argument_list|>
operator|)
name|job
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
name|downlink
operator|=
name|application
operator|.
name|getDownlink
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|int
name|reduce
init|=
literal|0
decl_stmt|;
name|downlink
operator|.
name|runReduce
argument_list|(
name|reduce
argument_list|,
name|Submitter
operator|.
name|getIsJavaRecordWriter
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle the end of the input by closing down the application.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if we haven't started the application, we have nothing to do
if|if
condition|(
name|isOk
condition|)
block|{
name|OutputCollector
argument_list|<
name|K3
argument_list|,
name|V3
argument_list|>
name|nullCollector
init|=
operator|new
name|OutputCollector
argument_list|<
name|K3
argument_list|,
name|V3
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|collect
parameter_list|(
name|K3
name|key
parameter_list|,
name|V3
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NULL
block|}
block|}
decl_stmt|;
name|startApplication
argument_list|(
name|nullCollector
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|isOk
condition|)
block|{
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|endOfInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// send the abort to the application and let it clean up
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for finish"
argument_list|)
expr_stmt|;
name|application
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got done"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|application
operator|.
name|abort
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|application
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

