begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FutureDataInputStreamBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
operator|.
name|FutureIOSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_comment
comment|/**  * NLineInputFormat which splits N lines of input as one split.  *  * In many "pleasantly" parallel applications, each process/mapper   * processes the same input file (s), but with computations are   * controlled by different parameters.(Referred to as "parameter sweeps").  * One way to achieve this, is to specify a set of parameters   * (one set per line) as input in a control file   * (which is the input path to the map-reduce application,  * where as the input dataset is specified   * via a config variable in JobConf.).  *   * The NLineInputFormat can be used in such applications, that splits   * the input file such that by default, one line is fed as  * a value to one map task, and key is the offset.  * i.e. (k,v) is (LongWritable, Text).  * The location hints will span the whole mapred cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|NLineInputFormat
specifier|public
class|class
name|NLineInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|LINES_PER_MAP
specifier|public
specifier|static
specifier|final
name|String
name|LINES_PER_MAP
init|=
literal|"mapreduce.input.lineinputformat.linespermap"
decl_stmt|;
DECL|method|createRecordReader ( InputSplit genericSplit, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|genericSplit
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|genericSplit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LineRecordReader
argument_list|()
return|;
block|}
comment|/**     * Logically splits the set of input files for the job, splits N lines    * of the input as one split.    *     * @see FileInputFormat#getSplits(JobContext)    */
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numLinesPerSplit
init|=
name|getNumLinesPerSplit
argument_list|(
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|listStatus
argument_list|(
name|job
argument_list|)
control|)
block|{
name|splits
operator|.
name|addAll
argument_list|(
name|getSplitsForFile
argument_list|(
name|status
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|numLinesPerSplit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
DECL|method|getSplitsForFile (FileStatus status, Configuration conf, int numLinesPerSplit)
specifier|public
specifier|static
name|List
argument_list|<
name|FileSplit
argument_list|>
name|getSplitsForFile
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numLinesPerSplit
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSplit
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|fileName
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a file: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|LineReader
name|lr
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|FutureDataInputStreamBuilder
name|builder
init|=
name|fileName
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|openFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FutureIOSupport
operator|.
name|propagateOptions
argument_list|(
name|builder
argument_list|,
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|INPUT_FILE_OPTION_PREFIX
argument_list|,
name|MRJobConfig
operator|.
name|INPUT_FILE_MANDATORY_PREFIX
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|FutureIOSupport
operator|.
name|awaitFuture
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|lr
operator|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|numLines
init|=
literal|0
decl_stmt|;
name|long
name|begin
init|=
literal|0
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
name|int
name|num
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|num
operator|=
name|lr
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|numLines
operator|++
expr_stmt|;
name|length
operator|+=
name|num
expr_stmt|;
if|if
condition|(
name|numLines
operator|==
name|numLinesPerSplit
condition|)
block|{
name|splits
operator|.
name|add
argument_list|(
name|createFileSplit
argument_list|(
name|fileName
argument_list|,
name|begin
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|begin
operator|+=
name|length
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
name|numLines
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numLines
operator|!=
literal|0
condition|)
block|{
name|splits
operator|.
name|add
argument_list|(
name|createFileSplit
argument_list|(
name|fileName
argument_list|,
name|begin
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lr
operator|!=
literal|null
condition|)
block|{
name|lr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|splits
return|;
block|}
comment|/**    * NLineInputFormat uses LineRecordReader, which always reads    * (and consumes) at least one character out of its upper split    * boundary. So to make sure that each mapper gets N lines, we    * move back the upper split limits of each split     * by one character here.    * @param fileName  Path of file    * @param begin  the position of the first byte in the file to process    * @param length  number of bytes in InputSplit    * @return  FileSplit    */
DECL|method|createFileSplit (Path fileName, long begin, long length)
specifier|protected
specifier|static
name|FileSplit
name|createFileSplit
parameter_list|(
name|Path
name|fileName
parameter_list|,
name|long
name|begin
parameter_list|,
name|long
name|length
parameter_list|)
block|{
return|return
operator|(
name|begin
operator|==
literal|0
operator|)
condition|?
operator|new
name|FileSplit
argument_list|(
name|fileName
argument_list|,
name|begin
argument_list|,
name|length
operator|-
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
else|:
operator|new
name|FileSplit
argument_list|(
name|fileName
argument_list|,
name|begin
operator|-
literal|1
argument_list|,
name|length
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
comment|/**    * Set the number of lines per split    * @param job the job to modify    * @param numLines the number of lines per split    */
DECL|method|setNumLinesPerSplit (Job job, int numLines)
specifier|public
specifier|static
name|void
name|setNumLinesPerSplit
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|numLines
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|LINES_PER_MAP
argument_list|,
name|numLines
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of lines per split    * @param job the job    * @return the number of lines per split    */
DECL|method|getNumLinesPerSplit (JobContext job)
specifier|public
specifier|static
name|int
name|getNumLinesPerSplit
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|LINES_PER_MAP
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

