begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A RecordReader that can effect joins of RecordReaders sharing a common key  * type and partitioning.  *   * @deprecated Use   * {@link org.apache.hadoop.mapreduce.lib.join.CompositeRecordReader} instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CompositeRecordReader
specifier|public
specifier|abstract
class|class
name|CompositeRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
comment|// key type
name|V
extends|extends
name|Writable
parameter_list|,
comment|// accepts RecordReader<K,V> as children
name|X
extends|extends
name|Writable
parameter_list|>
comment|// emits Writables of this type
implements|implements
name|Configurable
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|final
name|ResetableIterator
argument_list|<
name|X
argument_list|>
name|EMPTY
init|=
operator|new
name|ResetableIterator
operator|.
name|EMPTY
argument_list|<
name|X
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cmp
specifier|private
name|WritableComparator
name|cmp
decl_stmt|;
DECL|field|keyclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|q
specifier|private
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|q
decl_stmt|;
DECL|field|jc
specifier|protected
specifier|final
name|JoinCollector
name|jc
decl_stmt|;
DECL|field|kids
specifier|protected
specifier|final
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
index|[]
name|kids
decl_stmt|;
DECL|method|combine (Object[] srcs, TupleWritable value)
specifier|protected
specifier|abstract
name|boolean
name|combine
parameter_list|(
name|Object
index|[]
name|srcs
parameter_list|,
name|TupleWritable
name|value
parameter_list|)
function_decl|;
comment|/**    * Create a RecordReader with<tt>capacity</tt> children to position    *<tt>id</tt> in the parent reader.    * The id of a root CompositeRecordReader is -1 by convention, but relying    * on this is not recommended.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Generic array assignment
DECL|method|CompositeRecordReader (int id, int capacity, Class<? extends WritableComparator> cmpcl)
specifier|public
name|CompositeRecordReader
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|capacity
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|capacity
operator|>
literal|0
operator|:
literal|"Invalid capacity"
assert|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cmpcl
condition|)
block|{
name|cmp
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|cmpcl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|(
literal|3
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|o1
parameter_list|,
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|key
argument_list|()
argument_list|,
name|o2
operator|.
name|key
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|jc
operator|=
operator|new
name|JoinCollector
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|kids
operator|=
operator|new
name|ComposableRecordReader
index|[
name|capacity
index|]
expr_stmt|;
block|}
comment|/**    * Return the position in the collector this class occupies.    */
DECL|method|id ()
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Return sorted list of RecordReaders for this composite.    */
DECL|method|getRecordReaderQueue ()
specifier|protected
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|getRecordReaderQueue
parameter_list|()
block|{
return|return
name|q
return|;
block|}
comment|/**    * Return comparator defining the ordering for RecordReaders in this    * composite.    */
DECL|method|getComparator ()
specifier|protected
name|WritableComparator
name|getComparator
parameter_list|()
block|{
return|return
name|cmp
return|;
block|}
comment|/**    * Add a RecordReader to this collection.    * The id() of a RecordReader determines where in the Tuple its    * entry will appear. Adding RecordReaders with the same id has    * undefined behavior.    */
DECL|method|add (ComposableRecordReader<K,? extends V> rr)
specifier|public
name|void
name|add
parameter_list|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|rr
parameter_list|)
throws|throws
name|IOException
block|{
name|kids
index|[
name|rr
operator|.
name|id
argument_list|()
index|]
operator|=
name|rr
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|q
condition|)
block|{
name|cmp
operator|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|rr
operator|.
name|createKey
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|(
literal|3
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|o1
parameter_list|,
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|key
argument_list|()
argument_list|,
name|o2
operator|.
name|key
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Collector for join values.    * This accumulates values for a given key from the child RecordReaders. If    * one or more child RR contain duplicate keys, this will emit the cross    * product of the associated values until exhausted.    */
DECL|class|JoinCollector
class|class
name|JoinCollector
block|{
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|field|iters
specifier|private
name|ResetableIterator
argument_list|<
name|X
argument_list|>
index|[]
name|iters
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|first
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
comment|/**      * Construct a collector capable of handling the specified number of      * children.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Generic array assignment
DECL|method|JoinCollector (int card)
specifier|public
name|JoinCollector
parameter_list|(
name|int
name|card
parameter_list|)
block|{
name|iters
operator|=
operator|new
name|ResetableIterator
index|[
name|card
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iters
index|[
name|i
index|]
operator|=
name|EMPTY
expr_stmt|;
block|}
block|}
comment|/**      * Register a given iterator at position id.      */
DECL|method|add (int id, ResetableIterator<X> i)
specifier|public
name|void
name|add
parameter_list|(
name|int
name|id
parameter_list|,
name|ResetableIterator
argument_list|<
name|X
argument_list|>
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|iters
index|[
name|id
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|/**      * Return the key associated with this collection.      */
DECL|method|key ()
specifier|public
name|K
name|key
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * Codify the contents of the collector to be iterated over.      * When this is called, all RecordReaders registered for this      * key should have added ResetableIterators.      */
DECL|method|reset (K key)
specifier|public
name|void
name|reset
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|pos
operator|=
name|iters
operator|.
name|length
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iters
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Clear all state information.      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|key
operator|=
literal|null
expr_stmt|;
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iters
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iters
index|[
name|i
index|]
operator|=
name|EMPTY
expr_stmt|;
block|}
block|}
comment|/**      * Returns false if exhausted or if reset(K) has not been called.      */
DECL|method|hasNext ()
specifier|protected
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
operator|(
name|pos
operator|<
literal|0
operator|)
return|;
block|}
comment|/**      * Populate Tuple from iterators.      * It should be the case that, given iterators i_1...i_n over values from      * sources s_1...s_n sharing key k, repeated calls to next should yield      * I x I.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// No static typeinfo on Tuples
DECL|method|next (TupleWritable val)
specifier|protected
name|boolean
name|next
parameter_list|(
name|TupleWritable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|first
condition|)
block|{
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|pos
control|)
block|{
if|if
condition|(
name|iters
index|[
name|pos
index|]
operator|.
name|hasNext
argument_list|()
operator|&&
name|iters
index|[
name|pos
index|]
operator|.
name|next
argument_list|(
operator|(
name|X
operator|)
name|val
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|=
name|pos
expr_stmt|;
name|val
operator|.
name|setWritten
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|pos
operator|=
name|i
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
while|while
condition|(
literal|0
operator|<=
name|pos
operator|&&
operator|!
operator|(
name|iters
index|[
name|pos
index|]
operator|.
name|hasNext
argument_list|()
operator|&&
name|iters
index|[
name|pos
index|]
operator|.
name|next
argument_list|(
operator|(
name|X
operator|)
name|val
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
operator|)
condition|)
block|{
operator|--
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|val
operator|.
name|setWritten
argument_list|(
name|pos
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|iters
index|[
name|i
index|]
operator|.
name|replay
argument_list|(
operator|(
name|X
operator|)
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|val
operator|.
name|setWritten
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|pos
operator|+
literal|1
operator|<
name|iters
operator|.
name|length
condition|)
block|{
operator|++
name|pos
expr_stmt|;
name|iters
index|[
name|pos
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|iters
index|[
name|pos
index|]
operator|.
name|hasNext
argument_list|()
operator|&&
name|iters
index|[
name|pos
index|]
operator|.
name|next
argument_list|(
operator|(
name|X
operator|)
name|val
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|val
operator|.
name|setWritten
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Replay the last Tuple emitted.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// No static typeinfo on Tuples
DECL|method|replay (TupleWritable val)
specifier|public
name|boolean
name|replay
parameter_list|(
name|TupleWritable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The last emitted tuple might have drawn on an empty source;
comment|// it can't be cleared prematurely, b/c there may be more duplicate
comment|// keys in iterator positions< pos
assert|assert
operator|!
name|first
assert|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|iters
index|[
name|i
index|]
operator|.
name|replay
argument_list|(
operator|(
name|X
operator|)
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|val
operator|.
name|setWritten
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Close all child iterators.      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iters
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Write the next value into key, value as accepted by the operation      * associated with this set of RecordReaders.      */
DECL|method|flush (TupleWritable value)
specifier|public
name|boolean
name|flush
parameter_list|(
name|TupleWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|value
operator|.
name|clearWritten
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
argument_list|(
name|value
argument_list|)
operator|&&
name|combine
argument_list|(
name|kids
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Return the key for the current join or the value at the top of the    * RecordReader heap.    */
DECL|method|key ()
specifier|public
name|K
name|key
parameter_list|()
block|{
if|if
condition|(
name|jc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|jc
operator|.
name|key
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Clone the key at the top of this RR into the given object.    */
DECL|method|key (K key)
specifier|public
name|void
name|key
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|cloneInto
argument_list|(
name|key
argument_list|,
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return true if it is possible that this could emit more values.    */
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|jc
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Pass skip key to child RRs.    */
DECL|method|skip (K key)
specifier|public
name|void
name|skip
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|()
argument_list|,
name|key
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|q
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|rr
range|:
name|tmp
control|)
block|{
name|rr
operator|.
name|skip
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|rr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Obtain an iterator over the child RRs apropos of the value type    * ultimately emitted from this join.    */
DECL|method|getDelegate ()
specifier|protected
specifier|abstract
name|ResetableIterator
argument_list|<
name|X
argument_list|>
name|getDelegate
parameter_list|()
function_decl|;
comment|/**    * If key provided matches that of this Composite, give JoinCollector    * iterator over values it may emit.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// No values from static EMPTY class
DECL|method|accept (CompositeRecordReader.JoinCollector jc, K key)
specifier|public
name|void
name|accept
parameter_list|(
name|CompositeRecordReader
operator|.
name|JoinCollector
name|jc
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|&&
literal|0
operator|==
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|fillJoinCollector
argument_list|(
name|createKey
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|getDelegate
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|jc
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|/**    * For all child RRs offering the key provided, obtain an iterator    * at that position in the JoinCollector.    */
DECL|method|fillJoinCollector (K iterkey)
specifier|protected
name|void
name|fillJoinCollector
parameter_list|(
name|K
name|iterkey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|(
name|iterkey
argument_list|)
expr_stmt|;
while|while
condition|(
literal|0
operator|==
name|cmp
operator|.
name|compare
argument_list|(
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|()
argument_list|,
name|iterkey
argument_list|)
condition|)
block|{
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|t
init|=
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
name|t
operator|.
name|accept
argument_list|(
name|jc
argument_list|,
name|iterkey
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
comment|/**    * Implement Comparable contract (compare key of join or head of heap    * with that of another).    */
DECL|method|compareTo (ComposableRecordReader<K,?> other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|key
argument_list|()
argument_list|,
name|other
operator|.
name|key
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a new key value common to all child RRs.    * @throws ClassCastException if key classes differ.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Explicit check for key class agreement
DECL|method|createKey ()
specifier|public
name|K
name|createKey
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|keyclass
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|kids
index|[
literal|0
index|]
operator|.
name|createKey
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordReader
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|rr
range|:
name|kids
control|)
block|{
if|if
condition|(
operator|!
name|cls
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|createKey
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Child key classes fail to agree"
argument_list|)
throw|;
block|}
block|}
name|keyclass
operator|=
name|cls
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|K
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyclass
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a value to be used internally for joins.    */
DECL|method|createInternalValue ()
specifier|protected
name|TupleWritable
name|createInternalValue
parameter_list|()
block|{
name|Writable
index|[]
name|vals
init|=
operator|new
name|Writable
index|[
name|kids
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|kids
index|[
name|i
index|]
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TupleWritable
argument_list|(
name|vals
argument_list|)
return|;
block|}
comment|/**    * Unsupported (returns zero in all cases).    */
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
comment|/**    * Close all child RRs.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|kids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RecordReader
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|rr
range|:
name|kids
control|)
block|{
name|rr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jc
operator|!=
literal|null
condition|)
block|{
name|jc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Report progress as the minimum of all child RR progress.    */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|ret
init|=
literal|1.0f
decl_stmt|;
for|for
control|(
name|RecordReader
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|rr
range|:
name|kids
control|)
block|{
name|ret
operator|=
name|Math
operator|.
name|min
argument_list|(
name|ret
argument_list|,
name|rr
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

