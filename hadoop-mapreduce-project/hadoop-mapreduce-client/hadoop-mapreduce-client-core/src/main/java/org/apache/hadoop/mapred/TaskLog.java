begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SecureIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * A simple logger to handle the task-specific user logs.  * This class uses the system property<code>hadoop.log.dir</code>.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TaskLog
specifier|public
class|class
name|TaskLog
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskLog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|USERLOGS_DIR_NAME
specifier|static
specifier|final
name|String
name|USERLOGS_DIR_NAME
init|=
literal|"userlogs"
decl_stmt|;
DECL|field|LOG_DIR
specifier|private
specifier|static
specifier|final
name|File
name|LOG_DIR
init|=
operator|new
name|File
argument_list|(
name|getBaseLogDir
argument_list|()
argument_list|,
name|USERLOGS_DIR_NAME
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// localFS is set in (and used by) writeToIndexFile()
DECL|field|localFS
specifier|static
name|LocalFileSystem
name|localFS
init|=
literal|null
decl_stmt|;
DECL|method|getMRv2LogDir ()
specifier|public
specifier|static
name|String
name|getMRv2LogDir
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_DIR
argument_list|)
return|;
block|}
DECL|method|getTaskLogFile (TaskAttemptID taskid, boolean isCleanup, LogName filter)
specifier|public
specifier|static
name|File
name|getTaskLogFile
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|,
name|LogName
name|filter
parameter_list|)
block|{
if|if
condition|(
name|getMRv2LogDir
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getMRv2LogDir
argument_list|()
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|File
argument_list|(
name|getAttemptDir
argument_list|(
name|taskid
argument_list|,
name|isCleanup
argument_list|)
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getRealTaskLogFileLocation (TaskAttemptID taskid, boolean isCleanup, LogName filter)
specifier|static
name|File
name|getRealTaskLogFileLocation
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|,
name|LogName
name|filter
parameter_list|)
block|{
name|LogFileDetail
name|l
decl_stmt|;
try|try
block|{
name|l
operator|=
name|getLogFileDetail
argument_list|(
name|taskid
argument_list|,
name|filter
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"getTaskLogFileDetail threw an exception "
operator|+
name|ie
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|l
operator|.
name|location
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|class|LogFileDetail
specifier|private
specifier|static
class|class
name|LogFileDetail
block|{
DECL|field|LOCATION
specifier|final
specifier|static
name|String
name|LOCATION
init|=
literal|"LOG_DIR:"
decl_stmt|;
DECL|field|location
name|String
name|location
decl_stmt|;
DECL|field|start
name|long
name|start
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
block|}
DECL|method|getLogFileDetail (TaskAttemptID taskid, LogName filter, boolean isCleanup)
specifier|private
specifier|static
name|LogFileDetail
name|getLogFileDetail
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|LogName
name|filter
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|indexFile
init|=
name|getIndexFile
argument_list|(
name|taskid
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
name|BufferedReader
name|fis
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|SecureIOUtils
operator|.
name|openForRead
argument_list|(
name|indexFile
argument_list|,
name|obtainLogDirOwner
argument_list|(
name|taskid
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|//the format of the index file is
comment|//LOG_DIR:<the dir where the task logs are really stored>
comment|//stdout:<start-offset in the stdout file><length>
comment|//stderr:<start-offset in the stderr file><length>
comment|//syslog:<start-offset in the syslog file><length>
name|LogFileDetail
name|l
init|=
operator|new
name|LogFileDetail
argument_list|()
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
try|try
block|{
name|str
operator|=
name|fis
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
comment|// the file doesn't have anything
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Index file for the log of "
operator|+
name|taskid
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
name|l
operator|.
name|location
operator|=
name|str
operator|.
name|substring
argument_list|(
name|str
operator|.
name|indexOf
argument_list|(
name|LogFileDetail
operator|.
name|LOCATION
argument_list|)
operator|+
name|LogFileDetail
operator|.
name|LOCATION
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// special cases are the debugout and profile.out files. They are
comment|// guaranteed
comment|// to be associated with each task attempt since jvm reuse is disabled
comment|// when profiling/debugging is enabled
if|if
condition|(
name|filter
operator|.
name|equals
argument_list|(
name|LogName
operator|.
name|DEBUGOUT
argument_list|)
operator|||
name|filter
operator|.
name|equals
argument_list|(
name|LogName
operator|.
name|PROFILE
argument_list|)
condition|)
block|{
name|l
operator|.
name|length
operator|=
operator|new
name|File
argument_list|(
name|l
operator|.
name|location
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|l
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
name|str
operator|=
name|fis
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
comment|// look for the exact line containing the logname
if|if
condition|(
name|str
operator|.
name|contains
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
index|[]
name|startAndLen
init|=
name|str
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|l
operator|.
name|start
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startAndLen
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|l
operator|.
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startAndLen
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|str
operator|=
name|fis
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
DECL|method|getTmpIndexFile (TaskAttemptID taskid, boolean isCleanup)
specifier|private
specifier|static
name|File
name|getTmpIndexFile
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getAttemptDir
argument_list|(
name|taskid
argument_list|,
name|isCleanup
argument_list|)
argument_list|,
literal|"log.tmp"
argument_list|)
return|;
block|}
DECL|method|getIndexFile (TaskAttemptID taskid, boolean isCleanup)
specifier|static
name|File
name|getIndexFile
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getAttemptDir
argument_list|(
name|taskid
argument_list|,
name|isCleanup
argument_list|)
argument_list|,
literal|"log.index"
argument_list|)
return|;
block|}
comment|/**    * Obtain the owner of the log dir. This is     * determined by checking the job's log directory.    */
DECL|method|obtainLogDirOwner (TaskAttemptID taskid)
specifier|static
name|String
name|obtainLogDirOwner
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|raw
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|jobLogDir
init|=
operator|new
name|Path
argument_list|(
name|getJobDir
argument_list|(
name|taskid
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|jobStat
init|=
name|raw
operator|.
name|getFileStatus
argument_list|(
name|jobLogDir
argument_list|)
decl_stmt|;
return|return
name|jobStat
operator|.
name|getOwner
argument_list|()
return|;
block|}
DECL|method|getBaseLogDir ()
specifier|static
name|String
name|getBaseLogDir
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
return|;
block|}
DECL|method|getAttemptDir (TaskAttemptID taskid, boolean isCleanup)
specifier|static
name|File
name|getAttemptDir
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
block|{
name|String
name|cleanupSuffix
init|=
name|isCleanup
condition|?
literal|".cleanup"
else|:
literal|""
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|getJobDir
argument_list|(
name|taskid
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|,
name|taskid
operator|+
name|cleanupSuffix
argument_list|)
return|;
block|}
DECL|field|prevOutLength
specifier|private
specifier|static
name|long
name|prevOutLength
decl_stmt|;
DECL|field|prevErrLength
specifier|private
specifier|static
name|long
name|prevErrLength
decl_stmt|;
DECL|field|prevLogLength
specifier|private
specifier|static
name|long
name|prevLogLength
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
DECL|method|writeToIndexFile (String logLocation, boolean isCleanup)
name|void
name|writeToIndexFile
parameter_list|(
name|String
name|logLocation
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
comment|// To ensure atomicity of updates to index file, write to temporary index
comment|// file first and then rename.
name|File
name|tmpIndexFile
init|=
name|getTmpIndexFile
argument_list|(
name|currentTaskid
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|dos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bos
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|SecureIOUtils
operator|.
name|createForWrite
argument_list|(
name|tmpIndexFile
argument_list|,
literal|0644
argument_list|)
argument_list|)
expr_stmt|;
name|dos
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
expr_stmt|;
comment|//the format of the index file is
comment|//LOG_DIR:<the dir where the task logs are really stored>
comment|//STDOUT:<start-offset in the stdout file><length>
comment|//STDERR:<start-offset in the stderr file><length>
comment|//SYSLOG:<start-offset in the syslog file><length>
name|dos
operator|.
name|writeBytes
argument_list|(
name|LogFileDetail
operator|.
name|LOCATION
operator|+
name|logLocation
operator|+
literal|"\n"
operator|+
name|LogName
operator|.
name|STDOUT
operator|.
name|toString
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|prevOutLength
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|STDOUT
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|-
name|prevOutLength
argument_list|)
operator|+
literal|"\n"
operator|+
name|LogName
operator|.
name|STDERR
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|prevErrLength
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|STDERR
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|-
name|prevErrLength
argument_list|)
operator|+
literal|"\n"
operator|+
name|LogName
operator|.
name|SYSLOG
operator|.
name|toString
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|prevLogLength
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|SYSLOG
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|-
name|prevLogLength
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
name|dos
operator|=
literal|null
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|dos
argument_list|,
name|bos
argument_list|)
expr_stmt|;
block|}
name|File
name|indexFile
init|=
name|getIndexFile
argument_list|(
name|currentTaskid
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
name|Path
name|indexFilePath
init|=
operator|new
name|Path
argument_list|(
name|indexFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tmpIndexFilePath
init|=
operator|new
name|Path
argument_list|(
name|tmpIndexFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|localFS
operator|==
literal|null
condition|)
block|{
comment|// set localFS once
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localFS
operator|.
name|rename
argument_list|(
name|tmpIndexFilePath
argument_list|,
name|indexFilePath
argument_list|)
expr_stmt|;
block|}
DECL|method|resetPrevLengths (String logLocation)
specifier|private
specifier|static
name|void
name|resetPrevLengths
parameter_list|(
name|String
name|logLocation
parameter_list|)
block|{
name|prevOutLength
operator|=
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|STDOUT
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|prevErrLength
operator|=
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|STDERR
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|prevLogLength
operator|=
operator|new
name|File
argument_list|(
name|logLocation
argument_list|,
name|LogName
operator|.
name|SYSLOG
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
DECL|field|currentTaskid
specifier|private
specifier|volatile
specifier|static
name|TaskAttemptID
name|currentTaskid
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|syncLogs (String logLocation, TaskAttemptID taskid, boolean isCleanup)
specifier|public
specifier|synchronized
specifier|static
name|void
name|syncLogs
parameter_list|(
name|String
name|logLocation
parameter_list|,
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Enumeration
argument_list|<
name|Logger
argument_list|>
name|allLoggers
init|=
name|LogManager
operator|.
name|getCurrentLoggers
argument_list|()
decl_stmt|;
while|while
condition|(
name|allLoggers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Logger
name|l
init|=
name|allLoggers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Appender
argument_list|>
name|allAppenders
init|=
name|l
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|allAppenders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Appender
name|a
init|=
name|allAppenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|TaskLogAppender
condition|)
block|{
operator|(
operator|(
name|TaskLogAppender
operator|)
name|a
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentTaskid
operator|!=
name|taskid
condition|)
block|{
name|currentTaskid
operator|=
name|taskid
expr_stmt|;
name|resetPrevLengths
argument_list|(
name|logLocation
argument_list|)
expr_stmt|;
block|}
name|writeToIndexFile
argument_list|(
name|logLocation
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
DECL|method|syncLogsShutdown ( ScheduledExecutorService scheduler)
specifier|public
specifier|static
specifier|synchronized
name|void
name|syncLogsShutdown
parameter_list|(
name|ScheduledExecutorService
name|scheduler
parameter_list|)
block|{
comment|// flush standard streams
comment|//
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|// flush& close all appenders
name|LogManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|syncLogs ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|syncLogs
parameter_list|()
block|{
comment|// flush standard streams
comment|//
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// flush flushable appenders
comment|//
specifier|final
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|flushAppenders
argument_list|(
name|rootLogger
argument_list|)
expr_stmt|;
specifier|final
name|Enumeration
argument_list|<
name|Logger
argument_list|>
name|allLoggers
init|=
name|rootLogger
operator|.
name|getLoggerRepository
argument_list|()
operator|.
name|getCurrentLoggers
argument_list|()
decl_stmt|;
while|while
condition|(
name|allLoggers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|Logger
name|l
init|=
name|allLoggers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|flushAppenders
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|flushAppenders (Logger l)
specifier|private
specifier|static
name|void
name|flushAppenders
parameter_list|(
name|Logger
name|l
parameter_list|)
block|{
specifier|final
name|Enumeration
argument_list|<
name|Appender
argument_list|>
name|allAppenders
init|=
name|l
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|allAppenders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|Appender
name|a
init|=
name|allAppenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|Flushable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Flushable
operator|)
name|a
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|a
operator|+
literal|": Failed to flush!"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createLogSyncer ()
specifier|public
specifier|static
name|ScheduledExecutorService
name|createLogSyncer
parameter_list|()
block|{
specifier|final
name|ScheduledExecutorService
name|scheduler
init|=
name|HadoopExecutors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
specifier|final
name|Thread
name|t
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"Thread for syncLogs"
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TaskLog
operator|.
name|syncLogsShutdown
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TaskLog
operator|.
name|syncLogs
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|0L
argument_list|,
literal|5L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|scheduler
return|;
block|}
comment|/**    * The filter for userlogs.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|LogName
specifier|public
specifier|static
enum|enum
name|LogName
block|{
comment|/** Log on the stdout of the task. */
DECL|enumConstant|STDOUT
name|STDOUT
argument_list|(
literal|"stdout"
argument_list|)
block|,
comment|/** Log on the stderr of the task. */
DECL|enumConstant|STDERR
name|STDERR
argument_list|(
literal|"stderr"
argument_list|)
block|,
comment|/** Log on the map-reduce system logs of the task. */
DECL|enumConstant|SYSLOG
name|SYSLOG
argument_list|(
literal|"syslog"
argument_list|)
block|,
comment|/** The java profiler information. */
DECL|enumConstant|PROFILE
name|PROFILE
argument_list|(
literal|"profile.out"
argument_list|)
block|,
comment|/** Log the debug script's stdout  */
DECL|enumConstant|DEBUGOUT
name|DEBUGOUT
argument_list|(
literal|"debugout"
argument_list|)
block|;
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|method|LogName (String prefix)
specifier|private
name|LogName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
block|}
DECL|class|Reader
specifier|public
specifier|static
class|class
name|Reader
extends|extends
name|InputStream
block|{
DECL|field|bytesRemaining
specifier|private
name|long
name|bytesRemaining
decl_stmt|;
DECL|field|file
specifier|private
name|FileInputStream
name|file
decl_stmt|;
comment|/**      * Read a log file from start to end positions. The offsets may be negative,      * in which case they are relative to the end of the file. For example,      * Reader(taskid, kind, 0, -1) is the entire file and       * Reader(taskid, kind, -4197, -1) is the last 4196 bytes.       * @param taskid the id of the task to read the log file for      * @param kind the kind of log to read      * @param start the offset to read from (negative is relative to tail)      * @param end the offset to read upto (negative is relative to tail)      * @param isCleanup whether the attempt is cleanup attempt or not      * @throws IOException      */
DECL|method|Reader (TaskAttemptID taskid, LogName kind, long start, long end, boolean isCleanup)
specifier|public
name|Reader
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|LogName
name|kind
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find the right log file
name|LogFileDetail
name|fileDetail
init|=
name|getLogFileDetail
argument_list|(
name|taskid
argument_list|,
name|kind
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
comment|// calculate the start and stop
name|long
name|size
init|=
name|fileDetail
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|start
operator|+=
name|size
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
name|end
operator|+=
name|size
operator|+
literal|1
expr_stmt|;
block|}
name|start
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|start
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|end
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|end
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|fileDetail
operator|.
name|start
expr_stmt|;
name|end
operator|+=
name|fileDetail
operator|.
name|start
expr_stmt|;
name|bytesRemaining
operator|=
name|end
operator|-
name|start
expr_stmt|;
name|String
name|owner
init|=
name|obtainLogDirOwner
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
name|file
operator|=
name|SecureIOUtils
operator|.
name|openForRead
argument_list|(
operator|new
name|File
argument_list|(
name|fileDetail
operator|.
name|location
argument_list|,
name|kind
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// skip upto start
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|start
condition|)
block|{
name|long
name|result
init|=
name|file
operator|.
name|skip
argument_list|(
name|start
operator|-
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|bytesRemaining
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|pos
operator|+=
name|result
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|bytesRemaining
operator|>
literal|0
condition|)
block|{
name|bytesRemaining
operator|-=
literal|1
expr_stmt|;
name|result
operator|=
name|file
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|bytesRemaining
argument_list|)
expr_stmt|;
name|int
name|bytes
init|=
name|file
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|>
literal|0
condition|)
block|{
name|bytesRemaining
operator|-=
name|bytes
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bytesRemaining
argument_list|,
name|file
operator|.
name|available
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|bashCommand
specifier|private
specifier|static
specifier|final
name|String
name|bashCommand
init|=
literal|"bash"
decl_stmt|;
DECL|field|tailCommand
specifier|private
specifier|static
specifier|final
name|String
name|tailCommand
init|=
literal|"tail"
decl_stmt|;
comment|/**    * Get the desired maximum length of task's logs.    * @param conf the job to look in    * @return the number of bytes to cap the log files at    */
DECL|method|getTaskLogLength (JobConf conf)
specifier|public
specifier|static
name|long
name|getTaskLogLength
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|getTaskLogLimitBytes
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getTaskLogLimitBytes (Configuration conf)
specifier|public
specifier|static
name|long
name|getTaskLogLimitBytes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|JobContext
operator|.
name|TASK_USERLOG_LIMIT
argument_list|,
literal|0
argument_list|)
operator|*
literal|1024
return|;
block|}
comment|/**    * Wrap a command in a shell to capture stdout and stderr to files.    * Setup commands such as setting memory limit can be passed which     * will be executed before exec.    * If the tailLength is 0, the entire output will be saved.    * @param setup The setup commands for the execed process.    * @param cmd The command and the arguments that should be run    * @param stdoutFilename The filename that stdout should be saved to    * @param stderrFilename The filename that stderr should be saved to    * @param tailLength The length of the tail to be saved.    * @param useSetsid Should setsid be used in the command or not.    * @return the modified command that should be run    */
DECL|method|captureOutAndError (List<String> setup, List<String> cmd, File stdoutFilename, File stderrFilename, long tailLength, boolean useSetsid )
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|captureOutAndError
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|setup
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|File
name|stdoutFilename
parameter_list|,
name|File
name|stderrFilename
parameter_list|,
name|long
name|tailLength
parameter_list|,
name|boolean
name|useSetsid
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bashCommand
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
literal|"-c"
argument_list|)
expr_stmt|;
name|String
name|mergedCmd
init|=
name|buildCommandLine
argument_list|(
name|setup
argument_list|,
name|cmd
argument_list|,
name|stdoutFilename
argument_list|,
name|stderrFilename
argument_list|,
name|tailLength
argument_list|,
name|useSetsid
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|mergedCmd
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Construct the command line for running the task JVM    * @param setup The setup commands for the execed process.    * @param cmd The command and the arguments that should be run    * @param stdoutFilename The filename that stdout should be saved to    * @param stderrFilename The filename that stderr should be saved to    * @param tailLength The length of the tail to be saved.    * @return the command line as a String    * @throws IOException    */
DECL|method|buildCommandLine (List<String> setup, List<String> cmd, File stdoutFilename, File stderrFilename, long tailLength, boolean useSetsid)
specifier|static
name|String
name|buildCommandLine
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|setup
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|File
name|stdoutFilename
parameter_list|,
name|File
name|stderrFilename
parameter_list|,
name|long
name|tailLength
parameter_list|,
name|boolean
name|useSetsid
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|stdout
init|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|stdoutFilename
argument_list|)
decl_stmt|;
name|String
name|stderr
init|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|stderrFilename
argument_list|)
decl_stmt|;
name|StringBuffer
name|mergedCmd
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// Export the pid of taskJvm to env variable JVM_PID.
comment|// Currently pid is not used on Windows
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" export JVM_PID=`echo $$` ; "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setup
operator|!=
literal|null
operator|&&
name|setup
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
name|addCommand
argument_list|(
name|setup
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tailLength
operator|>
literal|0
condition|)
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
operator|&&
name|useSetsid
operator|&&
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"exec setsid "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"exec "
argument_list|)
expr_stmt|;
block|}
name|mergedCmd
operator|.
name|append
argument_list|(
name|addCommand
argument_list|(
name|cmd
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"< /dev/null "
argument_list|)
expr_stmt|;
if|if
condition|(
name|tailLength
operator|>
literal|0
condition|)
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|tailCommand
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" -c "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|tailLength
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|">> "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" ; exit $PIPESTATUS ) 2>&1 | "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|tailCommand
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" -c "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|tailLength
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|">> "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|stderr
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" ; exit $PIPESTATUS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" 1>> "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" 2>> "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|stderr
argument_list|)
expr_stmt|;
block|}
return|return
name|mergedCmd
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Construct the command line for running the debug script    * @param cmd The command and the arguments that should be run    * @param stdoutFilename The filename that stdout should be saved to    * @param stderrFilename The filename that stderr should be saved to    * @param tailLength The length of the tail to be saved.    * @return the command line as a String    * @throws IOException    */
DECL|method|buildDebugScriptCommandLine (List<String> cmd, String debugout)
specifier|static
name|String
name|buildDebugScriptCommandLine
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|String
name|debugout
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|mergedCmd
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"exec "
argument_list|)
expr_stmt|;
name|boolean
name|isExecutable
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cmd
control|)
block|{
if|if
condition|(
name|isExecutable
condition|)
block|{
comment|// the executable name needs to be expressed as a shell path for the
comment|// shell to find it.
name|mergedCmd
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
operator|new
name|File
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|isExecutable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mergedCmd
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|mergedCmd
operator|.
name|append
argument_list|(
literal|"< /dev/null "
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
name|debugout
argument_list|)
expr_stmt|;
name|mergedCmd
operator|.
name|append
argument_list|(
literal|" 2>&1 "
argument_list|)
expr_stmt|;
return|return
name|mergedCmd
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Add quotes to each of the command strings and    * return as a single string     * @param cmd The command to be quoted    * @param isExecutable makes shell path if the first     * argument is executable    * @return returns The quoted string.     * @throws IOException    */
DECL|method|addCommand (List<String> cmd, boolean isExecutable)
specifier|public
specifier|static
name|String
name|addCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|boolean
name|isExecutable
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|command
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cmd
control|)
block|{
name|command
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExecutable
condition|)
block|{
comment|// the executable name needs to be expressed as a shell path for the
comment|// shell to find it.
name|command
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
operator|new
name|File
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|isExecutable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|command
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|command
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Method to return the location of user log directory.    *     * @return base log directory    */
DECL|method|getUserLogDir ()
specifier|static
name|File
name|getUserLogDir
parameter_list|()
block|{
if|if
condition|(
operator|!
name|LOG_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|b
init|=
name|LOG_DIR
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mkdirs failed. Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|LOG_DIR
return|;
block|}
comment|/**    * Get the user log directory for the job jobid.    *     * @param jobid    * @return user log directory for the job    */
DECL|method|getJobDir (JobID jobid)
specifier|public
specifier|static
name|File
name|getJobDir
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getUserLogDir
argument_list|()
argument_list|,
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// TaskLog
end_comment

end_unit

