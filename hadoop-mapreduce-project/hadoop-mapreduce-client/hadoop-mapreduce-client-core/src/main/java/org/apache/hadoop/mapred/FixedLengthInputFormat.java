begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_comment
comment|/**  * FixedLengthInputFormat is an input format used to read input files  * which contain fixed length records.  The content of a record need not be  * text.  It can be arbitrary binary data.  Users must configure the record  * length property by calling:  * FixedLengthInputFormat.setRecordLength(conf, recordLength);<br><br> or  * conf.setInt(FixedLengthInputFormat.FIXED_RECORD_LENGTH, recordLength);  *<br><br>  * @see FixedLengthRecordReader  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FixedLengthInputFormat
specifier|public
class|class
name|FixedLengthInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|>
implements|implements
name|JobConfigurable
block|{
DECL|field|compressionCodecs
specifier|private
name|CompressionCodecFactory
name|compressionCodecs
init|=
literal|null
decl_stmt|;
DECL|field|FIXED_RECORD_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|FIXED_RECORD_LENGTH
init|=
literal|"fixedlengthinputformat.record.length"
decl_stmt|;
comment|/**    * Set the length of each record    * @param conf configuration    * @param recordLength the length of a record    */
DECL|method|setRecordLength (Configuration conf, int recordLength)
specifier|public
specifier|static
name|void
name|setRecordLength
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|recordLength
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|FIXED_RECORD_LENGTH
argument_list|,
name|recordLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get record length value    * @param conf configuration    * @return the record length, zero means none was set    */
DECL|method|getRecordLength (Configuration conf)
specifier|public
specifier|static
name|int
name|getRecordLength
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|FIXED_RECORD_LENGTH
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|compressionCodecs
operator|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|>
DECL|method|getRecordReader (InputSplit genericSplit, JobConf job, Reporter reporter)
name|getRecordReader
parameter_list|(
name|InputSplit
name|genericSplit
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|genericSplit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|recordLength
init|=
name|getRecordLength
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordLength
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fixed record length "
operator|+
name|recordLength
operator|+
literal|" is invalid.  It should be set to a value greater than zero"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FixedLengthRecordReader
argument_list|(
name|job
argument_list|,
operator|(
name|FileSplit
operator|)
name|genericSplit
argument_list|,
name|recordLength
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSplitable (FileSystem fs, Path file)
specifier|protected
name|boolean
name|isSplitable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
specifier|final
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|(
literal|null
operator|==
name|codec
operator|)
return|;
block|}
block|}
end_class

end_unit

