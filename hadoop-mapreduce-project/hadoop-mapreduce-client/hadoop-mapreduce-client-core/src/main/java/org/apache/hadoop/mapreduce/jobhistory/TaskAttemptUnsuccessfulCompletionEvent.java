begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ProgressSplitsBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_comment
comment|/**  * Event to record unsuccessful (Killed/Failed) completion of task attempts  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskAttemptUnsuccessfulCompletionEvent
specifier|public
class|class
name|TaskAttemptUnsuccessfulCompletionEvent
implements|implements
name|HistoryEvent
block|{
DECL|field|datum
specifier|private
name|TaskAttemptUnsuccessfulCompletion
name|datum
init|=
operator|new
name|TaskAttemptUnsuccessfulCompletion
argument_list|()
decl_stmt|;
comment|/**     * Create an event to record the unsuccessful completion of attempts    * @param id Attempt ID    * @param taskType Type of the task    * @param status Status of the attempt    * @param finishTime Finish time of the attempt    * @param hostname Name of the host where the attempt executed    * @param port rpc port for for the tracker    * @param error Error string    * @param allSplits the "splits", or a pixelated graph of various    *        measurable worker node state variables against progress.    *        Currently there are four; wallclock time, CPU time,    *        virtual memory and physical memory.      */
DECL|method|TaskAttemptUnsuccessfulCompletionEvent (TaskAttemptID id, TaskType taskType, String status, long finishTime, String hostname, int port, String error, int[][] allSplits)
specifier|public
name|TaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptID
name|id
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|status
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|error
parameter_list|,
name|int
index|[]
index|[]
name|allSplits
parameter_list|)
block|{
name|datum
operator|.
name|taskid
operator|=
operator|new
name|Utf8
argument_list|(
name|id
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
operator|new
name|Utf8
argument_list|(
name|taskType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|datum
operator|.
name|attemptId
operator|=
operator|new
name|Utf8
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|datum
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
name|datum
operator|.
name|hostname
operator|=
operator|new
name|Utf8
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|datum
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|datum
operator|.
name|error
operator|=
operator|new
name|Utf8
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|datum
operator|.
name|status
operator|=
operator|new
name|Utf8
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|datum
operator|.
name|clockSplits
operator|=
name|AvroArrayUtils
operator|.
name|toAvro
argument_list|(
name|ProgressSplitsBlock
operator|.
name|arrayGetWallclockTime
argument_list|(
name|allSplits
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|cpuUsages
operator|=
name|AvroArrayUtils
operator|.
name|toAvro
argument_list|(
name|ProgressSplitsBlock
operator|.
name|arrayGetCPUTime
argument_list|(
name|allSplits
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|vMemKbytes
operator|=
name|AvroArrayUtils
operator|.
name|toAvro
argument_list|(
name|ProgressSplitsBlock
operator|.
name|arrayGetVMemKbytes
argument_list|(
name|allSplits
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|physMemKbytes
operator|=
name|AvroArrayUtils
operator|.
name|toAvro
argument_list|(
name|ProgressSplitsBlock
operator|.
name|arrayGetPhysMemKbytes
argument_list|(
name|allSplits
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * @deprecated please use the constructor with an additional    *              argument, an array of splits arrays instead.  See    *              {@link org.apache.hadoop.mapred.ProgressSplitsBlock}    *              for an explanation of the meaning of that parameter.    *    * Create an event to record the unsuccessful completion of attempts    * @param id Attempt ID    * @param taskType Type of the task    * @param status Status of the attempt    * @param finishTime Finish time of the attempt    * @param hostname Name of the host where the attempt executed    * @param error Error string    */
DECL|method|TaskAttemptUnsuccessfulCompletionEvent (TaskAttemptID id, TaskType taskType, String status, long finishTime, String hostname, String error)
specifier|public
name|TaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptID
name|id
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|status
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|taskType
argument_list|,
name|status
argument_list|,
name|finishTime
argument_list|,
name|hostname
argument_list|,
operator|-
literal|1
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskAttemptUnsuccessfulCompletionEvent ()
name|TaskAttemptUnsuccessfulCompletionEvent
parameter_list|()
block|{}
DECL|method|getDatum ()
specifier|public
name|Object
name|getDatum
parameter_list|()
block|{
return|return
name|datum
return|;
block|}
DECL|method|setDatum (Object datum)
specifier|public
name|void
name|setDatum
parameter_list|(
name|Object
name|datum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|datum
expr_stmt|;
block|}
comment|/** Get the task id */
DECL|method|getTaskId ()
specifier|public
name|TaskID
name|getTaskId
parameter_list|()
block|{
return|return
name|TaskID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Get the task type */
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|TaskType
operator|.
name|valueOf
argument_list|(
name|datum
operator|.
name|taskType
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Get the attempt id */
DECL|method|getTaskAttemptId ()
specifier|public
name|TaskAttemptID
name|getTaskAttemptId
parameter_list|()
block|{
return|return
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Get the finish time */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|datum
operator|.
name|finishTime
return|;
block|}
comment|/** Get the name of the host where the attempt executed */
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|datum
operator|.
name|hostname
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the rpc port for the host where the attempt executed */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|datum
operator|.
name|port
return|;
block|}
comment|/** Get the error string */
DECL|method|getError ()
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|datum
operator|.
name|error
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the task status */
DECL|method|getTaskStatus ()
specifier|public
name|String
name|getTaskStatus
parameter_list|()
block|{
return|return
name|datum
operator|.
name|status
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the event type */
DECL|method|getEventType ()
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
comment|// Note that the task type can be setup/map/reduce/cleanup but the
comment|// attempt-type can only be map/reduce.
comment|// find out if the task failed or got killed
name|boolean
name|failed
init|=
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getTaskStatus
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
operator|(
name|failed
condition|?
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
else|:
name|EventType
operator|.
name|MAP_ATTEMPT_KILLED
operator|)
else|:
operator|(
name|failed
condition|?
name|EventType
operator|.
name|REDUCE_ATTEMPT_FAILED
else|:
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
operator|)
return|;
block|}
DECL|method|getClockSplits ()
specifier|public
name|int
index|[]
name|getClockSplits
parameter_list|()
block|{
return|return
name|AvroArrayUtils
operator|.
name|fromAvro
argument_list|(
name|datum
operator|.
name|clockSplits
argument_list|)
return|;
block|}
DECL|method|getCpuUsages ()
specifier|public
name|int
index|[]
name|getCpuUsages
parameter_list|()
block|{
return|return
name|AvroArrayUtils
operator|.
name|fromAvro
argument_list|(
name|datum
operator|.
name|cpuUsages
argument_list|)
return|;
block|}
DECL|method|getVMemKbytes ()
specifier|public
name|int
index|[]
name|getVMemKbytes
parameter_list|()
block|{
return|return
name|AvroArrayUtils
operator|.
name|fromAvro
argument_list|(
name|datum
operator|.
name|vMemKbytes
argument_list|)
return|;
block|}
DECL|method|getPhysMemKbytes ()
specifier|public
name|int
index|[]
name|getPhysMemKbytes
parameter_list|()
block|{
return|return
name|AvroArrayUtils
operator|.
name|fromAvro
argument_list|(
name|datum
operator|.
name|physMemKbytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

