begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_comment
comment|/**  * Event to record the submission of a job  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobSubmittedEvent
specifier|public
class|class
name|JobSubmittedEvent
implements|implements
name|HistoryEvent
block|{
DECL|field|datum
specifier|private
name|JobSubmitted
name|datum
init|=
operator|new
name|JobSubmitted
argument_list|()
decl_stmt|;
comment|/**    * Create an event to record job submission    * @param id The job Id of the job    * @param jobName Name of the job    * @param userName Name of the user who submitted the job    * @param submitTime Time of submission    * @param jobConfPath Path of the Job Configuration file    * @param jobACLs The configured acls for the job.    * @param jobQueueName The job-queue to which this job was submitted to    */
DECL|method|JobSubmittedEvent (JobID id, String jobName, String userName, long submitTime, String jobConfPath, Map<JobACL, AccessControlList> jobACLs, String jobQueueName)
specifier|public
name|JobSubmittedEvent
parameter_list|(
name|JobID
name|id
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|userName
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|jobConfPath
parameter_list|,
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
parameter_list|,
name|String
name|jobQueueName
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|jobName
argument_list|,
name|userName
argument_list|,
name|submitTime
argument_list|,
name|jobConfPath
argument_list|,
name|jobACLs
argument_list|,
name|jobQueueName
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an event to record job submission    * @param id The job Id of the job    * @param jobName Name of the job    * @param userName Name of the user who submitted the job    * @param submitTime Time of submission    * @param jobConfPath Path of the Job Configuration file    * @param jobACLs The configured acls for the job.    * @param jobQueueName The job-queue to which this job was submitted to    * @param workflowId The Id of the workflow    * @param workflowName The name of the workflow    * @param workflowNodeName The node name of the workflow    * @param workflowAdjacencies The adjacencies of the workflow    */
DECL|method|JobSubmittedEvent (JobID id, String jobName, String userName, long submitTime, String jobConfPath, Map<JobACL, AccessControlList> jobACLs, String jobQueueName, String workflowId, String workflowName, String workflowNodeName, String workflowAdjacencies)
specifier|public
name|JobSubmittedEvent
parameter_list|(
name|JobID
name|id
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|userName
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|jobConfPath
parameter_list|,
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
parameter_list|,
name|String
name|jobQueueName
parameter_list|,
name|String
name|workflowId
parameter_list|,
name|String
name|workflowName
parameter_list|,
name|String
name|workflowNodeName
parameter_list|,
name|String
name|workflowAdjacencies
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|jobName
argument_list|,
name|userName
argument_list|,
name|submitTime
argument_list|,
name|jobConfPath
argument_list|,
name|jobACLs
argument_list|,
name|jobQueueName
argument_list|,
name|workflowId
argument_list|,
name|workflowName
argument_list|,
name|workflowNodeName
argument_list|,
name|workflowAdjacencies
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an event to record job submission      * @param id The job Id of the job      * @param jobName Name of the job      * @param userName Name of the user who submitted the job      * @param submitTime Time of submission      * @param jobConfPath Path of the Job Configuration file      * @param jobACLs The configured acls for the job.      * @param jobQueueName The job-queue to which this job was submitted to      * @param workflowId The Id of the workflow      * @param workflowName The name of the workflow      * @param workflowNodeName The node name of the workflow      * @param workflowAdjacencies The adjacencies of the workflow      * @param workflowTags Comma-separated tags for the workflow      */
DECL|method|JobSubmittedEvent (JobID id, String jobName, String userName, long submitTime, String jobConfPath, Map<JobACL, AccessControlList> jobACLs, String jobQueueName, String workflowId, String workflowName, String workflowNodeName, String workflowAdjacencies, String workflowTags)
specifier|public
name|JobSubmittedEvent
parameter_list|(
name|JobID
name|id
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|userName
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|jobConfPath
parameter_list|,
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
parameter_list|,
name|String
name|jobQueueName
parameter_list|,
name|String
name|workflowId
parameter_list|,
name|String
name|workflowName
parameter_list|,
name|String
name|workflowNodeName
parameter_list|,
name|String
name|workflowAdjacencies
parameter_list|,
name|String
name|workflowTags
parameter_list|)
block|{
name|datum
operator|.
name|setJobid
argument_list|(
operator|new
name|Utf8
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setJobName
argument_list|(
operator|new
name|Utf8
argument_list|(
name|jobName
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setUserName
argument_list|(
operator|new
name|Utf8
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setSubmitTime
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setJobConfPath
argument_list|(
operator|new
name|Utf8
argument_list|(
name|jobConfPath
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
name|jobAcls
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|entry
range|:
name|jobACLs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jobAcls
operator|.
name|put
argument_list|(
operator|new
name|Utf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getAclName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Utf8
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAclString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|datum
operator|.
name|setAcls
argument_list|(
name|jobAcls
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobQueueName
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setJobQueueName
argument_list|(
operator|new
name|Utf8
argument_list|(
name|jobQueueName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workflowId
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setWorkflowId
argument_list|(
operator|new
name|Utf8
argument_list|(
name|workflowId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workflowName
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setWorkflowName
argument_list|(
operator|new
name|Utf8
argument_list|(
name|workflowName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workflowNodeName
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setWorkflowNodeName
argument_list|(
operator|new
name|Utf8
argument_list|(
name|workflowNodeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workflowAdjacencies
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setWorkflowAdjacencies
argument_list|(
operator|new
name|Utf8
argument_list|(
name|workflowAdjacencies
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workflowTags
operator|!=
literal|null
condition|)
block|{
name|datum
operator|.
name|setWorkflowTags
argument_list|(
operator|new
name|Utf8
argument_list|(
name|workflowTags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|JobSubmittedEvent ()
name|JobSubmittedEvent
parameter_list|()
block|{}
DECL|method|getDatum ()
specifier|public
name|Object
name|getDatum
parameter_list|()
block|{
return|return
name|datum
return|;
block|}
DECL|method|setDatum (Object datum)
specifier|public
name|void
name|setDatum
parameter_list|(
name|Object
name|datum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
operator|(
name|JobSubmitted
operator|)
name|datum
expr_stmt|;
block|}
comment|/** Get the Job Id */
DECL|method|getJobId ()
specifier|public
name|JobID
name|getJobId
parameter_list|()
block|{
return|return
name|JobID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|getJobid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Get the Job name */
DECL|method|getJobName ()
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getJobName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the Job queue name */
DECL|method|getJobQueueName ()
specifier|public
name|String
name|getJobQueueName
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getJobQueueName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getJobQueueName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the user name */
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getUserName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the submit time */
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getSubmitTime
argument_list|()
return|;
block|}
comment|/** Get the Path for the Job Configuration file */
DECL|method|getJobConfPath ()
specifier|public
name|String
name|getJobConfPath
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getJobConfPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the acls configured for the job **/
DECL|method|getJobAcls ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobAcls
parameter_list|()
block|{
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobAcls
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JobACL
name|jobACL
range|:
name|JobACL
operator|.
name|values
argument_list|()
control|)
block|{
name|Utf8
name|jobACLsUtf8
init|=
operator|new
name|Utf8
argument_list|(
name|jobACL
operator|.
name|getAclName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|datum
operator|.
name|getAcls
argument_list|()
operator|.
name|containsKey
argument_list|(
name|jobACLsUtf8
argument_list|)
condition|)
block|{
name|jobAcls
operator|.
name|put
argument_list|(
name|jobACL
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|datum
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|jobACLsUtf8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobAcls
return|;
block|}
comment|/** Get the id of the workflow */
DECL|method|getWorkflowId ()
specifier|public
name|String
name|getWorkflowId
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getWorkflowId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getWorkflowId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the name of the workflow */
DECL|method|getWorkflowName ()
specifier|public
name|String
name|getWorkflowName
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getWorkflowName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getWorkflowName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the node name of the workflow */
DECL|method|getWorkflowNodeName ()
specifier|public
name|String
name|getWorkflowNodeName
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getWorkflowNodeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getWorkflowNodeName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the adjacencies of the workflow */
DECL|method|getWorkflowAdjacencies ()
specifier|public
name|String
name|getWorkflowAdjacencies
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getWorkflowAdjacencies
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getWorkflowAdjacencies
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the workflow tags */
DECL|method|getWorkflowTags ()
specifier|public
name|String
name|getWorkflowTags
parameter_list|()
block|{
if|if
condition|(
name|datum
operator|.
name|getWorkflowTags
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|datum
operator|.
name|getWorkflowTags
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Get the event type */
DECL|method|getEventType ()
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
return|return
name|EventType
operator|.
name|JOB_SUBMITTED
return|;
block|}
annotation|@
name|Override
DECL|method|toTimelineEvent ()
specifier|public
name|TimelineEvent
name|toTimelineEvent
parameter_list|()
block|{
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setId
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|getEventType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"SUBMIT_TIME"
argument_list|,
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"QUEUE_NAME"
argument_list|,
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"JOB_NAME"
argument_list|,
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"USER_NAME"
argument_list|,
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"JOB_CONF_PATH"
argument_list|,
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"ACLS"
argument_list|,
name|getJobAcls
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"JOB_QUEUE_NAME"
argument_list|,
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"WORKLFOW_ID"
argument_list|,
name|getWorkflowId
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"WORKFLOW_NAME"
argument_list|,
name|getWorkflowName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"WORKFLOW_NODE_NAME"
argument_list|,
name|getWorkflowNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"WORKFLOW_ADJACENCIES"
argument_list|,
name|getWorkflowAdjacencies
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addInfo
argument_list|(
literal|"WORKFLOW_TAGS"
argument_list|,
name|getWorkflowTags
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tEvent
return|;
block|}
block|}
end_class

end_unit

