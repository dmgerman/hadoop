begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * InputFormat reading keys, values from SequenceFiles in binary (raw)  * format.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileAsBinaryInputFormat
specifier|public
class|class
name|SequenceFileAsBinaryInputFormat
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
DECL|method|SequenceFileAsBinaryInputFormat ()
specifier|public
name|SequenceFileAsBinaryInputFormat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|createRecordReader ( InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SequenceFileAsBinaryRecordReader
argument_list|()
return|;
block|}
comment|/**    * Read records from a SequenceFile as binary (raw) bytes.    */
DECL|class|SequenceFileAsBinaryRecordReader
specifier|public
specifier|static
class|class
name|SequenceFileAsBinaryRecordReader
extends|extends
name|RecordReader
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
DECL|field|in
specifier|private
name|SequenceFile
operator|.
name|Reader
name|in
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|field|done
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
DECL|field|buffer
specifier|private
name|DataOutputBuffer
name|buffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
DECL|field|vbytes
specifier|private
name|SequenceFile
operator|.
name|ValueBytes
name|vbytes
decl_stmt|;
DECL|field|key
specifier|private
name|BytesWritable
name|key
init|=
literal|null
decl_stmt|;
DECL|field|value
specifier|private
name|BytesWritable
name|value
init|=
literal|null
decl_stmt|;
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|path
init|=
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|in
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|end
operator|=
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getStart
argument_list|()
operator|+
name|split
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getStart
argument_list|()
operator|>
name|in
operator|.
name|getPosition
argument_list|()
condition|)
block|{
name|in
operator|.
name|sync
argument_list|(
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
comment|// sync to start
block|}
name|this
operator|.
name|start
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|vbytes
operator|=
name|in
operator|.
name|createValueBytes
argument_list|()
expr_stmt|;
name|done
operator|=
name|start
operator|>=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey ()
specifier|public
name|BytesWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentValue ()
specifier|public
name|BytesWritable
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|value
return|;
block|}
comment|/**      * Retrieve the name of the key class for this SequenceFile.      * @see org.apache.hadoop.io.SequenceFile.Reader#getKeyClassName      */
DECL|method|getKeyClassName ()
specifier|public
name|String
name|getKeyClassName
parameter_list|()
block|{
return|return
name|in
operator|.
name|getKeyClassName
argument_list|()
return|;
block|}
comment|/**      * Retrieve the name of the value class for this SequenceFile.      * @see org.apache.hadoop.io.SequenceFile.Reader#getValueClassName      */
DECL|method|getValueClassName ()
specifier|public
name|String
name|getValueClassName
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueClassName
argument_list|()
return|;
block|}
comment|/**      * Read raw bytes from a SequenceFile.      */
DECL|method|nextKeyValue ()
specifier|public
specifier|synchronized
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|pos
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|boolean
name|eof
init|=
operator|-
literal|1
operator|==
name|in
operator|.
name|nextRawKey
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eof
condition|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
name|key
operator|.
name|set
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|in
operator|.
name|nextRawValue
argument_list|(
name|vbytes
argument_list|)
expr_stmt|;
name|vbytes
operator|.
name|writeUncompressedBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
operator|(
name|done
operator|=
operator|(
name|eof
operator|||
operator|(
name|pos
operator|>=
name|end
operator|&&
name|in
operator|.
name|syncSeen
argument_list|()
operator|)
operator|)
operator|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Return the progress within the input split      * @return 0.0 to 1.0 of the input byte range      */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|end
operator|==
name|start
condition|)
block|{
return|return
literal|0.0f
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|(
name|in
operator|.
name|getPosition
argument_list|()
operator|-
name|start
operator|)
operator|/
call|(
name|double
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

