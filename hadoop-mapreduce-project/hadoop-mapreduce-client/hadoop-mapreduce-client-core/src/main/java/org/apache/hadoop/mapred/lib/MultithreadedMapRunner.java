begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SkipBadRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|map
operator|.
name|MultithreadedMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Multithreaded implementation for @link org.apache.hadoop.mapred.MapRunnable.  *<p>  * It can be used instead of the default implementation,  * @link org.apache.hadoop.mapred.MapRunner, when the Map operation is not CPU  * bound in order to improve throughput.  *<p>  * Map implementations using this MapRunnable must be thread-safe.  *<p>  * The Map-Reduce job has to be configured to use this MapRunnable class (using  * the JobConf.setMapRunnerClass method) and  * the number of thread the thread-pool can use with the  *<code>mapred.map.multithreadedrunner.threads</code> property, its default  * value is 10 threads.  *<p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultithreadedMapRunner
specifier|public
class|class
name|MultithreadedMapRunner
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
implements|implements
name|MapRunnable
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultithreadedMapRunner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|job
specifier|private
name|JobConf
name|job
decl_stmt|;
DECL|field|mapper
specifier|private
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
name|mapper
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|ioException
specifier|private
specifier|volatile
name|IOException
name|ioException
decl_stmt|;
DECL|field|runtimeException
specifier|private
specifier|volatile
name|RuntimeException
name|runtimeException
decl_stmt|;
DECL|field|incrProcCount
specifier|private
name|boolean
name|incrProcCount
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|configure (JobConf jobConf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
name|int
name|numberOfThreads
init|=
name|jobConf
operator|.
name|getInt
argument_list|(
name|MultithreadedMapper
operator|.
name|NUM_THREADS
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring jobConf "
operator|+
name|jobConf
operator|.
name|getJobName
argument_list|()
operator|+
literal|" to use "
operator|+
name|numberOfThreads
operator|+
literal|" threads"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|job
operator|=
name|jobConf
expr_stmt|;
comment|//increment processed counter only if skipping feature is enabled
name|this
operator|.
name|incrProcCount
operator|=
name|SkipBadRecords
operator|.
name|getMapperMaxSkipRecords
argument_list|(
name|job
argument_list|)
operator|>
literal|0
operator|&&
name|SkipBadRecords
operator|.
name|getAutoIncrMapperProcCount
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|jobConf
operator|.
name|getMapperClass
argument_list|()
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
comment|// Creating a threadpool of the configured size to execute the Mapper
comment|// map method in parallel.
name|executorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|numberOfThreads
argument_list|,
name|numberOfThreads
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|BlockingArrayQueue
argument_list|(
name|numberOfThreads
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A blocking array queue that replaces offer and add, which throws on a full    * queue, to a put, which waits on a full queue.    */
DECL|class|BlockingArrayQueue
specifier|private
specifier|static
class|class
name|BlockingArrayQueue
extends|extends
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|BlockingArrayQueue (int capacity)
specifier|public
name|BlockingArrayQueue
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|super
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
DECL|method|offer (Runnable r)
specifier|public
name|boolean
name|offer
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|method|add (Runnable r)
specifier|public
name|boolean
name|add
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
try|try
block|{
name|put
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
DECL|method|checkForExceptionsFromProcessingThreads ()
specifier|private
name|void
name|checkForExceptionsFromProcessingThreads
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
comment|// Checking if a Mapper.map within a Runnable has generated an
comment|// IOException. If so we rethrow it to force an abort of the Map
comment|// operation thus keeping the semantics of the default
comment|// implementation.
if|if
condition|(
name|ioException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioException
throw|;
block|}
comment|// Checking if a Mapper.map within a Runnable has generated a
comment|// RuntimeException. If so we rethrow it to force an abort of the Map
comment|// operation thus keeping the semantics of the default
comment|// implementation.
if|if
condition|(
name|runtimeException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|runtimeException
throw|;
block|}
block|}
DECL|method|run (RecordReader<K1, V1> input, OutputCollector<K2, V2> output, Reporter reporter)
specifier|public
name|void
name|run
parameter_list|(
name|RecordReader
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|>
name|input
parameter_list|,
name|OutputCollector
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// allocate key& value instances these objects will not be reused
comment|// because execution of Mapper.map is not serialized.
name|K1
name|key
init|=
name|input
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|V1
name|value
init|=
name|input
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|input
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|MapperInvokeRunable
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
argument_list|)
expr_stmt|;
name|checkForExceptionsFromProcessingThreads
argument_list|()
expr_stmt|;
comment|// Allocate new key& value instances as mapper is running in parallel
name|key
operator|=
name|input
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
name|input
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished dispatching all Mappper.map calls, job "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Graceful shutdown of the Threadpool, it will let all scheduled
comment|// Runnables to end.
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Now waiting for all Runnables to end.
while|while
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Awaiting all running Mappper.map calls to finish, job "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: while Mapper.map dispatching has concluded there are still
comment|// map calls in progress and exceptions would be thrown.
name|checkForExceptionsFromProcessingThreads
argument_list|()
expr_stmt|;
block|}
comment|// NOTE: it could be that a map call has had an exception after the
comment|// call for awaitTermination() returing true. And edge case but it
comment|// could happen.
name|checkForExceptionsFromProcessingThreads
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
comment|// Forcing a shutdown of all thread of the threadpool and rethrowing
comment|// the IOException
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
throw|throw
name|ioEx
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iEx
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|iEx
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|mapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Runnable to execute a single Mapper.map call from a forked thread.    */
DECL|class|MapperInvokeRunable
specifier|private
class|class
name|MapperInvokeRunable
implements|implements
name|Runnable
block|{
DECL|field|key
specifier|private
name|K1
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|V1
name|value
decl_stmt|;
DECL|field|output
specifier|private
name|OutputCollector
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
name|output
decl_stmt|;
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
decl_stmt|;
comment|/**      * Collecting all required parameters to execute a Mapper.map call.      *<p>      *      * @param key      * @param value      * @param output      * @param reporter      */
DECL|method|MapperInvokeRunable (K1 key, V1 value, OutputCollector<K2, V2> output, Reporter reporter)
specifier|public
name|MapperInvokeRunable
parameter_list|(
name|K1
name|key
parameter_list|,
name|V1
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * Executes a Mapper.map call with the given Mapper and parameters.      *<p>      * This method is called from the thread-pool thread.      *      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// map pair to output
name|MultithreadedMapRunner
operator|.
name|this
operator|.
name|mapper
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrProcCount
condition|)
block|{
name|reporter
operator|.
name|incrCounter
argument_list|(
name|SkipBadRecords
operator|.
name|COUNTER_GROUP
argument_list|,
name|SkipBadRecords
operator|.
name|COUNTER_MAP_PROCESSED_RECORDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// If there is an IOException during the call it is set in an instance
comment|// variable of the MultithreadedMapRunner from where it will be
comment|// rethrown.
synchronized|synchronized
init|(
name|MultithreadedMapRunner
operator|.
name|this
init|)
block|{
if|if
condition|(
name|MultithreadedMapRunner
operator|.
name|this
operator|.
name|ioException
operator|==
literal|null
condition|)
block|{
name|MultithreadedMapRunner
operator|.
name|this
operator|.
name|ioException
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|// If there is a RuntimeException during the call it is set in an
comment|// instance variable of the MultithreadedMapRunner from where it will be
comment|// rethrown.
synchronized|synchronized
init|(
name|MultithreadedMapRunner
operator|.
name|this
init|)
block|{
if|if
condition|(
name|MultithreadedMapRunner
operator|.
name|this
operator|.
name|runtimeException
operator|==
literal|null
condition|)
block|{
name|MultithreadedMapRunner
operator|.
name|this
operator|.
name|runtimeException
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

