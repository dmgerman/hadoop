begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.counters
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceBundles
import|;
end_import

begin_comment
comment|/**  * An abstract class to provide common implementation of the  * group factory in both mapred and mapreduce packages.  *  * @param<C> type of the counter  * @param<G> type of the group  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CounterGroupFactory
specifier|public
specifier|abstract
class|class
name|CounterGroupFactory
parameter_list|<
name|C
extends|extends
name|Counter
parameter_list|,
name|G
extends|extends
name|CounterGroupBase
parameter_list|<
name|C
parameter_list|>
parameter_list|>
block|{
DECL|interface|FrameworkGroupFactory
specifier|public
interface|interface
name|FrameworkGroupFactory
parameter_list|<
name|F
parameter_list|>
block|{
DECL|method|newGroup (String name)
name|F
name|newGroup
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
comment|// Integer mapping (for serialization) for framework groups
DECL|field|s2i
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|s2i
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|i2s
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|i2s
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
DECL|field|FS_GROUP_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FS_GROUP_NAME
init|=
name|FileSystemCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|fmap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FrameworkGroupFactory
argument_list|<
name|G
argument_list|>
argument_list|>
name|fmap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
block|{
comment|// Add builtin counter class here and the version when changed.
name|addFrameworkGroup
parameter_list|(
name|TaskCounter
operator|.
name|class
parameter_list|)
constructor_decl|;
name|addFrameworkGroup
parameter_list|(
name|JobCounter
operator|.
name|class
parameter_list|)
constructor_decl|;
block|}
comment|// Initialize the framework counter group mapping
specifier|private
specifier|synchronized
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|addFrameworkGroup (final Class<T> cls)
name|void
name|addFrameworkGroup
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|updateFrameworkGroupMapping
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|fmap
operator|.
name|put
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|newFrameworkGroupFactory
argument_list|(
name|cls
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update static mappings (c2i, i2s) of framework groups
DECL|method|updateFrameworkGroupMapping (Class<?> cls)
specifier|private
specifier|static
specifier|synchronized
name|void
name|updateFrameworkGroupMapping
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|String
name|name
init|=
name|cls
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Integer
name|i
init|=
name|s2i
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
return|return;
name|i2s
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|s2i
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|i2s
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Required override to return a new framework group factory    * @param<T> type of the counter enum class    * @param cls the counter enum class    * @return a new framework group factory    */
specifier|protected
specifier|abstract
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|newFrameworkGroupFactory (Class<T> cls)
name|FrameworkGroupFactory
argument_list|<
name|G
argument_list|>
name|newFrameworkGroupFactory
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
function_decl|;
comment|/**    * Create a new counter group    * @param name of the group    * @param limits the counters limits policy object    * @return a new counter group    */
DECL|method|newGroup (String name, Limits limits)
specifier|public
name|G
name|newGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
return|return
name|newGroup
argument_list|(
name|name
argument_list|,
name|ResourceBundles
operator|.
name|getCounterGroupName
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
argument_list|,
name|limits
argument_list|)
return|;
block|}
comment|/**    * Create a new counter group    * @param name of the group    * @param displayName of the group    * @param limits the counters limits policy object    * @return a new counter group    */
DECL|method|newGroup (String name, String displayName, Limits limits)
specifier|public
name|G
name|newGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
name|FrameworkGroupFactory
argument_list|<
name|G
argument_list|>
name|gf
init|=
name|fmap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|gf
operator|!=
literal|null
condition|)
return|return
name|gf
operator|.
name|newGroup
argument_list|(
name|name
argument_list|)
return|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FS_GROUP_NAME
argument_list|)
condition|)
block|{
return|return
name|newFileSystemGroup
argument_list|()
return|;
block|}
return|return
name|newGenericGroup
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|limits
argument_list|)
return|;
block|}
comment|/**    * Create a new framework group    * @param id of the group    * @return a new framework group    */
DECL|method|newFrameworkGroup (int id)
specifier|public
name|G
name|newFrameworkGroup
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|name
decl_stmt|;
synchronized|synchronized
init|(
name|CounterGroupFactory
operator|.
name|class
init|)
block|{
if|if
condition|(
name|id
operator|<
literal|0
operator|||
name|id
operator|>=
name|i2s
operator|.
name|size
argument_list|()
condition|)
name|throwBadFrameGroupIdException
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|name
operator|=
name|i2s
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// should not throw here.
block|}
name|FrameworkGroupFactory
argument_list|<
name|G
argument_list|>
name|gf
init|=
name|fmap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|gf
operator|==
literal|null
condition|)
name|throwBadFrameGroupIdException
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|gf
operator|.
name|newGroup
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get the id of a framework group    * @param name of the group    * @return the framework group id    */
DECL|method|getFrameworkGroupId (String name)
specifier|public
specifier|static
specifier|synchronized
name|int
name|getFrameworkGroupId
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Integer
name|i
init|=
name|s2i
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
name|throwBadFrameworkGroupNameException
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
comment|/**    * @return the counter factory version    */
DECL|method|version ()
specifier|public
name|int
name|version
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|/**    * Check whether a group name is a name of a framework group (including    * the filesystem group).    *    * @param name  to check    * @return true for framework group names    */
DECL|method|isFrameworkGroup (String name)
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|isFrameworkGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|s2i
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|||
name|name
operator|.
name|equals
argument_list|(
name|FS_GROUP_NAME
argument_list|)
return|;
block|}
DECL|method|throwBadFrameGroupIdException (int id)
specifier|private
specifier|static
name|void
name|throwBadFrameGroupIdException
parameter_list|(
name|int
name|id
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad framework group id: "
operator|+
name|id
argument_list|)
throw|;
block|}
DECL|method|throwBadFrameworkGroupNameException (String name)
specifier|private
specifier|static
name|void
name|throwBadFrameworkGroupNameException
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad framework group name: "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|/**    * Abstract factory method to create a generic (vs framework) counter group    * @param name  of the group    * @param displayName of the group    * @param limits limits of the counters    * @return a new generic counter group    */
DECL|method|newGenericGroup (String name, String displayName, Limits limits)
specifier|protected
specifier|abstract
name|G
name|newGenericGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
function_decl|;
comment|/**    * Abstract factory method to create a file system counter group    * @return a new file system counter group    */
DECL|method|newFileSystemGroup ()
specifier|protected
specifier|abstract
name|G
name|newFileSystemGroup
parameter_list|()
function_decl|;
block|}
end_class

end_unit

