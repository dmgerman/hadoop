begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * JobID represents the immutable and unique identifier for   * the job. JobID consists of two parts. First part   * represents the jobtracker identifier, so that jobID to jobtracker map   * is defined. For cluster setup this string is the jobtracker   * start time, for local setting, it is "local".  * Second part of the JobID is the job number.<br>   * An example JobID is :   *<code>job_200707121733_0003</code> , which represents the third job   * running at the jobtracker started at<code>200707121733</code>.   *<p>  * Applications should never construct or parse JobID strings, but rather   * use appropriate constructors or {@link #forName(String)} method.   *   * @see TaskID  * @see TaskAttemptID  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|JobID
specifier|public
class|class
name|JobID
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
block|{
comment|/**    * Constructs a JobID object     * @param jtIdentifier jobTracker identifier    * @param id job number    */
DECL|method|JobID (String jtIdentifier, int id)
specifier|public
name|JobID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|jtIdentifier
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|JobID ()
specifier|public
name|JobID
parameter_list|()
block|{ }
comment|/**    * Downgrade a new JobID to an old one    * @param old a new or old JobID    * @return either old or a new JobID build to match old    */
DECL|method|downgrade (org.apache.hadoop.mapreduce.JobID old)
specifier|public
specifier|static
name|JobID
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|old
parameter_list|)
block|{
if|if
condition|(
name|old
operator|instanceof
name|JobID
condition|)
block|{
return|return
operator|(
name|JobID
operator|)
name|old
return|;
block|}
else|else
block|{
return|return
operator|new
name|JobID
argument_list|(
name|old
operator|.
name|getJtIdentifier
argument_list|()
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Deprecated
DECL|method|read (DataInput in)
specifier|public
specifier|static
name|JobID
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|JobID
name|jobId
init|=
operator|new
name|JobID
argument_list|()
decl_stmt|;
name|jobId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jobId
return|;
block|}
comment|/** Construct a JobId object from given string     * @return constructed JobId object or null if the given String is null    * @throws IllegalArgumentException if the given string is malformed    */
DECL|method|forName (String str)
specifier|public
specifier|static
name|JobID
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
operator|(
name|JobID
operator|)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
operator|.
name|forName
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**     * Returns a regex pattern which matches task IDs. Arguments can     * be given null, in which case that part of the regex will be generic.      * For example to obtain a regex matching<i>any job</i>     * run on the jobtracker started at<i>200707121733</i>, we would use :    *<pre>     * JobID.getTaskIDsPattern("200707121733", null);    *</pre>    * which will return :    *<pre> "job_200707121733_[0-9]*"</pre>     * @param jtIdentifier jobTracker identifier, or null    * @param jobId job number, or null    * @return a regex pattern matching JobIDs    */
annotation|@
name|Deprecated
DECL|method|getJobIDsPattern (String jtIdentifier, Integer jobId)
specifier|public
specifier|static
name|String
name|getJobIDsPattern
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|JOB
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getJobIDsPatternWOPrefix
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getJobIDsPatternWOPrefix (String jtIdentifier, Integer jobId)
specifier|static
name|StringBuilder
name|getJobIDsPatternWOPrefix
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|jtIdentifier
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|jtIdentifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"[^"
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"]*"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|jobId
operator|!=
literal|null
condition|?
name|idFormat
operator|.
name|format
argument_list|(
name|jobId
argument_list|)
else|:
literal|"[0-9]*"
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

