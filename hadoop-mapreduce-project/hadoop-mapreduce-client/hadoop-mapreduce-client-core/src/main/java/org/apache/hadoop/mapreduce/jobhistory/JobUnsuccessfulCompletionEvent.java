begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Event to record Failed and Killed completion of jobs  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobUnsuccessfulCompletionEvent
specifier|public
class|class
name|JobUnsuccessfulCompletionEvent
implements|implements
name|HistoryEvent
block|{
DECL|field|NODIAGS
specifier|private
specifier|static
specifier|final
name|String
name|NODIAGS
init|=
literal|""
decl_stmt|;
DECL|field|NODIAGS_LIST
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|NODIAGS_LIST
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|NODIAGS
argument_list|)
decl_stmt|;
DECL|field|datum
specifier|private
name|JobUnsuccessfulCompletion
name|datum
init|=
operator|new
name|JobUnsuccessfulCompletion
argument_list|()
decl_stmt|;
comment|/**    * Create an event to record unsuccessful completion (killed/failed) of jobs    * @param id Job ID    * @param finishTime Finish time of the job    * @param finishedMaps Number of finished maps    * @param finishedReduces Number of finished reduces    * @param status Status of the job    */
DECL|method|JobUnsuccessfulCompletionEvent (JobID id, long finishTime, int finishedMaps, int finishedReduces, String status)
specifier|public
name|JobUnsuccessfulCompletionEvent
parameter_list|(
name|JobID
name|id
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|int
name|finishedMaps
parameter_list|,
name|int
name|finishedReduces
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|finishTime
argument_list|,
name|finishedMaps
argument_list|,
name|finishedReduces
argument_list|,
name|status
argument_list|,
name|NODIAGS_LIST
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an event to record unsuccessful completion (killed/failed) of jobs    * @param id Job ID    * @param finishTime Finish time of the job    * @param finishedMaps Number of finished maps    * @param finishedReduces Number of finished reduces    * @param status Status of the job    * @param diagnostics job runtime diagnostics    */
DECL|method|JobUnsuccessfulCompletionEvent (JobID id, long finishTime, int finishedMaps, int finishedReduces, String status, Iterable<String> diagnostics)
specifier|public
name|JobUnsuccessfulCompletionEvent
parameter_list|(
name|JobID
name|id
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|int
name|finishedMaps
parameter_list|,
name|int
name|finishedReduces
parameter_list|,
name|String
name|status
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|diagnostics
parameter_list|)
block|{
name|datum
operator|.
name|setJobid
argument_list|(
operator|new
name|Utf8
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishedMaps
argument_list|(
name|finishedMaps
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishedReduces
argument_list|(
name|finishedReduces
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setJobStatus
argument_list|(
operator|new
name|Utf8
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|diagnostics
operator|==
literal|null
condition|)
block|{
name|diagnostics
operator|=
name|NODIAGS_LIST
expr_stmt|;
block|}
name|datum
operator|.
name|setDiagnostics
argument_list|(
operator|new
name|Utf8
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|diagnostics
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|JobUnsuccessfulCompletionEvent ()
name|JobUnsuccessfulCompletionEvent
parameter_list|()
block|{}
DECL|method|getDatum ()
specifier|public
name|Object
name|getDatum
parameter_list|()
block|{
return|return
name|datum
return|;
block|}
DECL|method|setDatum (Object datum)
specifier|public
name|void
name|setDatum
parameter_list|(
name|Object
name|datum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
operator|(
name|JobUnsuccessfulCompletion
operator|)
name|datum
expr_stmt|;
block|}
comment|/** Get the Job ID */
DECL|method|getJobId ()
specifier|public
name|JobID
name|getJobId
parameter_list|()
block|{
return|return
name|JobID
operator|.
name|forName
argument_list|(
name|datum
operator|.
name|getJobid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Get the job finish time */
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getFinishTime
argument_list|()
return|;
block|}
comment|/** Get the number of finished maps */
DECL|method|getFinishedMaps ()
specifier|public
name|int
name|getFinishedMaps
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getFinishedMaps
argument_list|()
return|;
block|}
comment|/** Get the number of finished reduces */
DECL|method|getFinishedReduces ()
specifier|public
name|int
name|getFinishedReduces
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getFinishedReduces
argument_list|()
return|;
block|}
comment|/** Get the status */
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|datum
operator|.
name|getJobStatus
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the event type */
DECL|method|getEventType ()
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
if|if
condition|(
literal|"FAILED"
operator|.
name|equals
argument_list|(
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|EventType
operator|.
name|JOB_FAILED
return|;
block|}
elseif|else
if|if
condition|(
literal|"ERROR"
operator|.
name|equals
argument_list|(
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|EventType
operator|.
name|JOB_ERROR
return|;
block|}
else|else
return|return
name|EventType
operator|.
name|JOB_KILLED
return|;
block|}
comment|/**    * Retrieves diagnostics information preserved in the history file    *    * @return diagnostics as of the time of job termination    */
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
specifier|final
name|CharSequence
name|diagnostics
init|=
name|datum
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
return|return
name|diagnostics
operator|==
literal|null
condition|?
name|NODIAGS
else|:
name|diagnostics
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

