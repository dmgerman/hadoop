begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|annotation
operator|.
name|Checkpointable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**   * Reduces a set of intermediate values which share a key to a smaller set of  * values.    *   *<p><code>Reducer</code> implementations   * can access the {@link Configuration} for the job via the   * {@link JobContext#getConfiguration()} method.</p>   *<p><code>Reducer</code> has 3 primary phases:</p>  *<ol>  *<li>  *     *<b id="Shuffle">Shuffle</b>  *     *<p>The<code>Reducer</code> copies the sorted output from each   *   {@link Mapper} using HTTP across the network.</p>  *</li>  *     *<li>  *<b id="Sort">Sort</b>  *     *<p>The framework merge sorts<code>Reducer</code> inputs by   *<code>key</code>s   *   (since different<code>Mapper</code>s may have output the same key).</p>  *     *<p>The shuffle and sort phases occur simultaneously i.e. while outputs are  *   being fetched they are merged.</p>  *        *<b id="SecondarySort">SecondarySort</b>  *     *<p>To achieve a secondary sort on the values returned by the value   *   iterator, the application should extend the key with the secondary  *   key and define a grouping comparator. The keys will be sorted using the  *   entire key, but will be grouped using the grouping comparator to decide  *   which keys and values are sent in the same call to reduce.The grouping   *   comparator is specified via   *   {@link Job#setGroupingComparatorClass(Class)}. The sort order is  *   controlled by   *   {@link Job#setSortComparatorClass(Class)}.</p>  *     *     *   For example, say that you want to find duplicate web pages and tag them   *   all with the url of the "best" known example. You would set up the job   *   like:  *<ul>  *<li>Map Input Key: url</li>  *<li>Map Input Value: document</li>  *<li>Map Output Key: document checksum, url pagerank</li>  *<li>Map Output Value: url</li>  *<li>Partitioner: by checksum</li>  *<li>OutputKeyComparator: by checksum and then decreasing pagerank</li>  *<li>OutputValueGroupingComparator: by checksum</li>  *</ul>  *</li>  *     *<li>     *<b id="Reduce">Reduce</b>  *     *<p>In this phase the   *   {@link #reduce(Object, Iterable, org.apache.hadoop.mapreduce.Reducer.Context)}  *   method is called for each<code>&lt;key, (collection of values)&gt;</code> in  *   the sorted inputs.</p>  *<p>The output of the reduce task is typically written to a   *   {@link RecordWriter} via   *   {@link Context#write(Object, Object)}.</p>  *</li>  *</ol>  *   *<p>The output of the<code>Reducer</code> is<b>not re-sorted</b>.</p>  *   *<p>Example:</p>  *<p><blockquote><pre>  * public class IntSumReducer&lt;Key&gt; extends Reducer&lt;Key,IntWritable,  *                                                 Key,IntWritable&gt; {  *   private IntWritable result = new IntWritable();  *   *   public void reduce(Key key, Iterable&lt;IntWritable&gt; values,  *                      Context context) throws IOException, InterruptedException {  *     int sum = 0;  *     for (IntWritable val : values) {  *       sum += val.get();  *     }  *     result.set(sum);  *     context.write(key, result);  *   }  * }  *</pre></blockquote>  *   * @see Mapper  * @see Partitioner  */
end_comment

begin_class
annotation|@
name|Checkpointable
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Reducer
specifier|public
class|class
name|Reducer
parameter_list|<
name|KEYIN
parameter_list|,
name|VALUEIN
parameter_list|,
name|KEYOUT
parameter_list|,
name|VALUEOUT
parameter_list|>
block|{
comment|/**    * The<code>Context</code> passed on to the {@link Reducer} implementations.    */
DECL|class|Context
specifier|public
specifier|abstract
class|class
name|Context
implements|implements
name|ReduceContext
argument_list|<
name|KEYIN
argument_list|,
name|VALUEIN
argument_list|,
name|KEYOUT
argument_list|,
name|VALUEOUT
argument_list|>
block|{   }
comment|/**    * Called once at the start of the task.    */
DECL|method|setup (Context context )
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// NOTHING
block|}
comment|/**    * This method is called once for each key. Most applications will define    * their reduce class by overriding this method. The default implementation    * is an identity function.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|reduce (KEYIN key, Iterable<VALUEIN> values, Context context )
specifier|protected
name|void
name|reduce
parameter_list|(
name|KEYIN
name|key
parameter_list|,
name|Iterable
argument_list|<
name|VALUEIN
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|VALUEIN
name|value
range|:
name|values
control|)
block|{
name|context
operator|.
name|write
argument_list|(
operator|(
name|KEYOUT
operator|)
name|key
argument_list|,
operator|(
name|VALUEOUT
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called once at the end of the task.    */
DECL|method|cleanup (Context context )
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// NOTHING
block|}
comment|/**    * Advanced application writers can use the     * {@link #run(org.apache.hadoop.mapreduce.Reducer.Context)} method to    * control how the reduce task works.    */
DECL|method|run (Context context)
specifier|public
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|context
operator|.
name|nextKey
argument_list|()
condition|)
block|{
name|reduce
argument_list|(
name|context
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|context
operator|.
name|getValues
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// If a back up store is used, reset it
name|Iterator
argument_list|<
name|VALUEIN
argument_list|>
name|iter
init|=
name|context
operator|.
name|getValues
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|instanceof
name|ReduceContext
operator|.
name|ValueIterator
condition|)
block|{
operator|(
operator|(
name|ReduceContext
operator|.
name|ValueIterator
argument_list|<
name|VALUEIN
argument_list|>
operator|)
name|iter
operator|)
operator|.
name|resetBackupStore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

