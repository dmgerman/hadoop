begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * This class converts the input keys and values to their String forms by calling toString()  * method. This class to SequenceFileAsTextInputFormat class is as LineRecordReader  * class to TextInputFormat class.  * @deprecated Use   * {@link org.apache.hadoop.mapreduce.lib.input.SequenceFileAsTextRecordReader}  * instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileAsTextRecordReader
specifier|public
class|class
name|SequenceFileAsTextRecordReader
implements|implements
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
specifier|private
specifier|final
name|SequenceFileRecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
DECL|field|sequenceFileRecordReader
name|sequenceFileRecordReader
decl_stmt|;
DECL|field|innerKey
specifier|private
name|WritableComparable
name|innerKey
decl_stmt|;
DECL|field|innerValue
specifier|private
name|Writable
name|innerValue
decl_stmt|;
DECL|method|SequenceFileAsTextRecordReader (Configuration conf, FileSplit split)
specifier|public
name|SequenceFileAsTextRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|sequenceFileRecordReader
operator|=
operator|new
name|SequenceFileRecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|(
name|conf
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|innerKey
operator|=
name|sequenceFileRecordReader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|innerValue
operator|=
name|sequenceFileRecordReader
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
DECL|method|createKey ()
specifier|public
name|Text
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
comment|/** Read key/value pair in a line. */
DECL|method|next (Text key, Text value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tKey
init|=
name|key
decl_stmt|;
name|Text
name|tValue
init|=
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|sequenceFileRecordReader
operator|.
name|next
argument_list|(
name|innerKey
argument_list|,
name|innerValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tKey
operator|.
name|set
argument_list|(
name|innerKey
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tValue
operator|.
name|set
argument_list|(
name|innerValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sequenceFileRecordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sequenceFileRecordReader
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|sequenceFileRecordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

