begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|FastDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Used by the {@link HistoryViewer} to print job history in a human-readable  * format.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HumanReadableHistoryViewerPrinter
class|class
name|HumanReadableHistoryViewerPrinter
implements|implements
name|HistoryViewerPrinter
block|{
DECL|field|job
specifier|private
name|JobHistoryParser
operator|.
name|JobInfo
name|job
decl_stmt|;
DECL|field|dateFormat
specifier|private
specifier|final
name|FastDateFormat
name|dateFormat
decl_stmt|;
DECL|field|printAll
specifier|private
name|boolean
name|printAll
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|method|HumanReadableHistoryViewerPrinter (JobHistoryParser.JobInfo job, boolean printAll, String scheme)
name|HumanReadableHistoryViewerPrinter
parameter_list|(
name|JobHistoryParser
operator|.
name|JobInfo
name|job
parameter_list|,
name|boolean
name|printAll
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|this
argument_list|(
name|job
argument_list|,
name|printAll
argument_list|,
name|scheme
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HumanReadableHistoryViewerPrinter (JobHistoryParser.JobInfo job, boolean printAll, String scheme, TimeZone tz)
name|HumanReadableHistoryViewerPrinter
parameter_list|(
name|JobHistoryParser
operator|.
name|JobInfo
name|job
parameter_list|,
name|boolean
name|printAll
parameter_list|,
name|String
name|scheme
parameter_list|,
name|TimeZone
name|tz
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|printAll
operator|=
name|printAll
expr_stmt|;
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|dateFormat
operator|=
name|FastDateFormat
operator|.
name|getInstance
argument_list|(
literal|"d-MMM-yyyy HH:mm:ss"
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print out the Job History to the given {@link PrintStream} in a    * human-readable format.    * @param ps the {@link PrintStream} to print to    * @throws IOException when a problem occurs while printing    */
annotation|@
name|Override
DECL|method|print (PrintStream ps)
specifier|public
name|void
name|print
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
name|printJobDetails
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|printTaskSummary
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|printJobAnalysis
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|printAll
condition|)
block|{
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|ps
argument_list|,
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
expr_stmt|;
block|}
name|HistoryViewer
operator|.
name|FilteredJob
name|filter
init|=
operator|new
name|HistoryViewer
operator|.
name|FilteredJob
argument_list|(
name|job
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|printFailedAttempts
argument_list|(
name|ps
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|HistoryViewer
operator|.
name|FilteredJob
argument_list|(
name|job
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printFailedAttempts
argument_list|(
name|ps
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobDetails (PrintStream ps)
specifier|private
name|void
name|printJobDetails
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
name|StringBuilder
name|jobDetails
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nHadoop job: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n====================================="
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nUser: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nJobName: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nJobConf: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nSubmitted At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nLaunched At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|,
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nFinished At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nStatus: "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|job
operator|.
name|getJobStatus
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"Incomplete"
else|:
name|job
operator|.
name|getJobStatus
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|printJobCounters
argument_list|(
name|jobDetails
argument_list|,
name|job
operator|.
name|getTotalCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getMapCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getReduceCounters
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n====================================="
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|jobDetails
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobCounters (StringBuilder buff, Counters totalCounters, Counters mapCounters, Counters reduceCounters)
specifier|private
name|void
name|printJobCounters
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Counters
name|totalCounters
parameter_list|,
name|Counters
name|mapCounters
parameter_list|,
name|Counters
name|reduceCounters
parameter_list|)
block|{
comment|// Killed jobs might not have counters
if|if
condition|(
name|totalCounters
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"\nCounters: \n\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s|"
argument_list|,
literal|"Group Name"
argument_list|,
literal|"Counter name"
argument_list|,
literal|"Map Value"
argument_list|,
literal|"Reduce Value"
argument_list|,
literal|"Total Value"
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"\n------------------------------------------"
operator|+
literal|"---------------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|totalCounters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|CounterGroup
name|totalGroup
init|=
name|totalCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|mapGroup
init|=
name|mapCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|reduceGroup
init|=
name|reduceCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Format
name|decimal
init|=
operator|new
name|DecimalFormat
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|ctrItr
init|=
name|totalGroup
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ctrItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|counter
init|=
name|ctrItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|counter
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|mapValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|mapGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|reduceValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|reduceGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|totalValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%n|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s"
argument_list|,
name|totalGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|mapValue
argument_list|,
name|reduceValue
argument_list|,
name|totalValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|printAllTaskAttempts (PrintStream ps, TaskType taskType)
specifier|private
name|void
name|printAllTaskAttempts
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|StringBuilder
name|taskList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|" task list for "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tStartTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
literal|"\tShuffleFinished\tSortFinished"
argument_list|)
expr_stmt|;
block|}
name|taskList
operator|.
name|append
argument_list|(
literal|"\tFinishTime\tHostName\tError\tTaskLogs"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\n===================================================="
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|taskList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskType
argument_list|()
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|taskLogsUrl
init|=
name|HistoryViewer
operator|.
name|getTaskLogsUrl
argument_list|(
name|scheme
argument_list|,
name|attempt
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|taskLogsUrl
operator|!=
literal|null
condition|?
name|taskLogsUrl
else|:
literal|"n/a"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|taskList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|printTaskSummary (PrintStream ps)
specifier|private
name|void
name|printTaskSummary
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
name|HistoryViewer
operator|.
name|SummarizedJob
name|ts
init|=
operator|new
name|HistoryViewer
operator|.
name|SummarizedJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|StringBuilder
name|taskSummary
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nTask Summary"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n============================"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nKind\tTotal\t"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"Successful\tFailed\tKilled\tStartTime\tFinishTime"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nSetup\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFinishedSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|setupStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|setupFinished
argument_list|,
name|ts
operator|.
name|setupStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nMap\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|mapStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|mapFinished
argument_list|,
name|ts
operator|.
name|mapStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nReduce\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|reduceStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|reduceFinished
argument_list|,
name|ts
operator|.
name|reduceStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nCleanup\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFinishedCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|cleanupStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|cleanupFinished
argument_list|,
name|ts
operator|.
name|cleanupStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n============================\n"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|taskSummary
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobAnalysis (PrintStream ps)
specifier|private
name|void
name|printJobAnalysis
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
if|if
condition|(
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
condition|)
block|{
name|HistoryViewer
operator|.
name|AnalyzedJob
name|avg
init|=
operator|new
name|HistoryViewer
operator|.
name|AnalyzedJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|ps
operator|.
name|println
argument_list|(
literal|"\nAnalysis"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
literal|"========="
argument_list|)
expr_stmt|;
name|printAnalysis
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getMapTasks
argument_list|()
argument_list|,
name|cMap
argument_list|,
literal|"map"
argument_list|,
name|avg
operator|.
name|getAvgMapTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getMapTasks
argument_list|()
argument_list|,
literal|"map"
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
if|if
condition|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|printAnalysis
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|cShuffle
argument_list|,
literal|"shuffle"
argument_list|,
name|avg
operator|.
name|getAvgShuffleTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
literal|"shuffle"
argument_list|,
name|cFinishShuffle
argument_list|)
expr_stmt|;
name|printAnalysis
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|cReduce
argument_list|,
literal|"reduce"
argument_list|,
name|avg
operator|.
name|getAvgReduceTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|ps
argument_list|,
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
literal|"reduce"
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|println
argument_list|(
literal|"========="
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|.
name|println
argument_list|(
literal|"No Analysis available as job did not finish"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printAnalysis (PrintStream ps, JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks)
specifier|protected
name|void
name|printAnalysis
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|tasks
parameter_list|,
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cmp
parameter_list|,
name|String
name|taskType
parameter_list|,
name|long
name|avg
parameter_list|,
name|int
name|showTasks
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|tasks
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|min
init|=
name|tasks
index|[
name|tasks
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|StringBuilder
name|details
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nTime taken by best performing "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" task "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|min
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"map"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|append
argument_list|(
literal|"\nAverage time taken by "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" tasks: "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|avg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nWorse performing "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" tasks: "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tTimetaken"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|details
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|showTasks
operator|&&
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|details
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"map"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|println
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printLast (PrintStream ps, JobHistoryParser.TaskAttemptInfo[] tasks, String taskType, Comparator<JobHistoryParser.TaskAttemptInfo> cmp)
specifier|protected
name|void
name|printLast
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|tasks
parameter_list|,
name|String
name|taskType
parameter_list|,
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cmp
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|tasks
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|last
init|=
name|tasks
index|[
literal|0
index|]
decl_stmt|;
name|StringBuilder
name|lastBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
literal|"The last "
argument_list|)
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
expr_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
literal|" task "
argument_list|)
operator|.
name|append
argument_list|(
name|last
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|finishTime
decl_stmt|;
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|finishTime
operator|=
name|last
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|finishTime
operator|=
name|last
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
block|}
name|lastBuf
operator|.
name|append
argument_list|(
literal|" finished at (relative to the Job launch time): "
argument_list|)
expr_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|finishTime
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|lastBuf
argument_list|)
expr_stmt|;
block|}
DECL|method|printTasks (PrintStream ps, TaskType taskType, String status)
specifier|private
name|void
name|printTasks
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|StringBuilder
name|header
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|header
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" task list for "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tStartTime\tFinishTime\tError"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|header
operator|.
name|append
argument_list|(
literal|"\tInputSplits"
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|append
argument_list|(
literal|"\n===================================================="
argument_list|)
expr_stmt|;
name|StringBuilder
name|taskList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|&&
operator|(
name|status
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|||
name|status
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ALL"
argument_list|)
operator|)
condition|)
block|{
name|taskList
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|task
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskList
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|taskList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|printFailedAttempts (PrintStream ps, HistoryViewer.FilteredJob filteredJob)
specifier|private
name|void
name|printFailedAttempts
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|HistoryViewer
operator|.
name|FilteredJob
name|filteredJob
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|badNodes
init|=
name|filteredJob
operator|.
name|getFilteredMap
argument_list|()
decl_stmt|;
name|StringBuilder
name|attempts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|badNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attempts
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|filteredJob
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|" task attempts by nodes"
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|"\nHostname\tFailedTasks"
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|"\n==============================="
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|entry
range|:
name|badNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|node
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskID
argument_list|>
name|failedTasks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|attempts
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskID
name|t
range|:
name|failedTasks
control|)
block|{
name|attempts
operator|.
name|append
argument_list|(
name|t
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|println
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|cMap
specifier|private
specifier|static
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cMap
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l2
argument_list|,
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cShuffle
specifier|private
specifier|static
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cShuffle
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l2
argument_list|,
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cFinishShuffle
specifier|private
specifier|static
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cFinishShuffle
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l2
argument_list|,
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cFinishMapRed
specifier|private
specifier|static
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cFinishMapRed
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l2
argument_list|,
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cReduce
specifier|private
specifier|static
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cReduce
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l2
argument_list|,
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

