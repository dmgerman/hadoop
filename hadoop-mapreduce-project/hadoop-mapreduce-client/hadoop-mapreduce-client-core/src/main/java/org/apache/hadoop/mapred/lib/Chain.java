begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|SerializationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericsUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The Chain class provides all the common functionality for the  * {@link ChainMapper} and the {@link ChainReducer} classes.  */
end_comment

begin_class
DECL|class|Chain
class|class
name|Chain
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|Chain
block|{
DECL|field|MAPPER_BY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|MAPPER_BY_VALUE
init|=
literal|"chain.mapper.byValue"
decl_stmt|;
DECL|field|REDUCER_BY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|REDUCER_BY_VALUE
init|=
literal|"chain.reducer.byValue"
decl_stmt|;
DECL|field|chainJobConf
specifier|private
name|JobConf
name|chainJobConf
decl_stmt|;
DECL|field|mappers
specifier|private
name|List
argument_list|<
name|Mapper
argument_list|>
name|mappers
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapper
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reducer
specifier|private
name|Reducer
name|reducer
decl_stmt|;
comment|// to cache the key/value output class serializations for each chain element
comment|// to avoid everytime lookup.
DECL|field|mappersKeySerialization
specifier|private
name|List
argument_list|<
name|Serialization
argument_list|>
name|mappersKeySerialization
init|=
operator|new
name|ArrayList
argument_list|<
name|Serialization
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mappersValueSerialization
specifier|private
name|List
argument_list|<
name|Serialization
argument_list|>
name|mappersValueSerialization
init|=
operator|new
name|ArrayList
argument_list|<
name|Serialization
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reducerKeySerialization
specifier|private
name|Serialization
name|reducerKeySerialization
decl_stmt|;
DECL|field|reducerValueSerialization
specifier|private
name|Serialization
name|reducerValueSerialization
decl_stmt|;
comment|/**    * Creates a Chain instance configured for a Mapper or a Reducer.    *    * @param isMap TRUE indicates the chain is for a Mapper, FALSE that is for a    *              Reducer.    */
DECL|method|Chain (boolean isMap)
name|Chain
parameter_list|(
name|boolean
name|isMap
parameter_list|)
block|{
name|super
argument_list|(
name|isMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a Mapper class to the chain job's JobConf.    *<p/>    * The configuration properties of the chain job have precedence over the    * configuration properties of the Mapper.    *    * @param isMap            indicates if the Chain is for a Mapper or for a    * Reducer.    * @param jobConf              chain job's JobConf to add the Mapper class.    * @param klass            the Mapper class to add.    * @param inputKeyClass    mapper input key class.    * @param inputValueClass  mapper input value class.    * @param outputKeyClass   mapper output key class.    * @param outputValueClass mapper output value class.    * @param byValue          indicates if key/values should be passed by value    * to the next Mapper in the chain, if any.    * @param mapperConf       a JobConf with the configuration for the Mapper    * class. It is recommended to use a JobConf without default values using the    *<code>JobConf(boolean loadDefaults)</code> constructor with FALSE.    */
DECL|method|addMapper (boolean isMap, JobConf jobConf, Class<? extends Mapper<K1, V1, K2, V2>> klass, Class<? extends K1> inputKeyClass, Class<? extends V1> inputValueClass, Class<? extends K2> outputKeyClass, Class<? extends V2> outputValueClass, boolean byValue, JobConf mapperConf)
specifier|public
specifier|static
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
name|void
name|addMapper
parameter_list|(
name|boolean
name|isMap
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
name|klass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|K1
argument_list|>
name|inputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|V1
argument_list|>
name|inputValueClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|K2
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|V2
argument_list|>
name|outputValueClass
parameter_list|,
name|boolean
name|byValue
parameter_list|,
name|JobConf
name|mapperConf
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|isMap
argument_list|)
decl_stmt|;
comment|// if a reducer chain check the Reducer has been already set
name|checkReducerAlreadySet
argument_list|(
name|isMap
argument_list|,
name|jobConf
argument_list|,
name|prefix
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the mapper class
name|int
name|index
init|=
name|getIndex
argument_list|(
name|jobConf
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|prefix
operator|+
name|CHAIN_MAPPER_CLASS
operator|+
name|index
argument_list|,
name|klass
argument_list|,
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateKeyValueTypes
argument_list|(
name|isMap
argument_list|,
name|jobConf
argument_list|,
name|inputKeyClass
argument_list|,
name|inputValueClass
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|index
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
comment|// if the Mapper does not have a private JobConf create an empty one
if|if
condition|(
name|mapperConf
operator|==
literal|null
condition|)
block|{
comment|// using a JobConf without defaults to make it lightweight.
comment|// still the chain JobConf may have all defaults and this conf is
comment|// overlapped to the chain JobConf one.
name|mapperConf
operator|=
operator|new
name|JobConf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// store in the private mapper conf if it works by value or by reference
name|mapperConf
operator|.
name|setBoolean
argument_list|(
name|MAPPER_BY_VALUE
argument_list|,
name|byValue
argument_list|)
expr_stmt|;
name|setMapperConf
argument_list|(
name|isMap
argument_list|,
name|jobConf
argument_list|,
name|inputKeyClass
argument_list|,
name|inputValueClass
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|mapperConf
argument_list|,
name|index
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the Reducer class to the chain job's JobConf.    *<p/>    * The configuration properties of the chain job have precedence over the    * configuration properties of the Reducer.    *    * @param jobConf              chain job's JobConf to add the Reducer class.    * @param klass            the Reducer class to add.    * @param inputKeyClass    reducer input key class.    * @param inputValueClass  reducer input value class.    * @param outputKeyClass   reducer output key class.    * @param outputValueClass reducer output value class.    * @param byValue          indicates if key/values should be passed by value    * to the next Mapper in the chain, if any.    * @param reducerConf      a JobConf with the configuration for the Reducer    * class. It is recommended to use a JobConf without default values using the    *<code>JobConf(boolean loadDefaults)</code> constructor with FALSE.    */
DECL|method|setReducer (JobConf jobConf, Class<? extends Reducer<K1, V1, K2, V2>> klass, Class<? extends K1> inputKeyClass, Class<? extends V1> inputValueClass, Class<? extends K2> outputKeyClass, Class<? extends V2> outputValueClass, boolean byValue, JobConf reducerConf)
specifier|public
specifier|static
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
name|void
name|setReducer
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
name|klass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|K1
argument_list|>
name|inputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|V1
argument_list|>
name|inputValueClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|K2
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|V2
argument_list|>
name|outputValueClass
parameter_list|,
name|boolean
name|byValue
parameter_list|,
name|JobConf
name|reducerConf
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|checkReducerAlreadySet
argument_list|(
literal|false
argument_list|,
name|jobConf
argument_list|,
name|prefix
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|prefix
operator|+
name|CHAIN_REDUCER_CLASS
argument_list|,
name|klass
argument_list|,
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// if the Reducer does not have a private JobConf create an empty one
if|if
condition|(
name|reducerConf
operator|==
literal|null
condition|)
block|{
comment|// using a JobConf without defaults to make it lightweight.
comment|// still the chain JobConf may have all defaults and this conf is
comment|// overlapped to the chain JobConf one.
name|reducerConf
operator|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// store in the private reducer conf the input/output classes of the reducer
comment|// and if it works by value or by reference
name|reducerConf
operator|.
name|setBoolean
argument_list|(
name|REDUCER_BY_VALUE
argument_list|,
name|byValue
argument_list|)
expr_stmt|;
name|setReducerConf
argument_list|(
name|jobConf
argument_list|,
name|inputKeyClass
argument_list|,
name|inputValueClass
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|reducerConf
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configures all the chain elements for the task.    *    * @param jobConf chain job's JobConf.    */
DECL|method|configure (JobConf jobConf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|isMap
argument_list|)
decl_stmt|;
name|chainJobConf
operator|=
name|jobConf
expr_stmt|;
name|SerializationFactory
name|serializationFactory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|chainJobConf
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|jobConf
operator|.
name|getInt
argument_list|(
name|prefix
operator|+
name|CHAIN_MAPPER_SIZE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|klass
init|=
name|jobConf
operator|.
name|getClass
argument_list|(
name|prefix
operator|+
name|CHAIN_MAPPER_CLASS
operator|+
name|i
argument_list|,
literal|null
argument_list|,
name|Mapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|mConf
init|=
operator|new
name|JobConf
argument_list|(
name|getChainElementConf
argument_list|(
name|jobConf
argument_list|,
name|prefix
operator|+
name|CHAIN_MAPPER_CONFIG
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Mapper
name|mapper
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|mConf
argument_list|)
decl_stmt|;
name|mappers
operator|.
name|add
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mConf
operator|.
name|getBoolean
argument_list|(
name|MAPPER_BY_VALUE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|mappersKeySerialization
operator|.
name|add
argument_list|(
name|serializationFactory
operator|.
name|getSerialization
argument_list|(
name|mConf
operator|.
name|getClass
argument_list|(
name|MAPPER_OUTPUT_KEY_CLASS
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappersValueSerialization
operator|.
name|add
argument_list|(
name|serializationFactory
operator|.
name|getSerialization
argument_list|(
name|mConf
operator|.
name|getClass
argument_list|(
name|MAPPER_OUTPUT_VALUE_CLASS
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappersKeySerialization
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|mappersValueSerialization
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|>
name|klass
init|=
name|jobConf
operator|.
name|getClass
argument_list|(
name|prefix
operator|+
name|CHAIN_REDUCER_CLASS
argument_list|,
literal|null
argument_list|,
name|Reducer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|klass
operator|!=
literal|null
condition|)
block|{
name|JobConf
name|rConf
init|=
operator|new
name|JobConf
argument_list|(
name|getChainElementConf
argument_list|(
name|jobConf
argument_list|,
name|prefix
operator|+
name|CHAIN_REDUCER_CONFIG
argument_list|)
argument_list|)
decl_stmt|;
name|reducer
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|rConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|rConf
operator|.
name|getBoolean
argument_list|(
name|REDUCER_BY_VALUE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|reducerKeySerialization
operator|=
name|serializationFactory
operator|.
name|getSerialization
argument_list|(
name|rConf
operator|.
name|getClass
argument_list|(
name|REDUCER_OUTPUT_KEY_CLASS
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|reducerValueSerialization
operator|=
name|serializationFactory
operator|.
name|getSerialization
argument_list|(
name|rConf
operator|.
name|getClass
argument_list|(
name|REDUCER_OUTPUT_VALUE_CLASS
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reducerKeySerialization
operator|=
literal|null
expr_stmt|;
name|reducerValueSerialization
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the chain job conf.    *    * @return the chain job conf.    */
DECL|method|getChainJobConf ()
specifier|protected
name|JobConf
name|getChainJobConf
parameter_list|()
block|{
return|return
name|chainJobConf
return|;
block|}
comment|/**    * Returns the first Mapper instance in the chain.    *    * @return the first Mapper instance in the chain or NULL if none.    */
DECL|method|getFirstMap ()
specifier|public
name|Mapper
name|getFirstMap
parameter_list|()
block|{
return|return
operator|(
name|mappers
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|mappers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Returns the Reducer instance in the chain.    *    * @return the Reducer instance in the chain or NULL if none.    */
DECL|method|getReducer ()
specifier|public
name|Reducer
name|getReducer
parameter_list|()
block|{
return|return
name|reducer
return|;
block|}
comment|/**    * Returns the OutputCollector to be used by a Mapper instance in the chain.    *    * @param mapperIndex index of the Mapper instance to get the OutputCollector.    * @param output      the original OutputCollector of the task.    * @param reporter    the reporter of the task.    * @return the OutputCollector to be used in the chain.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|getMapperCollector (int mapperIndex, OutputCollector output, Reporter reporter)
specifier|public
name|OutputCollector
name|getMapperCollector
parameter_list|(
name|int
name|mapperIndex
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|Serialization
name|keySerialization
init|=
name|mappersKeySerialization
operator|.
name|get
argument_list|(
name|mapperIndex
argument_list|)
decl_stmt|;
name|Serialization
name|valueSerialization
init|=
name|mappersValueSerialization
operator|.
name|get
argument_list|(
name|mapperIndex
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChainOutputCollector
argument_list|(
name|mapperIndex
argument_list|,
name|keySerialization
argument_list|,
name|valueSerialization
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Returns the OutputCollector to be used by a Mapper instance in the chain.    *    * @param output   the original OutputCollector of the task.    * @param reporter the reporter of the task.    * @return the OutputCollector to be used in the chain.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|getReducerCollector (OutputCollector output, Reporter reporter)
specifier|public
name|OutputCollector
name|getReducerCollector
parameter_list|(
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
return|return
operator|new
name|ChainOutputCollector
argument_list|(
name|reducerKeySerialization
argument_list|,
name|reducerValueSerialization
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Closes all the chain elements.    *    * @throws IOException thrown if any of the chain elements threw an    *                     IOException exception.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Mapper
name|map
range|:
name|mappers
control|)
block|{
name|map
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reducer
operator|!=
literal|null
condition|)
block|{
name|reducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// using a ThreadLocal to reuse the ByteArrayOutputStream used for ser/deser
comment|// it has to be a thread local because if not it would break if used from a
comment|// MultiThreadedMapRunner.
DECL|field|threadLocalDataOutputBuffer
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|DataOutputBuffer
argument_list|>
name|threadLocalDataOutputBuffer
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DataOutputBuffer
argument_list|>
argument_list|()
block|{
specifier|protected
name|DataOutputBuffer
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|DataOutputBuffer
argument_list|(
literal|1024
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * OutputCollector implementation used by the chain tasks.    *<p/>    * If it is not the end of the chain, a {@link #collect} invocation invokes    * the next Mapper in the chain. If it is the end of the chain the task    * OutputCollector is called.    */
DECL|class|ChainOutputCollector
specifier|private
class|class
name|ChainOutputCollector
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|nextMapperIndex
specifier|private
name|int
name|nextMapperIndex
decl_stmt|;
DECL|field|keySerialization
specifier|private
name|Serialization
argument_list|<
name|K
argument_list|>
name|keySerialization
decl_stmt|;
DECL|field|valueSerialization
specifier|private
name|Serialization
argument_list|<
name|V
argument_list|>
name|valueSerialization
decl_stmt|;
DECL|field|output
specifier|private
name|OutputCollector
name|output
decl_stmt|;
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
decl_stmt|;
comment|/*      * Constructor for Mappers      */
DECL|method|ChainOutputCollector (int index, Serialization<K> keySerialization, Serialization<V> valueSerialization, OutputCollector output, Reporter reporter)
specifier|public
name|ChainOutputCollector
parameter_list|(
name|int
name|index
parameter_list|,
name|Serialization
argument_list|<
name|K
argument_list|>
name|keySerialization
parameter_list|,
name|Serialization
argument_list|<
name|V
argument_list|>
name|valueSerialization
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|nextMapperIndex
operator|=
name|index
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|keySerialization
operator|=
name|keySerialization
expr_stmt|;
name|this
operator|.
name|valueSerialization
operator|=
name|valueSerialization
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/*      * Constructor for Reducer      */
DECL|method|ChainOutputCollector (Serialization<K> keySerialization, Serialization<V> valueSerialization, OutputCollector output, Reporter reporter)
specifier|public
name|ChainOutputCollector
parameter_list|(
name|Serialization
argument_list|<
name|K
argument_list|>
name|keySerialization
parameter_list|,
name|Serialization
argument_list|<
name|V
argument_list|>
name|valueSerialization
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|nextMapperIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|keySerialization
operator|=
name|keySerialization
expr_stmt|;
name|this
operator|.
name|valueSerialization
operator|=
name|valueSerialization
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|collect (K key, V value)
specifier|public
name|void
name|collect
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextMapperIndex
operator|<
name|mappers
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// there is a next mapper in chain
comment|// only need to ser/deser if there is next mapper in the chain
if|if
condition|(
name|keySerialization
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|makeCopyForPassByValue
argument_list|(
name|keySerialization
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|makeCopyForPassByValue
argument_list|(
name|valueSerialization
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// gets ser/deser and mapper of next in chain
name|Serialization
name|nextKeySerialization
init|=
name|mappersKeySerialization
operator|.
name|get
argument_list|(
name|nextMapperIndex
argument_list|)
decl_stmt|;
name|Serialization
name|nextValueSerialization
init|=
name|mappersValueSerialization
operator|.
name|get
argument_list|(
name|nextMapperIndex
argument_list|)
decl_stmt|;
name|Mapper
name|nextMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|nextMapperIndex
argument_list|)
decl_stmt|;
comment|// invokes next mapper in chain
name|nextMapper
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
operator|new
name|ChainOutputCollector
argument_list|(
name|nextMapperIndex
argument_list|,
name|nextKeySerialization
argument_list|,
name|nextValueSerialization
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// end of chain, user real output collector
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeCopyForPassByValue (Serialization<E> serialization, E obj)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|E
name|makeCopyForPassByValue
parameter_list|(
name|Serialization
argument_list|<
name|E
argument_list|>
name|serialization
parameter_list|,
name|E
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|Serializer
argument_list|<
name|E
argument_list|>
name|ser
init|=
name|serialization
operator|.
name|getSerializer
argument_list|(
name|GenericsUtil
operator|.
name|getClass
argument_list|(
name|obj
argument_list|)
argument_list|)
decl_stmt|;
name|Deserializer
argument_list|<
name|E
argument_list|>
name|deser
init|=
name|serialization
operator|.
name|getDeserializer
argument_list|(
name|GenericsUtil
operator|.
name|getClass
argument_list|(
name|obj
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dof
init|=
name|threadLocalDataOutputBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|dof
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ser
operator|.
name|open
argument_list|(
name|dof
argument_list|)
expr_stmt|;
name|ser
operator|.
name|serialize
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|ser
operator|.
name|close
argument_list|()
expr_stmt|;
name|obj
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GenericsUtil
operator|.
name|getClass
argument_list|(
name|obj
argument_list|)
argument_list|,
name|getChainJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|dof
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dof
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|deser
operator|.
name|open
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|deser
operator|.
name|deserialize
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|deser
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
block|}
end_class

end_unit

