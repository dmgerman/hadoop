begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_comment
comment|/**  * HistoryViewer is used to parse and view the JobHistory files.  They can be  * printed in human-readable format or machine-readable JSON format using the  * {@link HistoryViewerPrinter}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HistoryViewer
specifier|public
class|class
name|HistoryViewer
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|job
specifier|private
name|JobInfo
name|job
decl_stmt|;
DECL|field|jhvp
specifier|private
name|HistoryViewerPrinter
name|jhvp
decl_stmt|;
DECL|field|HUMAN_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|HUMAN_FORMAT
init|=
literal|"human"
decl_stmt|;
DECL|field|JSON_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|JSON_FORMAT
init|=
literal|"json"
decl_stmt|;
comment|/**    * Constructs the HistoryViewer object.    * @param historyFile the fully qualified Path of the History File    * @param conf the Configuration file    * @param printAll toggle to print all status to only killed/failed status    * @throws IOException when there is a problem parsing the history file    */
DECL|method|HistoryViewer (String historyFile, Configuration conf, boolean printAll)
specifier|public
name|HistoryViewer
parameter_list|(
name|String
name|historyFile
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|printAll
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|historyFile
argument_list|,
name|conf
argument_list|,
name|printAll
argument_list|,
name|HUMAN_FORMAT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs the HistoryViewer object.    * @param historyFile the fully qualified Path of the History File    * @param conf the Configuration file    * @param printAll toggle to print all status to only killed/failed status    * @param format the output format to use    * @throws IOException when there is a problem parsing the history file    */
DECL|method|HistoryViewer (String historyFile, Configuration conf, boolean printAll, String format)
specifier|public
name|HistoryViewer
parameter_list|(
name|String
name|historyFile
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|printAll
parameter_list|,
name|String
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|errorMsg
init|=
literal|"Unable to initialize History Viewer"
decl_stmt|;
try|try
block|{
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|historyFile
argument_list|)
decl_stmt|;
name|fs
operator|=
name|jobFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|jobDetails
init|=
name|jobFile
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobDetails
operator|.
name|length
operator|<
literal|2
condition|)
block|{
comment|// NOT a valid name
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ignore unrecognized file: "
operator|+
name|jobFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fs
argument_list|,
name|jobFile
argument_list|)
decl_stmt|;
name|job
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|String
name|scheme
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|HUMAN_FORMAT
operator|.
name|equalsIgnoreCase
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|jhvp
operator|=
operator|new
name|HumanReadableHistoryViewerPrinter
argument_list|(
name|job
argument_list|,
name|printAll
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JSON_FORMAT
operator|.
name|equalsIgnoreCase
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|jhvp
operator|=
operator|new
name|JSONHistoryViewerPrinter
argument_list|(
name|job
argument_list|,
name|printAll
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid format specified: "
operator|+
name|format
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Print the job/task/attempt summary information to stdout.    * @throws IOException when there is a problem printing the history    */
DECL|method|print ()
specifier|public
name|void
name|print
parameter_list|()
throws|throws
name|IOException
block|{
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print the job/task/attempt summary information to the PrintStream.    * @param ps The PrintStream to print to    * @throws IOException when there is a problem printing the history    */
DECL|method|print (PrintStream ps)
specifier|public
name|void
name|print
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
name|jhvp
operator|.
name|print
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the TaskLogsUrl of a particular TaskAttempt.    *     * @param attempt info about the task attempt    * @return the taskLogsUrl. null if http-port or tracker-name or    *         task-attempt-id are unavailable.    */
DECL|method|getTaskLogsUrl (String scheme, JobHistoryParser.TaskAttemptInfo attempt)
specifier|public
specifier|static
name|String
name|getTaskLogsUrl
parameter_list|(
name|String
name|scheme
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
parameter_list|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getHttpPort
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|attempt
operator|.
name|getTrackerName
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|taskTrackerName
init|=
name|HostUtil
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|attempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|HostUtil
operator|.
name|getTaskLogUrl
argument_list|(
name|scheme
argument_list|,
name|taskTrackerName
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attempt
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Utility class used the summarize the job.     * Used by HistoryViewer and the JobHistory UI.    *    */
DECL|class|SummarizedJob
specifier|public
specifier|static
class|class
name|SummarizedJob
block|{
DECL|field|tasks
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
decl_stmt|;
DECL|field|totalMaps
name|int
name|totalMaps
init|=
literal|0
decl_stmt|;
DECL|field|totalReduces
name|int
name|totalReduces
init|=
literal|0
decl_stmt|;
DECL|field|totalCleanups
name|int
name|totalCleanups
init|=
literal|0
decl_stmt|;
DECL|field|totalSetups
name|int
name|totalSetups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedMaps
name|int
name|numFailedMaps
init|=
literal|0
decl_stmt|;
DECL|field|numKilledMaps
name|int
name|numKilledMaps
init|=
literal|0
decl_stmt|;
DECL|field|numFailedReduces
name|int
name|numFailedReduces
init|=
literal|0
decl_stmt|;
DECL|field|numKilledReduces
name|int
name|numKilledReduces
init|=
literal|0
decl_stmt|;
DECL|field|numFinishedCleanups
name|int
name|numFinishedCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedCleanups
name|int
name|numFailedCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numKilledCleanups
name|int
name|numKilledCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numFinishedSetups
name|int
name|numFinishedSetups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedSetups
name|int
name|numFailedSetups
init|=
literal|0
decl_stmt|;
DECL|field|numKilledSetups
name|int
name|numKilledSetups
init|=
literal|0
decl_stmt|;
DECL|field|mapStarted
name|long
name|mapStarted
init|=
literal|0
decl_stmt|;
DECL|field|mapFinished
name|long
name|mapFinished
init|=
literal|0
decl_stmt|;
DECL|field|reduceStarted
name|long
name|reduceStarted
init|=
literal|0
decl_stmt|;
DECL|field|reduceFinished
name|long
name|reduceFinished
init|=
literal|0
decl_stmt|;
DECL|field|cleanupStarted
name|long
name|cleanupStarted
init|=
literal|0
decl_stmt|;
DECL|field|cleanupFinished
name|long
name|cleanupFinished
init|=
literal|0
decl_stmt|;
DECL|field|setupStarted
name|long
name|setupStarted
init|=
literal|0
decl_stmt|;
DECL|field|setupFinished
name|long
name|setupFinished
init|=
literal|0
decl_stmt|;
comment|/** Get total maps */
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|totalMaps
return|;
block|}
comment|/** Get total reduces */
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|totalReduces
return|;
block|}
comment|/** Get number of clean up tasks */
DECL|method|getTotalCleanups ()
specifier|public
name|int
name|getTotalCleanups
parameter_list|()
block|{
return|return
name|totalCleanups
return|;
block|}
comment|/** Get number of set up tasks */
DECL|method|getTotalSetups ()
specifier|public
name|int
name|getTotalSetups
parameter_list|()
block|{
return|return
name|totalSetups
return|;
block|}
comment|/** Get number of failed maps */
DECL|method|getNumFailedMaps ()
specifier|public
name|int
name|getNumFailedMaps
parameter_list|()
block|{
return|return
name|numFailedMaps
return|;
block|}
comment|/** Get number of killed maps */
DECL|method|getNumKilledMaps ()
specifier|public
name|int
name|getNumKilledMaps
parameter_list|()
block|{
return|return
name|numKilledMaps
return|;
block|}
comment|/** Get number of failed reduces */
DECL|method|getNumFailedReduces ()
specifier|public
name|int
name|getNumFailedReduces
parameter_list|()
block|{
return|return
name|numFailedReduces
return|;
block|}
comment|/** Get number of killed reduces */
DECL|method|getNumKilledReduces ()
specifier|public
name|int
name|getNumKilledReduces
parameter_list|()
block|{
return|return
name|numKilledReduces
return|;
block|}
comment|/** Get number of cleanup tasks that finished */
DECL|method|getNumFinishedCleanups ()
specifier|public
name|int
name|getNumFinishedCleanups
parameter_list|()
block|{
return|return
name|numFinishedCleanups
return|;
block|}
comment|/** Get number of failed cleanup tasks */
DECL|method|getNumFailedCleanups ()
specifier|public
name|int
name|getNumFailedCleanups
parameter_list|()
block|{
return|return
name|numFailedCleanups
return|;
block|}
comment|/** Get number of killed cleanup tasks */
DECL|method|getNumKilledCleanups ()
specifier|public
name|int
name|getNumKilledCleanups
parameter_list|()
block|{
return|return
name|numKilledCleanups
return|;
block|}
comment|/** Get number of finished set up tasks */
DECL|method|getNumFinishedSetups ()
specifier|public
name|int
name|getNumFinishedSetups
parameter_list|()
block|{
return|return
name|numFinishedSetups
return|;
block|}
comment|/** Get number of failed set up tasks */
DECL|method|getNumFailedSetups ()
specifier|public
name|int
name|getNumFailedSetups
parameter_list|()
block|{
return|return
name|numFailedSetups
return|;
block|}
comment|/** Get number of killed set up tasks */
DECL|method|getNumKilledSetups ()
specifier|public
name|int
name|getNumKilledSetups
parameter_list|()
block|{
return|return
name|numKilledSetups
return|;
block|}
comment|/** Get number of maps that were started */
DECL|method|getMapStarted ()
specifier|public
name|long
name|getMapStarted
parameter_list|()
block|{
return|return
name|mapStarted
return|;
block|}
comment|/** Get number of maps that finished */
DECL|method|getMapFinished ()
specifier|public
name|long
name|getMapFinished
parameter_list|()
block|{
return|return
name|mapFinished
return|;
block|}
comment|/** Get number of Reducers that were started */
DECL|method|getReduceStarted ()
specifier|public
name|long
name|getReduceStarted
parameter_list|()
block|{
return|return
name|reduceStarted
return|;
block|}
comment|/** Get number of reducers that finished */
DECL|method|getReduceFinished ()
specifier|public
name|long
name|getReduceFinished
parameter_list|()
block|{
return|return
name|reduceFinished
return|;
block|}
comment|/** Get number of cleanup tasks started */
DECL|method|getCleanupStarted ()
specifier|public
name|long
name|getCleanupStarted
parameter_list|()
block|{
return|return
name|cleanupStarted
return|;
block|}
comment|/** Get number of cleanup tasks that finished */
DECL|method|getCleanupFinished ()
specifier|public
name|long
name|getCleanupFinished
parameter_list|()
block|{
return|return
name|cleanupFinished
return|;
block|}
comment|/** Get number of setup tasks that started */
DECL|method|getSetupStarted ()
specifier|public
name|long
name|getSetupStarted
parameter_list|()
block|{
return|return
name|setupStarted
return|;
block|}
comment|/** Get number of setup tasks that finished */
DECL|method|getSetupFinished ()
specifier|public
name|long
name|getSetupFinished
parameter_list|()
block|{
return|return
name|setupFinished
return|;
block|}
comment|/** Create summary information for the parsed job */
DECL|method|SummarizedJob (JobInfo job)
specifier|public
name|SummarizedJob
parameter_list|(
name|JobInfo
name|job
parameter_list|)
block|{
name|tasks
operator|=
name|job
operator|.
name|getAllTasks
argument_list|()
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
comment|//allHosts.put(task.getHo(Keys.HOSTNAME), "");
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|startTime
init|=
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|finishTime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapStarted
operator|==
literal|0
operator|||
name|mapStarted
operator|>
name|startTime
condition|)
block|{
name|mapStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|mapFinished
operator|<
name|finishTime
condition|)
block|{
name|mapFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalMaps
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedMaps
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledMaps
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
if|if
condition|(
name|reduceStarted
operator|==
literal|0
operator|||
name|reduceStarted
operator|>
name|startTime
condition|)
block|{
name|reduceStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|reduceFinished
operator|<
name|finishTime
condition|)
block|{
name|reduceFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalReduces
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedReduces
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledReduces
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
condition|)
block|{
if|if
condition|(
name|cleanupStarted
operator|==
literal|0
operator|||
name|cleanupStarted
operator|>
name|startTime
condition|)
block|{
name|cleanupStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|cleanupFinished
operator|<
name|finishTime
condition|)
block|{
name|cleanupFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalCleanups
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFinishedCleanups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedCleanups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledCleanups
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
condition|)
block|{
if|if
condition|(
name|setupStarted
operator|==
literal|0
operator|||
name|setupStarted
operator|>
name|startTime
condition|)
block|{
name|setupStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|setupFinished
operator|<
name|finishTime
condition|)
block|{
name|setupFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalSetups
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFinishedSetups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedSetups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledSetups
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Utility class used while analyzing the job.     * Used by HistoryViewer and the JobHistory UI.    */
DECL|class|AnalyzedJob
specifier|public
specifier|static
class|class
name|AnalyzedJob
block|{
DECL|field|avgMapTime
specifier|private
name|long
name|avgMapTime
decl_stmt|;
DECL|field|avgReduceTime
specifier|private
name|long
name|avgReduceTime
decl_stmt|;
DECL|field|avgShuffleTime
specifier|private
name|long
name|avgShuffleTime
decl_stmt|;
DECL|field|mapTasks
specifier|private
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|mapTasks
decl_stmt|;
DECL|field|reduceTasks
specifier|private
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|reduceTasks
decl_stmt|;
comment|/** Get the average map time */
DECL|method|getAvgMapTime ()
specifier|public
name|long
name|getAvgMapTime
parameter_list|()
block|{
return|return
name|avgMapTime
return|;
block|}
comment|/** Get the average reduce time */
DECL|method|getAvgReduceTime ()
specifier|public
name|long
name|getAvgReduceTime
parameter_list|()
block|{
return|return
name|avgReduceTime
return|;
block|}
comment|/** Get the average shuffle time */
DECL|method|getAvgShuffleTime ()
specifier|public
name|long
name|getAvgShuffleTime
parameter_list|()
block|{
return|return
name|avgShuffleTime
return|;
block|}
comment|/** Get the map tasks list */
DECL|method|getMapTasks ()
specifier|public
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|getMapTasks
parameter_list|()
block|{
return|return
name|mapTasks
return|;
block|}
comment|/** Get the reduce tasks list */
DECL|method|getReduceTasks ()
specifier|public
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|getReduceTasks
parameter_list|()
block|{
return|return
name|reduceTasks
return|;
block|}
comment|/** Generate analysis information for the parsed job */
DECL|method|AnalyzedJob (JobInfo job)
specifier|public
name|AnalyzedJob
parameter_list|(
name|JobInfo
name|job
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|int
name|succeededMaps
init|=
operator|(
name|int
operator|)
name|job
operator|.
name|getSucceededMaps
argument_list|()
decl_stmt|;
name|int
name|succeededReduces
init|=
operator|(
name|int
operator|)
name|job
operator|.
name|getSucceededReduces
argument_list|()
decl_stmt|;
name|mapTasks
operator|=
operator|new
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[
name|succeededMaps
index|]
expr_stmt|;
name|reduceTasks
operator|=
operator|new
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[
name|succeededReduces
index|]
expr_stmt|;
name|int
name|mapIndex
init|=
literal|0
decl_stmt|,
name|reduceIndex
init|=
literal|0
decl_stmt|;
name|avgMapTime
operator|=
literal|0
expr_stmt|;
name|avgReduceTime
operator|=
literal|0
expr_stmt|;
name|avgShuffleTime
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|avgFinishTime
init|=
operator|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|mapTasks
index|[
name|mapIndex
operator|++
index|]
operator|=
name|attempt
expr_stmt|;
name|avgMapTime
operator|+=
name|avgFinishTime
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
name|reduceTasks
index|[
name|reduceIndex
operator|++
index|]
operator|=
name|attempt
expr_stmt|;
name|avgShuffleTime
operator|+=
operator|(
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|)
expr_stmt|;
name|avgReduceTime
operator|+=
operator|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
operator|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|succeededMaps
operator|>
literal|0
condition|)
block|{
name|avgMapTime
operator|/=
name|succeededMaps
expr_stmt|;
block|}
if|if
condition|(
name|succeededReduces
operator|>
literal|0
condition|)
block|{
name|avgReduceTime
operator|/=
name|succeededReduces
expr_stmt|;
name|avgShuffleTime
operator|/=
name|succeededReduces
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Utility to filter out events based on the task status    */
DECL|class|FilteredJob
specifier|public
specifier|static
class|class
name|FilteredJob
block|{
DECL|field|badNodesToFilteredTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|badNodesToFilteredTasks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
comment|/** Get the map of the filtered tasks */
DECL|method|getFilteredMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|getFilteredMap
parameter_list|()
block|{
return|return
name|badNodesToFilteredTasks
return|;
block|}
comment|/** Get the current filter */
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/** Apply the filter (status) on the parsed job and generate summary */
DECL|method|FilteredJob (JobInfo job, String status)
specifier|public
name|FilteredJob
parameter_list|(
name|JobInfo
name|job
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|filter
operator|=
name|status
expr_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|String
name|hostname
init|=
name|attempt
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|TaskID
name|id
init|=
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskID
argument_list|>
name|set
init|=
name|badNodesToFilteredTasks
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<
name|TaskID
argument_list|>
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|badNodesToFilteredTasks
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

