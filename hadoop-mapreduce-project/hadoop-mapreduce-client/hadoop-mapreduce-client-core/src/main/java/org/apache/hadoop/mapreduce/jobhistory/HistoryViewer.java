begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * HistoryViewer is used to parse and view the JobHistory files   *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HistoryViewer
specifier|public
class|class
name|HistoryViewer
block|{
DECL|field|dateFormat
specifier|private
specifier|static
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"d-MMM-yyyy HH:mm:ss"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|job
specifier|private
name|JobInfo
name|job
decl_stmt|;
DECL|field|jobId
specifier|private
name|String
name|jobId
decl_stmt|;
DECL|field|printAll
specifier|private
name|boolean
name|printAll
decl_stmt|;
comment|/**  * Constructs the HistoryViewer object  * @param historyFile The fully qualified Path of the History File  * @param conf The Configuration file  * @param printAll Toggle to print all status to only killed/failed status  * @throws IOException  */
DECL|method|HistoryViewer (String historyFile, Configuration conf, boolean printAll)
specifier|public
name|HistoryViewer
parameter_list|(
name|String
name|historyFile
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|printAll
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|printAll
operator|=
name|printAll
expr_stmt|;
name|String
name|errorMsg
init|=
literal|"Unable to initialize History Viewer"
decl_stmt|;
try|try
block|{
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|historyFile
argument_list|)
decl_stmt|;
name|fs
operator|=
name|jobFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|jobDetails
init|=
name|jobFile
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobDetails
operator|.
name|length
operator|<
literal|2
condition|)
block|{
comment|// NOT a valid name
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ignore unrecognized file: "
operator|+
name|jobFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fs
argument_list|,
name|jobFile
argument_list|)
decl_stmt|;
name|job
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|jobId
operator|=
name|job
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Print the job/task/attempt summary information    * @throws IOException    */
DECL|method|print ()
specifier|public
name|void
name|print
parameter_list|()
throws|throws
name|IOException
block|{
name|printJobDetails
argument_list|()
expr_stmt|;
name|printTaskSummary
argument_list|()
expr_stmt|;
name|printJobAnalysis
argument_list|()
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|printAll
condition|)
block|{
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printTasks
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|printAllTaskAttempts
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
expr_stmt|;
block|}
name|FilteredJob
name|filter
init|=
operator|new
name|FilteredJob
argument_list|(
name|job
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|printFailedAttempts
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|FilteredJob
argument_list|(
name|job
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printFailedAttempts
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobDetails ()
specifier|private
name|void
name|printJobDetails
parameter_list|()
block|{
name|StringBuffer
name|jobDetails
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nHadoop job: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n====================================="
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nUser: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nJobName: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nJobConf: "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nSubmitted At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nLaunched At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|,
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nFinished At: "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|job
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\nStatus: "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|job
operator|.
name|getJobStatus
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"Incomplete"
else|:
name|job
operator|.
name|getJobStatus
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|printCounters
argument_list|(
name|jobDetails
argument_list|,
name|job
operator|.
name|getTotalCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getMapCounters
argument_list|()
argument_list|,
name|job
operator|.
name|getReduceCounters
argument_list|()
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|jobDetails
operator|.
name|append
argument_list|(
literal|"\n====================================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|jobDetails
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printCounters (StringBuffer buff, Counters totalCounters, Counters mapCounters, Counters reduceCounters)
specifier|private
name|void
name|printCounters
parameter_list|(
name|StringBuffer
name|buff
parameter_list|,
name|Counters
name|totalCounters
parameter_list|,
name|Counters
name|mapCounters
parameter_list|,
name|Counters
name|reduceCounters
parameter_list|)
block|{
comment|// Killed jobs might not have counters
if|if
condition|(
name|totalCounters
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"\nCounters: \n\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s|"
argument_list|,
literal|"Group Name"
argument_list|,
literal|"Counter name"
argument_list|,
literal|"Map Value"
argument_list|,
literal|"Reduce Value"
argument_list|,
literal|"Total Value"
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"\n------------------------------------------"
operator|+
literal|"---------------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|totalCounters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|CounterGroup
name|totalGroup
init|=
name|totalCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|mapGroup
init|=
name|mapCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|CounterGroup
name|reduceGroup
init|=
name|reduceCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Format
name|decimal
init|=
operator|new
name|DecimalFormat
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
argument_list|>
name|ctrItr
init|=
name|totalGroup
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ctrItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|counter
init|=
name|ctrItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|counter
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|mapValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|mapGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|reduceValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|reduceGroup
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|totalValue
init|=
name|decimal
operator|.
name|format
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%n|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s"
argument_list|,
name|totalGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|mapValue
argument_list|,
name|reduceValue
argument_list|,
name|totalValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printAllTaskAttempts (TaskType taskType)
specifier|private
name|void
name|printAllTaskAttempts
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|StringBuffer
name|taskList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|" task list for "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tStartTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
literal|"\tShuffleFinished\tSortFinished"
argument_list|)
expr_stmt|;
block|}
name|taskList
operator|.
name|append
argument_list|(
literal|"\tFinishTime\tHostName\tError\tTaskLogs"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\n===================================================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|taskList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskType
argument_list|()
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|taskList
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|taskLogsUrl
init|=
name|getTaskLogsUrl
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|taskLogsUrl
operator|!=
literal|null
condition|?
name|taskLogsUrl
else|:
literal|"n/a"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|taskList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|printTaskSummary ()
specifier|private
name|void
name|printTaskSummary
parameter_list|()
block|{
name|SummarizedJob
name|ts
init|=
operator|new
name|SummarizedJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|StringBuffer
name|taskSummary
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nTask Summary"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n============================"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nKind\tTotal\t"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"Successful\tFailed\tKilled\tStartTime\tFinishTime"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nSetup\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFinishedSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledSetups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|setupStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|setupFinished
argument_list|,
name|ts
operator|.
name|setupStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nMap\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledMaps
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|mapStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|mapFinished
argument_list|,
name|ts
operator|.
name|mapStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nReduce\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledReduces
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|reduceStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|reduceFinished
argument_list|,
name|ts
operator|.
name|reduceStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\nCleanup\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|totalCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFinishedCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numFailedCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
operator|.
name|numKilledCleanups
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|cleanupStarted
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|ts
operator|.
name|cleanupFinished
argument_list|,
name|ts
operator|.
name|cleanupStarted
argument_list|)
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|append
argument_list|(
literal|"\n============================\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|taskSummary
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printJobAnalysis ()
specifier|private
name|void
name|printJobAnalysis
parameter_list|()
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No Analysis available as job did not finish"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AnalyzedJob
name|avg
init|=
operator|new
name|AnalyzedJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nAnalysis"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========="
argument_list|)
expr_stmt|;
name|printAnalysis
argument_list|(
name|avg
operator|.
name|getMapTasks
argument_list|()
argument_list|,
name|cMap
argument_list|,
literal|"map"
argument_list|,
name|avg
operator|.
name|getAvgMapTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|avg
operator|.
name|getMapTasks
argument_list|()
argument_list|,
literal|"map"
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
if|if
condition|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|printAnalysis
argument_list|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|cShuffle
argument_list|,
literal|"shuffle"
argument_list|,
name|avg
operator|.
name|getAvgShuffleTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
literal|"shuffle"
argument_list|,
name|cFinishShuffle
argument_list|)
expr_stmt|;
name|printAnalysis
argument_list|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|cReduce
argument_list|,
literal|"reduce"
argument_list|,
name|avg
operator|.
name|getAvgReduceTime
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|printLast
argument_list|(
name|avg
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
literal|"reduce"
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========="
argument_list|)
expr_stmt|;
block|}
DECL|method|printAnalysis (JobHistoryParser.TaskAttemptInfo [] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks)
specifier|private
name|void
name|printAnalysis
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|tasks
parameter_list|,
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cmp
parameter_list|,
name|String
name|taskType
parameter_list|,
name|long
name|avg
parameter_list|,
name|int
name|showTasks
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|tasks
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|min
init|=
name|tasks
index|[
name|tasks
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|StringBuffer
name|details
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nTime taken by best performing "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" task "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|min
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"map"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|min
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|min
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|append
argument_list|(
literal|"\nAverage time taken by "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" tasks: "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|avg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nWorse performing "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" tasks: "
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tTimetaken"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|details
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|showTasks
operator|&&
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|details
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|details
operator|.
name|append
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"map"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|details
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|tasks
index|[
name|i
index|]
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|details
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printLast (JobHistoryParser.TaskAttemptInfo [] tasks, String taskType, Comparator<JobHistoryParser.TaskAttemptInfo> cmp )
specifier|private
name|void
name|printLast
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|tasks
parameter_list|,
name|String
name|taskType
parameter_list|,
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cmp
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|tasks
argument_list|,
name|cFinishMapRed
argument_list|)
expr_stmt|;
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|last
init|=
name|tasks
index|[
literal|0
index|]
decl_stmt|;
name|StringBuffer
name|lastBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
literal|"The last "
argument_list|)
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
expr_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
literal|" task "
argument_list|)
operator|.
name|append
argument_list|(
name|last
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|finishTime
decl_stmt|;
if|if
condition|(
literal|"shuffle"
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|finishTime
operator|=
name|last
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|finishTime
operator|=
name|last
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
block|}
name|lastBuf
operator|.
name|append
argument_list|(
literal|" finished at (relative to the Job launch time): "
argument_list|)
expr_stmt|;
name|lastBuf
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|finishTime
argument_list|,
name|job
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|lastBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printTasks (TaskType taskType, String status)
specifier|private
name|void
name|printTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|StringBuffer
name|header
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|header
operator|.
name|append
argument_list|(
name|taskType
argument_list|)
operator|.
name|append
argument_list|(
literal|" task list for "
argument_list|)
operator|.
name|append
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"\nTaskId\t\tStartTime\tFinishTime\tError"
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|header
operator|.
name|append
argument_list|(
literal|"\tInputSplits"
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|append
argument_list|(
literal|"\n===================================================="
argument_list|)
expr_stmt|;
name|StringBuffer
name|taskList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|&&
operator|(
name|status
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|||
name|status
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ALL"
argument_list|)
operator|)
condition|)
block|{
name|taskList
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|getFormattedTimeWithDiff
argument_list|(
name|dateFormat
argument_list|,
name|task
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|taskType
argument_list|)
condition|)
block|{
name|taskList
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|task
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskList
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|taskList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|printFailedAttempts (FilteredJob filteredJob)
specifier|private
name|void
name|printFailedAttempts
parameter_list|(
name|FilteredJob
name|filteredJob
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|badNodes
init|=
name|filteredJob
operator|.
name|getFilteredMap
argument_list|()
decl_stmt|;
name|StringBuffer
name|attempts
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|badNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attempts
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|filteredJob
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|" task attempts by nodes"
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|"\nHostname\tFailedTasks"
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
literal|"\n==============================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|attempts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|entry
range|:
name|badNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|node
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskID
argument_list|>
name|failedTasks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|attempts
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskID
name|t
range|:
name|failedTasks
control|)
block|{
name|attempts
operator|.
name|append
argument_list|(
name|t
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|attempts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the TaskLogsUrl of a particular TaskAttempt    *     * @param attempt    * @return the taskLogsUrl. null if http-port or tracker-name or    *         task-attempt-id are unavailable.    */
DECL|method|getTaskLogsUrl ( JobHistoryParser.TaskAttemptInfo attempt)
specifier|public
specifier|static
name|String
name|getTaskLogsUrl
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
parameter_list|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getHttpPort
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|attempt
operator|.
name|getTrackerName
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|taskTrackerName
init|=
name|HostUtil
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|attempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|HostUtil
operator|.
name|getTaskLogUrl
argument_list|(
name|taskTrackerName
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attempt
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|field|cMap
specifier|private
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cMap
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|l2
operator|<
name|l1
condition|?
operator|-
literal|1
else|:
operator|(
name|l2
operator|==
name|l1
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cShuffle
specifier|private
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cShuffle
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|l2
operator|<
name|l1
condition|?
operator|-
literal|1
else|:
operator|(
name|l2
operator|==
name|l1
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cFinishShuffle
specifier|private
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cFinishShuffle
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|l2
operator|<
name|l1
condition|?
operator|-
literal|1
else|:
operator|(
name|l2
operator|==
name|l1
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cFinishMapRed
specifier|private
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cFinishMapRed
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|l2
operator|<
name|l1
condition|?
operator|-
literal|1
else|:
operator|(
name|l2
operator|==
name|l1
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|cReduce
specifier|private
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|cReduce
init|=
operator|new
name|Comparator
argument_list|<
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t1
parameter_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|t2
parameter_list|)
block|{
name|long
name|l1
init|=
name|t1
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t1
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|t2
operator|.
name|getFinishTime
argument_list|()
operator|-
name|t2
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|l2
operator|<
name|l1
condition|?
operator|-
literal|1
else|:
operator|(
name|l2
operator|==
name|l1
condition|?
literal|0
else|:
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Utility class used the summarize the job.     * Used by HistoryViewer and the JobHistory UI.    *    */
DECL|class|SummarizedJob
specifier|public
specifier|static
class|class
name|SummarizedJob
block|{
DECL|field|tasks
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
decl_stmt|;
DECL|field|totalMaps
name|int
name|totalMaps
init|=
literal|0
decl_stmt|;
DECL|field|totalReduces
name|int
name|totalReduces
init|=
literal|0
decl_stmt|;
DECL|field|totalCleanups
name|int
name|totalCleanups
init|=
literal|0
decl_stmt|;
DECL|field|totalSetups
name|int
name|totalSetups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedMaps
name|int
name|numFailedMaps
init|=
literal|0
decl_stmt|;
DECL|field|numKilledMaps
name|int
name|numKilledMaps
init|=
literal|0
decl_stmt|;
DECL|field|numFailedReduces
name|int
name|numFailedReduces
init|=
literal|0
decl_stmt|;
DECL|field|numKilledReduces
name|int
name|numKilledReduces
init|=
literal|0
decl_stmt|;
DECL|field|numFinishedCleanups
name|int
name|numFinishedCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedCleanups
name|int
name|numFailedCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numKilledCleanups
name|int
name|numKilledCleanups
init|=
literal|0
decl_stmt|;
DECL|field|numFinishedSetups
name|int
name|numFinishedSetups
init|=
literal|0
decl_stmt|;
DECL|field|numFailedSetups
name|int
name|numFailedSetups
init|=
literal|0
decl_stmt|;
DECL|field|numKilledSetups
name|int
name|numKilledSetups
init|=
literal|0
decl_stmt|;
DECL|field|mapStarted
name|long
name|mapStarted
init|=
literal|0
decl_stmt|;
DECL|field|mapFinished
name|long
name|mapFinished
init|=
literal|0
decl_stmt|;
DECL|field|reduceStarted
name|long
name|reduceStarted
init|=
literal|0
decl_stmt|;
DECL|field|reduceFinished
name|long
name|reduceFinished
init|=
literal|0
decl_stmt|;
DECL|field|cleanupStarted
name|long
name|cleanupStarted
init|=
literal|0
decl_stmt|;
DECL|field|cleanupFinished
name|long
name|cleanupFinished
init|=
literal|0
decl_stmt|;
DECL|field|setupStarted
name|long
name|setupStarted
init|=
literal|0
decl_stmt|;
DECL|field|setupFinished
name|long
name|setupFinished
init|=
literal|0
decl_stmt|;
comment|/** Get total maps */
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|totalMaps
return|;
block|}
comment|/** Get total reduces */
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|totalReduces
return|;
block|}
comment|/** Get number of clean up tasks */
DECL|method|getTotalCleanups ()
specifier|public
name|int
name|getTotalCleanups
parameter_list|()
block|{
return|return
name|totalCleanups
return|;
block|}
comment|/** Get number of set up tasks */
DECL|method|getTotalSetups ()
specifier|public
name|int
name|getTotalSetups
parameter_list|()
block|{
return|return
name|totalSetups
return|;
block|}
comment|/** Get number of failed maps */
DECL|method|getNumFailedMaps ()
specifier|public
name|int
name|getNumFailedMaps
parameter_list|()
block|{
return|return
name|numFailedMaps
return|;
block|}
comment|/** Get number of killed maps */
DECL|method|getNumKilledMaps ()
specifier|public
name|int
name|getNumKilledMaps
parameter_list|()
block|{
return|return
name|numKilledMaps
return|;
block|}
comment|/** Get number of failed reduces */
DECL|method|getNumFailedReduces ()
specifier|public
name|int
name|getNumFailedReduces
parameter_list|()
block|{
return|return
name|numFailedReduces
return|;
block|}
comment|/** Get number of killed reduces */
DECL|method|getNumKilledReduces ()
specifier|public
name|int
name|getNumKilledReduces
parameter_list|()
block|{
return|return
name|numKilledReduces
return|;
block|}
comment|/** Get number of cleanup tasks that finished */
DECL|method|getNumFinishedCleanups ()
specifier|public
name|int
name|getNumFinishedCleanups
parameter_list|()
block|{
return|return
name|numFinishedCleanups
return|;
block|}
comment|/** Get number of failed cleanup tasks */
DECL|method|getNumFailedCleanups ()
specifier|public
name|int
name|getNumFailedCleanups
parameter_list|()
block|{
return|return
name|numFailedCleanups
return|;
block|}
comment|/** Get number of killed cleanup tasks */
DECL|method|getNumKilledCleanups ()
specifier|public
name|int
name|getNumKilledCleanups
parameter_list|()
block|{
return|return
name|numKilledCleanups
return|;
block|}
comment|/** Get number of finished set up tasks */
DECL|method|getNumFinishedSetups ()
specifier|public
name|int
name|getNumFinishedSetups
parameter_list|()
block|{
return|return
name|numFinishedSetups
return|;
block|}
comment|/** Get number of failed set up tasks */
DECL|method|getNumFailedSetups ()
specifier|public
name|int
name|getNumFailedSetups
parameter_list|()
block|{
return|return
name|numFailedSetups
return|;
block|}
comment|/** Get number of killed set up tasks */
DECL|method|getNumKilledSetups ()
specifier|public
name|int
name|getNumKilledSetups
parameter_list|()
block|{
return|return
name|numKilledSetups
return|;
block|}
comment|/** Get number of maps that were started */
DECL|method|getMapStarted ()
specifier|public
name|long
name|getMapStarted
parameter_list|()
block|{
return|return
name|mapStarted
return|;
block|}
comment|/** Get number of maps that finished */
DECL|method|getMapFinished ()
specifier|public
name|long
name|getMapFinished
parameter_list|()
block|{
return|return
name|mapFinished
return|;
block|}
comment|/** Get number of Reducers that were started */
DECL|method|getReduceStarted ()
specifier|public
name|long
name|getReduceStarted
parameter_list|()
block|{
return|return
name|reduceStarted
return|;
block|}
comment|/** Get number of reducers that finished */
DECL|method|getReduceFinished ()
specifier|public
name|long
name|getReduceFinished
parameter_list|()
block|{
return|return
name|reduceFinished
return|;
block|}
comment|/** Get number of cleanup tasks started */
DECL|method|getCleanupStarted ()
specifier|public
name|long
name|getCleanupStarted
parameter_list|()
block|{
return|return
name|cleanupStarted
return|;
block|}
comment|/** Get number of cleanup tasks that finished */
DECL|method|getCleanupFinished ()
specifier|public
name|long
name|getCleanupFinished
parameter_list|()
block|{
return|return
name|cleanupFinished
return|;
block|}
comment|/** Get number of setup tasks that started */
DECL|method|getSetupStarted ()
specifier|public
name|long
name|getSetupStarted
parameter_list|()
block|{
return|return
name|setupStarted
return|;
block|}
comment|/** Get number of setup tasks that finished */
DECL|method|getSetupFinished ()
specifier|public
name|long
name|getSetupFinished
parameter_list|()
block|{
return|return
name|setupFinished
return|;
block|}
comment|/** Create summary information for the parsed job */
DECL|method|SummarizedJob (JobInfo job)
specifier|public
name|SummarizedJob
parameter_list|(
name|JobInfo
name|job
parameter_list|)
block|{
name|tasks
operator|=
name|job
operator|.
name|getAllTasks
argument_list|()
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
comment|//allHosts.put(task.getHo(Keys.HOSTNAME), "");
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|startTime
init|=
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|finishTime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapStarted
operator|==
literal|0
operator|||
name|mapStarted
operator|>
name|startTime
condition|)
block|{
name|mapStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|mapFinished
operator|<
name|finishTime
condition|)
block|{
name|mapFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalMaps
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedMaps
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledMaps
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
if|if
condition|(
name|reduceStarted
operator|==
literal|0
operator|||
name|reduceStarted
operator|>
name|startTime
condition|)
block|{
name|reduceStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|reduceFinished
operator|<
name|finishTime
condition|)
block|{
name|reduceFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalReduces
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedReduces
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledReduces
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
condition|)
block|{
if|if
condition|(
name|cleanupStarted
operator|==
literal|0
operator|||
name|cleanupStarted
operator|>
name|startTime
condition|)
block|{
name|cleanupStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|cleanupFinished
operator|<
name|finishTime
condition|)
block|{
name|cleanupFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalCleanups
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFinishedCleanups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedCleanups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledCleanups
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
condition|)
block|{
if|if
condition|(
name|setupStarted
operator|==
literal|0
operator|||
name|setupStarted
operator|>
name|startTime
condition|)
block|{
name|setupStarted
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|setupFinished
operator|<
name|finishTime
condition|)
block|{
name|setupFinished
operator|=
name|finishTime
expr_stmt|;
block|}
name|totalSetups
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFinishedSetups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numFailedSetups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|numKilledSetups
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Utility class used while analyzing the job.     * Used by HistoryViewer and the JobHistory UI.    */
DECL|class|AnalyzedJob
specifier|public
specifier|static
class|class
name|AnalyzedJob
block|{
DECL|field|avgMapTime
specifier|private
name|long
name|avgMapTime
decl_stmt|;
DECL|field|avgReduceTime
specifier|private
name|long
name|avgReduceTime
decl_stmt|;
DECL|field|avgShuffleTime
specifier|private
name|long
name|avgShuffleTime
decl_stmt|;
DECL|field|mapTasks
specifier|private
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|mapTasks
decl_stmt|;
DECL|field|reduceTasks
specifier|private
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|reduceTasks
decl_stmt|;
comment|/** Get the average map time */
DECL|method|getAvgMapTime ()
specifier|public
name|long
name|getAvgMapTime
parameter_list|()
block|{
return|return
name|avgMapTime
return|;
block|}
comment|/** Get the average reduce time */
DECL|method|getAvgReduceTime ()
specifier|public
name|long
name|getAvgReduceTime
parameter_list|()
block|{
return|return
name|avgReduceTime
return|;
block|}
comment|/** Get the average shuffle time */
DECL|method|getAvgShuffleTime ()
specifier|public
name|long
name|getAvgShuffleTime
parameter_list|()
block|{
return|return
name|avgShuffleTime
return|;
block|}
comment|/** Get the map tasks list */
DECL|method|getMapTasks ()
specifier|public
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|getMapTasks
parameter_list|()
block|{
return|return
name|mapTasks
return|;
block|}
comment|/** Get the reduce tasks list */
DECL|method|getReduceTasks ()
specifier|public
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[]
name|getReduceTasks
parameter_list|()
block|{
return|return
name|reduceTasks
return|;
block|}
comment|/** Generate analysis information for the parsed job */
DECL|method|AnalyzedJob (JobInfo job)
specifier|public
name|AnalyzedJob
parameter_list|(
name|JobInfo
name|job
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|int
name|finishedMaps
init|=
operator|(
name|int
operator|)
name|job
operator|.
name|getFinishedMaps
argument_list|()
decl_stmt|;
name|int
name|finishedReduces
init|=
operator|(
name|int
operator|)
name|job
operator|.
name|getFinishedReduces
argument_list|()
decl_stmt|;
name|mapTasks
operator|=
operator|new
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[
name|finishedMaps
index|]
expr_stmt|;
name|reduceTasks
operator|=
operator|new
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
index|[
name|finishedReduces
index|]
expr_stmt|;
name|int
name|mapIndex
init|=
literal|0
decl_stmt|,
name|reduceIndex
init|=
literal|0
decl_stmt|;
name|avgMapTime
operator|=
literal|0
expr_stmt|;
name|avgReduceTime
operator|=
literal|0
expr_stmt|;
name|avgShuffleTime
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|avgFinishTime
init|=
operator|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|mapTasks
index|[
name|mapIndex
operator|++
index|]
operator|=
name|attempt
expr_stmt|;
name|avgMapTime
operator|+=
name|avgFinishTime
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
name|reduceTasks
index|[
name|reduceIndex
operator|++
index|]
operator|=
name|attempt
expr_stmt|;
name|avgShuffleTime
operator|+=
operator|(
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|)
expr_stmt|;
name|avgReduceTime
operator|+=
operator|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
operator|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|finishedMaps
operator|>
literal|0
condition|)
block|{
name|avgMapTime
operator|/=
name|finishedMaps
expr_stmt|;
block|}
if|if
condition|(
name|finishedReduces
operator|>
literal|0
condition|)
block|{
name|avgReduceTime
operator|/=
name|finishedReduces
expr_stmt|;
name|avgShuffleTime
operator|/=
name|finishedReduces
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Utility to filter out events based on the task status    *    */
DECL|class|FilteredJob
specifier|public
specifier|static
class|class
name|FilteredJob
block|{
DECL|field|badNodesToFilteredTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|badNodesToFilteredTasks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
comment|/** Get the map of the filtered tasks */
DECL|method|getFilteredMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TaskID
argument_list|>
argument_list|>
name|getFilteredMap
parameter_list|()
block|{
return|return
name|badNodesToFilteredTasks
return|;
block|}
comment|/** Get the current filter */
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/** Apply the filter (status) on the parsed job and generate summary */
DECL|method|FilteredJob (JobInfo job, String status)
specifier|public
name|FilteredJob
parameter_list|(
name|JobInfo
name|job
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|filter
operator|=
name|status
expr_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
argument_list|>
name|attempts
init|=
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|String
name|hostname
init|=
name|attempt
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|TaskID
name|id
init|=
name|attempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskID
argument_list|>
name|set
init|=
name|badNodesToFilteredTasks
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<
name|TaskID
argument_list|>
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|badNodesToFilteredTasks
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

