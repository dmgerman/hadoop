begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A RecordReader that reads records from a SQL table.  * Emits LongWritables containing the record number as   * key and DBWritables as value.    */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DBRecordReader
specifier|public
class|class
name|DBRecordReader
parameter_list|<
name|T
extends|extends
name|DBWritable
parameter_list|>
extends|extends
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DBRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|results
specifier|private
name|ResultSet
name|results
init|=
literal|null
decl_stmt|;
DECL|field|inputClass
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|inputClass
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|split
specifier|private
name|DBInputFormat
operator|.
name|DBInputSplit
name|split
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|key
specifier|private
name|LongWritable
name|key
init|=
literal|null
decl_stmt|;
DECL|field|value
specifier|private
name|T
name|value
init|=
literal|null
decl_stmt|;
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|field|statement
specifier|protected
name|PreparedStatement
name|statement
decl_stmt|;
DECL|field|dbConf
specifier|private
name|DBConfiguration
name|dbConf
decl_stmt|;
DECL|field|conditions
specifier|private
name|String
name|conditions
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|String
index|[]
name|fieldNames
decl_stmt|;
DECL|field|tableName
specifier|private
name|String
name|tableName
decl_stmt|;
comment|/**    * @param split The InputSplit to read data for    * @throws SQLException     */
DECL|method|DBRecordReader (DBInputFormat.DBInputSplit split, Class<T> inputClass, Configuration conf, Connection conn, DBConfiguration dbConfig, String cond, String [] fields, String table)
specifier|public
name|DBRecordReader
parameter_list|(
name|DBInputFormat
operator|.
name|DBInputSplit
name|split
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|inputClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|DBConfiguration
name|dbConfig
parameter_list|,
name|String
name|cond
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|inputClass
operator|=
name|inputClass
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|dbConf
operator|=
name|dbConfig
expr_stmt|;
name|this
operator|.
name|conditions
operator|=
name|cond
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|table
expr_stmt|;
block|}
DECL|method|executeQuery (String query)
specifier|protected
name|ResultSet
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|,
name|ResultSet
operator|.
name|TYPE_FORWARD_ONLY
argument_list|,
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
argument_list|)
expr_stmt|;
return|return
name|statement
operator|.
name|executeQuery
argument_list|()
return|;
block|}
comment|/** Returns the query for selecting the records,     * subclasses can override this for custom behaviour.*/
DECL|method|getSelectQuery ()
specifier|protected
name|String
name|getSelectQuery
parameter_list|()
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Default codepath for MySQL, HSQLDB, etc. Relies on LIMIT/OFFSET for splits.
if|if
condition|(
name|dbConf
operator|.
name|getInputQuery
argument_list|()
operator|==
literal|null
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|append
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|fieldNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" AS "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|//in hsqldb this is necessary
if|if
condition|(
name|conditions
operator|!=
literal|null
operator|&&
name|conditions
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" WHERE ("
argument_list|)
operator|.
name|append
argument_list|(
name|conditions
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|String
name|orderBy
init|=
name|dbConf
operator|.
name|getInputOrderBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|orderBy
operator|!=
literal|null
operator|&&
name|orderBy
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" ORDER BY "
argument_list|)
operator|.
name|append
argument_list|(
name|orderBy
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//PREBUILT QUERY
name|query
operator|.
name|append
argument_list|(
name|dbConf
operator|.
name|getInputQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|query
operator|.
name|append
argument_list|(
literal|" LIMIT "
argument_list|)
operator|.
name|append
argument_list|(
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" OFFSET "
argument_list|)
operator|.
name|append
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ignore, will not throw.
block|}
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|results
condition|)
block|{
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|statement
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|connection
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//do nothing
block|}
comment|/** {@inheritDoc} */
DECL|method|getCurrentKey ()
specifier|public
name|LongWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getCurrentValue ()
specifier|public
name|T
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * @deprecated     */
annotation|@
name|Deprecated
DECL|method|createValue ()
specifier|public
name|T
name|createValue
parameter_list|()
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|inputClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * @deprecated     */
annotation|@
name|Deprecated
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
comment|/**    * @deprecated Use {@link #nextKeyValue()}    */
annotation|@
name|Deprecated
DECL|method|next (LongWritable key, T value)
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|nextKeyValue
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
operator|/
operator|(
name|float
operator|)
name|split
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|createValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|results
condition|)
block|{
comment|// First time into this method, run the query.
name|this
operator|.
name|results
operator|=
name|executeQuery
argument_list|(
name|getSelectQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|results
operator|.
name|next
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Set the key field value as the output key value
name|key
operator|.
name|set
argument_list|(
name|pos
operator|+
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"SQLException in nextKeyValue"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getSplit ()
specifier|protected
name|DBInputFormat
operator|.
name|DBInputSplit
name|getSplit
parameter_list|()
block|{
return|return
name|split
return|;
block|}
DECL|method|getFieldNames ()
specifier|protected
name|String
index|[]
name|getFieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
DECL|method|getTableName ()
specifier|protected
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
DECL|method|getConditions ()
specifier|protected
name|String
name|getConditions
parameter_list|()
block|{
return|return
name|conditions
return|;
block|}
DECL|method|getDBConf ()
specifier|protected
name|DBConfiguration
name|getDBConf
parameter_list|()
block|{
return|return
name|dbConf
return|;
block|}
DECL|method|getConnection ()
specifier|protected
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
DECL|method|getStatement ()
specifier|protected
name|PreparedStatement
name|getStatement
parameter_list|()
block|{
return|return
name|statement
return|;
block|}
DECL|method|setStatement (PreparedStatement stmt)
specifier|protected
name|void
name|setStatement
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
block|{
name|this
operator|.
name|statement
operator|=
name|stmt
expr_stmt|;
block|}
block|}
end_class

end_unit

