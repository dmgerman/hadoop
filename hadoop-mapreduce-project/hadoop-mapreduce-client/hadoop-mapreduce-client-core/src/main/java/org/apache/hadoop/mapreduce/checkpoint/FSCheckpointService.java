begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.checkpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * A FileSystem based CheckpointService.  */
end_comment

begin_class
DECL|class|FSCheckpointService
specifier|public
class|class
name|FSCheckpointService
implements|implements
name|CheckpointService
block|{
DECL|field|base
specifier|private
specifier|final
name|Path
name|base
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|namingPolicy
specifier|private
specifier|final
name|CheckpointNamingService
name|namingPolicy
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|short
name|replication
decl_stmt|;
DECL|method|FSCheckpointService (FileSystem fs, Path base, CheckpointNamingService namingPolicy, short replication)
specifier|public
name|FSCheckpointService
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|base
parameter_list|,
name|CheckpointNamingService
name|namingPolicy
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|namingPolicy
operator|=
name|namingPolicy
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|CheckpointWriteChannel
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|namingPolicy
operator|.
name|getNewName
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isUriPathAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Checkpoint cannot be an absolute path"
argument_list|)
throw|;
block|}
return|return
name|createInternal
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|p
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createInternal (Path name)
name|CheckpointWriteChannel
name|createInternal
parameter_list|(
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|//create a temp file, fail if file exists
return|return
operator|new
name|FSCheckpointWriteChannel
argument_list|(
name|name
argument_list|,
name|fs
operator|.
name|create
argument_list|(
name|tmpfile
argument_list|(
name|name
argument_list|)
argument_list|,
name|replication
argument_list|)
argument_list|)
return|;
block|}
DECL|class|FSCheckpointWriteChannel
specifier|private
specifier|static
class|class
name|FSCheckpointWriteChannel
implements|implements
name|CheckpointWriteChannel
block|{
DECL|field|isOpen
specifier|private
name|boolean
name|isOpen
init|=
literal|true
decl_stmt|;
DECL|field|finalDst
specifier|private
specifier|final
name|Path
name|finalDst
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|WritableByteChannel
name|out
decl_stmt|;
DECL|method|FSCheckpointWriteChannel (Path finalDst, FSDataOutputStream out)
name|FSCheckpointWriteChannel
parameter_list|(
name|Path
name|finalDst
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|finalDst
operator|=
name|finalDst
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|write (ByteBuffer b)
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
return|;
block|}
DECL|method|getDestination ()
specifier|public
name|Path
name|getDestination
parameter_list|()
block|{
return|return
name|finalDst
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isOpen ()
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|isOpen
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|open (CheckpointID id)
specifier|public
name|CheckpointReadChannel
name|open
parameter_list|(
name|CheckpointID
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
operator|(
name|id
operator|instanceof
name|FSCheckpointID
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mismatched checkpoint type: "
operator|+
name|id
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSCheckpointReadChannel
argument_list|(
name|fs
operator|.
name|open
argument_list|(
operator|(
operator|(
name|FSCheckpointID
operator|)
name|id
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|class|FSCheckpointReadChannel
specifier|private
specifier|static
class|class
name|FSCheckpointReadChannel
implements|implements
name|CheckpointReadChannel
block|{
DECL|field|isOpen
specifier|private
name|boolean
name|isOpen
init|=
literal|true
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ReadableByteChannel
name|in
decl_stmt|;
DECL|method|FSCheckpointReadChannel (FSDataInputStream in)
name|FSCheckpointReadChannel
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (ByteBuffer bb)
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|bb
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isOpen ()
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|isOpen
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|commit (CheckpointWriteChannel ch)
specifier|public
name|CheckpointID
name|commit
parameter_list|(
name|CheckpointWriteChannel
name|ch
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|ch
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FSCheckpointWriteChannel
name|hch
init|=
operator|(
name|FSCheckpointWriteChannel
operator|)
name|ch
decl_stmt|;
name|Path
name|dst
init|=
name|hch
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmpfile
argument_list|(
name|dst
argument_list|)
argument_list|,
name|dst
argument_list|)
condition|)
block|{
comment|// attempt to clean up
name|abort
argument_list|(
name|ch
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to promote checkpoint"
operator|+
name|tmpfile
argument_list|(
name|dst
argument_list|)
operator|+
literal|" -> "
operator|+
name|dst
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSCheckpointID
argument_list|(
name|hch
operator|.
name|getDestination
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|abort (CheckpointWriteChannel ch)
specifier|public
name|void
name|abort
parameter_list|(
name|CheckpointWriteChannel
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ch
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FSCheckpointWriteChannel
name|hch
init|=
operator|(
name|FSCheckpointWriteChannel
operator|)
name|ch
decl_stmt|;
name|Path
name|tmp
init|=
name|tmpfile
argument_list|(
name|hch
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete checkpoint during abort"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// IGNORE
block|}
block|}
annotation|@
name|Override
DECL|method|delete (CheckpointID id)
specifier|public
name|boolean
name|delete
parameter_list|(
name|CheckpointID
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
operator|(
name|id
operator|instanceof
name|FSCheckpointID
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mismatched checkpoint type: "
operator|+
name|id
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|tmp
init|=
operator|(
operator|(
name|FSCheckpointID
operator|)
name|id
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|fs
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// IGNORE
block|}
return|return
literal|true
return|;
block|}
DECL|method|tmpfile (Path p)
specifier|static
specifier|final
name|Path
name|tmpfile
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
argument_list|,
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|".tmp"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

