begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for FadvisedChunkedFile.  */
end_comment

begin_class
DECL|class|TestFadvisedChunkedFile
specifier|public
class|class
name|TestFadvisedChunkedFile
block|{
annotation|@
name|Test
DECL|method|testDoubleClose ()
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|absoluteFile
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestFadvisedChunkedFile
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|absoluteFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
try|try
block|{
try|try
init|(
name|RandomAccessFile
name|f
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|absoluteFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
init|)
block|{
name|FadvisedChunkedFile
name|af
init|=
operator|new
name|FadvisedChunkedFile
argument_list|(
name|f
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fd not valid"
argument_list|,
name|f
operator|.
name|getFD
argument_list|()
operator|.
name|valid
argument_list|()
argument_list|)
expr_stmt|;
name|af
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"fd still valid"
argument_list|,
name|f
operator|.
name|getFD
argument_list|()
operator|.
name|valid
argument_list|()
argument_list|)
expr_stmt|;
name|af
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"fd still valid"
argument_list|,
name|f
operator|.
name|getFD
argument_list|()
operator|.
name|valid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|absoluteFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

