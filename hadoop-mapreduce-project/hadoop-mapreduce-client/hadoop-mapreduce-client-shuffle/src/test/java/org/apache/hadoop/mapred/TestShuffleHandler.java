begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|wrappedBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|ShuffleHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsSystemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PureJavaCrc32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryLocalPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|AbstractChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestShuffleHandler
specifier|public
class|class
name|TestShuffleHandler
block|{
DECL|field|MiB
specifier|static
specifier|final
name|long
name|MiB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestShuffleHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ABS_LOG_DIR
specifier|private
specifier|static
specifier|final
name|File
name|ABS_LOG_DIR
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestShuffleHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"LocDir"
argument_list|)
decl_stmt|;
DECL|class|MockShuffleHandler
class|class
name|MockShuffleHandler
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
block|{
DECL|field|pathHandler
specifier|private
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
operator|new
name|TestAuxiliaryLocalPathHandler
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getShuffle (final Configuration conf)
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|protected
name|MapOutputInfo
name|getMapOutputInfo
parameter_list|(
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"attempt_12345_1_m_1_0"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dob
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getAuxiliaryLocalPathHandler ()
specifier|public
name|AuxiliaryLocalPathHandler
name|getAuxiliaryLocalPathHandler
parameter_list|()
block|{
return|return
name|pathHandler
return|;
block|}
block|}
DECL|class|TestAuxiliaryLocalPathHandler
specifier|private
class|class
name|TestAuxiliaryLocalPathHandler
implements|implements
name|AuxiliaryLocalPathHandler
block|{
annotation|@
name|Override
DECL|method|getLocalPathForRead (String path)
specifier|public
name|Path
name|getLocalPathForRead
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalPathForWrite (String path)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalPathForWrite (String path, long size)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|MockShuffleHandler2
specifier|private
specifier|static
class|class
name|MockShuffleHandler2
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
block|{
DECL|field|socketKeepAlive
name|boolean
name|socketKeepAlive
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|getShuffle (final Configuration conf)
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
name|SocketChannel
name|channel
init|=
call|(
name|SocketChannel
call|)
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
decl_stmt|;
name|socketKeepAlive
operator|=
name|channel
operator|.
name|getConfig
argument_list|()
operator|.
name|isKeepAlive
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|isSocketKeepAlive ()
specifier|protected
name|boolean
name|isSocketKeepAlive
parameter_list|()
block|{
return|return
name|socketKeepAlive
return|;
block|}
block|}
comment|/**    * Test the validation of ShuffleHandler's meta-data's serialization and    * de-serialization.    *    * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSerializeMeta ()
specifier|public
name|void
name|testSerializeMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ShuffleHandler
operator|.
name|deserializeMetaData
argument_list|(
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ShuffleHandler
operator|.
name|deserializeMetaData
argument_list|(
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8080
argument_list|,
name|ShuffleHandler
operator|.
name|deserializeMetaData
argument_list|(
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|8080
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate shuffle connection and input/output metrics.    *    * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testShuffleMetrics ()
specifier|public
name|void
name|testShuffleMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|ShuffleHandler
name|sh
init|=
operator|new
name|ShuffleHandler
argument_list|(
name|ms
argument_list|)
decl_stmt|;
name|ChannelFuture
name|cf
init|=
name|mock
argument_list|(
name|ChannelFuture
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cf
operator|.
name|isSuccess
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleConnections
operator|.
name|incr
argument_list|()
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleOutputBytes
operator|.
name|incr
argument_list|(
literal|1
operator|*
name|MiB
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleConnections
operator|.
name|incr
argument_list|()
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleOutputBytes
operator|.
name|incr
argument_list|(
literal|2
operator|*
name|MiB
argument_list|)
expr_stmt|;
name|checkShuffleMetrics
argument_list|(
name|ms
argument_list|,
literal|3
operator|*
name|MiB
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|operationComplete
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|operationComplete
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|checkShuffleMetrics
argument_list|(
name|ms
argument_list|,
literal|3
operator|*
name|MiB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkShuffleMetrics (MetricsSystem ms, long bytes, int failed, int succeeded, int connections)
specifier|static
name|void
name|checkShuffleMetrics
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|long
name|bytes
parameter_list|,
name|int
name|failed
parameter_list|,
name|int
name|succeeded
parameter_list|,
name|int
name|connections
parameter_list|)
block|{
name|MetricsSource
name|source
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ShuffleMetrics"
argument_list|)
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputBytes"
argument_list|,
name|bytes
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputsFailed"
argument_list|,
name|failed
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputsOK"
argument_list|,
name|succeeded
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"ShuffleConnections"
argument_list|,
name|connections
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify client prematurely closing a connection.    *    * @throws Exception exception.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testClientClosesConnection ()
specifier|public
name|void
name|testClientClosesConnection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// replace the shuffle handler with one stubbed for testing
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MapOutputInfo
name|getMapOutputInfo
parameter_list|(
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only set response headers and skip everything else
comment|// send some dummy value for content-length
name|super
operator|.
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|keepAliveParam
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{           }
annotation|@
name|Override
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// send a shuffle header and a lot of data down the channel
comment|// to trigger a broken pipe
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"attempt_12345_1_m_1_0"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dob
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
block|{
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Error
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Error
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// simulate a reducer that closes early by reading a single shuffle header
comment|// then closing the connection
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|DataInputStream
name|input
init|=
operator|new
name|DataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"close"
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeader
operator|.
name|CONNECTION
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|readFields
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"sendError called when client closed connection"
argument_list|,
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|LastSocketAddress
specifier|static
class|class
name|LastSocketAddress
block|{
DECL|field|lastAddress
name|SocketAddress
name|lastAddress
decl_stmt|;
DECL|method|setAddress (SocketAddress lastAddress)
name|void
name|setAddress
parameter_list|(
name|SocketAddress
name|lastAddress
parameter_list|)
block|{
name|this
operator|.
name|lastAddress
operator|=
name|lastAddress
expr_stmt|;
block|}
DECL|method|getSocketAddres ()
name|SocketAddress
name|getSocketAddres
parameter_list|()
block|{
return|return
name|lastAddress
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testKeepAlive ()
specifier|public
name|void
name|testKeepAlive
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// try setting to -ve keep alive timeout.
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
argument_list|,
operator|-
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|LastSocketAddress
name|lastSocketAddress
init|=
operator|new
name|LastSocketAddress
argument_list|()
decl_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// replace the shuffle handler with one stubbed for testing
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MapOutputInfo
name|getMapOutputInfo
parameter_list|(
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{           }
annotation|@
name|Override
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Send some dummy data (populate content length details)
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"attempt_12345_1_m_1_0"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|dob
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
block|{
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
name|long
name|contentLength
init|=
name|dob
operator|.
name|getLength
argument_list|()
decl_stmt|;
comment|// for testing purpose;
comment|// disable connectinKeepAliveEnabled if keepAliveParam is available
if|if
condition|(
name|keepAliveParam
condition|)
block|{
name|connectionKeepAliveEnabled
operator|=
literal|false
expr_stmt|;
block|}
name|super
operator|.
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|keepAliveParam
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|lastSocketAddress
operator|.
name|setAddress
argument_list|(
name|ch
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
comment|// send a shuffle header and a lot of data down the channel
comment|// to trigger a broken pipe
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"attempt_12345_1_m_1_0"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dob
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
block|{
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Error
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Error
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|shuffleBaseURL
init|=
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|shuffleBaseURL
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&"
operator|+
literal|"map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|DataInputStream
name|input
init|=
operator|new
name|DataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpHeader
operator|.
name|KEEP_ALIVE
operator|.
name|asString
argument_list|()
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeader
operator|.
name|CONNECTION
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"timeout=1"
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeader
operator|.
name|KEEP_ALIVE
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|readFields
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{}
name|SocketAddress
name|firstAddress
init|=
name|lastSocketAddress
operator|.
name|getSocketAddres
argument_list|()
decl_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// For keepAlive via URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|shuffleBaseURL
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&"
operator|+
literal|"map=attempt_12345_1_m_1_0&keepAlive=true"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|input
operator|=
operator|new
name|DataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpHeader
operator|.
name|KEEP_ALIVE
operator|.
name|asString
argument_list|()
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeader
operator|.
name|CONNECTION
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"timeout=1"
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeader
operator|.
name|KEEP_ALIVE
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|=
operator|new
name|ShuffleHeader
argument_list|()
expr_stmt|;
name|header
operator|.
name|readFields
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|SocketAddress
name|secondAddress
init|=
name|lastSocketAddress
operator|.
name|getSocketAddres
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Initial shuffle address should not be null"
argument_list|,
name|firstAddress
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Keep-Alive shuffle address should not be null"
argument_list|,
name|secondAddress
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Initial shuffle address and keep-alive shuffle "
operator|+
literal|"address should be the same"
argument_list|,
name|firstAddress
argument_list|,
name|secondAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSocketKeepAlive ()
specifier|public
name|void
name|testSocketKeepAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// try setting to -ve keep alive timeout.
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
argument_list|,
operator|-
literal|100
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|MockShuffleHandler2
name|shuffleHandler
init|=
operator|new
name|MockShuffleHandler2
argument_list|()
decl_stmt|;
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
name|mock
argument_list|(
name|AuxiliaryLocalPathHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pathHandler
operator|.
name|getLocalPathForRead
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|DiskChecker
operator|.
name|DiskErrorException
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
try|try
block|{
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|shuffleBaseURL
init|=
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|shuffleBaseURL
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&"
operator|+
literal|"map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"socket should be set KEEP_ALIVE"
argument_list|,
name|shuffleHandler
operator|.
name|isSocketKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * simulate a reducer that sends an invalid shuffle-header - sometimes a wrong    * header_name and sometimes a wrong version    *     * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testIncompatibleShuffleVersion ()
specifier|public
name|void
name|testIncompatibleShuffleVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|failureNum
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
decl_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// simulate a reducer that closes early by reading a single shuffle header
comment|// then closing the connection
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|failureNum
condition|;
operator|++
name|i
control|)
block|{
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|i
operator|==
literal|0
condition|?
literal|"mapreduce"
else|:
literal|"other"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|i
operator|==
literal|1
condition|?
literal|"1.0.0"
else|:
literal|"1.0.1"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|shuffleHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate the limit on number of shuffle connections.    *     * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMaxConnections ()
specifier|public
name|void
name|testMaxConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// replace the shuffle handler with one stubbed for testing
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MapOutputInfo
name|getMapOutputInfo
parameter_list|(
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// send a shuffle header and a lot of data down the channel
comment|// to trigger a broken pipe
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"dummy_header"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dob
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
block|{
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// setup connections
name|int
name|connAttempts
init|=
literal|3
decl_stmt|;
name|HttpURLConnection
name|conns
index|[]
init|=
operator|new
name|HttpURLConnection
index|[
name|connAttempts
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connAttempts
condition|;
name|i
operator|++
control|)
block|{
name|String
name|URLstring
init|=
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_"
operator|+
name|i
operator|+
literal|"_0"
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|URLstring
argument_list|)
decl_stmt|;
name|conns
index|[
name|i
index|]
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conns
index|[
name|i
index|]
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conns
index|[
name|i
index|]
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
block|}
comment|// Try to open numerous connections
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connAttempts
condition|;
name|i
operator|++
control|)
block|{
name|conns
index|[
name|i
index|]
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
comment|//Ensure first connections are okay
name|conns
index|[
literal|0
index|]
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|int
name|rc
init|=
name|conns
index|[
literal|0
index|]
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|conns
index|[
literal|1
index|]
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|rc
operator|=
name|conns
index|[
literal|1
index|]
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// This connection should be closed because it to above the limit
try|try
block|{
name|rc
operator|=
name|conns
index|[
literal|2
index|]
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected a too-many-requests response code"
argument_list|,
name|ShuffleHandler
operator|.
name|TOO_MANY_REQ_STATUS
operator|.
name|getCode
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|long
name|backoff
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|conns
index|[
literal|2
index|]
operator|.
name|getHeaderField
argument_list|(
name|ShuffleHandler
operator|.
name|RETRY_AFTER_HEADER
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The backoff value cannot be negative."
argument_list|,
name|backoff
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conns
index|[
literal|2
index|]
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected - connection should not be open"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a numerical value for RETRY_AFTER header field"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a IOException"
argument_list|)
expr_stmt|;
block|}
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate the ownership of the map-output files being pulled in. The    * local-file-system owner of the file should match the user component in the    *    * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMapFileAccess ()
specifier|public
name|void
name|testMapFileAccess
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This will run only in NativeIO is enabled as SecureIOUtils need it
name|assumeTrue
argument_list|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|appAttemptId
init|=
literal|"attempt_12345_1_m_1_0"
decl_stmt|;
name|String
name|user
init|=
literal|"randomUser"
decl_stmt|;
name|String
name|reducerId
init|=
literal|"0"
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|fileMap
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|createShuffleHandlerFiles
argument_list|(
name|ABS_LOG_DIR
argument_list|,
name|user
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttemptId
argument_list|,
name|conf
argument_list|,
name|fileMap
argument_list|)
expr_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// replace the shuffle handler with one stubbed for testing
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
operator|new
name|TestAuxiliaryLocalPathHandler
argument_list|()
decl_stmt|;
name|shuffleHandler
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|DataOutputBuffer
name|outputBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|outputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|user
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"shuffleService"
argument_list|)
argument_list|)
decl_stmt|;
name|jt
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|initializeApplication
argument_list|(
operator|new
name|ApplicationInitializationContext
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|outputBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outputBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_0001&reduce="
operator|+
name|reducerId
operator|+
literal|"&map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|byte
index|[]
name|byteArr
init|=
operator|new
name|byte
index|[
literal|10000
index|]
decl_stmt|;
try|try
block|{
name|DataInputStream
name|is
init|=
operator|new
name|DataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|is
operator|.
name|readFully
argument_list|(
name|byteArr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// Retrieve file owner name
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|fileMap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|NativeIO
operator|.
name|POSIX
operator|.
name|getFstat
argument_list|(
name|is
operator|.
name|getFD
argument_list|()
argument_list|)
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Owner '"
operator|+
name|owner
operator|+
literal|"' for path "
operator|+
name|fileMap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" did not match expected owner '"
operator|+
name|user
operator|+
literal|"'"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|String
argument_list|(
name|byteArr
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|ABS_LOG_DIR
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createShuffleHandlerFiles (File logDir, String user, String appId, String appAttemptId, Configuration conf, List<File> fileMap)
specifier|private
specifier|static
name|void
name|createShuffleHandlerFiles
parameter_list|(
name|File
name|logDir
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|fileMap
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|attemptDir
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
operator|new
name|String
index|[]
block|{
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
block|,
name|ContainerLocalizer
operator|.
name|USERCACHE
block|,
name|user
block|,
name|ContainerLocalizer
operator|.
name|APPCACHE
block|,
name|appId
block|,
literal|"output"
block|,
name|appAttemptId
block|}
argument_list|)
decl_stmt|;
name|File
name|appAttemptDir
init|=
operator|new
name|File
argument_list|(
name|attemptDir
argument_list|)
decl_stmt|;
name|appAttemptDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|appAttemptDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|indexFile
init|=
operator|new
name|File
argument_list|(
name|appAttemptDir
argument_list|,
literal|"file.out.index"
argument_list|)
decl_stmt|;
name|fileMap
operator|.
name|add
argument_list|(
name|indexFile
argument_list|)
expr_stmt|;
name|createIndexFile
argument_list|(
name|indexFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|File
name|mapOutputFile
init|=
operator|new
name|File
argument_list|(
name|appAttemptDir
argument_list|,
literal|"file.out"
argument_list|)
decl_stmt|;
name|fileMap
operator|.
name|add
argument_list|(
name|mapOutputFile
argument_list|)
expr_stmt|;
name|createMapOutputFile
argument_list|(
name|mapOutputFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
DECL|method|createMapOutputFile (File mapOutputFile, Configuration conf)
name|createMapOutputFile
parameter_list|(
name|File
name|mapOutputFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|mapOutputFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"Creating new dummy map output file. Used only for testing"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndexFile (File indexFile, Configuration conf)
specifier|private
specifier|static
name|void
name|createIndexFile
parameter_list|(
name|File
name|indexFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting existing file"
argument_list|)
expr_stmt|;
name|indexFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|indexFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|output
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|indexFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Checksum
name|crc
init|=
operator|new
name|PureJavaCrc32
argument_list|()
decl_stmt|;
name|crc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CheckedOutputStream
name|chk
init|=
operator|new
name|CheckedOutputStream
argument_list|(
name|output
argument_list|,
name|crc
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Writing new index file. This file will be used only "
operator|+
literal|"for the testing."
decl_stmt|;
name|chk
operator|.
name|write
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|()
argument_list|,
name|MapTask
operator|.
name|MAP_OUTPUT_INDEX_RECORD_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeLong
argument_list|(
name|chk
operator|.
name|getChecksum
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|user
init|=
literal|"someuser"
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|downgrade
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestShuffleHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ShuffleHandler
name|shuffle
init|=
operator|new
name|ShuffleHandler
argument_list|()
decl_stmt|;
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
operator|new
name|TestAuxiliaryLocalPathHandler
argument_list|()
decl_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// emulate aux services startup with recovery enabled
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// setup a shuffle token for an application
name|DataOutputBuffer
name|outputBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|outputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|user
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"shuffleService"
argument_list|)
argument_list|)
decl_stmt|;
name|jt
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|initializeApplication
argument_list|(
operator|new
name|ApplicationInitializationContext
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|outputBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outputBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify we are authorized to shuffle
name|int
name|rc
init|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// emulate shuffle handler restart
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|ShuffleHandler
argument_list|()
expr_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify we are still authorized to shuffle to the old application
name|rc
operator|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// shutdown app and verify access is lost
name|shuffle
operator|.
name|stopApplication
argument_list|(
operator|new
name|ApplicationTerminationContext
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// emulate shuffle handler restart
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|ShuffleHandler
argument_list|()
expr_stmt|;
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify we still don't have access
name|rc
operator|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|shuffle
operator|!=
literal|null
condition|)
block|{
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRecoveryFromOtherVersions ()
specifier|public
name|void
name|testRecoveryFromOtherVersions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|user
init|=
literal|"someuser"
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestShuffleHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ShuffleHandler
name|shuffle
init|=
operator|new
name|ShuffleHandler
argument_list|()
decl_stmt|;
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
operator|new
name|TestAuxiliaryLocalPathHandler
argument_list|()
decl_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// emulate aux services startup with recovery enabled
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// setup a shuffle token for an application
name|DataOutputBuffer
name|outputBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|outputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|user
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"shuffleService"
argument_list|)
argument_list|)
decl_stmt|;
name|jt
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|initializeApplication
argument_list|(
operator|new
name|ApplicationInitializationContext
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|outputBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outputBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify we are authorized to shuffle
name|int
name|rc
init|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// emulate shuffle handler restart
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|ShuffleHandler
argument_list|()
expr_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify we are still authorized to shuffle to the old application
name|rc
operator|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|Version
name|version
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|shuffle
operator|.
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// emulate shuffle handler restart with compatible version
name|Version
name|version11
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// update version info before close shuffle
name|shuffle
operator|.
name|storeVersion
argument_list|(
name|version11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version11
argument_list|,
name|shuffle
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|ShuffleHandler
argument_list|()
expr_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// shuffle version will be override by CURRENT_VERSION_INFO after restart
comment|// successfully.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|shuffle
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify we are still authorized to shuffle to the old application
name|rc
operator|=
name|getShuffleResponseCode
argument_list|(
name|shuffle
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// emulate shuffle handler restart with incompatible version
name|Version
name|version21
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|shuffle
operator|.
name|storeVersion
argument_list|(
name|version21
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version21
argument_list|,
name|shuffle
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|ShuffleHandler
argument_list|()
expr_stmt|;
name|shuffle
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|setRecoveryPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffle
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|shuffle
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Incompatible version, should expect fail here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exception message mismatch"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Incompatible version for state DB schema:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|shuffle
operator|!=
literal|null
condition|)
block|{
name|shuffle
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShuffleResponseCode (ShuffleHandler shuffle, Token<JobTokenIdentifier> jt)
specifier|private
specifier|static
name|int
name|getShuffleResponseCode
parameter_list|(
name|ShuffleHandler
name|shuffle
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|shuffle
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_0001&reduce=0&map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|encHash
init|=
name|SecureShuffleUtils
operator|.
name|hashFromString
argument_list|(
name|SecureShuffleUtils
operator|.
name|buildMsgFrom
argument_list|(
name|url
argument_list|)
argument_list|,
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
name|jt
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conn
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|encHash
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|rc
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
return|return
name|rc
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testGetMapOutputInfo ()
specifier|public
name|void
name|testGetMapOutputInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|ABS_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|appAttemptId
init|=
literal|"attempt_12345_1_m_1_0"
decl_stmt|;
name|String
name|user
init|=
literal|"randomUser"
decl_stmt|;
name|String
name|reducerId
init|=
literal|"0"
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|fileMap
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|createShuffleHandlerFiles
argument_list|(
name|ABS_LOG_DIR
argument_list|,
name|user
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttemptId
argument_list|,
name|conf
argument_list|,
name|fileMap
argument_list|)
expr_stmt|;
name|AuxiliaryLocalPathHandler
name|pathHandler
init|=
operator|new
name|TestAuxiliaryLocalPathHandler
argument_list|()
decl_stmt|;
name|ShuffleHandler
name|shuffleHandler
init|=
operator|new
name|ShuffleHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// replace the shuffle handler with one stubbed for testing
return|return
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|outputBaseStr
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|infoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only set response headers and skip everything else
comment|// send some dummy value for content-length
name|super
operator|.
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|keepAliveParam
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Error
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// send a shuffle header
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
literal|"attempt_12345_1_m_1_0"
argument_list|,
literal|5678
argument_list|,
literal|5678
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
return|return
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|shuffleHandler
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|pathHandler
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|shuffleHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|DataOutputBuffer
name|outputBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|outputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|user
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"shuffleService"
argument_list|)
argument_list|)
decl_stmt|;
name|jt
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
name|shuffleHandler
operator|.
name|initializeApplication
argument_list|(
operator|new
name|ApplicationInitializationContext
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|outputBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outputBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|shuffleHandler
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|)
operator|+
literal|"/mapOutput?job=job_12345_0001&reduce="
operator|+
name|reducerId
operator|+
literal|"&map=attempt_12345_1_m_1_0"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
try|try
block|{
name|DataInputStream
name|is
init|=
operator|new
name|DataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|readFields
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sendError called due to shuffle error"
argument_list|,
literal|0
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shuffleHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|ABS_LOG_DIR
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|4000
argument_list|)
DECL|method|testSendMapCount ()
specifier|public
name|void
name|testSendMapCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
argument_list|>
name|listenerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ChannelHandlerContext
name|mockCtx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MessageEvent
name|mockEvt
init|=
name|mock
argument_list|(
name|MessageEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Channel
name|mockCh
init|=
name|mock
argument_list|(
name|AbstractChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ChannelPipeline
name|mockPipeline
init|=
name|mock
argument_list|(
name|ChannelPipeline
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Mock HttpRequest and ChannelFuture
specifier|final
name|HttpRequest
name|mockHttpRequest
init|=
name|createMockHttpRequest
argument_list|()
decl_stmt|;
specifier|final
name|ChannelFuture
name|mockFuture
init|=
name|createMockChannelFuture
argument_list|(
name|mockCh
argument_list|,
name|listenerList
argument_list|)
decl_stmt|;
specifier|final
name|ShuffleHandler
operator|.
name|TimeoutHandler
name|timerHandler
init|=
operator|new
name|ShuffleHandler
operator|.
name|TimeoutHandler
argument_list|()
decl_stmt|;
comment|// Mock Netty Channel Context and Channel behavior
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockCh
argument_list|)
operator|.
name|when
argument_list|(
name|mockCtx
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockCh
operator|.
name|getPipeline
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockPipeline
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPipeline
operator|.
name|get
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timerHandler
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCtx
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCh
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockFuture
argument_list|)
operator|.
name|when
argument_list|(
name|mockCh
argument_list|)
operator|.
name|write
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCh
operator|.
name|write
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFuture
argument_list|)
expr_stmt|;
comment|//Mock MessageEvent behavior
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockCh
argument_list|)
operator|.
name|when
argument_list|(
name|mockEvt
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockEvt
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCh
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockHttpRequest
argument_list|)
operator|.
name|when
argument_list|(
name|mockEvt
argument_list|)
operator|.
name|getMessage
argument_list|()
expr_stmt|;
specifier|final
name|ShuffleHandler
name|sh
init|=
operator|new
name|MockShuffleHandler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|sh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sh
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|maxOpenFiles
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_MAX_SESSION_OPEN_FILES
argument_list|,
name|ShuffleHandler
operator|.
name|DEFAULT_SHUFFLE_MAX_SESSION_OPEN_FILES
argument_list|)
decl_stmt|;
name|sh
operator|.
name|getShuffle
argument_list|(
name|conf
argument_list|)
operator|.
name|messageReceived
argument_list|(
name|mockCtx
argument_list|,
name|mockEvt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Number of Open files should not exceed the configured "
operator|+
literal|"value!-Not Expected"
argument_list|,
name|listenerList
operator|.
name|size
argument_list|()
operator|<=
name|maxOpenFiles
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|listenerList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|operationComplete
argument_list|(
name|mockFuture
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Number of Open files should not exceed the configured "
operator|+
literal|"value!-Not Expected"
argument_list|,
name|listenerList
operator|.
name|size
argument_list|()
operator|<=
name|maxOpenFiles
argument_list|)
expr_stmt|;
block|}
name|sh
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createMockChannelFuture (Channel mockCh, final List<ShuffleHandler.ReduceMapFileCount> listenerList)
specifier|public
name|ChannelFuture
name|createMockChannelFuture
parameter_list|(
name|Channel
name|mockCh
parameter_list|,
specifier|final
name|List
argument_list|<
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
argument_list|>
name|listenerList
parameter_list|)
block|{
specifier|final
name|ChannelFuture
name|mockFuture
init|=
name|mock
argument_list|(
name|ChannelFuture
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFuture
operator|.
name|getChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCh
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|mockFuture
argument_list|)
operator|.
name|isSuccess
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|//Add ReduceMapFileCount listener to a list
if|if
condition|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
operator|==
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
operator|.
name|class
condition|)
name|listenerList
operator|.
name|add
argument_list|(
operator|(
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockFuture
argument_list|)
operator|.
name|addListener
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ShuffleHandler
operator|.
name|ReduceMapFileCount
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockFuture
return|;
block|}
DECL|method|createMockHttpRequest ()
specifier|public
name|HttpRequest
name|createMockHttpRequest
parameter_list|()
block|{
name|HttpRequest
name|mockHttpRequest
init|=
name|mock
argument_list|(
name|HttpRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpRequest
argument_list|)
operator|.
name|getMethod
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|uri
init|=
literal|"/mapOutput?job=job_12345_1&reduce=1"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|uri
operator|=
name|uri
operator|.
name|concat
argument_list|(
literal|"&map=attempt_12345_1_m_"
operator|+
name|i
operator|+
literal|"_0"
argument_list|)
expr_stmt|;
return|return
name|uri
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpRequest
argument_list|)
operator|.
name|getUri
argument_list|()
expr_stmt|;
return|return
name|mockHttpRequest
return|;
block|}
block|}
end_class

end_unit

