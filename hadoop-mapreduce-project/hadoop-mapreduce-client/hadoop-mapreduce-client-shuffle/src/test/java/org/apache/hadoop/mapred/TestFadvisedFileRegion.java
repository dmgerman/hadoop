begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFadvisedFileRegion
specifier|public
class|class
name|TestFadvisedFileRegion
block|{
DECL|field|FILE_SIZE
specifier|private
specifier|final
name|int
name|FILE_SIZE
init|=
literal|16
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFadvisedFileRegion
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testCustomShuffleTransfer ()
specifier|public
name|void
name|testCustomShuffleTransfer
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|absLogDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestFadvisedFileRegion
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"LocDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|testDirPath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
operator|new
name|String
index|[]
block|{
name|absLogDir
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"testCustomShuffleTransfer"
block|}
argument_list|)
decl_stmt|;
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|testDirPath
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|inFile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"fileIn.out"
argument_list|)
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"fileOut.out"
argument_list|)
decl_stmt|;
comment|//Initialize input file
name|byte
index|[]
name|initBuff
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|initBuff
argument_list|)
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|initBuff
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|//define position and count to read from a file region.
name|int
name|position
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|count
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
operator|-
literal|1
decl_stmt|;
name|RandomAccessFile
name|inputFile
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|targetFile
init|=
literal|null
decl_stmt|;
name|WritableByteChannel
name|target
init|=
literal|null
decl_stmt|;
name|FadvisedFileRegion
name|fileRegion
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|inFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|targetFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|target
operator|=
name|targetFile
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|inputFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|//create FadvisedFileRegion
name|fileRegion
operator|=
operator|new
name|FadvisedFileRegion
argument_list|(
name|inputFile
argument_list|,
name|position
argument_list|,
name|count
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//test corner cases
name|customShuffleTransferCornerCases
argument_list|(
name|fileRegion
argument_list|,
name|target
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
name|long
name|size
decl_stmt|;
while|while
condition|(
operator|(
name|size
operator|=
name|fileRegion
operator|.
name|customShuffleTransfer
argument_list|(
name|target
argument_list|,
name|pos
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|size
expr_stmt|;
block|}
comment|//assert size
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
operator|(
name|int
operator|)
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|targetFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileRegion
operator|!=
literal|null
condition|)
block|{
name|fileRegion
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|inputFile
argument_list|)
expr_stmt|;
block|}
comment|//Read the target file and verify that copy is done correctly
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|total
init|=
name|in
operator|.
name|read
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|total
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initBuff
index|[
name|position
operator|+
name|i
index|]
argument_list|,
name|buff
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
comment|//delete files and folders
name|inFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|testDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|absLogDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|customShuffleTransferCornerCases ( FadvisedFileRegion fileRegion, WritableByteChannel target, int count)
specifier|private
specifier|static
name|void
name|customShuffleTransferCornerCases
parameter_list|(
name|FadvisedFileRegion
name|fileRegion
parameter_list|,
name|WritableByteChannel
name|target
parameter_list|,
name|int
name|count
parameter_list|)
block|{
try|try
block|{
name|fileRegion
operator|.
name|customShuffleTransfer
argument_list|(
name|target
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected - illegal argument is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
comment|//test corner cases
try|try
block|{
name|fileRegion
operator|.
name|customShuffleTransfer
argument_list|(
name|target
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected - illegal argument is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

