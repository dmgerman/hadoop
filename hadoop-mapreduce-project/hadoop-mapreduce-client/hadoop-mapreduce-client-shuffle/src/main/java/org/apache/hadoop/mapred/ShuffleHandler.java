begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|wrappedBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|FORBIDDEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|METHOD_NOT_ALLOWED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|UNAUTHORIZED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
operator|.
name|ShuffleHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|DefaultFileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|TooLongFrameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|QueryStringDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedWriteHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_class
DECL|class|ShuffleHandler
specifier|public
class|class
name|ShuffleHandler
extends|extends
name|AbstractService
implements|implements
name|AuxServices
operator|.
name|AuxiliaryService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShuffleHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|selector
specifier|private
name|ChannelFactory
name|selector
decl_stmt|;
DECL|field|accepted
specifier|private
specifier|final
name|ChannelGroup
name|accepted
init|=
operator|new
name|DefaultChannelGroup
argument_list|()
decl_stmt|;
DECL|field|MAPREDUCE_SHUFFLE_SERVICEID
specifier|public
specifier|static
specifier|final
name|String
name|MAPREDUCE_SHUFFLE_SERVICEID
init|=
literal|"mapreduce.shuffle"
decl_stmt|;
DECL|field|userRsrc
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userRsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|secretManager
specifier|private
specifier|static
specifier|final
name|JobTokenSecretManager
name|secretManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
DECL|field|SHUFFLE_PORT_CONFIG_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_PORT_CONFIG_KEY
init|=
literal|"mapreduce.shuffle.port"
decl_stmt|;
DECL|field|DEFAULT_SHUFFLE_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_PORT
init|=
literal|8080
decl_stmt|;
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Shuffle output metrics"
argument_list|,
name|context
operator|=
literal|"mapred"
argument_list|)
DECL|class|ShuffleMetrics
specifier|static
class|class
name|ShuffleMetrics
implements|implements
name|ChannelFutureListener
block|{
annotation|@
name|Metric
argument_list|(
literal|"Shuffle output in bytes"
argument_list|)
DECL|field|shuffleOutputBytes
name|MutableCounterLong
name|shuffleOutputBytes
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of failed shuffle outputs"
argument_list|)
DECL|field|shuffleOutputsFailed
name|MutableCounterInt
name|shuffleOutputsFailed
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of succeeeded shuffle outputs"
argument_list|)
DECL|field|shuffleOutputsOK
name|MutableCounterInt
name|shuffleOutputsOK
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of current shuffle connections"
argument_list|)
DECL|field|shuffleConnections
name|MutableGaugeInt
name|shuffleConnections
decl_stmt|;
annotation|@
name|Override
DECL|method|operationComplete (ChannelFuture future)
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|shuffleOutputsOK
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shuffleOutputsFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
name|shuffleConnections
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|metrics
specifier|final
name|ShuffleMetrics
name|metrics
decl_stmt|;
DECL|method|ShuffleHandler (MetricsSystem ms)
name|ShuffleHandler
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|)
block|{
name|super
argument_list|(
literal|"httpshuffle"
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|ms
operator|.
name|register
argument_list|(
operator|new
name|ShuffleMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ShuffleHandler ()
specifier|public
name|ShuffleHandler
parameter_list|()
block|{
name|this
argument_list|(
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialize the shuffle port into a ByteBuffer for use later on.    * @param port the port to be sent to the ApplciationMaster    * @return the serialized form of the port.    */
DECL|method|serializeMetaData (int port)
specifier|static
name|ByteBuffer
name|serializeMetaData
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO these bytes should be versioned
name|DataOutputBuffer
name|port_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|port_dob
operator|.
name|writeInt
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|port_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|port_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * A helper function to deserialize the metadata returned by ShuffleHandler.    * @param meta the metadata returned by the ShuffleHandler    * @return the port the Shuffle Handler is listening on to serve shuffle data.    */
DECL|method|deserializeMetaData (ByteBuffer meta)
specifier|public
specifier|static
name|int
name|deserializeMetaData
parameter_list|(
name|ByteBuffer
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO this should be returning a class not just an int
name|DataInputByteBuffer
name|in
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
return|return
name|port
return|;
block|}
comment|/**    * A helper function to serialize the JobTokenIdentifier to be sent to the    * ShuffleHandler as ServiceData.    * @param jobToken the job token to be used for authentication of    * shuffle data requests.    * @return the serialized version of the jobToken.    */
DECL|method|serializeServiceData (Token<JobTokenIdentifier> jobToken)
specifier|public
specifier|static
name|ByteBuffer
name|serializeServiceData
parameter_list|(
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO these bytes should be versioned
name|DataOutputBuffer
name|jobToken_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|jobToken
operator|.
name|write
argument_list|(
name|jobToken_dob
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|jobToken_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|jobToken_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
DECL|method|deserializeServiceData (ByteBuffer secret)
specifier|static
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|deserializeServiceData
parameter_list|(
name|ByteBuffer
name|secret
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputByteBuffer
name|in
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|jt
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jt
return|;
block|}
annotation|@
name|Override
DECL|method|initApp (String user, ApplicationId appId, ByteBuffer secret)
specifier|public
name|void
name|initApp
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ByteBuffer
name|secret
parameter_list|)
block|{
comment|// TODO these bytes should be versioned
try|try
block|{
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
name|deserializeServiceData
argument_list|(
name|secret
argument_list|)
decl_stmt|;
comment|// TODO: Once SHuffle is out of NM, this can use MR APIs
name|JobID
name|jobId
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
argument_list|,
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|userRsrc
operator|.
name|put
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added token for "
operator|+
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|addTokenForJob
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during initApp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO add API to AuxiliaryServices to report failures
block|}
block|}
annotation|@
name|Override
DECL|method|stopApp (ApplicationId appId)
specifier|public
name|void
name|stopApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|JobID
name|jobId
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
argument_list|,
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|secretManager
operator|.
name|removeTokenForJob
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|selector
operator|=
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO change AbstractService to throw InterruptedException
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|HttpPipelineFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|port
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
name|DEFAULT_SHUFFLE_PORT
argument_list|)
expr_stmt|;
name|accepted
operator|.
name|add
argument_list|(
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" listening on port "
operator|+
name|port
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|accepted
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMeta ()
specifier|public
specifier|synchronized
name|ByteBuffer
name|getMeta
parameter_list|()
block|{
try|try
block|{
return|return
name|serializeMetaData
argument_list|(
name|port
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during getMeta"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO add API to AuxiliaryServices to report failures
return|return
literal|null
return|;
block|}
block|}
DECL|class|HttpPipelineFactory
class|class
name|HttpPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|field|SHUFFLE
specifier|final
name|Shuffle
name|SHUFFLE
decl_stmt|;
DECL|method|HttpPipelineFactory (Configuration conf)
specifier|public
name|HttpPipelineFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|SHUFFLE
operator|=
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPipeline ()
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|,
operator|new
name|HttpChunkAggregator
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|,
operator|new
name|ChunkedWriteHandler
argument_list|()
argument_list|,
name|SHUFFLE
argument_list|)
return|;
comment|// TODO factor security manager into pipeline
comment|// TODO factor out encode/decode to permit binary shuffle
comment|// TODO factor out decode of index to permit alt. models
block|}
block|}
DECL|class|Shuffle
class|class
name|Shuffle
extends|extends
name|SimpleChannelUpstreamHandler
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|indexCache
specifier|private
specifier|final
name|IndexCache
name|indexCache
decl_stmt|;
DECL|field|lDirAlloc
specifier|private
specifier|final
name|LocalDirAllocator
name|lDirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|NMConfig
operator|.
name|NM_LOCAL_DIR
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|method|Shuffle (Configuration conf)
specifier|public
name|Shuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|indexCache
operator|=
operator|new
name|IndexCache
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
name|DEFAULT_SHUFFLE_PORT
argument_list|)
expr_stmt|;
block|}
DECL|method|splitMaps (List<String> mapq)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|splitMaps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapq
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|mapq
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|mapq
control|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|ret
argument_list|,
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (ChannelHandlerContext ctx, MessageEvent evt)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|evt
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|!=
name|GET
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|q
init|=
operator|new
name|QueryStringDecoder
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
init|=
name|splitMaps
argument_list|(
name|q
operator|.
name|get
argument_list|(
literal|"map"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|reduceQ
init|=
name|q
operator|.
name|get
argument_list|(
literal|"reduce"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|jobQ
init|=
name|q
operator|.
name|get
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RECV: "
operator|+
name|request
operator|.
name|getUri
argument_list|()
operator|+
literal|"\n  mapId: "
operator|+
name|mapIds
operator|+
literal|"\n  reduceId: "
operator|+
name|reduceQ
operator|+
literal|"\n  jobId: "
operator|+
name|jobQ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapIds
operator|==
literal|null
operator|||
name|reduceQ
operator|==
literal|null
operator|||
name|jobQ
operator|==
literal|null
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Required param job, map and reduce"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reduceQ
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|jobQ
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Too many job/reduce parameters"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|reduceId
decl_stmt|;
name|String
name|jobId
decl_stmt|;
try|try
block|{
name|reduceId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reduceQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|jobId
operator|=
name|jobQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Bad reduce parameter"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Bad job parameter"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|reqUri
init|=
name|request
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|reqUri
condition|)
block|{
comment|// TODO? add upstream?
name|sendError
argument_list|(
name|ctx
argument_list|,
name|FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
try|try
block|{
name|verifyRequest
argument_list|(
name|jobId
argument_list|,
name|ctx
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
literal|""
argument_list|,
name|this
operator|.
name|port
argument_list|,
name|reqUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shuffle failure "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return;
block|}
name|Channel
name|ch
init|=
name|evt
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// TODO refactor the following into the pipeline
name|ChannelFuture
name|lastMap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|mapId
range|:
name|mapIds
control|)
block|{
try|try
block|{
name|lastMap
operator|=
name|sendMapOutput
argument_list|(
name|ctx
argument_list|,
name|ch
argument_list|,
name|userRsrc
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|jobId
argument_list|,
name|mapId
argument_list|,
name|reduceId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|lastMap
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|lastMap
operator|.
name|addListener
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|lastMap
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRequest (String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri)
specifier|private
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
name|SecretKey
name|tokenSecret
init|=
name|secretManager
operator|.
name|retrieveTokenSecret
argument_list|(
name|appid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tokenSecret
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Request for unknown token "
operator|+
name|appid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not find jobid"
argument_list|)
throw|;
block|}
comment|// string to encrypt
name|String
name|enc_str
init|=
name|SecureShuffleUtils
operator|.
name|buildMsgFrom
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
comment|// hash from the fetcher
name|String
name|urlHashStr
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlHashStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Missing header hash for "
operator|+
name|appid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fetcher cannot be authenticated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|urlHashStr
operator|.
name|length
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"verifying request. enc_str="
operator|+
name|enc_str
operator|+
literal|"; hash=..."
operator|+
name|urlHashStr
operator|.
name|substring
argument_list|(
name|len
operator|-
name|len
operator|/
literal|2
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify - throws exception
name|SecureShuffleUtils
operator|.
name|verifyReply
argument_list|(
name|urlHashStr
argument_list|,
name|enc_str
argument_list|,
name|tokenSecret
argument_list|)
expr_stmt|;
comment|// verification passed - encode the reply
name|String
name|reply
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|urlHashStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenSecret
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|,
name|reply
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|reply
operator|.
name|length
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetcher request verfied. enc_str="
operator|+
name|enc_str
operator|+
literal|";reply="
operator|+
name|reply
operator|.
name|substring
argument_list|(
name|len
operator|-
name|len
operator|/
literal|2
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendMapOutput (ChannelHandlerContext ctx, Channel ch, String user, String jobId, String mapId, int reduce)
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO replace w/ rsrc alloc
comment|// $x/$user/appcache/$appId/output/$mapId
comment|// TODO: Once Shuffle is out of NM, this can use MR APIs to convert between App and Job
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|ApplicationId
name|appID
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appID
operator|.
name|setClusterTimestamp
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|jobID
operator|.
name|getJtIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appID
operator|.
name|setId
argument_list|(
name|jobID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|base
init|=
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
literal|"/"
operator|+
name|user
operator|+
literal|"/"
operator|+
name|ContainerLocalizer
operator|.
name|APPCACHE
operator|+
literal|"/"
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appID
argument_list|)
operator|+
literal|"/output"
operator|+
literal|"/"
operator|+
name|mapId
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DEBUG0 "
operator|+
name|base
argument_list|)
expr_stmt|;
comment|// Index file
name|Path
name|indexFileName
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|base
operator|+
literal|"/file.out.index"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Map-output file
name|Path
name|mapOutputFileName
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|base
operator|+
literal|"/file.out"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DEBUG1 "
operator|+
name|base
operator|+
literal|" : "
operator|+
name|mapOutputFileName
operator|+
literal|" : "
operator|+
name|indexFileName
argument_list|)
expr_stmt|;
name|IndexRecord
name|info
init|=
name|indexCache
operator|.
name|getIndexInformation
argument_list|(
name|mapId
argument_list|,
name|reduce
argument_list|,
name|indexFileName
argument_list|,
name|user
argument_list|)
decl_stmt|;
specifier|final
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|mapId
argument_list|,
name|info
operator|.
name|partLength
argument_list|,
name|info
operator|.
name|rawLength
argument_list|,
name|reduce
argument_list|)
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|spillfile
init|=
operator|new
name|File
argument_list|(
name|mapOutputFileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|spill
decl_stmt|;
try|try
block|{
name|spill
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|spillfile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|spillfile
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|FileRegion
name|partition
init|=
operator|new
name|DefaultFileRegion
argument_list|(
name|spill
operator|.
name|getChannel
argument_list|()
argument_list|,
name|info
operator|.
name|startOffset
argument_list|,
name|info
operator|.
name|partLength
argument_list|)
decl_stmt|;
name|ChannelFuture
name|writeFuture
init|=
name|ch
operator|.
name|write
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|writeFuture
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
comment|// TODO error handling; distinguish IO/connection failures,
comment|//      attribute to appropriate spill output
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
name|partition
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|shuffleConnections
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|shuffleOutputBytes
operator|.
name|incr
argument_list|(
name|info
operator|.
name|partLength
argument_list|)
expr_stmt|;
comment|// optimistic
return|return
name|writeFuture
return|;
block|}
DECL|method|sendError (ChannelHandlerContext ctx, HttpResponseStatus status)
specifier|private
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|""
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|sendError (ChannelHandlerContext ctx, String message, HttpResponseStatus status)
specifier|private
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|CONTENT_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|message
argument_list|,
name|CharsetUtil
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the connection as soon as the error message is sent.
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, ExceptionEvent e)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|Channel
name|ch
init|=
name|e
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|TooLongFrameException
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error: "
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error "
operator|+
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

