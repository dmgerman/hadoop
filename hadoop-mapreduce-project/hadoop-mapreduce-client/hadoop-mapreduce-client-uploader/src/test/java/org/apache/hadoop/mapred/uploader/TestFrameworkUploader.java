begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.uploader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|uploader
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_comment
comment|/**  * Unit test class for FrameworkUploader.  */
end_comment

begin_class
DECL|class|TestFrameworkUploader
specifier|public
class|class
name|TestFrameworkUploader
block|{
DECL|field|testDir
specifier|private
specifier|static
name|String
name|testDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|String
name|testRootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|testDir
operator|=
name|testRootDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test requesting command line help.    * @throws IOException test failure    */
annotation|@
name|Test
DECL|method|testHelp ()
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-help"
block|}
decl_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected to print help"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected ignore run"
argument_list|,
literal|null
argument_list|,
name|uploader
operator|.
name|input
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected ignore run"
argument_list|,
literal|null
argument_list|,
name|uploader
operator|.
name|whitelist
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected ignore run"
argument_list|,
literal|null
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test invalid argument parsing.    * @throws IOException test failure    */
annotation|@
name|Test
DECL|method|testWrongArgument ()
specifier|public
name|void
name|testWrongArgument
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-unexpected"
block|}
decl_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected to print help"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test normal argument passing.    * @throws IOException test failure    */
annotation|@
name|Test
DECL|method|testArguments ()
specifier|public
name|void
name|testArguments
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
literal|"A"
block|,
literal|"-whitelist"
block|,
literal|"B"
block|,
literal|"-blacklist"
block|,
literal|"C"
block|,
literal|"-fs"
block|,
literal|"hdfs://C:8020"
block|,
literal|"-target"
block|,
literal|"D"
block|,
literal|"-initialReplication"
block|,
literal|"100"
block|,
literal|"-acceptableReplication"
block|,
literal|"120"
block|,
literal|"-finalReplication"
block|,
literal|"140"
block|,
literal|"-timeout"
block|,
literal|"10"
block|}
decl_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected to print help"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Input mismatch"
argument_list|,
literal|"A"
argument_list|,
name|uploader
operator|.
name|input
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Whitelist mismatch"
argument_list|,
literal|"B"
argument_list|,
name|uploader
operator|.
name|whitelist
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Blacklist mismatch"
argument_list|,
literal|"C"
argument_list|,
name|uploader
operator|.
name|blacklist
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Target mismatch"
argument_list|,
literal|"hdfs://C:8020/D"
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Initial replication mismatch"
argument_list|,
literal|100
argument_list|,
name|uploader
operator|.
name|initialReplication
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Acceptable replication mismatch"
argument_list|,
literal|120
argument_list|,
name|uploader
operator|.
name|acceptableReplication
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Final replication mismatch"
argument_list|,
literal|140
argument_list|,
name|uploader
operator|.
name|finalReplication
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Timeout mismatch"
argument_list|,
literal|10
argument_list|,
name|uploader
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the default ways how to specify filesystems.    */
annotation|@
name|Test
DECL|method|testNoFilesystem ()
specifier|public
name|void
name|testNoFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected to parse arguments"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected"
argument_list|,
literal|"file:////usr/lib/mr-framework.tar.gz#mr-framework"
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the default ways how to specify filesystems.    */
annotation|@
name|Test
DECL|method|testDefaultFilesystem ()
specifier|public
name|void
name|testDefaultFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://namenode:555"
argument_list|)
expr_stmt|;
name|uploader
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected to parse arguments"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected"
argument_list|,
literal|"hdfs://namenode:555/usr/lib/mr-framework.tar.gz#mr-framework"
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the explicit filesystem specification.    */
annotation|@
name|Test
DECL|method|testExplicitFilesystem ()
specifier|public
name|void
name|testExplicitFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|uploader
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-target"
block|,
literal|"hdfs://namenode:555/usr/lib/mr-framework.tar.gz#mr-framework"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected to parse arguments"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected"
argument_list|,
literal|"hdfs://namenode:555/usr/lib/mr-framework.tar.gz#mr-framework"
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the conflicting filesystem specification.    */
annotation|@
name|Test
DECL|method|testConflictingFilesystem ()
specifier|public
name|void
name|testConflictingFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://namenode:555"
argument_list|)
expr_stmt|;
name|uploader
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|uploader
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-target"
block|,
literal|"file:///usr/lib/mr-framework.tar.gz#mr-framework"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected to parse arguments"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected"
argument_list|,
literal|"file:///usr/lib/mr-framework.tar.gz#mr-framework"
argument_list|,
name|uploader
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether we can filter a class path properly.    * @throws IOException test failure    */
annotation|@
name|Test
DECL|method|testCollectPackages ()
specifier|public
name|void
name|testCollectPackages
parameter_list|()
throws|throws
name|IOException
throws|,
name|UploaderException
block|{
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
try|try
block|{
name|parent
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory creation failed"
argument_list|,
name|parent
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dirA
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirA
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dirB
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirB
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarA
init|=
operator|new
name|File
argument_list|(
name|dirA
argument_list|,
literal|"a.jar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jarA
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarB
init|=
operator|new
name|File
argument_list|(
name|dirA
argument_list|,
literal|"b.jar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jarB
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarC
init|=
operator|new
name|File
argument_list|(
name|dirA
argument_list|,
literal|"c.jar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jarC
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|txtD
init|=
operator|new
name|File
argument_list|(
name|dirA
argument_list|,
literal|"d.txt"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txtD
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarD
init|=
operator|new
name|File
argument_list|(
name|dirB
argument_list|,
literal|"d.jar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jarD
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|txtE
init|=
operator|new
name|File
argument_list|(
name|dirB
argument_list|,
literal|"e.txt"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txtE
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|uploader
operator|.
name|whitelist
operator|=
literal|".*a\\.jar,.*b\\.jar,.*d\\.jar"
expr_stmt|;
name|uploader
operator|.
name|blacklist
operator|=
literal|".*b\\.jar"
expr_stmt|;
name|uploader
operator|.
name|input
operator|=
name|dirA
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"*"
operator|+
name|File
operator|.
name|pathSeparatorChar
operator|+
name|dirB
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"*"
expr_stmt|;
name|uploader
operator|.
name|collectPackages
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Whitelist count error"
argument_list|,
literal|3
argument_list|,
name|uploader
operator|.
name|whitelistedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Blacklist count error"
argument_list|,
literal|1
argument_list|,
name|uploader
operator|.
name|blacklistedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File not collected"
argument_list|,
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|contains
argument_list|(
name|jarA
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File collected"
argument_list|,
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|contains
argument_list|(
name|jarB
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File not collected"
argument_list|,
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|contains
argument_list|(
name|jarD
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Too many whitelists"
argument_list|,
literal|2
argument_list|,
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test building a tarball from source jars.    */
annotation|@
name|Test
DECL|method|testBuildTarBall ()
specifier|public
name|void
name|testBuildTarBall
parameter_list|()
throws|throws
name|IOException
throws|,
name|UploaderException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|testFiles
init|=
block|{
literal|"upload.tar"
block|,
literal|"upload.tar.gz"
block|}
decl_stmt|;
for|for
control|(
name|String
name|testFile
range|:
name|testFiles
control|)
block|{
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
try|try
block|{
name|parent
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
name|prepareTree
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|File
name|gzipFile
init|=
operator|new
name|File
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|testFile
argument_list|)
decl_stmt|;
name|gzipFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|uploader
operator|.
name|target
operator|=
literal|"file:///"
operator|+
name|gzipFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|uploader
operator|.
name|beginUpload
argument_list|()
expr_stmt|;
name|uploader
operator|.
name|buildPackage
argument_list|()
expr_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|gzipFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|gzipFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".gz"
argument_list|)
condition|)
block|{
name|stream
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|TarArchiveInputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sizes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TarArchiveEntry
name|entry1
init|=
name|result
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
name|fileNames
operator|.
name|add
argument_list|(
name|entry1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|entry1
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|TarArchiveEntry
name|entry2
init|=
name|result
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
name|fileNames
operator|.
name|add
argument_list|(
name|entry2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|entry2
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File name error"
argument_list|,
name|fileNames
operator|.
name|contains
argument_list|(
literal|"a.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File size error"
argument_list|,
name|sizes
operator|.
name|contains
argument_list|(
operator|(
name|long
operator|)
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File name error"
argument_list|,
name|fileNames
operator|.
name|contains
argument_list|(
literal|"b.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File size error"
argument_list|,
name|sizes
operator|.
name|contains
argument_list|(
operator|(
name|long
operator|)
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test upload to HDFS.    */
annotation|@
name|Test
DECL|method|testUpload ()
specifier|public
name|void
name|testUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|UploaderException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|fileName
init|=
literal|"/upload.tar.gz"
decl_stmt|;
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
try|try
block|{
name|parent
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
name|prepareTree
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|uploader
operator|.
name|target
operator|=
literal|"file://"
operator|+
name|parent
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|fileName
expr_stmt|;
name|uploader
operator|.
name|buildPackage
argument_list|()
expr_stmt|;
try|try
init|(
name|TarArchiveInputStream
name|archiveInputStream
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|fileName
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sizes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TarArchiveEntry
name|entry1
init|=
name|archiveInputStream
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
name|fileNames
operator|.
name|add
argument_list|(
name|entry1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|entry1
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|TarArchiveEntry
name|entry2
init|=
name|archiveInputStream
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
name|fileNames
operator|.
name|add
argument_list|(
name|entry2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|entry2
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File name error"
argument_list|,
name|fileNames
operator|.
name|contains
argument_list|(
literal|"a.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File size error"
argument_list|,
name|sizes
operator|.
name|contains
argument_list|(
operator|(
name|long
operator|)
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File name error"
argument_list|,
name|fileNames
operator|.
name|contains
argument_list|(
literal|"b.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File size error"
argument_list|,
name|sizes
operator|.
name|contains
argument_list|(
operator|(
name|long
operator|)
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prepare a mock directory tree to compress and upload.    */
DECL|method|prepareTree (File parent)
specifier|private
name|FrameworkUploader
name|prepareTree
parameter_list|(
name|File
name|parent
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parent
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dirA
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirA
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarA
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"a.jar"
argument_list|)
decl_stmt|;
name|PrintStream
name|printStream
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarA
argument_list|)
argument_list|)
decl_stmt|;
name|printStream
operator|.
name|println
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|printStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|jarB
init|=
operator|new
name|File
argument_list|(
name|dirA
argument_list|,
literal|"b.jar"
argument_list|)
decl_stmt|;
name|printStream
operator|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarB
argument_list|)
argument_list|)
expr_stmt|;
name|printStream
operator|.
name|println
argument_list|(
literal|"Hello Galaxy!"
argument_list|)
expr_stmt|;
name|printStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|add
argument_list|(
name|jarA
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|uploader
operator|.
name|filteredInputFiles
operator|.
name|add
argument_list|(
name|jarB
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uploader
return|;
block|}
comment|/**    * Test regex pattern matching and environment variable replacement.    */
annotation|@
name|Test
DECL|method|testEnvironmentReplacement ()
specifier|public
name|void
name|testEnvironmentReplacement
parameter_list|()
throws|throws
name|UploaderException
block|{
name|String
name|input
init|=
literal|"C/$A/B,$B,D"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"C"
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|String
name|output
init|=
name|uploader
operator|.
name|expandEnvironmentVariables
argument_list|(
name|input
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Environment not expanded"
argument_list|,
literal|"C/X/B,Y,D"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test regex pattern matching and environment variable replacement.    */
annotation|@
name|Test
DECL|method|testRecursiveEnvironmentReplacement ()
specifier|public
name|void
name|testRecursiveEnvironmentReplacement
parameter_list|()
throws|throws
name|UploaderException
block|{
name|String
name|input
init|=
literal|"C/$A/B,$B,D"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
literal|"$C"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"C"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|String
name|output
init|=
name|uploader
operator|.
name|expandEnvironmentVariables
argument_list|(
name|input
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Environment not expanded"
argument_list|,
literal|"C/X/B,Y,D"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test native IO.    */
annotation|@
name|Test
DECL|method|testNativeIO ()
specifier|public
name|void
name|testNativeIO
parameter_list|()
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create a parent directory
name|parent
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parent
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a target file
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"a.txt"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|targetFile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|writeLines
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|uploader
operator|.
name|checkSymlink
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a symlink to the target
name|File
name|symlinkToTarget
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"symlinkToTarget.txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|symlinkToTarget
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Symlinks are not supported, so ignore the test
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|uploader
operator|.
name|checkSymlink
argument_list|(
name|symlinkToTarget
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a symlink to the target with /./ in the path
name|symlinkToTarget
operator|=
operator|new
name|File
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/./symlinkToTarget2.txt"
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|symlinkToTarget
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Symlinks are not supported, so ignore the test
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|uploader
operator|.
name|checkSymlink
argument_list|(
name|symlinkToTarget
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a symlink outside the current directory
name|File
name|symlinkOutside
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"symlinkToParent.txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|symlinkOutside
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Symlinks are not supported, so ignore the test
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|uploader
operator|.
name|checkSymlink
argument_list|(
name|symlinkOutside
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPermissionSettingsOnRestrictiveUmask ()
specifier|public
name|void
name|testPermissionSettingsOnRestrictiveUmask
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
name|parent
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory creation failed"
argument_list|,
name|parent
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|hdfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|namenodeDir
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|namenodeDir
argument_list|)
expr_stmt|;
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|namenodeDir
argument_list|)
expr_stmt|;
name|hdfsConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"027"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|File
name|file1
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"a.jar"
argument_list|)
decl_stmt|;
name|file1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|file2
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"b.jar"
argument_list|)
decl_stmt|;
name|file2
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|file3
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"c.jar"
argument_list|)
decl_stmt|;
name|file3
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
name|uploader
operator|.
name|whitelist
operator|=
literal|""
expr_stmt|;
name|uploader
operator|.
name|blacklist
operator|=
literal|""
expr_stmt|;
name|uploader
operator|.
name|input
operator|=
name|parent
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"*"
expr_stmt|;
name|String
name|hdfsUri
init|=
name|hdfsConf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
decl_stmt|;
name|String
name|targetPath
init|=
literal|"/test.tar.gz"
decl_stmt|;
name|uploader
operator|.
name|target
operator|=
name|hdfsUri
operator|+
name|targetPath
expr_stmt|;
name|uploader
operator|.
name|acceptableReplication
operator|=
literal|1
expr_stmt|;
name|uploader
operator|.
name|setConf
argument_list|(
name|hdfsConf
argument_list|)
expr_stmt|;
name|uploader
operator|.
name|collectPackages
argument_list|()
expr_stmt|;
name|uploader
operator|.
name|buildPackage
argument_list|()
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|)
argument_list|)
decl_stmt|;
name|FsPermission
name|perm
init|=
name|fileStatus
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Permissions"
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|0644
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

