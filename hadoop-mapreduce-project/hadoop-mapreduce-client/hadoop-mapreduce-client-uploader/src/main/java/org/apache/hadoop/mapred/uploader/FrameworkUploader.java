begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.uploader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|uploader
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NotLinkException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_comment
comment|/**  * Upload a MapReduce framework tarball to HDFS.  * Usage:  * sudo -u mapred mapred frameworkuploader -fs hdfs://`hostname`:8020 -target  * /tmp/upload.tar.gz#mr-framework */
end_comment

begin_class
DECL|class|FrameworkUploader
specifier|public
class|class
name|FrameworkUploader
implements|implements
name|Runnable
block|{
DECL|field|VAR_SUBBER
specifier|private
specifier|static
specifier|final
name|Pattern
name|VAR_SUBBER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Shell
operator|.
name|getEnvironmentVariableRegex
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FrameworkUploader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Minimal required permissions for the uploaded framework
DECL|field|FRAMEWORK_PERMISSION
specifier|private
specifier|static
specifier|final
name|FsPermission
name|FRAMEWORK_PERMISSION
init|=
operator|new
name|FsPermission
argument_list|(
literal|0644
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|input
name|String
name|input
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|whitelist
name|String
name|whitelist
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|blacklist
name|String
name|blacklist
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|target
name|String
name|target
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|targetPath
name|Path
name|targetPath
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|initialReplication
name|short
name|initialReplication
init|=
literal|3
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|finalReplication
name|short
name|finalReplication
init|=
literal|10
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|acceptableReplication
name|short
name|acceptableReplication
init|=
literal|9
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|timeout
name|int
name|timeout
init|=
literal|10
decl_stmt|;
DECL|field|ignoreSymlink
specifier|private
name|boolean
name|ignoreSymlink
init|=
literal|false
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|filteredInputFiles
name|Set
argument_list|<
name|String
argument_list|>
name|filteredInputFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|whitelistedFiles
name|List
argument_list|<
name|Pattern
argument_list|>
name|whitelistedFiles
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|blacklistedFiles
name|List
argument_list|<
name|Pattern
argument_list|>
name|blacklistedFiles
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|targetStream
specifier|private
name|OutputStream
name|targetStream
init|=
literal|null
decl_stmt|;
DECL|field|fsDataStream
specifier|private
name|FSDataOutputStream
name|fsDataStream
init|=
literal|null
decl_stmt|;
DECL|field|alias
specifier|private
name|String
name|alias
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|setConf (Configuration configuration)
name|void
name|setConf
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|printHelp (Options options)
specifier|private
name|void
name|printHelp
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"mapred frameworkuploader"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|collectPackages
argument_list|()
expr_stmt|;
name|buildPackage
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploaded "
operator|+
name|target
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Suggested mapreduce.application.framework.path "
operator|+
name|target
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Suggested mapreduce.application.classpath $PWD/"
operator|+
name|alias
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Suggested classpath $PWD/"
operator|+
name|alias
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UploaderException
decl||
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in execution "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|collectPackages ()
name|void
name|collectPackages
parameter_list|()
throws|throws
name|UploaderException
block|{
name|parseLists
argument_list|()
expr_stmt|;
name|String
index|[]
name|list
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|input
argument_list|,
name|File
operator|.
name|pathSeparatorChar
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|list
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Original source "
operator|+
name|item
argument_list|)
expr_stmt|;
name|String
name|expanded
init|=
name|expandEnvironmentVariables
argument_list|(
name|item
argument_list|,
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expanded source "
operator|+
name|expanded
argument_list|)
expr_stmt|;
if|if
condition|(
name|expanded
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|expanded
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expanded
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|jar
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|jar
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addJar
argument_list|(
name|jar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignored "
operator|+
name|jar
operator|+
literal|" because it is a directory"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not list directory "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignored "
operator|+
name|expanded
operator|+
literal|". It is not a directory"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expanded
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|expanded
argument_list|)
decl_stmt|;
name|addJar
argument_list|(
name|jarFile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|expanded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignored "
operator|+
name|expanded
operator|+
literal|" only jars are supported"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|beginUpload ()
name|void
name|beginUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|UploaderException
block|{
if|if
condition|(
name|targetStream
operator|==
literal|null
condition|)
block|{
name|validateTargetPath
argument_list|()
expr_stmt|;
name|int
name|lastIndex
init|=
name|target
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
name|targetPath
operator|=
operator|new
name|Path
argument_list|(
name|target
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndex
operator|==
operator|-
literal|1
condition|?
name|target
operator|.
name|length
argument_list|()
else|:
name|lastIndex
argument_list|)
argument_list|)
expr_stmt|;
name|alias
operator|=
name|lastIndex
operator|!=
operator|-
literal|1
condition|?
name|target
operator|.
name|substring
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
else|:
name|targetPath
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Target "
operator|+
name|targetPath
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSystem
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|targetStream
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|fileSystem
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Set replication to "
operator|+
name|initialReplication
operator|+
literal|" for path: "
operator|+
name|targetPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling Erasure Coding for path: "
operator|+
name|targetPath
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSystem
decl_stmt|;
name|DistributedFileSystem
operator|.
name|HdfsDataOutputStreamBuilder
name|builder
init|=
name|dfs
operator|.
name|createFile
argument_list|(
name|targetPath
argument_list|)
operator|.
name|overwrite
argument_list|(
literal|true
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getReplicationPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialReplication
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|replication
argument_list|(
name|initialReplication
argument_list|)
expr_stmt|;
block|}
name|targetStream
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set replication to "
operator|+
name|initialReplication
operator|+
literal|" for path: "
operator|+
name|targetPath
operator|+
literal|" on a non-distributed fileystem "
operator|+
name|fileSystem
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetStream
operator|==
literal|null
condition|)
block|{
name|targetStream
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|targetPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FRAMEWORK_PERMISSION
operator|.
name|equals
argument_list|(
name|FRAMEWORK_PERMISSION
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Modifying permissions to "
operator|+
name|FRAMEWORK_PERMISSION
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|targetPath
argument_list|,
name|FRAMEWORK_PERMISSION
argument_list|)
expr_stmt|;
block|}
name|fsDataStream
operator|=
operator|(
name|FSDataOutputStream
operator|)
name|targetStream
expr_stmt|;
if|if
condition|(
name|targetPath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"gz"
argument_list|)
operator|||
name|targetPath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"tgz"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating GZip"
argument_list|)
expr_stmt|;
name|targetStream
operator|=
operator|new
name|GZIPOutputStream
argument_list|(
name|targetStream
argument_list|)
expr_stmt|;
block|}
name|Path
name|current
init|=
name|targetPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Walk the path backwards to verify that the uploaded
comment|// framework is accessible for all users
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FileStatus
name|fstat
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|FsPermission
name|perm
init|=
name|fstat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
comment|// Note: READ is not necessary to enter the directory.
comment|// We need to check only the EXECUTE flag
name|boolean
name|userCanEnter
init|=
name|perm
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
decl_stmt|;
name|boolean
name|groupCanEnter
init|=
name|perm
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
decl_stmt|;
name|boolean
name|othersCanEnter
init|=
name|perm
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userCanEnter
operator|||
operator|!
name|groupCanEnter
operator|||
operator|!
name|othersCanEnter
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Path "
operator|+
name|current
operator|+
literal|" is not accessible"
operator|+
literal|" for all users. Current permissions are: "
operator|+
name|perm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Please set EXECUTE permissions on this directory"
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|current
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Path "
operator|+
name|current
operator|+
literal|" is not accessible,"
operator|+
literal|" cannot retrieve permissions"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Please set EXECUTE permissions on this directory"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stack trace"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|method|getSmallestReplicatedBlockCount ()
specifier|private
name|long
name|getSmallestReplicatedBlockCount
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|blockCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Start with 0s for each offset
for|for
control|(
name|long
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|length
condition|;
name|offset
operator|+=
name|status
operator|.
name|getBlockSize
argument_list|()
control|)
block|{
name|blockCount
operator|.
name|put
argument_list|(
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Count blocks
name|BlockLocation
index|[]
name|locations
init|=
name|fileSystem
operator|.
name|getFileBlockLocations
argument_list|(
name|targetPath
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|location
range|:
name|locations
control|)
block|{
specifier|final
name|int
name|replicas
init|=
name|location
operator|.
name|getHosts
argument_list|()
operator|.
name|length
decl_stmt|;
name|blockCount
operator|.
name|compute
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|,
operator|(
name|key
operator|,
name|value
operator|)
operator|->
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|+
name|replicas
argument_list|)
expr_stmt|;
block|}
comment|// Print out the results
for|for
control|(
name|long
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|length
condition|;
name|offset
operator|+=
name|status
operator|.
name|getBlockSize
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Replication counts offset:%d blocks:%d"
argument_list|,
name|offset
argument_list|,
name|blockCount
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|min
argument_list|(
name|blockCount
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|endUpload ()
specifier|private
name|void
name|endUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FileSystem
name|fileSystem
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|fileSystem
operator|.
name|setReplication
argument_list|(
name|targetPath
argument_list|,
name|finalReplication
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set replication to "
operator|+
name|finalReplication
operator|+
literal|" for path: "
operator|+
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeout is set to 0. Skipping replication check."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|endTime
init|=
name|startTime
decl_stmt|;
name|long
name|currentReplication
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|endTime
operator|-
name|startTime
operator|<
name|timeout
operator|*
literal|1000
operator|&&
name|currentReplication
operator|<
name|acceptableReplication
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|endTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|currentReplication
operator|=
name|getSmallestReplicatedBlockCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|-
name|startTime
operator|>=
name|timeout
operator|*
literal|1000
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Timed out after %d seconds while waiting for acceptable"
operator|+
literal|" replication of %d (current replication is %d)"
argument_list|,
name|timeout
argument_list|,
name|acceptableReplication
argument_list|,
name|currentReplication
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot set replication to "
operator|+
name|finalReplication
operator|+
literal|" for path: "
operator|+
name|targetPath
operator|+
literal|" on a non-distributed fileystem "
operator|+
name|fileSystem
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|buildPackage ()
name|void
name|buildPackage
parameter_list|()
throws|throws
name|IOException
throws|,
name|UploaderException
throws|,
name|InterruptedException
block|{
name|beginUpload
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compressing tarball"
argument_list|)
expr_stmt|;
try|try
init|(
name|TarArchiveOutputStream
name|out
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
name|targetStream
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|fullPath
range|:
name|filteredInputFiles
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|fullPath
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
try|try
init|(
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|ArchiveEntry
name|entry
init|=
name|out
operator|.
name|createArchiveEntry
argument_list|(
name|file
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|putArchiveEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|out
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|out
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Necessary to see proper replication counts in endUpload()
name|fsDataStream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|endUpload
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|targetStream
operator|!=
literal|null
condition|)
block|{
name|targetStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseLists ()
specifier|private
name|void
name|parseLists
parameter_list|()
throws|throws
name|UploaderException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|System
operator|.
name|getenv
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|item
range|:
name|env
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Environment "
operator|+
name|item
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|whiteListItems
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|whitelist
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|whiteListItems
control|)
block|{
name|String
name|expandedPattern
init|=
name|expandEnvironmentVariables
argument_list|(
name|pattern
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|Pattern
name|compiledPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|expandedPattern
operator|+
literal|"$"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Whitelisted "
operator|+
name|compiledPattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|whitelistedFiles
operator|.
name|add
argument_list|(
name|compiledPattern
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|blacklistItems
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|blacklist
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|blacklistItems
control|)
block|{
name|String
name|expandedPattern
init|=
name|expandEnvironmentVariables
argument_list|(
name|pattern
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|Pattern
name|compiledPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|expandedPattern
operator|+
literal|"$"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blacklisted "
operator|+
name|compiledPattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|blacklistedFiles
operator|.
name|add
argument_list|(
name|compiledPattern
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|expandEnvironmentVariables (String innerInput, Map<String, String> env)
name|String
name|expandEnvironmentVariables
parameter_list|(
name|String
name|innerInput
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
throws|throws
name|UploaderException
block|{
name|boolean
name|found
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
name|Matcher
name|matcher
init|=
name|VAR_SUBBER
operator|.
name|matcher
argument_list|(
name|innerInput
argument_list|)
decl_stmt|;
name|StringBuffer
name|stringBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|String
name|var
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// replace $env with the child's env constructed by tt's
name|String
name|replace
init|=
name|env
operator|.
name|get
argument_list|(
name|var
argument_list|)
decl_stmt|;
comment|// the env key is not present anywhere .. simply set it
if|if
condition|(
name|replace
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UploaderException
argument_list|(
literal|"Environment variable does not exist "
operator|+
name|var
argument_list|)
throw|;
block|}
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|stringBuffer
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|replace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|stringBuffer
argument_list|)
expr_stmt|;
name|innerInput
operator|=
name|stringBuffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|found
condition|)
do|;
return|return
name|innerInput
return|;
block|}
DECL|method|addJar (File jar)
specifier|private
name|void
name|addJar
parameter_list|(
name|File
name|jar
parameter_list|)
throws|throws
name|UploaderException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|jar
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignored non-jar "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pattern
name|pattern
range|:
name|whitelistedFiles
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Whitelisted "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|excluded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|blacklistedFiles
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Blacklisted "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|excluded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ignoreSymlink
operator|&&
operator|!
name|excluded
condition|)
block|{
name|excluded
operator|=
name|checkSymlink
argument_list|(
name|jar
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|&&
operator|!
name|excluded
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Whitelisted "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filteredInputFiles
operator|.
name|add
argument_list|(
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UploaderException
argument_list|(
literal|"Duplicate jar"
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignored "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" because it is missing "
operator|+
literal|"from the whitelist"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|excluded
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignored "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" because it is on "
operator|+
literal|"the the blacklist"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the file is a symlink to the same directory.    * @param jar The file to check    * @return true, to ignore the directory    */
annotation|@
name|VisibleForTesting
DECL|method|checkSymlink (File jar)
name|boolean
name|checkSymlink
parameter_list|(
name|File
name|jar
parameter_list|)
block|{
if|if
condition|(
name|Files
operator|.
name|isSymbolicLink
argument_list|(
name|jar
operator|.
name|toPath
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|link
init|=
name|Files
operator|.
name|readSymbolicLink
argument_list|(
name|jar
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|jarPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|linkString
init|=
name|link
operator|.
name|toString
argument_list|()
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|jarParent
init|=
name|jarPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|linkPath
init|=
name|jarParent
operator|==
literal|null
condition|?
literal|null
else|:
name|jarParent
operator|.
name|resolve
argument_list|(
name|linkString
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|linkPathParent
init|=
name|linkPath
operator|==
literal|null
condition|?
literal|null
else|:
name|linkPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|normalizedLinkPath
init|=
name|linkPathParent
operator|==
literal|null
condition|?
literal|null
else|:
name|linkPathParent
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|normalizedLinkPath
operator|!=
literal|null
operator|&&
name|jarParent
operator|.
name|normalize
argument_list|()
operator|.
name|equals
argument_list|(
name|normalizedLinkPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring same directory link %s to %s"
argument_list|,
name|jarPath
operator|.
name|toString
argument_list|()
argument_list|,
name|link
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NotLinkException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not a link"
argument_list|,
name|jar
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot read symbolic link on"
argument_list|,
name|jar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|validateTargetPath ()
specifier|private
name|void
name|validateTargetPath
parameter_list|()
throws|throws
name|UploaderException
block|{
if|if
condition|(
operator|!
name|target
operator|.
name|startsWith
argument_list|(
literal|"hdfs:/"
argument_list|)
operator|&&
operator|!
name|target
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UploaderException
argument_list|(
literal|"Target path is not hdfs or local "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|parseArguments (String[] args)
name|boolean
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|create
argument_list|(
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|create
argument_list|(
literal|"help"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Input class path. Defaults to the default classpath."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"input"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Regex specifying the full path of jars to include in the"
operator|+
literal|" framework tarball. Default is a hardcoded set of jars"
operator|+
literal|" considered necessary to include"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"whitelist"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Regex specifying the full path of jars to exclude in the"
operator|+
literal|" framework tarball. Default is a hardcoded set of jars"
operator|+
literal|" considered unnecessary to include"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"blacklist"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Target file system to upload to."
operator|+
literal|" Example: hdfs://foo.com:8020"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"fs"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Target file to upload to with a reference name."
operator|+
literal|" Example: /usr/mr-framework.tar.gz#mr-framework"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Desired initial replication count. Default 3."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"initialReplication"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Desired final replication count. Default 10."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"finalReplication"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Desired acceptable replication count. Default 9."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"acceptableReplication"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Desired timeout for the acceptable"
operator|+
literal|" replication in seconds. Default 10"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Ignore symlinks into the same directory"
argument_list|)
operator|.
name|create
argument_list|(
literal|"nosymlink"
argument_list|)
argument_list|)
expr_stmt|;
name|GenericOptionsParser
name|parser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
operator|||
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|printHelp
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|input
operator|=
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"input"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
name|whitelist
operator|=
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"whitelist"
argument_list|,
name|DefaultJars
operator|.
name|DEFAULT_MR_JARS
argument_list|)
expr_stmt|;
name|blacklist
operator|=
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"blacklist"
argument_list|,
name|DefaultJars
operator|.
name|DEFAULT_EXCLUDED_MR_JARS
argument_list|)
expr_stmt|;
name|initialReplication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"initialReplication"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|finalReplication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"finalReplication"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|acceptableReplication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"acceptableReplication"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"timeout"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"nosymlink"
argument_list|)
condition|)
block|{
name|ignoreSymlink
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|fs
init|=
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"fs"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|parser
operator|.
name|getCommandLine
argument_list|()
operator|.
name|getOptionValue
argument_list|(
literal|"target"
argument_list|,
literal|"/usr/lib/mr-framework.tar.gz#mr-framework"
argument_list|)
decl_stmt|;
name|boolean
name|isFullPath
init|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
operator|||
name|path
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
operator|&&
operator|!
name|isFullPath
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No filesystem specified in either fs or target."
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Target file system not specified. Using default %s"
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Target directory not specified"
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|StringBuilder
name|absolutePath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isFullPath
condition|)
block|{
name|absolutePath
operator|.
name|append
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|absolutePath
operator|.
name|append
argument_list|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|absolutePath
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|target
operator|=
name|absolutePath
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|getRemainingArgs
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected parameters"
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Tool entry point.    * @param args arguments    * @throws IOException thrown on configuration errors    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|FrameworkUploader
name|uploader
init|=
operator|new
name|FrameworkUploader
argument_list|()
decl_stmt|;
if|if
condition|(
name|uploader
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|uploader
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

