begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.testutil
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VIntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VLongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|BytesUtil
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|BytesFactory
specifier|public
class|class
name|BytesFactory
block|{
DECL|field|r
specifier|public
specifier|static
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|updateObject (Writable obj, byte[] seed)
specifier|public
specifier|static
name|void
name|updateObject
parameter_list|(
name|Writable
name|obj
parameter_list|,
name|byte
index|[]
name|seed
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|IntWritable
condition|)
block|{
operator|(
operator|(
name|IntWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|Ints
operator|.
name|fromByteArray
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|FloatWritable
condition|)
block|{
operator|(
operator|(
name|FloatWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|DoubleWritable
condition|)
block|{
operator|(
operator|(
name|DoubleWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|LongWritable
condition|)
block|{
operator|(
operator|(
name|LongWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|Longs
operator|.
name|fromByteArray
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|VIntWritable
condition|)
block|{
operator|(
operator|(
name|VIntWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|Ints
operator|.
name|fromByteArray
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|VLongWritable
condition|)
block|{
operator|(
operator|(
name|VLongWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|Longs
operator|.
name|fromByteArray
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BooleanWritable
condition|)
block|{
operator|(
operator|(
name|BooleanWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|seed
index|[
literal|0
index|]
operator|%
literal|2
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Text
condition|)
block|{
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|BytesUtil
operator|.
name|toStringBinary
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ByteWritable
condition|)
block|{
operator|(
operator|(
name|ByteWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|seed
operator|.
name|length
operator|>
literal|0
condition|?
name|seed
index|[
literal|0
index|]
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BytesWritable
condition|)
block|{
operator|(
operator|(
name|BytesWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|seed
argument_list|,
literal|0
argument_list|,
name|seed
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|UTF8
condition|)
block|{
operator|(
operator|(
name|UTF8
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|BytesUtil
operator|.
name|toStringBinary
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|MockValueClass
condition|)
block|{
operator|(
operator|(
name|MockValueClass
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown writable: "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|newObject (byte[] seed, String className)
specifier|public
specifier|static
name|Writable
name|newObject
parameter_list|(
name|byte
index|[]
name|seed
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|Writable
name|ret
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Writable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|Writable
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|seed
operator|!=
literal|null
condition|)
block|{
name|updateObject
argument_list|(
name|ret
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|fromBytes (byte[] bytes)
specifier|public
specifier|static
parameter_list|<
name|VTYPE
parameter_list|>
name|byte
index|[]
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
DECL|method|toBytes (VTYPE obj)
specifier|public
specifier|static
parameter_list|<
name|VTYPE
parameter_list|>
name|byte
index|[]
name|toBytes
parameter_list|(
name|VTYPE
name|obj
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|IntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Ints
operator|.
name|toByteArray
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|FloatWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BytesUtil
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|DoubleWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BytesUtil
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|LongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Longs
operator|.
name|toByteArray
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|VIntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Ints
operator|.
name|toByteArray
argument_list|(
operator|(
operator|(
name|VIntWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|VLongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Longs
operator|.
name|toByteArray
argument_list|(
operator|(
operator|(
name|VLongWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|BooleanWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BytesUtil
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|Text
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|copyBytes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|ByteWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Ints
operator|.
name|toByteArray
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|ByteWritable
operator|)
name|obj
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|BytesWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO: copyBytes instead?
return|return
operator|(
operator|(
name|BytesWritable
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

