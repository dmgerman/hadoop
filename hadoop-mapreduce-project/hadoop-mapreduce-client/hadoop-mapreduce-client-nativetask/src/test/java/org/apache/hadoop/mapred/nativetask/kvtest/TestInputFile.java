begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.kvtest
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|kvtest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VIntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VLongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|BytesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|ScenarioConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestInputFile
specifier|public
class|class
name|TestInputFile
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestInputFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|KVSizeScope
specifier|public
specifier|static
class|class
name|KVSizeScope
block|{
DECL|field|DefaultMinNum
specifier|private
specifier|static
specifier|final
name|int
name|DefaultMinNum
init|=
literal|1
decl_stmt|;
DECL|field|DefaultMaxNum
specifier|private
specifier|static
specifier|final
name|int
name|DefaultMaxNum
init|=
literal|64
decl_stmt|;
DECL|field|minBytesNum
specifier|public
name|int
name|minBytesNum
decl_stmt|;
DECL|field|maxBytesNum
specifier|public
name|int
name|maxBytesNum
decl_stmt|;
DECL|method|KVSizeScope ()
specifier|public
name|KVSizeScope
parameter_list|()
block|{
name|this
operator|.
name|minBytesNum
operator|=
name|DefaultMinNum
expr_stmt|;
name|this
operator|.
name|maxBytesNum
operator|=
name|DefaultMaxNum
expr_stmt|;
block|}
DECL|method|KVSizeScope (int min, int max)
specifier|public
name|KVSizeScope
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|minBytesNum
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|maxBytesNum
operator|=
name|max
expr_stmt|;
block|}
block|}
DECL|field|map
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|KVSizeScope
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|KVSizeScope
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|databuf
specifier|private
name|byte
index|[]
name|databuf
init|=
literal|null
decl_stmt|;
DECL|field|keyClsName
DECL|field|valueClsName
specifier|private
specifier|final
name|String
name|keyClsName
decl_stmt|,
name|valueClsName
decl_stmt|;
DECL|field|filesize
specifier|private
name|int
name|filesize
init|=
literal|0
decl_stmt|;
DECL|field|keyMaxBytesNum
DECL|field|keyMinBytesNum
specifier|private
name|int
name|keyMaxBytesNum
decl_stmt|,
name|keyMinBytesNum
decl_stmt|;
DECL|field|valueMaxBytesNum
DECL|field|valueMinBytesNum
specifier|private
name|int
name|valueMaxBytesNum
decl_stmt|,
name|valueMinBytesNum
decl_stmt|;
DECL|field|writer
specifier|private
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
DECL|field|r
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|DATABUFSIZE
specifier|public
specifier|static
specifier|final
name|int
name|DATABUFSIZE
init|=
literal|1
operator|<<
literal|22
decl_stmt|;
comment|// 4M
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|KEY
DECL|enumConstant|VALUE
name|KEY
block|,
name|VALUE
block|}
empty_stmt|;
static|static
block|{
name|map
operator|.
name|put
argument_list|(
name|BooleanWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DoubleWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FloatWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|VLongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ByteWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|VIntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|KVSizeScope
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestInputFile (int filesize, String keytype, String valuetype, Configuration conf)
specifier|public
name|TestInputFile
parameter_list|(
name|int
name|filesize
parameter_list|,
name|String
name|keytype
parameter_list|,
name|String
name|valuetype
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|filesize
operator|=
name|filesize
expr_stmt|;
name|this
operator|.
name|databuf
operator|=
operator|new
name|byte
index|[
name|DATABUFSIZE
index|]
expr_stmt|;
name|this
operator|.
name|keyClsName
operator|=
name|keytype
expr_stmt|;
name|this
operator|.
name|valueClsName
operator|=
name|valuetype
expr_stmt|;
specifier|final
name|int
name|defaultMinBytes
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVSIZE_MIN
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|defaultMaxBytes
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVSIZE_MAX
argument_list|,
literal|64
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|keytype
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|keyMinBytesNum
operator|=
name|map
operator|.
name|get
argument_list|(
name|keytype
argument_list|)
operator|.
name|minBytesNum
expr_stmt|;
name|keyMaxBytesNum
operator|=
name|map
operator|.
name|get
argument_list|(
name|keytype
argument_list|)
operator|.
name|maxBytesNum
expr_stmt|;
block|}
else|else
block|{
name|keyMinBytesNum
operator|=
name|defaultMinBytes
expr_stmt|;
name|keyMaxBytesNum
operator|=
name|defaultMaxBytes
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|valuetype
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|valueMinBytesNum
operator|=
name|map
operator|.
name|get
argument_list|(
name|valuetype
argument_list|)
operator|.
name|minBytesNum
expr_stmt|;
name|valueMaxBytesNum
operator|=
name|map
operator|.
name|get
argument_list|(
name|valuetype
argument_list|)
operator|.
name|maxBytesNum
expr_stmt|;
block|}
else|else
block|{
name|valueMinBytesNum
operator|=
name|defaultMinBytes
expr_stmt|;
name|valueMaxBytesNum
operator|=
name|defaultMaxBytes
expr_stmt|;
block|}
block|}
DECL|method|createSequenceTestFile (String filepath)
specifier|public
name|void
name|createSequenceTestFile
parameter_list|(
name|String
name|filepath
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|FULL_BYTE_SPACE
init|=
literal|256
decl_stmt|;
name|createSequenceTestFile
argument_list|(
name|filepath
argument_list|,
name|FULL_BYTE_SPACE
argument_list|)
expr_stmt|;
block|}
DECL|method|createSequenceTestFile (String filepath, int base)
specifier|public
name|void
name|createSequenceTestFile
parameter_list|(
name|String
name|filepath
parameter_list|,
name|int
name|base
parameter_list|)
throws|throws
name|Exception
block|{
name|createSequenceTestFile
argument_list|(
name|filepath
argument_list|,
name|base
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|createSequenceTestFile (String filepath, int base, byte start)
specifier|public
name|void
name|createSequenceTestFile
parameter_list|(
name|String
name|filepath
parameter_list|,
name|int
name|base
parameter_list|,
name|byte
name|start
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating file "
operator|+
name|filepath
operator|+
literal|"("
operator|+
name|filesize
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|keyClsName
operator|+
literal|" "
operator|+
name|valueClsName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|tmpkeycls
decl_stmt|,
name|tmpvaluecls
decl_stmt|;
try|try
block|{
name|tmpkeycls
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|keyClsName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"key class not found: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|tmpvaluecls
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|valueClsName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"key class not found: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|Path
name|outputfilepath
init|=
operator|new
name|Path
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
specifier|final
name|ScenarioConfiguration
name|conf
init|=
operator|new
name|ScenarioConfiguration
argument_list|()
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|outputfilepath
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|tmpkeycls
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|tmpvaluecls
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|int
name|tmpfilesize
init|=
name|this
operator|.
name|filesize
decl_stmt|;
while|while
condition|(
name|tmpfilesize
operator|>
name|DATABUFSIZE
condition|)
block|{
name|nextRandomBytes
argument_list|(
name|databuf
argument_list|,
name|base
argument_list|,
name|start
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|flushBuf
argument_list|(
name|DATABUFSIZE
argument_list|)
decl_stmt|;
name|tmpfilesize
operator|-=
name|size
expr_stmt|;
block|}
name|nextRandomBytes
argument_list|(
name|databuf
argument_list|,
name|base
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|flushBuf
argument_list|(
name|tmpfilesize
argument_list|)
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"no writer to create sequenceTestFile!"
argument_list|)
throw|;
block|}
block|}
DECL|method|nextRandomBytes (byte[] buf, int base)
specifier|private
name|void
name|nextRandomBytes
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|base
parameter_list|)
block|{
name|nextRandomBytes
argument_list|(
name|buf
argument_list|,
name|base
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|nextRandomBytes (byte[] buf, int base, byte start)
specifier|private
name|void
name|nextRandomBytes
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|base
parameter_list|,
name|byte
name|start
parameter_list|)
block|{
name|r
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|buf
index|[
name|i
index|]
operator|&
literal|0xFF
operator|)
operator|%
name|base
operator|+
name|start
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flushBuf (int buflen)
specifier|private
name|int
name|flushBuf
parameter_list|(
name|int
name|buflen
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|keybytesnum
init|=
literal|0
decl_stmt|;
name|int
name|valuebytesnum
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|Writable
name|keyWritable
init|=
name|BytesFactory
operator|.
name|newObject
argument_list|(
literal|null
argument_list|,
name|keyClsName
argument_list|)
decl_stmt|;
name|Writable
name|valWritable
init|=
name|BytesFactory
operator|.
name|newObject
argument_list|(
literal|null
argument_list|,
name|valueClsName
argument_list|)
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|buflen
condition|)
block|{
specifier|final
name|int
name|remains
init|=
name|buflen
operator|-
name|offset
decl_stmt|;
name|keybytesnum
operator|=
name|keyMaxBytesNum
expr_stmt|;
if|if
condition|(
name|keyMaxBytesNum
operator|!=
name|keyMinBytesNum
condition|)
block|{
name|keybytesnum
operator|=
name|keyMinBytesNum
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|keyMaxBytesNum
operator|-
name|keyMinBytesNum
argument_list|)
expr_stmt|;
block|}
name|valuebytesnum
operator|=
name|valueMaxBytesNum
expr_stmt|;
if|if
condition|(
name|valueMaxBytesNum
operator|!=
name|valueMinBytesNum
condition|)
block|{
name|valuebytesnum
operator|=
name|valueMinBytesNum
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|valueMaxBytesNum
operator|-
name|valueMinBytesNum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keybytesnum
operator|+
name|valuebytesnum
operator|>
name|remains
condition|)
block|{
break|break;
block|}
specifier|final
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
name|keybytesnum
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|valuebytesnum
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|databuf
argument_list|,
name|offset
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
name|keybytesnum
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|keybytesnum
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|databuf
argument_list|,
name|offset
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|valuebytesnum
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|valuebytesnum
expr_stmt|;
name|BytesFactory
operator|.
name|updateObject
argument_list|(
name|keyWritable
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|BytesFactory
operator|.
name|updateObject
argument_list|(
name|valWritable
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
name|keyWritable
argument_list|,
name|valWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"sequence file create failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|offset
return|;
block|}
block|}
end_class

end_unit

