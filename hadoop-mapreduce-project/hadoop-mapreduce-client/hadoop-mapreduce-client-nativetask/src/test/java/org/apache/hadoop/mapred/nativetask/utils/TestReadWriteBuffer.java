begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|ReadWriteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestReadWriteBuffer
specifier|public
class|class
name|TestReadWriteBuffer
extends|extends
name|TestCase
block|{
DECL|field|bytes
specifier|private
specifier|static
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'9'
block|}
decl_stmt|;
DECL|method|testReadWriteBuffer ()
specifier|public
name|void
name|testReadWriteBuffer
parameter_list|()
block|{
specifier|final
name|ReadWriteBuffer
name|buffer
init|=
operator|new
name|ReadWriteBuffer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|buffer
operator|.
name|getBuff
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|getWritePoint
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|getReadPoint
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeString
argument_list|(
literal|"goodboy"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeLong
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeLong
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|getWritePoint
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|getReadPoint
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buffer
operator|.
name|getBuff
argument_list|()
operator|.
name|length
operator|>=
literal|41
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|readInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|readString
argument_list|()
argument_list|,
literal|"goodboy"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|readLong
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|read
init|=
name|buffer
operator|.
name|readBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|read
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100L
argument_list|,
name|buffer
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|41
argument_list|,
name|buffer
operator|.
name|getReadPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

