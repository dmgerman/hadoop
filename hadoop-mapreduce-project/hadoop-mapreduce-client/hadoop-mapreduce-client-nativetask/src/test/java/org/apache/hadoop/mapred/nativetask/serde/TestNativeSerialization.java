begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.serde
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|INativeComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestNativeSerialization
specifier|public
class|class
name|TestNativeSerialization
block|{
annotation|@
name|Test
DECL|method|testRegisterAndGet ()
specifier|public
name|void
name|testRegisterAndGet
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|NativeSerialization
name|serialization
init|=
name|NativeSerialization
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|serialization
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serialization
operator|.
name|register
argument_list|(
name|WritableKey
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ComparableKeySerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|INativeSerializer
name|serializer
init|=
name|serialization
operator|.
name|getSerializer
argument_list|(
name|WritableKey
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ComparableKeySerializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|serializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|=
name|serialization
operator|.
name|getSerializer
argument_list|(
name|WritableValue
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DefaultSerializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|serializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|ioExceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|serializer
operator|=
name|serialization
operator|.
name|getSerializer
argument_list|(
name|NonWritableValue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|ioExceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioExceptionThrown
argument_list|)
expr_stmt|;
block|}
DECL|class|WritableKey
specifier|public
specifier|static
class|class
name|WritableKey
implements|implements
name|Writable
block|{
DECL|field|value
specifier|private
name|int
name|value
decl_stmt|;
DECL|method|WritableKey (int a)
specifier|public
name|WritableKey
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|a
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (int v)
specifier|public
name|void
name|setValue
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|v
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|WritableValue
specifier|public
specifier|static
class|class
name|WritableValue
implements|implements
name|Writable
block|{
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|NonWritableValue
specifier|public
specifier|static
class|class
name|NonWritableValue
block|{   }
DECL|class|ComparableKeySerializer
specifier|public
specifier|static
class|class
name|ComparableKeySerializer
implements|implements
name|INativeComparable
implements|,
name|INativeSerializer
argument_list|<
name|WritableKey
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getLength (WritableKey w)
specifier|public
name|int
name|getLength
parameter_list|(
name|WritableKey
name|w
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|w
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|serialize (WritableKey w, DataOutput out)
specifier|public
name|void
name|serialize
parameter_list|(
name|WritableKey
name|w
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|w
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deserialize (DataInput in, int length, WritableKey w)
specifier|public
name|void
name|deserialize
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|length
parameter_list|,
name|WritableKey
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|w
operator|.
name|setValue
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

