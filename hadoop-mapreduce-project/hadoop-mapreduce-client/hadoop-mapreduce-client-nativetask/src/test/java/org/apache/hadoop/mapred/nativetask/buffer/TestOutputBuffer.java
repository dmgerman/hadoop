begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestOutputBuffer
specifier|public
class|class
name|TestOutputBuffer
block|{
annotation|@
name|Test
DECL|method|testOutputBuffer ()
specifier|public
name|void
name|testOutputBuffer
parameter_list|()
block|{
specifier|final
name|int
name|size
init|=
literal|100
decl_stmt|;
specifier|final
name|OutputBuffer
name|output1
init|=
operator|new
name|OutputBuffer
argument_list|(
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output1
operator|.
name|getType
argument_list|()
argument_list|,
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output1
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output1
operator|.
name|limit
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|final
name|OutputBuffer
name|output2
init|=
operator|new
name|OutputBuffer
argument_list|(
name|BufferType
operator|.
name|HEAP_BUFFER
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output2
operator|.
name|getType
argument_list|()
argument_list|,
name|BufferType
operator|.
name|HEAP_BUFFER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output2
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output2
operator|.
name|limit
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|final
name|OutputBuffer
name|output3
init|=
operator|new
name|OutputBuffer
argument_list|(
operator|new
name|byte
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output3
operator|.
name|getType
argument_list|()
argument_list|,
name|BufferType
operator|.
name|HEAP_BUFFER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output3
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output3
operator|.
name|limit
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

