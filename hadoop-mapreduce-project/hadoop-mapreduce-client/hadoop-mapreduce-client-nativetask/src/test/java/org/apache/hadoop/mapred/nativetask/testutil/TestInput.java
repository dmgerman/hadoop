begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.testutil
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|TestInput
specifier|public
class|class
name|TestInput
block|{
DECL|class|KV
specifier|public
specifier|static
class|class
name|KV
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|key
specifier|public
name|K
name|key
decl_stmt|;
DECL|field|value
specifier|public
name|V
name|value
decl_stmt|;
block|}
DECL|field|CHAR_SET
specifier|public
specifier|static
name|char
index|[]
name|CHAR_SET
init|=
operator|new
name|char
index|[]
block|{
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|,
literal|'G'
block|,
literal|'H'
block|,
literal|'I'
block|,
literal|'J'
block|,
literal|'K'
block|,
literal|'L'
block|,
literal|'M'
block|,
literal|'N'
block|,
literal|'O'
block|,
literal|'P'
block|,
literal|'Q'
block|,
literal|'R'
block|,
literal|'S'
block|,
literal|'T'
block|,
literal|'U'
block|,
literal|'V'
block|,
literal|'W'
block|,
literal|'X'
block|,
literal|'Y'
block|,
literal|'Z'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'l'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'o'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'*'
block|,
literal|'/'
block|}
decl_stmt|;
DECL|method|getMapInputs (int size)
specifier|public
specifier|static
name|KV
index|[]
name|getMapInputs
parameter_list|(
name|int
name|size
parameter_list|)
block|{
specifier|final
name|KV
index|[]
name|dataInput
init|=
operator|new
name|KV
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|dataInput
index|[
name|i
index|]
operator|=
name|getSingleMapInput
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|dataInput
return|;
block|}
DECL|method|getSingleMapInput (int i)
specifier|private
specifier|static
name|KV
name|getSingleMapInput
parameter_list|(
name|int
name|i
parameter_list|)
block|{
specifier|final
name|char
name|character
init|=
name|CHAR_SET
index|[
name|i
operator|%
name|CHAR_SET
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|byte
name|b
init|=
operator|(
name|byte
operator|)
name|character
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|i
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|bytes
argument_list|,
name|b
argument_list|)
expr_stmt|;
specifier|final
name|BytesWritable
name|result
init|=
operator|new
name|BytesWritable
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|KV
name|kv
init|=
operator|new
name|KV
argument_list|()
decl_stmt|;
name|kv
operator|.
name|key
operator|=
name|result
expr_stmt|;
name|kv
operator|.
name|value
operator|=
name|result
expr_stmt|;
return|return
name|kv
return|;
block|}
block|}
end_class

end_unit

