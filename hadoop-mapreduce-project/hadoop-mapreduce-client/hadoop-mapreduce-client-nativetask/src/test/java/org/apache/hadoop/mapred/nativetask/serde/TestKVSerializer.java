begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.serde
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|TestInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|TestInput
operator|.
name|KV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|SizedWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|TestKVSerializer
specifier|public
class|class
name|TestKVSerializer
block|{
DECL|field|inputArraySize
name|int
name|inputArraySize
init|=
literal|1000
decl_stmt|;
comment|// 1000 bytesWriable elements
DECL|field|bufferSize
name|int
name|bufferSize
init|=
literal|100
decl_stmt|;
comment|// bytes
DECL|field|inputArray
specifier|private
name|KV
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
index|[]
name|inputArray
decl_stmt|;
DECL|field|result
specifier|final
name|ByteArrayOutputStream
name|result
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|key
specifier|private
name|SizedWritable
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|SizedWritable
name|value
decl_stmt|;
DECL|field|serializer
specifier|private
name|KVSerializer
name|serializer
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|inputArray
operator|=
name|TestInput
operator|.
name|getMapInputs
argument_list|(
name|inputArraySize
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
operator|new
name|SizedWritable
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
operator|new
name|SizedWritable
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
operator|new
name|KVSerializer
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|key
operator|.
name|reset
argument_list|(
name|inputArray
index|[
literal|4
index|]
operator|.
name|key
argument_list|)
expr_stmt|;
name|value
operator|.
name|reset
argument_list|(
name|inputArray
index|[
literal|4
index|]
operator|.
name|value
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|updateLength
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateLength ()
specifier|public
name|void
name|testUpdateLength
parameter_list|()
throws|throws
name|IOException
block|{
name|Mockito
operator|.
name|mock
argument_list|(
name|DataOutputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|kvLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputArraySize
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|.
name|reset
argument_list|(
name|inputArray
index|[
name|i
index|]
operator|.
name|key
argument_list|)
expr_stmt|;
name|value
operator|.
name|reset
argument_list|(
name|inputArray
index|[
name|i
index|]
operator|.
name|value
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|updateLength
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// verify whether the size increase
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|>
name|kvLength
argument_list|)
expr_stmt|;
name|kvLength
operator|=
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSerializeKV ()
specifier|public
name|void
name|testSerializeKV
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DataOutputStream
name|dataOut
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|hasUnFlushedData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|shortOfSpace
argument_list|(
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|+
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|written
init|=
name|serializer
operator|.
name|serializeKV
argument_list|(
name|dataOut
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// flush once, write 4 int, and 2 byte array
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|writeInt
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|written
argument_list|,
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|+
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerializeNoFlush ()
specifier|public
name|void
name|testSerializeNoFlush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DataOutputStream
name|dataOut
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// suppose there are enough space
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|hasUnFlushedData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|shortOfSpace
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|written
init|=
name|serializer
operator|.
name|serializeKV
argument_list|(
name|dataOut
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// flush 0, write 4 int, and 2 byte array
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|writeInt
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|written
argument_list|,
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|+
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerializePartitionKV ()
specifier|public
name|void
name|testSerializePartitionKV
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DataOutputStream
name|dataOut
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|hasUnFlushedData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dataOut
operator|.
name|shortOfSpace
argument_list|(
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|+
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
operator|+
name|Constants
operator|.
name|SIZEOF_PARTITION_LENGTH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|written
init|=
name|serializer
operator|.
name|serializePartitionKV
argument_list|(
name|dataOut
argument_list|,
literal|100
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// flush once, write 4 int, and 2 byte array
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|writeInt
argument_list|(
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|dataOut
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|written
argument_list|,
name|key
operator|.
name|length
operator|+
name|value
operator|.
name|length
operator|+
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
operator|+
name|Constants
operator|.
name|SIZEOF_PARTITION_LENGTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeserializerNoData ()
specifier|public
name|void
name|testDeserializerNoData
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DataInputStream
name|in
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|in
operator|.
name|hasUnReadData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serializer
operator|.
name|deserializeKV
argument_list|(
name|in
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeserializer ()
specifier|public
name|void
name|testDeserializer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DataInputStream
name|in
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|in
operator|.
name|hasUnReadData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|serializer
operator|.
name|deserializeKV
argument_list|(
name|in
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|in
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|in
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|readFully
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

