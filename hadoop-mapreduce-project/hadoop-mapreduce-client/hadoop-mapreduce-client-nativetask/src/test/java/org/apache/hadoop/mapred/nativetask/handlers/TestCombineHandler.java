begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|CombinerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|INativeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|BufferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
DECL|class|TestCombineHandler
specifier|public
class|class
name|TestCombineHandler
block|{
DECL|field|handler
specifier|private
name|CombinerHandler
name|handler
decl_stmt|;
DECL|field|nativeHandler
specifier|private
name|INativeHandler
name|nativeHandler
decl_stmt|;
DECL|field|pusher
specifier|private
name|BufferPusher
name|pusher
decl_stmt|;
DECL|field|puller
specifier|private
name|BufferPuller
name|puller
decl_stmt|;
DECL|field|combinerRunner
specifier|private
name|CombinerRunner
name|combinerRunner
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|nativeHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|INativeHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|pusher
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BufferPusher
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|puller
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BufferPuller
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|combinerRunner
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CombinerRunner
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|nativeHandler
operator|.
name|getInputBuffer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|InputBuffer
argument_list|(
name|BufferType
operator|.
name|HEAP_BUFFER
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommandDispatcherSetting ()
specifier|public
name|void
name|testCommandDispatcherSetting
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|handler
operator|=
operator|new
name|CombinerHandler
argument_list|(
name|nativeHandler
argument_list|,
name|combinerRunner
argument_list|,
name|puller
argument_list|,
name|pusher
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nativeHandler
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setCommandDispatcher
argument_list|(
name|eq
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nativeHandler
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setDataReceiver
argument_list|(
name|eq
argument_list|(
name|puller
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCombine ()
specifier|public
name|void
name|testCombine
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|this
operator|.
name|handler
operator|=
operator|new
name|CombinerHandler
argument_list|(
name|nativeHandler
argument_list|,
name|combinerRunner
argument_list|,
name|puller
argument_list|,
name|pusher
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handler
operator|.
name|onCall
argument_list|(
name|CombinerHandler
operator|.
name|COMBINE
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|combinerRunner
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|combine
argument_list|(
name|eq
argument_list|(
name|puller
argument_list|)
argument_list|,
name|eq
argument_list|(
name|pusher
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|pusher
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|puller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nativeHandler
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnCall ()
specifier|public
name|void
name|testOnCall
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|handler
operator|=
operator|new
name|CombinerHandler
argument_list|(
name|nativeHandler
argument_list|,
name|combinerRunner
argument_list|,
name|puller
argument_list|,
name|pusher
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handler
operator|.
name|onCall
argument_list|(
operator|new
name|Command
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

