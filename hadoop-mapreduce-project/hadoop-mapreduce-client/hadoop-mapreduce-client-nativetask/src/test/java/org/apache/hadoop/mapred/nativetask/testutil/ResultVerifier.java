begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.testutil
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_class
DECL|class|ResultVerifier
specifier|public
class|class
name|ResultVerifier
block|{
comment|/**    * verify the result    *     * @param sample the path to correct results    * @param source the path to the results from the native implementation    */
DECL|method|verify (String sample, String source)
specifier|public
specifier|static
name|boolean
name|verify
parameter_list|(
name|String
name|sample
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataInputStream
name|sourcein
init|=
literal|null
decl_stmt|;
name|FSDataInputStream
name|samplein
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hdfssource
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|sourcepaths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|hdfssource
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hdfssample
init|=
operator|new
name|Path
argument_list|(
name|sample
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|samplepaths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|hdfssample
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourcepaths
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"source file can not be found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|samplepaths
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"sample file can not be found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sourcepaths
operator|.
name|length
operator|!=
name|samplepaths
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourcepaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|sourcepath
init|=
name|sourcepaths
index|[
name|i
index|]
decl_stmt|;
comment|// op result file start with "part-r" like part-r-00000
if|if
condition|(
operator|!
name|sourcepath
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"part-r"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Path
name|samplepath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|samplepaths
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|samplepaths
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sourcepath
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|samplepath
operator|=
name|samplepaths
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|samplepath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"cound not find file "
operator|+
name|samplepaths
index|[
literal|0
index|]
operator|.
name|getParent
argument_list|()
operator|+
literal|"/"
operator|+
name|sourcepath
operator|.
name|getName
argument_list|()
operator|+
literal|" , as sourcepaths has such file"
argument_list|)
throw|;
block|}
comment|// compare
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|sourcepath
argument_list|)
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|samplepath
argument_list|)
condition|)
block|{
name|sourcein
operator|=
name|fs
operator|.
name|open
argument_list|(
name|sourcepath
argument_list|)
expr_stmt|;
name|samplein
operator|=
name|fs
operator|.
name|open
argument_list|(
name|samplepath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"result file not found:"
operator|+
name|sourcepath
operator|+
literal|" or "
operator|+
name|samplepath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CRC32
name|sourcecrc
decl_stmt|,
name|samplecrc
decl_stmt|;
name|samplecrc
operator|=
operator|new
name|CRC32
argument_list|()
expr_stmt|;
name|sourcecrc
operator|=
operator|new
name|CRC32
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bufin
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|16
index|]
decl_stmt|;
name|int
name|readnum
init|=
literal|0
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|samplein
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|readnum
operator|=
name|samplein
operator|.
name|read
argument_list|(
name|bufin
argument_list|)
expr_stmt|;
name|totalRead
operator|+=
name|readnum
expr_stmt|;
name|samplecrc
operator|.
name|update
argument_list|(
name|bufin
argument_list|,
literal|0
argument_list|,
name|readnum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|totalRead
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"source "
operator|+
name|sample
operator|+
literal|" is empty file"
argument_list|)
throw|;
block|}
name|totalRead
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|sourcein
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|readnum
operator|=
name|sourcein
operator|.
name|read
argument_list|(
name|bufin
argument_list|)
expr_stmt|;
name|totalRead
operator|+=
name|readnum
expr_stmt|;
name|sourcecrc
operator|.
name|update
argument_list|(
name|bufin
argument_list|,
literal|0
argument_list|,
name|readnum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|totalRead
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"source "
operator|+
name|sample
operator|+
literal|" is empty file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|samplecrc
operator|.
name|getValue
argument_list|()
operator|==
name|sourcecrc
operator|.
name|getValue
argument_list|()
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"verify exception :"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|samplein
operator|!=
literal|null
condition|)
block|{
name|samplein
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sourcein
operator|!=
literal|null
condition|)
block|{
name|sourcein
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|verifyCounters (Job normalJob, Job nativeJob, boolean hasCombiner)
specifier|public
specifier|static
name|void
name|verifyCounters
parameter_list|(
name|Job
name|normalJob
parameter_list|,
name|Job
name|nativeJob
parameter_list|,
name|boolean
name|hasCombiner
parameter_list|)
throws|throws
name|IOException
block|{
name|Counters
name|normalCounters
init|=
name|normalJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Counters
name|nativeCounters
init|=
name|nativeJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Counter MAP_OUTPUT_RECORDS should be equal"
argument_list|,
name|normalCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|nativeCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter REDUCE_INPUT_GROUPS should be equal"
argument_list|,
name|normalCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|nativeCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasCombiner
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Counter REDUCE_INPUT_RECORDS should be equal"
argument_list|,
name|normalCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|nativeCounters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyCounters (Job normalJob, Job nativeJob)
specifier|public
specifier|static
name|void
name|verifyCounters
parameter_list|(
name|Job
name|normalJob
parameter_list|,
name|Job
name|nativeJob
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCounters
argument_list|(
name|normalJob
argument_list|,
name|nativeJob
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

