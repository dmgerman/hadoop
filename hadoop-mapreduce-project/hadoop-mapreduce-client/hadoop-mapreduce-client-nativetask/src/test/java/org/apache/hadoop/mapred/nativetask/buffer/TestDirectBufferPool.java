begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDirectBufferPool
specifier|public
class|class
name|TestDirectBufferPool
block|{
annotation|@
name|Test
DECL|method|testGetInstance ()
specifier|public
name|void
name|testGetInstance
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|num
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|DirectBufferPool
argument_list|>
name|pools
init|=
operator|new
name|ArrayList
argument_list|<
name|DirectBufferPool
argument_list|>
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|list
init|=
operator|new
name|Thread
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
name|getPoolThread
argument_list|(
name|pools
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|list
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|list
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|DirectBufferPool
name|p1
init|=
name|pools
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pools
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DirectBufferPool
name|p2
init|=
name|pools
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPoolThread (final List<DirectBufferPool> pools)
specifier|private
name|Thread
name|getPoolThread
parameter_list|(
specifier|final
name|List
argument_list|<
name|DirectBufferPool
argument_list|>
name|pools
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|pools
operator|.
name|add
argument_list|(
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
DECL|method|testBufBorrow ()
specifier|public
name|void
name|testBufBorrow
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|ByteBuffer
name|b1
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b1
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b1
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|b1
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|b2
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b2
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|b2
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|ByteBuffer
name|b3
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b3
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b3
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|b3
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|b2
argument_list|,
name|b3
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|b3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufReset ()
specifier|public
name|void
name|testBufReset
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|ByteBuffer
name|b1
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b1
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b1
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|b1
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|.
name|putInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b1
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|b2
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b2
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|b2
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufReturn ()
specifier|public
name|void
name|testBufReturn
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|int
name|numOfBufs
init|=
literal|100
decl_stmt|;
name|int
name|capacity
init|=
literal|100
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|bufs
init|=
operator|new
name|ByteBuffer
index|[
name|numOfBufs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBufs
condition|;
name|i
operator|++
control|)
block|{
name|bufs
index|[
name|i
index|]
operator|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bufferPool
operator|.
name|getBufCountsForCapacity
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numOfThreads
init|=
name|numOfBufs
decl_stmt|;
name|Thread
index|[]
name|list
init|=
operator|new
name|Thread
index|[
name|numOfThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
name|retBufThread
argument_list|(
name|bufferPool
argument_list|,
name|bufs
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|list
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|list
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numOfBufs
argument_list|,
name|bufferPool
operator|.
name|getBufCountsForCapacity
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retBufThread (final DirectBufferPool bufferPool, final ByteBuffer[] bufs, final int i)
specifier|private
name|Thread
name|retBufThread
parameter_list|(
specifier|final
name|DirectBufferPool
name|bufferPool
parameter_list|,
specifier|final
name|ByteBuffer
index|[]
name|bufs
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|bufs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
DECL|method|testBufException ()
specifier|public
name|void
name|testBufException
parameter_list|()
block|{
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|boolean
name|thrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|thrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
name|thrown
operator|=
literal|false
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|thrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBufWeakRefClear ()
specifier|public
name|void
name|testBufWeakRefClear
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
name|DirectBufferPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|int
name|numOfBufs
init|=
literal|100
decl_stmt|;
name|int
name|capacity
init|=
literal|100
decl_stmt|;
name|ByteBuffer
index|[]
name|list
init|=
operator|new
name|ByteBuffer
index|[
name|capacity
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBufs
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBufs
condition|;
name|i
operator|++
control|)
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|list
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numOfBufs
argument_list|,
name|bufferPool
operator|.
name|getBufCountsForCapacity
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|ByteBuffer
name|b
init|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bufferPool
operator|.
name|getBufCountsForCapacity
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

