begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.kvtest
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|kvtest
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|ResultVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|ScenarioConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|testutil
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|KVTest
specifier|public
class|class
name|KVTest
block|{
DECL|field|keyclasses
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|keyclasses
init|=
literal|null
decl_stmt|;
DECL|field|valueclasses
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|valueclasses
init|=
literal|null
decl_stmt|;
DECL|field|keyclassNames
specifier|private
specifier|static
name|String
index|[]
name|keyclassNames
init|=
literal|null
decl_stmt|;
DECL|field|valueclassNames
specifier|private
specifier|static
name|String
index|[]
name|valueclassNames
init|=
literal|null
decl_stmt|;
DECL|field|nativekvtestconf
specifier|private
specifier|static
name|Configuration
name|nativekvtestconf
init|=
name|ScenarioConfiguration
operator|.
name|getNativeConfiguration
argument_list|()
decl_stmt|;
DECL|field|hadoopkvtestconf
specifier|private
specifier|static
name|Configuration
name|hadoopkvtestconf
init|=
name|ScenarioConfiguration
operator|.
name|getNormalConfiguration
argument_list|()
decl_stmt|;
static|static
block|{
name|nativekvtestconf
operator|.
name|addResource
argument_list|(
name|TestConstants
operator|.
name|KVTEST_CONF_PATH
argument_list|)
expr_stmt|;
name|hadoopkvtestconf
operator|.
name|addResource
argument_list|(
name|TestConstants
operator|.
name|KVTEST_CONF_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"key:{0}\nvalue:{1}"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
name|data
parameter_list|()
block|{
specifier|final
name|String
name|valueclassesStr
init|=
name|nativekvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_VALUECLASSES
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|valueclassesStr
argument_list|)
expr_stmt|;
name|valueclassNames
operator|=
name|valueclassesStr
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
comment|// delete
comment|// " "
specifier|final
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|tmpvalueclasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueclassNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
name|valueclassNames
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tmpvalueclasses
operator|.
name|add
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|valueclassNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|valueclasses
operator|=
name|tmpvalueclasses
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|tmpvalueclasses
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keyclassesStr
init|=
name|nativekvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_KEYCLASSES
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|keyclassesStr
argument_list|)
expr_stmt|;
name|keyclassNames
operator|=
name|keyclassesStr
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
comment|// delete
comment|// " "
specifier|final
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|tmpkeyclasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyclassNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
name|keyclassNames
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tmpkeyclasses
operator|.
name|add
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|keyclassNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|keyclasses
operator|=
name|tmpkeyclasses
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|tmpkeyclasses
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
index|[]
name|kvgroup
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|keyclassNames
operator|.
name|length
operator|*
name|valueclassNames
operator|.
name|length
index|]
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyclassNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|tmpindex
init|=
name|i
operator|*
name|valueclassNames
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|valueclassNames
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|kvgroup
index|[
name|tmpindex
operator|+
name|j
index|]
index|[
literal|0
index|]
operator|=
name|keyclasses
index|[
name|i
index|]
expr_stmt|;
name|kvgroup
index|[
name|tmpindex
operator|+
name|j
index|]
index|[
literal|1
index|]
operator|=
name|valueclasses
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|kvgroup
argument_list|)
return|;
block|}
DECL|field|keyclass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|valueclass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|valueclass
decl_stmt|;
DECL|method|KVTest (Class<?> keyclass, Class<?> valueclass)
specifier|public
name|KVTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|keyclass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueclass
parameter_list|)
block|{
name|this
operator|.
name|keyclass
operator|=
name|keyclass
expr_stmt|;
name|this
operator|.
name|valueclass
operator|=
name|valueclass
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKVCompability ()
specifier|public
name|void
name|testKVCompability
parameter_list|()
block|{
try|try
block|{
specifier|final
name|String
name|nativeoutput
init|=
name|this
operator|.
name|runNativeTest
argument_list|(
literal|"Test:"
operator|+
name|keyclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"--"
operator|+
name|valueclass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|keyclass
argument_list|,
name|valueclass
argument_list|)
decl_stmt|;
specifier|final
name|String
name|normaloutput
init|=
name|this
operator|.
name|runNormalTest
argument_list|(
literal|"Test:"
operator|+
name|keyclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"--"
operator|+
name|valueclass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|keyclass
argument_list|,
name|valueclass
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|compareRet
init|=
name|ResultVerifier
operator|.
name|verify
argument_list|(
name|normaloutput
argument_list|,
name|nativeoutput
argument_list|)
decl_stmt|;
specifier|final
name|String
name|input
init|=
name|nativekvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_INPUTDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|keyclass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|valueclass
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareRet
condition|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hadoopkvtestconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|nativeoutput
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|normaloutput
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|input
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"file compare result: if they are the same ,then return true"
argument_list|,
literal|true
argument_list|,
name|compareRet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"test run exception:"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"test run exception:"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
block|{    }
DECL|method|runNativeTest (String jobname, Class<?> keyclass, Class<?> valueclass)
specifier|private
name|String
name|runNativeTest
parameter_list|(
name|String
name|jobname
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyclass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueclass
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|inputpath
init|=
name|nativekvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_INPUTDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|keyclass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|valueclass
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|outputpath
init|=
name|nativekvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_OUTPUTDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|keyclass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|valueclass
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// if output file exists ,then delete it
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|nativekvtestconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|outputpath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|nativekvtestconf
operator|.
name|set
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_CREATEFILE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|KVJob
name|keyJob
init|=
operator|new
name|KVJob
argument_list|(
name|jobname
argument_list|,
name|nativekvtestconf
argument_list|,
name|keyclass
argument_list|,
name|valueclass
argument_list|,
name|inputpath
argument_list|,
name|outputpath
argument_list|)
decl_stmt|;
name|keyJob
operator|.
name|runJob
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"native testcase run time error."
return|;
block|}
return|return
name|outputpath
return|;
block|}
DECL|method|runNormalTest (String jobname, Class<?> keyclass, Class<?> valueclass)
specifier|private
name|String
name|runNormalTest
parameter_list|(
name|String
name|jobname
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyclass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueclass
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|inputpath
init|=
name|hadoopkvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_INPUTDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|keyclass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|valueclass
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|outputpath
init|=
name|hadoopkvtestconf
operator|.
name|get
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_NORMAL_OUTPUTDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|keyclass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|valueclass
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// if output file exists ,then delete it
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hadoopkvtestconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|outputpath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|hadoopkvtestconf
operator|.
name|set
argument_list|(
name|TestConstants
operator|.
name|NATIVETASK_KVTEST_CREATEFILE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|KVJob
name|keyJob
init|=
operator|new
name|KVJob
argument_list|(
name|jobname
argument_list|,
name|hadoopkvtestconf
argument_list|,
name|keyclass
argument_list|,
name|valueclass
argument_list|,
name|inputpath
argument_list|,
name|outputpath
argument_list|)
decl_stmt|;
name|keyJob
operator|.
name|runJob
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"normal testcase run time error."
return|;
block|}
return|return
name|outputpath
return|;
block|}
block|}
end_class

end_unit

