begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VIntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VLongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_class
DECL|class|HadoopPlatform
specifier|public
class|class
name|HadoopPlatform
extends|extends
name|Platform
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|HadoopPlatform
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|HadoopPlatform ()
specifier|public
name|HadoopPlatform
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|registerKey
argument_list|(
name|NullWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|NullWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|Text
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TextSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|LongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|LongWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|IntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|IntWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|Writable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|DefaultSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|BytesWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BytesWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|BooleanWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BoolWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|ByteWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ByteWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|FloatWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|FloatWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|DoubleWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|DoubleWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|VIntWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|VIntWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerKey
argument_list|(
name|VLongWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|VLongWritableSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Hadoop platform inited"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|support (String keyClassName, INativeSerializer serializer, JobConf job)
specifier|public
name|boolean
name|support
parameter_list|(
name|String
name|keyClassName
parameter_list|,
name|INativeSerializer
name|serializer
parameter_list|,
name|JobConf
name|job
parameter_list|)
block|{
if|if
condition|(
name|keyClassNames
operator|.
name|contains
argument_list|(
name|keyClassName
argument_list|)
operator|&&
name|serializer
operator|instanceof
name|INativeComparable
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|define (Class comparatorClass)
specifier|public
name|boolean
name|define
parameter_list|(
name|Class
name|comparatorClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"Hadoop"
return|;
block|}
block|}
end_class

end_unit

