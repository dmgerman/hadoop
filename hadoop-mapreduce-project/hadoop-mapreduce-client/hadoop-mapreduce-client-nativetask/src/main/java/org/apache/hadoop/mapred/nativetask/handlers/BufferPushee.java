begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|BufferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|ByteBufferDataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
operator|.
name|KVSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|SizedWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * collect data when signaled  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BufferPushee
specifier|public
class|class
name|BufferPushee
parameter_list|<
name|OK
parameter_list|,
name|OV
parameter_list|>
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferPushee
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KV_HEADER_LENGTH
specifier|public
specifier|final
specifier|static
name|int
name|KV_HEADER_LENGTH
init|=
name|Constants
operator|.
name|SIZEOF_KV_LENGTH
decl_stmt|;
DECL|field|asideBuffer
specifier|private
name|InputBuffer
name|asideBuffer
decl_stmt|;
DECL|field|tmpOutputKey
specifier|private
specifier|final
name|SizedWritable
argument_list|<
name|OK
argument_list|>
name|tmpOutputKey
decl_stmt|;
DECL|field|tmpOutputValue
specifier|private
specifier|final
name|SizedWritable
argument_list|<
name|OV
argument_list|>
name|tmpOutputValue
decl_stmt|;
DECL|field|writer
specifier|private
name|RecordWriter
argument_list|<
name|OK
argument_list|,
name|OV
argument_list|>
name|writer
decl_stmt|;
DECL|field|nativeReader
specifier|private
name|ByteBufferDataReader
name|nativeReader
decl_stmt|;
DECL|field|deserializer
specifier|private
name|KVSerializer
argument_list|<
name|OK
argument_list|,
name|OV
argument_list|>
name|deserializer
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|BufferPushee (Class<OK> oKClass, Class<OV> oVClass, RecordWriter<OK, OV> writer)
specifier|public
name|BufferPushee
parameter_list|(
name|Class
argument_list|<
name|OK
argument_list|>
name|oKClass
parameter_list|,
name|Class
argument_list|<
name|OV
argument_list|>
name|oVClass
parameter_list|,
name|RecordWriter
argument_list|<
name|OK
argument_list|,
name|OV
argument_list|>
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|tmpOutputKey
operator|=
operator|new
name|SizedWritable
argument_list|<
name|OK
argument_list|>
argument_list|(
name|oKClass
argument_list|)
expr_stmt|;
name|tmpOutputValue
operator|=
operator|new
name|SizedWritable
argument_list|<
name|OV
argument_list|>
argument_list|(
name|oVClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oKClass
operator|&&
literal|null
operator|!=
name|oVClass
condition|)
block|{
name|this
operator|.
name|deserializer
operator|=
operator|new
name|KVSerializer
argument_list|<
name|OK
argument_list|,
name|OV
argument_list|>
argument_list|(
name|oKClass
argument_list|,
name|oVClass
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nativeReader
operator|=
operator|new
name|ByteBufferDataReader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|collect (InputBuffer buffer)
specifier|public
name|boolean
name|collect
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ByteBuffer
name|input
init|=
name|buffer
operator|.
name|getByteBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|asideBuffer
operator|&&
name|asideBuffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|asideBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|output
init|=
name|asideBuffer
operator|.
name|getByteBuffer
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
specifier|final
name|int
name|write
init|=
name|Math
operator|.
name|min
argument_list|(
name|asideBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|input
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|input
operator|.
name|get
argument_list|(
name|output
argument_list|,
name|asideBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|asideBuffer
operator|.
name|position
argument_list|(
name|asideBuffer
operator|.
name|position
argument_list|()
operator|+
name|write
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|asideBuffer
operator|.
name|remaining
argument_list|()
operator|==
literal|0
operator|&&
name|asideBuffer
operator|.
name|position
argument_list|()
operator|>
literal|0
condition|)
block|{
name|asideBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|asideBuffer
argument_list|)
expr_stmt|;
name|asideBuffer
operator|.
name|rewind
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|input
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|remaining
argument_list|()
operator|<
name|KV_HEADER_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"incomplete data, input length is: "
operator|+
name|input
operator|.
name|remaining
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|position
init|=
name|input
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|final
name|int
name|keyLength
init|=
name|input
operator|.
name|getInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueLength
init|=
name|input
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|input
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
specifier|final
name|int
name|kvLength
init|=
name|keyLength
operator|+
name|valueLength
operator|+
name|KV_HEADER_LENGTH
decl_stmt|;
specifier|final
name|int
name|remaining
init|=
name|input
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvLength
operator|>
name|remaining
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|asideBuffer
operator|||
name|asideBuffer
operator|.
name|capacity
argument_list|()
operator|<
name|kvLength
condition|)
block|{
name|asideBuffer
operator|=
operator|new
name|InputBuffer
argument_list|(
name|BufferType
operator|.
name|HEAP_BUFFER
argument_list|,
name|kvLength
argument_list|)
expr_stmt|;
block|}
name|asideBuffer
operator|.
name|rewind
argument_list|(
literal|0
argument_list|,
name|kvLength
argument_list|)
expr_stmt|;
name|input
operator|.
name|get
argument_list|(
name|asideBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|asideBuffer
operator|.
name|position
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|write (InputBuffer input)
specifier|private
name|boolean
name|write
parameter_list|(
name|InputBuffer
name|input
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|remain
init|=
name|input
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|this
operator|.
name|nativeReader
operator|.
name|reset
argument_list|(
name|input
argument_list|)
expr_stmt|;
while|while
condition|(
name|remain
operator|>
name|totalRead
condition|)
block|{
specifier|final
name|int
name|read
init|=
name|deserializer
operator|.
name|deserializeKV
argument_list|(
name|nativeReader
argument_list|,
name|tmpOutputKey
argument_list|,
name|tmpOutputValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
literal|0
condition|)
block|{
name|totalRead
operator|+=
name|read
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
call|(
name|OK
call|)
argument_list|(
name|tmpOutputKey
operator|.
name|v
argument_list|)
argument_list|,
call|(
name|OV
call|)
argument_list|(
name|tmpOutputValue
operator|.
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|remain
operator|!=
name|totalRead
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"We expect to read "
operator|+
name|remain
operator|+
literal|", but we actually read: "
operator|+
name|totalRead
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|null
operator|!=
name|writer
condition|)
block|{
name|writer
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|nativeReader
condition|)
block|{
name|nativeReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

