begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
DECL|class|SizedWritable
specifier|public
class|class
name|SizedWritable
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|INVALID_LENGTH
specifier|public
specifier|static
name|int
name|INVALID_LENGTH
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|length
specifier|public
name|int
name|length
init|=
name|INVALID_LENGTH
decl_stmt|;
DECL|field|v
specifier|public
name|Writable
name|v
decl_stmt|;
DECL|method|SizedWritable (Class<?> klass)
specifier|public
name|SizedWritable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|klass
condition|)
block|{
name|v
operator|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|length
operator|=
name|INVALID_LENGTH
expr_stmt|;
block|}
DECL|method|readFields (DataInputBuffer key)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInputBuffer
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|!=
name|key
condition|)
block|{
name|this
operator|.
name|v
operator|.
name|readFields
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|INVALID_LENGTH
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"input key is null"
argument_list|)
throw|;
block|}
block|}
DECL|method|reset (T w)
specifier|public
name|void
name|reset
parameter_list|(
name|T
name|w
parameter_list|)
block|{
name|this
operator|.
name|v
operator|=
operator|(
name|Writable
operator|)
name|w
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|INVALID_LENGTH
expr_stmt|;
block|}
block|}
end_class

end_unit

