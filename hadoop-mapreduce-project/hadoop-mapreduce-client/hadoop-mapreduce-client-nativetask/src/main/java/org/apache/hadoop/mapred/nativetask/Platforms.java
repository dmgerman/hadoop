begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
operator|.
name|INativeSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|serde
operator|.
name|NativeSerialization
import|;
end_import

begin_comment
comment|/**  * this class will load in and init all platforms on classpath  * it is also the facade to check for key type support and other  * platform methods  */
end_comment

begin_class
DECL|class|Platforms
specifier|public
class|class
name|Platforms
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Platforms
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|platforms
specifier|private
specifier|static
specifier|final
name|ServiceLoader
argument_list|<
name|Platform
argument_list|>
name|platforms
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|Platform
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|init (Configuration conf)
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|NativeSerialization
operator|.
name|getInstance
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|platforms
init|)
block|{
for|for
control|(
name|Platform
name|platform
range|:
name|platforms
control|)
block|{
name|platform
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|support (String keyClassName, INativeSerializer serializer, JobConf job)
specifier|public
specifier|static
name|boolean
name|support
parameter_list|(
name|String
name|keyClassName
parameter_list|,
name|INativeSerializer
name|serializer
parameter_list|,
name|JobConf
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|platforms
init|)
block|{
for|for
control|(
name|Platform
name|platform
range|:
name|platforms
control|)
block|{
if|if
condition|(
name|platform
operator|.
name|support
argument_list|(
name|keyClassName
argument_list|,
name|serializer
argument_list|,
name|job
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"platform "
operator|+
name|platform
operator|.
name|name
argument_list|()
operator|+
literal|" support key class"
operator|+
name|keyClassName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|define (Class keyComparator)
specifier|public
specifier|static
name|boolean
name|define
parameter_list|(
name|Class
name|keyComparator
parameter_list|)
block|{
synchronized|synchronized
init|(
name|platforms
init|)
block|{
for|for
control|(
name|Platform
name|platform
range|:
name|platforms
control|)
block|{
if|if
condition|(
name|platform
operator|.
name|define
argument_list|(
name|keyComparator
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"platform "
operator|+
name|platform
operator|.
name|name
argument_list|()
operator|+
literal|" define comparator "
operator|+
name|keyComparator
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

