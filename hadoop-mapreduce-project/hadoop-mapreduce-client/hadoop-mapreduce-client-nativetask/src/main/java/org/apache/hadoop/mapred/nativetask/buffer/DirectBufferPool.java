begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * as direct buffer memory is not collected by GC, we keep a pool  * to reuse direct buffers  */
end_comment

begin_class
DECL|class|DirectBufferPool
specifier|public
class|class
name|DirectBufferPool
block|{
DECL|field|directBufferPool
specifier|private
specifier|static
name|DirectBufferPool
name|directBufferPool
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DirectBufferPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bufferMap
specifier|private
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|>
name|bufferMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DirectBufferPool ()
specifier|private
name|DirectBufferPool
parameter_list|()
block|{   }
DECL|method|getInstance ()
specifier|public
specifier|static
specifier|synchronized
name|DirectBufferPool
name|getInstance
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|directBufferPool
condition|)
block|{
name|directBufferPool
operator|=
operator|new
name|DirectBufferPool
argument_list|()
expr_stmt|;
block|}
return|return
name|directBufferPool
return|;
block|}
DECL|method|destoryInstance ()
specifier|public
specifier|static
name|void
name|destoryInstance
parameter_list|()
block|{
name|directBufferPool
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|borrowBuffer (int capacity)
specifier|public
specifier|synchronized
name|ByteBuffer
name|borrowBuffer
parameter_list|(
name|int
name|capacity
parameter_list|)
throws|throws
name|IOException
block|{
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|list
init|=
name|bufferMap
operator|.
name|get
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|list
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|capacity
argument_list|)
return|;
block|}
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
name|ref
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|list
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ByteBuffer
name|buf
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
return|return
name|buf
return|;
block|}
block|}
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|capacity
argument_list|)
return|;
block|}
DECL|method|returnBuffer (ByteBuffer buffer)
specifier|public
name|void
name|returnBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|buffer
operator|||
operator|!
name|buffer
operator|.
name|isDirect
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"the buffer is null or the buffer returned is not direct buffer"
argument_list|)
throw|;
block|}
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|capacity
init|=
name|buffer
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|list
init|=
name|bufferMap
operator|.
name|get
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|list
condition|)
block|{
name|list
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|prev
init|=
name|bufferMap
operator|.
name|putIfAbsent
argument_list|(
name|capacity
argument_list|,
name|list
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|prev
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getBufCountsForCapacity (int capacity)
name|int
name|getBufCountsForCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
name|bufferMap
operator|.
name|get
argument_list|(
name|capacity
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

