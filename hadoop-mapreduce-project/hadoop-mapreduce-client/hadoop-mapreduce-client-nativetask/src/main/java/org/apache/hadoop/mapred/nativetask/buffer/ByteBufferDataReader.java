begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UTFDataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * read data from a input buffer  */
end_comment

begin_class
DECL|class|ByteBufferDataReader
specifier|public
class|class
name|ByteBufferDataReader
extends|extends
name|DataInputStream
block|{
DECL|field|byteBuffer
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
DECL|field|lineCache
specifier|private
name|char
name|lineCache
index|[]
decl_stmt|;
DECL|method|ByteBufferDataReader (InputBuffer buffer)
specifier|public
name|ByteBufferDataReader
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|byteBuffer
operator|=
name|buffer
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reset (InputBuffer buffer)
specifier|public
name|void
name|reset
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|byteBuffer
operator|=
name|buffer
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b, int off, int len)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skipBytes (int n)
specifier|public
name|int
name|skipBytes
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|remains
init|=
name|byteBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
specifier|final
name|int
name|skip
init|=
operator|(
name|remains
operator|<
name|n
operator|)
condition|?
name|remains
else|:
name|n
decl_stmt|;
specifier|final
name|int
name|current
init|=
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|position
argument_list|(
name|current
operator|+
name|skip
argument_list|)
expr_stmt|;
return|return
name|skip
return|;
block|}
annotation|@
name|Override
DECL|method|readBoolean ()
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|==
literal|1
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|readByte ()
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readUnsignedByte ()
specifier|public
name|int
name|readUnsignedByte
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ch
init|=
name|byteBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|ch
return|;
block|}
annotation|@
name|Override
DECL|method|readShort ()
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readUnsignedShort ()
specifier|public
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readChar ()
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getChar
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readInt ()
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getInt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readLong ()
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFloat ()
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getFloat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readDouble ()
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readLine ()
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|this
decl_stmt|;
name|char
name|buf
index|[]
init|=
name|lineCache
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
name|buf
operator|=
name|lineCache
operator|=
operator|new
name|char
index|[
literal|128
index|]
expr_stmt|;
block|}
name|int
name|room
init|=
name|buf
operator|.
name|length
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|;
name|loop
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
operator|-
literal|1
case|:
case|case
literal|'\n'
case|:
break|break
name|loop
break|;
case|case
literal|'\r'
case|:
specifier|final
name|int
name|c2
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|c2
operator|!=
literal|'\n'
operator|)
operator|&&
operator|(
name|c2
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|PushbackInputStream
operator|)
condition|)
block|{
name|in
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|PushbackInputStream
operator|)
name|in
operator|)
operator|.
name|unread
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
break|break
name|loop
break|;
default|default:
if|if
condition|(
operator|--
name|room
operator|<
literal|0
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
name|offset
operator|+
literal|128
index|]
expr_stmt|;
name|room
operator|=
name|buf
operator|.
name|length
operator|-
name|offset
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lineCache
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|lineCache
operator|=
name|buf
expr_stmt|;
block|}
name|buf
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|(
name|c
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|String
operator|.
name|copyValueOf
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readUTF ()
specifier|public
specifier|final
name|String
name|readUTF
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readUTF
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|readUTF (DataInput in)
specifier|private
specifier|final
specifier|static
name|String
name|readUTF
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|utflen
init|=
name|in
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytearr
init|=
literal|null
decl_stmt|;
name|char
index|[]
name|chararr
init|=
literal|null
decl_stmt|;
name|bytearr
operator|=
operator|new
name|byte
index|[
name|utflen
index|]
expr_stmt|;
name|chararr
operator|=
operator|new
name|char
index|[
name|utflen
index|]
expr_stmt|;
name|int
name|c
decl_stmt|,
name|char2
decl_stmt|,
name|char3
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|chararr_count
init|=
literal|0
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|bytearr
argument_list|,
literal|0
argument_list|,
name|utflen
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|<
name|utflen
condition|)
block|{
name|c
operator|=
name|bytearr
index|[
name|count
index|]
operator|&
literal|0xff
expr_stmt|;
if|if
condition|(
name|c
operator|>
literal|127
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|chararr
index|[
name|chararr_count
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
block|}
while|while
condition|(
name|count
operator|<
name|utflen
condition|)
block|{
name|c
operator|=
name|bytearr
index|[
name|count
index|]
operator|&
literal|0xff
expr_stmt|;
switch|switch
condition|(
name|c
operator|>>
literal|4
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
comment|/* 0xxxxxxx */
name|count
operator|++
expr_stmt|;
name|chararr
index|[
name|chararr_count
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
break|break;
case|case
literal|12
case|:
case|case
literal|13
case|:
comment|/* 110x xxxx 10xx xxxx */
name|count
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|utflen
condition|)
block|{
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"malformed input: partial character at end"
argument_list|)
throw|;
block|}
name|char2
operator|=
name|bytearr
index|[
name|count
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|char2
operator|&
literal|0xC0
operator|)
operator|!=
literal|0x80
condition|)
block|{
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"malformed input around byte "
operator|+
name|count
argument_list|)
throw|;
block|}
name|chararr
index|[
name|chararr_count
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|c
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|char2
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|/* 1110 xxxx 10xx xxxx 10xx xxxx */
name|count
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|utflen
condition|)
block|{
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"malformed input: partial character at end"
argument_list|)
throw|;
block|}
name|char2
operator|=
name|bytearr
index|[
name|count
operator|-
literal|2
index|]
expr_stmt|;
name|char3
operator|=
name|bytearr
index|[
name|count
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|char2
operator|&
literal|0xC0
operator|)
operator|!=
literal|0x80
operator|)
operator|||
operator|(
operator|(
name|char3
operator|&
literal|0xC0
operator|)
operator|!=
literal|0x80
operator|)
condition|)
block|{
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"malformed input around byte "
operator|+
operator|(
name|count
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
name|chararr
index|[
name|chararr_count
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|c
operator|&
literal|0x0F
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|char2
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|char3
operator|&
literal|0x3F
operator|)
operator|<<
literal|0
operator|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|/* 10xx xxxx, 1111 xxxx */
throw|throw
operator|new
name|UTFDataFormatException
argument_list|(
literal|"malformed input around byte "
operator|+
name|count
argument_list|)
throw|;
block|}
block|}
comment|// The number of chars produced may be less than utflen
return|return
operator|new
name|String
argument_list|(
name|chararr
argument_list|,
literal|0
argument_list|,
name|chararr_count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasUnReadData ()
specifier|public
name|boolean
name|hasUnReadData
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|byteBuffer
operator|&&
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
return|;
block|}
block|}
end_class

end_unit

