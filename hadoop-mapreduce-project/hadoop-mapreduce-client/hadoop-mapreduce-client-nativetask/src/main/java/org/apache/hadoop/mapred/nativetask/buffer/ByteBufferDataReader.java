begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * read data from a input buffer  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ByteBufferDataReader
specifier|public
class|class
name|ByteBufferDataReader
extends|extends
name|DataInputStream
block|{
DECL|field|byteBuffer
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
DECL|field|javaReader
specifier|private
name|java
operator|.
name|io
operator|.
name|DataInputStream
name|javaReader
decl_stmt|;
DECL|method|ByteBufferDataReader (InputBuffer buffer)
specifier|public
name|ByteBufferDataReader
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|reset
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|javaReader
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|DataInputStream
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|reset (InputBuffer buffer)
specifier|public
name|void
name|reset
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|byteBuffer
operator|=
name|buffer
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b, int off, int len)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byteBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skipBytes (int n)
specifier|public
name|int
name|skipBytes
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|remains
init|=
name|byteBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
specifier|final
name|int
name|skip
init|=
operator|(
name|remains
operator|<
name|n
operator|)
condition|?
name|remains
else|:
name|n
decl_stmt|;
specifier|final
name|int
name|current
init|=
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|position
argument_list|(
name|current
operator|+
name|skip
argument_list|)
expr_stmt|;
return|return
name|skip
return|;
block|}
annotation|@
name|Override
DECL|method|readBoolean ()
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|==
literal|1
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|readByte ()
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readUnsignedByte ()
specifier|public
name|int
name|readUnsignedByte
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ch
init|=
name|byteBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|ch
return|;
block|}
annotation|@
name|Override
DECL|method|readShort ()
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readUnsignedShort ()
specifier|public
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readChar ()
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getChar
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readInt ()
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getInt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readLong ()
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFloat ()
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getFloat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readDouble ()
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|byteBuffer
operator|.
name|getDouble
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|readLine ()
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|javaReader
operator|.
name|readLine
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readUTF ()
specifier|public
specifier|final
name|String
name|readUTF
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|javaReader
operator|.
name|readUTF
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasUnReadData ()
specifier|public
name|boolean
name|hasUnReadData
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|byteBuffer
operator|&&
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
return|;
block|}
block|}
end_class

end_unit

