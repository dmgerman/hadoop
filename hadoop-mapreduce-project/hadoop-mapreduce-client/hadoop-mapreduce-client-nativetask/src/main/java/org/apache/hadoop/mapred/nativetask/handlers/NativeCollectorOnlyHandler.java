begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|CommandDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|ICombineHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|INativeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|NativeBatchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|TaskContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|NativeTaskOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|OutputUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|ReadWriteBuffer
import|;
end_import

begin_comment
comment|/**  * Java Record Reader + Java Mapper + Native Collector  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NativeCollectorOnlyHandler
specifier|public
class|class
name|NativeCollectorOnlyHandler
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|CommandDispatcher
implements|,
name|Closeable
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"NativeTask.MCollectorOutputHandler"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NativeCollectorOnlyHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GET_OUTPUT_PATH
specifier|public
specifier|static
specifier|final
name|Command
name|GET_OUTPUT_PATH
init|=
operator|new
name|Command
argument_list|(
literal|100
argument_list|,
literal|"GET_OUTPUT_PATH"
argument_list|)
decl_stmt|;
DECL|field|GET_OUTPUT_INDEX_PATH
specifier|public
specifier|static
specifier|final
name|Command
name|GET_OUTPUT_INDEX_PATH
init|=
operator|new
name|Command
argument_list|(
literal|101
argument_list|,
literal|"GET_OUTPUT_INDEX_PATH"
argument_list|)
decl_stmt|;
DECL|field|GET_SPILL_PATH
specifier|public
specifier|static
specifier|final
name|Command
name|GET_SPILL_PATH
init|=
operator|new
name|Command
argument_list|(
literal|102
argument_list|,
literal|"GET_SPILL_PATH"
argument_list|)
decl_stmt|;
DECL|field|GET_COMBINE_HANDLER
specifier|public
specifier|static
specifier|final
name|Command
name|GET_COMBINE_HANDLER
init|=
operator|new
name|Command
argument_list|(
literal|103
argument_list|,
literal|"GET_COMBINE_HANDLER"
argument_list|)
decl_stmt|;
DECL|field|output
specifier|private
name|NativeTaskOutput
name|output
decl_stmt|;
DECL|field|spillNumber
specifier|private
name|int
name|spillNumber
init|=
literal|0
decl_stmt|;
DECL|field|combinerHandler
specifier|private
name|ICombineHandler
name|combinerHandler
init|=
literal|null
decl_stmt|;
DECL|field|kvPusher
specifier|private
specifier|final
name|BufferPusher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvPusher
decl_stmt|;
DECL|field|nativeHandler
specifier|private
specifier|final
name|INativeHandler
name|nativeHandler
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|create (TaskContext context)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NativeCollectorOnlyHandler
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|TaskContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ICombineHandler
name|combinerHandler
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|TaskContext
name|combineContext
init|=
name|context
operator|.
name|copyOf
argument_list|()
decl_stmt|;
name|combineContext
operator|.
name|setInputKeyClass
argument_list|(
name|context
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|combineContext
operator|.
name|setInputValueClass
argument_list|(
name|context
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
name|combinerHandler
operator|=
name|CombinerHandler
operator|.
name|create
argument_list|(
name|combineContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|combinerHandler
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[NativeCollectorOnlyHandler] combiner is not null"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INativeHandler
name|nativeHandler
init|=
name|NativeBatchProcessor
operator|.
name|create
argument_list|(
name|NAME
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|DataChannel
operator|.
name|OUT
argument_list|)
decl_stmt|;
specifier|final
name|BufferPusher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvPusher
init|=
operator|new
name|BufferPusher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
operator|(
name|Class
argument_list|<
name|K
argument_list|>
operator|)
name|context
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|V
argument_list|>
operator|)
name|context
operator|.
name|getOutputValueClass
argument_list|()
argument_list|,
name|nativeHandler
argument_list|)
decl_stmt|;
return|return
operator|new
name|NativeCollectorOnlyHandler
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|context
argument_list|,
name|nativeHandler
argument_list|,
name|kvPusher
argument_list|,
name|combinerHandler
argument_list|)
return|;
block|}
DECL|method|NativeCollectorOnlyHandler (TaskContext context, INativeHandler nativeHandler, BufferPusher<K, V> kvPusher, ICombineHandler combiner)
specifier|protected
name|NativeCollectorOnlyHandler
parameter_list|(
name|TaskContext
name|context
parameter_list|,
name|INativeHandler
name|nativeHandler
parameter_list|,
name|BufferPusher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvPusher
parameter_list|,
name|ICombineHandler
name|combiner
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|id
init|=
name|context
operator|.
name|getTaskAttemptId
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|id
condition|)
block|{
name|this
operator|.
name|output
operator|=
name|OutputUtil
operator|.
name|createNativeTaskOutput
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|output
operator|=
name|OutputUtil
operator|.
name|createNativeTaskOutput
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|context
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|combinerHandler
operator|=
name|combiner
expr_stmt|;
name|this
operator|.
name|kvPusher
operator|=
name|kvPusher
expr_stmt|;
name|this
operator|.
name|nativeHandler
operator|=
name|nativeHandler
expr_stmt|;
name|nativeHandler
operator|.
name|setCommandDispatcher
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|collect (K key, V value, int partition)
specifier|public
name|void
name|collect
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|partition
parameter_list|)
throws|throws
name|IOException
block|{
name|kvPusher
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|null
operator|!=
name|kvPusher
condition|)
block|{
name|kvPusher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|combinerHandler
condition|)
block|{
name|combinerHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|nativeHandler
condition|)
block|{
name|nativeHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCall (Command command, ReadWriteBuffer parameter)
specifier|public
name|ReadWriteBuffer
name|onCall
parameter_list|(
name|Command
name|command
parameter_list|,
name|ReadWriteBuffer
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|command
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|GET_OUTPUT_PATH
argument_list|)
condition|)
block|{
name|p
operator|=
name|output
operator|.
name|getOutputFileForWrite
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|GET_OUTPUT_INDEX_PATH
argument_list|)
condition|)
block|{
name|p
operator|=
name|output
operator|.
name|getOutputIndexFileForWrite
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|GET_SPILL_PATH
argument_list|)
condition|)
block|{
name|p
operator|=
name|output
operator|.
name|getSpillFileForWrite
argument_list|(
name|spillNumber
operator|++
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|GET_COMBINE_HANDLER
argument_list|)
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|combinerHandler
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ReadWriteBuffer
name|result
init|=
operator|new
name|ReadWriteBuffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|result
operator|.
name|writeLong
argument_list|(
name|combinerHandler
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal command: "
operator|+
name|command
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ReadWriteBuffer
name|result
init|=
operator|new
name|ReadWriteBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|writeString
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MapOutputFile can't allocate spill/output file"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

