begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask.buffer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_class
DECL|class|OutputBuffer
specifier|public
class|class
name|OutputBuffer
block|{
DECL|field|byteBuffer
specifier|protected
name|ByteBuffer
name|byteBuffer
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|BufferType
name|type
decl_stmt|;
DECL|method|OutputBuffer (BufferType type, int outputBufferCapacity)
specifier|public
name|OutputBuffer
parameter_list|(
name|BufferType
name|type
parameter_list|,
name|int
name|outputBufferCapacity
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|outputBufferCapacity
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DIRECT_BUFFER
case|:
name|this
operator|.
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|outputBufferCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|HEAP_BUFFER
case|:
name|this
operator|.
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|outputBufferCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|OutputBuffer (byte[] bytes)
specifier|public
name|OutputBuffer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|BufferType
operator|.
name|HEAP_BUFFER
expr_stmt|;
specifier|final
name|int
name|outputBufferCapacity
init|=
name|bytes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|outputBufferCapacity
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getType ()
specifier|public
name|BufferType
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getByteBuffer ()
specifier|public
name|ByteBuffer
name|getByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|byteBuffer
return|;
block|}
DECL|method|length ()
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|byteBuffer
operator|.
name|position
argument_list|()
return|;
block|}
DECL|method|rewind ()
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|byteBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|limit ()
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|byteBuffer
operator|.
name|limit
argument_list|()
return|;
block|}
block|}
end_class

end_unit

