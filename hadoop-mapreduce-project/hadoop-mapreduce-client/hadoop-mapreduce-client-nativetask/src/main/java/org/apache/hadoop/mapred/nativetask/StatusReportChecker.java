begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|TaskReporter
import|;
end_import

begin_comment
comment|/**  * Will periodically check status from native and report to MR framework.  *   */
end_comment

begin_class
DECL|class|StatusReportChecker
specifier|public
class|class
name|StatusReportChecker
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StatusReportChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INTERVAL
specifier|public
specifier|static
name|int
name|INTERVAL
init|=
literal|1000
decl_stmt|;
comment|// milli-seconds
DECL|field|checker
specifier|private
name|Thread
name|checker
decl_stmt|;
DECL|field|reporter
specifier|private
specifier|final
name|TaskReporter
name|reporter
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
DECL|method|StatusReportChecker (TaskReporter reporter)
specifier|public
name|StatusReportChecker
parameter_list|(
name|TaskReporter
name|reporter
parameter_list|)
block|{
name|this
argument_list|(
name|reporter
argument_list|,
name|INTERVAL
argument_list|)
expr_stmt|;
block|}
DECL|method|StatusReportChecker (TaskReporter reporter, long interval)
specifier|public
name|StatusReportChecker
parameter_list|(
name|TaskReporter
name|reporter
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"StatusUpdater thread exiting "
operator|+
literal|"since it got interrupted"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
try|try
block|{
name|NativeRuntime
operator|.
name|reportStatus
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Update native status got exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|initUsedCounters ()
specifier|protected
name|void
name|initUsedCounters
parameter_list|()
block|{
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_INPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_INPUT_BYTES
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_OUTPUT_BYTES
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_OUTPUT_MATERIALIZED_BYTES
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|COMBINE_INPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|COMBINE_OUTPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|REDUCE_OUTPUT_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|SPILLED_RECORDS
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_OUTPUT_BYTES
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|checker
operator|==
literal|null
condition|)
block|{
comment|// init counters used by native side,
comment|// so they will have correct display name
name|initUsedCounters
argument_list|()
expr_stmt|;
name|checker
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|checker
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|checker
operator|!=
literal|null
condition|)
block|{
name|checker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|checker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

