begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.nativetask
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|BufferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|buffer
operator|.
name|OutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|ReadWriteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|nativetask
operator|.
name|util
operator|.
name|ConfigUtil
import|;
end_import

begin_comment
comment|/**  * used to create channel, transfer data and command between Java and native  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NativeBatchProcessor
specifier|public
class|class
name|NativeBatchProcessor
implements|implements
name|INativeHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NativeBatchProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nativeHandlerName
specifier|private
specifier|final
name|String
name|nativeHandlerName
decl_stmt|;
DECL|field|nativeHandlerAddr
specifier|private
name|long
name|nativeHandlerAddr
decl_stmt|;
DECL|field|isInputFinished
specifier|private
name|boolean
name|isInputFinished
init|=
literal|false
decl_stmt|;
comment|//<< Field used directly in Native, the name must NOT be changed
DECL|field|rawOutputBuffer
specifier|private
name|ByteBuffer
name|rawOutputBuffer
decl_stmt|;
DECL|field|rawInputBuffer
specifier|private
name|ByteBuffer
name|rawInputBuffer
decl_stmt|;
comment|//>>
DECL|field|in
specifier|private
name|InputBuffer
name|in
decl_stmt|;
DECL|field|out
specifier|private
name|OutputBuffer
name|out
decl_stmt|;
DECL|field|commandDispatcher
specifier|private
name|CommandDispatcher
name|commandDispatcher
decl_stmt|;
DECL|field|dataReceiver
specifier|private
name|DataReceiver
name|dataReceiver
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeRuntime
operator|.
name|isNativeLibraryLoaded
argument_list|()
condition|)
block|{
name|InitIDs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|create (String nativeHandlerName, Configuration conf, DataChannel channel)
specifier|public
specifier|static
name|INativeHandler
name|create
parameter_list|(
name|String
name|nativeHandlerName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|DataChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|bufferSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|Constants
operator|.
name|NATIVE_PROCESSOR_BUFFER_KB
argument_list|,
literal|1024
argument_list|)
operator|*
literal|1024
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NativeHandler: direct buffer size: "
operator|+
name|bufferSize
argument_list|)
expr_stmt|;
name|OutputBuffer
name|out
init|=
literal|null
decl_stmt|;
name|InputBuffer
name|in
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|channel
condition|)
block|{
case|case
name|IN
case|:
name|in
operator|=
operator|new
name|InputBuffer
argument_list|(
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUT
case|:
name|out
operator|=
operator|new
name|OutputBuffer
argument_list|(
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
break|break;
case|case
name|INOUT
case|:
name|in
operator|=
operator|new
name|InputBuffer
argument_list|(
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|OutputBuffer
argument_list|(
name|BufferType
operator|.
name|DIRECT_BUFFER
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
block|}
specifier|final
name|INativeHandler
name|handler
init|=
operator|new
name|NativeBatchProcessor
argument_list|(
name|nativeHandlerName
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|handler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
DECL|method|NativeBatchProcessor (String nativeHandlerName, InputBuffer input, OutputBuffer output)
specifier|protected
name|NativeBatchProcessor
parameter_list|(
name|String
name|nativeHandlerName
parameter_list|,
name|InputBuffer
name|input
parameter_list|,
name|OutputBuffer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nativeHandlerName
operator|=
name|nativeHandlerName
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|input
condition|)
block|{
name|this
operator|.
name|in
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|rawInputBuffer
operator|=
name|input
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|output
condition|)
block|{
name|this
operator|.
name|out
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|rawOutputBuffer
operator|=
name|output
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCommandDispatcher (CommandDispatcher handler)
specifier|public
name|void
name|setCommandDispatcher
parameter_list|(
name|CommandDispatcher
name|handler
parameter_list|)
block|{
name|this
operator|.
name|commandDispatcher
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nativeHandlerAddr
operator|=
name|NativeRuntime
operator|.
name|createNativeObject
argument_list|(
name|nativeHandlerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|nativeHandlerAddr
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Native object create failed, class: "
operator|+
name|nativeHandlerName
argument_list|)
throw|;
block|}
name|setupHandler
argument_list|(
name|nativeHandlerAddr
argument_list|,
name|ConfigUtil
operator|.
name|toBytes
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nativeHandlerAddr
operator|!=
literal|0
condition|)
block|{
name|NativeRuntime
operator|.
name|releaseNativeObject
argument_list|(
name|nativeHandlerAddr
argument_list|)
expr_stmt|;
name|nativeHandlerAddr
operator|=
literal|0
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNativeHandler ()
specifier|public
name|long
name|getNativeHandler
parameter_list|()
block|{
return|return
name|nativeHandlerAddr
return|;
block|}
annotation|@
name|Override
DECL|method|call (Command command, ReadWriteBuffer parameter)
specifier|public
name|ReadWriteBuffer
name|call
parameter_list|(
name|Command
name|command
parameter_list|,
name|ReadWriteBuffer
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
name|nativeCommand
argument_list|(
name|nativeHandlerAddr
argument_list|,
name|command
operator|.
name|id
argument_list|()
argument_list|,
literal|null
operator|==
name|parameter
condition|?
literal|null
else|:
name|parameter
operator|.
name|getBuff
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReadWriteBuffer
name|result
init|=
operator|new
name|ReadWriteBuffer
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|result
operator|.
name|setWritePoint
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|sendData ()
specifier|public
name|void
name|sendData
parameter_list|()
throws|throws
name|IOException
block|{
name|nativeProcessInput
argument_list|(
name|nativeHandlerAddr
argument_list|,
name|rawOutputBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|rawOutputBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishSendData ()
specifier|public
name|void
name|finishSendData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|rawOutputBuffer
operator|||
name|isInputFinished
condition|)
block|{
return|return;
block|}
name|sendData
argument_list|()
expr_stmt|;
name|nativeFinish
argument_list|(
name|nativeHandlerAddr
argument_list|)
expr_stmt|;
name|isInputFinished
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|sendCommandToJava (int command, byte[] data)
specifier|private
name|byte
index|[]
name|sendCommandToJava
parameter_list|(
name|int
name|command
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|Command
name|cmd
init|=
operator|new
name|Command
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|ReadWriteBuffer
name|param
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|data
condition|)
block|{
name|param
operator|=
operator|new
name|ReadWriteBuffer
argument_list|()
expr_stmt|;
name|param
operator|.
name|reset
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|param
operator|.
name|setWritePoint
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|commandDispatcher
condition|)
block|{
name|ReadWriteBuffer
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
name|commandDispatcher
operator|.
name|onCall
argument_list|(
name|cmd
argument_list|,
name|param
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
return|return
name|result
operator|.
name|getBuff
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Called by native side, clean output buffer so native side can continue    * processing    */
DECL|method|flushOutput (int length)
specifier|private
name|void
name|flushOutput
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|!=
name|rawInputBuffer
condition|)
block|{
name|rawInputBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rawInputBuffer
operator|.
name|limit
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dataReceiver
condition|)
block|{
try|try
block|{
name|dataReceiver
operator|.
name|receiveData
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Cache JNI field& method ids    */
DECL|method|InitIDs ()
specifier|private
specifier|static
specifier|native
name|void
name|InitIDs
parameter_list|()
function_decl|;
comment|/**    * Setup native side BatchHandler    */
DECL|method|setupHandler (long nativeHandlerAddr, byte[][] configs)
specifier|private
specifier|native
name|void
name|setupHandler
parameter_list|(
name|long
name|nativeHandlerAddr
parameter_list|,
name|byte
index|[]
index|[]
name|configs
parameter_list|)
function_decl|;
comment|/**    * Let native side to process data in inputBuffer    *     * @param handler    * @param length    */
DECL|method|nativeProcessInput (long handler, int length)
specifier|private
specifier|native
name|void
name|nativeProcessInput
parameter_list|(
name|long
name|handler
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
comment|/**    * Notice native side input is finished    *     * @param handler    */
DECL|method|nativeFinish (long handler)
specifier|private
specifier|native
name|void
name|nativeFinish
parameter_list|(
name|long
name|handler
parameter_list|)
function_decl|;
comment|/**    * Send control message to native side    *     * @param cmd    *          command data    * @return return value    */
DECL|method|nativeCommand (long handler, int cmd, byte[] parameter)
specifier|private
specifier|native
name|byte
index|[]
name|nativeCommand
parameter_list|(
name|long
name|handler
parameter_list|,
name|int
name|cmd
parameter_list|,
name|byte
index|[]
name|parameter
parameter_list|)
function_decl|;
comment|/**    * Load data from native    *     * @return    */
DECL|method|nativeLoadData (long handler)
specifier|private
specifier|native
name|void
name|nativeLoadData
parameter_list|(
name|long
name|handler
parameter_list|)
function_decl|;
DECL|method|finishOutput ()
specifier|protected
name|void
name|finishOutput
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|getInputBuffer ()
specifier|public
name|InputBuffer
name|getInputBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputBuffer ()
specifier|public
name|OutputBuffer
name|getOutputBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|loadData ()
specifier|public
name|void
name|loadData
parameter_list|()
throws|throws
name|IOException
block|{
name|nativeLoadData
argument_list|(
name|nativeHandlerAddr
argument_list|)
expr_stmt|;
comment|//
comment|// return call(Command.CMD_LOAD, param);
block|}
annotation|@
name|Override
DECL|method|setDataReceiver (DataReceiver handler)
specifier|public
name|void
name|setDataReceiver
parameter_list|(
name|DataReceiver
name|handler
parameter_list|)
block|{
name|this
operator|.
name|dataReceiver
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|nativeHandlerName
return|;
block|}
block|}
end_class

end_unit

