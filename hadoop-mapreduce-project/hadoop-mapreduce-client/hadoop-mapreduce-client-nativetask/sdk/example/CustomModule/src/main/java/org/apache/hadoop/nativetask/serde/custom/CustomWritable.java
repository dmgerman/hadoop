begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nativetask.serde.custom
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nativetask
operator|.
name|serde
operator|.
name|custom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_class
DECL|class|CustomWritable
specifier|public
class|class
name|CustomWritable
implements|implements
name|WritableComparable
argument_list|<
name|CustomWritable
argument_list|>
block|{
DECL|field|Id_a
specifier|private
name|int
name|Id_a
decl_stmt|;
DECL|field|Id_b
specifier|private
name|long
name|Id_b
decl_stmt|;
DECL|method|CustomWritable ()
specifier|public
name|CustomWritable
parameter_list|()
block|{
name|this
operator|.
name|Id_a
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|Id_b
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|CustomWritable (int a, long b)
specifier|public
name|CustomWritable
parameter_list|(
name|int
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|this
operator|.
name|Id_a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|Id_b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Id_a
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|Id_b
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|Id_a
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|Id_b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (CustomWritable that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CustomWritable
name|that
parameter_list|)
block|{
if|if
condition|(
name|Id_a
operator|>
name|that
operator|.
name|Id_a
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|Id_a
operator|<
name|that
operator|.
name|Id_a
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|Id_b
operator|>
name|that
operator|.
name|Id_b
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|Id_b
operator|<
name|that
operator|.
name|Id_b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Id_a
operator|+
literal|"\t"
operator|+
name|Id_b
return|;
block|}
block|}
end_class

end_unit

