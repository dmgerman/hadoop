begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|KeyValueTextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @see TestDelegatingInputFormat  */
end_comment

begin_class
DECL|class|TestMultipleInputs
specifier|public
class|class
name|TestMultipleInputs
extends|extends
name|HadoopTestCase
block|{
DECL|method|TestMultipleInputs ()
specifier|public
name|TestMultipleInputs
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|LOCAL_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|ROOT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"testing/mo"
argument_list|)
decl_stmt|;
DECL|field|IN1_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|IN1_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"input1"
argument_list|)
decl_stmt|;
DECL|field|IN2_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|IN2_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"input2"
argument_list|)
decl_stmt|;
DECL|field|OUT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|OUT_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
DECL|method|getDir (Path dir)
specifier|private
name|Path
name|getDir
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
comment|// Hack for local FS that does not have the concept of a 'mounting point'
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Path
name|rootDir
init|=
name|getDir
argument_list|(
name|ROOT_DIR
argument_list|)
decl_stmt|;
name|Path
name|in1Dir
init|=
name|getDir
argument_list|(
name|IN1_DIR
argument_list|)
decl_stmt|;
name|Path
name|in2Dir
init|=
name|getDir
argument_list|(
name|IN2_DIR
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|in1Dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|in1Dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|in2Dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|in2Dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoMultipleInputs ()
specifier|public
name|void
name|testDoMultipleInputs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|in1Dir
init|=
name|getDir
argument_list|(
name|IN1_DIR
argument_list|)
decl_stmt|;
name|Path
name|in2Dir
init|=
name|getDir
argument_list|(
name|IN2_DIR
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
name|getDir
argument_list|(
name|OUT_DIR
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DataOutputStream
name|file1
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|in1Dir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file1
operator|.
name|writeBytes
argument_list|(
literal|"a\nb\nc\nd\ne"
argument_list|)
expr_stmt|;
name|file1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write tab delimited to second file because we're doing
comment|// KeyValueInputFormat
name|DataOutputStream
name|file2
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|in2Dir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file2
operator|.
name|writeBytes
argument_list|(
literal|"a\tblah\nb\tblah\nc\tblah\nd\tblah\ne\tblah"
argument_list|)
expr_stmt|;
name|file2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mi"
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|in1Dir
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|in2Dir
argument_list|,
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|KeyValueMapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|ReducerClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|success
operator|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|instante
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|instante
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Job failed!"
argument_list|)
throw|;
comment|// copy bytes a bunch of times for the ease of readLine() - whatever
name|BufferedReader
name|output
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
literal|"part-r-00000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// reducer should have counted one key from each file
name|assertEquals
argument_list|(
literal|"a 2"
argument_list|,
name|output
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b 2"
argument_list|,
name|output
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c 2"
argument_list|,
name|output
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d 2"
argument_list|,
name|output
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e 2"
argument_list|,
name|output
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddInputPathWithFormat ()
specifier|public
name|void
name|testAddInputPathWithFormat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Job
name|conf
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|,
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|inputs
init|=
name|MultipleInputs
operator|.
name|getInputFormatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddInputPathWithMapper ()
specifier|public
name|void
name|testAddInputPathWithMapper
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Job
name|conf
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|,
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|KeyValueMapClass
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|inputs
init|=
name|MultipleInputs
operator|.
name|getInputFormatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
name|maps
init|=
name|MultipleInputs
operator|.
name|getMapperTypeMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapClass
operator|.
name|class
argument_list|,
name|maps
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValueMapClass
operator|.
name|class
argument_list|,
name|maps
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|blah
specifier|static
specifier|final
name|Text
name|blah
init|=
operator|new
name|Text
argument_list|(
literal|"blah"
argument_list|)
decl_stmt|;
comment|// these 3 classes do a reduce side join with 2 different mappers
DECL|class|MapClass
specifier|static
class|class
name|MapClass
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
comment|// receives "a", "b", "c" as values
annotation|@
name|Override
DECL|method|map (LongWritable key, Text value, Context ctx)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ctx
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|blah
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KeyValueMapClass
specifier|static
class|class
name|KeyValueMapClass
extends|extends
name|Mapper
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
comment|// receives "a", "b", "c" as keys
annotation|@
name|Override
DECL|method|map (Text key, Text value, Context ctx)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ctx
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|blah
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReducerClass
specifier|static
class|class
name|ReducerClass
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|NullWritable
argument_list|,
name|Text
argument_list|>
block|{
comment|// should receive 2 rows for each key
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|reduce (Text key, Iterable<Text> values, Context ctx)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Text
name|value
range|:
name|values
control|)
name|count
operator|++
expr_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

