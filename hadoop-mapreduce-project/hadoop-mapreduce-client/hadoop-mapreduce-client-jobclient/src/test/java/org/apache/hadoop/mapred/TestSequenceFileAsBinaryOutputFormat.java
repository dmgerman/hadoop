begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestSequenceFileAsBinaryOutputFormat
specifier|public
class|class
name|TestSequenceFileAsBinaryOutputFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSequenceFileAsBinaryOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|RECORDS
specifier|private
specifier|static
specifier|final
name|int
name|RECORDS
init|=
literal|10000
decl_stmt|;
comment|// A random task attempt id for testing.
DECL|field|attempt
specifier|private
specifier|static
specifier|final
name|String
name|attempt
init|=
literal|"attempt_200707121733_0001_m_000000_0"
decl_stmt|;
annotation|@
name|Test
DECL|method|testBinary ()
specifier|public
name|void
name|testBinary
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
argument_list|,
literal|"_"
operator|+
name|attempt
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testbinary.seq"
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create output directory"
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|dir
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setWorkOutputPath
argument_list|(
name|job
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setSequenceFileOutputKeyClass
argument_list|(
name|job
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setSequenceFileOutputValueClass
argument_list|(
name|job
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setCompressOutput
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setOutputCompressionType
argument_list|(
name|job
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
name|BytesWritable
name|bkey
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BytesWritable
name|bval
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|RecordWriter
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
name|writer
init|=
operator|new
name|SequenceFileAsBinaryOutputFormat
argument_list|()
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|IntWritable
name|iwritable
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|DoubleWritable
name|dwritable
init|=
operator|new
name|DoubleWritable
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|outbuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating data by SequenceFileAsBinaryOutputFormat"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORDS
condition|;
operator|++
name|i
control|)
block|{
name|iwritable
operator|=
operator|new
name|IntWritable
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|iwritable
operator|.
name|write
argument_list|(
name|outbuf
argument_list|)
expr_stmt|;
name|bkey
operator|.
name|set
argument_list|(
name|outbuf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dwritable
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
name|dwritable
operator|.
name|write
argument_list|(
name|outbuf
argument_list|)
expr_stmt|;
name|bval
operator|.
name|set
argument_list|(
name|outbuf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|bkey
argument_list|,
name|bval
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|InputFormat
argument_list|<
name|IntWritable
argument_list|,
name|DoubleWritable
argument_list|>
name|iformat
init|=
operator|new
name|SequenceFileInputFormat
argument_list|<
name|IntWritable
argument_list|,
name|DoubleWritable
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|buf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_SPLITS
init|=
literal|3
decl_stmt|;
name|SequenceFileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading data by SequenceFileInputFormat"
argument_list|)
expr_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|iformat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|NUM_SPLITS
argument_list|)
control|)
block|{
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|DoubleWritable
argument_list|>
name|reader
init|=
name|iformat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|sourceInt
decl_stmt|;
name|double
name|sourceDouble
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|iwritable
argument_list|,
name|dwritable
argument_list|)
condition|)
block|{
name|sourceInt
operator|=
name|r
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|sourceDouble
operator|=
name|r
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keys don't match: "
operator|+
literal|"*"
operator|+
name|iwritable
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|sourceInt
operator|+
literal|"*"
argument_list|,
name|sourceInt
argument_list|,
name|iwritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Vals don't match: "
operator|+
literal|"*"
operator|+
name|dwritable
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|sourceDouble
operator|+
literal|"*"
argument_list|,
name|Double
operator|.
name|compare
argument_list|(
name|dwritable
operator|.
name|get
argument_list|()
argument_list|,
name|sourceDouble
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Some records not found"
argument_list|,
name|RECORDS
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequenceOutputClassDefaultsToMapRedOutputClass ()
specifier|public
name|void
name|testSequenceOutputClassDefaultsToMapRedOutputClass
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
comment|// Setting Random class to test getSequenceFileOutput{Key,Value}Class
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|FloatWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SequenceFileOutputKeyClass should default to ouputKeyClass"
argument_list|,
name|FloatWritable
operator|.
name|class
argument_list|,
name|SequenceFileAsBinaryOutputFormat
operator|.
name|getSequenceFileOutputKeyClass
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SequenceFileOutputValueClass should default to "
operator|+
literal|"ouputValueClass"
argument_list|,
name|BooleanWritable
operator|.
name|class
argument_list|,
name|SequenceFileAsBinaryOutputFormat
operator|.
name|getSequenceFileOutputValueClass
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setSequenceFileOutputKeyClass
argument_list|(
name|job
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setSequenceFileOutputValueClass
argument_list|(
name|job
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SequenceFileOutputKeyClass not updated"
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|SequenceFileAsBinaryOutputFormat
operator|.
name|getSequenceFileOutputKeyClass
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SequenceFileOutputValueClass not updated"
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
name|SequenceFileAsBinaryOutputFormat
operator|.
name|getSequenceFileOutputValueClass
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testcheckOutputSpecsForbidRecordCompression ()
specifier|public
name|void
name|testcheckOutputSpecsForbidRecordCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/mapred"
argument_list|)
decl_stmt|;
name|Path
name|outputdir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/output"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outputdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create output directory"
argument_list|)
expr_stmt|;
block|}
name|FileOutputFormat
operator|.
name|setWorkOutputPath
argument_list|(
name|job
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// Without outputpath, FileOutputFormat.checkoutputspecs will throw
comment|// InvalidJobConfException
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputdir
argument_list|)
expr_stmt|;
comment|// SequenceFileAsBinaryOutputFormat doesn't support record compression
comment|// It should throw an exception when checked by checkOutputSpecs
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setCompressOutput
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setOutputCompressionType
argument_list|(
name|job
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|SequenceFileAsBinaryOutputFormat
argument_list|()
operator|.
name|checkOutputSpecs
argument_list|(
name|fs
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Block compression should be allowed for "
operator|+
literal|"SequenceFileAsBinaryOutputFormat:"
operator|+
literal|"Caught "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SequenceFileAsBinaryOutputFormat
operator|.
name|setOutputCompressionType
argument_list|(
name|job
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|SequenceFileAsBinaryOutputFormat
argument_list|()
operator|.
name|checkOutputSpecs
argument_list|(
name|fs
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Record compression should not be allowed for "
operator|+
literal|"SequenceFileAsBinaryOutputFormat"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidJobConfException
name|ie
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected "
operator|+
name|InvalidJobConfException
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"but caught "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

