begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class performs unit test for Job/JobControl classes.  *    */
end_comment

begin_class
DECL|class|TestMapReduceJobControl
specifier|public
class|class
name|TestMapReduceJobControl
extends|extends
name|HadoopTestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMapReduceJobControl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|rootDataDir
specifier|static
name|Path
name|rootDataDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"TestData"
argument_list|)
decl_stmt|;
DECL|field|indir
specifier|static
name|Path
name|indir
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"indir"
argument_list|)
decl_stmt|;
DECL|field|outdir_1
specifier|static
name|Path
name|outdir_1
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_1"
argument_list|)
decl_stmt|;
DECL|field|outdir_2
specifier|static
name|Path
name|outdir_2
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_2"
argument_list|)
decl_stmt|;
DECL|field|outdir_3
specifier|static
name|Path
name|outdir_3
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_3"
argument_list|)
decl_stmt|;
DECL|field|outdir_4
specifier|static
name|Path
name|outdir_4
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_4"
argument_list|)
decl_stmt|;
DECL|field|cjob1
specifier|static
name|ControlledJob
name|cjob1
init|=
literal|null
decl_stmt|;
DECL|field|cjob2
specifier|static
name|ControlledJob
name|cjob2
init|=
literal|null
decl_stmt|;
DECL|field|cjob3
specifier|static
name|ControlledJob
name|cjob3
init|=
literal|null
decl_stmt|;
DECL|field|cjob4
specifier|static
name|ControlledJob
name|cjob4
init|=
literal|null
decl_stmt|;
DECL|method|TestMapReduceJobControl ()
specifier|public
name|TestMapReduceJobControl
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|LOCAL_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupData (Configuration conf)
specifier|private
name|void
name|cleanupData
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MapReduceTestUtil
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|generateData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_1
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_2
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_3
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_4
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a main function for testing JobControl class.    * It requires 4 jobs:     *      Job 1: passed as parameter. input:indir  output:outdir_1    *      Job 2: copy data from indir to outdir_2    *      Job 3: copy data from outdir_1 and outdir_2 to outdir_3    *      Job 4: copy data from outdir to outdir_4    * The jobs 1 and 2 have no dependency. The job 3 depends on jobs 1 and 2.    * The job 4 depends on job 3.    *     * Then it creates a JobControl object and add the 4 jobs to     * the JobControl object.    * Finally, it creates a thread to run the JobControl object    */
DECL|method|createDependencies (Configuration conf, Job job1)
specifier|private
name|JobControl
name|createDependencies
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Job
name|job1
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|dependingJobs
init|=
literal|null
decl_stmt|;
name|cjob1
operator|=
operator|new
name|ControlledJob
argument_list|(
name|job1
argument_list|,
name|dependingJobs
argument_list|)
expr_stmt|;
name|Job
name|job2
init|=
name|MapReduceTestUtil
operator|.
name|createCopyJob
argument_list|(
name|conf
argument_list|,
name|outdir_2
argument_list|,
name|indir
argument_list|)
decl_stmt|;
name|cjob2
operator|=
operator|new
name|ControlledJob
argument_list|(
name|job2
argument_list|,
name|dependingJobs
argument_list|)
expr_stmt|;
name|Job
name|job3
init|=
name|MapReduceTestUtil
operator|.
name|createCopyJob
argument_list|(
name|conf
argument_list|,
name|outdir_3
argument_list|,
name|outdir_1
argument_list|,
name|outdir_2
argument_list|)
decl_stmt|;
name|dependingJobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ControlledJob
argument_list|>
argument_list|()
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|cjob1
argument_list|)
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|cjob2
argument_list|)
expr_stmt|;
name|cjob3
operator|=
operator|new
name|ControlledJob
argument_list|(
name|job3
argument_list|,
name|dependingJobs
argument_list|)
expr_stmt|;
name|Job
name|job4
init|=
name|MapReduceTestUtil
operator|.
name|createCopyJob
argument_list|(
name|conf
argument_list|,
name|outdir_4
argument_list|,
name|outdir_3
argument_list|)
decl_stmt|;
name|dependingJobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ControlledJob
argument_list|>
argument_list|()
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|cjob3
argument_list|)
expr_stmt|;
name|cjob4
operator|=
operator|new
name|ControlledJob
argument_list|(
name|job4
argument_list|,
name|dependingJobs
argument_list|)
expr_stmt|;
name|JobControl
name|theControl
init|=
operator|new
name|JobControl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|cjob1
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|cjob2
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|cjob3
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|cjob4
argument_list|)
expr_stmt|;
name|Thread
name|theController
init|=
operator|new
name|Thread
argument_list|(
name|theControl
argument_list|)
decl_stmt|;
name|theController
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|theControl
return|;
block|}
DECL|method|waitTillAllFinished (JobControl theControl)
specifier|private
name|void
name|waitTillAllFinished
parameter_list|(
name|JobControl
name|theControl
parameter_list|)
block|{
while|while
condition|(
operator|!
name|theControl
operator|.
name|allFinished
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|method|testJobControlWithFailJob ()
specifier|public
name|void
name|testJobControlWithFailJob
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testJobControlWithFailJob"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|cleanupData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create a Fail job
name|Job
name|job1
init|=
name|MapReduceTestUtil
operator|.
name|createFailJob
argument_list|(
name|conf
argument_list|,
name|outdir_1
argument_list|,
name|indir
argument_list|)
decl_stmt|;
comment|// create job dependencies
name|JobControl
name|theControl
init|=
name|createDependencies
argument_list|(
name|conf
argument_list|,
name|job1
argument_list|)
decl_stmt|;
comment|// wait till all the jobs complete
name|waitTillAllFinished
argument_list|(
name|theControl
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob1
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob2
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob3
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|DEPENDENT_FAILED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob4
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|DEPENDENT_FAILED
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testJobControlWithKillJob ()
specifier|public
name|void
name|testJobControlWithKillJob
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testJobControlWithKillJob"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|cleanupData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job1
init|=
name|MapReduceTestUtil
operator|.
name|createKillJob
argument_list|(
name|conf
argument_list|,
name|outdir_1
argument_list|,
name|indir
argument_list|)
decl_stmt|;
name|JobControl
name|theControl
init|=
name|createDependencies
argument_list|(
name|conf
argument_list|,
name|job1
argument_list|)
decl_stmt|;
while|while
condition|(
name|cjob1
operator|.
name|getJobState
argument_list|()
operator|!=
name|ControlledJob
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// verify adding dependingJo to RUNNING job fails.
name|assertFalse
argument_list|(
name|cjob1
operator|.
name|addDependingJob
argument_list|(
name|cjob2
argument_list|)
argument_list|)
expr_stmt|;
comment|// suspend jobcontrol and resume it again
name|theControl
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|theControl
operator|.
name|getThreadState
argument_list|()
operator|==
name|JobControl
operator|.
name|ThreadState
operator|.
name|SUSPENDED
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|resume
argument_list|()
expr_stmt|;
comment|// kill the first job.
name|cjob1
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// wait till all the jobs complete
name|waitTillAllFinished
argument_list|(
name|theControl
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob1
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob2
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob3
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|DEPENDENT_FAILED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cjob4
operator|.
name|getJobState
argument_list|()
operator|==
name|ControlledJob
operator|.
name|State
operator|.
name|DEPENDENT_FAILED
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testJobControl ()
specifier|public
name|void
name|testJobControl
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testJobControl"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|cleanupData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job1
init|=
name|MapReduceTestUtil
operator|.
name|createCopyJob
argument_list|(
name|conf
argument_list|,
name|outdir_1
argument_list|,
name|indir
argument_list|)
decl_stmt|;
name|JobControl
name|theControl
init|=
name|createDependencies
argument_list|(
name|conf
argument_list|,
name|job1
argument_list|)
decl_stmt|;
comment|// wait till all the jobs complete
name|waitTillAllFinished
argument_list|(
name|theControl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Some jobs failed"
argument_list|,
literal|0
argument_list|,
name|theControl
operator|.
name|getFailedJobList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testControlledJob ()
specifier|public
name|void
name|testControlledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testControlledJob"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|cleanupData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job1
init|=
name|MapReduceTestUtil
operator|.
name|createCopyJob
argument_list|(
name|conf
argument_list|,
name|outdir_1
argument_list|,
name|indir
argument_list|)
decl_stmt|;
name|JobControl
name|theControl
init|=
name|createDependencies
argument_list|(
name|conf
argument_list|,
name|job1
argument_list|)
decl_stmt|;
while|while
condition|(
name|cjob1
operator|.
name|getJobState
argument_list|()
operator|!=
name|ControlledJob
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cjob1
operator|.
name|getMapredJobId
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait till all the jobs complete
name|waitTillAllFinished
argument_list|(
name|theControl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Some jobs failed"
argument_list|,
literal|0
argument_list|,
name|theControl
operator|.
name|getFailedJobList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

