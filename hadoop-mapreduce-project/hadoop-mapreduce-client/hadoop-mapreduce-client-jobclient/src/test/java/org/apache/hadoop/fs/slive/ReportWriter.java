begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class which provides a report for the given operation output  */
end_comment

begin_class
DECL|class|ReportWriter
class|class
name|ReportWriter
block|{
comment|// simple measurement types
comment|// expect long values
comment|// these will be reported on + rates by this reporter
DECL|field|OK_TIME_TAKEN
specifier|static
specifier|final
name|String
name|OK_TIME_TAKEN
init|=
literal|"milliseconds_taken"
decl_stmt|;
DECL|field|FAILURES
specifier|static
specifier|final
name|String
name|FAILURES
init|=
literal|"failures"
decl_stmt|;
DECL|field|SUCCESSES
specifier|static
specifier|final
name|String
name|SUCCESSES
init|=
literal|"successes"
decl_stmt|;
DECL|field|BYTES_WRITTEN
specifier|static
specifier|final
name|String
name|BYTES_WRITTEN
init|=
literal|"bytes_written"
decl_stmt|;
DECL|field|FILES_CREATED
specifier|static
specifier|final
name|String
name|FILES_CREATED
init|=
literal|"files_created"
decl_stmt|;
DECL|field|DIR_ENTRIES
specifier|static
specifier|final
name|String
name|DIR_ENTRIES
init|=
literal|"dir_entries"
decl_stmt|;
DECL|field|OP_COUNT
specifier|static
specifier|final
name|String
name|OP_COUNT
init|=
literal|"op_count"
decl_stmt|;
DECL|field|CHUNKS_VERIFIED
specifier|static
specifier|final
name|String
name|CHUNKS_VERIFIED
init|=
literal|"chunks_verified"
decl_stmt|;
DECL|field|CHUNKS_UNVERIFIED
specifier|static
specifier|final
name|String
name|CHUNKS_UNVERIFIED
init|=
literal|"chunks_unverified"
decl_stmt|;
DECL|field|BYTES_READ
specifier|static
specifier|final
name|String
name|BYTES_READ
init|=
literal|"bytes_read"
decl_stmt|;
DECL|field|NOT_FOUND
specifier|static
specifier|final
name|String
name|NOT_FOUND
init|=
literal|"files_not_found"
decl_stmt|;
DECL|field|BAD_FILES
specifier|static
specifier|final
name|String
name|BAD_FILES
init|=
literal|"bad_files"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReportWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SECTION_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|SECTION_DELIM
init|=
literal|"-------------"
decl_stmt|;
comment|/**    * @return String to be used for as a section delimiter    */
DECL|method|getSectionDelimiter ()
specifier|private
name|String
name|getSectionDelimiter
parameter_list|()
block|{
return|return
name|SECTION_DELIM
return|;
block|}
comment|/**    * Writes a message the the logging library and the given print writer (if it    * is not null)    *     * @param msg    *          the message to write    * @param os    *          the print writer if specified to also write to    */
DECL|method|writeMessage (String msg, PrintWriter os)
specifier|private
name|void
name|writeMessage
parameter_list|(
name|String
name|msg
parameter_list|,
name|PrintWriter
name|os
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Provides a simple report showing only the input size, and for each    * operation the operation type, measurement type and its values.    *     * @param input    *          the list of operations to report on    * @param os    *          any print writer for which output should be written to (along with    *          the logging library)    */
DECL|method|basicReport (List<OperationOutput> input, PrintWriter os)
name|void
name|basicReport
parameter_list|(
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|input
parameter_list|,
name|PrintWriter
name|os
parameter_list|)
block|{
name|writeMessage
argument_list|(
literal|"Default report for "
operator|+
name|input
operator|.
name|size
argument_list|()
operator|+
literal|" operations "
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|writeMessage
argument_list|(
name|getSectionDelimiter
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationOutput
name|data
range|:
name|input
control|)
block|{
name|writeMessage
argument_list|(
literal|"Operation \""
operator|+
name|data
operator|.
name|getOperationType
argument_list|()
operator|+
literal|"\" measuring \""
operator|+
name|data
operator|.
name|getMeasurementType
argument_list|()
operator|+
literal|"\" = "
operator|+
name|data
operator|.
name|getValue
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|writeMessage
argument_list|(
name|getSectionDelimiter
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**    * Provides a more detailed report for a given operation. This will output the    * keys and values for all input and then sort based on measurement type and    * attempt to show rates for various metrics which have expected types to be    * able to measure there rate. Currently this will show rates for bytes    * written, success count, files created, directory entries, op count and    * bytes read if the variable for time taken is available for each measurement    * type.    *     * @param operation    *          the operation that is being reported on.    * @param input    *          the set of data for that that operation.    * @param os    *          any print writer for which output should be written to (along with    *          the logging library)    */
DECL|method|opReport (String operation, List<OperationOutput> input, PrintWriter os)
name|void
name|opReport
parameter_list|(
name|String
name|operation
parameter_list|,
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|input
parameter_list|,
name|PrintWriter
name|os
parameter_list|)
block|{
name|writeMessage
argument_list|(
literal|"Basic report for operation type "
operator|+
name|operation
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|writeMessage
argument_list|(
name|getSectionDelimiter
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationOutput
name|data
range|:
name|input
control|)
block|{
name|writeMessage
argument_list|(
literal|"Measurement \""
operator|+
name|data
operator|.
name|getMeasurementType
argument_list|()
operator|+
literal|"\" = "
operator|+
name|data
operator|.
name|getValue
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|// split up into measurement types for rates...
name|Map
argument_list|<
name|String
argument_list|,
name|OperationOutput
argument_list|>
name|combined
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|OperationOutput
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationOutput
name|data
range|:
name|input
control|)
block|{
if|if
condition|(
name|combined
operator|.
name|containsKey
argument_list|(
name|data
operator|.
name|getMeasurementType
argument_list|()
argument_list|)
condition|)
block|{
name|OperationOutput
name|curr
init|=
name|combined
operator|.
name|get
argument_list|(
name|data
operator|.
name|getMeasurementType
argument_list|()
argument_list|)
decl_stmt|;
name|combined
operator|.
name|put
argument_list|(
name|data
operator|.
name|getMeasurementType
argument_list|()
argument_list|,
name|OperationOutput
operator|.
name|merge
argument_list|(
name|curr
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|combined
operator|.
name|put
argument_list|(
name|data
operator|.
name|getMeasurementType
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handle the known types
name|OperationOutput
name|timeTaken
init|=
name|combined
operator|.
name|get
argument_list|(
name|OK_TIME_TAKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeTaken
operator|!=
literal|null
condition|)
block|{
name|Long
name|mTaken
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timeTaken
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTaken
operator|>
literal|0
condition|)
block|{
name|NumberFormat
name|formatter
init|=
name|Formatter
operator|.
name|getDecimalFormatter
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|measurementType
range|:
name|combined
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Double
name|rate
init|=
literal|null
decl_stmt|;
name|String
name|rateType
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|BYTES_WRITTEN
argument_list|)
condition|)
block|{
name|Long
name|mbWritten
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
operator|(
name|Constants
operator|.
name|MEGABYTES
operator|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|mbWritten
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"MB/sec"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|SUCCESSES
argument_list|)
condition|)
block|{
name|Long
name|succ
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|succ
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"successes/sec"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|FILES_CREATED
argument_list|)
condition|)
block|{
name|Long
name|filesCreated
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|filesCreated
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"files created/sec"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|DIR_ENTRIES
argument_list|)
condition|)
block|{
name|Long
name|entries
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|entries
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"directory entries/sec"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|OP_COUNT
argument_list|)
condition|)
block|{
name|Long
name|opCount
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|opCount
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"operations/sec"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|measurementType
operator|.
name|equals
argument_list|(
name|BYTES_READ
argument_list|)
condition|)
block|{
name|Long
name|mbRead
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|measurementType
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
operator|(
name|Constants
operator|.
name|MEGABYTES
operator|)
decl_stmt|;
name|rate
operator|=
operator|(
name|double
operator|)
name|mbRead
operator|/
call|(
name|double
call|)
argument_list|(
name|mTaken
operator|/
literal|1000.0d
argument_list|)
expr_stmt|;
name|rateType
operator|=
literal|"MB/sec"
expr_stmt|;
block|}
if|if
condition|(
name|rate
operator|!=
literal|null
condition|)
block|{
name|writeMessage
argument_list|(
literal|"Rate for measurement \""
operator|+
name|measurementType
operator|+
literal|"\" = "
operator|+
name|formatter
operator|.
name|format
argument_list|(
name|rate
argument_list|)
operator|+
literal|" "
operator|+
name|rateType
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|writeMessage
argument_list|(
name|getSectionDelimiter
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

