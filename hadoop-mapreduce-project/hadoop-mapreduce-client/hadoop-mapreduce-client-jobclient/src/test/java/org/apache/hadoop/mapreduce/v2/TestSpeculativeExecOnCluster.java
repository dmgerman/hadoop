begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|ExponentiallySmoothedTaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|LegacyTaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SimpleExponentialTaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|TaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test speculation on Mini Cluster.  */
end_comment

begin_class
annotation|@
name|Ignore
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestSpeculativeExecOnCluster
specifier|public
class|class
name|TestSpeculativeExecOnCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSpeculativeExecOnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NODE_MANAGERS_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|NODE_MANAGERS_COUNT
init|=
literal|2
decl_stmt|;
DECL|field|ENABLE_SPECULATIVE_MAP
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_SPECULATIVE_MAP
init|=
literal|true
decl_stmt|;
DECL|field|ENABLE_SPECULATIVE_REDUCE
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_SPECULATIVE_REDUCE
init|=
literal|true
decl_stmt|;
DECL|field|NUM_MAP_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MAP_DEFAULT
init|=
literal|8
operator|*
name|NODE_MANAGERS_COUNT
decl_stmt|;
DECL|field|NUM_REDUCE_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REDUCE_DEFAULT
init|=
name|NUM_MAP_DEFAULT
operator|/
literal|2
decl_stmt|;
DECL|field|MAP_SLEEP_TIME_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|MAP_SLEEP_TIME_DEFAULT
init|=
literal|60000
decl_stmt|;
DECL|field|REDUCE_SLEEP_TIME_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|REDUCE_SLEEP_TIME_DEFAULT
init|=
literal|10000
decl_stmt|;
DECL|field|MAP_SLEEP_COUNT_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|MAP_SLEEP_COUNT_DEFAULT
init|=
literal|10000
decl_stmt|;
DECL|field|REDUCE_SLEEP_COUNT_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|REDUCE_SLEEP_COUNT_DEFAULT
init|=
literal|1000
decl_stmt|;
DECL|field|MAP_SLEEP_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|MAP_SLEEP_COUNT
init|=
literal|"mapreduce.sleepjob.map.sleep.count"
decl_stmt|;
DECL|field|REDUCE_SLEEP_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|REDUCE_SLEEP_COUNT
init|=
literal|"mapreduce.sleepjob.reduce.sleep.count"
decl_stmt|;
DECL|field|MAP_SLEEP_TIME
specifier|private
specifier|static
specifier|final
name|String
name|MAP_SLEEP_TIME
init|=
literal|"mapreduce.sleepjob.map.sleep.time"
decl_stmt|;
DECL|field|REDUCE_SLEEP_TIME
specifier|private
specifier|static
specifier|final
name|String
name|REDUCE_SLEEP_TIME
init|=
literal|"mapreduce.sleepjob.reduce.sleep.time"
decl_stmt|;
DECL|field|MAP_SLEEP_CALCULATOR_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|MAP_SLEEP_CALCULATOR_TYPE
init|=
literal|"mapreduce.sleepjob.map.sleep.time.calculator"
decl_stmt|;
DECL|field|MAP_SLEEP_CALCULATOR_TYPE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|MAP_SLEEP_CALCULATOR_TYPE_DEFAULT
init|=
literal|"normal_run"
decl_stmt|;
DECL|field|mapSleepTypeMapper
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|SleepDurationCalculator
argument_list|>
name|mapSleepTypeMapper
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
static|static
block|{
name|mapSleepTypeMapper
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|mapSleepTypeMapper
operator|.
name|put
argument_list|(
literal|"normal_run"
argument_list|,
operator|new
name|SleepDurationCalcImpl
argument_list|()
argument_list|)
expr_stmt|;
name|mapSleepTypeMapper
operator|.
name|put
argument_list|(
literal|"stalled_run"
argument_list|,
operator|new
name|StalledSleepDurationCalcImpl
argument_list|()
argument_list|)
expr_stmt|;
name|mapSleepTypeMapper
operator|.
name|put
argument_list|(
literal|"slowing_run"
argument_list|,
operator|new
name|SlowingSleepDurationCalcImpl
argument_list|()
argument_list|)
expr_stmt|;
name|mapSleepTypeMapper
operator|.
name|put
argument_list|(
literal|"dynamic_slowing_run"
argument_list|,
operator|new
name|DynamicSleepDurationCalcImpl
argument_list|()
argument_list|)
expr_stmt|;
name|mapSleepTypeMapper
operator|.
name|put
argument_list|(
literal|"step_stalled_run"
argument_list|,
operator|new
name|StepStalledSleepDurationCalcImpl
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem getting local fs"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestSpeculativeExecOnCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|APP_JAR
specifier|private
specifier|static
specifier|final
name|Path
name|APP_JAR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"MRAppJar.jar"
argument_list|)
decl_stmt|;
DECL|field|TEST_OUT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_OUT_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test.out.dir"
argument_list|)
decl_stmt|;
DECL|field|mrCluster
specifier|private
name|MiniMRYarnCluster
name|mrCluster
decl_stmt|;
DECL|field|myNumMapper
specifier|private
name|int
name|myNumMapper
decl_stmt|;
DECL|field|myNumReduce
specifier|private
name|int
name|myNumReduce
decl_stmt|;
DECL|field|myMapSleepTime
specifier|private
name|int
name|myMapSleepTime
decl_stmt|;
DECL|field|myReduceSleepTime
specifier|private
name|int
name|myReduceSleepTime
decl_stmt|;
DECL|field|myMapSleepCount
specifier|private
name|int
name|myMapSleepCount
decl_stmt|;
DECL|field|myReduceSleepCount
specifier|private
name|int
name|myReduceSleepCount
decl_stmt|;
DECL|field|chosenSleepCalc
specifier|private
name|String
name|chosenSleepCalc
decl_stmt|;
DECL|field|estimatorClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|estimatorClass
decl_stmt|;
comment|/**    * The test cases take a long time to run all the estimators against all the    * cases. We skip the legacy estimators to reduce the execution time.    */
DECL|field|ignoredTests
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ignoredTests
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: TaskEstimator(EstimatorClass {0})"
argument_list|)
DECL|method|getTestParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ignoredTests
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"stalled_run"
block|,
literal|"slowing_run"
block|,
literal|"step_stalled_run"
block|}
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
block|,
name|ignoredTests
block|,
name|NUM_MAP_DEFAULT
block|,
name|NUM_REDUCE_DEFAULT
block|}
block|,
block|{
name|LegacyTaskRuntimeEstimator
operator|.
name|class
block|,
name|ignoredTests
block|,
name|NUM_MAP_DEFAULT
block|,
name|NUM_REDUCE_DEFAULT
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestSpeculativeExecOnCluster ( Class<? extends TaskRuntimeEstimator> estimatorKlass, List<String> testToIgnore, Integer numMapper, Integer numReduce)
specifier|public
name|TestSpeculativeExecOnCluster
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TaskRuntimeEstimator
argument_list|>
name|estimatorKlass
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|testToIgnore
parameter_list|,
name|Integer
name|numMapper
parameter_list|,
name|Integer
name|numReduce
parameter_list|)
block|{
name|this
operator|.
name|ignoredTests
operator|=
name|testToIgnore
expr_stmt|;
name|this
operator|.
name|estimatorClass
operator|=
name|estimatorKlass
expr_stmt|;
name|this
operator|.
name|myNumMapper
operator|=
name|numMapper
expr_stmt|;
name|this
operator|.
name|myNumReduce
operator|=
name|numReduce
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mrCluster
operator|==
literal|null
condition|)
block|{
name|mrCluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestSpeculativeExecution
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|NODE_MANAGERS_COUNT
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|mrCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// workaround the absent public distcache.
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
argument_list|,
name|APP_JAR
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|APP_JAR
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
name|myMapSleepTime
operator|=
name|MAP_SLEEP_TIME_DEFAULT
expr_stmt|;
name|myReduceSleepTime
operator|=
name|REDUCE_SLEEP_TIME_DEFAULT
expr_stmt|;
name|myMapSleepCount
operator|=
name|MAP_SLEEP_COUNT_DEFAULT
expr_stmt|;
name|myReduceSleepCount
operator|=
name|REDUCE_SLEEP_COUNT_DEFAULT
expr_stmt|;
name|chosenSleepCalc
operator|=
name|MAP_SLEEP_CALCULATOR_TYPE_DEFAULT
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Overrides default behavior of Partitioner for testing.    */
DECL|class|SpeculativeSleepJobPartitioner
specifier|public
specifier|static
class|class
name|SpeculativeSleepJobPartitioner
extends|extends
name|Partitioner
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|method|getPartition (IntWritable k, NullWritable v, int numPartitions)
specifier|public
name|int
name|getPartition
parameter_list|(
name|IntWritable
name|k
parameter_list|,
name|NullWritable
name|v
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
return|return
name|k
operator|.
name|get
argument_list|()
operator|%
name|numPartitions
return|;
block|}
block|}
comment|/**    * Overrides default behavior of InputSplit for testing.    */
DECL|class|EmptySplit
specifier|public
specifier|static
class|class
name|EmptySplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{ }
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{ }
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**    * Input format that sleeps after updating progress.    */
DECL|class|SpeculativeSleepInputFormat
specifier|public
specifier|static
class|class
name|SpeculativeSleepInputFormat
extends|extends
name|InputFormat
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|getSplits (JobContext jobContext)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numSplits
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|EmptySplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|createRecordReader ( InputSplit ignored, TaskAttemptContext taskContext)
specifier|public
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|ignored
parameter_list|,
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|taskContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAP_SLEEP_COUNT
argument_list|,
name|MAP_SLEEP_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid map count: "
operator|+
name|count
argument_list|)
throw|;
block|}
specifier|final
name|int
name|redcount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|REDUCE_SLEEP_COUNT
argument_list|,
name|REDUCE_SLEEP_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|redcount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid reduce count: "
operator|+
name|redcount
argument_list|)
throw|;
block|}
specifier|final
name|int
name|emitPerMapTask
init|=
operator|(
name|redcount
operator|*
name|taskContext
operator|.
name|getNumReduceTasks
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|records
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|emitCount
init|=
literal|0
decl_stmt|;
specifier|private
name|IntWritable
name|key
init|=
literal|null
decl_stmt|;
specifier|private
name|IntWritable
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{         }
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|key
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|emitCount
argument_list|)
expr_stmt|;
name|int
name|emit
init|=
name|emitPerMapTask
operator|/
name|count
decl_stmt|;
if|if
condition|(
operator|(
name|emitPerMapTask
operator|)
operator|%
name|count
operator|>
name|records
condition|)
block|{
operator|++
name|emit
expr_stmt|;
block|}
name|emitCount
operator|+=
name|emit
expr_stmt|;
name|value
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|emit
argument_list|)
expr_stmt|;
return|return
name|records
operator|++
operator|<
name|count
return|;
block|}
specifier|public
name|IntWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|IntWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{ }
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|100
else|:
name|records
operator|/
operator|(
operator|(
name|float
operator|)
name|count
operator|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * Interface used to simulate different progress rates of the tasks.    */
DECL|interface|SleepDurationCalculator
specifier|public
interface|interface
name|SleepDurationCalculator
block|{
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
function_decl|;
block|}
comment|/**    * All tasks have the same progress.    */
DECL|class|SleepDurationCalcImpl
specifier|public
specifier|static
class|class
name|SleepDurationCalcImpl
implements|implements
name|SleepDurationCalculator
block|{
DECL|field|threshold
specifier|private
name|double
name|threshold
init|=
literal|1.0
decl_stmt|;
DECL|field|slowFactor
specifier|private
name|double
name|slowFactor
init|=
literal|1.0
decl_stmt|;
DECL|method|SleepDurationCalcImpl ()
name|SleepDurationCalcImpl
parameter_list|()
block|{      }
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
specifier|public
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
block|{
if|if
condition|(
name|threshold
operator|<=
operator|(
operator|(
name|double
operator|)
name|currCount
operator|)
operator|/
name|totalCount
condition|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
name|slowFactor
operator|*
name|defaultSleepDuration
argument_list|)
return|;
block|}
return|return
name|defaultSleepDuration
return|;
block|}
block|}
comment|/**    * The first attempt of task_0 slows down by a small factor that should not    * trigger a speculation. An speculated attempt should never beat the    * original task.    * A conservative estimator/speculator will speculate another attempt    * because of the slower progress.    */
DECL|class|SlowingSleepDurationCalcImpl
specifier|public
specifier|static
class|class
name|SlowingSleepDurationCalcImpl
implements|implements
name|SleepDurationCalculator
block|{
DECL|field|threshold
specifier|private
name|double
name|threshold
init|=
literal|0.4
decl_stmt|;
DECL|field|slowFactor
specifier|private
name|double
name|slowFactor
init|=
literal|1.2
decl_stmt|;
DECL|method|SlowingSleepDurationCalcImpl ()
name|SlowingSleepDurationCalcImpl
parameter_list|()
block|{      }
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
specifier|public
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
block|{
if|if
condition|(
operator|(
name|taId
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|threshold
operator|<=
operator|(
operator|(
name|double
operator|)
name|currCount
operator|)
operator|/
name|totalCount
condition|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
name|slowFactor
operator|*
name|defaultSleepDuration
argument_list|)
return|;
block|}
block|}
return|return
name|defaultSleepDuration
return|;
block|}
block|}
comment|/**    * The progress of the first Mapper task is stalled by 100 times the other    * tasks.    * The speculated attempt should be succeed if the estimator detects    * the slow down on time.    */
DECL|class|StalledSleepDurationCalcImpl
specifier|public
specifier|static
class|class
name|StalledSleepDurationCalcImpl
implements|implements
name|SleepDurationCalculator
block|{
DECL|method|StalledSleepDurationCalcImpl ()
name|StalledSleepDurationCalcImpl
parameter_list|()
block|{      }
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
specifier|public
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
block|{
if|if
condition|(
operator|(
name|taId
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|1000
operator|*
name|defaultSleepDuration
return|;
block|}
return|return
name|defaultSleepDuration
return|;
block|}
block|}
comment|/**    * Emulates the behavior with a step change in the progress.    */
DECL|class|StepStalledSleepDurationCalcImpl
specifier|public
specifier|static
class|class
name|StepStalledSleepDurationCalcImpl
implements|implements
name|SleepDurationCalculator
block|{
DECL|field|threshold
specifier|private
name|double
name|threshold
init|=
literal|0.4
decl_stmt|;
DECL|field|slowFactor
specifier|private
name|double
name|slowFactor
init|=
literal|10000
decl_stmt|;
DECL|method|StepStalledSleepDurationCalcImpl ()
name|StepStalledSleepDurationCalcImpl
parameter_list|()
block|{      }
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
specifier|public
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
block|{
if|if
condition|(
operator|(
name|taId
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|threshold
operator|<=
operator|(
operator|(
name|double
operator|)
name|currCount
operator|)
operator|/
name|totalCount
condition|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
name|slowFactor
operator|*
name|defaultSleepDuration
argument_list|)
return|;
block|}
block|}
return|return
name|defaultSleepDuration
return|;
block|}
block|}
comment|/**    * Dynamically slows down the progress of the first Mapper task.    * The speculated attempt should be succeed if the estimator detects    * the slow down on time.    */
DECL|class|DynamicSleepDurationCalcImpl
specifier|public
specifier|static
class|class
name|DynamicSleepDurationCalcImpl
implements|implements
name|SleepDurationCalculator
block|{
DECL|field|thresholds
specifier|private
name|double
index|[]
name|thresholds
decl_stmt|;
DECL|field|slowFactors
specifier|private
name|double
index|[]
name|slowFactors
decl_stmt|;
DECL|method|DynamicSleepDurationCalcImpl ()
name|DynamicSleepDurationCalcImpl
parameter_list|()
block|{
name|thresholds
operator|=
operator|new
name|double
index|[]
block|{
literal|0.1
block|,
literal|0.25
block|,
literal|0.4
block|,
literal|0.5
block|,
literal|0.6
block|,
literal|0.65
block|,
literal|0.7
block|,
literal|0.8
block|,
literal|0.9
block|}
expr_stmt|;
name|slowFactors
operator|=
operator|new
name|double
index|[]
block|{
literal|2.0
block|,
literal|4.0
block|,
literal|5.0
block|,
literal|6.0
block|,
literal|10.0
block|,
literal|15.0
block|,
literal|20.0
block|,
literal|25.0
block|,
literal|30.0
block|}
expr_stmt|;
block|}
DECL|method|calcSleepDuration (TaskAttemptID taId, int currCount, int totalCount, long defaultSleepDuration)
specifier|public
name|long
name|calcSleepDuration
parameter_list|(
name|TaskAttemptID
name|taId
parameter_list|,
name|int
name|currCount
parameter_list|,
name|int
name|totalCount
parameter_list|,
name|long
name|defaultSleepDuration
parameter_list|)
block|{
if|if
condition|(
operator|(
name|taId
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|taId
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|double
name|currProgress
init|=
operator|(
operator|(
name|double
operator|)
name|currCount
operator|)
operator|/
name|totalCount
decl_stmt|;
name|double
name|slowFactor
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thresholds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|thresholds
index|[
name|i
index|]
operator|>=
name|currProgress
condition|)
block|{
break|break;
block|}
name|slowFactor
operator|=
name|slowFactors
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
call|(
name|long
call|)
argument_list|(
name|slowFactor
operator|*
name|defaultSleepDuration
argument_list|)
return|;
block|}
return|return
name|defaultSleepDuration
return|;
block|}
block|}
comment|/**    * Dummy class for testing Speculation. Sleeps for a defined period    * of time in mapper. Generates fake input for map / reduce    * jobs. Note that generated number of input pairs is in the order    * of<code>numMappers * mapSleepTime / 100</code>, so the job uses    * some disk space.    * The sleep duration for a given task is going to slowDown to evaluate    * the estimator    */
DECL|class|SpeculativeSleepMapper
specifier|public
specifier|static
class|class
name|SpeculativeSleepMapper
extends|extends
name|Mapper
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|mapSleepDuration
specifier|private
name|long
name|mapSleepDuration
init|=
name|MAP_SLEEP_TIME_DEFAULT
decl_stmt|;
DECL|field|mapSleepCount
specifier|private
name|int
name|mapSleepCount
init|=
literal|1
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|sleepCalc
specifier|private
name|SleepDurationCalculator
name|sleepCalc
init|=
operator|new
name|SleepDurationCalcImpl
argument_list|()
decl_stmt|;
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|mapSleepCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAP_SLEEP_COUNT
argument_list|,
name|mapSleepCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapSleepDuration
operator|=
name|mapSleepCount
operator|==
literal|0
condition|?
literal|0
else|:
name|conf
operator|.
name|getLong
argument_list|(
name|MAP_SLEEP_TIME
argument_list|,
name|MAP_SLEEP_TIME_DEFAULT
argument_list|)
operator|/
name|mapSleepCount
expr_stmt|;
name|this
operator|.
name|sleepCalc
operator|=
name|mapSleepTypeMapper
operator|.
name|get
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MAP_SLEEP_CALCULATOR_TYPE
argument_list|,
name|MAP_SLEEP_CALCULATOR_TYPE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|map (IntWritable key, IntWritable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|IntWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//it is expected that every map processes mapSleepCount number of records.
try|try
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Sleeping... ("
operator|+
operator|(
name|mapSleepDuration
operator|*
operator|(
name|mapSleepCount
operator|-
name|count
operator|)
operator|)
operator|+
literal|") ms left"
argument_list|)
expr_stmt|;
name|long
name|sleepTime
init|=
name|sleepCalc
operator|.
name|calcSleepDuration
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|count
argument_list|,
name|mapSleepCount
argument_list|,
name|mapSleepDuration
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
throw|;
block|}
operator|++
name|count
expr_stmt|;
comment|// output reduceSleepCount * numReduce number of random values, so that
comment|// each reducer will get reduceSleepCount number of keys.
name|int
name|k
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|get
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|context
operator|.
name|write
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|k
operator|+
name|i
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Implementation of the reducer task for testing.    */
DECL|class|SpeculativeSleepReducer
specifier|public
specifier|static
class|class
name|SpeculativeSleepReducer
extends|extends
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|reduceSleepDuration
specifier|private
name|long
name|reduceSleepDuration
init|=
name|REDUCE_SLEEP_TIME_DEFAULT
decl_stmt|;
DECL|field|reduceSleepCount
specifier|private
name|int
name|reduceSleepCount
init|=
literal|1
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|reduceSleepCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|REDUCE_SLEEP_COUNT
argument_list|,
name|reduceSleepCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|reduceSleepDuration
operator|=
name|reduceSleepCount
operator|==
literal|0
condition|?
literal|0
else|:
name|conf
operator|.
name|getLong
argument_list|(
name|REDUCE_SLEEP_TIME
argument_list|,
name|REDUCE_SLEEP_TIME_DEFAULT
argument_list|)
operator|/
name|reduceSleepCount
expr_stmt|;
block|}
DECL|method|reduce (IntWritable key, Iterable<NullWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|NullWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Sleeping... ("
operator|+
operator|(
name|reduceSleepDuration
operator|*
operator|(
name|reduceSleepCount
operator|-
name|count
operator|)
operator|)
operator|+
literal|") ms left"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|reduceSleepDuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * A class used to map the estimatopr implementation to the expected    * test results.    */
DECL|class|EstimatorMetricsPair
class|class
name|EstimatorMetricsPair
block|{
DECL|field|estimatorClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|estimatorClass
decl_stmt|;
DECL|field|expectedMapTasks
specifier|private
name|int
name|expectedMapTasks
decl_stmt|;
DECL|field|expectedReduceTasks
specifier|private
name|int
name|expectedReduceTasks
decl_stmt|;
DECL|field|speculativeEstimator
specifier|private
name|boolean
name|speculativeEstimator
decl_stmt|;
DECL|method|EstimatorMetricsPair (Class<?> estimatorClass, int mapTasks, int reduceTasks, boolean isToSpeculate)
name|EstimatorMetricsPair
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|estimatorClass
parameter_list|,
name|int
name|mapTasks
parameter_list|,
name|int
name|reduceTasks
parameter_list|,
name|boolean
name|isToSpeculate
parameter_list|)
block|{
name|this
operator|.
name|estimatorClass
operator|=
name|estimatorClass
expr_stmt|;
name|this
operator|.
name|expectedMapTasks
operator|=
name|mapTasks
expr_stmt|;
name|this
operator|.
name|expectedReduceTasks
operator|=
name|reduceTasks
expr_stmt|;
name|this
operator|.
name|speculativeEstimator
operator|=
name|isToSpeculate
expr_stmt|;
block|}
DECL|method|didSpeculate (Counters counters)
name|boolean
name|didSpeculate
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|long
name|launchedMaps
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|launchedReduce
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|isSpeculated
init|=
operator|(
name|launchedMaps
operator|>
name|expectedMapTasks
operator|||
name|launchedReduce
operator|>
name|expectedReduceTasks
operator|)
decl_stmt|;
return|return
name|isSpeculated
return|;
block|}
DECL|method|getErrorMessage (Counters counters)
name|String
name|getErrorMessage
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unexpected tasks running estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|"\n\t"
decl_stmt|;
name|long
name|launchedMaps
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|launchedReduce
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|speculativeEstimator
condition|)
block|{
if|if
condition|(
name|launchedMaps
operator|<
name|expectedMapTasks
condition|)
block|{
name|msg
operator|+=
literal|"maps "
operator|+
name|launchedMaps
operator|+
literal|", expected: "
operator|+
name|expectedMapTasks
expr_stmt|;
block|}
if|if
condition|(
name|launchedReduce
operator|<
name|expectedReduceTasks
condition|)
block|{
name|msg
operator|+=
literal|", reduces "
operator|+
name|launchedReduce
operator|+
literal|", expected: "
operator|+
name|expectedReduceTasks
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|launchedMaps
operator|>
name|expectedMapTasks
condition|)
block|{
name|msg
operator|+=
literal|"maps "
operator|+
name|launchedMaps
operator|+
literal|", expected: "
operator|+
name|expectedMapTasks
expr_stmt|;
block|}
if|if
condition|(
name|launchedReduce
operator|>
name|expectedReduceTasks
condition|)
block|{
name|msg
operator|+=
literal|", reduces "
operator|+
name|launchedReduce
operator|+
literal|", expected: "
operator|+
name|expectedReduceTasks
expr_stmt|;
block|}
block|}
return|return
name|msg
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecDynamicSlowingSpeculative ()
specifier|public
name|void
name|testExecDynamicSlowingSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*------------------------------------------------------------------      * Test that Map/Red speculates because:      * 1- all tasks have same progress rate except for task_0      * 2- task_0 slows down by dynamic increasing factor      * 3- A good estimator should readjust the estimation and the speculator      *    launches a new task.      *      * Expected:      * A- SimpleExponentialTaskRuntimeEstimator: speculates a successful      *    attempt to beat the slowing task_0      * B- LegacyTaskRuntimeEstimator: speculates an attempt      * C- ExponentiallySmoothedTaskRuntimeEstimator: Fails to detect the slow      *    down and never speculates but it may speculate other tasks      *    (mappers or reducers)      * -----------------------------------------------------------------      */
name|chosenSleepCalc
operator|=
literal|"dynamic_slowing_run"
expr_stmt|;
if|if
condition|(
name|ignoredTests
operator|.
name|contains
argument_list|(
name|chosenSleepCalc
argument_list|)
condition|)
block|{
return|return;
block|}
name|EstimatorMetricsPair
index|[]
name|estimatorPairs
init|=
operator|new
name|EstimatorMetricsPair
index|[]
block|{
operator|new
name|EstimatorMetricsPair
argument_list|(
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|LegacyTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|ExponentiallySmoothedTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|EstimatorMetricsPair
name|specEstimator
range|:
name|estimatorPairs
control|)
block|{
if|if
condition|(
operator|!
name|estimatorClass
operator|.
name|equals
argument_list|(
name|specEstimator
operator|.
name|estimatorClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+++ Dynamic Slow Progress testing against "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|" +++"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|runSpecTest
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
name|specEstimator
operator|.
name|getErrorMessage
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|boolean
name|didSpeculate
init|=
name|specEstimator
operator|.
name|didSpeculate
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errorMessage
argument_list|,
name|didSpeculate
argument_list|,
name|specEstimator
operator|.
name|speculativeEstimator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failed maps higher than 0 "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecSlowNonSpeculative ()
specifier|public
name|void
name|testExecSlowNonSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*------------------------------------------------------------------      * Test that Map/Red does not speculate because:      * 1- all tasks have same progress rate except for task_0      * 2- task_0 slows down by 0.5 after 50% of the workload      * 3- A good estimator may adjust the estimation that the task will finish      *    sooner than a new speculated task.      *      * Expected:      * A- SimpleExponentialTaskRuntimeEstimator: does not speculate because      *    the new attempt estimated end time is not going to be smaller than the      *    original end time.      * B- LegacyTaskRuntimeEstimator: speculates an attempt      * C- ExponentiallySmoothedTaskRuntimeEstimator: speculates an attempt.      * -----------------------------------------------------------------      */
name|chosenSleepCalc
operator|=
literal|"slowing_run"
expr_stmt|;
if|if
condition|(
name|ignoredTests
operator|.
name|contains
argument_list|(
name|chosenSleepCalc
argument_list|)
condition|)
block|{
return|return;
block|}
name|EstimatorMetricsPair
index|[]
name|estimatorPairs
init|=
operator|new
name|EstimatorMetricsPair
index|[]
block|{
operator|new
name|EstimatorMetricsPair
argument_list|(
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|LegacyTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|ExponentiallySmoothedTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|EstimatorMetricsPair
name|specEstimator
range|:
name|estimatorPairs
control|)
block|{
if|if
condition|(
operator|!
name|estimatorClass
operator|.
name|equals
argument_list|(
name|specEstimator
operator|.
name|estimatorClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+++ Linear Slow Progress Non Speculative testing against "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|" +++"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|runSpecTest
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
name|specEstimator
operator|.
name|getErrorMessage
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|boolean
name|didSpeculate
init|=
name|specEstimator
operator|.
name|didSpeculate
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errorMessage
argument_list|,
name|didSpeculate
argument_list|,
name|specEstimator
operator|.
name|speculativeEstimator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failed maps higher than 0 "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecStepStalledSpeculative ()
specifier|public
name|void
name|testExecStepStalledSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*------------------------------------------------------------------      * Test that Map/Red speculates because:      * 1- all tasks have same progress rate except for task_0      * 2- task_0 has long sleep duration      * 3- A good estimator may adjust the estimation that the task will finish      *    sooner than a new speculated task.      *      * Expected:      * A- SimpleExponentialTaskRuntimeEstimator: speculates      * B- LegacyTaskRuntimeEstimator: speculates      * C- ExponentiallySmoothedTaskRuntimeEstimator: speculates      * -----------------------------------------------------------------      */
name|chosenSleepCalc
operator|=
literal|"step_stalled_run"
expr_stmt|;
if|if
condition|(
name|ignoredTests
operator|.
name|contains
argument_list|(
name|chosenSleepCalc
argument_list|)
condition|)
block|{
return|return;
block|}
name|EstimatorMetricsPair
index|[]
name|estimatorPairs
init|=
operator|new
name|EstimatorMetricsPair
index|[]
block|{
operator|new
name|EstimatorMetricsPair
argument_list|(
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|LegacyTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|ExponentiallySmoothedTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|EstimatorMetricsPair
name|specEstimator
range|:
name|estimatorPairs
control|)
block|{
if|if
condition|(
operator|!
name|estimatorClass
operator|.
name|equals
argument_list|(
name|specEstimator
operator|.
name|estimatorClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+++ Stalled Progress testing against "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|" +++"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|runSpecTest
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
name|specEstimator
operator|.
name|getErrorMessage
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|boolean
name|didSpeculate
init|=
name|specEstimator
operator|.
name|didSpeculate
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errorMessage
argument_list|,
name|didSpeculate
argument_list|,
name|specEstimator
operator|.
name|speculativeEstimator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failed maps higher than 0 "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecStalledSpeculative ()
specifier|public
name|void
name|testExecStalledSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*------------------------------------------------------------------      * Test that Map/Red speculates because:      * 1- all tasks have same progress rate except for task_0      * 2- task_0 has long sleep duration      * 3- A good estimator may adjust the estimation that the task will finish      *    sooner than a new speculated task.      *      * Expected:      * A- SimpleExponentialTaskRuntimeEstimator: speculates      * B- LegacyTaskRuntimeEstimator: speculates      * C- ExponentiallySmoothedTaskRuntimeEstimator: speculates      * -----------------------------------------------------------------      */
name|chosenSleepCalc
operator|=
literal|"stalled_run"
expr_stmt|;
if|if
condition|(
name|ignoredTests
operator|.
name|contains
argument_list|(
name|chosenSleepCalc
argument_list|)
condition|)
block|{
return|return;
block|}
name|EstimatorMetricsPair
index|[]
name|estimatorPairs
init|=
operator|new
name|EstimatorMetricsPair
index|[]
block|{
operator|new
name|EstimatorMetricsPair
argument_list|(
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|LegacyTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|ExponentiallySmoothedTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|EstimatorMetricsPair
name|specEstimator
range|:
name|estimatorPairs
control|)
block|{
if|if
condition|(
operator|!
name|estimatorClass
operator|.
name|equals
argument_list|(
name|specEstimator
operator|.
name|estimatorClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+++ Stalled Progress testing against "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|" +++"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|runSpecTest
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
name|specEstimator
operator|.
name|getErrorMessage
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|boolean
name|didSpeculate
init|=
name|specEstimator
operator|.
name|didSpeculate
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errorMessage
argument_list|,
name|didSpeculate
argument_list|,
name|specEstimator
operator|.
name|speculativeEstimator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failed maps higher than 0 "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecNonSpeculative ()
specifier|public
name|void
name|testExecNonSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*------------------------------------------------------------------      * Test that Map/Red does not speculate because all tasks progress in the      *    same rate.      *      * Expected:      * A- SimpleExponentialTaskRuntimeEstimator: does not speculate      * B- LegacyTaskRuntimeEstimator: speculates      * C- ExponentiallySmoothedTaskRuntimeEstimator: speculates      * -----------------------------------------------------------------      */
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ignoredTests
operator|.
name|contains
argument_list|(
name|chosenSleepCalc
argument_list|)
condition|)
block|{
return|return;
block|}
name|EstimatorMetricsPair
index|[]
name|estimatorPairs
init|=
operator|new
name|EstimatorMetricsPair
index|[]
block|{
operator|new
name|EstimatorMetricsPair
argument_list|(
name|LegacyTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|SimpleExponentialTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|EstimatorMetricsPair
argument_list|(
name|ExponentiallySmoothedTaskRuntimeEstimator
operator|.
name|class
argument_list|,
name|myNumMapper
argument_list|,
name|myNumReduce
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|EstimatorMetricsPair
name|specEstimator
range|:
name|estimatorPairs
control|)
block|{
if|if
condition|(
operator|!
name|estimatorClass
operator|.
name|equals
argument_list|(
name|specEstimator
operator|.
name|estimatorClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+++ No Speculation testing against "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|" +++"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|runSpecTest
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job expected to succeed with estimator "
operator|+
name|estimatorClass
operator|.
name|getName
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
name|specEstimator
operator|.
name|getErrorMessage
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|boolean
name|didSpeculate
init|=
name|specEstimator
operator|.
name|didSpeculate
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|errorMessage
argument_list|,
name|didSpeculate
argument_list|,
name|specEstimator
operator|.
name|speculativeEstimator
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runSpecTest ()
specifier|private
name|Job
name|runSpecTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|mrCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
name|ENABLE_SPECULATIVE_MAP
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
name|ENABLE_SPECULATIVE_REDUCE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TASK_ESTIMATOR
argument_list|,
name|estimatorClass
argument_list|,
name|TaskRuntimeEstimator
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MAP_SLEEP_TIME
argument_list|,
name|myMapSleepTime
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|REDUCE_SLEEP_TIME
argument_list|,
name|myReduceSleepTime
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MAP_SLEEP_COUNT
argument_list|,
name|myMapSleepCount
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|REDUCE_SLEEP_COUNT
argument_list|,
name|myReduceSleepCount
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
name|myNumMapper
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MAP_SLEEP_CALCULATOR_TYPE
argument_list|,
name|chosenSleepCalc
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TestSpeculativeExecution
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SpeculativeSleepMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SpeculativeSleepReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SpeculativeSleepInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|SpeculativeSleepJobPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|myNumReduce
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
literal|"ignored"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete output directory if it exists.
try|try
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|TEST_OUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|TEST_OUT_DIR
argument_list|)
expr_stmt|;
comment|// Creates the Job Configuration
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
end_class

end_unit

