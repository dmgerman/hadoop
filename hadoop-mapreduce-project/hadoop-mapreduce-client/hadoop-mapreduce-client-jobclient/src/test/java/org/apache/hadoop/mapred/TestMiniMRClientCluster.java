begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Basic testing for the MiniMRClientCluster. This test shows an example class  * that can be used in MR1 or MR2, without any change to the test. The test will  * use MiniMRYarnCluster in MR2, and MiniMRCluster in MR1.  */
end_comment

begin_class
DECL|class|TestMiniMRClientCluster
specifier|public
class|class
name|TestMiniMRClientCluster
block|{
DECL|field|inDir
specifier|private
specifier|static
name|Path
name|inDir
init|=
literal|null
decl_stmt|;
DECL|field|outDir
specifier|private
specifier|static
name|Path
name|outDir
init|=
literal|null
decl_stmt|;
DECL|field|testdir
specifier|private
specifier|static
name|Path
name|testdir
init|=
literal|null
decl_stmt|;
DECL|field|inFiles
specifier|private
specifier|static
name|Path
index|[]
name|inFiles
init|=
operator|new
name|Path
index|[
literal|5
index|]
decl_stmt|;
DECL|field|mrCluster
specifier|private
specifier|static
name|MiniMRClientCluster
name|mrCluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"TestMiniMRClientCluster"
argument_list|)
expr_stmt|;
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"out"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete "
operator|+
name|testdir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inFiles
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|inFiles
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// create the mini cluster to be used for the tests
name|mrCluster
operator|=
name|MiniMRClientClusterFactory
operator|.
name|create
argument_list|(
name|TestMiniMRClientCluster
operator|.
name|class
argument_list|,
literal|1
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// clean up the input and output files
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// stopping the mini cluster
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJob ()
specifier|public
name|void
name|testJob
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
literal|"testJob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|validateCounters
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCounters (Counters counters, long mapInputRecords, long mapOutputRecords, long reduceInputGroups, long reduceOutputRecords)
specifier|private
name|void
name|validateCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|long
name|mapInputRecords
parameter_list|,
name|long
name|mapOutputRecords
parameter_list|,
name|long
name|reduceInputGroups
parameter_list|,
name|long
name|reduceOutputRecords
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"MapInputRecords"
argument_list|,
name|mapInputRecords
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MapOutputRecords"
argument_list|,
name|mapOutputRecords
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ReduceInputGroups"
argument_list|,
name|reduceInputGroups
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"REDUCE_INPUT_GROUPS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ReduceOutputRecords"
argument_list|,
name|reduceOutputRecords
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (Path inFile, Configuration conf)
specifier|private
specifier|static
name|void
name|createFile
parameter_list|(
name|Path
name|inFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|inFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inFile
argument_list|)
condition|)
block|{
return|return;
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"This is a test file"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createJob ()
specifier|public
specifier|static
name|Job
name|createJob
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Job
name|baseJob
init|=
operator|new
name|Job
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|baseJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setReducerClass
argument_list|(
name|MyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|baseJob
return|;
block|}
DECL|class|MyMapper
specifier|public
specifier|static
class|class
name|MyMapper
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|Object
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|one
specifier|private
specifier|final
specifier|static
name|IntWritable
name|one
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|word
specifier|private
name|Text
name|word
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|method|map (Object key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|context
operator|.
name|getCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|StringTokenizer
name|iter
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|.
name|set
argument_list|(
name|iter
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|word
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MyReducer
specifier|public
specifier|static
class|class
name|MyReducer
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|result
specifier|private
name|IntWritable
name|result
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
DECL|method|reduce (Text key, Iterable<IntWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|context
operator|.
name|getCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"REDUCE_INPUT_GROUPS"
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntWritable
name|val
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|val
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
literal|"MyCounterGroup"
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

