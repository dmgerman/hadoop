begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test the Map-Reduce framework's support for the  * "mark-reset" functionality in Reduce Values Iterator  */
end_comment

begin_class
DECL|class|TestValueIterReset
specifier|public
class|class
name|TestValueIterReset
block|{
DECL|field|NUM_MAPS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MAPS
init|=
literal|1
decl_stmt|;
DECL|field|NUM_TESTS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TESTS
init|=
literal|4
decl_stmt|;
DECL|field|NUM_VALUES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALUES
init|=
literal|40
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem getting local fs"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestValueIterReset
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|TestMapper
specifier|public
specifier|static
class|class
name|TestMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|map (LongWritable key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|IntWritable
name|outKey
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|IntWritable
name|outValue
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_TESTS
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VALUES
condition|;
name|i
operator|++
control|)
block|{
name|outKey
operator|.
name|set
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|outValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|outKey
argument_list|,
name|outValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|TestReducer
specifier|public
specifier|static
class|class
name|TestReducer
extends|extends
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|reduce (IntWritable key, Iterable<IntWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
name|mitr
init|=
operator|new
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|key
operator|.
name|get
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|errors
operator|+=
name|test0
argument_list|(
name|key
argument_list|,
name|mitr
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|errors
operator|+=
name|test1
argument_list|(
name|key
argument_list|,
name|mitr
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|errors
operator|+=
name|test2
argument_list|(
name|key
argument_list|,
name|mitr
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|errors
operator|+=
name|test3
argument_list|(
name|key
argument_list|,
name|mitr
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the most common use case. Mark before start of the iteration and    * reset at the end to go over the entire list    * @param key    * @param values    * @return    * @throws IOException    */
DECL|method|test0 (IntWritable key, MarkableIterator<IntWritable> values)
specifier|private
specifier|static
name|int
name|test0
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|IntWritable
name|i
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing TEST:0 for Key:"
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:0. Marking"
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:0. Reset"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:0. Check:1 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
return|return
name|errors
return|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:0 Done"
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
comment|/**    * Test the case where we do a mark outside of a reset. Test for both file    * and memory caches    * @param key    * @param values    * @return    * @throws IOException    */
DECL|method|test1 (IntWritable key, MarkableIterator<IntWritable> values)
specifier|private
specifier|static
name|int
name|test1
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|IntWritable
name|i
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues1
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing TEST:1 for Key:"
operator|+
name|key
argument_list|)
expr_stmt|;
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Marking"
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|2
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Reset"
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|expectedValues
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Check:1 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
comment|// We have moved passed the first mark, but still in the memory cache
if|if
condition|(
name|count
operator|==
literal|3
condition|)
block|{
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Marking -- "
operator|+
name|key
operator|+
literal|": "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|3
condition|)
block|{
name|expectedValues1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|5
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
name|expectedValues
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|(
literal|"TEST:1 Check:2. Iterator returned lesser values"
operator|)
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
return|return
name|errors
return|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Reset"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|expectedValues1
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
name|expectedValues1
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Check:3 Expected: "
operator|+
name|expectedValues1
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
comment|// We have moved passed the previous mark, but now we are in the file
comment|// cache
if|if
condition|(
name|count
operator|==
literal|25
condition|)
block|{
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Marking -- "
operator|+
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|25
condition|)
block|{
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
name|expectedValues1
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|(
literal|"TEST:1 Check:4. Iterator returned fewer values"
operator|)
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
return|return
name|errors
return|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Reset"
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1. Check:5 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:1 Done"
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
comment|/**    * Test the case where we do a mark inside a reset. Test for both file    * and memory    * @param key    * @param values    * @return    * @throws IOException    */
DECL|method|test2 (IntWritable key, MarkableIterator<IntWritable> values)
specifier|private
specifier|static
name|int
name|test2
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|IntWritable
name|i
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues1
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing TEST:2 for Key:"
operator|+
name|key
argument_list|)
expr_stmt|;
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2 Marking"
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|8
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2 reset"
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|expectedValues
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Check:1 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
comment|// We have moved passed the first mark, but still reading from the
comment|// memory cache
if|if
condition|(
name|count
operator|==
literal|3
condition|)
block|{
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Marking -- "
operator|+
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|3
condition|)
block|{
name|expectedValues1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Reset"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|expectedValues1
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
name|expectedValues1
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Check:2 Expected: "
operator|+
name|expectedValues1
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
comment|// We have moved passed the previous mark, but now we are in the file
comment|// cache
if|if
condition|(
name|count
operator|==
literal|20
condition|)
block|{
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Marking -- "
operator|+
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|20
condition|)
block|{
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Reset"
argument_list|)
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Check:1 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2 Done"
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
comment|/**    * Test "clearMark"    * @param key    * @param values    * @return    * @throws IOException    */
DECL|method|test3 (IntWritable key, MarkableIterator<IntWritable> values)
specifier|private
specifier|static
name|int
name|test3
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|MarkableIterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|IntWritable
name|i
decl_stmt|;
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|IntWritable
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing TEST:3 for Key:"
operator|+
name|key
argument_list|)
expr_stmt|;
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. Marking"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
empty_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|5
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. Clearing Mark"
argument_list|)
expr_stmt|;
name|values
operator|.
name|clearMark
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|8
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. Marking -- "
operator|+
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
name|values
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|8
condition|)
block|{
name|expectedValues
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. After reset"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3, Check:1. HasNext returned false"
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|":"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|expectedValues
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:2. Check:1 Expected: "
operator|+
name|expectedValues
operator|.
name|get
argument_list|(
name|count
argument_list|)
operator|+
literal|", Got: "
operator|+
name|i
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|10
condition|)
block|{
name|values
operator|.
name|clearMark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. After clear mark"
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|boolean
name|successfulClearMark
init|=
literal|false
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3. Before Reset"
argument_list|)
expr_stmt|;
name|values
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|successfulClearMark
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|successfulClearMark
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3 Check:4 reset was successfule even after clearMark"
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
return|return
name|errors
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"TEST:3 Done."
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
DECL|method|createInput ()
specifier|public
name|void
name|createInput
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Just create one line files. We use this only to
comment|// control the number of map tasks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MAPS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|,
literal|"test"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValueIterReset ()
specifier|public
name|void
name|testValueIterReset
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"TestValueIterReset"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TestValueIterReset
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|TestMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|TestReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|NUM_TESTS
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MARKRESET_BUFFER_SIZE
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|output
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|createInput
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|validateOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateOutput ()
specifier|private
name|void
name|validateOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|outputFiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|localFs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|InputStream
name|is
init|=
name|localFs
operator|.
name|open
argument_list|(
name|outputFiles
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tokeniz
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|tokeniz
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|tokeniz
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Output: key: "
operator|+
name|key
operator|+
literal|" value: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|int
name|errors
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|==
literal|0
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

