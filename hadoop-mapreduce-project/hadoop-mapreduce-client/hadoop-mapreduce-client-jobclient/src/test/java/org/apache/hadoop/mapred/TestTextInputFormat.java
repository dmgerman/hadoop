begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTextInputFormat
specifier|public
class|class
name|TestTextInputFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTextInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_LENGTH
specifier|private
specifier|static
name|int
name|MAX_LENGTH
init|=
literal|10000
decl_stmt|;
DECL|field|defaultConf
specifier|private
specifier|static
name|JobConf
name|defaultConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|defaultConf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"TestTextInputFormat"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"test.txt"
argument_list|)
decl_stmt|;
comment|// A reporter that does nothing
name|Reporter
name|reporter
init|=
name|Reporter
operator|.
name|NULL
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
comment|// for a variety of lengths
for|for
control|(
name|int
name|length
init|=
literal|0
init|;
name|length
operator|<
name|MAX_LENGTH
condition|;
name|length
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_LENGTH
operator|/
literal|10
argument_list|)
operator|+
literal|1
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating; entries = "
operator|+
name|length
argument_list|)
expr_stmt|;
comment|// create a file with length entries
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// try splitting the file in a variety of sizes
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numSplits
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_LENGTH
operator|/
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"splitting: requesting = "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"splitting: got =        "
operator|+
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Files of length 0 are not returned from FileInputFormat.getSplits()."
argument_list|,
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Empty file length == 0"
argument_list|,
literal|0
argument_list|,
name|splits
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check each split
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|splits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"split["
operator|+
name|j
operator|+
literal|"]= "
operator|+
name|splits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
name|j
index|]
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"read "
operator|+
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"conflict with "
operator|+
name|v
operator|+
literal|" in split "
operator|+
name|j
operator|+
literal|" at position "
operator|+
name|reader
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Key in multiple partitions."
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"splits["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|splits
index|[
name|j
index|]
operator|+
literal|" count="
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Some keys in no partition."
argument_list|,
name|length
argument_list|,
name|bits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|900000
argument_list|)
DECL|method|testSplitableCodecs ()
specifier|public
name|void
name|testSplitableCodecs
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
comment|// Create the codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"test"
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
decl_stmt|;
comment|// A reporter that does nothing
name|Reporter
name|reporter
init|=
name|Reporter
operator|.
name|NULL
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MAX_LENGTH
init|=
literal|500000
decl_stmt|;
comment|// for a variety of lengths
for|for
control|(
name|int
name|length
init|=
name|MAX_LENGTH
operator|/
literal|2
init|;
name|length
operator|<
name|MAX_LENGTH
condition|;
name|length
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_LENGTH
operator|/
literal|4
argument_list|)
operator|+
literal|1
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numSplits
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_LENGTH
operator|/
literal|2000
argument_list|)
operator|+
literal|1
decl_stmt|;
name|verifyPartitions
argument_list|(
name|length
argument_list|,
name|numSplits
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// corner case when we have byte alignment and position of stream are same
name|verifyPartitions
argument_list|(
literal|471507
argument_list|,
literal|218
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verifyPartitions
argument_list|(
literal|473608
argument_list|,
literal|110
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Test a corner case when position of stream is right after BZip2 marker
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|900000
argument_list|)
DECL|method|testSplitableCodecs2 ()
specifier|public
name|void
name|testSplitableCodecs2
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
comment|// Create the codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"test"
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|int
name|length
init|=
literal|250000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating; entries = "
operator|+
name|length
argument_list|)
expr_stmt|;
comment|// create a file with length entries
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test split positions around a block boundary where the block does
comment|// not start on a byte boundary.
for|for
control|(
name|long
name|splitpos
init|=
literal|203418
init|;
name|splitpos
operator|<
literal|203430
condition|;
operator|++
name|splitpos
control|)
block|{
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setting block size of the input file to "
operator|+
name|splitpos
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapreduce.input.fileinputformat.split.minsize"
argument_list|,
name|splitpos
argument_list|)
expr_stmt|;
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitting: got =        "
operator|+
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check each split
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|splits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"split["
operator|+
name|j
operator|+
literal|"]= "
operator|+
name|splits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
name|j
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"read "
operator|+
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"conflict with "
operator|+
name|v
operator|+
literal|" in split "
operator|+
name|j
operator|+
literal|" at position "
operator|+
name|reader
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Key in multiple partitions."
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"splits["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|splits
index|[
name|j
index|]
operator|+
literal|" count="
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"splits["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|splits
index|[
name|j
index|]
operator|+
literal|" count="
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Some keys in no partition."
argument_list|,
name|length
argument_list|,
name|bits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyPartitions (int length, int numSplits, Path file, CompressionCodec codec, JobConf conf)
specifier|private
name|void
name|verifyPartitions
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating; entries = "
operator|+
name|length
argument_list|)
expr_stmt|;
comment|// create a file with length entries
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// try splitting the file in a variety of sizes
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitting: requesting = "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitting: got =        "
operator|+
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check each split
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|splits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"split["
operator|+
name|j
operator|+
literal|"]= "
operator|+
name|splits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
name|j
index|]
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"read "
operator|+
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"conflict with "
operator|+
name|v
operator|+
literal|" in split "
operator|+
name|j
operator|+
literal|" at position "
operator|+
name|reader
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Key in multiple partitions."
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"splits["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|splits
index|[
name|j
index|]
operator|+
literal|" count="
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"splits["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|splits
index|[
name|j
index|]
operator|+
literal|" count="
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Some keys in no partition."
argument_list|,
name|length
argument_list|,
name|bits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|makeStream (String str)
specifier|private
specifier|static
name|LineReader
name|makeStream
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|defaultConf
argument_list|)
return|;
block|}
DECL|method|makeStream (String str, int bufsz)
specifier|private
specifier|static
name|LineReader
name|makeStream
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|bufsz
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|bufsz
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testUTF8 ()
specifier|public
name|void
name|testUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|LineReader
name|in
init|=
name|makeStream
argument_list|(
literal|"abcd\u20acbdcd\u20ac"
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|in
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"readLine changed utf8 characters"
argument_list|,
literal|"abcd\u20acbdcd\u20ac"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
name|makeStream
argument_list|(
literal|"abc\u200axyz"
argument_list|)
expr_stmt|;
name|in
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"split on fake newline"
argument_list|,
literal|"abc\u200axyz"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test readLine for various kinds of line termination sequneces.    * Varies buffer size to stress test.  Also check that returned    * value matches the string length.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNewLines ()
specifier|public
name|void
name|testNewLines
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|STR
init|=
literal|"a\nbb\n\nccc\rdddd\r\r\r\n\r\neeeee"
decl_stmt|;
specifier|final
name|int
name|STRLENBYTES
init|=
name|STR
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|Text
name|out
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bufsz
init|=
literal|1
init|;
name|bufsz
operator|<
name|STRLENBYTES
operator|+
literal|1
condition|;
operator|++
name|bufsz
control|)
block|{
name|LineReader
name|in
init|=
name|makeStream
argument_list|(
name|STR
argument_list|,
name|bufsz
argument_list|)
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//"a"\n
name|assertEquals
argument_list|(
literal|"line1 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|1
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//"bb"\n
name|assertEquals
argument_list|(
literal|"line2 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|2
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//""\n
name|assertEquals
argument_list|(
literal|"line3 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//"ccc"\r
name|assertEquals
argument_list|(
literal|"line4 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|3
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//dddd\r
name|assertEquals
argument_list|(
literal|"line5 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|4
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//""\r
name|assertEquals
argument_list|(
literal|"line6 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//""\r\n
name|assertEquals
argument_list|(
literal|"line7 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//""\r\n
name|assertEquals
argument_list|(
literal|"line8 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//"eeeee"EOF
name|assertEquals
argument_list|(
literal|"line9 length, bufsz:"
operator|+
name|bufsz
argument_list|,
literal|5
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"end of file, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total bytes, bufsz: "
operator|+
name|bufsz
argument_list|,
name|c
argument_list|,
name|STRLENBYTES
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test readLine for correct interpretation of maxLineLength    * (returned string should be clipped at maxLineLength, and the    * remaining bytes on the same line should be thrown out).    * Also check that returned value matches the string length.    * Varies buffer size to stress test.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMaxLineLength ()
specifier|public
name|void
name|testMaxLineLength
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|STR
init|=
literal|"a\nbb\n\nccc\rdddd\r\neeeee"
decl_stmt|;
specifier|final
name|int
name|STRLENBYTES
init|=
name|STR
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|Text
name|out
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bufsz
init|=
literal|1
init|;
name|bufsz
operator|<
name|STRLENBYTES
operator|+
literal|1
condition|;
operator|++
name|bufsz
control|)
block|{
name|LineReader
name|in
init|=
name|makeStream
argument_list|(
name|STR
argument_list|,
name|bufsz
argument_list|)
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line1 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|1
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line2 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|1
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line3 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line4 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|3
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line5 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|4
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|+=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line5 length, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|5
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"end of file, bufsz: "
operator|+
name|bufsz
argument_list|,
literal|0
argument_list|,
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total bytes, bufsz: "
operator|+
name|bufsz
argument_list|,
name|c
argument_list|,
name|STRLENBYTES
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMRMaxLine ()
specifier|public
name|void
name|testMRMaxLine
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MAXPOS
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|MAXLINE
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|BUF
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|final
name|InputStream
name|infNull
init|=
operator|new
name|InputStream
argument_list|()
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|MAXPOSBUF
init|=
literal|1024
operator|*
literal|1024
operator|+
name|BUF
decl_stmt|;
comment|// max LRR pos + LineReader buf
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
operator|++
name|position
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Read too many bytes from the stream"
argument_list|,
name|position
operator|<
name|MAXPOSBUF
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|position
operator|+=
name|b
operator|.
name|length
expr_stmt|;
return|return
name|b
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|position
operator|=
literal|0
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading a line from /dev/null"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|LineRecordReader
operator|.
name|MAX_LINE_LENGTH
argument_list|,
name|MAXLINE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|BUF
argument_list|)
expr_stmt|;
comment|// used by LRR
comment|// test another constructor
name|LineRecordReader
name|lrr
init|=
operator|new
name|LineRecordReader
argument_list|(
name|infNull
argument_list|,
literal|0
argument_list|,
name|MAXPOS
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Read a line from null"
argument_list|,
name|lrr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|infNull
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lrr
operator|=
operator|new
name|LineRecordReader
argument_list|(
name|infNull
argument_list|,
literal|0L
argument_list|,
name|MAXLINE
argument_list|,
name|MAXPOS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Read a line from null"
argument_list|,
name|lrr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fs, Path name, CompressionCodec codec, String contents)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|stm
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stm
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|voidReporter
specifier|private
specifier|static
specifier|final
name|Reporter
name|voidReporter
init|=
name|Reporter
operator|.
name|NULL
decl_stmt|;
DECL|method|readSplit (TextInputFormat format, InputSplit split, JobConf job)
specifier|private
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|readSplit
parameter_list|(
name|TextInputFormat
name|format
parameter_list|,
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|voidReporter
argument_list|)
decl_stmt|;
name|LongWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Test using the gzip codec for reading    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGzip ()
specifier|public
name|void
name|testGzip
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|gzip
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part1.txt.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|"the quick\nbrown\nfox jumped\nover\n the lazy\n dog\n"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part2.txt.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|"this is a test\nof gzip\n"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 2"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSplit
name|tmp
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"part2.txt.gz"
argument_list|)
condition|)
block|{
name|splits
index|[
literal|0
index|]
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|splits
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] length"
argument_list|,
literal|6
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][5]"
argument_list|,
literal|" dog"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1] length"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][0]"
argument_list|,
literal|"this is a test"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][1]"
argument_list|,
literal|"of gzip"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test using the gzip codec and an empty input file    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGzipEmpty ()
specifier|public
name|void
name|testGzipEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|gzip
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"empty.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Compressed files of length 0 are not returned from FileInputFormat.getSplits()."
argument_list|,
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Compressed empty file length == 0"
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unquote (String in)
specifier|private
specifier|static
name|String
name|unquote
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|ch
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|ch
operator|=
name|in
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'n'
case|:
name|result
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|result
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parse the command line arguments into lines and display the result.    * @param args    * @throws Exception    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Working on "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|LineReader
name|reader
init|=
name|makeStream
argument_list|(
name|unquote
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got: "
operator|+
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

