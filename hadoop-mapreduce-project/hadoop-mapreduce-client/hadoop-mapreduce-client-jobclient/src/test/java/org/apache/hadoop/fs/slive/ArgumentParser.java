begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|Distribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Class which abstracts the parsing of command line arguments for slive test  */
end_comment

begin_class
DECL|class|ArgumentParser
class|class
name|ArgumentParser
block|{
DECL|field|optList
specifier|private
name|Options
name|optList
decl_stmt|;
DECL|field|argumentList
specifier|private
name|String
index|[]
name|argumentList
decl_stmt|;
DECL|field|parsed
specifier|private
name|ParsedOutput
name|parsed
decl_stmt|;
comment|/**    * Result of a parse is the following object    */
DECL|class|ParsedOutput
specifier|static
class|class
name|ParsedOutput
block|{
DECL|field|parsedData
specifier|private
name|CommandLine
name|parsedData
decl_stmt|;
DECL|field|source
specifier|private
name|ArgumentParser
name|source
decl_stmt|;
DECL|field|needHelp
specifier|private
name|boolean
name|needHelp
decl_stmt|;
DECL|method|ParsedOutput (CommandLine parsedData, ArgumentParser source, boolean needHelp)
name|ParsedOutput
parameter_list|(
name|CommandLine
name|parsedData
parameter_list|,
name|ArgumentParser
name|source
parameter_list|,
name|boolean
name|needHelp
parameter_list|)
block|{
name|this
operator|.
name|parsedData
operator|=
name|parsedData
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|needHelp
operator|=
name|needHelp
expr_stmt|;
block|}
comment|/**      * @return whether the calling object should call output help and exit      */
DECL|method|shouldOutputHelp ()
name|boolean
name|shouldOutputHelp
parameter_list|()
block|{
return|return
name|needHelp
return|;
block|}
comment|/**      * Outputs the formatted help to standard out      */
DECL|method|outputHelp ()
name|void
name|outputHelp
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shouldOutputHelp
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|HelpFormatter
name|hlp
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|hlp
operator|.
name|printHelp
argument_list|(
name|Constants
operator|.
name|PROG_NAME
operator|+
literal|" "
operator|+
name|Constants
operator|.
name|PROG_VERSION
argument_list|,
name|source
operator|.
name|getOptionList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param optName      *          the option name to get the value for      *       * @return the option value or null if it does not exist      */
DECL|method|getValue (String optName)
name|String
name|getValue
parameter_list|(
name|String
name|optName
parameter_list|)
block|{
if|if
condition|(
name|parsedData
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parsedData
operator|.
name|getOptionValue
argument_list|(
name|optName
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|parsedData
operator|!=
literal|null
condition|)
block|{
name|Option
index|[]
name|ops
init|=
name|parsedData
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ops
index|[
name|i
index|]
operator|.
name|getOpt
argument_list|()
operator|+
literal|" = "
operator|+
name|s
operator|.
name|append
argument_list|(
name|ops
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|ArgumentParser (String[] args)
name|ArgumentParser
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|optList
operator|=
name|getOptions
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
name|args
operator|=
operator|new
name|String
index|[]
block|{}
expr_stmt|;
block|}
name|argumentList
operator|=
name|args
expr_stmt|;
name|parsed
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getOptionList ()
specifier|private
name|Options
name|getOptionList
parameter_list|()
block|{
return|return
name|optList
return|;
block|}
comment|/**    * Parses the command line options    *     * @return false if need to print help output    *     * @throws Exception    *           when parsing fails    */
DECL|method|parse ()
name|ParsedOutput
name|parse
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|parsed
operator|==
literal|null
condition|)
block|{
name|PosixParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|popts
init|=
name|parser
operator|.
name|parse
argument_list|(
name|getOptionList
argument_list|()
argument_list|,
name|argumentList
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|popts
operator|.
name|hasOption
argument_list|(
name|ConfigOption
operator|.
name|HELP
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|parsed
operator|=
operator|new
name|ParsedOutput
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parsed
operator|=
operator|new
name|ParsedOutput
argument_list|(
name|popts
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsed
return|;
block|}
comment|/**    * @return the option set to be used in command line parsing    */
DECL|method|getOptions ()
specifier|private
name|Options
name|getOptions
parameter_list|()
block|{
name|Options
name|cliopt
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|MAPS
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|REDUCES
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|PACKET_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|OPS
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|DURATION
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|EXIT_ON_ERROR
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_WAIT
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|FILES
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|DIR_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|BASE_DIR
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
block|{
name|String
name|distStrs
index|[]
init|=
operator|new
name|String
index|[
name|Distribution
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|Distribution
name|distValues
index|[]
init|=
name|Distribution
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distValues
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|distStrs
index|[
name|i
index|]
operator|=
name|distValues
index|[
name|i
index|]
operator|.
name|lowerName
argument_list|()
expr_stmt|;
block|}
name|String
name|opdesc
init|=
name|String
operator|.
name|format
argument_list|(
name|Constants
operator|.
name|OP_DESCR
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|distStrs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|OperationType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|opname
init|=
name|type
operator|.
name|lowerName
argument_list|()
decl_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|opname
argument_list|,
literal|true
argument_list|,
name|opdesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|REPLICATION_AM
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|READ_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|WRITE_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|APPEND_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_SIZE
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|RANDOM_SEED
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|QUEUE_NAME
argument_list|)
expr_stmt|;
name|cliopt
operator|.
name|addOption
argument_list|(
name|ConfigOption
operator|.
name|HELP
argument_list|)
expr_stmt|;
return|return
name|cliopt
return|;
block|}
block|}
end_class

end_unit

