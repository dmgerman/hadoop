begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_class
DECL|class|TimelineEntityConverterV1
class|class
name|TimelineEntityConverterV1
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineEntityConverterV1
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|JOB
specifier|static
specifier|final
name|String
name|JOB
init|=
literal|"MAPREDUCE_JOB"
decl_stmt|;
DECL|field|TASK
specifier|static
specifier|final
name|String
name|TASK
init|=
literal|"MAPREDUCE_TASK"
decl_stmt|;
DECL|field|TASK_ATTEMPT
specifier|static
specifier|final
name|String
name|TASK_ATTEMPT
init|=
literal|"MAPREDUCE_TASK_ATTEMPT"
decl_stmt|;
comment|/**    * Creates job, task, and task attempt entities based on the job history info    * and configuration.    *    * Note: currently these are plan timeline entities created for mapreduce    * types. These are not meant to be the complete and accurate entity set-up    * for mapreduce jobs. We do not leverage hierarchical timeline entities. If    * we create canonical mapreduce hierarchical timeline entities with proper    * parent-child relationship, we could modify this to use that instead.    *    * Note that we also do not add info to the YARN application entity, which    * would be needed for aggregation.    */
DECL|method|createTimelineEntities (JobInfo jobInfo, Configuration conf)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|createTimelineEntities
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create the job entity
name|TimelineEntity
name|job
init|=
name|createJobEntity
argument_list|(
name|jobInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|entities
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// create the task and task attempt entities
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|tasksAndAttempts
init|=
name|createTaskAndTaskAttemptEntities
argument_list|(
name|jobInfo
argument_list|)
decl_stmt|;
name|entities
operator|.
name|addAll
argument_list|(
name|tasksAndAttempts
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
DECL|method|createJobEntity (JobInfo jobInfo, Configuration conf)
specifier|private
name|TimelineEntity
name|createJobEntity
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|TimelineEntity
name|job
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|job
operator|.
name|setEntityType
argument_list|(
name|JOB
argument_list|)
expr_stmt|;
name|job
operator|.
name|setEntityId
argument_list|(
name|jobInfo
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setStartTime
argument_list|(
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addPrimaryFilter
argument_list|(
literal|"JOBNAME"
argument_list|,
name|jobInfo
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addPrimaryFilter
argument_list|(
literal|"USERNAME"
argument_list|,
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"JOB_QUEUE_NAME"
argument_list|,
name|jobInfo
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"SUBMIT_TIME"
argument_list|,
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"LAUNCH_TIME"
argument_list|,
name|jobInfo
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|jobInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"JOB_STATUS"
argument_list|,
name|jobInfo
operator|.
name|getJobStatus
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"PRIORITY"
argument_list|,
name|jobInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"TOTAL_MAPS"
argument_list|,
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"TOTAL_REDUCES"
argument_list|,
name|jobInfo
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"UBERIZED"
argument_list|,
name|jobInfo
operator|.
name|getUberized
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|addOtherInfo
argument_list|(
literal|"ERROR_INFO"
argument_list|,
name|jobInfo
operator|.
name|getErrorInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"converted job "
operator|+
name|jobInfo
operator|.
name|getJobId
argument_list|()
operator|+
literal|" to a timeline entity"
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|createTaskAndTaskAttemptEntities (JobInfo jobInfo)
specifier|private
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|createTaskAndTaskAttemptEntities
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|)
block|{
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|taskInfoMap
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"job "
operator|+
name|jobInfo
operator|.
name|getJobId
argument_list|()
operator|+
literal|" has "
operator|+
name|taskInfoMap
operator|.
name|size
argument_list|()
operator|+
literal|" tasks"
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfoMap
operator|.
name|values
argument_list|()
control|)
block|{
name|TimelineEntity
name|task
init|=
name|createTaskEntity
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
name|entities
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// add the task attempts from this task
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|taskAttempts
init|=
name|createTaskAttemptEntities
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
name|entities
operator|.
name|addAll
argument_list|(
name|taskAttempts
argument_list|)
expr_stmt|;
block|}
return|return
name|entities
return|;
block|}
DECL|method|createTaskEntity (TaskInfo taskInfo)
specifier|private
name|TimelineEntity
name|createTaskEntity
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|TimelineEntity
name|task
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|task
operator|.
name|setEntityType
argument_list|(
name|TASK
argument_list|)
expr_stmt|;
name|task
operator|.
name|setEntityId
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setStartTime
argument_list|(
name|taskInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addOtherInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|taskInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addOtherInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|taskInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addOtherInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|taskInfo
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addOtherInfo
argument_list|(
literal|"TASK_STATUS"
argument_list|,
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addOtherInfo
argument_list|(
literal|"ERROR_INFO"
argument_list|,
name|taskInfo
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"converted task "
operator|+
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|+
literal|" to a timeline entity"
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
DECL|method|createTaskAttemptEntities (TaskInfo taskInfo)
specifier|private
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|createTaskAttemptEntities
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|taskAttempts
init|=
operator|new
name|HashSet
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|taskAttemptInfoMap
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|+
literal|" has "
operator|+
name|taskAttemptInfoMap
operator|.
name|size
argument_list|()
operator|+
literal|" task attempts"
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttemptInfo
name|taskAttemptInfo
range|:
name|taskAttemptInfoMap
operator|.
name|values
argument_list|()
control|)
block|{
name|TimelineEntity
name|taskAttempt
init|=
name|createTaskAttemptEntity
argument_list|(
name|taskAttemptInfo
argument_list|)
decl_stmt|;
name|taskAttempts
operator|.
name|add
argument_list|(
name|taskAttempt
argument_list|)
expr_stmt|;
block|}
return|return
name|taskAttempts
return|;
block|}
DECL|method|createTaskAttemptEntity (TaskAttemptInfo taskAttemptInfo)
specifier|private
name|TimelineEntity
name|createTaskAttemptEntity
parameter_list|(
name|TaskAttemptInfo
name|taskAttemptInfo
parameter_list|)
block|{
name|TimelineEntity
name|taskAttempt
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|taskAttempt
operator|.
name|setEntityType
argument_list|(
name|TASK_ATTEMPT
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|setEntityId
argument_list|(
name|taskAttemptInfo
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|setStartTime
argument_list|(
name|taskAttemptInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|taskAttemptInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|taskAttemptInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"MAP_FINISH_TIME"
argument_list|,
name|taskAttemptInfo
operator|.
name|getMapFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"SHUFFLE_FINISH_TIME"
argument_list|,
name|taskAttemptInfo
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"SORT_FINISH_TIME"
argument_list|,
name|taskAttemptInfo
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"TASK_STATUS"
argument_list|,
name|taskAttemptInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"STATE"
argument_list|,
name|taskAttemptInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"ERROR"
argument_list|,
name|taskAttemptInfo
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addOtherInfo
argument_list|(
literal|"CONTAINER_ID"
argument_list|,
name|taskAttemptInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"converted task attempt "
operator|+
name|taskAttemptInfo
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|" to a timeline entity"
argument_list|)
expr_stmt|;
return|return
name|taskAttempt
return|;
block|}
block|}
end_class

end_unit

