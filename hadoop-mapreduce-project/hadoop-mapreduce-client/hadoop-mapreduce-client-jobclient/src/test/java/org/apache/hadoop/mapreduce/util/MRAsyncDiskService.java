begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AsyncDiskService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is a container of multiple thread pools, each for a volume,  * so that we can schedule async disk operations easily.  *   * Examples of async disk operations are deletion of files.  * We can move the files to a "toBeDeleted" folder before asychronously  * deleting it, to make sure the caller can run it faster.  *   * Users should not write files into the "toBeDeleted" folder, otherwise  * the files can be gone any time we restart the MRAsyncDiskService.    *   * This class also contains all operations that will be performed by the  * thread pools.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MRAsyncDiskService
specifier|public
class|class
name|MRAsyncDiskService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MRAsyncDiskService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|asyncDiskService
name|AsyncDiskService
name|asyncDiskService
decl_stmt|;
DECL|field|TOBEDELETED
specifier|public
specifier|static
specifier|final
name|String
name|TOBEDELETED
init|=
literal|"toBeDeleted"
decl_stmt|;
comment|/**    * Create a AsyncDiskServices with a set of volumes (specified by their    * root directories).    *     * The AsyncDiskServices uses one ThreadPool per volume to do the async disk    * operations.    *     * @param localFileSystem The localFileSystem used for deletions.    * @param nonCanonicalVols The roots of the file system volumes, which may    * be absolte paths, or paths relative to the ${user.dir} system property    * ("cwd").    */
DECL|method|MRAsyncDiskService (FileSystem localFileSystem, String... nonCanonicalVols)
specifier|public
name|MRAsyncDiskService
parameter_list|(
name|FileSystem
name|localFileSystem
parameter_list|,
name|String
modifier|...
name|nonCanonicalVols
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|localFileSystem
operator|=
name|localFileSystem
expr_stmt|;
name|this
operator|.
name|volumes
operator|=
operator|new
name|String
index|[
name|nonCanonicalVols
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|nonCanonicalVols
operator|.
name|length
condition|;
name|v
operator|++
control|)
block|{
name|this
operator|.
name|volumes
index|[
name|v
index|]
operator|=
name|normalizePath
argument_list|(
name|nonCanonicalVols
index|[
name|v
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Normalized volume: "
operator|+
name|nonCanonicalVols
index|[
name|v
index|]
operator|+
literal|" -> "
operator|+
name|this
operator|.
name|volumes
index|[
name|v
index|]
argument_list|)
expr_stmt|;
block|}
name|asyncDiskService
operator|=
operator|new
name|AsyncDiskService
argument_list|(
name|this
operator|.
name|volumes
argument_list|)
expr_stmt|;
comment|// Create one ThreadPool per volume
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|volumes
operator|.
name|length
condition|;
name|v
operator|++
control|)
block|{
comment|// Create the root for file deletion
name|Path
name|absoluteSubdir
init|=
operator|new
name|Path
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|TOBEDELETED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFileSystem
operator|.
name|mkdirs
argument_list|(
name|absoluteSubdir
argument_list|)
condition|)
block|{
comment|// We should tolerate missing volumes.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot create "
operator|+
name|TOBEDELETED
operator|+
literal|" in "
operator|+
name|volumes
index|[
name|v
index|]
operator|+
literal|". Ignored."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create tasks to delete the paths inside the volumes
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|volumes
operator|.
name|length
condition|;
name|v
operator|++
control|)
block|{
name|Path
name|absoluteSubdir
init|=
operator|new
name|Path
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|TOBEDELETED
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// List all files inside the volumes TOBEDELETED sub directory
name|files
operator|=
name|localFileSystem
operator|.
name|listStatus
argument_list|(
name|absoluteSubdir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore exceptions in listStatus
comment|// We tolerate missing sub directories.
block|}
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|files
operator|.
name|length
condition|;
name|f
operator|++
control|)
block|{
comment|// Get the relative file name to the root of the volume
name|String
name|absoluteFilename
init|=
name|files
index|[
name|f
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|relative
init|=
name|TOBEDELETED
operator|+
name|Path
operator|.
name|SEPARATOR_CHAR
operator|+
name|files
index|[
name|f
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DeleteTask
name|task
init|=
operator|new
name|DeleteTask
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|absoluteFilename
argument_list|,
name|relative
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Initialize MRAsyncDiskService based on conf.    * @param conf  local file system and local dirs will be read from conf     */
DECL|method|MRAsyncDiskService (JobConf conf)
specifier|public
name|MRAsyncDiskService
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the task sometime in the future, using ThreadPools.    */
DECL|method|execute (String root, Runnable task)
specifier|synchronized
name|void
name|execute
parameter_list|(
name|String
name|root
parameter_list|,
name|Runnable
name|task
parameter_list|)
block|{
name|asyncDiskService
operator|.
name|execute
argument_list|(
name|root
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gracefully start the shut down of all ThreadPools.    */
DECL|method|shutdown ()
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
name|asyncDiskService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shut down all ThreadPools immediately.    */
DECL|method|shutdownNow ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
name|asyncDiskService
operator|.
name|shutdownNow
argument_list|()
return|;
block|}
comment|/**    * Wait for the termination of the thread pools.    *     * @param milliseconds  The number of milliseconds to wait    * @return   true if all thread pools are terminated within time limit    * @throws InterruptedException     */
DECL|method|awaitTermination (long milliseconds)
specifier|public
specifier|synchronized
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|milliseconds
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|asyncDiskService
operator|.
name|awaitTermination
argument_list|(
name|milliseconds
argument_list|)
return|;
block|}
DECL|field|format
specifier|private
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd_HH-mm-ss.SSS"
argument_list|)
decl_stmt|;
DECL|field|localFileSystem
specifier|private
name|FileSystem
name|localFileSystem
decl_stmt|;
DECL|field|volumes
specifier|private
name|String
index|[]
name|volumes
decl_stmt|;
DECL|field|uniqueId
specifier|private
specifier|static
name|AtomicLong
name|uniqueId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** A task for deleting a pathName from a volume.    */
DECL|class|DeleteTask
class|class
name|DeleteTask
implements|implements
name|Runnable
block|{
comment|/** The volume that the file is on*/
DECL|field|volume
name|String
name|volume
decl_stmt|;
comment|/** The file name before the move */
DECL|field|originalPath
name|String
name|originalPath
decl_stmt|;
comment|/** The file name after the move */
DECL|field|pathToBeDeleted
name|String
name|pathToBeDeleted
decl_stmt|;
comment|/**      * Delete a file/directory (recursively if needed).      * @param volume        The volume that the file/dir is in.      * @param originalPath  The original name, relative to volume root.      * @param pathToBeDeleted  The name after the move, relative to volume root,      *                         containing TOBEDELETED.      */
DECL|method|DeleteTask (String volume, String originalPath, String pathToBeDeleted)
name|DeleteTask
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|originalPath
parameter_list|,
name|String
name|pathToBeDeleted
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|originalPath
operator|=
name|originalPath
expr_stmt|;
name|this
operator|.
name|pathToBeDeleted
operator|=
name|pathToBeDeleted
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// Called in AsyncDiskService.execute for displaying error messages.
return|return
literal|"deletion of "
operator|+
name|pathToBeDeleted
operator|+
literal|" on "
operator|+
name|volume
operator|+
literal|" with original name "
operator|+
name|originalPath
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|absolutePathToBeDeleted
init|=
operator|new
name|Path
argument_list|(
name|volume
argument_list|,
name|pathToBeDeleted
argument_list|)
decl_stmt|;
name|success
operator|=
name|localFileSystem
operator|.
name|delete
argument_list|(
name|absolutePathToBeDeleted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure in "
operator|+
name|this
operator|+
literal|" with exception "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure in "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully did "
operator|+
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
comment|/**    * Move the path name on one volume to a temporary location and then     * delete them.    *     * This functions returns when the moves are done, but not necessarily all    * deletions are done. This is usually good enough because applications     * won't see the path name under the old name anyway after the move.     *     * @param volume       The disk volume    * @param pathName     The path name relative to volume root.    * @throws IOException If the move failed     * @return   false     if the file is not found    */
DECL|method|moveAndDeleteRelativePath (String volume, String pathName)
specifier|public
name|boolean
name|moveAndDeleteRelativePath
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|pathName
parameter_list|)
throws|throws
name|IOException
block|{
name|volume
operator|=
name|normalizePath
argument_list|(
name|volume
argument_list|)
expr_stmt|;
comment|// Move the file right now, so that it can be deleted later
name|String
name|newPathName
init|=
name|format
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|"_"
operator|+
name|uniqueId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|newPathName
operator|=
name|TOBEDELETED
operator|+
name|Path
operator|.
name|SEPARATOR_CHAR
operator|+
name|newPathName
expr_stmt|;
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|volume
argument_list|,
name|pathName
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|volume
argument_list|,
name|newPathName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|localFileSystem
operator|.
name|rename
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
comment|// If the source does not exists, return false.
comment|// This is necessary because rename can return false if the source
comment|// does not exists.
if|if
condition|(
operator|!
name|localFileSystem
operator|.
name|exists
argument_list|(
name|source
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Try to recreate the parent directory just in case it gets deleted.
if|if
condition|(
operator|!
name|localFileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|volume
argument_list|,
name|TOBEDELETED
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create "
operator|+
name|TOBEDELETED
operator|+
literal|" under "
operator|+
name|volume
argument_list|)
throw|;
block|}
comment|// Try rename again. If it fails, return false.
if|if
condition|(
operator|!
name|localFileSystem
operator|.
name|rename
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rename "
operator|+
name|source
operator|+
literal|" to "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Return false in case that the file is not found.
return|return
literal|false
return|;
block|}
name|DeleteTask
name|task
init|=
operator|new
name|DeleteTask
argument_list|(
name|volume
argument_list|,
name|pathName
argument_list|,
name|newPathName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|volume
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Move the path name on each volume to a temporary location and then     * delete them.    *     * This functions returns when the moves are done, but not necessarily all    * deletions are done. This is usually good enough because applications     * won't see the path name under the old name anyway after the move.     *     * @param pathName     The path name relative to each volume root    * @throws IOException If any of the move failed     * @return   false     If any of the target pathName did not exist,    *                     note that the operation is still done on all volumes.    */
DECL|method|moveAndDeleteFromEachVolume (String pathName)
specifier|public
name|boolean
name|moveAndDeleteFromEachVolume
parameter_list|(
name|String
name|pathName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|result
operator|&&
name|moveAndDeleteRelativePath
argument_list|(
name|volumes
index|[
name|i
index|]
argument_list|,
name|pathName
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Move all files/directories inside volume into TOBEDELETED, and then    * delete them.  The TOBEDELETED directory itself is ignored.    */
DECL|method|cleanupAllVolumes ()
specifier|public
name|void
name|cleanupAllVolumes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|volumes
operator|.
name|length
condition|;
name|v
operator|++
control|)
block|{
comment|// List all files inside the volumes
name|FileStatus
index|[]
name|files
init|=
literal|null
decl_stmt|;
try|try
block|{
name|files
operator|=
name|localFileSystem
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore exceptions in listStatus
comment|// We tolerate missing volumes.
block|}
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|files
operator|.
name|length
condition|;
name|f
operator|++
control|)
block|{
comment|// Get the file name - the last component of the Path
name|String
name|entryName
init|=
name|files
index|[
name|f
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Do not delete the current TOBEDELETED
if|if
condition|(
operator|!
name|TOBEDELETED
operator|.
name|equals
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
name|moveAndDeleteRelativePath
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|entryName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Returns the normalized path of a path.    */
DECL|method|normalizePath (String path)
specifier|private
name|String
name|normalizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|this
operator|.
name|localFileSystem
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**    * Get the relative path name with respect to the root of the volume.    * @param absolutePathName The absolute path name    * @param volume Root of the volume.    * @return null if the absolute path name is outside of the volume.    */
DECL|method|getRelativePathName (String absolutePathName, String volume)
specifier|private
name|String
name|getRelativePathName
parameter_list|(
name|String
name|absolutePathName
parameter_list|,
name|String
name|volume
parameter_list|)
block|{
name|absolutePathName
operator|=
name|normalizePath
argument_list|(
name|absolutePathName
argument_list|)
expr_stmt|;
comment|// Get the file names
if|if
condition|(
operator|!
name|absolutePathName
operator|.
name|startsWith
argument_list|(
name|volume
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Get rid of the volume prefix
name|String
name|fileName
init|=
name|absolutePathName
operator|.
name|substring
argument_list|(
name|volume
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|fileName
return|;
block|}
comment|/**    * Move the path name to a temporary location and then delete it.    *     * Note that if there is no volume that contains this path, the path    * will stay as it is, and the function will return false.    *      * This functions returns when the moves are done, but not necessarily all    * deletions are done. This is usually good enough because applications     * won't see the path name under the old name anyway after the move.     *     * @param absolutePathName    The path name from root "/"    * @throws IOException        If the move failed    * @return   false if we are unable to move the path name    */
DECL|method|moveAndDeleteAbsolutePath (String absolutePathName)
specifier|public
name|boolean
name|moveAndDeleteAbsolutePath
parameter_list|(
name|String
name|absolutePathName
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|volumes
operator|.
name|length
condition|;
name|v
operator|++
control|)
block|{
name|String
name|relative
init|=
name|getRelativePathName
argument_list|(
name|absolutePathName
argument_list|,
name|volumes
index|[
name|v
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|relative
operator|!=
literal|null
condition|)
block|{
return|return
name|moveAndDeleteRelativePath
argument_list|(
name|volumes
index|[
name|v
index|]
argument_list|,
name|relative
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete "
operator|+
name|absolutePathName
operator|+
literal|" because it's outside of all volumes."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

