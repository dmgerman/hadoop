begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|BZip2Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test class for concatenated {@link CompressionInputStream}.  */
end_comment

begin_class
DECL|class|TestConcatenatedCompressedInput
specifier|public
class|class
name|TestConcatenatedCompressedInput
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestConcatenatedCompressedInput
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|defaultConf
specifier|private
specifier|static
name|JobConf
name|defaultConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
comment|// from ~roelofs/ss30b-colors.hh
DECL|field|COLOR_RED
specifier|final
specifier|static
name|String
name|COLOR_RED
init|=
literal|"
literal|[0;31m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_GREEN
specifier|final
specifier|static
name|String
name|COLOR_GREEN
init|=
literal|"
literal|[0;32m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_YELLOW
specifier|final
specifier|static
name|String
name|COLOR_YELLOW
init|=
literal|"
literal|[0;33;40m"
decl_stmt|;
comment|// DO force black background     "
comment|[0m"
DECL|field|COLOR_BLUE
specifier|final
specifier|static
name|String
name|COLOR_BLUE
init|=
literal|"
literal|[0;34m"
decl_stmt|;
comment|// do NOT force black background "
comment|[0m"
DECL|field|COLOR_MAGENTA
specifier|final
specifier|static
name|String
name|COLOR_MAGENTA
init|=
literal|"
literal|[0;35m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_CYAN
specifier|final
specifier|static
name|String
name|COLOR_CYAN
init|=
literal|"
literal|[0;36m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_WHITE
specifier|final
specifier|static
name|String
name|COLOR_WHITE
init|=
literal|"
literal|[0;37;40m"
decl_stmt|;
comment|// DO force black background     "
comment|[0m"
DECL|field|COLOR_BR_RED
specifier|final
specifier|static
name|String
name|COLOR_BR_RED
init|=
literal|"
literal|[1;31m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_BR_GREEN
specifier|final
specifier|static
name|String
name|COLOR_BR_GREEN
init|=
literal|"
literal|[1;32m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_BR_YELLOW
specifier|final
specifier|static
name|String
name|COLOR_BR_YELLOW
init|=
literal|"
literal|[1;33;40m"
decl_stmt|;
comment|// DO force black background     "
comment|[0m"
DECL|field|COLOR_BR_BLUE
specifier|final
specifier|static
name|String
name|COLOR_BR_BLUE
init|=
literal|"
literal|[1;34m"
decl_stmt|;
comment|// do NOT force black background "
comment|[0m"
DECL|field|COLOR_BR_MAGENTA
specifier|final
specifier|static
name|String
name|COLOR_BR_MAGENTA
init|=
literal|"
literal|[1;35m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_BR_CYAN
specifier|final
specifier|static
name|String
name|COLOR_BR_CYAN
init|=
literal|"
literal|[1;36m"
decl_stmt|;
comment|// background doesn't matter...  "
comment|[0m"
DECL|field|COLOR_BR_WHITE
specifier|final
specifier|static
name|String
name|COLOR_BR_WHITE
init|=
literal|"
literal|[1;37;40m"
decl_stmt|;
comment|// DO force black background     "
comment|[0m"
DECL|field|COLOR_NORMAL
specifier|final
specifier|static
name|String
name|COLOR_NORMAL
init|=
literal|"
literal|[0m"
decl_stmt|;
static|static
block|{
try|try
block|{
name|defaultConf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|ZlibFactory
operator|.
name|loadNativeZLib
argument_list|()
expr_stmt|;
block|}
DECL|field|DEFAULT_WORK_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_WORK_DIR
init|=
literal|"target/test-classes/testdata"
decl_stmt|;
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
literal|"TestConcatenatedCompressedInput"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|makeStream (String str)
specifier|private
specifier|static
name|LineReader
name|makeStream
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|defaultConf
argument_list|)
return|;
block|}
DECL|method|writeFile (FileSystem fs, Path name, CompressionCodec codec, String contents)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|stm
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stm
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|voidReporter
specifier|private
specifier|static
specifier|final
name|Reporter
name|voidReporter
init|=
name|Reporter
operator|.
name|NULL
decl_stmt|;
DECL|method|readSplit (TextInputFormat format, InputSplit split, JobConf jobConf)
specifier|private
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|readSplit
parameter_list|(
name|TextInputFormat
name|format
parameter_list|,
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
name|voidReporter
argument_list|)
decl_stmt|;
name|LongWritable
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|reader
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Test using Hadoop's original, native-zlib gzip codec for reading.    */
annotation|@
name|Test
DECL|method|testGzip ()
specifier|public
name|void
name|testGzip
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|gzip
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// preferred, but not compatible with Apache/trunk instance of Hudson:
comment|/*     assertFalse("[native (C/C++) codec]",       (org.apache.hadoop.io.compress.zlib.BuiltInGzipDecompressor.class ==        gzip.getDecompressorType()) );     System.out.println(COLOR_BR_RED +       "testGzip() using native-zlib Decompressor (" +       gzip.getDecompressorType() + ")" + COLOR_NORMAL);  */
comment|// alternative:
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInGzipDecompressor
operator|.
name|class
operator|==
name|gzip
operator|.
name|getDecompressorType
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_BR_RED
operator|+
literal|"testGzip() using native-zlib Decompressor ("
operator|+
name|gzip
operator|.
name|getDecompressorType
argument_list|()
operator|+
literal|")"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"testGzip() skipped:  native (C/C++) libs not loaded"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*  *      // THIS IS BUGGY: omits 2nd/3rd gzip headers; screws up 2nd/3rd CRCs--  *      //                see https://issues.apache.org/jira/browse/HADOOP-6799  *  Path fnHDFS = new Path(workDir, "concat" + gzip.getDefaultExtension());  *  //OutputStream out = localFs.create(fnHDFS);  *  //GzipCodec.GzipOutputStream gzOStm = new GzipCodec.GzipOutputStream(out);  *      // can just combine those two lines, probably  *  //GzipCodec.GzipOutputStream gzOStm =  *  //  new GzipCodec.GzipOutputStream(localFs.create(fnHDFS));  *      // oops, no:  this is a protected helper class; need to access  *      //   it via createOutputStream() instead:  *  OutputStream out = localFs.create(fnHDFS);  *  Compressor gzCmp = gzip.createCompressor();  *  CompressionOutputStream gzOStm = gzip.createOutputStream(out, gzCmp);  *      // this SHOULD be going to HDFS:  got out from localFs == HDFS  *      //   ...yup, works  *  gzOStm.write("first gzip concat\n member\nwith three lines\n".getBytes());  *  gzOStm.finish();  *  gzOStm.resetState();  *  gzOStm.write("2nd gzip concat member\n".getBytes());  *  gzOStm.finish();  *  gzOStm.resetState();  *  gzOStm.write("gzip concat\nmember #3\n".getBytes());  *  gzOStm.close();  *      //  *  String fn = "hdfs-to-local-concat" + gzip.getDefaultExtension();  *  Path fnLocal = new Path(System.getProperty("test.concat.data","/tmp"), fn);  *  localFs.copyToLocalFile(fnHDFS, fnLocal);  */
comment|// copy prebuilt (correct!) version of concat.gz to HDFS
specifier|final
name|String
name|fn
init|=
literal|"concat"
operator|+
name|gzip
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal
argument_list|,
name|fnHDFS
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part2.txt.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|"this is a test\nof gzip\n"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 2"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSplit
name|tmp
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"part2.txt.gz"
argument_list|)
condition|)
block|{
name|splits
index|[
literal|0
index|]
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|splits
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] num lines"
argument_list|,
literal|6
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][5]"
argument_list|,
literal|"member #3"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1] num lines"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][0]"
argument_list|,
literal|"this is a test"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][1]"
argument_list|,
literal|"of gzip"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test using the raw Inflater codec for reading gzip files.    */
annotation|@
name|Test
DECL|method|testPrototypeInflaterGzip ()
specifier|public
name|void
name|testPrototypeInflaterGzip
parameter_list|()
throws|throws
name|IOException
block|{
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
comment|// used only for file extension
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// localFs = FileSystem instance
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_BR_BLUE
operator|+
literal|"testPrototypeInflaterGzip() using "
operator|+
literal|"non-native/Java Inflater and manual gzip header/trailer parsing"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
comment|// copy prebuilt (correct!) version of concat.gz to HDFS
specifier|final
name|String
name|fn
init|=
literal|"concat"
operator|+
name|gzip
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal
argument_list|,
name|fnHDFS
argument_list|)
expr_stmt|;
specifier|final
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|fnLocal
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concat bytes available"
argument_list|,
literal|148
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// should wrap all of this header-reading stuff in a running-CRC wrapper
comment|// (did so in BuiltInGzipDecompressor; see below)
name|byte
index|[]
name|compressedBuf
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|int
name|numBytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|compressedBuf
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"header bytes read"
argument_list|,
literal|10
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st byte"
argument_list|,
literal|0x1f
argument_list|,
name|compressedBuf
index|[
literal|0
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd byte"
argument_list|,
literal|0x8b
argument_list|,
name|compressedBuf
index|[
literal|1
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3rd byte (compression method)"
argument_list|,
literal|8
argument_list|,
name|compressedBuf
index|[
literal|2
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|byte
name|flags
init|=
call|(
name|byte
call|)
argument_list|(
name|compressedBuf
index|[
literal|3
index|]
operator|&
literal|0xff
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
literal|0x04
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// FEXTRA
name|numBytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|compressedBuf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XLEN bytes read"
argument_list|,
literal|2
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
name|int
name|xlen
init|=
operator|(
operator|(
name|compressedBuf
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|compressedBuf
index|[
literal|0
index|]
operator|)
operator|&
literal|0xffff
decl_stmt|;
name|in
operator|.
name|skip
argument_list|(
name|xlen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
literal|0x08
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// FNAME
while|while
condition|(
operator|(
name|numBytesRead
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
literal|"unexpected end-of-file while reading filename"
argument_list|,
name|numBytesRead
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|flags
operator|&
literal|0x10
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// FCOMMENT
while|while
condition|(
operator|(
name|numBytesRead
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
literal|"unexpected end-of-file while reading comment"
argument_list|,
name|numBytesRead
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|flags
operator|&
literal|0xe0
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// reserved
name|assertTrue
argument_list|(
literal|"reserved bits are set??"
argument_list|,
operator|(
name|flags
operator|&
literal|0xe0
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
literal|0x02
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// FHCRC
name|numBytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|compressedBuf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CRC16 bytes read"
argument_list|,
literal|2
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
name|int
name|crc16
init|=
operator|(
operator|(
name|compressedBuf
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|compressedBuf
index|[
literal|0
index|]
operator|)
operator|&
literal|0xffff
decl_stmt|;
block|}
comment|// ready to go!  next bytes should be start of deflated stream, suitable
comment|// for Inflater
name|numBytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|compressedBuf
argument_list|)
expr_stmt|;
comment|// Inflater docs refer to a "dummy byte":  no clue what that's about;
comment|// appears to work fine without one
name|byte
index|[]
name|uncompressedBuf
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|compressedBuf
argument_list|,
literal|0
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|numBytesUncompressed
init|=
name|inflater
operator|.
name|inflate
argument_list|(
name|uncompressedBuf
argument_list|)
decl_stmt|;
name|String
name|outString
init|=
operator|new
name|String
argument_list|(
name|uncompressedBuf
argument_list|,
literal|0
argument_list|,
name|numBytesUncompressed
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"uncompressed data of first gzip member = ["
operator|+
name|outString
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test using the new BuiltInGzipDecompressor codec for reading gzip files.    */
comment|// NOTE:  This fails on RHEL4 with "java.io.IOException: header crc mismatch"
comment|//        due to buggy version of zlib (1.2.1.2) included.
annotation|@
name|Test
DECL|method|testBuiltInGzipDecompressor ()
specifier|public
name|void
name|testBuiltInGzipDecompressor
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|gzip
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Don't use native libs for this test
name|ZlibFactory
operator|.
name|setNativeZlibLoaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[non-native (Java) codec]"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInGzipDecompressor
operator|.
name|class
argument_list|,
name|gzip
operator|.
name|getDecompressorType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_BR_YELLOW
operator|+
literal|"testBuiltInGzipDecompressor() using"
operator|+
literal|" non-native (Java Inflater) Decompressor ("
operator|+
name|gzip
operator|.
name|getDecompressorType
argument_list|()
operator|+
literal|")"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
comment|// copy single-member test file to HDFS
name|String
name|fn1
init|=
literal|"testConcatThenCompress.txt"
operator|+
name|gzip
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal1
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn1
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS1
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn1
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal1
argument_list|,
name|fnHDFS1
argument_list|)
expr_stmt|;
comment|// copy multiple-member test file to HDFS
comment|// (actually in "seekable gzip" format, a la JIRA PIG-42)
name|String
name|fn2
init|=
literal|"testCompressThenConcat.txt"
operator|+
name|gzip
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal2
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn2
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS2
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn2
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal2
argument_list|,
name|fnHDFS2
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
comment|// here's first pair of DecompressorStreams:
specifier|final
name|FileInputStream
name|in1
init|=
operator|new
name|FileInputStream
argument_list|(
name|fnLocal1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileInputStream
name|in2
init|=
operator|new
name|FileInputStream
argument_list|(
name|fnLocal2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concat bytes available"
argument_list|,
literal|2734
argument_list|,
name|in1
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concat bytes available"
argument_list|,
literal|3413
argument_list|,
name|in2
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// w/hdr CRC
name|CompressionInputStream
name|cin2
init|=
name|gzip
operator|.
name|createInputStream
argument_list|(
name|in2
argument_list|)
decl_stmt|;
name|LineReader
name|in
init|=
operator|new
name|LineReader
argument_list|(
name|cin2
argument_list|)
decl_stmt|;
name|Text
name|out
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|numBytes
decl_stmt|,
name|totalBytes
init|=
literal|0
decl_stmt|,
name|lineNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|numBytes
operator|=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
operator|++
name|lineNum
expr_stmt|;
name|totalBytes
operator|+=
name|numBytes
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total uncompressed bytes in concatenated test file"
argument_list|,
literal|5346
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total uncompressed lines in concatenated test file"
argument_list|,
literal|84
argument_list|,
name|lineNum
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|loadNativeZLib
argument_list|()
expr_stmt|;
comment|// test GzipZlibDecompressor (native), just to be sure
comment|// (FIXME?  could move this call to testGzip(), but would need filename
comment|// setup above) (alternatively, maybe just nuke testGzip() and extend this?)
name|doMultipleGzipBufferSizes
argument_list|(
name|jobConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// this tests either the native or the non-native gzip decoder with 43
comment|// input-buffer sizes in order to try to catch any parser/state-machine
comment|// errors at buffer boundaries
DECL|method|doMultipleGzipBufferSizes (JobConf jConf, boolean useNative)
specifier|private
specifier|static
name|void
name|doMultipleGzipBufferSizes
parameter_list|(
name|JobConf
name|jConf
parameter_list|,
name|boolean
name|useNative
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_YELLOW
operator|+
literal|"doMultipleGzipBufferSizes() using "
operator|+
operator|(
name|useNative
condition|?
literal|"GzipZlibDecompressor"
else|:
literal|"BuiltInGzipDecompressor"
operator|)
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
name|int
name|bufferSize
decl_stmt|;
comment|// ideally would add some offsets/shifts in here (e.g., via extra fields
comment|// of various sizes), but...significant work to hand-generate each header
for|for
control|(
name|bufferSize
operator|=
literal|1
init|;
name|bufferSize
operator|<
literal|34
condition|;
operator|++
name|bufferSize
control|)
block|{
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
block|}
name|bufferSize
operator|=
literal|512
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|2
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|4
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|63
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|64
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|65
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|127
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|128
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|129
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleGzipBufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
block|}
comment|// this tests both files (testCompressThenConcat, testConcatThenCompress);
comment|// all should work with either native zlib or new Inflater-based decoder
DECL|method|doSingleGzipBufferSize (JobConf jConf)
specifier|private
specifier|static
name|void
name|doSingleGzipBufferSize
parameter_list|(
name|JobConf
name|jConf
parameter_list|)
throws|throws
name|IOException
block|{
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
comment|// here's Nth pair of DecompressorStreams:
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|jConf
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 2"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSplit
name|tmp
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdata/testCompressThenConcat.txt.gz"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  (swapping)"
argument_list|)
expr_stmt|;
name|splits
index|[
literal|0
index|]
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|splits
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] length (num lines)"
argument_list|,
literal|84
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][0]"
argument_list|,
literal|"Call me Ishmael. Some years ago--never mind how long precisely--having"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][42]"
argument_list|,
literal|"Tell me, does the magnetic virtue of the needles of the compasses of"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|42
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1] length (num lines)"
argument_list|,
literal|84
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][0]"
argument_list|,
literal|"Call me Ishmael. Some years ago--never mind how long precisely--having"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][42]"
argument_list|,
literal|"Tell me, does the magnetic virtue of the needles of the compasses of"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|42
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test using the bzip2 codec for reading    */
annotation|@
name|Test
DECL|method|testBzip2 ()
specifier|public
name|void
name|testBzip2
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|bzip2
init|=
operator|new
name|BZip2Codec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|bzip2
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_BR_CYAN
operator|+
literal|"testBzip2() using non-native CBZip2InputStream (presumably)"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
comment|// copy prebuilt (correct!) version of concat.bz2 to HDFS
specifier|final
name|String
name|fn
init|=
literal|"concat"
operator|+
name|bzip2
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal
argument_list|,
name|fnHDFS
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part2.txt.bz2"
argument_list|)
argument_list|,
name|bzip2
argument_list|,
literal|"this is a test\nof bzip2\n"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
comment|// extends FileInputFormat
name|format
operator|.
name|configure
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|format
operator|.
name|setMinSplitSize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
comment|// work around 2-byte splits issue
comment|// [135 splits for a 208-byte file and a 62-byte file(!)]
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 2"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSplit
name|tmp
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"part2.txt.bz2"
argument_list|)
condition|)
block|{
name|splits
index|[
literal|0
index|]
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|splits
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] num lines"
argument_list|,
literal|6
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][5]"
argument_list|,
literal|"member #3"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1] num lines"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][0]"
argument_list|,
literal|"this is a test"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][1]"
argument_list|,
literal|"of bzip2"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extended bzip2 test, similar to BuiltInGzipDecompressor test above.    */
annotation|@
name|Test
DECL|method|testMoreBzip2 ()
specifier|public
name|void
name|testMoreBzip2
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|bzip2
init|=
operator|new
name|BZip2Codec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|bzip2
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_BR_MAGENTA
operator|+
literal|"testMoreBzip2() using non-native CBZip2InputStream (presumably)"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
comment|// copy single-member test file to HDFS
name|String
name|fn1
init|=
literal|"testConcatThenCompress.txt"
operator|+
name|bzip2
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal1
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn1
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS1
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn1
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal1
argument_list|,
name|fnHDFS1
argument_list|)
expr_stmt|;
comment|// copy multiple-member test file to HDFS
name|String
name|fn2
init|=
literal|"testCompressThenConcat.txt"
operator|+
name|bzip2
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|fnLocal2
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concat.data"
argument_list|,
name|DEFAULT_WORK_DIR
argument_list|)
argument_list|,
name|fn2
argument_list|)
decl_stmt|;
name|Path
name|fnHDFS2
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fn2
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
name|fnLocal2
argument_list|,
name|fnHDFS2
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
comment|// here's first pair of BlockDecompressorStreams:
specifier|final
name|FileInputStream
name|in1
init|=
operator|new
name|FileInputStream
argument_list|(
name|fnLocal1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileInputStream
name|in2
init|=
operator|new
name|FileInputStream
argument_list|(
name|fnLocal2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concat bytes available"
argument_list|,
literal|2567
argument_list|,
name|in1
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concat bytes available"
argument_list|,
literal|3056
argument_list|,
name|in2
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|cin2
init|=
name|bzip2
operator|.
name|createInputStream
argument_list|(
name|in2
argument_list|)
decl_stmt|;
name|LineReader
name|in
init|=
operator|new
name|LineReader
argument_list|(
name|cin2
argument_list|)
decl_stmt|;
name|Text
name|out
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|numBytes
decl_stmt|,
name|totalBytes
init|=
literal|0
decl_stmt|,
name|lineNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|numBytes
operator|=
name|in
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
operator|++
name|lineNum
expr_stmt|;
name|totalBytes
operator|+=
name|numBytes
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total uncompressed bytes in concatenated test file"
argument_list|,
literal|5346
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total uncompressed lines in concatenated test file"
argument_list|,
literal|84
argument_list|,
name|lineNum
argument_list|)
expr_stmt|;
comment|// test CBZip2InputStream with lots of different input-buffer sizes
name|doMultipleBzip2BufferSizes
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
comment|// this tests native bzip2 decoder with more than
comment|// three dozen input-buffer sizes in order to try to catch any parser/state-
comment|// machine errors at buffer boundaries
DECL|method|doMultipleBzip2BufferSizes (JobConf jConf)
specifier|private
specifier|static
name|void
name|doMultipleBzip2BufferSizes
parameter_list|(
name|JobConf
name|jConf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|COLOR_MAGENTA
operator|+
literal|"doMultipleBzip2BufferSizes() using "
operator|+
literal|"default bzip2 decompressor"
operator|+
name|COLOR_NORMAL
argument_list|)
expr_stmt|;
name|int
name|bufferSize
decl_stmt|;
comment|// ideally would add some offsets/shifts in here (e.g., via extra header
comment|// data?), but...significant work to hand-generate each header, and no
comment|// bzip2 spec for reference
for|for
control|(
name|bufferSize
operator|=
literal|1
init|;
name|bufferSize
operator|<
literal|34
condition|;
operator|++
name|bufferSize
control|)
block|{
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
block|}
name|bufferSize
operator|=
literal|512
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|2
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|4
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|63
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|64
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|65
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|127
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|128
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
literal|129
operator|*
literal|1024
expr_stmt|;
name|jConf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|doSingleBzip2BufferSize
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
block|}
comment|// this tests both files (testCompressThenConcat, testConcatThenCompress); all
comment|// should work with existing Java bzip2 decoder and any future native version
DECL|method|doSingleBzip2BufferSize (JobConf jConf)
specifier|private
specifier|static
name|void
name|doSingleBzip2BufferSize
parameter_list|(
name|JobConf
name|jConf
parameter_list|)
throws|throws
name|IOException
block|{
name|TextInputFormat
name|format
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|configure
argument_list|(
name|jConf
argument_list|)
expr_stmt|;
name|format
operator|.
name|setMinSplitSize
argument_list|(
literal|5500
argument_list|)
expr_stmt|;
comment|// work around 256-byte/22-splits issue
comment|// here's Nth pair of DecompressorStreams:
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|jConf
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 2"
argument_list|,
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSplit
name|tmp
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdata/testCompressThenConcat.txt.gz"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  (swapping)"
argument_list|)
expr_stmt|;
name|splits
index|[
literal|0
index|]
operator|=
name|splits
index|[
literal|1
index|]
expr_stmt|;
name|splits
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
comment|// testConcatThenCompress (single)
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] length (num lines)"
argument_list|,
literal|84
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][0]"
argument_list|,
literal|"Call me Ishmael. Some years ago--never mind how long precisely--having"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0][42]"
argument_list|,
literal|"Tell me, does the magnetic virtue of the needles of the compasses of"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|42
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// testCompressThenConcat (multi)
name|results
operator|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1] length (num lines)"
argument_list|,
literal|84
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][0]"
argument_list|,
literal|"Call me Ishmael. Some years ago--never mind how long precisely--having"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"splits[1][42]"
argument_list|,
literal|"Tell me, does the magnetic virtue of the needles of the compasses of"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|42
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unquote (String in)
specifier|private
specifier|static
name|String
name|unquote
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|ch
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|ch
operator|=
name|in
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'n'
case|:
name|result
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|result
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parse the command line arguments into lines and display the result.    * @param args    * @throws Exception    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Working on "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|LineReader
name|reader
init|=
name|makeStream
argument_list|(
name|unquote
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got: "
operator|+
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

