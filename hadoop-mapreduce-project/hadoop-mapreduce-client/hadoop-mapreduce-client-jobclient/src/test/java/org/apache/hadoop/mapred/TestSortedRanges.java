begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SortedRanges
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestSortedRanges
specifier|public
class|class
name|TestSortedRanges
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSortedRanges
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testAdd ()
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|SortedRanges
name|sr
init|=
operator|new
name|SortedRanges
argument_list|()
decl_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|2
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|31
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|51
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|66
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|21
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|70
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|it
init|=
name|sr
operator|.
name|skipRangeIterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|16
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|76
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|77
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|SortedRanges
name|sr
init|=
operator|new
name|SortedRanges
argument_list|()
decl_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|2
argument_list|,
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|remove
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|15
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|remove
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|remove
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|18
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
literal|25
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|remove
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|7
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr
operator|.
name|remove
argument_list|(
operator|new
name|SortedRanges
operator|.
name|Range
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sr
operator|.
name|getIndicesCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

