begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCombineTextInputFormat
specifier|public
class|class
name|TestCombineTextInputFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCombineTextInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|defaultConf
specifier|private
specifier|static
name|Configuration
name|defaultConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|defaultConf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"TestCombineTextInputFormat"
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
operator|new
name|Configuration
argument_list|(
name|defaultConf
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|numFiles
init|=
literal|10
decl_stmt|;
comment|// create files with various lengths
name|createFiles
argument_list|(
name|length
argument_list|,
name|numFiles
argument_list|,
name|random
argument_list|)
expr_stmt|;
comment|// create a combined split for the files
name|CombineTextInputFormat
name|format
init|=
operator|new
name|CombineTextInputFormat
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numSplits
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|length
operator|/
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitting: requesting = "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitting: got =        "
operator|+
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should have a single split as the length is comfortably smaller than
comment|// the block size
name|assertEquals
argument_list|(
literal|"We got more than one splits!"
argument_list|,
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
name|split
init|=
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"It should be CombineFileSplit"
argument_list|,
name|CombineFileSplit
operator|.
name|class
argument_list|,
name|split
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the split
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"split= "
operator|+
name|split
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|context
init|=
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reader class is CombineFileRecordReader."
argument_list|,
name|CombineFileRecordReader
operator|.
name|class
argument_list|,
name|reader
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|MapContext
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|mcontext
init|=
operator|new
name|MapContextImpl
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyReporter
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|LongWritable
name|key
init|=
name|reader
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Key should not be null."
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|Text
name|value
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"read "
operator|+
name|v
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Key in multiple partitions."
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"split="
operator|+
name|split
operator|+
literal|" count="
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Some keys in no partition."
argument_list|,
name|length
argument_list|,
name|bits
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Range
specifier|private
specifier|static
class|class
name|Range
block|{
DECL|field|start
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
DECL|method|Range (int start, int end)
name|Range
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|start
operator|+
literal|", "
operator|+
name|end
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|createRanges (int length, int numFiles, Random random)
specifier|private
specifier|static
name|Range
index|[]
name|createRanges
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
comment|// generate a number of files with various lengths
name|Range
index|[]
name|ranges
init|=
operator|new
name|Range
index|[
name|numFiles
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
name|i
operator|==
literal|0
condition|?
literal|0
else|:
name|ranges
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|end
decl_stmt|;
name|int
name|end
init|=
name|i
operator|==
name|numFiles
operator|-
literal|1
condition|?
name|length
else|:
operator|(
name|length
operator|/
name|numFiles
operator|)
operator|*
operator|(
literal|2
operator|*
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|length
operator|/
name|numFiles
argument_list|)
operator|+
literal|1
decl_stmt|;
name|ranges
index|[
name|i
index|]
operator|=
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
DECL|method|createFiles (int length, int numFiles, Random random)
specifier|private
specifier|static
name|void
name|createFiles
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IOException
block|{
name|Range
index|[]
name|ranges
init|=
name|createRanges
argument_list|(
name|length
argument_list|,
name|numFiles
argument_list|,
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"test_"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|Range
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|j
init|=
name|range
operator|.
name|start
init|;
name|j
operator|<
name|range
operator|.
name|end
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeFile (FileSystem fs, Path name, CompressionCodec codec, String contents)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|stm
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stm
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readSplit (InputFormat<LongWritable,Text> format, InputSplit split, Job job)
specifier|private
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|readSplit
parameter_list|(
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|format
parameter_list|,
name|InputSplit
name|split
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TaskAttemptContext
name|context
init|=
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|MapContext
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|mcontext
init|=
operator|new
name|MapContextImpl
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|conf
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyReporter
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|reader
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Test using the gzip codec for reading    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGzip ()
specifier|public
name|void
name|testGzip
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|defaultConf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|gzip
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
name|ReflectionUtils
operator|.
name|setConf
argument_list|(
name|gzip
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part1.txt.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|"the quick\nbrown\nfox jumped\nover\n the lazy\n dog\n"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"part2.txt.gz"
argument_list|)
argument_list|,
name|gzip
argument_list|,
literal|"this is a test\nof gzip\n"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|CombineTextInputFormat
name|format
init|=
operator|new
name|CombineTextInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"compressed splits == 1"
argument_list|,
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|results
init|=
name|readSplit
argument_list|(
name|format
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0] length"
argument_list|,
literal|8
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|firstList
init|=
block|{
literal|"the quick"
block|,
literal|"brown"
block|,
literal|"fox jumped"
block|,
literal|"over"
block|,
literal|" the lazy"
block|,
literal|" dog"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|secondList
init|=
block|{
literal|"this is a test"
block|,
literal|"of gzip"
block|}
decl_stmt|;
name|String
name|first
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
name|firstList
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|testResults
argument_list|(
name|results
argument_list|,
name|firstList
argument_list|,
name|secondList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
name|secondList
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|testResults
argument_list|(
name|results
argument_list|,
name|secondList
argument_list|,
name|firstList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected first token!"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testResults (List<Text> results, String[] first, String[] second)
specifier|private
specifier|static
name|void
name|testResults
parameter_list|(
name|List
argument_list|<
name|Text
argument_list|>
name|results
parameter_list|,
name|String
index|[]
name|first
parameter_list|,
name|String
index|[]
name|second
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|first
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"splits[0]["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|first
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|second
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|+
name|first
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splits[0]["
operator|+
name|j
operator|+
literal|"]"
argument_list|,
name|second
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

