begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNNBench
specifier|public
class|class
name|TestNNBench
extends|extends
name|HadoopTestCase
block|{
DECL|field|BASE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|,
literal|"NNBench"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|method|TestNNBench ()
specifier|public
name|TestNNBench
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|LOCAL_MR
argument_list|,
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|NNBench
operator|.
name|DEFAULT_RES_FILE_NAME
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNNBenchCreateReadAndDelete ()
specifier|public
name|void
name|testNNBenchCreateReadAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"create_write"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
operator|+
literal|"/data/file_0_0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"create_write should create the file"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"open_read"
argument_list|)
expr_stmt|;
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete operation should delete the file"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNNBenchCreateAndRename ()
specifier|public
name|void
name|testNNBenchCreateAndRename
parameter_list|()
throws|throws
name|Exception
block|{
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"create_write"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
operator|+
literal|"/data/file_0_0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"create_write should create the file"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"rename"
argument_list|)
expr_stmt|;
name|Path
name|renamedPath
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
operator|+
literal|"/data/file_0_r_0"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Rename should rename the file"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Rename should rename the file"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|renamedPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNNBenchCrossCluster ()
specifier|public
name|void
name|testNNBenchCrossCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfsCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dfsCluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|String
name|nnAddress
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
name|String
name|baseDir
init|=
literal|"hdfs://"
operator|+
name|nnAddress
operator|+
name|BASE_DIR
decl_stmt|;
name|runNNBench
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|"create_write"
argument_list|,
name|baseDir
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
operator|+
literal|"/data/file_0_0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"create_write should create the file"
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|runNNBench (Configuration conf, String operation, String baseDir)
specifier|private
name|void
name|runNNBench
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|baseDir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|genArgs
init|=
block|{
literal|"-operation"
block|,
name|operation
block|,
literal|"-baseDir"
block|,
name|baseDir
block|,
literal|"-startTime"
block|,
literal|""
operator|+
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|/
literal|1000
operator|+
literal|3
operator|)
block|,
literal|"-blockSize"
block|,
literal|"1024"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|NNBench
argument_list|()
argument_list|,
name|genArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runNNBench (Configuration conf, String operation)
specifier|private
name|void
name|runNNBench
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|runNNBench
argument_list|(
name|conf
argument_list|,
name|operation
argument_list|,
name|BASE_DIR
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

