begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Two different types of comparators can be used in MapReduce. One is used  * during the Map and Reduce phases, to sort/merge key-value pairs. Another  * is used to group values for a particular key, when calling the user's   * reducer. A user can override both of these two.   * This class has tests for making sure we use the right comparators at the   * right places. See Hadoop issues 485 and 1535. Our tests:   * 1. Test that the same comparator is used for all sort/merge operations   * during the Map and Reduce phases.    * 2. Test the common use case where values are grouped by keys but values   * within each key are grouped by a secondary key (a timestamp, for example).   */
end_comment

begin_class
DECL|class|TestComparators
specifier|public
class|class
name|TestComparators
extends|extends
name|TestCase
block|{
DECL|field|conf
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|TestMapOutputType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jc
name|JobClient
name|jc
decl_stmt|;
DECL|field|rng
specifier|static
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**     * RandomGen is a mapper that generates 5 random values for each key    * in the input. The values are in the range [0-4]. The mapper also    * generates a composite key. If the input key is x and the generated    * value is y, the composite key is x0y (x-zero-y). Therefore, the inter-    * mediate key value pairs are ordered by {input key, value}.    * Think of the random value as a timestamp associated with the record.     */
DECL|class|RandomGenMapper
specifier|static
class|class
name|RandomGenMapper
implements|implements
name|Mapper
argument_list|<
name|IntWritable
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
DECL|method|map (IntWritable key, Writable value, OutputCollector<IntWritable, IntWritable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|num_values
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_values
condition|;
operator|++
name|i
control|)
block|{
name|int
name|val
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|num_values
argument_list|)
decl_stmt|;
name|int
name|compositeKey
init|=
name|key
operator|.
name|get
argument_list|()
operator|*
literal|100
operator|+
name|val
decl_stmt|;
name|out
operator|.
name|collect
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|compositeKey
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
comment|/**     * Your basic identity mapper.     */
DECL|class|IdentityMapper
specifier|static
class|class
name|IdentityMapper
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
comment|/**     * Checks whether keys are in ascending order.      */
DECL|class|AscendingKeysReducer
specifier|static
class|class
name|AscendingKeysReducer
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{}
comment|// keep track of the last key we've seen
DECL|field|lastKey
specifier|private
name|int
name|lastKey
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|method|reduce (IntWritable key, Iterator<Writable> values, OutputCollector<IntWritable, Text> out, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentKey
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// keys should be in ascending order
if|if
condition|(
name|currentKey
operator|<
name|lastKey
condition|)
block|{
name|fail
argument_list|(
literal|"Keys not in sorted ascending order"
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
name|currentKey
expr_stmt|;
name|out
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
literal|"success"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
comment|/**     * Checks whether keys are in ascending order.      */
DECL|class|DescendingKeysReducer
specifier|static
class|class
name|DescendingKeysReducer
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{}
comment|// keep track of the last key we've seen
DECL|field|lastKey
specifier|private
name|int
name|lastKey
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|reduce (IntWritable key, Iterator<Writable> values, OutputCollector<IntWritable, Text> out, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentKey
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// keys should be in descending order
if|if
condition|(
name|currentKey
operator|>
name|lastKey
condition|)
block|{
name|fail
argument_list|(
literal|"Keys not in sorted descending order"
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
name|currentKey
expr_stmt|;
name|out
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
literal|"success"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
comment|/** The reducer checks whether the input values are in ascending order and    * whether they are correctly grouped by key (i.e. each call to reduce    * should have 5 values if the grouping is correct). It also checks whether    * the keys themselves are in ascending order.    */
DECL|class|AscendingGroupReducer
specifier|static
class|class
name|AscendingGroupReducer
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
comment|// keep track of the last key we've seen
DECL|field|lastKey
specifier|private
name|int
name|lastKey
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|method|reduce (IntWritable key, Iterator<IntWritable> values, OutputCollector<IntWritable, Text> out, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check key order
name|int
name|currentKey
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentKey
operator|<
name|lastKey
condition|)
block|{
name|fail
argument_list|(
literal|"Keys not in sorted ascending order"
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
name|currentKey
expr_stmt|;
comment|// check order of values
name|IntWritable
name|previous
init|=
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|int
name|valueCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntWritable
name|current
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check that the values are sorted
if|if
condition|(
name|current
operator|.
name|compareTo
argument_list|(
name|previous
argument_list|)
operator|<
literal|0
condition|)
name|fail
argument_list|(
literal|"Values generated by Mapper not in order"
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
operator|++
name|valueCount
expr_stmt|;
block|}
if|if
condition|(
name|valueCount
operator|!=
literal|5
condition|)
block|{
name|fail
argument_list|(
literal|"Values not grouped by primary key"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
literal|"success"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
comment|/** The reducer checks whether the input values are in descending order and    * whether they are correctly grouped by key (i.e. each call to reduce    * should have 5 values if the grouping is correct).     */
DECL|class|DescendingGroupReducer
specifier|static
class|class
name|DescendingGroupReducer
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
comment|// keep track of the last key we've seen
DECL|field|lastKey
specifier|private
name|int
name|lastKey
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|reduce (IntWritable key, Iterator<IntWritable> values, OutputCollector<IntWritable, Text> out, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check key order
name|int
name|currentKey
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentKey
operator|>
name|lastKey
condition|)
block|{
name|fail
argument_list|(
literal|"Keys not in sorted descending order"
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
name|currentKey
expr_stmt|;
comment|// check order of values
name|IntWritable
name|previous
init|=
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|valueCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntWritable
name|current
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check that the values are sorted
if|if
condition|(
name|current
operator|.
name|compareTo
argument_list|(
name|previous
argument_list|)
operator|>
literal|0
condition|)
name|fail
argument_list|(
literal|"Values generated by Mapper not in order"
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
operator|++
name|valueCount
expr_stmt|;
block|}
if|if
condition|(
name|valueCount
operator|!=
literal|5
condition|)
block|{
name|fail
argument_list|(
literal|"Values not grouped by primary key"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
literal|"success"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
comment|/**     * A decreasing Comparator for IntWritable     */
DECL|class|DecreasingIntComparator
specifier|public
specifier|static
class|class
name|DecreasingIntComparator
extends|extends
name|IntWritable
operator|.
name|Comparator
block|{
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
operator|-
name|super
operator|.
name|compare
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
static|static
block|{
comment|// register this comparator
name|WritableComparator
operator|.
name|define
argument_list|(
name|DecreasingIntComparator
operator|.
name|class
argument_list|,
operator|new
name|IntWritable
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Grouping function for values based on the composite key. This    * comparator strips off the secondary key part from the x0y composite    * and only compares the primary key value (x).    */
DECL|class|CompositeIntGroupFn
specifier|public
specifier|static
class|class
name|CompositeIntGroupFn
extends|extends
name|WritableComparator
block|{
DECL|method|CompositeIntGroupFn ()
specifier|public
name|CompositeIntGroupFn
parameter_list|()
block|{
name|super
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (WritableComparable v1, WritableComparable v2)
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|v1
parameter_list|,
name|WritableComparable
name|v2
parameter_list|)
block|{
name|int
name|val1
init|=
operator|(
call|(
name|IntWritable
call|)
argument_list|(
name|v1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
operator|/
literal|100
decl_stmt|;
name|int
name|val2
init|=
operator|(
call|(
name|IntWritable
call|)
argument_list|(
name|v2
argument_list|)
operator|)
operator|.
name|get
argument_list|()
operator|/
literal|100
decl_stmt|;
if|if
condition|(
name|val1
operator|<
name|val2
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|val1
operator|>
name|val2
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|method|equals (IntWritable v1, IntWritable v2)
specifier|public
name|boolean
name|equals
parameter_list|(
name|IntWritable
name|v1
parameter_list|,
name|IntWritable
name|v2
parameter_list|)
block|{
name|int
name|val1
init|=
name|v1
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|val2
init|=
name|v2
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
name|val1
operator|/
literal|100
operator|)
operator|==
operator|(
name|val2
operator|/
literal|100
operator|)
return|;
block|}
static|static
block|{
name|WritableComparator
operator|.
name|define
argument_list|(
name|CompositeIntGroupFn
operator|.
name|class
argument_list|,
operator|new
name|IntWritable
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Reverse grouping function for values based on the composite key.     */
DECL|class|CompositeIntReverseGroupFn
specifier|public
specifier|static
class|class
name|CompositeIntReverseGroupFn
extends|extends
name|CompositeIntGroupFn
block|{
DECL|method|compare (WritableComparable v1, WritableComparable v2)
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|v1
parameter_list|,
name|WritableComparable
name|v2
parameter_list|)
block|{
return|return
operator|-
name|super
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
DECL|method|equals (IntWritable v1, IntWritable v2)
specifier|public
name|boolean
name|equals
parameter_list|(
name|IntWritable
name|v1
parameter_list|,
name|IntWritable
name|v2
parameter_list|)
block|{
return|return
operator|!
operator|(
name|super
operator|.
name|equals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|)
return|;
block|}
static|static
block|{
name|WritableComparator
operator|.
name|define
argument_list|(
name|CompositeIntReverseGroupFn
operator|.
name|class
argument_list|,
operator|new
name|IntWritable
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testdir
init|=
operator|new
name|Path
argument_list|(
literal|"build/test/test.mapred.spill"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set up two map jobs, so we can test merge phase in Reduce also
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|LOCAL_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|testdir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|testdir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// set up input data in 2 files
name|Path
name|inFile
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part0"
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|inFile
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|11
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|999
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|23
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|780
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|inFile
operator|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part1"
argument_list|)
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|inFile
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|45
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|18
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|27
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the default comparator for Map/Reduce.     * Use the identity mapper and see if the keys are sorted at the end    * @throws Exception    */
DECL|method|testDefaultMRComparator ()
specifier|public
name|void
name|testDefaultMRComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|configure
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|AscendingKeysReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|r_job
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|r_job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r_job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Oops! The job broke due to an unexpected error"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test user-defined comparator for Map/Reduce.    * We provide our own comparator that is the reverse of the default int     * comparator. Keys should be sorted in reverse order in the reducer.     * @throws Exception    */
DECL|method|testUserMRComparator ()
specifier|public
name|void
name|testUserMRComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|configure
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|DescendingKeysReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyComparatorClass
argument_list|(
name|DecreasingIntComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|r_job
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|r_job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r_job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Oops! The job broke due to an unexpected error"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test user-defined grouping comparator for grouping values in Reduce.    * We generate composite keys that contain a random number, which acts    * as a timestamp associated with the record. In our Reduce function,     * values for a key should be sorted by the 'timestamp'.     * @throws Exception    */
DECL|method|testUserValueGroupingComparator ()
specifier|public
name|void
name|testUserValueGroupingComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|configure
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|RandomGenMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|AscendingGroupReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueGroupingComparator
argument_list|(
name|CompositeIntGroupFn
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|r_job
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|r_job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r_job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Oops! The job broke due to an unexpected error"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test all user comparators. Super-test of all tests here.     * We generate composite keys that contain a random number, which acts    * as a timestamp associated with the record. In our Reduce function,     * values for a key should be sorted by the 'timestamp'.    * We also provide our own comparators that reverse the default sorting     * order. This lets us make sure that the right comparators are used.     * @throws Exception    */
DECL|method|testAllUserComparators ()
specifier|public
name|void
name|testAllUserComparators
parameter_list|()
throws|throws
name|Exception
block|{
name|configure
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|RandomGenMapper
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// use a decreasing comparator so keys are sorted in reverse order
name|conf
operator|.
name|setOutputKeyComparatorClass
argument_list|(
name|DecreasingIntComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|DescendingGroupReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueGroupingComparator
argument_list|(
name|CompositeIntReverseGroupFn
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|r_job
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|r_job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r_job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Oops! The job broke due to an unexpected error"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test a user comparator that relies on deserializing both arguments    * for each compare.    */
DECL|method|testBakedUserComparator ()
specifier|public
name|void
name|testBakedUserComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|MyWritable
name|a
init|=
operator|new
name|MyWritable
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|MyWritable
name|b
init|=
operator|new
name|MyWritable
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|WritableComparator
operator|.
name|get
argument_list|(
name|MyWritable
operator|.
name|class
argument_list|)
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|MyWritable
specifier|public
specifier|static
class|class
name|MyWritable
implements|implements
name|WritableComparable
argument_list|<
name|MyWritable
argument_list|>
block|{
DECL|field|i
DECL|field|j
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
DECL|method|MyWritable ()
specifier|public
name|MyWritable
parameter_list|()
block|{ }
DECL|method|MyWritable (int i, int j)
specifier|public
name|MyWritable
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|j
operator|=
name|j
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|i
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|j
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
DECL|method|compareTo (MyWritable b)
specifier|public
name|int
name|compareTo
parameter_list|(
name|MyWritable
name|b
parameter_list|)
block|{
return|return
name|this
operator|.
name|i
operator|-
name|b
operator|.
name|i
return|;
block|}
static|static
block|{
name|WritableComparator
operator|.
name|define
argument_list|(
name|MyWritable
operator|.
name|class
argument_list|,
operator|new
name|MyCmp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyCmp
specifier|public
specifier|static
class|class
name|MyCmp
extends|extends
name|WritableComparator
block|{
DECL|method|MyCmp ()
specifier|public
name|MyCmp
parameter_list|()
block|{
name|super
argument_list|(
name|MyWritable
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (WritableComparable a, WritableComparable b)
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|a
parameter_list|,
name|WritableComparable
name|b
parameter_list|)
block|{
name|MyWritable
name|aa
init|=
operator|(
name|MyWritable
operator|)
name|a
decl_stmt|;
name|MyWritable
name|bb
init|=
operator|(
name|MyWritable
operator|)
name|b
decl_stmt|;
return|return
name|aa
operator|.
name|j
operator|-
name|bb
operator|.
name|j
return|;
block|}
block|}
block|}
end_class

end_unit

