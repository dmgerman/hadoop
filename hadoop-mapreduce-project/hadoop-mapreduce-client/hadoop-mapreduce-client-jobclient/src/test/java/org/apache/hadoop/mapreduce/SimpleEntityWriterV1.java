begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TimelineServicePerformance
operator|.
name|PerfCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_comment
comment|/**    * Adds simple entities with random string payload, events, metrics, and    * configuration.    */
end_comment

begin_class
DECL|class|SimpleEntityWriterV1
class|class
name|SimpleEntityWriterV1
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|Writable
argument_list|,
name|Writable
argument_list|>
implements|implements
name|SimpleEntityWriterConstants
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleEntityWriterV1
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|map (IntWritable key, IntWritable val, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|IntWritable
name|val
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineClient
name|tlc
init|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|kbs
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|KBS_SENT
argument_list|,
name|KBS_SENT_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|testtimes
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TEST_TIMES
argument_list|,
name|TEST_TIMES_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|TaskAttemptID
name|taskAttemptId
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|payLoad
init|=
operator|new
name|char
index|[
name|kbs
operator|*
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testtimes
condition|;
name|i
operator|++
control|)
block|{
comment|// Generate a fixed length random payload
for|for
control|(
name|int
name|xx
init|=
literal|0
init|;
name|xx
operator|<
name|kbs
operator|*
literal|1024
condition|;
name|xx
operator|++
control|)
block|{
name|int
name|alphaNumIdx
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ALPHA_NUMS
operator|.
name|length
argument_list|)
decl_stmt|;
name|payLoad
index|[
name|xx
index|]
operator|=
name|ALPHA_NUMS
index|[
name|alphaNumIdx
index|]
expr_stmt|;
block|}
name|String
name|entId
init|=
name|taskAttemptId
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setEntityId
argument_list|(
name|entId
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
literal|"FOO_ATTEMPT"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addOtherInfo
argument_list|(
literal|"PERF_TEST"
argument_list|,
name|payLoad
argument_list|)
expr_stmt|;
comment|// add an event
name|TimelineEvent
name|event
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventType
argument_list|(
literal|"foo_event"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// use the current user for this purpose
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|long
name|startWrite
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|tlc
operator|.
name|putEntities
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_FAILURES
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"writing to the timeline service failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|endWrite
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|totalTime
operator|+=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|endWrite
operator|-
name|startWrite
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote "
operator|+
name|testtimes
operator|+
literal|" entities ("
operator|+
name|kbs
operator|*
name|testtimes
operator|+
literal|" kB) in "
operator|+
name|totalTime
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_TIME
argument_list|)
operator|.
name|increment
argument_list|(
name|totalTime
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_COUNTER
argument_list|)
operator|.
name|increment
argument_list|(
name|testtimes
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_KBS
argument_list|)
operator|.
name|increment
argument_list|(
name|kbs
operator|*
name|testtimes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

