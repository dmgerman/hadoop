begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|SerializationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestWritableJobConf
specifier|public
class|class
name|TestWritableJobConf
block|{
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|serDeser (K conf)
specifier|private
parameter_list|<
name|K
parameter_list|>
name|K
name|serDeser
parameter_list|(
name|K
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|SerializationFactory
name|factory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|Serializer
argument_list|<
name|K
argument_list|>
name|serializer
init|=
name|factory
operator|.
name|getSerializer
argument_list|(
name|GenericsUtil
operator|.
name|getClass
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Deserializer
argument_list|<
name|K
argument_list|>
name|deserializer
init|=
name|factory
operator|.
name|getDeserializer
argument_list|(
name|GenericsUtil
operator|.
name|getClass
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deserializer
operator|.
name|open
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|K
name|after
init|=
name|deserializer
operator|.
name|deserialize
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|deserializer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|after
return|;
block|}
DECL|method|assertEquals (Configuration conf1, Configuration conf2)
specifier|private
name|void
name|assertEquals
parameter_list|(
name|Configuration
name|conf1
parameter_list|,
name|Configuration
name|conf2
parameter_list|)
block|{
comment|// We ignore deprecated keys because after deserializing, both the
comment|// deprecated and the non-deprecated versions of a config are set.
comment|// This is consistent with both the set and the get methods.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator1
init|=
name|conf1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Configuration
operator|.
name|isDeprecated
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|map1
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator2
init|=
name|conf2
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Configuration
operator|.
name|isDeprecated
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|map2
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|map1
operator|.
name|equals
argument_list|(
name|map2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyConfiguration ()
specifier|public
name|void
name|testEmptyConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Configuration
name|deser
init|=
name|serDeser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|conf
argument_list|,
name|deser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonEmptyConfiguration ()
specifier|public
name|void
name|testNonEmptyConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|Configuration
name|deser
init|=
name|serDeser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|conf
argument_list|,
name|deser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationWithDefaults ()
specifier|public
name|void
name|testConfigurationWithDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|Configuration
name|deser
init|=
name|serDeser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|conf
argument_list|,
name|deser
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

