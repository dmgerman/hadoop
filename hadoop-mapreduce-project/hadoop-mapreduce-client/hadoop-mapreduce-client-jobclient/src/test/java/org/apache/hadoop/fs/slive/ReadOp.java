begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|DataVerifier
operator|.
name|VerifyOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|OperationOutput
operator|.
name|OutputType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Operation which selects a random file and selects a random read size (from  * the read size option) and reads from the start of that file to the read size  * (or the full file) and verifies the bytes that were written there.  *   * This operation will capture statistics on success the time taken to read that  * file and the number of successful readings that occurred as well as the  * number of bytes read and the number of chunks verified and the number of  * chunks which failed verification and on failure or error it will capture the  * number of failures and the amount of time taken to fail  */
end_comment

begin_class
DECL|class|ReadOp
class|class
name|ReadOp
extends|extends
name|Operation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReadOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ReadOp (ConfigExtractor cfg, Random rnd)
name|ReadOp
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|super
argument_list|(
name|ReadOp
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|rnd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the file name to read    *     * @return Path    */
DECL|method|getReadFile ()
specifier|protected
name|Path
name|getReadFile
parameter_list|()
block|{
name|Path
name|fn
init|=
name|getFinder
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
return|return
name|fn
return|;
block|}
annotation|@
name|Override
comment|// Operation
DECL|method|run (FileSystem fs)
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|out
init|=
name|super
operator|.
name|run
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|DataInputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|fn
init|=
name|getReadFile
argument_list|()
decl_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|readSizeRange
init|=
name|getConfig
argument_list|()
operator|.
name|getReadSize
argument_list|()
decl_stmt|;
name|long
name|readSize
init|=
literal|0
decl_stmt|;
name|String
name|readStrAm
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|shouldReadFullFile
argument_list|()
condition|)
block|{
name|readSize
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|readStrAm
operator|=
literal|"full file"
expr_stmt|;
block|}
else|else
block|{
name|readSize
operator|=
name|Range
operator|.
name|betweenPositive
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|readSizeRange
argument_list|)
expr_stmt|;
name|readStrAm
operator|=
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|readSize
argument_list|)
expr_stmt|;
block|}
name|long
name|timeTaken
init|=
literal|0
decl_stmt|;
name|long
name|chunkSame
init|=
literal|0
decl_stmt|;
name|long
name|chunkDiff
init|=
literal|0
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|DataVerifier
name|vf
init|=
operator|new
name|DataVerifier
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to read file at "
operator|+
name|fn
operator|+
literal|" of size ("
operator|+
name|readStrAm
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|{
comment|// open
name|startTime
operator|=
name|Timer
operator|.
name|now
argument_list|()
expr_stmt|;
name|is
operator|=
name|fs
operator|.
name|open
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|timeTaken
operator|+=
name|Timer
operator|.
name|elapsed
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
comment|// read& verify
name|VerifyOutput
name|vo
init|=
name|vf
operator|.
name|verifyFile
argument_list|(
name|readSize
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|timeTaken
operator|+=
name|vo
operator|.
name|getReadTime
argument_list|()
expr_stmt|;
name|chunkSame
operator|+=
name|vo
operator|.
name|getChunksSame
argument_list|()
expr_stmt|;
name|chunkDiff
operator|+=
name|vo
operator|.
name|getChunksDifferent
argument_list|()
expr_stmt|;
name|bytesRead
operator|+=
name|vo
operator|.
name|getBytesRead
argument_list|()
expr_stmt|;
comment|// capture close time
name|startTime
operator|=
name|Timer
operator|.
name|now
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
literal|null
expr_stmt|;
name|timeTaken
operator|+=
name|Timer
operator|.
name|elapsed
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|OK_TIME_TAKEN
argument_list|,
name|timeTaken
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|BYTES_READ
argument_list|,
name|bytesRead
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|SUCCESSES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|CHUNKS_VERIFIED
argument_list|,
name|chunkSame
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|CHUNKS_UNVERIFIED
argument_list|,
name|chunkDiff
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read "
operator|+
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|bytesRead
argument_list|)
operator|+
literal|" of "
operator|+
name|fn
operator|+
literal|" with "
operator|+
name|chunkSame
operator|+
literal|" chunks being same as expected and "
operator|+
name|chunkDiff
operator|+
literal|" chunks being different than expected in "
operator|+
name|timeTaken
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|NOT_FOUND
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error with reading"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadFileException
name|e
parameter_list|)
block|{
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|BAD_FILES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading bad file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|FAILURES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing read stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

