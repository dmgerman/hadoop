begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test limits on block locations  */
end_comment

begin_class
DECL|class|TestBlockLimits
specifier|public
class|class
name|TestBlockLimits
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|method|testWithLimits ()
specifier|public
name|void
name|testWithLimits
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|MiniMRClientCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
name|MiniMRClientClusterFactory
operator|.
name|create
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|runCustomFormat
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runCustomFormat (MiniMRClientCluster mr)
specifier|private
name|void
name|runCustomFormat
parameter_list|(
name|MiniMRClientCluster
name|mr
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|mr
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/test_mini_mr_local"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDir= "
operator|+
name|testDir
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|MyInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|MyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|MyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"non.std.out"
argument_list|,
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed job "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyMapper
specifier|static
class|class
name|MyMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|MyReducer
specifier|static
class|class
name|MyReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|reduce (WritableComparable key, Iterator<Writable> values, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|MyInputFormat
specifier|private
specifier|static
class|class
name|MyInputFormat
implements|implements
name|InputFormat
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|class|MySplit
specifier|private
specifier|static
class|class
name|MySplit
implements|implements
name|InputSplit
block|{
DECL|field|first
name|int
name|first
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|method|MySplit ()
specifier|public
name|MySplit
parameter_list|()
block|{       }
DECL|method|MySplit (int first, int length)
specifier|public
name|MySplit
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|200
index|]
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|first
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|length
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MySplit
index|[]
block|{
operator|new
name|MySplit
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
block|,
operator|new
name|MySplit
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|MySplit
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
block|}
return|;
block|}
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|MyOutputFormat
specifier|static
class|class
name|MyOutputFormat
implements|implements
name|OutputFormat
block|{
DECL|class|MyRecordWriter
specifier|static
class|class
name|MyRecordWriter
implements|implements
name|RecordWriter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|method|MyRecordWriter (Path outputFile, JobConf job)
specifier|public
name|MyRecordWriter
parameter_list|(
name|Path
name|outputFile
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{       }
DECL|method|write (Object key, Object value)
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return;
block|}
DECL|method|close (Reporter reporter)
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{       }
block|}
DECL|method|getRecordWriter (FileSystem ignored, JobConf job, String name, Progressable progress)
specifier|public
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyRecordWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|job
operator|.
name|get
argument_list|(
literal|"non.std.out"
argument_list|)
argument_list|)
argument_list|,
name|job
argument_list|)
return|;
block|}
DECL|method|checkOutputSpecs (FileSystem ignored, JobConf job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
block|}
end_class

end_unit

