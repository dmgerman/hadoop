begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This class tests reliability of the framework in the face of failures of   * both tasks and tasktrackers. Steps:  * 1) Get the cluster status  * 2) Get the number of slots in the cluster  * 3) Spawn a sleepjob that occupies the entire cluster (with two waves of maps)  * 4) Get the list of running attempts for the job  * 5) Fail a few of them  * 6) Now fail a few trackers (ssh)  * 7) Job should run to completion  * 8) The above is repeated for the Sort suite of job (randomwriter, sort,  *    validator). All jobs must complete, and finally, the sort validation  *    should succeed.  * To run the test:  * ./bin/hadoop --config<config> jar  *   build/hadoop-<version>-test.jar MRReliabilityTest -libjars  *   build/hadoop-<version>-examples.jar [-scratchdir<dir>]"  *     *   The scratchdir is optional and by default the current directory on the client  *   will be used as the scratch space. Note that password-less SSH must be set up   *   between the client machine from where the test is submitted, and the cluster   *   nodes where the test runs.  *     *   The test should be run on a<b>free</b> cluster where there is no other parallel  *   job submission going on. Submission of other jobs while the test runs can cause  *   the tests/jobs submitted to fail.  */
end_comment

begin_class
DECL|class|ReliabilityTest
specifier|public
class|class
name|ReliabilityTest
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|dir
specifier|private
name|String
name|dir
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReliabilityTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|displayUsage ()
specifier|private
name|void
name|displayUsage
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This must be run in only the distributed mode "
operator|+
literal|"(LocalJobRunner not supported).\n\tUsage: MRReliabilityTest "
operator|+
literal|"-libjars<path to hadoop-examples.jar> [-scratchdir<dir>]"
operator|+
literal|"\n[-scratchdir] points to a scratch space on this host where temp"
operator|+
literal|" files for this test will be created. Defaults to current working"
operator|+
literal|" dir. \nPasswordless SSH must be set up between this host and the"
operator|+
literal|" nodes which the test is going to use.\n"
operator|+
literal|"The test should be run on a free cluster with no parallel job submission"
operator|+
literal|" going on, as the test requires to restart TaskTrackers and kill tasks"
operator|+
literal|" any job submission while the tests are running can cause jobs/tests to fail"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"local"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"local"
argument_list|)
argument_list|)
condition|)
block|{
name|displayUsage
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherArgs
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|otherArgs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-scratchdir"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|otherArgs
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|displayUsage
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|otherArgs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|dir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|displayUsage
argument_list|()
expr_stmt|;
block|}
comment|//to protect against the case of jobs failing even when multiple attempts
comment|//fail, set some high values for the max attempts
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|REDUCE_MAX_ATTEMPTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|runSleepJobTest
argument_list|(
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runSortJobTests
argument_list|(
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|runSleepJobTest (final JobClient jc, final Configuration conf)
specifier|private
name|void
name|runSleepJobTest
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterStatus
name|c
init|=
name|jc
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|maxMaps
init|=
name|c
operator|.
name|getMaxMapTasks
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|maxReduces
init|=
name|maxMaps
decl_stmt|;
name|int
name|mapSleepTime
init|=
operator|(
name|int
operator|)
name|c
operator|.
name|getTTExpiryInterval
argument_list|()
decl_stmt|;
name|int
name|reduceSleepTime
init|=
name|mapSleepTime
decl_stmt|;
name|String
index|[]
name|sleepJobArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxMaps
argument_list|)
block|,
literal|"-r"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxReduces
argument_list|)
block|,
literal|"-mt"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|mapSleepTime
argument_list|)
block|,
literal|"-rt"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|reduceSleepTime
argument_list|)
block|}
decl_stmt|;
name|runTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
literal|"org.apache.hadoop.mapreduce.SleepJob"
argument_list|,
name|sleepJobArgs
argument_list|,
operator|new
name|KillTaskThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.2f
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|KillTrackerThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.4f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SleepJob done"
argument_list|)
expr_stmt|;
block|}
DECL|method|runSortJobTests (final JobClient jc, final Configuration conf)
specifier|private
name|void
name|runSortJobTests
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|inputPath
init|=
literal|"my_reliability_test_input"
decl_stmt|;
name|String
name|outputPath
init|=
literal|"my_reliability_test_output"
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jc
operator|.
name|getFs
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runRandomWriterTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|runSortTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
name|inputPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|runSortValidatorTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
name|inputPath
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
DECL|method|runRandomWriterTest (final JobClient jc, final Configuration conf, final String inputPath)
specifier|private
name|void
name|runRandomWriterTest
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|inputPath
parameter_list|)
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
literal|"org.apache.hadoop.examples.RandomWriter"
argument_list|,
operator|new
name|String
index|[]
block|{
name|inputPath
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|KillTrackerThread
argument_list|(
name|jc
argument_list|,
literal|0
argument_list|,
literal|0.4f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RandomWriter job done"
argument_list|)
expr_stmt|;
block|}
DECL|method|runSortTest (final JobClient jc, final Configuration conf, final String inputPath, final String outputPath)
specifier|private
name|void
name|runSortTest
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|inputPath
parameter_list|,
specifier|final
name|String
name|outputPath
parameter_list|)
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
literal|"org.apache.hadoop.examples.Sort"
argument_list|,
operator|new
name|String
index|[]
block|{
name|inputPath
block|,
name|outputPath
block|}
argument_list|,
operator|new
name|KillTaskThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.2f
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|KillTrackerThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.8f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sort job done"
argument_list|)
expr_stmt|;
block|}
DECL|method|runSortValidatorTest (final JobClient jc, final Configuration conf, final String inputPath, final String outputPath)
specifier|private
name|void
name|runSortValidatorTest
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|inputPath
parameter_list|,
specifier|final
name|String
name|outputPath
parameter_list|)
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
literal|"org.apache.hadoop.mapred.SortValidator"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-sortInput"
block|,
name|inputPath
block|,
literal|"-sortOutput"
block|,
name|outputPath
block|}
argument_list|,
operator|new
name|KillTaskThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.2f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|KillTrackerThread
argument_list|(
name|jc
argument_list|,
literal|2
argument_list|,
literal|0.8f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SortValidator job done"
argument_list|)
expr_stmt|;
block|}
DECL|method|normalizeCommandPath (String command)
specifier|private
name|String
name|normalizeCommandPath
parameter_list|(
name|String
name|command
parameter_list|)
block|{
specifier|final
name|String
name|hadoopHome
decl_stmt|;
if|if
condition|(
operator|(
name|hadoopHome
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_HOME"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|command
operator|=
name|hadoopHome
operator|+
literal|"/"
operator|+
name|command
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
DECL|method|checkJobExitStatus (int status, String jobName)
specifier|private
name|void
name|checkJobExitStatus
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|jobName
parameter_list|)
block|{
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|jobName
operator|+
literal|" job failed with status: "
operator|+
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|jobName
operator|+
literal|" done."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Starts the job in a thread. It also starts the taskKill/tasktrackerKill
comment|//threads.
DECL|method|runTest (final JobClient jc, final Configuration conf, final String jobClass, final String[] args, KillTaskThread killTaskThread, KillTrackerThread killTrackerThread)
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|JobClient
name|jc
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|jobClass
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|,
name|KillTaskThread
name|killTaskThread
parameter_list|,
name|KillTrackerThread
name|killTrackerThread
parameter_list|)
throws|throws
name|Exception
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"Job Test"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jobClassObj
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|jobClass
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
call|(
name|Tool
call|)
argument_list|(
name|jobClassObj
operator|.
name|newInstance
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|checkJobExitStatus
argument_list|(
name|status
argument_list|,
name|jobClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"JOB "
operator|+
name|jobClass
operator|+
literal|" failed to run"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobStatus
index|[]
name|jobs
decl_stmt|;
comment|//get the job ID. This is the job that we just submitted
while|while
condition|(
operator|(
name|jobs
operator|=
name|jc
operator|.
name|jobsToComplete
argument_list|()
operator|)
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the job "
operator|+
name|jobClass
operator|+
literal|" to start"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|JobID
name|jobId
init|=
name|jobs
index|[
name|jobs
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|RunningJob
name|rJob
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The last job returned by the querying JobTracker is complete :"
operator|+
name|rJob
operator|.
name|getJobID
argument_list|()
operator|+
literal|" .Exiting the test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rJob
operator|.
name|getJobState
argument_list|()
operator|==
name|JobStatus
operator|.
name|PREP
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JobID : "
operator|+
name|jobId
operator|+
literal|" not started RUNNING yet"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|rJob
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|killTaskThread
operator|!=
literal|null
condition|)
block|{
name|killTaskThread
operator|.
name|setRunningJob
argument_list|(
name|rJob
argument_list|)
expr_stmt|;
name|killTaskThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|killTaskThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DONE WITH THE TASK KILL/FAIL TESTS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|killTrackerThread
operator|!=
literal|null
condition|)
block|{
name|killTrackerThread
operator|.
name|setRunningJob
argument_list|(
name|rJob
argument_list|)
expr_stmt|;
name|killTrackerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|killTrackerThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DONE WITH THE TESTS TO DO WITH LOST TASKTRACKERS"
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|class|KillTrackerThread
specifier|private
class|class
name|KillTrackerThread
extends|extends
name|Thread
block|{
DECL|field|killed
specifier|private
specifier|volatile
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
DECL|field|jc
specifier|private
name|JobClient
name|jc
decl_stmt|;
DECL|field|rJob
specifier|private
name|RunningJob
name|rJob
decl_stmt|;
DECL|field|thresholdMultiplier
specifier|final
specifier|private
name|int
name|thresholdMultiplier
decl_stmt|;
DECL|field|threshold
specifier|private
name|float
name|threshold
init|=
literal|0.2f
decl_stmt|;
DECL|field|onlyMapsProgress
specifier|private
name|boolean
name|onlyMapsProgress
decl_stmt|;
DECL|field|numIterations
specifier|private
name|int
name|numIterations
decl_stmt|;
DECL|field|slavesFile
specifier|final
specifier|private
name|String
name|slavesFile
init|=
name|dir
operator|+
literal|"/_reliability_test_slaves_file_"
decl_stmt|;
DECL|field|shellCommand
specifier|final
name|String
name|shellCommand
init|=
name|normalizeCommandPath
argument_list|(
literal|"bin/slaves.sh"
argument_list|)
decl_stmt|;
DECL|field|STOP_COMMAND
specifier|final
specifier|private
name|String
name|STOP_COMMAND
init|=
literal|"ps uwwx | grep java | grep "
operator|+
literal|"org.apache.hadoop.mapred.TaskTracker"
operator|+
literal|" |"
operator|+
literal|" grep -v grep | tr -s ' ' | cut -d ' ' -f2 | xargs kill -s STOP"
decl_stmt|;
DECL|field|RESUME_COMMAND
specifier|final
specifier|private
name|String
name|RESUME_COMMAND
init|=
literal|"ps uwwx | grep java | grep "
operator|+
literal|"org.apache.hadoop.mapred.TaskTracker"
operator|+
literal|" |"
operator|+
literal|" grep -v grep | tr -s ' ' | cut -d ' ' -f2 | xargs kill -s CONT"
decl_stmt|;
comment|//Only one instance must be active at any point
DECL|method|KillTrackerThread (JobClient jc, int threshaldMultiplier, float threshold, boolean onlyMapsProgress, int numIterations)
specifier|public
name|KillTrackerThread
parameter_list|(
name|JobClient
name|jc
parameter_list|,
name|int
name|threshaldMultiplier
parameter_list|,
name|float
name|threshold
parameter_list|,
name|boolean
name|onlyMapsProgress
parameter_list|,
name|int
name|numIterations
parameter_list|)
block|{
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
name|this
operator|.
name|thresholdMultiplier
operator|=
name|threshaldMultiplier
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|onlyMapsProgress
operator|=
name|onlyMapsProgress
expr_stmt|;
name|this
operator|.
name|numIterations
operator|=
name|numIterations
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setRunningJob (RunningJob rJob)
specifier|public
name|void
name|setRunningJob
parameter_list|(
name|RunningJob
name|rJob
parameter_list|)
block|{
name|this
operator|.
name|rJob
operator|=
name|rJob
expr_stmt|;
block|}
DECL|method|kill ()
specifier|public
name|void
name|kill
parameter_list|()
block|{
name|killed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|stopStartTrackers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyMapsProgress
condition|)
block|{
name|stopStartTrackers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopStartTrackers (boolean considerMaps)
specifier|private
name|void
name|stopStartTrackers
parameter_list|(
name|boolean
name|considerMaps
parameter_list|)
block|{
if|if
condition|(
name|considerMaps
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will STOP/RESUME tasktrackers based on Maps'"
operator|+
literal|" progress"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will STOP/RESUME tasktrackers based on "
operator|+
literal|"Reduces' progress"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial progress threshold: "
operator|+
name|threshold
operator|+
literal|". Threshold Multiplier: "
operator|+
name|thresholdMultiplier
operator|+
literal|". Number of iterations: "
operator|+
name|numIterations
argument_list|)
expr_stmt|;
name|float
name|thresholdVal
init|=
name|threshold
decl_stmt|;
name|int
name|numIterationsDone
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|killed
condition|)
block|{
try|try
block|{
name|float
name|progress
decl_stmt|;
if|if
condition|(
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|isComplete
argument_list|()
operator|||
name|numIterationsDone
operator|==
name|numIterations
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|considerMaps
condition|)
block|{
name|progress
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|mapProgress
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|progress
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|reduceProgress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|progress
operator|>=
name|thresholdVal
condition|)
block|{
name|numIterationsDone
operator|++
expr_stmt|;
name|ClusterStatus
name|c
decl_stmt|;
name|stopTaskTrackers
argument_list|(
operator|(
name|c
operator|=
name|jc
operator|.
name|getClusterStatus
argument_list|(
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.5
operator|*
name|c
operator|.
name|getTTExpiryInterval
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|startTaskTrackers
argument_list|()
expr_stmt|;
name|thresholdVal
operator|=
name|thresholdVal
operator|*
name|thresholdMultiplier
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|killed
operator|=
literal|true
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopTaskTrackers (ClusterStatus c)
specifier|private
name|void
name|stopTaskTrackers
parameter_list|(
name|ClusterStatus
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|trackerNames
init|=
name|c
operator|.
name|getActiveTrackerNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|trackerNamesList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|trackerNames
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|trackerNamesList
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|slavesFile
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Stopping a few trackers"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackerNamesList
control|)
block|{
name|String
name|host
init|=
name|convertTrackerNameToHostName
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Marking tracker on host: "
operator|+
name|host
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
operator|(
name|host
operator|+
literal|"\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|++
operator|>=
name|trackerNamesList
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|runOperationOnTT
argument_list|(
literal|"suspend"
argument_list|)
expr_stmt|;
block|}
DECL|method|startTaskTrackers ()
specifier|private
name|void
name|startTaskTrackers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Resuming the stopped trackers"
argument_list|)
expr_stmt|;
name|runOperationOnTT
argument_list|(
literal|"resume"
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|slavesFile
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|runOperationOnTT (String operation)
specifier|private
name|void
name|runOperationOnTT
parameter_list|(
name|String
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hMap
operator|.
name|put
argument_list|(
literal|"HADOOP_SLAVES"
argument_list|,
name|slavesFile
argument_list|)
expr_stmt|;
name|StringTokenizer
name|strToken
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"suspend"
argument_list|)
condition|)
block|{
name|strToken
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|STOP_COMMAND
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strToken
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|RESUME_COMMAND
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|commandArgs
index|[]
init|=
operator|new
name|String
index|[
name|strToken
operator|.
name|countTokens
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|commandArgs
index|[
name|i
operator|++
index|]
operator|=
name|shellCommand
expr_stmt|;
while|while
condition|(
name|strToken
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|commandArgs
index|[
name|i
operator|++
index|]
operator|=
name|strToken
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|String
name|output
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|hMap
argument_list|,
name|commandArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
operator|&&
operator|!
name|output
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convertTrackerNameToHostName (String trackerName)
specifier|private
name|String
name|convertTrackerNameToHostName
parameter_list|(
name|String
name|trackerName
parameter_list|)
block|{
comment|// Convert the trackerName to it's host name
name|int
name|indexOfColon
init|=
name|trackerName
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|trackerHostName
init|=
operator|(
name|indexOfColon
operator|==
operator|-
literal|1
operator|)
condition|?
name|trackerName
else|:
name|trackerName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfColon
argument_list|)
decl_stmt|;
return|return
name|trackerHostName
operator|.
name|substring
argument_list|(
literal|"tracker_"
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|KillTaskThread
specifier|private
class|class
name|KillTaskThread
extends|extends
name|Thread
block|{
DECL|field|killed
specifier|private
specifier|volatile
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
DECL|field|rJob
specifier|private
name|RunningJob
name|rJob
decl_stmt|;
DECL|field|jc
specifier|private
name|JobClient
name|jc
decl_stmt|;
DECL|field|thresholdMultiplier
specifier|final
specifier|private
name|int
name|thresholdMultiplier
decl_stmt|;
DECL|field|threshold
specifier|private
name|float
name|threshold
init|=
literal|0.2f
decl_stmt|;
DECL|field|onlyMapsProgress
specifier|private
name|boolean
name|onlyMapsProgress
decl_stmt|;
DECL|field|numIterations
specifier|private
name|int
name|numIterations
decl_stmt|;
DECL|method|KillTaskThread (JobClient jc, int thresholdMultiplier, float threshold, boolean onlyMapsProgress, int numIterations)
specifier|public
name|KillTaskThread
parameter_list|(
name|JobClient
name|jc
parameter_list|,
name|int
name|thresholdMultiplier
parameter_list|,
name|float
name|threshold
parameter_list|,
name|boolean
name|onlyMapsProgress
parameter_list|,
name|int
name|numIterations
parameter_list|)
block|{
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
name|this
operator|.
name|thresholdMultiplier
operator|=
name|thresholdMultiplier
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|onlyMapsProgress
operator|=
name|onlyMapsProgress
expr_stmt|;
name|this
operator|.
name|numIterations
operator|=
name|numIterations
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setRunningJob (RunningJob rJob)
specifier|public
name|void
name|setRunningJob
parameter_list|(
name|RunningJob
name|rJob
parameter_list|)
block|{
name|this
operator|.
name|rJob
operator|=
name|rJob
expr_stmt|;
block|}
DECL|method|kill ()
specifier|public
name|void
name|kill
parameter_list|()
block|{
name|killed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|killBasedOnProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyMapsProgress
condition|)
block|{
name|killBasedOnProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|killBasedOnProgress (boolean considerMaps)
specifier|private
name|void
name|killBasedOnProgress
parameter_list|(
name|boolean
name|considerMaps
parameter_list|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|considerMaps
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will kill tasks based on Maps' progress"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will kill tasks based on Reduces' progress"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial progress threshold: "
operator|+
name|threshold
operator|+
literal|". Threshold Multiplier: "
operator|+
name|thresholdMultiplier
operator|+
literal|". Number of iterations: "
operator|+
name|numIterations
argument_list|)
expr_stmt|;
name|float
name|thresholdVal
init|=
name|threshold
decl_stmt|;
name|int
name|numIterationsDone
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|killed
condition|)
block|{
try|try
block|{
name|float
name|progress
decl_stmt|;
if|if
condition|(
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|isComplete
argument_list|()
operator|||
name|numIterationsDone
operator|==
name|numIterations
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|considerMaps
condition|)
block|{
name|progress
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|mapProgress
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|progress
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|reduceProgress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|progress
operator|>=
name|thresholdVal
condition|)
block|{
name|numIterationsDone
operator|++
expr_stmt|;
if|if
condition|(
name|numIterationsDone
operator|>
literal|0
operator|&&
name|numIterationsDone
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
comment|//fail tasks instead of kill
block|}
name|ClusterStatus
name|c
init|=
name|jc
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Killing a few tasks"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|TaskAttemptID
argument_list|>
name|runningTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|()
decl_stmt|;
name|TaskReport
name|mapReports
index|[]
init|=
name|jc
operator|.
name|getMapTaskReports
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskReport
name|mapReport
range|:
name|mapReports
control|)
block|{
if|if
condition|(
name|mapReport
operator|.
name|getCurrentStatus
argument_list|()
operator|==
name|TIPStatus
operator|.
name|RUNNING
condition|)
block|{
name|runningTasks
operator|.
name|addAll
argument_list|(
name|mapReport
operator|.
name|getRunningTaskAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runningTasks
operator|.
name|size
argument_list|()
operator|>
name|c
operator|.
name|getTaskTrackers
argument_list|()
operator|/
literal|2
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskAttemptID
name|t
range|:
name|runningTasks
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Killed task : "
operator|+
name|t
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|killTask
argument_list|(
name|t
argument_list|,
name|fail
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|++
operator|>
name|runningTasks
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
comment|//kill 50%
break|break;
block|}
block|}
block|}
name|runningTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TaskReport
name|reduceReports
index|[]
init|=
name|jc
operator|.
name|getReduceTaskReports
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskReport
name|reduceReport
range|:
name|reduceReports
control|)
block|{
if|if
condition|(
name|reduceReport
operator|.
name|getCurrentStatus
argument_list|()
operator|==
name|TIPStatus
operator|.
name|RUNNING
condition|)
block|{
name|runningTasks
operator|.
name|addAll
argument_list|(
name|reduceReport
operator|.
name|getRunningTaskAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runningTasks
operator|.
name|size
argument_list|()
operator|>
name|c
operator|.
name|getTaskTrackers
argument_list|()
operator|/
literal|2
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskAttemptID
name|t
range|:
name|runningTasks
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" Killed task : "
operator|+
name|t
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|killTask
argument_list|(
name|t
argument_list|,
name|fail
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|++
operator|>
name|runningTasks
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
comment|//kill 50%
break|break;
block|}
block|}
block|}
name|thresholdVal
operator|=
name|thresholdVal
operator|*
name|thresholdMultiplier
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|killed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|ReliabilityTest
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

