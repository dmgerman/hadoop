begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A sleep job whose mappers create 1MB buffer for every record.  */
end_comment

begin_class
DECL|class|GrowingSleepJob
specifier|public
class|class
name|GrowingSleepJob
extends|extends
name|SleepJob
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GrowingSleepJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|GrowingSleepMapper
specifier|public
specifier|static
class|class
name|GrowingSleepMapper
extends|extends
name|SleepMapper
block|{
DECL|field|MB
specifier|private
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|bytes
specifier|private
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|map (IntWritable key, IntWritable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|IntWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|long
name|free
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|>
literal|32
operator|*
name|MB
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Free memory = "
operator|+
name|free
operator|+
literal|" bytes. Creating 1 MB on the heap."
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
name|MB
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|GrowingSleepJob
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createJob (int numMapper, int numReducer, long mapSleepTime, int mapSleepCount, long reduceSleepTime, int reduceSleepCount)
specifier|public
name|Job
name|createJob
parameter_list|(
name|int
name|numMapper
parameter_list|,
name|int
name|numReducer
parameter_list|,
name|long
name|mapSleepTime
parameter_list|,
name|int
name|mapSleepCount
parameter_list|,
name|long
name|reduceSleepTime
parameter_list|,
name|int
name|reduceSleepCount
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|super
operator|.
name|createJob
argument_list|(
name|numMapper
argument_list|,
name|numReducer
argument_list|,
name|mapSleepTime
argument_list|,
name|mapSleepCount
argument_list|,
name|reduceSleepTime
argument_list|,
name|reduceSleepCount
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|GrowingSleepMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"Growing sleep job"
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
end_class

end_unit

