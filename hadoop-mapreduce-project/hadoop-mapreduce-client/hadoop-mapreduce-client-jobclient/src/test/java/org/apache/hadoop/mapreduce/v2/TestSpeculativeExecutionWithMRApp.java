begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestSpeculativeExecutionWithMRApp
specifier|public
class|class
name|TestSpeculativeExecutionWithMRApp
block|{
DECL|field|NUM_MAPPERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MAPPERS
init|=
literal|5
decl_stmt|;
DECL|field|NUM_REDUCERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REDUCERS
init|=
literal|0
decl_stmt|;
annotation|@
name|Test
DECL|method|testSpeculateSuccessfulWithoutUpdateEvents ()
specifier|public
name|void
name|testSpeculateSuccessfulWithoutUpdateEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|actualClock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
specifier|final
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
name|actualClock
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
name|NUM_MAPPERS
argument_list|,
name|NUM_REDUCERS
argument_list|,
literal|false
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks is not correct"
argument_list|,
name|NUM_MAPPERS
operator|+
name|NUM_REDUCERS
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|taskIter
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|taskIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|app
operator|.
name|waitForState
argument_list|(
name|taskIter
operator|.
name|next
argument_list|()
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
comment|// Process the update events
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|EventHandler
name|appEventHandler
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|mapTask
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|taskAttempt
range|:
name|mapTask
operator|.
name|getValue
argument_list|()
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TaskAttemptStatus
name|status
init|=
name|createTaskAttemptStatus
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|0.8
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|TaskAttemptStatusUpdateEvent
name|event
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
name|Random
name|generator
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Object
index|[]
name|taskValues
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
specifier|final
name|Task
name|taskToBeSpeculated
init|=
operator|(
name|Task
operator|)
name|taskValues
index|[
name|generator
operator|.
name|nextInt
argument_list|(
name|taskValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
comment|// Other than one random task, finish every other task.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|mapTask
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|taskAttempt
range|:
name|mapTask
operator|.
name|getValue
argument_list|()
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mapTask
operator|.
name|getKey
argument_list|()
operator|!=
name|taskToBeSpeculated
operator|.
name|getID
argument_list|()
condition|)
block|{
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|taskAttempt
operator|.
name|getValue
argument_list|()
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
if|if
condition|(
name|taskToBeSpeculated
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// finish 1st TA, 2nd will be killed
name|TaskAttempt
index|[]
name|ta
init|=
name|makeFirstAttemptWin
argument_list|(
name|appEventHandler
argument_list|,
name|taskToBeSpeculated
argument_list|)
decl_stmt|;
name|verifySpeculationMessage
argument_list|(
name|app
argument_list|,
name|ta
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSepculateSuccessfulWithUpdateEvents ()
specifier|public
name|void
name|testSepculateSuccessfulWithUpdateEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|actualClock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
specifier|final
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
name|actualClock
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
name|NUM_MAPPERS
argument_list|,
name|NUM_REDUCERS
argument_list|,
literal|false
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks is not correct"
argument_list|,
name|NUM_MAPPERS
operator|+
name|NUM_REDUCERS
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|taskIter
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|taskIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|app
operator|.
name|waitForState
argument_list|(
name|taskIter
operator|.
name|next
argument_list|()
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
comment|// Process the update events
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|EventHandler
name|appEventHandler
init|=
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|mapTask
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|taskAttempt
range|:
name|mapTask
operator|.
name|getValue
argument_list|()
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TaskAttemptStatus
name|status
init|=
name|createTaskAttemptStatus
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|TaskAttemptStatusUpdateEvent
name|event
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
name|Task
name|speculatedTask
init|=
literal|null
decl_stmt|;
name|int
name|numTasksToFinish
init|=
name|NUM_MAPPERS
operator|+
name|NUM_REDUCERS
operator|-
literal|1
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|task
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|taskAttempt
range|:
name|task
operator|.
name|getValue
argument_list|()
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numTasksToFinish
operator|>
literal|0
condition|)
block|{
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|)
argument_list|)
expr_stmt|;
name|numTasksToFinish
operator|--
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|taskAttempt
operator|.
name|getValue
argument_list|()
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The last task is chosen for speculation
name|TaskAttemptStatus
name|status
init|=
name|createTaskAttemptStatus
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|0.75
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|speculatedTask
operator|=
name|task
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|TaskAttemptStatusUpdateEvent
name|event
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|15000
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|task
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|taskAttempt
range|:
name|task
operator|.
name|getValue
argument_list|()
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|taskAttempt
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|TaskAttemptState
operator|.
name|SUCCEEDED
condition|)
block|{
name|TaskAttemptStatus
name|status
init|=
name|createTaskAttemptStatus
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|0.75
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|TaskAttemptStatusUpdateEvent
name|event
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getKey
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Task
name|speculatedTaskConst
init|=
name|speculatedTask
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
if|if
condition|(
name|speculatedTaskConst
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|TaskAttempt
index|[]
name|ta
init|=
name|makeFirstAttemptWin
argument_list|(
name|appEventHandler
argument_list|,
name|speculatedTask
argument_list|)
decl_stmt|;
name|verifySpeculationMessage
argument_list|(
name|app
argument_list|,
name|ta
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
DECL|method|makeFirstAttemptWin ( EventHandler appEventHandler, Task speculatedTask)
specifier|private
specifier|static
name|TaskAttempt
index|[]
name|makeFirstAttemptWin
parameter_list|(
name|EventHandler
name|appEventHandler
parameter_list|,
name|Task
name|speculatedTask
parameter_list|)
block|{
comment|// finish 1st TA, 2nd will be killed
name|Collection
argument_list|<
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|speculatedTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|TaskAttempt
index|[]
name|ta
init|=
operator|new
name|TaskAttempt
index|[
name|attempts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|attempts
operator|.
name|toArray
argument_list|(
name|ta
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|ta
index|[
literal|0
index|]
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|ta
index|[
literal|0
index|]
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ta
return|;
block|}
DECL|method|verifySpeculationMessage (MRApp app, TaskAttempt[] ta)
specifier|private
specifier|static
name|void
name|verifySpeculationMessage
parameter_list|(
name|MRApp
name|app
parameter_list|,
name|TaskAttempt
index|[]
name|ta
parameter_list|)
throws|throws
name|Exception
block|{
name|app
operator|.
name|waitForState
argument_list|(
name|ta
index|[
literal|0
index|]
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// The speculative attempt may be not killed before the MR job succeeds.
block|}
DECL|method|createTaskAttemptStatus (TaskAttemptId id, float progress, TaskAttemptState state)
specifier|private
name|TaskAttemptStatus
name|createTaskAttemptStatus
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|,
name|float
name|progress
parameter_list|,
name|TaskAttemptState
name|state
parameter_list|)
block|{
name|TaskAttemptStatus
name|status
init|=
operator|new
name|TaskAttemptStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|status
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
name|status
operator|.
name|taskState
operator|=
name|state
expr_stmt|;
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

