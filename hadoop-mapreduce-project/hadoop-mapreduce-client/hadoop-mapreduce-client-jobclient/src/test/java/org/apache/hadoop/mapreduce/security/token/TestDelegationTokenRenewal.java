begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.security.token
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * unit test -   * tests addition/deletion/cancelation of renewals of delegation tokens  *  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|TestDelegationTokenRenewal
specifier|public
class|class
name|TestDelegationTokenRenewal
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDelegationTokenRenewal
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KIND
specifier|private
specifier|static
specifier|final
name|Text
name|KIND
init|=
operator|new
name|Text
argument_list|(
literal|"TestDelegationTokenRenewal.Token"
argument_list|)
decl_stmt|;
DECL|class|Renewer
specifier|public
specifier|static
class|class
name|Renewer
extends|extends
name|TokenRenewer
block|{
DECL|field|counter
specifier|private
specifier|static
name|int
name|counter
init|=
literal|0
decl_stmt|;
DECL|field|lastRenewed
specifier|private
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|lastRenewed
init|=
literal|null
decl_stmt|;
DECL|field|tokenToRenewIn2Sec
specifier|private
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|tokenToRenewIn2Sec
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|KIND
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> t, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|MyToken
name|token
init|=
operator|(
name|MyToken
operator|)
name|t
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isCanceled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"token has been canceled"
argument_list|)
throw|;
block|}
name|lastRenewed
operator|=
name|token
expr_stmt|;
name|counter
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Called MYDFS.renewdelegationtoken "
operator|+
name|token
operator|+
literal|";this dfs="
operator|+
name|this
operator|.
name|hashCode
argument_list|()
operator|+
literal|";c="
operator|+
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenToRenewIn2Sec
operator|==
name|token
condition|)
block|{
comment|// this token first renewal in 2 seconds
name|LOG
operator|.
name|info
argument_list|(
literal|"RENEW in 2 seconds"
argument_list|)
expr_stmt|;
name|tokenToRenewIn2Sec
operator|=
literal|null
expr_stmt|;
return|return
literal|2
operator|*
literal|1000
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|86400
operator|*
literal|1000
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> t, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|MyToken
name|token
init|=
operator|(
name|MyToken
operator|)
name|t
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel token "
operator|+
name|token
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancelToken
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// create a fake FileSystem (MyFS) and assosiate it
comment|// with "hdfs" schema.
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|DelegationTokenRenewal
operator|.
name|SCHEME
operator|+
literal|"://localhost:0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scheme is : "
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs."
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|".impl"
argument_list|,
name|MyFS
operator|.
name|class
argument_list|,
name|DistributedFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"filesystem uri = "
operator|+
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyDelegationTokenSecretManager
specifier|private
specifier|static
class|class
name|MyDelegationTokenSecretManager
extends|extends
name|DelegationTokenSecretManager
block|{
DECL|method|MyDelegationTokenSecretManager (long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval, FSNamesystem namesystem)
specifier|public
name|MyDelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|,
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|,
name|namesystem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//DelegationTokenSecretManager
DECL|method|logUpdateMasterKey (DelegationKey key)
specifier|public
name|void
name|logUpdateMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return;
block|}
block|}
comment|/**    * add some extra functionality for testing    * 1. toString();    * 2. cancel() and isCanceled()    */
DECL|class|MyToken
specifier|private
specifier|static
class|class
name|MyToken
extends|extends
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|status
specifier|public
name|String
name|status
init|=
literal|"GOOD"
decl_stmt|;
DECL|field|CANCELED
specifier|public
specifier|static
specifier|final
name|String
name|CANCELED
init|=
literal|"CANCELED"
decl_stmt|;
DECL|method|MyToken (DelegationTokenIdentifier dtId1, MyDelegationTokenSecretManager sm)
specifier|public
name|MyToken
parameter_list|(
name|DelegationTokenIdentifier
name|dtId1
parameter_list|,
name|MyDelegationTokenSecretManager
name|sm
parameter_list|)
block|{
name|super
argument_list|(
name|dtId1
argument_list|,
name|sm
argument_list|)
expr_stmt|;
name|setKind
argument_list|(
name|KIND
argument_list|)
expr_stmt|;
name|status
operator|=
literal|"GOOD"
expr_stmt|;
block|}
DECL|method|isCanceled ()
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|status
operator|.
name|equals
argument_list|(
name|CANCELED
argument_list|)
return|;
block|}
DECL|method|cancelToken ()
specifier|public
name|void
name|cancelToken
parameter_list|()
block|{
name|this
operator|.
name|status
operator|=
name|CANCELED
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id="
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|this
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idLen
init|=
name|id
operator|.
name|length
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|idLen
operator|-
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";k="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";s="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * fake FileSystem     * overwrites three methods    * 1. getDelegationToken() - generates a token    * 2. renewDelegataionToken - counts number of calls, and remembers     * most recently renewed token.    * 3. cancelToken -cancels token (subsequent renew will cause IllegalToken     * exception    */
DECL|class|MyFS
specifier|static
class|class
name|MyFS
extends|extends
name|DistributedFileSystem
block|{
DECL|method|MyFS ()
specifier|public
name|MyFS
parameter_list|()
block|{}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|MyToken
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|MyToken
name|result
init|=
name|createTokens
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Called MYDFS.getdelegationtoken "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * auxilary - create token    * @param renewer    * @return    * @throws IOException    */
DECL|method|createTokens (Text renewer)
specifier|static
name|MyToken
name|createTokens
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|user1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|MyDelegationTokenSecretManager
name|sm
init|=
operator|new
name|MyDelegationTokenSecretManager
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|,
literal|3600000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sm
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|user1
argument_list|,
name|renewer
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|MyToken
name|token1
init|=
operator|new
name|MyToken
argument_list|(
name|dtId1
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|token1
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token1
return|;
block|}
comment|/**    * Basic idea of the test:    * 1. create tokens.    * 2. Mark one of them to be renewed in 2 seconds (istead of    * 24 hourse)    * 3. register them for renewal    * 4. sleep for 3 seconds    * 5. count number of renewals (should 3 initial ones + one extra)    * 6. register another token for 2 seconds     * 7. cancel it immediately    * 8. Sleep and check that the 2 seconds renew didn't happen     * (totally 5 reneals)    * 9. check cancelation    * @throws IOException    * @throws URISyntaxException    */
annotation|@
name|Test
DECL|method|testDTRenewal ()
specifier|public
name|void
name|testDTRenewal
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|conf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 1. - add three tokens - make sure exactly one get's renewed
comment|// get the delegation tokens
name|MyToken
name|token1
decl_stmt|,
name|token2
decl_stmt|,
name|token3
decl_stmt|;
name|token1
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|token2
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
name|token3
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user3"
argument_list|)
argument_list|)
expr_stmt|;
comment|//to cause this one to be set for renew in 2 secs
name|Renewer
operator|.
name|tokenToRenewIn2Sec
operator|=
name|token1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"token="
operator|+
name|token1
operator|+
literal|" should be renewed for 2 secs"
argument_list|)
expr_stmt|;
comment|// two distinct Namenodes
name|String
name|nn1
init|=
name|DelegationTokenRenewal
operator|.
name|SCHEME
operator|+
literal|"://host1:0"
decl_stmt|;
name|String
name|nn2
init|=
name|DelegationTokenRenewal
operator|.
name|SCHEME
operator|+
literal|"://host2:0"
decl_stmt|;
name|String
name|nn3
init|=
name|DelegationTokenRenewal
operator|.
name|SCHEME
operator|+
literal|"://host3:0"
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// register the token for renewal
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn1
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn2
argument_list|)
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn3
argument_list|)
argument_list|,
name|token3
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|DelegationTokenRenewal
operator|.
name|registerDelegationTokensForRenewal
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"job1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ts
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// first 3 initial renewals + 1 real
name|int
name|numberOfExpectedRenewals
init|=
literal|3
operator|+
literal|1
decl_stmt|;
name|int
name|attempts
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|attempts
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep 3 seconds, so it has time to renew
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
comment|// since we cannot guarantee timely execution - let's give few chances
if|if
condition|(
name|Renewer
operator|.
name|counter
operator|==
name|numberOfExpectedRenewals
condition|)
break|break;
block|}
name|assertEquals
argument_list|(
literal|"renew wasn't called as many times as expected(4):"
argument_list|,
name|numberOfExpectedRenewals
argument_list|,
name|Renewer
operator|.
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"most recently renewed token mismatch"
argument_list|,
name|Renewer
operator|.
name|lastRenewed
argument_list|,
name|token1
argument_list|)
expr_stmt|;
comment|// Test 2.
comment|// add another token ( that expires in 2 secs). Then remove it, before
comment|// time is up.
comment|// Wait for 3 secs , and make sure no renews were called
name|ts
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|MyToken
name|token4
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user4"
argument_list|)
argument_list|)
decl_stmt|;
comment|//to cause this one to be set for renew in 2 secs
name|Renewer
operator|.
name|tokenToRenewIn2Sec
operator|=
name|token4
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"token="
operator|+
name|token4
operator|+
literal|" should be renewed for 2 secs"
argument_list|)
expr_stmt|;
name|String
name|nn4
init|=
name|DelegationTokenRenewal
operator|.
name|SCHEME
operator|+
literal|"://host4:0"
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn4
argument_list|)
argument_list|,
name|token4
argument_list|)
expr_stmt|;
name|JobID
name|jid2
init|=
operator|new
name|JobID
argument_list|(
literal|"job2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DelegationTokenRenewal
operator|.
name|registerDelegationTokensForRenewal
argument_list|(
name|jid2
argument_list|,
name|ts
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DelegationTokenRenewal
operator|.
name|removeDelegationTokenRenewalForJob
argument_list|(
name|jid2
argument_list|)
expr_stmt|;
name|numberOfExpectedRenewals
operator|=
name|Renewer
operator|.
name|counter
expr_stmt|;
comment|// number of renewals so far
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep 6 seconds, so it has time to renew
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Counter = "
operator|+
name|Renewer
operator|.
name|counter
operator|+
literal|";t="
operator|+
name|Renewer
operator|.
name|lastRenewed
argument_list|)
expr_stmt|;
comment|// counter and the token should stil be the old ones
name|assertEquals
argument_list|(
literal|"renew wasn't called as many times as expected"
argument_list|,
name|numberOfExpectedRenewals
argument_list|,
name|Renewer
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// also renewing of the cancelled token should fail
try|try
block|{
name|token4
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renew of canceled token didn't fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|ite
parameter_list|)
block|{
comment|//expected
block|}
block|}
block|}
end_class

end_unit

