begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestJoinProperties
specifier|public
class|class
name|TestJoinProperties
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|SOURCES
specifier|final
specifier|static
name|int
name|SOURCES
init|=
literal|3
decl_stmt|;
DECL|field|ITEMS
specifier|final
specifier|static
name|int
name|ITEMS
init|=
operator|(
name|SOURCES
operator|+
literal|1
operator|)
operator|*
operator|(
name|SOURCES
operator|+
literal|1
operator|)
decl_stmt|;
DECL|field|source
specifier|static
name|int
index|[]
index|[]
name|source
init|=
operator|new
name|int
index|[
name|SOURCES
index|]
index|[]
decl_stmt|;
DECL|field|src
specifier|static
name|Path
index|[]
name|src
decl_stmt|;
DECL|field|base
specifier|static
name|Path
name|base
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|base
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nested"
argument_list|)
argument_list|)
expr_stmt|;
name|src
operator|=
name|generateSources
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Sources from 0 to srcs-2 have IntWritable key and IntWritable value
comment|// src-1 source has IntWritable key and LongWritable value.
DECL|method|createWriters (Path testdir, Configuration conf, int srcs, Path[] src)
specifier|private
specifier|static
name|SequenceFile
operator|.
name|Writer
index|[]
name|createWriters
parameter_list|(
name|Path
name|testdir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|srcs
parameter_list|,
name|Path
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|src
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|10
argument_list|,
literal|36
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
index|[
name|srcs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|src
index|[
name|i
index|]
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|srcs
operator|-
literal|1
index|]
operator|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|src
index|[
name|srcs
operator|-
literal|1
index|]
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|stringify (IntWritable key, Writable val)
specifier|private
specifier|static
name|String
name|stringify
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
operator|+
name|val
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|generateSources (Configuration conf)
specifier|private
specifier|static
name|Path
index|[]
name|generateSources
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|source
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
name|ITEMS
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ITEMS
condition|;
operator|++
name|j
control|)
block|{
name|source
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|(
name|i
operator|+
literal|2
operator|)
operator|*
operator|(
name|j
operator|+
literal|1
operator|)
expr_stmt|;
block|}
block|}
name|Path
index|[]
name|src
init|=
operator|new
name|Path
index|[
name|SOURCES
index|]
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
name|createWriters
argument_list|(
name|base
argument_list|,
name|conf
argument_list|,
name|SOURCES
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|IntWritable
name|k
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|Writable
name|v
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|SOURCES
operator|-
literal|1
condition|)
block|{
name|v
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
operator|(
operator|(
name|IntWritable
operator|)
name|v
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|v
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ITEMS
condition|;
operator|++
name|j
control|)
block|{
name|k
operator|.
name|set
argument_list|(
name|source
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|src
return|;
block|}
DECL|method|A ()
specifier|private
name|String
name|A
parameter_list|()
block|{
return|return
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|B ()
specifier|private
name|String
name|B
parameter_list|()
block|{
return|return
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|C ()
specifier|private
name|String
name|C
parameter_list|()
block|{
return|return
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// construct op(op(A,B),C)
DECL|method|constructExpr1 (String op)
specifier|private
name|String
name|constructExpr1
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
operator|+
literal|"("
operator|+
name|op
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"),"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|C
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// construct op(A,op(B,C))
DECL|method|constructExpr2 (String op)
specifier|private
name|String
name|constructExpr2
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|C
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// construct op(A, B, C))
DECL|method|constructExpr3 (String op)
specifier|private
name|String
name|constructExpr3
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|C
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// construct override(inner(A, B), A)
DECL|method|constructExpr4 ()
specifier|private
name|String
name|constructExpr4
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"override(inner("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"),"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|enum|TestType
DECL|enumConstant|OUTER_ASSOCIATIVITY
DECL|enumConstant|INNER_IDENTITY
DECL|enumConstant|INNER_ASSOCIATIVITY
enum|enum
name|TestType
block|{
name|OUTER_ASSOCIATIVITY
block|,
name|INNER_IDENTITY
block|,
name|INNER_ASSOCIATIVITY
block|}
DECL|method|validateKeyValue (WritableComparable<?> k, Writable v, int tupleSize, boolean firstTuple, boolean secondTuple, TestType ttype)
specifier|private
name|void
name|validateKeyValue
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|k
parameter_list|,
name|Writable
name|v
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|boolean
name|firstTuple
parameter_list|,
name|boolean
name|secondTuple
parameter_list|,
name|TestType
name|ttype
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"out k:"
operator|+
name|k
operator|+
literal|" v:"
operator|+
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttype
operator|.
name|equals
argument_list|(
name|TestType
operator|.
name|OUTER_ASSOCIATIVITY
argument_list|)
condition|)
block|{
name|validateOuterKeyValue
argument_list|(
operator|(
name|IntWritable
operator|)
name|k
argument_list|,
operator|(
name|TupleWritable
operator|)
name|v
argument_list|,
name|tupleSize
argument_list|,
name|firstTuple
argument_list|,
name|secondTuple
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ttype
operator|.
name|equals
argument_list|(
name|TestType
operator|.
name|INNER_ASSOCIATIVITY
argument_list|)
condition|)
block|{
name|validateInnerKeyValue
argument_list|(
operator|(
name|IntWritable
operator|)
name|k
argument_list|,
operator|(
name|TupleWritable
operator|)
name|v
argument_list|,
name|tupleSize
argument_list|,
name|firstTuple
argument_list|,
name|secondTuple
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ttype
operator|.
name|equals
argument_list|(
name|TestType
operator|.
name|INNER_IDENTITY
argument_list|)
condition|)
block|{
name|validateKeyValue_INNER_IDENTITY
argument_list|(
operator|(
name|IntWritable
operator|)
name|k
argument_list|,
operator|(
name|IntWritable
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExpr1 (Configuration conf, String op, TestType ttype, int expectedCount)
specifier|private
name|void
name|testExpr1
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|op
parameter_list|,
name|TestType
name|ttype
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|joinExpr
init|=
name|constructExpr1
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|joinExpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|testFormat
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ttype
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not all keys present"
argument_list|,
name|count
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpr2 (Configuration conf, String op, TestType ttype, int expectedCount)
specifier|private
name|void
name|testExpr2
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|op
parameter_list|,
name|TestType
name|ttype
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|joinExpr
init|=
name|constructExpr2
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|joinExpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|testFormat
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|ttype
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not all keys present"
argument_list|,
name|count
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpr3 (Configuration conf, String op, TestType ttype, int expectedCount)
specifier|private
name|void
name|testExpr3
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|op
parameter_list|,
name|TestType
name|ttype
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|joinExpr
init|=
name|constructExpr3
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|joinExpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|testFormat
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ttype
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not all keys present"
argument_list|,
name|count
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpr4 (Configuration conf)
specifier|private
name|void
name|testExpr4
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|joinExpr
init|=
name|constructExpr4
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|joinExpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|testFormat
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|TestType
operator|.
name|INNER_IDENTITY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not all keys present"
argument_list|,
name|count
operator|==
name|ITEMS
argument_list|)
expr_stmt|;
block|}
comment|// outer(outer(A, B), C) == outer(A,outer(B, C)) == outer(A, B, C)
annotation|@
name|Test
DECL|method|testOuterAssociativity ()
specifier|public
name|void
name|testOuterAssociativity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|testExpr1
argument_list|(
name|conf
argument_list|,
literal|"outer"
argument_list|,
name|TestType
operator|.
name|OUTER_ASSOCIATIVITY
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|testExpr2
argument_list|(
name|conf
argument_list|,
literal|"outer"
argument_list|,
name|TestType
operator|.
name|OUTER_ASSOCIATIVITY
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|testExpr3
argument_list|(
name|conf
argument_list|,
literal|"outer"
argument_list|,
name|TestType
operator|.
name|OUTER_ASSOCIATIVITY
argument_list|,
literal|33
argument_list|)
expr_stmt|;
block|}
comment|// inner(inner(A, B), C) == inner(A,inner(B, C)) == inner(A, B, C)
annotation|@
name|Test
DECL|method|testInnerAssociativity ()
specifier|public
name|void
name|testInnerAssociativity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|testExpr1
argument_list|(
name|conf
argument_list|,
literal|"inner"
argument_list|,
name|TestType
operator|.
name|INNER_ASSOCIATIVITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testExpr2
argument_list|(
name|conf
argument_list|,
literal|"inner"
argument_list|,
name|TestType
operator|.
name|INNER_ASSOCIATIVITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testExpr3
argument_list|(
name|conf
argument_list|,
literal|"inner"
argument_list|,
name|TestType
operator|.
name|INNER_ASSOCIATIVITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// override(inner(A, B), A) == A
annotation|@
name|Test
DECL|method|testIdentity ()
specifier|public
name|void
name|testIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|testExpr4
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|validateOuterKeyValue (IntWritable k, TupleWritable v, int tupleSize, boolean firstTuple, boolean secondTuple)
specifier|private
name|void
name|validateOuterKeyValue
parameter_list|(
name|IntWritable
name|k
parameter_list|,
name|TupleWritable
name|v
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|boolean
name|firstTuple
parameter_list|,
name|boolean
name|secondTuple
parameter_list|)
block|{
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|size
argument_list|()
operator|==
name|tupleSize
argument_list|)
expr_stmt|;
name|int
name|key
init|=
name|k
operator|.
name|get
argument_list|()
decl_stmt|;
name|IntWritable
name|val0
init|=
literal|null
decl_stmt|;
name|IntWritable
name|val1
init|=
literal|null
decl_stmt|;
name|LongWritable
name|val2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|firstTuple
condition|)
block|{
name|TupleWritable
name|v0
init|=
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|key
operator|%
literal|2
operator|==
literal|0
operator|&&
name|key
operator|/
literal|2
operator|<=
name|ITEMS
condition|)
block|{
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v0
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|%
literal|3
operator|==
literal|0
operator|&&
name|key
operator|/
literal|3
operator|<=
name|ITEMS
condition|)
block|{
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v0
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v0
operator|.
name|has
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|%
literal|4
operator|==
literal|0
operator|&&
name|key
operator|/
literal|4
operator|<=
name|ITEMS
condition|)
block|{
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|has
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|secondTuple
condition|)
block|{
if|if
condition|(
name|key
operator|%
literal|2
operator|==
literal|0
operator|&&
name|key
operator|/
literal|2
operator|<=
name|ITEMS
condition|)
block|{
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TupleWritable
name|v1
init|=
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|key
operator|%
literal|3
operator|==
literal|0
operator|&&
name|key
operator|/
literal|3
operator|<=
name|ITEMS
condition|)
block|{
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v1
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|%
literal|4
operator|==
literal|0
operator|&&
name|key
operator|/
literal|4
operator|<=
name|ITEMS
condition|)
block|{
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v1
operator|.
name|has
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|key
operator|%
literal|2
operator|==
literal|0
operator|&&
name|key
operator|/
literal|2
operator|<=
name|ITEMS
condition|)
block|{
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|%
literal|3
operator|==
literal|0
operator|&&
name|key
operator|/
literal|3
operator|<=
name|ITEMS
condition|)
block|{
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|has
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|%
literal|4
operator|==
literal|0
operator|&&
name|key
operator|/
literal|4
operator|<=
name|ITEMS
condition|)
block|{
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|has
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|val0
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val0
operator|.
name|get
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val1
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val1
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val2
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val2
operator|.
name|get
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateInnerKeyValue (IntWritable k, TupleWritable v, int tupleSize, boolean firstTuple, boolean secondTuple)
specifier|private
name|void
name|validateInnerKeyValue
parameter_list|(
name|IntWritable
name|k
parameter_list|,
name|TupleWritable
name|v
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|boolean
name|firstTuple
parameter_list|,
name|boolean
name|secondTuple
parameter_list|)
block|{
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|size
argument_list|()
operator|==
name|tupleSize
argument_list|)
expr_stmt|;
name|int
name|key
init|=
name|k
operator|.
name|get
argument_list|()
decl_stmt|;
name|IntWritable
name|val0
init|=
literal|null
decl_stmt|;
name|IntWritable
name|val1
init|=
literal|null
decl_stmt|;
name|LongWritable
name|val2
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|key
operator|%
literal|2
operator|==
literal|0
operator|&&
name|key
operator|/
literal|2
operator|<=
name|ITEMS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|key
operator|%
literal|3
operator|==
literal|0
operator|&&
name|key
operator|/
literal|3
operator|<=
name|ITEMS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|key
operator|%
literal|4
operator|==
literal|0
operator|&&
name|key
operator|/
literal|4
operator|<=
name|ITEMS
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstTuple
condition|)
block|{
name|TupleWritable
name|v0
init|=
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v0
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secondTuple
condition|)
block|{
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TupleWritable
name|v1
init|=
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
decl_stmt|;
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val0
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|val1
operator|=
operator|(
name|IntWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|val2
operator|=
operator|(
name|LongWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val0
operator|.
name|get
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val1
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val2
operator|.
name|get
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|validateKeyValue_INNER_IDENTITY (IntWritable k, IntWritable v)
specifier|private
name|void
name|validateKeyValue_INNER_IDENTITY
parameter_list|(
name|IntWritable
name|k
parameter_list|,
name|IntWritable
name|v
parameter_list|)
block|{
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|int
name|key
init|=
name|k
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
operator|(
name|key
operator|%
literal|2
operator|==
literal|0
operator|&&
name|key
operator|/
literal|2
operator|<=
name|ITEMS
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|v
operator|.
name|get
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testFormat (Configuration conf, int tupleSize, boolean firstTuple, boolean secondTuple, TestType ttype)
specifier|public
name|int
name|testFormat
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|boolean
name|firstTuple
parameter_list|,
name|boolean
name|secondTuple
parameter_list|,
name|TestType
name|ttype
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompositeInputFormat
name|format
init|=
operator|new
name|CompositeInputFormat
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
operator|(
name|List
argument_list|<
name|InputSplit
argument_list|>
operator|)
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
control|)
block|{
name|TaskAttemptContext
name|context
init|=
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RecordReader
name|reader
init|=
name|format
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|MapContext
name|mcontext
init|=
operator|new
name|MapContextImpl
argument_list|(
name|conf
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyReporter
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
name|WritableComparable
name|key
init|=
literal|null
decl_stmt|;
name|Writable
name|value
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|key
operator|=
operator|(
name|WritableComparable
operator|)
name|reader
operator|.
name|getCurrentKey
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
name|validateKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|tupleSize
argument_list|,
name|firstTuple
argument_list|,
name|secondTuple
argument_list|,
name|ttype
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

