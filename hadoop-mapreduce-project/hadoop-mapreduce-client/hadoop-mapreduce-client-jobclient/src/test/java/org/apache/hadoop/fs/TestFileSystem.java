begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|LongSumReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
DECL|class|TestFileSystem
specifier|public
class|class
name|TestFileSystem
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|FileSystem
operator|.
name|LOG
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
name|int
name|BUFFER_SIZE
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
DECL|field|MEGA
specifier|private
specifier|static
specifier|final
name|long
name|MEGA
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|SEEKS_PER_FILE
specifier|private
specifier|static
specifier|final
name|int
name|SEEKS_PER_FILE
init|=
literal|4
decl_stmt|;
DECL|field|ROOT
specifier|private
specifier|static
name|String
name|ROOT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"fs_test"
argument_list|)
decl_stmt|;
DECL|field|CONTROL_DIR
specifier|private
specifier|static
name|Path
name|CONTROL_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"fs_control"
argument_list|)
decl_stmt|;
DECL|field|WRITE_DIR
specifier|private
specifier|static
name|Path
name|WRITE_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"fs_write"
argument_list|)
decl_stmt|;
DECL|field|READ_DIR
specifier|private
specifier|static
name|Path
name|READ_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"fs_read"
argument_list|)
decl_stmt|;
DECL|field|DATA_DIR
specifier|private
specifier|static
name|Path
name|DATA_DIR
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"fs_data"
argument_list|)
decl_stmt|;
DECL|method|testFs ()
specifier|public
name|void
name|testFs
parameter_list|()
throws|throws
name|Exception
block|{
name|testFs
argument_list|(
literal|10
operator|*
name|MEGA
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testFs (long megaBytes, int numFiles, long seed)
specifier|public
specifier|static
name|void
name|testFs
parameter_list|(
name|long
name|megaBytes
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|seed
operator|==
literal|0
condition|)
name|seed
operator|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|createControlFile
argument_list|(
name|fs
argument_list|,
name|megaBytes
argument_list|,
name|numFiles
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|writeTest
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readTest
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|seekTest
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|CONTROL_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|DATA_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|WRITE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|READ_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommandFormat ()
specifier|public
specifier|static
name|void
name|testCommandFormat
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This should go to TestFsShell.java when it is added.
name|CommandFormat
name|cf
decl_stmt|;
name|cf
operator|=
operator|new
name|CommandFormat
argument_list|(
literal|"copyToLocal"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"crc"
argument_list|,
literal|"ignoreCrc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-get"
block|,
literal|"file"
block|,
literal|"-"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
try|try
block|{
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-get"
block|,
literal|"file"
block|,
literal|"-ignoreCrc"
block|,
literal|"/foo"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected parsing to fail as it should stop at first non-option"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected
block|}
name|cf
operator|=
operator|new
name|CommandFormat
argument_list|(
literal|"tail"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-tail"
block|,
literal|"fileName"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"fileName"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-tail"
block|,
literal|"-f"
block|,
literal|"fileName"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"fileName"
argument_list|)
expr_stmt|;
name|cf
operator|=
operator|new
name|CommandFormat
argument_list|(
literal|"setrep"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"R"
argument_list|,
literal|"w"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setrep"
block|,
literal|"-R"
block|,
literal|"2"
block|,
literal|"/foo/bar"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|cf
operator|=
operator|new
name|CommandFormat
argument_list|(
literal|"put"
argument_list|,
literal|2
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cf
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
literal|"-"
block|,
literal|"dest"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"dest"
argument_list|)
expr_stmt|;
block|}
DECL|method|createControlFile (FileSystem fs, long megaBytes, int numFiles, long seed)
specifier|public
specifier|static
name|void
name|createControlFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|long
name|megaBytes
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating control file: "
operator|+
name|megaBytes
operator|+
literal|" bytes, "
operator|+
name|numFiles
operator|+
literal|" files"
argument_list|)
expr_stmt|;
name|Path
name|controlFile
init|=
operator|new
name|Path
argument_list|(
name|CONTROL_DIR
argument_list|,
literal|"files"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|controlFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|controlFile
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|long
name|maxSize
init|=
operator|(
operator|(
name|megaBytes
operator|/
name|numFiles
operator|)
operator|*
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
try|try
block|{
while|while
condition|(
name|totalSize
operator|<
name|megaBytes
condition|)
block|{
name|Text
name|name
init|=
operator|new
name|Text
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
name|size
operator|=
operator|-
name|size
expr_stmt|;
name|size
operator|=
name|size
operator|%
name|maxSize
expr_stmt|;
comment|//LOG.info(" adding: name="+name+" size="+size);
name|writer
operator|.
name|append
argument_list|(
name|name
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|size
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"created control file for: "
operator|+
name|totalSize
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
DECL|class|WriteMapper
specifier|public
specifier|static
class|class
name|WriteMapper
extends|extends
name|Configured
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fastCheck
specifier|private
name|boolean
name|fastCheck
decl_stmt|;
comment|// a random suffix per task
DECL|field|suffix
specifier|private
name|String
name|suffix
init|=
literal|"-"
operator|+
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|WriteMapper ()
specifier|public
name|WriteMapper
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|WriteMapper (Configuration conf)
specifier|public
name|WriteMapper
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|setConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|fastCheck
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|map (Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|>
name|collector
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"creating "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// write to temp file initially to permit parallel execution
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|DATA_DIR
argument_list|,
name|name
operator|+
name|suffix
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|long
name|written
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|written
operator|<
name|size
condition|)
block|{
if|if
condition|(
name|fastCheck
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|long
name|remains
init|=
name|size
operator|-
name|written
decl_stmt|;
name|int
name|length
init|=
operator|(
name|remains
operator|<=
name|buffer
operator|.
name|length
operator|)
condition|?
operator|(
name|int
operator|)
name|remains
else|:
name|buffer
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|written
operator|+=
name|length
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"writing "
operator|+
name|name
operator|+
literal|"@"
operator|+
name|written
operator|+
literal|"/"
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// rename to final location
name|fs
operator|.
name|rename
argument_list|(
name|tempFile
argument_list|,
operator|new
name|Path
argument_list|(
name|DATA_DIR
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bytes"
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|written
argument_list|)
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"wrote "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
DECL|method|writeTest (FileSystem fs, boolean fastCheck)
specifier|public
specifier|static
name|void
name|writeTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|fastCheck
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|DATA_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|WRITE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|TestFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|CONTROL_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|WriteMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LongSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|WRITE_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|class|ReadMapper
specifier|public
specifier|static
class|class
name|ReadMapper
extends|extends
name|Configured
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|check
specifier|private
name|byte
index|[]
name|check
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fastCheck
specifier|private
name|boolean
name|fastCheck
decl_stmt|;
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|ReadMapper ()
specifier|public
name|ReadMapper
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ReadMapper (Configuration conf)
specifier|public
name|ReadMapper
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|setConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|fastCheck
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|map (Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|>
name|collector
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"opening "
operator|+
name|name
argument_list|)
expr_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|DATA_DIR
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|read
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|read
operator|<
name|size
condition|)
block|{
name|long
name|remains
init|=
name|size
operator|-
name|read
decl_stmt|;
name|int
name|n
init|=
operator|(
name|remains
operator|<=
name|buffer
operator|.
name|length
operator|)
condition|?
operator|(
name|int
operator|)
name|remains
else|:
name|buffer
operator|.
name|length
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|read
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|fastCheck
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|check
argument_list|,
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|check
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|!=
name|buffer
operator|.
name|length
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|n
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|check
argument_list|,
name|n
argument_list|,
name|check
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|check
argument_list|)
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"reading "
operator|+
name|name
operator|+
literal|"@"
operator|+
name|read
operator|+
literal|"/"
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|collector
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bytes"
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|read
argument_list|)
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"read "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
DECL|method|readTest (FileSystem fs, boolean fastCheck)
specifier|public
specifier|static
name|void
name|readTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|fastCheck
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|READ_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|TestFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|CONTROL_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|ReadMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LongSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|READ_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|class|SeekMapper
specifier|public
specifier|static
class|class
name|SeekMapper
parameter_list|<
name|K
parameter_list|>
extends|extends
name|Configured
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|K
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|check
specifier|private
name|byte
index|[]
name|check
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fastCheck
specifier|private
name|boolean
name|fastCheck
decl_stmt|;
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|SeekMapper ()
specifier|public
name|SeekMapper
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SeekMapper (Configuration conf)
specifier|public
name|SeekMapper
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|setConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|fastCheck
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|map (Text key, LongWritable value, OutputCollector<K, LongWritable> collector, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|LongWritable
argument_list|>
name|collector
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"opening "
operator|+
name|name
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|DATA_DIR
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SEEKS_PER_FILE
condition|;
name|i
operator|++
control|)
block|{
comment|// generate a random position
name|long
name|position
init|=
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|%
name|size
decl_stmt|;
comment|// seek file to that position
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"seeking "
operator|+
name|name
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// check that byte matches
name|byte
name|checkByte
init|=
literal|0
decl_stmt|;
comment|// advance random state to that position
name|random
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<=
name|position
condition|;
name|p
operator|+=
name|check
operator|.
name|length
control|)
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"generating data for "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|fastCheck
condition|)
block|{
name|checkByte
operator|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|check
argument_list|)
expr_stmt|;
name|checkByte
operator|=
name|check
index|[
call|(
name|int
call|)
argument_list|(
name|position
operator|%
name|check
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|b
argument_list|,
name|checkByte
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
DECL|method|seekTest (FileSystem fs, boolean fastCheck)
specifier|public
specifier|static
name|void
name|seekTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|fastCheck
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|READ_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|TestFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
literal|"fs.test.fastCheck"
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|CONTROL_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SeekMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LongSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|READ_DIR
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|megaBytes
init|=
literal|10
decl_stmt|;
name|int
name|files
init|=
literal|100
decl_stmt|;
name|boolean
name|noRead
init|=
literal|false
decl_stmt|;
name|boolean
name|noWrite
init|=
literal|false
decl_stmt|;
name|boolean
name|noSeek
init|=
literal|false
decl_stmt|;
name|boolean
name|fastCheck
init|=
literal|false
decl_stmt|;
name|long
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|String
name|usage
init|=
literal|"Usage: TestFileSystem -files N -megaBytes M [-noread] [-nowrite] [-noseek] [-fastcheck]"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-files"
argument_list|)
condition|)
block|{
name|files
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-megaBytes"
argument_list|)
condition|)
block|{
name|megaBytes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-noread"
argument_list|)
condition|)
block|{
name|noRead
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-nowrite"
argument_list|)
condition|)
block|{
name|noWrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-noseek"
argument_list|)
condition|)
block|{
name|noSeek
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-fastcheck"
argument_list|)
condition|)
block|{
name|fastCheck
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"files = "
operator|+
name|files
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"megaBytes = "
operator|+
name|megaBytes
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noWrite
condition|)
block|{
name|createControlFile
argument_list|(
name|fs
argument_list|,
name|megaBytes
operator|*
name|MEGA
argument_list|,
name|files
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|writeTest
argument_list|(
name|fs
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noRead
condition|)
block|{
name|readTest
argument_list|(
name|fs
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noSeek
condition|)
block|{
name|seekTest
argument_list|(
name|fs
argument_list|,
name|fastCheck
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFsCache ()
specifier|public
name|void
name|testFsCache
parameter_list|()
throws|throws
name|Exception
block|{
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
index|[]
name|users
init|=
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
index|[]
name|fs
init|=
operator|new
name|FileSystem
index|[
name|users
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|users
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|fs
index|[
name|i
index|]
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|fs
index|[
name|j
index|]
operator|==
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|{
try|try
block|{
name|runTestCache
argument_list|(
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|BindException
name|be
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot test NameNode.DEFAULT_PORT (="
operator|+
name|NameNode
operator|.
name|DEFAULT_PORT
operator|+
literal|")"
argument_list|,
name|be
argument_list|)
expr_stmt|;
block|}
name|runTestCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTestCache (int port)
specifier|static
name|void
name|runTestCache
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|port
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"uri="
operator|+
name|uri
argument_list|)
expr_stmt|;
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|checkPath
argument_list|(
name|cluster
argument_list|,
name|fs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|==
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|port
operator|==
name|NameNode
operator|.
name|DEFAULT_PORT
condition|)
block|{
comment|//test explicit default port
name|URI
name|uri2
init|=
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"uri2="
operator|+
name|uri2
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|checkPath
argument_list|(
name|cluster
argument_list|,
name|fs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|==
name|FileSystem
operator|.
name|get
argument_list|(
name|uri2
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkPath (MiniDFSCluster cluster, FileSystem fileSys)
specifier|static
name|void
name|checkPath
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|add
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNameNodeAddress
argument_list|()
decl_stmt|;
comment|// Test upper/lower case
name|fileSys
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://"
operator|+
name|add
operator|.
name|getHostName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|":"
operator|+
name|add
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFsClose ()
specifier|public
name|void
name|testFsClose
parameter_list|()
throws|throws
name|Exception
block|{
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
operator|new
name|Path
argument_list|(
literal|"file:///"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
operator|new
name|Path
argument_list|(
literal|"hftp://localhost:12345/"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|Path
argument_list|(
literal|"hftp://localhost:12345/"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFsShutdownHook ()
specifier|public
name|void
name|testFsShutdownHook
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|FileSystem
argument_list|>
name|closed
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Configuration
name|confNoAuto
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.test.impl"
argument_list|,
name|TestShutdownFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|confNoAuto
operator|.
name|setClass
argument_list|(
literal|"fs.test.impl"
argument_list|,
name|TestShutdownFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|confNoAuto
operator|.
name|setBoolean
argument_list|(
literal|"fs.automatic.close"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestShutdownFileSystem
name|fsWithAuto
init|=
call|(
name|TestShutdownFileSystem
call|)
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test://a/"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|TestShutdownFileSystem
name|fsWithoutAuto
init|=
call|(
name|TestShutdownFileSystem
call|)
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test://b/"
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|confNoAuto
argument_list|)
argument_list|)
decl_stmt|;
name|fsWithAuto
operator|.
name|setClosedSet
argument_list|(
name|closed
argument_list|)
expr_stmt|;
name|fsWithoutAuto
operator|.
name|setClosedSet
argument_list|(
name|closed
argument_list|)
expr_stmt|;
comment|// Different URIs should result in different FS instances
name|assertNotSame
argument_list|(
name|fsWithAuto
argument_list|,
name|fsWithoutAuto
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|CACHE
operator|.
name|closeAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|closed
operator|.
name|contains
argument_list|(
name|fsWithAuto
argument_list|)
argument_list|)
expr_stmt|;
name|closed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|closed
operator|.
name|contains
argument_list|(
name|fsWithoutAuto
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheKeysAreCaseInsensitive ()
specifier|public
name|void
name|testCacheKeysAreCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// check basic equality
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
name|lowercaseCachekey1
init|=
operator|new
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hftp://localhost:12345/"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
name|lowercaseCachekey2
init|=
operator|new
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hftp://localhost:12345/"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lowercaseCachekey1
argument_list|,
name|lowercaseCachekey2
argument_list|)
expr_stmt|;
comment|// check insensitive equality
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
name|uppercaseCachekey
init|=
operator|new
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|(
operator|new
name|URI
argument_list|(
literal|"HFTP://Localhost:12345/"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lowercaseCachekey2
argument_list|,
name|uppercaseCachekey
argument_list|)
expr_stmt|;
comment|// check behaviour with collections
name|List
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|uppercaseCachekey
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|uppercaseCachekey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|lowercaseCachekey2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|uppercaseCachekey
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|uppercaseCachekey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|lowercaseCachekey2
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|FileSystem
operator|.
name|Cache
operator|.
name|Key
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|uppercaseCachekey
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|uppercaseCachekey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|lowercaseCachekey2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFsUniqueness (long megaBytes, int numFiles, long seed)
specifier|public
specifier|static
name|void
name|testFsUniqueness
parameter_list|(
name|long
name|megaBytes
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
comment|// multiple invocations of FileSystem.get return the same object.
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs1
operator|==
name|fs2
argument_list|)
expr_stmt|;
comment|// multiple invocations of FileSystem.newInstance return different objects
name|fs1
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs2
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs1
operator|!=
name|fs2
operator|&&
operator|!
name|fs1
operator|.
name|equals
argument_list|(
name|fs2
argument_list|)
argument_list|)
expr_stmt|;
name|fs1
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TestShutdownFileSystem
specifier|public
specifier|static
class|class
name|TestShutdownFileSystem
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|closedSet
specifier|private
name|Set
argument_list|<
name|FileSystem
argument_list|>
name|closedSet
decl_stmt|;
DECL|method|setClosedSet (Set<FileSystem> closedSet)
specifier|public
name|void
name|setClosedSet
parameter_list|(
name|Set
argument_list|<
name|FileSystem
argument_list|>
name|closedSet
parameter_list|)
block|{
name|this
operator|.
name|closedSet
operator|=
name|closedSet
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closedSet
operator|!=
literal|null
condition|)
block|{
name|closedSet
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

