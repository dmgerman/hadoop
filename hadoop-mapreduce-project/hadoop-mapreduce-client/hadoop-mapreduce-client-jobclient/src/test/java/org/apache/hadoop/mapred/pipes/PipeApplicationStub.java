begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/* Stub for  TestPipeApplication   test. This stub produced test data for main test. Main test  checks data  */
end_comment

begin_class
DECL|class|PipeApplicationStub
specifier|public
class|class
name|PipeApplicationStub
extends|extends
name|CommonStub
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|PipeApplicationStub
name|client
init|=
operator|new
name|PipeApplicationStub
argument_list|()
decl_stmt|;
name|client
operator|.
name|binaryProtocolStub
argument_list|()
expr_stmt|;
block|}
DECL|method|binaryProtocolStub ()
specifier|public
name|void
name|binaryProtocolStub
parameter_list|()
block|{
try|try
block|{
name|initSoket
argument_list|()
expr_stmt|;
comment|// output code
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|IntWritable
name|wt
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|wt
operator|.
name|set
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|wt
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
operator|new
name|Text
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
comment|//  PARTITIONED_OUTPUT
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|51
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|wt
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
operator|new
name|Text
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
comment|// STATUS
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|dataOut
argument_list|,
literal|"PROGRESS"
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// progress
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|53
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeFloat
argument_list|(
literal|0.55f
argument_list|)
expr_stmt|;
comment|// register counter
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|55
argument_list|)
expr_stmt|;
comment|// id
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|dataOut
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|dataOut
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
comment|// increment counter
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOut
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// map item
name|int
name|intValue
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"intValue:"
operator|+
name|intValue
argument_list|)
expr_stmt|;
name|IntWritable
name|iw
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|readObject
argument_list|(
name|iw
argument_list|,
name|dataInput
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"key:"
operator|+
name|iw
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Text
name|txt
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|readObject
argument_list|(
name|txt
argument_list|,
name|dataInput
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"value:"
operator|+
name|txt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// done
comment|// end of session
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|54
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"finish"
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closeSoket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

