begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ClassUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|TestJobConf
specifier|public
class|class
name|TestJobConf
block|{
DECL|field|JAR_RELATIVE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|JAR_RELATIVE_PATH
init|=
literal|"build/test/mapred/testjar/testjob.jar"
decl_stmt|;
DECL|field|CLASSNAME
specifier|private
specifier|static
specifier|final
name|String
name|CLASSNAME
init|=
literal|"testjar.ClassWordCount"
decl_stmt|;
DECL|field|TEST_DIR_WITH_SPECIAL_CHARS
specifier|private
specifier|static
name|String
name|TEST_DIR_WITH_SPECIAL_CHARS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test jobconf with + and spaces"
decl_stmt|;
annotation|@
name|Test
DECL|method|testFindContainingJar ()
specifier|public
name|void
name|testFindContainingJar
parameter_list|()
throws|throws
name|Exception
block|{
name|testJarAtPath
argument_list|(
name|JAR_RELATIVE_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that findContainingJar works correctly even if the    * path has a "+" sign or spaces in it    */
annotation|@
name|Test
DECL|method|testFindContainingJarWithPlus ()
specifier|public
name|void
name|testFindContainingJarWithPlus
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR_WITH_SPECIAL_CHARS
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|localfs
argument_list|,
operator|new
name|Path
argument_list|(
name|JAR_RELATIVE_PATH
argument_list|)
argument_list|,
name|localfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR_WITH_SPECIAL_CHARS
argument_list|,
literal|"test.jar"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testJarAtPath
argument_list|(
name|TEST_DIR_WITH_SPECIAL_CHARS
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test.jar"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given a path with a jar, make a classloader with that jar on the    * classpath, and check that findContainingJar can correctly    * identify the path of the jar.    */
DECL|method|testJarAtPath (String path)
specifier|private
name|void
name|testJarAtPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jar
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|urls
index|[]
init|=
operator|new
name|URL
index|[]
block|{
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|ClassLoader
name|cl
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|)
decl_stmt|;
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|CLASSNAME
argument_list|,
literal|true
argument_list|,
name|cl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|String
name|containingJar
init|=
name|ClassUtil
operator|.
name|findContainingJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containingJar
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

