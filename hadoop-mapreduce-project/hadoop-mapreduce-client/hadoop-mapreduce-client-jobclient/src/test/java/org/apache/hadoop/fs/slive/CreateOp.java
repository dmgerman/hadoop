begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|DataWriter
operator|.
name|GenerateOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|OperationOutput
operator|.
name|OutputType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Operation which selects a random file and a random number of bytes to create  * that file with (from the write size option) and selects a random block size  * (from the block size option) and a random replication amount (from the  * replication option) and attempts to create a file with those options.  *   * This operation will capture statistics on success for bytes written, time  * taken (milliseconds), and success count and on failure it will capture the  * number of failures and the time taken (milliseconds) to fail.  */
end_comment

begin_class
DECL|class|CreateOp
class|class
name|CreateOp
extends|extends
name|Operation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreateOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEF_IO_BUFFER_SIZE
specifier|private
specifier|static
name|int
name|DEF_IO_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|IO_BUF_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|IO_BUF_CONFIG
init|=
operator|(
literal|"io.file.buffer.size"
operator|)
decl_stmt|;
DECL|method|CreateOp (ConfigExtractor cfg, Random rnd)
name|CreateOp
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|super
argument_list|(
name|CreateOp
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|rnd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the block size to use (aligned to nearest BYTES_PER_CHECKSUM if    * configuration says a value exists) - this will avoid the warnings caused by    * this not occurring and the file will not be created if it is not correct...    *     * @return long    */
DECL|method|determineBlockSize ()
specifier|private
name|long
name|determineBlockSize
parameter_list|()
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|blockSizeRange
init|=
name|getConfig
argument_list|()
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|long
name|blockSize
init|=
name|Range
operator|.
name|betweenPositive
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|blockSizeRange
argument_list|)
decl_stmt|;
name|Long
name|byteChecksum
init|=
name|getConfig
argument_list|()
operator|.
name|getByteCheckSum
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteChecksum
operator|==
literal|null
condition|)
block|{
return|return
name|blockSize
return|;
block|}
comment|// adjust to nearest multiple
name|long
name|full
init|=
operator|(
name|blockSize
operator|/
name|byteChecksum
operator|)
operator|*
name|byteChecksum
decl_stmt|;
name|long
name|toFull
init|=
name|blockSize
operator|-
name|full
decl_stmt|;
if|if
condition|(
name|toFull
operator|>=
operator|(
name|byteChecksum
operator|/
literal|2
operator|)
condition|)
block|{
name|full
operator|+=
name|byteChecksum
expr_stmt|;
block|}
comment|// adjust if over extended
if|if
condition|(
name|full
operator|>
name|blockSizeRange
operator|.
name|getUpper
argument_list|()
condition|)
block|{
name|full
operator|=
name|blockSizeRange
operator|.
name|getUpper
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|full
operator|<
name|blockSizeRange
operator|.
name|getLower
argument_list|()
condition|)
block|{
name|full
operator|=
name|blockSizeRange
operator|.
name|getLower
argument_list|()
expr_stmt|;
block|}
return|return
name|full
return|;
block|}
comment|/**    * Gets the replication amount    *     * @return short    */
DECL|method|determineReplication ()
specifier|private
name|short
name|determineReplication
parameter_list|()
block|{
name|Range
argument_list|<
name|Short
argument_list|>
name|replicationAmountRange
init|=
name|getConfig
argument_list|()
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|repRange
init|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
name|replicationAmountRange
operator|.
name|getLower
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|replicationAmountRange
operator|.
name|getUpper
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|replicationAmount
init|=
operator|(
name|short
operator|)
name|Range
operator|.
name|betweenPositive
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|repRange
argument_list|)
decl_stmt|;
return|return
name|replicationAmount
return|;
block|}
comment|/**    * Gets the output buffering size to use    *     * @return int    */
DECL|method|getBufferSize ()
specifier|private
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|getConfig
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|IO_BUF_CONFIG
argument_list|,
name|DEF_IO_BUFFER_SIZE
argument_list|)
return|;
block|}
comment|/**    * Gets the file to create    *     * @return Path    */
DECL|method|getCreateFile ()
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
name|Path
name|fn
init|=
name|getFinder
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
return|return
name|fn
return|;
block|}
annotation|@
name|Override
comment|// Operation
DECL|method|run (FileSystem fs)
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|out
init|=
name|super
operator|.
name|run
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|fn
init|=
name|getCreateFile
argument_list|()
decl_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|writeSizeRange
init|=
name|getConfig
argument_list|()
operator|.
name|getWriteSize
argument_list|()
decl_stmt|;
name|long
name|writeSize
init|=
literal|0
decl_stmt|;
name|long
name|blockSize
init|=
name|determineBlockSize
argument_list|()
decl_stmt|;
name|short
name|replicationAmount
init|=
name|determineReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|shouldWriteUseBlockSize
argument_list|()
condition|)
block|{
name|writeSizeRange
operator|=
name|getConfig
argument_list|()
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
block|}
name|writeSize
operator|=
name|Range
operator|.
name|betweenPositive
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|writeSizeRange
argument_list|)
expr_stmt|;
name|long
name|bytesWritten
init|=
literal|0
decl_stmt|;
name|long
name|timeTaken
init|=
literal|0
decl_stmt|;
name|int
name|bufSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
name|boolean
name|overWrite
init|=
literal|false
decl_stmt|;
name|DataWriter
name|writer
init|=
operator|new
name|DataWriter
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to create file at "
operator|+
name|fn
operator|+
literal|" of size "
operator|+
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|writeSize
argument_list|)
operator|+
literal|" using blocksize "
operator|+
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|blockSize
argument_list|)
operator|+
literal|" and replication amount "
operator|+
name|replicationAmount
argument_list|)
expr_stmt|;
block|{
comment|// open& create
name|long
name|startTime
init|=
name|Timer
operator|.
name|now
argument_list|()
decl_stmt|;
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|fn
argument_list|,
name|overWrite
argument_list|,
name|bufSize
argument_list|,
name|replicationAmount
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|timeTaken
operator|+=
name|Timer
operator|.
name|elapsed
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
comment|// write the given length
name|GenerateOutput
name|stats
init|=
name|writer
operator|.
name|writeSegment
argument_list|(
name|writeSize
argument_list|,
name|os
argument_list|)
decl_stmt|;
name|bytesWritten
operator|+=
name|stats
operator|.
name|getBytesWritten
argument_list|()
expr_stmt|;
name|timeTaken
operator|+=
name|stats
operator|.
name|getTimeTaken
argument_list|()
expr_stmt|;
comment|// capture close time
name|startTime
operator|=
name|Timer
operator|.
name|now
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
name|timeTaken
operator|+=
name|Timer
operator|.
name|elapsed
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created file at "
operator|+
name|fn
operator|+
literal|" of size "
operator|+
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|bytesWritten
argument_list|)
operator|+
literal|" bytes using blocksize "
operator|+
name|Helper
operator|.
name|toByteInfo
argument_list|(
name|blockSize
argument_list|)
operator|+
literal|" and replication amount "
operator|+
name|replicationAmount
operator|+
literal|" in "
operator|+
name|timeTaken
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
comment|// collect all the stats
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|OK_TIME_TAKEN
argument_list|,
name|timeTaken
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|BYTES_WRITTEN
argument_list|,
name|bytesWritten
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|SUCCESSES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|FAILURES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error with creating"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing create stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

