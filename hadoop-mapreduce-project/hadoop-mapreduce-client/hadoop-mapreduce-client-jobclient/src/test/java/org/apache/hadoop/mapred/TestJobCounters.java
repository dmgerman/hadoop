begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormatCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormatCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This is an wordcount application that tests the count of records  * got spilled to disk. It generates simple text input files. Then  * runs the wordcount map/reduce application on (1) 3 i/p files(with 3 maps  * and 1 reduce) and verifies the counters and (2) 4 i/p files(with 4 maps  * and 1 reduce) and verifies counters. Wordcount application reads the  * text input files, breaks each line into words and counts them. The output  * is a locally sorted list of words and the count of how often they occurred.  *  */
end_comment

begin_class
DECL|class|TestJobCounters
specifier|public
class|class
name|TestJobCounters
block|{
DECL|method|validateFileCounters (Counters counter, long fileBytesRead, long fileBytesWritten, long mapOutputBytes, long mapOutputMaterializedBytes)
specifier|private
name|void
name|validateFileCounters
parameter_list|(
name|Counters
name|counter
parameter_list|,
name|long
name|fileBytesRead
parameter_list|,
name|long
name|fileBytesWritten
parameter_list|,
name|long
name|mapOutputBytes
parameter_list|,
name|long
name|mapOutputMaterializedBytes
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|FileInputFormatCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileBytesRead
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|FileInputFormatCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|FileOutputFormatCounter
operator|.
name|BYTES_WRITTEN
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapOutputBytes
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapOutputMaterializedBytes
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_MATERIALIZED_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|validateOldFileCounters (Counters counter, long fileBytesRead, long fileBytesWritten, long mapOutputBytes, long mapOutputMaterializedBytes)
specifier|private
name|void
name|validateOldFileCounters
parameter_list|(
name|Counters
name|counter
parameter_list|,
name|long
name|fileBytesRead
parameter_list|,
name|long
name|fileBytesWritten
parameter_list|,
name|long
name|mapOutputBytes
parameter_list|,
name|long
name|mapOutputMaterializedBytes
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fileBytesRead
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|FileInputFormat
operator|.
name|Counter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileBytesRead
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|Counter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileBytesWritten
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|FileOutputFormat
operator|.
name|Counter
operator|.
name|BYTES_WRITTEN
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileBytesWritten
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|Counter
operator|.
name|BYTES_WRITTEN
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapOutputBytes
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapOutputMaterializedBytes
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_MATERIALIZED_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateCounters (Counters counter, long spillRecCnt, long mapInputRecords, long mapOutputRecords)
specifier|private
name|void
name|validateCounters
parameter_list|(
name|Counters
name|counter
parameter_list|,
name|long
name|spillRecCnt
parameter_list|,
name|long
name|mapInputRecords
parameter_list|,
name|long
name|mapOutputRecords
parameter_list|)
block|{
comment|// Check if the numer of Spilled Records is same as expected
name|assertEquals
argument_list|(
name|spillRecCnt
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|SPILLED_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapInputRecords
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOutputRecords
argument_list|,
name|counter
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|removeWordsFile (Path inpFile, Configuration conf)
specifier|private
name|void
name|removeWordsFile
parameter_list|(
name|Path
name|inpFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|inpFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inpFile
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|inpFile
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|inpFile
argument_list|)
throw|;
block|}
block|}
DECL|method|createWordsFile (Path inpFile, Configuration conf)
specifier|private
specifier|static
name|void
name|createWordsFile
parameter_list|(
name|Path
name|inpFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|inpFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inpFile
argument_list|)
condition|)
block|{
return|return;
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|inpFile
argument_list|)
decl_stmt|;
try|try
block|{
comment|// 1024*4 unique words --- repeated 5 times => 5*2K words
name|int
name|REPLICAS
init|=
literal|5
decl_stmt|,
name|NUMLINES
init|=
literal|1024
decl_stmt|,
name|NUMWORDSPERLINE
init|=
literal|4
decl_stmt|;
specifier|final
name|String
name|WORD
init|=
literal|"zymurgy"
decl_stmt|;
comment|// 7 bytes + 4 id bytes
specifier|final
name|Formatter
name|fmt
init|=
operator|new
name|Formatter
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICAS
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|NUMLINES
operator|*
name|NUMWORDSPERLINE
condition|;
name|j
operator|+=
name|NUMWORDSPERLINE
control|)
block|{
operator|(
operator|(
name|StringBuilder
operator|)
name|fmt
operator|.
name|out
argument_list|()
operator|)
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|NUMWORDSPERLINE
condition|;
operator|++
name|k
control|)
block|{
name|fmt
operator|.
name|format
argument_list|(
literal|"%s%04d "
argument_list|,
name|WORD
argument_list|,
name|j
operator|+
name|k
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|StringBuilder
operator|)
name|fmt
operator|.
name|out
argument_list|()
operator|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|fmt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|IN_DIR
specifier|private
specifier|static
name|Path
name|IN_DIR
init|=
literal|null
decl_stmt|;
DECL|field|OUT_DIR
specifier|private
specifier|static
name|Path
name|OUT_DIR
init|=
literal|null
decl_stmt|;
DECL|field|testdir
specifier|private
specifier|static
name|Path
name|testdir
init|=
literal|null
decl_stmt|;
DECL|field|inFiles
specifier|private
specifier|static
name|Path
index|[]
name|inFiles
init|=
operator|new
name|Path
index|[
literal|5
index|]
decl_stmt|;
DECL|method|getFileSize (Path path)
specifier|private
specifier|static
name|long
name|getFileSize
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|len
init|=
literal|0
decl_stmt|;
name|len
operator|+=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|Path
name|crcPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"."
operator|+
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|".crc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|crcPath
argument_list|)
condition|)
block|{
name|len
operator|+=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|crcPath
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|initPaths ()
specifier|public
specifier|static
name|void
name|initPaths
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"spilledRecords.countertest"
argument_list|)
expr_stmt|;
name|IN_DIR
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|OUT_DIR
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"out"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|testdir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"spilledRecords.countertest"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete "
operator|+
name|testdir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|IN_DIR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|IN_DIR
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inFiles
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|IN_DIR
argument_list|,
literal|"input5_2k_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// create 3 input files each with 5*2k words
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
comment|//clean up the input and output files
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createConfiguration ()
specifier|public
specifier|static
name|JobConf
name|createConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|baseConf
init|=
operator|new
name|JobConf
argument_list|(
name|TestJobCounters
operator|.
name|class
argument_list|)
decl_stmt|;
name|baseConf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
literal|"0.50"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MAP_COMBINE_MIN_SPILLS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|baseConf
return|;
block|}
DECL|method|createJob ()
specifier|public
specifier|static
name|Job
name|createJob
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Job
name|baseJob
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|baseJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setMapperClass
argument_list|(
name|NewMapTokenizer
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setCombinerClass
argument_list|(
name|NewSummer
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setReducerClass
argument_list|(
name|NewSummer
operator|.
name|class
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
literal|"0.50"
argument_list|)
expr_stmt|;
name|baseJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MAP_COMBINE_MIN_SPILLS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setMinInputSplitSize
argument_list|(
name|baseJob
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|baseJob
return|;
block|}
annotation|@
name|Test
DECL|method|testOldCounterA ()
specifier|public
name|void
name|testOldCounterA
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputO0"
argument_list|)
argument_list|)
expr_stmt|;
name|RunningJob
name|myJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Counters
name|c1
init|=
name|myJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// Each record requires 16 bytes of metadata, 16 bytes per serialized rec
comment|// (vint word len + word + IntWritable) = (1 + 11 + 4)
comment|// (2^20 buf * .5 spill pcnt) / 32 bytes/record = 2^14 recs per spill
comment|// Each file contains 5 replicas of 4096 words, so the first spill will
comment|// contain 4 (2^14 rec / 2^12 rec/replica) replicas, the second just one.
comment|// Each map spills twice, emitting 4096 records per spill from the
comment|// combiner per spill. The merge adds an additional 8192 records, as
comment|// there are too few spills to combine (2< 3)
comment|// Each map spills 2^14 records, so maps spill 49152 records, combined.
comment|// The combiner has emitted 24576 records to the reducer; these are all
comment|// fetched straight to memory from the map side. The intermediate merge
comment|// adds 8192 records per segment read; again, there are too few spills to
comment|// combine, so all Total spilled records in the reduce
comment|// is 8192 records / map * 3 maps = 24576.
comment|// Total: map + reduce = 49152 + 24576 = 73728
comment|// 3 files, 5120 = 5 * 1024 rec/file = 15360 input records
comment|// 4 records/line = 61440 output records
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|73728
argument_list|,
literal|15360
argument_list|,
literal|61440
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|validateOldFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|61928
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOldCounterB ()
specifier|public
name|void
name|testOldCounterB
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputO1"
argument_list|)
argument_list|)
expr_stmt|;
name|RunningJob
name|myJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Counters
name|c1
init|=
name|myJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// As above, each map spills 2^14 records, so 4 maps spill 2^16 records
comment|// In the reduce, there are two intermediate merges before the reduce.
comment|// 1st merge: read + write = 8192 * 4
comment|// 2nd merge: read + write = 8192 * 4
comment|// final merge: 0
comment|// Total reduce: 32768
comment|// Total: map + reduce = 2^16 + 2^15 = 98304
comment|// 4 files, 5120 = 5 * 1024 rec/file = 15360 input records
comment|// 4 records/line = 81920 output records
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|98304
argument_list|,
literal|20480
argument_list|,
literal|81920
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOldCounterC ()
specifier|public
name|void
name|testOldCounterC
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputO2"
argument_list|)
argument_list|)
expr_stmt|;
name|RunningJob
name|myJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Counters
name|c1
init|=
name|myJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// As above, each map spills 2^14 records, so 5 maps spill 81920
comment|// 1st merge: read + write = 6 * 8192
comment|// final merge: unmerged = 2 * 8192
comment|// Total reduce: 45056
comment|// 5 files, 5120 = 5 * 1024 rec/file = 15360 input records
comment|// 4 records/line = 102400 output records
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|122880
argument_list|,
literal|25600
argument_list|,
literal|102400
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOldCounterD ()
specifier|public
name|void
name|testOldCounterD
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputO3"
argument_list|)
argument_list|)
expr_stmt|;
name|RunningJob
name|myJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Counters
name|c1
init|=
name|myJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// No Reduces. Will go through the direct output collector. Spills=0
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|0
argument_list|,
literal|15360
argument_list|,
literal|61440
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewCounterA ()
specifier|public
name|void
name|testNewCounterA
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputN0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Counters
name|c1
init|=
name|Counters
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|73728
argument_list|,
literal|15360
argument_list|,
literal|61440
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewCounterB ()
specifier|public
name|void
name|testNewCounterB
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputN1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Counters
name|c1
init|=
name|Counters
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|98304
argument_list|,
literal|20480
argument_list|,
literal|81920
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewCounterC ()
specifier|public
name|void
name|testNewCounterC
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputN2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Counters
name|c1
init|=
name|Counters
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|122880
argument_list|,
literal|25600
argument_list|,
literal|102400
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewCounterD ()
specifier|public
name|void
name|testNewCounterD
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Job
name|job
init|=
name|createJob
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|3
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|removeWordsFile
argument_list|(
name|inFiles
index|[
literal|4
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|inputSize
init|=
literal|0
decl_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|inputSize
operator|+=
name|getFileSize
argument_list|(
name|inFiles
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|IN_DIR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|OUT_DIR
argument_list|,
literal|"outputN3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Counters
name|c1
init|=
name|Counters
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|validateCounters
argument_list|(
name|c1
argument_list|,
literal|0
argument_list|,
literal|15360
argument_list|,
literal|61440
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
name|inputSize
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testOldCounters ()
specifier|public
name|void
name|testOldCounters
parameter_list|()
throws|throws
name|Exception
block|{
name|Counters
name|c1
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|c1
operator|.
name|incrCounter
argument_list|(
name|FileInputFormat
operator|.
name|Counter
operator|.
name|BYTES_READ
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|c1
operator|.
name|incrCounter
argument_list|(
name|FileOutputFormat
operator|.
name|Counter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|c1
operator|.
name|incrCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|c1
operator|.
name|incrCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_MATERIALIZED_BYTES
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|validateFileCounters
argument_list|(
name|c1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|validateOldFileCounters
argument_list|(
name|c1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**     * Increases the JVM's heap usage to the specified target value.    */
DECL|class|MemoryLoader
specifier|static
class|class
name|MemoryLoader
block|{
DECL|field|DEFAULT_UNIT_LOAD_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_UNIT_LOAD_SIZE
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 10mb
comment|// the target value to reach
DECL|field|targetValue
specifier|private
name|long
name|targetValue
decl_stmt|;
comment|// a list to hold the load objects
DECL|field|loadObjects
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|loadObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MemoryLoader (long targetValue)
name|MemoryLoader
parameter_list|(
name|long
name|targetValue
parameter_list|)
block|{
name|this
operator|.
name|targetValue
operator|=
name|targetValue
expr_stmt|;
block|}
comment|/**      * Loads the memory to the target value.      */
DECL|method|load ()
name|void
name|load
parameter_list|()
block|{
while|while
condition|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|<
name|targetValue
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Loading memory with "
operator|+
name|DEFAULT_UNIT_LOAD_SIZE
operator|+
literal|" characters. Current usage : "
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// load some objects in the memory
name|loadObjects
operator|.
name|add
argument_list|(
name|RandomStringUtils
operator|.
name|random
argument_list|(
name|DEFAULT_UNIT_LOAD_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|// sleep for 100ms
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**    * A mapper that increases the JVM's heap usage to a target value configured     * via {@link MemoryLoaderMapper#TARGET_VALUE} using a {@link MemoryLoader}.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|MemoryLoaderMapper
specifier|static
class|class
name|MemoryLoaderMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|field|TARGET_VALUE
specifier|static
specifier|final
name|String
name|TARGET_VALUE
init|=
literal|"map.memory-loader.target-value"
decl_stmt|;
DECL|field|loader
specifier|private
specifier|static
name|MemoryLoader
name|loader
init|=
literal|null
decl_stmt|;
DECL|method|map (WritableComparable key, Writable val, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
literal|"Mapper not configured!"
argument_list|,
name|loader
argument_list|)
expr_stmt|;
comment|// load the memory
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// work as identity mapper
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|loader
operator|=
operator|new
name|MemoryLoader
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|TARGET_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * A reducer that increases the JVM's heap usage to a target value configured     * via {@link MemoryLoaderReducer#TARGET_VALUE} using a {@link MemoryLoader}.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|MemoryLoaderReducer
specifier|static
class|class
name|MemoryLoaderReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|field|TARGET_VALUE
specifier|static
specifier|final
name|String
name|TARGET_VALUE
init|=
literal|"reduce.memory-loader.target-value"
decl_stmt|;
DECL|field|loader
specifier|private
specifier|static
name|MemoryLoader
name|loader
init|=
literal|null
decl_stmt|;
DECL|method|reduce (WritableComparable key, Iterator<Writable> val, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
literal|"Reducer not configured!"
argument_list|,
name|loader
argument_list|)
expr_stmt|;
comment|// load the memory
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// work as identity reducer
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|loader
operator|=
operator|new
name|MemoryLoader
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|TARGET_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getTaskCounterUsage (JobClient client, JobID id, int numReports, int taskId, TaskType type)
specifier|private
name|long
name|getTaskCounterUsage
parameter_list|(
name|JobClient
name|client
parameter_list|,
name|JobID
name|id
parameter_list|,
name|int
name|numReports
parameter_list|,
name|int
name|taskId
parameter_list|,
name|TaskType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskReport
index|[]
name|reports
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reports
operator|=
name|client
operator|.
name|getMapTaskReports
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reports
operator|=
name|client
operator|.
name|getReduceTaskReports
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No reports found for task type '"
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"' in job "
operator|+
name|id
argument_list|,
name|reports
argument_list|)
expr_stmt|;
comment|// make sure that the total number of reports match the expected
name|assertEquals
argument_list|(
literal|"Mismatch in task id"
argument_list|,
name|numReports
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|reports
index|[
name|taskId
index|]
operator|.
name|getCounters
argument_list|()
decl_stmt|;
return|return
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|COMMITTED_HEAP_BYTES
argument_list|)
return|;
block|}
comment|// set up heap options, target value for memory loader and the output
comment|// directory before running the job
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|runHeapUsageTestJob (JobConf conf, Path testRootDir, String heapOptions, long targetMapValue, long targetReduceValue, FileSystem fs, JobClient client, Path inDir)
specifier|private
specifier|static
name|RunningJob
name|runHeapUsageTestJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|testRootDir
parameter_list|,
name|String
name|heapOptions
parameter_list|,
name|long
name|targetMapValue
parameter_list|,
name|long
name|targetReduceValue
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|JobClient
name|client
parameter_list|,
name|Path
name|inDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// define a job
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// configure the jobs
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|MemoryLoaderMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|MemoryLoaderReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
argument_list|,
name|heapOptions
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_JAVA_OPTS
argument_list|,
name|heapOptions
argument_list|)
expr_stmt|;
comment|// set the targets
name|jobConf
operator|.
name|setLong
argument_list|(
name|MemoryLoaderMapper
operator|.
name|TARGET_VALUE
argument_list|,
name|targetMapValue
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setLong
argument_list|(
name|MemoryLoaderReducer
operator|.
name|TARGET_VALUE
argument_list|,
name|targetReduceValue
argument_list|)
expr_stmt|;
comment|// set the input directory for the job
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
comment|// define job output folder
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|// run the job
name|RunningJob
name|job
init|=
name|client
operator|.
name|submitJob
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|JobID
name|jobID
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Job "
operator|+
name|jobID
operator|+
literal|" failed!"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|/**    * Tests {@link TaskCounter}'s {@link TaskCounter.COMMITTED_HEAP_BYTES}.     * The test consists of running a low-memory job which consumes less heap     * memory and then running a high-memory job which consumes more heap memory,     * and then ensuring that COMMITTED_HEAP_BYTES of low-memory job is smaller     * than that of the high-memory job.    * @throws IOException    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testHeapUsageCounter ()
specifier|public
name|void
name|testHeapUsageCounter
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// create a local filesystem handle
name|FileSystem
name|fileSystem
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define test root directories
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|testRootDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"testHeapUsageCounter"
argument_list|)
decl_stmt|;
comment|// cleanup the test root directory
name|fileSystem
operator|.
name|delete
argument_list|(
name|testRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the current working directory
name|fileSystem
operator|.
name|setWorkingDirectory
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|deleteOnExit
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
comment|// create a mini cluster using the local file system
name|MiniMRCluster
name|mrCluster
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|fileSystem
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define job input
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
comment|// create input data
name|createWordsFile
argument_list|(
name|inDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// configure and run a low memory job which will run without loading the
comment|// jvm's heap
name|RunningJob
name|lowMemJob
init|=
name|runHeapUsageTestJob
argument_list|(
name|conf
argument_list|,
name|testRootDir
argument_list|,
literal|"-Xms32m -Xmx1G"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|fileSystem
argument_list|,
name|jobClient
argument_list|,
name|inDir
argument_list|)
decl_stmt|;
name|JobID
name|lowMemJobID
init|=
name|lowMemJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|long
name|lowMemJobMapHeapUsage
init|=
name|getTaskCounterUsage
argument_list|(
name|jobClient
argument_list|,
name|lowMemJobID
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job1 (low memory job) map task heap usage: "
operator|+
name|lowMemJobMapHeapUsage
argument_list|)
expr_stmt|;
name|long
name|lowMemJobReduceHeapUsage
init|=
name|getTaskCounterUsage
argument_list|(
name|jobClient
argument_list|,
name|lowMemJobID
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job1 (low memory job) reduce task heap usage: "
operator|+
name|lowMemJobReduceHeapUsage
argument_list|)
expr_stmt|;
comment|// configure and run a high memory job which will load the jvm's heap
name|RunningJob
name|highMemJob
init|=
name|runHeapUsageTestJob
argument_list|(
name|conf
argument_list|,
name|testRootDir
argument_list|,
literal|"-Xms32m -Xmx1G"
argument_list|,
name|lowMemJobMapHeapUsage
operator|+
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|lowMemJobReduceHeapUsage
operator|+
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|fileSystem
argument_list|,
name|jobClient
argument_list|,
name|inDir
argument_list|)
decl_stmt|;
name|JobID
name|highMemJobID
init|=
name|highMemJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|long
name|highMemJobMapHeapUsage
init|=
name|getTaskCounterUsage
argument_list|(
name|jobClient
argument_list|,
name|highMemJobID
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job2 (high memory job) map task heap usage: "
operator|+
name|highMemJobMapHeapUsage
argument_list|)
expr_stmt|;
name|long
name|highMemJobReduceHeapUsage
init|=
name|getTaskCounterUsage
argument_list|(
name|jobClient
argument_list|,
name|highMemJobID
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job2 (high memory job) reduce task heap usage: "
operator|+
name|highMemJobReduceHeapUsage
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect map heap usage reported by the map task"
argument_list|,
name|lowMemJobMapHeapUsage
operator|<
name|highMemJobMapHeapUsage
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect reduce heap usage reported by the reduce task"
argument_list|,
name|lowMemJobReduceHeapUsage
operator|<
name|highMemJobReduceHeapUsage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown the mr cluster
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|testRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
block|}
block|}
DECL|class|NewMapTokenizer
specifier|public
specifier|static
class|class
name|NewMapTokenizer
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|Object
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|one
specifier|private
specifier|final
specifier|static
name|IntWritable
name|one
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|word
specifier|private
name|Text
name|word
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|method|map (Object key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringTokenizer
name|itr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|.
name|set
argument_list|(
name|itr
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|word
argument_list|,
name|one
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|NewSummer
specifier|public
specifier|static
class|class
name|NewSummer
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|result
specifier|private
name|IntWritable
name|result
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
DECL|method|reduce (Text key, Iterable<IntWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntWritable
name|val
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|val
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test mapper.    */
DECL|class|TokenizerMapper
specifier|public
specifier|static
class|class
name|TokenizerMapper
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|Object
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|ONE
specifier|private
specifier|final
specifier|static
name|IntWritable
name|ONE
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|word
specifier|private
name|Text
name|word
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|method|map (Object key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringTokenizer
name|itr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|.
name|set
argument_list|(
name|itr
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|word
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test reducer.    */
DECL|class|IntSumReducer
specifier|public
specifier|static
class|class
name|IntSumReducer
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
comment|/**      * Test customer counter.      */
DECL|enum|Counters
DECL|enumConstant|MY_COUNTER_MAX
specifier|public
enum|enum
name|Counters
block|{
name|MY_COUNTER_MAX
block|}
DECL|field|result
specifier|private
name|IntWritable
name|result
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
DECL|method|reduce (Text key, Iterable<IntWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntWritable
name|val
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|val
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|MY_COUNTER_MAX
argument_list|)
operator|.
name|increment
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Mock resource reporting.    */
DECL|class|MockResourceCalculatorProcessTree
specifier|public
specifier|static
class|class
name|MockResourceCalculatorProcessTree
extends|extends
name|ResourceCalculatorProcessTree
block|{
DECL|method|MockResourceCalculatorProcessTree (String root)
specifier|public
name|MockResourceCalculatorProcessTree
parameter_list|(
name|String
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateProcessTree ()
specifier|public
name|void
name|updateProcessTree
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getProcessTreeDump ()
specifier|public
name|String
name|getProcessTreeDump
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|checkPidPgrpidForMatch ()
specifier|public
name|boolean
name|checkPidPgrpidForMatch
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getRssMemorySize ()
specifier|public
name|long
name|getRssMemorySize
parameter_list|()
block|{
return|return
literal|1024
return|;
block|}
annotation|@
name|Override
DECL|method|getVirtualMemorySize ()
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|()
block|{
return|return
literal|2000
return|;
block|}
annotation|@
name|Override
DECL|method|getCpuUsagePercent ()
specifier|public
name|float
name|getCpuUsagePercent
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMockResourceCalculatorProcessTree ()
specifier|public
name|void
name|testMockResourceCalculatorProcessTree
parameter_list|()
block|{
name|ResourceCalculatorProcessTree
name|tree
decl_stmt|;
name|tree
operator|=
name|ResourceCalculatorProcessTree
operator|.
name|getResourceCalculatorProcessTree
argument_list|(
literal|"1"
argument_list|,
name|TestJobCounters
operator|.
name|MockResourceCalculatorProcessTree
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
comment|/**    * End to end test of maximum counters.    * @throws IOException test failed    * @throws ClassNotFoundException test failed    * @throws InterruptedException test failed    */
annotation|@
name|Test
DECL|method|testMaxCounter ()
specifier|public
name|void
name|testMaxCounter
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
comment|// Create mapreduce cluster
name|MiniMRClientCluster
name|mrCluster
init|=
name|MiniMRClientClusterFactory
operator|.
name|create
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Setup input and output paths
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|testRootDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"testMaxCounter"
argument_list|)
decl_stmt|;
name|Path
name|testInputDir
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|testOutputDir
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testInputDir
argument_list|)
expr_stmt|;
name|Path
name|testInputFile
init|=
operator|new
name|Path
argument_list|(
name|testInputDir
argument_list|,
literal|"file01"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testInputFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|writeChars
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeChars
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testOutputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Run job (1 mapper, 2 reducers)
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRConfig
operator|.
name|RESOURCE_CALCULATOR_PROCESS_TREE
argument_list|,
name|MockResourceCalculatorProcessTree
operator|.
name|class
argument_list|,
name|ResourceCalculatorProcessTree
operator|.
name|class
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"word count"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|WordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|TokenizerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// make sure we have double here to test max
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|testInputDir
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|testOutputDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify physical numbers
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|maxMap
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_PHYSICAL_MEMORY_BYTES_MAX
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|maxReduce
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_PHYSICAL_MEMORY_BYTES_MAX
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|allP
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|maxMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|maxReduce
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|allP
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify virtual numbers
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|maxMapV
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_VIRTUAL_MEMORY_BYTES_MAX
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|maxReduceV
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_VIRTUAL_MEMORY_BYTES_MAX
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|allV
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|maxMapV
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|maxReduceV
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6000
argument_list|,
name|allV
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure customer counters are not affected by the _MAX
comment|// code in FrameworkCountersGroup
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|customerCounter
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|IntSumReducer
operator|.
name|Counters
operator|.
name|MY_COUNTER_MAX
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|customerCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testInputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testOutputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

