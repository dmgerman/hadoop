begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Base class to test Job end notification in local and cluster mode.  *  * Starts up hadoop on Local or Cluster mode (by extending of the  * HadoopTestCase class) and it starts a servlet engine that hosts  * a servlet that will receive the notification of job finalization.  *  * The notification servlet returns a HTTP 400 the first time is called  * and a HTTP 200 the second time, thus testing retry.  *  * In both cases local file system is used (this is irrelevant for  * the tested functionality)  *  *   */
end_comment

begin_class
DECL|class|NotificationTestCase
specifier|public
specifier|abstract
class|class
name|NotificationTestCase
extends|extends
name|HadoopTestCase
block|{
DECL|method|NotificationTestCase (int mode)
specifier|protected
name|NotificationTestCase
parameter_list|(
name|int
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|contextPath
specifier|private
name|String
name|contextPath
init|=
literal|"/notification"
decl_stmt|;
DECL|field|servletPath
specifier|private
name|String
name|servletPath
init|=
literal|"/mapred"
decl_stmt|;
DECL|field|webServer
specifier|private
name|Server
name|webServer
decl_stmt|;
DECL|method|startHttpServer ()
specifier|private
name|void
name|startHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the webServer
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|webServer
operator|=
literal|null
expr_stmt|;
block|}
name|webServer
operator|=
operator|new
name|Server
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|webServer
argument_list|,
name|contextPath
argument_list|)
decl_stmt|;
comment|// create servlet handler
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|new
name|NotificationServlet
argument_list|()
argument_list|)
argument_list|,
name|servletPath
argument_list|)
expr_stmt|;
comment|// Start webServer
name|webServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|webServer
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
DECL|method|stopHttpServer ()
specifier|private
name|void
name|stopHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|webServer
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|webServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|NotificationServlet
specifier|public
specifier|static
class|class
name|NotificationServlet
extends|extends
name|HttpServlet
block|{
DECL|field|counter
specifier|public
specifier|static
specifier|volatile
name|int
name|counter
init|=
literal|0
decl_stmt|;
DECL|field|failureCounter
specifier|public
specifier|static
specifier|volatile
name|int
name|failureCounter
init|=
literal|0
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|doGet (HttpServletRequest req, HttpServletResponse res)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|queryString
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|counter
condition|)
block|{
case|case
literal|0
case|:
name|verifyQuery
argument_list|(
name|queryString
argument_list|,
literal|"SUCCEEDED"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|verifyQuery
argument_list|(
name|queryString
argument_list|,
literal|"KILLED"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|verifyQuery
argument_list|(
name|queryString
argument_list|,
literal|"FAILED"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|counter
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|res
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"forcing error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
DECL|method|verifyQuery (String query, String expected)
specifier|protected
name|void
name|verifyQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|query
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
condition|)
block|{
return|return;
block|}
name|failureCounter
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The request ("
operator|+
name|query
operator|+
literal|") does not contain "
operator|+
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNotificationUrlTemplate ()
specifier|private
name|String
name|getNotificationUrlTemplate
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|port
operator|+
name|contextPath
operator|+
name|servletPath
operator|+
literal|"?jobId=$jobId&amp;jobStatus=$jobStatus"
return|;
block|}
DECL|method|createJobConf ()
specifier|protected
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|conf
init|=
name|super
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setJobEndNotificationURI
argument_list|(
name|getNotificationUrlTemplate
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MR_JOB_END_RETRY_ATTEMPTS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MR_JOB_END_RETRY_INTERVAL
argument_list|,
literal|200
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|startHttpServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopHttpServer
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMR ()
specifier|public
name|void
name|testMR
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|launchWordCount
argument_list|(
name|this
operator|.
name|createJobConf
argument_list|()
argument_list|,
literal|"a b c d e f g h"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|keepTrying
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
literal|30
operator|&&
name|keepTrying
condition|;
name|tries
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
operator|!
operator|(
name|NotificationServlet
operator|.
name|counter
operator|==
literal|2
operator|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|NotificationServlet
operator|.
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NotificationServlet
operator|.
name|failureCounter
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"notificationjob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"notificationjob/output"
argument_list|)
decl_stmt|;
comment|// Hack for local FS that does not have the concept of a 'mounting point'
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
empty_stmt|;
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
block|}
comment|// run a job with KILLED status
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|UtilsForTests
operator|.
name|runJobKill
argument_list|(
name|this
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
literal|30
operator|&&
name|keepTrying
condition|;
name|tries
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
operator|!
operator|(
name|NotificationServlet
operator|.
name|counter
operator|==
literal|4
operator|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|NotificationServlet
operator|.
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NotificationServlet
operator|.
name|failureCounter
argument_list|)
expr_stmt|;
comment|// run a job with FAILED status
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
name|this
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
literal|30
operator|&&
name|keepTrying
condition|;
name|tries
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|keepTrying
operator|=
operator|!
operator|(
name|NotificationServlet
operator|.
name|counter
operator|==
literal|6
operator|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|NotificationServlet
operator|.
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NotificationServlet
operator|.
name|failureCounter
argument_list|)
expr_stmt|;
block|}
DECL|method|launchWordCount (JobConf conf, String input, int numMaps, int numReduces)
specifier|private
name|String
name|launchWordCount
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|input
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"testing/wc/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"testing/wc/output"
argument_list|)
decl_stmt|;
comment|// Hack for local FS that does not have the concept of a 'mounting point'
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
empty_stmt|;
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|{
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setJobName
argument_list|(
literal|"wordcount"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the keys are words (strings)
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the values are counts (ints)
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outDir
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

