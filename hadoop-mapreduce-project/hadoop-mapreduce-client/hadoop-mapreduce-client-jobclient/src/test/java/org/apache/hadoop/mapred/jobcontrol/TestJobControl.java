begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
operator|.
name|ControlledJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class performs unit test for Job/JobControl classes.  *    */
end_comment

begin_class
DECL|class|TestJobControl
specifier|public
class|class
name|TestJobControl
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
comment|/**    * This is a main function for testing JobControl class.    * It first cleans all the dirs it will use. Then it generates some random text    * data in TestJobControlData/indir. Then it creates 4 jobs:     *      Job 1: copy data from indir to outdir_1    *      Job 2: copy data from indir to outdir_2    *      Job 3: copy data from outdir_1 and outdir_2 to outdir_3    *      Job 4: copy data from outdir to outdir_4    * The jobs 1 and 2 have no dependency. The job 3 depends on jobs 1 and 2.    * The job 4 depends on job 3.    *     * Then it creates a JobControl object and add the 4 jobs to the JobControl object.    * Finally, it creates a thread to run the JobControl object and monitors/reports    * the job states.    */
DECL|method|doJobControlTest ()
specifier|public
specifier|static
name|void
name|doJobControlTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|defaults
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
name|Path
name|rootDataDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"TestJobControlData"
argument_list|)
decl_stmt|;
name|Path
name|indir
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"indir"
argument_list|)
decl_stmt|;
name|Path
name|outdir_1
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_1"
argument_list|)
decl_stmt|;
name|Path
name|outdir_2
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_2"
argument_list|)
decl_stmt|;
name|Path
name|outdir_3
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_3"
argument_list|)
decl_stmt|;
name|Path
name|outdir_4
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_4"
argument_list|)
decl_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|generateData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_1
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_2
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_3
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_4
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|dependingJobs
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|inPaths_1
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|inPaths_1
operator|.
name|add
argument_list|(
name|indir
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf_1
init|=
name|JobControlTestUtils
operator|.
name|createCopyJob
argument_list|(
name|inPaths_1
argument_list|,
name|outdir_1
argument_list|)
decl_stmt|;
name|Job
name|job_1
init|=
operator|new
name|Job
argument_list|(
name|jobConf_1
argument_list|,
name|dependingJobs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|inPaths_2
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|inPaths_2
operator|.
name|add
argument_list|(
name|indir
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf_2
init|=
name|JobControlTestUtils
operator|.
name|createCopyJob
argument_list|(
name|inPaths_2
argument_list|,
name|outdir_2
argument_list|)
decl_stmt|;
name|Job
name|job_2
init|=
operator|new
name|Job
argument_list|(
name|jobConf_2
argument_list|,
name|dependingJobs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|inPaths_3
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|inPaths_3
operator|.
name|add
argument_list|(
name|outdir_1
argument_list|)
expr_stmt|;
name|inPaths_3
operator|.
name|add
argument_list|(
name|outdir_2
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf_3
init|=
name|JobControlTestUtils
operator|.
name|createCopyJob
argument_list|(
name|inPaths_3
argument_list|,
name|outdir_3
argument_list|)
decl_stmt|;
name|dependingJobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|job_1
argument_list|)
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|job_2
argument_list|)
expr_stmt|;
name|Job
name|job_3
init|=
operator|new
name|Job
argument_list|(
name|jobConf_3
argument_list|,
name|dependingJobs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|inPaths_4
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|inPaths_4
operator|.
name|add
argument_list|(
name|outdir_3
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf_4
init|=
name|JobControlTestUtils
operator|.
name|createCopyJob
argument_list|(
name|inPaths_4
argument_list|,
name|outdir_4
argument_list|)
decl_stmt|;
name|dependingJobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
expr_stmt|;
name|dependingJobs
operator|.
name|add
argument_list|(
name|job_3
argument_list|)
expr_stmt|;
name|Job
name|job_4
init|=
operator|new
name|Job
argument_list|(
name|jobConf_4
argument_list|,
name|dependingJobs
argument_list|)
decl_stmt|;
name|JobControl
name|theControl
init|=
operator|new
name|JobControl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
operator|(
name|ControlledJob
operator|)
name|job_1
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
operator|(
name|ControlledJob
operator|)
name|job_2
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|job_3
argument_list|)
expr_stmt|;
name|theControl
operator|.
name|addJob
argument_list|(
name|job_4
argument_list|)
expr_stmt|;
name|Thread
name|theController
init|=
operator|new
name|Thread
argument_list|(
name|theControl
argument_list|)
decl_stmt|;
name|theController
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|theControl
operator|.
name|allFinished
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in waiting state: "
operator|+
name|theControl
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in ready state: "
operator|+
name|theControl
operator|.
name|getReadyJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in running state: "
operator|+
name|theControl
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in success state: "
operator|+
name|theControl
operator|.
name|getSuccessfulJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in failed state: "
operator|+
name|theControl
operator|.
name|getFailedJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{        }
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs are all done???"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in waiting state: "
operator|+
name|theControl
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in ready state: "
operator|+
name|theControl
operator|.
name|getReadyJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in running state: "
operator|+
name|theControl
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in success state: "
operator|+
name|theControl
operator|.
name|getSuccessfulJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Jobs in failed state: "
operator|+
name|theControl
operator|.
name|getFailedJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|job_1
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|FAILED
operator|&&
name|job_1
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
operator|&&
name|job_1
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|SUCCESS
condition|)
block|{
name|String
name|states
init|=
literal|"job_1:  "
operator|+
name|job_1
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The state of job_1 is not in a complete state\n"
operator|+
name|states
argument_list|)
throw|;
block|}
if|if
condition|(
name|job_2
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|FAILED
operator|&&
name|job_2
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
operator|&&
name|job_2
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|SUCCESS
condition|)
block|{
name|String
name|states
init|=
literal|"job_2:  "
operator|+
name|job_2
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The state of job_2 is not in a complete state\n"
operator|+
name|states
argument_list|)
throw|;
block|}
if|if
condition|(
name|job_3
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|FAILED
operator|&&
name|job_3
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
operator|&&
name|job_3
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|SUCCESS
condition|)
block|{
name|String
name|states
init|=
literal|"job_3:  "
operator|+
name|job_3
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The state of job_3 is not in a complete state\n"
operator|+
name|states
argument_list|)
throw|;
block|}
if|if
condition|(
name|job_4
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|FAILED
operator|&&
name|job_4
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
operator|&&
name|job_4
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|SUCCESS
condition|)
block|{
name|String
name|states
init|=
literal|"job_4:  "
operator|+
name|job_4
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The state of job_4 is not in a complete state\n"
operator|+
name|states
argument_list|)
throw|;
block|}
if|if
condition|(
name|job_1
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|FAILED
operator|||
name|job_2
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|FAILED
operator|||
name|job_1
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|DEPENDENT_FAILED
operator|||
name|job_2
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
if|if
condition|(
name|job_3
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
name|String
name|states
init|=
literal|"job_1:  "
operator|+
name|job_1
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|states
operator|=
literal|"job_2:  "
operator|+
name|job_2
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
name|states
operator|=
literal|"job_3:  "
operator|+
name|job_3
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
name|states
operator|=
literal|"job_4:  "
operator|+
name|job_4
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The states of jobs 1, 2, 3, 4 are not consistent\n"
operator|+
name|states
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|job_3
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|FAILED
operator|||
name|job_3
operator|.
name|getState
argument_list|()
operator|==
name|Job
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
if|if
condition|(
name|job_4
operator|.
name|getState
argument_list|()
operator|!=
name|Job
operator|.
name|DEPENDENT_FAILED
condition|)
block|{
name|String
name|states
init|=
literal|"job_3:  "
operator|+
name|job_3
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|states
operator|=
literal|"job_4:  "
operator|+
name|job_4
operator|.
name|getState
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"The states of jobs 3, 4 are not consistent\n"
operator|+
name|states
argument_list|)
throw|;
block|}
block|}
name|theControl
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testJobState ()
specifier|public
name|void
name|testJobState
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job_1
init|=
name|getCopyJob
argument_list|()
decl_stmt|;
name|JobControl
name|jc
init|=
operator|new
name|JobControl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|jc
operator|.
name|addJob
argument_list|(
name|job_1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Job
operator|.
name|WAITING
argument_list|,
name|job_1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|job_1
operator|.
name|setState
argument_list|(
name|Job
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Job
operator|.
name|WAITING
argument_list|,
name|job_1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
name|mockjob
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockjob
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|job_1
operator|.
name|setJob
argument_list|(
name|mockjob
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"job_test_0000"
argument_list|,
name|job_1
operator|.
name|getMapredJobID
argument_list|()
argument_list|)
expr_stmt|;
name|job_1
operator|.
name|setMapredJobID
argument_list|(
literal|"job_test_0001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"job_test_0000"
argument_list|,
name|job_1
operator|.
name|getMapredJobID
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAddingDependingJob ()
specifier|public
name|void
name|testAddingDependingJob
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job_1
init|=
name|getCopyJob
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|dependingJobs
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|JobControl
name|jc
init|=
operator|new
name|JobControl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|jc
operator|.
name|addJob
argument_list|(
name|job_1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Job
operator|.
name|WAITING
argument_list|,
name|job_1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job_1
operator|.
name|addDependingJob
argument_list|(
operator|new
name|Job
argument_list|(
name|job_1
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|dependingJobs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getCopyJob ()
specifier|public
name|Job
name|getCopyJob
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|defaults
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
name|Path
name|rootDataDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"TestJobControlData"
argument_list|)
decl_stmt|;
name|Path
name|indir
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"indir"
argument_list|)
decl_stmt|;
name|Path
name|outdir_1
init|=
operator|new
name|Path
argument_list|(
name|rootDataDir
argument_list|,
literal|"outdir_1"
argument_list|)
decl_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|generateData
argument_list|(
name|fs
argument_list|,
name|indir
argument_list|)
expr_stmt|;
name|JobControlTestUtils
operator|.
name|cleanData
argument_list|(
name|fs
argument_list|,
name|outdir_1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|dependingJobs
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|inPaths_1
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|inPaths_1
operator|.
name|add
argument_list|(
name|indir
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf_1
init|=
name|JobControlTestUtils
operator|.
name|createCopyJob
argument_list|(
name|inPaths_1
argument_list|,
name|outdir_1
argument_list|)
decl_stmt|;
name|Job
name|job_1
init|=
operator|new
name|Job
argument_list|(
name|jobConf_1
argument_list|,
name|dependingJobs
argument_list|)
decl_stmt|;
return|return
name|job_1
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testJobControl ()
specifier|public
name|void
name|testJobControl
parameter_list|()
throws|throws
name|Exception
block|{
name|doJobControlTest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetAssignedJobId ()
specifier|public
name|void
name|testGetAssignedJobId
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jc
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Job
name|j
init|=
operator|new
name|Job
argument_list|(
name|jc
argument_list|)
decl_stmt|;
comment|//Just make sure no exception is thrown
name|assertNull
argument_list|(
name|j
operator|.
name|getAssignedJobID
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
name|mockjob
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockjob
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|j
operator|.
name|setJob
argument_list|(
name|mockjob
argument_list|)
expr_stmt|;
name|JobID
name|expected
init|=
operator|new
name|JobID
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|j
operator|.
name|getAssignedJobID
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockjob
argument_list|)
operator|.
name|getJobID
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestJobControl
name|test
init|=
operator|new
name|TestJobControl
argument_list|()
decl_stmt|;
try|try
block|{
name|test
operator|.
name|testJobControl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

