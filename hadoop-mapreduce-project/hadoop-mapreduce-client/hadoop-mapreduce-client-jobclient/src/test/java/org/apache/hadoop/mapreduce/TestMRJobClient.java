begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterMapReduceTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|tools
operator|.
name|CLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  test CLI class. CLI class implemented  the Tool interface.   Here test that CLI sends correct command with options and parameters.   */
end_comment

begin_class
DECL|class|TestMRJobClient
specifier|public
class|class
name|TestMRJobClient
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMRJobClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|runJob (Configuration conf)
specifier|private
name|Job
name|runJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|input
init|=
literal|"hello1\nhello2\nhello3\n"
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|runJobInBackGround (Configuration conf)
specifier|private
name|Job
name|runJobInBackGround
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|input
init|=
literal|"hello1\nhello2\nhello3\n"
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
literal|200
operator|&&
name|job
operator|.
name|getJobID
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for jobId..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|job
return|;
block|}
DECL|method|runTool (Configuration conf, Tool tool, String[] args, OutputStream out)
specifier|public
specifier|static
name|int
name|runTool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Tool
name|tool
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"args = "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|newOut
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|newOut
argument_list|)
expr_stmt|;
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
return|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BadOutputFormat
specifier|private
specifier|static
class|class
name|BadOutputFormat
extends|extends
name|TextOutputFormat
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|checkOutputSpecs (JobContext job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobSubmissionSpecsAndFiles ()
specifier|public
name|void
name|testJobSubmissionSpecsAndFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|BadOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should've thrown an exception while checking output specs."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|jobStagingArea
init|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
name|cluster
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|submitJobDir
init|=
operator|new
name|Path
argument_list|(
name|jobStagingArea
argument_list|,
literal|"JobId"
argument_list|)
decl_stmt|;
name|Path
name|submitJobFile
init|=
name|JobSubmissionFiles
operator|.
name|getJobConfPath
argument_list|(
name|submitJobDir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Shouldn't have created a job file if job specs failed."
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|submitJobFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * main test method    */
annotation|@
name|Test
DECL|method|testJobClient ()
specifier|public
name|void
name|testJobClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// test all jobs list
name|testAllJobList
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test only submitted jobs list
name|testSubmittedJobList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// test job counter
name|testGetCounter
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// status
name|testJobStatus
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test list of events
name|testJobEvents
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test job history
name|testJobHistory
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test tracker list
name|testListTrackers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// attempts list
name|testListAttemptIds
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// black list
name|testListBlackList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// test method main and help screen
name|startStop
argument_list|()
expr_stmt|;
comment|// test a change job priority .
name|testChangingJobPriority
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// submit job from file
name|testSubmit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// kill a task
name|testKillTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// fail a task
name|testfailTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// kill job
name|testKillJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// download job config
name|testConfig
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * test fail task    */
DECL|method|testfailTask (Configuration conf)
specifier|private
name|void
name|testfailTask
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|runJobInBackGround
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taid
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tid
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// TaskAttemptId is not set
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-fail-task"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-fail-task"
block|,
name|taid
operator|.
name|toString
argument_list|()
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|answer
operator|.
name|contains
argument_list|(
literal|"Killed task "
operator|+
name|taid
operator|+
literal|" by failing it"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test a kill task    */
DECL|method|testKillTask (Configuration conf)
specifier|private
name|void
name|testKillTask
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|runJobInBackGround
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taid
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tid
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad parameters
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-kill-task"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-kill-task"
block|,
name|taid
operator|.
name|toString
argument_list|()
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|answer
operator|.
name|contains
argument_list|(
literal|"Killed task "
operator|+
name|taid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test a kill job    */
DECL|method|testKillJob (Configuration conf)
specifier|private
name|void
name|testKillJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|runJobInBackGround
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// without jobId
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-kill"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// good parameters
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-kill"
block|,
name|jobId
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|answer
operator|.
name|contains
argument_list|(
literal|"Killed job "
operator|+
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test submit task from file    */
DECL|method|testSubmit (Configuration conf)
specifier|private
name|void
name|testSubmit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|File
name|fcon
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"config"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|fconUri
init|=
operator|new
name|Path
argument_list|(
name|fcon
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fcon
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad parameters
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-submit"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-submit"
block|,
name|fconUri
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
comment|// in console was written
name|assertTrue
argument_list|(
name|answer
operator|.
name|contains
argument_list|(
literal|"Created job "
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test start form console command without options    */
DECL|method|startStop ()
specifier|private
name|void
name|startStop
parameter_list|()
block|{
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|error
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
try|try
block|{
name|CLI
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|" CLI.main should call System.exit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{      }
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
comment|// in console should be written help text
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-submit"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-kill"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-set-priority"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-events"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-history"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-list"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-list-active-trackers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-list-blacklisted-trackers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-list-attempt-ids"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-kill-task"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-fail-task"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"-logs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * black list     */
DECL|method|testListBlackList (Configuration conf)
specifier|private
name|void
name|testListBlackList
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-blacklisted-trackers"
block|,
literal|"second in"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-blacklisted-trackers"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * print AttemptIds list     */
DECL|method|testListAttemptIds (String jobId, Configuration conf)
specifier|private
name|void
name|testListAttemptIds
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-attempt-ids"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-attempt-ids"
block|,
name|jobId
block|,
literal|"MAP"
block|,
literal|"completed"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * print tracker list    */
DECL|method|testListTrackers (Configuration conf)
specifier|private
name|void
name|testListTrackers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-active-trackers"
block|,
literal|"second parameter"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list-active-trackers"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * print job history from file     */
DECL|method|testJobHistory (String jobId, Configuration conf)
specifier|private
name|void
name|testJobHistory
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// Find jhist file
name|String
name|historyFileUri
init|=
literal|null
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|getFileSystem
argument_list|()
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|historyFileUri
operator|==
literal|null
condition|)
block|{
name|LocatedFileStatus
name|file
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jhist"
argument_list|)
condition|)
block|{
name|historyFileUri
operator|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Could not find jhist file"
argument_list|,
name|historyFileUri
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|historyFileOrJobId
range|:
operator|new
name|String
index|[]
block|{
name|historyFileUri
block|,
name|jobId
block|}
control|)
block|{
comment|// Try a bunch of different valid combinations of the command
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"all"
block|,
name|historyFileOrJobId
block|,       }
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryHumanOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|File
name|outFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"myout"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"all"
block|,
name|historyFileOrJobId
block|,
literal|"-outfile"
block|,
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryHumanFileOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
name|outFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"myout"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"all"
block|,
name|historyFileOrJobId
block|,
literal|"-outfile"
block|,
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-format"
block|,
literal|"human"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryHumanFileOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"-format"
block|,
literal|"human"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryHumanOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"all"
block|,
name|historyFileOrJobId
block|,
literal|"-format"
block|,
literal|"json"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryJSONOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|outFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"myout"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"all"
block|,
name|historyFileOrJobId
block|,
literal|"-outfile"
block|,
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-format"
block|,
literal|"json"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryJSONFileOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"-format"
block|,
literal|"json"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|checkHistoryJSONOutput
argument_list|(
name|jobId
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// Check some bad arguments
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"foo"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"-format"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"-outfile"
block|,       }
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
try|try
block|{
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
name|historyFileOrJobId
block|,
literal|"-format"
block|,
literal|"foo"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
try|try
block|{
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-history"
block|,
literal|"not_a_valid_history_file_or_job_id"
block|,       }
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
DECL|method|checkHistoryHumanOutput (String jobId, ByteArrayOutputStream out)
specifier|private
name|void
name|checkHistoryHumanOutput
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteArrayOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hadoop job: "
operator|+
name|jobId
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|checkHistoryJSONOutput (String jobId, ByteArrayOutputStream out)
specifier|private
name|void
name|checkHistoryJSONOutput
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteArrayOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|toString
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|jobId
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"hadoopJob"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|checkHistoryHumanFileOutput (String jobId, ByteArrayOutputStream out, File outFile)
specifier|private
name|void
name|checkHistoryHumanFileOutput
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteArrayOutputStream
name|out
parameter_list|,
name|File
name|outFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hadoop job: "
operator|+
name|jobId
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHistoryJSONFileOutput (String jobId, ByteArrayOutputStream out, File outFile)
specifier|private
name|void
name|checkHistoryJSONFileOutput
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteArrayOutputStream
name|out
parameter_list|,
name|File
name|outFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|toString
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|jobId
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"hadoopJob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * download job config    */
DECL|method|testConfig (String jobId, Configuration conf)
specifier|private
name|void
name|testConfig
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad arguments
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-config"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-config job_invalid foo.xml"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// good arguments
name|File
name|outFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"config"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-config"
block|,
name|jobId
block|,
name|outFile
operator|.
name|toString
argument_list|()
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" "
operator|+
literal|"standalone=\"no\"?><configuration>"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
comment|/**    * print job events list     */
DECL|method|testJobEvents (String jobId, Configuration conf)
specifier|private
name|void
name|testJobEvents
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-events"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-events"
block|,
name|jobId
block|,
literal|"0"
block|,
literal|"100"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|String
name|attemptId
init|=
operator|(
literal|"attempt"
operator|+
name|jobId
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|attemptId
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * print job status     */
DECL|method|testJobStatus (String jobId, Configuration conf)
specifier|private
name|void
name|testJobStatus
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad options
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-status"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|jobId
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|contains
argument_list|(
literal|"Job state:"
argument_list|)
condition|)
block|{
continue|continue;
block|}
break|break;
block|}
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * print counters     */
DECL|method|testGetCounter (String jobId, Configuration conf)
specifier|public
name|void
name|testGetCounter
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad command
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-counter"
block|, }
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-counter"
block|,
name|jobId
block|,
literal|"org.apache.hadoop.mapreduce.TaskCounter"
block|,
literal|"MAP_INPUT_RECORDS"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter"
argument_list|,
literal|"3"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * print a job list     */
DECL|method|testAllJobList (String jobId, Configuration conf)
specifier|protected
name|void
name|testAllJobList
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// bad options
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"alldata"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
comment|// all jobs
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"all"
block|}
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubmittedJobList (Configuration conf)
specifier|protected
name|void
name|testSubmittedJobList
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|runJobInBackGround
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// only submitted
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
comment|// all jobs submitted! no current
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyJobPriority (String jobId, String priority, Configuration conf, CLI jc)
specifier|protected
name|void
name|verifyJobPriority
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CLI
name|jc
parameter_list|)
throws|throws
name|Exception
block|{
name|PipedInputStream
name|pis
init|=
operator|new
name|PipedInputStream
argument_list|()
decl_stmt|;
name|PipedOutputStream
name|pos
init|=
operator|new
name|PipedOutputStream
argument_list|(
name|pis
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"all"
block|}
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pis
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|pis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testChangingJobPriority (String jobId, Configuration conf)
specifier|public
name|void
name|testChangingJobPriority
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-set-priority"
block|}
argument_list|,
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-set-priority"
block|,
name|jobId
block|,
literal|"VERY_LOW"
block|}
argument_list|,
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// set-priority is fired after job is completed in YARN, hence need not
comment|// have to update the priority.
name|verifyJobPriority
argument_list|(
name|jobId
argument_list|,
literal|"DEFAULT"
argument_list|,
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test -list option displays job name.    * The name is capped to 20 characters for display.    */
annotation|@
name|Test
DECL|method|testJobName ()
specifier|public
name|void
name|testJobName
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|CLI
name|jc
init|=
name|createJobClient
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"short_name"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mapreduce"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|verifyJobName
argument_list|(
name|jobId
argument_list|,
literal|"mapreduce"
argument_list|,
name|conf
argument_list|,
name|jc
argument_list|)
expr_stmt|;
name|Job
name|job2
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"long_name"
argument_list|)
decl_stmt|;
name|job2
operator|.
name|setJobName
argument_list|(
literal|"mapreduce_job_with_long_name"
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|job2
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jobId
operator|=
name|job2
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|verifyJobName
argument_list|(
name|jobId
argument_list|,
literal|"mapreduce_job_with_l"
argument_list|,
name|conf
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyJobName (String jobId, String name, Configuration conf, CLI jc)
specifier|protected
name|void
name|verifyJobName
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CLI
name|jc
parameter_list|)
throws|throws
name|Exception
block|{
name|PipedInputStream
name|pis
init|=
operator|new
name|PipedInputStream
argument_list|()
decl_stmt|;
name|PipedOutputStream
name|pos
init|=
operator|new
name|PipedOutputStream
argument_list|(
name|pis
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"all"
block|}
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pis
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|pis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createJobClient ()
specifier|protected
name|CLI
name|createJobClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|CLI
argument_list|()
return|;
block|}
block|}
end_class

end_unit

