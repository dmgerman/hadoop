begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterMapReduceTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|tools
operator|.
name|CLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|TestMRJobClient
specifier|public
class|class
name|TestMRJobClient
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMRJobClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|runJob (Configuration conf)
specifier|private
name|Job
name|runJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|input
init|=
literal|"hello1\nhello2\nhello3\n"
decl_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|runTool (Configuration conf, Tool tool, String[] args, OutputStream out)
specifier|public
specifier|static
name|int
name|runTool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Tool
name|tool
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|newOut
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|newOut
argument_list|)
expr_stmt|;
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
return|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobClient ()
specifier|public
name|void
name|testJobClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|testGetCounter
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testJobList
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testChangingJobPriority
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCounter (String jobId, Configuration conf)
specifier|public
name|void
name|testGetCounter
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-counter"
block|,
name|jobId
block|,
literal|"org.apache.hadoop.mapreduce.TaskCounter"
block|,
literal|"MAP_INPUT_RECORDS"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter"
argument_list|,
literal|"3"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobList (String jobId, Configuration conf)
specifier|public
name|void
name|testJobList
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyJobPriority
argument_list|(
name|jobId
argument_list|,
literal|"HIGH"
argument_list|,
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyJobPriority (String jobId, String priority, Configuration conf, CLI jc)
specifier|protected
name|void
name|verifyJobPriority
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CLI
name|jc
parameter_list|)
throws|throws
name|Exception
block|{
name|PipedInputStream
name|pis
init|=
operator|new
name|PipedInputStream
argument_list|()
decl_stmt|;
name|PipedOutputStream
name|pos
init|=
operator|new
name|PipedOutputStream
argument_list|(
name|pis
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|jc
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"all"
block|}
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pis
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"line = "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|pis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangingJobPriority (String jobId, Configuration conf)
specifier|public
name|void
name|testChangingJobPriority
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-set-priority"
block|,
name|jobId
block|,
literal|"VERY_LOW"
block|}
argument_list|,
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|verifyJobPriority
argument_list|(
name|jobId
argument_list|,
literal|"VERY_LOW"
argument_list|,
name|conf
argument_list|,
name|createJobClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingProfileOutput ()
specifier|public
name|void
name|testMissingProfileOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
specifier|final
name|String
name|input
init|=
literal|"hello1\n"
decl_stmt|;
comment|// Set a job to be profiled with an empty agentlib parameter.
comment|// This will fail to create profile.out files for tasks.
comment|// This will succeed by skipping the HTTP fetch of the
comment|// profiler output.
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"disable-profile-fetch"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setProfileEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setProfileParams
argument_list|(
literal|"-agentlib:,verbose=n,file=%s"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Run another job with an hprof agentlib param; verify
comment|// that the HTTP fetch works here.
name|Job
name|job2
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|,
name|getOutputDir
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job2
operator|.
name|setJobName
argument_list|(
literal|"enable-profile-fetch"
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setProfileEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setProfileParams
argument_list|(
literal|"-agentlib:hprof=cpu=samples,heap=sites,force=n,"
operator|+
literal|"thread=y,verbose=n,file=%s"
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setProfileTaskRange
argument_list|(
literal|true
argument_list|,
literal|"0-1"
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setProfileTaskRange
argument_list|(
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job2
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job2
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Find the first map task, verify that we got its profile output file.
name|TaskReport
index|[]
name|reports
init|=
name|job2
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No task reports found!"
argument_list|,
name|reports
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|TaskReport
name|report
init|=
name|reports
index|[
literal|0
index|]
decl_stmt|;
name|TaskID
name|id
init|=
name|report
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|TaskType
operator|.
name|MAP
operator|==
name|id
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using task id: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|attemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|profileOutFile
init|=
operator|new
name|File
argument_list|(
name|attemptId
operator|.
name|toString
argument_list|()
operator|+
literal|".profile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't find profiler output"
argument_list|,
name|profileOutFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't remove profiler output"
argument_list|,
name|profileOutFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobClient ()
specifier|protected
name|CLI
name|createJobClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|CLI
argument_list|()
return|;
block|}
block|}
end_class

end_unit

