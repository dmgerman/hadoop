begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility methods used in various Job Control unit tests.  */
end_comment

begin_class
DECL|class|MapReduceTestUtil
specifier|public
class|class
name|MapReduceTestUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MapReduceTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|static
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|idFormat
specifier|private
specifier|static
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans the data from the passed Path in the passed FileSystem.    *     * @param fs FileSystem to delete data from.    * @param dirPath Path to be deleted.    * @throws IOException If an error occurs cleaning the data.    */
DECL|method|cleanData (FileSystem fs, Path dirPath)
specifier|public
specifier|static
name|void
name|cleanData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a string of random digits.    *     * @return A random string.    */
DECL|method|generateRandomWord ()
specifier|public
specifier|static
name|String
name|generateRandomWord
parameter_list|()
block|{
return|return
name|idFormat
operator|.
name|format
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Generates a line of random text.    *     * @return A line of random text.    */
DECL|method|generateRandomLine ()
specifier|public
specifier|static
name|String
name|generateRandomLine
parameter_list|()
block|{
name|long
name|r
init|=
name|rand
operator|.
name|nextLong
argument_list|()
operator|%
literal|7
decl_stmt|;
name|long
name|n
init|=
name|r
operator|+
literal|20
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|generateRandomWord
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Generates random data consisting of 10000 lines.    *     * @param fs FileSystem to create data in.    * @param dirPath Path to create the data in.    * @throws IOException If an error occurs creating the data.    */
DECL|method|generateData (FileSystem fs, Path dirPath)
specifier|public
specifier|static
name|void
name|generateData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"data.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|generateRandomLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a simple copy job.    *     * @param conf Configuration object    * @param outdir Output directory.    * @param indirs Comma separated input directories.    * @return Job initialized for a data copy job.    * @throws Exception If an error occurs creating job configuration.    */
DECL|method|createCopyJob (Configuration conf, Path outdir, Path... indirs)
specifier|public
specifier|static
name|Job
name|createCopyJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|outdir
parameter_list|,
name|Path
modifier|...
name|indirs
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Job
name|theJob
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|theJob
operator|.
name|setJobName
argument_list|(
literal|"DataMoveJob"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|theJob
argument_list|,
name|indirs
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setMapperClass
argument_list|(
name|DataCopyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|theJob
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setReducerClass
argument_list|(
name|DataCopyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|theJob
return|;
block|}
comment|/**    * Creates a simple fail job.    *     * @param conf Configuration object    * @param outdir Output directory.    * @param indirs Comma separated input directories.    * @return Job initialized for a simple fail job.    * @throws Exception If an error occurs creating job configuration.    */
DECL|method|createFailJob (Configuration conf, Path outdir, Path... indirs)
specifier|public
specifier|static
name|Job
name|createFailJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|outdir
parameter_list|,
name|Path
modifier|...
name|indirs
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|outdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Job
name|theJob
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|theJob
operator|.
name|setJobName
argument_list|(
literal|"Fail-Job"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|theJob
argument_list|,
name|indirs
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setMapperClass
argument_list|(
name|FailMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|theJob
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|theJob
return|;
block|}
comment|/**    * Creates a simple fail job.    *     * @param conf Configuration object    * @param outdir Output directory.    * @param indirs Comma separated input directories.    * @return Job initialized for a simple kill job.    * @throws Exception If an error occurs creating job configuration.    */
DECL|method|createKillJob (Configuration conf, Path outdir, Path... indirs)
specifier|public
specifier|static
name|Job
name|createKillJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|outdir
parameter_list|,
name|Path
modifier|...
name|indirs
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|theJob
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|theJob
operator|.
name|setJobName
argument_list|(
literal|"Kill-Job"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|theJob
argument_list|,
name|indirs
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setMapperClass
argument_list|(
name|KillMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|theJob
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|theJob
return|;
block|}
comment|/**    * Simple Mapper and Reducer implementation which copies data it reads in.    */
DECL|class|DataCopyMapper
specifier|public
specifier|static
class|class
name|DataCopyMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|map (LongWritable key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DataCopyReducer
specifier|public
specifier|static
class|class
name|DataCopyReducer
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|reduce (Text key, Iterator<Text> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Text
name|dumbKey
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|data
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
name|dumbKey
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Mapper that fails
DECL|class|FailMapper
specifier|public
specifier|static
class|class
name|FailMapper
extends|extends
name|Mapper
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable<?> key, Writable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failing map"
argument_list|)
throw|;
block|}
block|}
comment|// Mapper that sleeps for a long time.
comment|// Used for running a job that will be killed
DECL|class|KillMapper
specifier|public
specifier|static
class|class
name|KillMapper
extends|extends
name|Mapper
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable<?> key, Writable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
DECL|class|IncomparableKey
specifier|public
specifier|static
class|class
name|IncomparableKey
implements|implements
name|WritableComparable
argument_list|<
name|Object
argument_list|>
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
block|{ }
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{ }
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should never see this."
argument_list|)
throw|;
block|}
block|}
DECL|class|FakeSplit
specifier|public
specifier|static
class|class
name|FakeSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{ }
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{ }
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|class|Fake_IF
specifier|public
specifier|static
class|class
name|Fake_IF
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|InputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Configurable
block|{
DECL|method|Fake_IF ()
specifier|public
name|Fake_IF
parameter_list|()
block|{ }
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|FakeSplit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|setKeyClass (Configuration conf, Class<?> k)
specifier|public
specifier|static
name|void
name|setKeyClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|k
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|k
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|setValClass (Configuration job, Class<?> v)
specifier|public
specifier|static
name|void
name|setValClass
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|v
parameter_list|)
block|{
name|job
operator|.
name|setClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|v
argument_list|,
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|keyclass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|valclass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|valclass
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|keyclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
name|valclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|createRecordReader ( InputSplit ignored, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|ignored
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{}
specifier|public
name|K
name|getCurrentKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|V
name|getCurrentValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{ }
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0.0f
return|;
block|}
block|}
return|;
block|}
block|}
DECL|class|Fake_RR
specifier|public
specifier|static
class|class
name|Fake_RR
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keyclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|valclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|valclass
decl_stmt|;
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|keyclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
name|valclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|K
name|getCurrentKey
parameter_list|()
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyclass
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getCurrentValue ()
specifier|public
name|V
name|getCurrentValue
parameter_list|()
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valclass
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{ }
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0.0f
return|;
block|}
block|}
DECL|method|createJob (Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds)
specifier|public
specifier|static
name|Job
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|int
name|numInputFiles
parameter_list|,
name|int
name|numReds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|input
init|=
literal|"The quick brown fox\n"
operator|+
literal|"has many silly\n"
operator|+
literal|"red fox sox\n"
decl_stmt|;
return|return
name|createJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|numInputFiles
argument_list|,
name|numReds
argument_list|,
name|input
argument_list|)
return|;
block|}
DECL|method|createJob (Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input)
specifier|public
specifier|static
name|Job
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|int
name|numInputFiles
parameter_list|,
name|int
name|numReds
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputFiles
condition|;
operator|++
name|i
control|)
block|{
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|numReds
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|createDummyMapTaskAttemptContext ( Configuration conf)
specifier|public
specifier|static
name|TaskAttemptContext
name|createDummyMapTaskAttemptContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"jt"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|tid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|tid
argument_list|)
return|;
block|}
DECL|method|createDummyReporter ()
specifier|public
specifier|static
name|StatusReporter
name|createDummyReporter
parameter_list|()
block|{
return|return
operator|new
name|StatusReporter
argument_list|()
block|{
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{       }
specifier|public
name|void
name|progress
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
operator|new
name|Counters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Counters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// Return output of MR job by reading from the given output directory
DECL|method|readOutput (Path outDir, Configuration conf)
specifier|public
specifier|static
name|String
name|readOutput
parameter_list|(
name|Path
name|outDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Path
index|[]
name|fileList
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|outDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|outputFile
range|:
name|fileList
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Path"
operator|+
literal|": "
operator|+
name|outputFile
argument_list|)
expr_stmt|;
name|BufferedReader
name|file
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|outputFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|file
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Reads tasklog and returns it as string after trimming it.    *     * @param filter    *          Task log filter; can be STDOUT, STDERR, SYSLOG, DEBUGOUT, PROFILE    * @param taskId    *          The task id for which the log has to collected    * @param isCleanup    *          whether the task is a cleanup attempt or not.    * @return task log as string    * @throws IOException    */
DECL|method|readTaskLog (TaskLog.LogName filter, org.apache.hadoop.mapred.TaskAttemptID taskId, boolean isCleanup)
specifier|public
specifier|static
name|String
name|readTaskLog
parameter_list|(
name|TaskLog
operator|.
name|LogName
name|filter
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskId
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
comment|// string buffer to store task log
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|res
decl_stmt|;
comment|// reads the whole tasklog into inputstream
name|InputStream
name|taskLogReader
init|=
operator|new
name|TaskLog
operator|.
name|Reader
argument_list|(
name|taskId
argument_list|,
name|filter
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
comment|// construct string log from inputstream.
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|65536
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|res
operator|=
name|taskLogReader
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|taskLogReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// trim the string and return it
name|String
name|str
init|=
name|result
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

