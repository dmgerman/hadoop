begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
DECL|class|TestChainMapReduce
specifier|public
class|class
name|TestChainMapReduce
extends|extends
name|HadoopTestCase
block|{
DECL|method|getFlagDir (boolean local)
specifier|private
specifier|static
name|Path
name|getFlagDir
parameter_list|(
name|boolean
name|local
parameter_list|)
block|{
name|Path
name|flagDir
init|=
operator|new
name|Path
argument_list|(
literal|"testing/chain/flags"
argument_list|)
decl_stmt|;
comment|// Hack for local FS that does not have the concept of a 'mounting point'
if|if
condition|(
name|local
condition|)
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|flagDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|flagDir
argument_list|)
expr_stmt|;
block|}
return|return
name|flagDir
return|;
block|}
DECL|method|cleanFlags (JobConf conf)
specifier|private
specifier|static
name|void
name|cleanFlags
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|getFlagDir
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"localFS"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getFlagDir
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"localFS"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFlag (JobConf conf, String flag)
specifier|private
specifier|static
name|void
name|writeFlag
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|getFlag
argument_list|(
name|conf
argument_list|,
name|flag
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Flag "
operator|+
name|flag
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|getFlagDir
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"localFS"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|flag
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getFlag (JobConf conf, String flag)
specifier|private
specifier|static
name|boolean
name|getFlag
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|getFlagDir
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"localFS"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|flag
argument_list|)
argument_list|)
return|;
block|}
DECL|method|TestChainMapReduce ()
specifier|public
name|TestChainMapReduce
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|LOCAL_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testChain ()
specifier|public
name|void
name|testChain
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"testing/chain/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"testing/chain/output"
argument_list|)
decl_stmt|;
comment|// Hack for local FS that does not have the concept of a 'mounting point'
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"localFS"
argument_list|,
name|isLocalFS
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cleanFlags
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
literal|"1\n2\n"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|JobConf
name|mapAConf
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|mapAConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|ChainMapper
operator|.
name|addMapper
argument_list|(
name|conf
argument_list|,
name|AMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|mapAConf
argument_list|)
expr_stmt|;
name|ChainMapper
operator|.
name|addMapper
argument_list|(
name|conf
argument_list|,
name|BMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|JobConf
name|reduceConf
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|reduceConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|setReducer
argument_list|(
name|conf
argument_list|,
name|CReduce
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|reduceConf
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|addMapper
argument_list|(
name|conf
argument_list|,
name|DMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|JobConf
name|mapEConf
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|mapEConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|addMapper
argument_list|(
name|conf
argument_list|,
name|EMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|mapEConf
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"configure.A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"configure.B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"configure.C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"configure.D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"configure.E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.A.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.A.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.B.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.B.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.C.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.C.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.D.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.D.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.E.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.E.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"close.A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"close.B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"close.C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"close.D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"close.E"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|AMap
specifier|public
specifier|static
class|class
name|AMap
extends|extends
name|IDMap
block|{
DECL|method|AMap ()
specifier|public
name|AMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BMap
specifier|public
specifier|static
class|class
name|BMap
extends|extends
name|IDMap
block|{
DECL|method|BMap ()
specifier|public
name|BMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"B"
argument_list|,
literal|"X"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CReduce
specifier|public
specifier|static
class|class
name|CReduce
extends|extends
name|IDReduce
block|{
DECL|method|CReduce ()
specifier|public
name|CReduce
parameter_list|()
block|{
name|super
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DMap
specifier|public
specifier|static
class|class
name|DMap
extends|extends
name|IDMap
block|{
DECL|method|DMap ()
specifier|public
name|DMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"D"
argument_list|,
literal|"X"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|EMap
specifier|public
specifier|static
class|class
name|EMap
extends|extends
name|IDMap
block|{
DECL|method|EMap ()
specifier|public
name|EMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"E"
argument_list|,
literal|"E"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IDMap
specifier|public
specifier|static
class|class
name|IDMap
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|prop
specifier|private
name|String
name|prop
decl_stmt|;
DECL|field|byValue
specifier|private
name|boolean
name|byValue
decl_stmt|;
DECL|method|IDMap (String name, String prop, boolean byValue)
specifier|public
name|IDMap
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prop
parameter_list|,
name|boolean
name|byValue
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
name|this
operator|.
name|byValue
operator|=
name|byValue
expr_stmt|;
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|assertEquals
argument_list|(
name|prop
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"configure."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|map (LongWritable key, Text value, OutputCollector<LongWritable, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"map."
operator|+
name|name
operator|+
literal|".value."
operator|+
name|value
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|byValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
literal|10
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"close."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|IDReduce
specifier|public
specifier|static
class|class
name|IDReduce
implements|implements
name|Reducer
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|prop
specifier|private
name|String
name|prop
decl_stmt|;
DECL|field|byValue
specifier|private
name|boolean
name|byValue
init|=
literal|false
decl_stmt|;
DECL|method|IDReduce (String name, String prop)
specifier|public
name|IDReduce
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prop
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|assertEquals
argument_list|(
name|prop
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"configure."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|reduce (LongWritable key, Iterator<Text> values, OutputCollector<LongWritable, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|value
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce."
operator|+
name|name
operator|+
literal|".value."
operator|+
name|value
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|byValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
literal|10
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"close."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

