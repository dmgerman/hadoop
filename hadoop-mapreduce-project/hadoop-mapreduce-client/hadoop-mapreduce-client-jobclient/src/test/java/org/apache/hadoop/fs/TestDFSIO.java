begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Distributed i/o benchmark.  *<p>  * This test writes into or reads from a specified number of files.  * File size is specified as a parameter to the test.   * Each file is accessed in a separate map task.  *<p>  * The reducer collects the following statistics:  *<ul>  *<li>number of tasks completed</li>  *<li>number of bytes written/read</li>  *<li>execution time</li>  *<li>io rate</li>  *<li>io rate squared</li>  *</ul>  *      * Finally, the following information is appended to a local file  *<ul>  *<li>read or write test</li>  *<li>date and time the test finished</li>     *<li>number of files</li>  *<li>total number of bytes processed</li>  *<li>throughput in mb/sec (total number of bytes / sum of processing times)</li>  *<li>average i/o rate in mb/sec per file</li>  *<li>standard deviation of i/o rate</li>  *</ul>  */
end_comment

begin_class
DECL|class|TestDFSIO
specifier|public
class|class
name|TestDFSIO
extends|extends
name|TestCase
implements|implements
name|Tool
block|{
comment|// Constants
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSIO
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_TYPE_READ
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TYPE_READ
init|=
literal|0
decl_stmt|;
DECL|field|TEST_TYPE_WRITE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TYPE_WRITE
init|=
literal|1
decl_stmt|;
DECL|field|TEST_TYPE_CLEANUP
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TYPE_CLEANUP
init|=
literal|2
decl_stmt|;
DECL|field|TEST_TYPE_APPEND
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TYPE_APPEND
init|=
literal|3
decl_stmt|;
DECL|field|DEFAULT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1000000
decl_stmt|;
DECL|field|BASE_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BASE_FILE_NAME
init|=
literal|"test_io_"
decl_stmt|;
DECL|field|DEFAULT_RES_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_RES_FILE_NAME
init|=
literal|"TestDFSIO_results.log"
decl_stmt|;
DECL|field|MEGA
specifier|private
specifier|static
specifier|final
name|long
name|MEGA
init|=
name|ByteMultiple
operator|.
name|MB
operator|.
name|value
argument_list|()
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: "
operator|+
name|TestDFSIO
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" [genericOptions]"
operator|+
literal|" -read | -write | -append | -clean [-nrFiles N]"
operator|+
literal|" [-fileSize Size[B|KB|MB|GB|TB]]"
operator|+
literal|" [-resFile resultFileName] [-bufferSize Bytes]"
operator|+
literal|" [-rootDir]"
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
static|static
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"mapred-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"mapred-site.xml"
argument_list|)
expr_stmt|;
block|}
DECL|enum|ByteMultiple
specifier|static
enum|enum
name|ByteMultiple
block|{
DECL|enumConstant|B
name|B
argument_list|(
literal|1L
argument_list|)
block|,
DECL|enumConstant|KB
name|KB
argument_list|(
literal|0x400L
argument_list|)
block|,
DECL|enumConstant|MB
name|MB
argument_list|(
literal|0x100000L
argument_list|)
block|,
DECL|enumConstant|GB
name|GB
argument_list|(
literal|0x40000000L
argument_list|)
block|,
DECL|enumConstant|TB
name|TB
argument_list|(
literal|0x10000000000L
argument_list|)
block|;
DECL|field|multiplier
specifier|private
name|long
name|multiplier
decl_stmt|;
DECL|method|ByteMultiple (long mult)
specifier|private
name|ByteMultiple
parameter_list|(
name|long
name|mult
parameter_list|)
block|{
name|multiplier
operator|=
name|mult
expr_stmt|;
block|}
DECL|method|value ()
name|long
name|value
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
DECL|method|parseString (String sMultiple)
specifier|static
name|ByteMultiple
name|parseString
parameter_list|(
name|String
name|sMultiple
parameter_list|)
block|{
if|if
condition|(
name|sMultiple
operator|==
literal|null
operator|||
name|sMultiple
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// MB by default
return|return
name|MB
return|;
name|String
name|sMU
init|=
name|sMultiple
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|B
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sMU
argument_list|)
condition|)
return|return
name|B
return|;
if|if
condition|(
name|KB
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sMU
argument_list|)
condition|)
return|return
name|KB
return|;
if|if
condition|(
name|MB
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sMU
argument_list|)
condition|)
return|return
name|MB
return|;
if|if
condition|(
name|GB
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sMU
argument_list|)
condition|)
return|return
name|GB
return|;
if|if
condition|(
name|TB
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sMU
argument_list|)
condition|)
return|return
name|TB
return|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported ByteMultiple "
operator|+
name|sMultiple
argument_list|)
throw|;
block|}
block|}
DECL|method|TestDFSIO ()
specifier|public
name|TestDFSIO
parameter_list|()
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
DECL|method|getBaseDir (Configuration conf)
specifier|private
specifier|static
name|String
name|getBaseDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/benchmarks/TestDFSIO"
argument_list|)
return|;
block|}
DECL|method|getControlDir (Configuration conf)
specifier|private
specifier|static
name|Path
name|getControlDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"io_control"
argument_list|)
return|;
block|}
DECL|method|getWriteDir (Configuration conf)
specifier|private
specifier|static
name|Path
name|getWriteDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"io_write"
argument_list|)
return|;
block|}
DECL|method|getReadDir (Configuration conf)
specifier|private
specifier|static
name|Path
name|getReadDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"io_read"
argument_list|)
return|;
block|}
DECL|method|getAppendDir (Configuration conf)
specifier|private
specifier|static
name|Path
name|getAppendDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"io_append"
argument_list|)
return|;
block|}
DECL|method|getDataDir (Configuration conf)
specifier|private
specifier|static
name|Path
name|getDataDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"io_data"
argument_list|)
return|;
block|}
comment|/**    * Run the test with default parameters.    *     * @throws Exception    */
DECL|method|testIOs ()
specifier|public
name|void
name|testIOs
parameter_list|()
throws|throws
name|Exception
block|{
name|TestDFSIO
name|bench
init|=
operator|new
name|TestDFSIO
argument_list|()
decl_stmt|;
name|bench
operator|.
name|testIOs
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the test with the specified parameters.    *     * @param fileSize file size    * @param nrFiles number of files    * @throws IOException    */
DECL|method|testIOs (int fileSize, int nrFiles)
specifier|public
name|void
name|testIOs
parameter_list|(
name|int
name|fileSize
parameter_list|,
name|int
name|nrFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|config
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|createControlFile
argument_list|(
name|fs
argument_list|,
name|fileSize
argument_list|,
name|nrFiles
argument_list|)
expr_stmt|;
name|long
name|tStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|long
name|execTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
decl_stmt|;
name|analyzeResult
argument_list|(
name|fs
argument_list|,
name|TEST_TYPE_WRITE
argument_list|,
name|execTime
argument_list|,
name|DEFAULT_RES_FILE_NAME
argument_list|)
expr_stmt|;
name|tStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|readTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|execTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
expr_stmt|;
name|analyzeResult
argument_list|(
name|fs
argument_list|,
name|TEST_TYPE_READ
argument_list|,
name|execTime
argument_list|,
name|DEFAULT_RES_FILE_NAME
argument_list|)
expr_stmt|;
name|tStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|appendTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|execTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
expr_stmt|;
name|analyzeResult
argument_list|(
name|fs
argument_list|,
name|TEST_TYPE_APPEND
argument_list|,
name|execTime
argument_list|,
name|DEFAULT_RES_FILE_NAME
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createControlFile (FileSystem fs, long fileSize, int nrFiles )
specifier|private
name|void
name|createControlFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|long
name|fileSize
parameter_list|,
comment|// in bytes
name|int
name|nrFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating control file: "
operator|+
name|fileSize
operator|+
literal|" bytes, "
operator|+
name|nrFiles
operator|+
literal|" files"
argument_list|)
expr_stmt|;
name|Path
name|controlDir
init|=
name|getControlDir
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|controlDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrFiles
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|getFileName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Path
name|controlFile
init|=
operator|new
name|Path
argument_list|(
name|controlDir
argument_list|,
literal|"in_file_"
operator|+
name|name
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|config
argument_list|,
name|controlFile
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"created control files for: "
operator|+
name|nrFiles
operator|+
literal|" files"
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileName (int fIdx)
specifier|private
specifier|static
name|String
name|getFileName
parameter_list|(
name|int
name|fIdx
parameter_list|)
block|{
return|return
name|BASE_FILE_NAME
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|fIdx
argument_list|)
return|;
block|}
comment|/**    * Write/Read mapper base class.    *<p>    * Collects the following statistics per task:    *<ul>    *<li>number of tasks completed</li>    *<li>number of bytes written/read</li>    *<li>execution time</li>    *<li>i/o rate</li>    *<li>i/o rate squared</li>    *</ul>    */
DECL|class|IOStatMapper
specifier|private
specifier|abstract
specifier|static
class|class
name|IOStatMapper
parameter_list|<
name|T
parameter_list|>
extends|extends
name|IOMapperBase
argument_list|<
name|T
argument_list|>
block|{
DECL|method|IOStatMapper ()
name|IOStatMapper
parameter_list|()
block|{      }
DECL|method|collectStats (OutputCollector<Text, Text> output, String name, long execTime, Long objSize)
name|void
name|collectStats
parameter_list|(
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|execTime
parameter_list|,
name|Long
name|objSize
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalSize
init|=
name|objSize
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|float
name|ioRateMbSec
init|=
operator|(
name|float
operator|)
name|totalSize
operator|*
literal|1000
operator|/
operator|(
name|execTime
operator|*
name|MEGA
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of bytes processed = "
operator|+
name|totalSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exec time = "
operator|+
name|execTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"IO rate = "
operator|+
name|ioRateMbSec
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|AccumulatingReducer
operator|.
name|VALUE_TYPE_LONG
operator|+
literal|"tasks"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|AccumulatingReducer
operator|.
name|VALUE_TYPE_LONG
operator|+
literal|"size"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|totalSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|AccumulatingReducer
operator|.
name|VALUE_TYPE_LONG
operator|+
literal|"time"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|execTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|AccumulatingReducer
operator|.
name|VALUE_TYPE_FLOAT
operator|+
literal|"rate"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ioRateMbSec
operator|*
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|AccumulatingReducer
operator|.
name|VALUE_TYPE_FLOAT
operator|+
literal|"sqrate"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ioRateMbSec
operator|*
name|ioRateMbSec
operator|*
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write mapper class.    */
DECL|class|WriteMapper
specifier|public
specifier|static
class|class
name|WriteMapper
extends|extends
name|IOStatMapper
argument_list|<
name|Long
argument_list|>
block|{
DECL|method|WriteMapper ()
specifier|public
name|WriteMapper
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferSize
condition|;
name|i
operator|++
control|)
name|buffer
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'0'
operator|+
name|i
operator|%
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doIO (Reporter reporter, String name, long totalSize )
specifier|public
name|Long
name|doIO
parameter_list|(
name|Reporter
name|reporter
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|totalSize
comment|// in bytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create file
name|OutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|getDataDir
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|compressionCodec
operator|!=
literal|null
condition|)
name|out
operator|=
name|compressionCodec
operator|.
name|createOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
block|{
comment|// write to the file
name|long
name|nrRemaining
decl_stmt|;
for|for
control|(
name|nrRemaining
operator|=
name|totalSize
init|;
name|nrRemaining
operator|>
literal|0
condition|;
name|nrRemaining
operator|-=
name|bufferSize
control|)
block|{
name|int
name|curSize
init|=
operator|(
name|bufferSize
operator|<
name|nrRemaining
operator|)
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|nrRemaining
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|curSize
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"writing "
operator|+
name|name
operator|+
literal|"@"
operator|+
operator|(
name|totalSize
operator|-
name|nrRemaining
operator|)
operator|+
literal|"/"
operator|+
name|totalSize
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|totalSize
argument_list|)
return|;
block|}
block|}
DECL|method|writeTest (FileSystem fs)
specifier|private
name|void
name|writeTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|writeDir
init|=
name|getWriteDir
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|getDataDir
argument_list|(
name|config
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|writeDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runIOTest
argument_list|(
name|WriteMapper
operator|.
name|class
argument_list|,
name|writeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|runIOTest ( Class<? extends Mapper<Text, LongWritable, Text, Text>> mapperClass, Path outputDir)
specifier|private
name|void
name|runIOTest
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|mapperClass
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|config
argument_list|,
name|TestDFSIO
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|getControlDir
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapperClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|AccumulatingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Append mapper class.    */
DECL|class|AppendMapper
specifier|public
specifier|static
class|class
name|AppendMapper
extends|extends
name|IOStatMapper
argument_list|<
name|Long
argument_list|>
block|{
DECL|method|AppendMapper ()
specifier|public
name|AppendMapper
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferSize
condition|;
name|i
operator|++
control|)
name|buffer
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'0'
operator|+
name|i
operator|%
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|method|doIO (Reporter reporter, String name, long totalSize )
specifier|public
name|Long
name|doIO
parameter_list|(
name|Reporter
name|reporter
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|totalSize
comment|// in bytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create file
name|OutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|getDataDir
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|compressionCodec
operator|!=
literal|null
condition|)
name|out
operator|=
name|compressionCodec
operator|.
name|createOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
block|{
comment|// write to the file
name|long
name|nrRemaining
decl_stmt|;
for|for
control|(
name|nrRemaining
operator|=
name|totalSize
init|;
name|nrRemaining
operator|>
literal|0
condition|;
name|nrRemaining
operator|-=
name|bufferSize
control|)
block|{
name|int
name|curSize
init|=
operator|(
name|bufferSize
operator|<
name|nrRemaining
operator|)
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|nrRemaining
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|curSize
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"writing "
operator|+
name|name
operator|+
literal|"@"
operator|+
operator|(
name|totalSize
operator|-
name|nrRemaining
operator|)
operator|+
literal|"/"
operator|+
name|totalSize
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|totalSize
argument_list|)
return|;
block|}
block|}
DECL|method|appendTest (FileSystem fs)
specifier|private
name|void
name|appendTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appendDir
init|=
name|getAppendDir
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|appendDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runIOTest
argument_list|(
name|AppendMapper
operator|.
name|class
argument_list|,
name|appendDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read mapper class.    */
DECL|class|ReadMapper
specifier|public
specifier|static
class|class
name|ReadMapper
extends|extends
name|IOStatMapper
argument_list|<
name|Long
argument_list|>
block|{
DECL|method|ReadMapper ()
specifier|public
name|ReadMapper
parameter_list|()
block|{      }
DECL|method|doIO (Reporter reporter, String name, long totalSize )
specifier|public
name|Long
name|doIO
parameter_list|(
name|Reporter
name|reporter
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|totalSize
comment|// in bytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// open file
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|getDataDir
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressionCodec
operator|!=
literal|null
condition|)
name|in
operator|=
name|compressionCodec
operator|.
name|createInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|long
name|actualSize
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|actualSize
operator|<
name|totalSize
condition|)
block|{
name|int
name|curSize
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|curSize
operator|<
literal|0
condition|)
break|break;
name|actualSize
operator|+=
name|curSize
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"reading "
operator|+
name|name
operator|+
literal|"@"
operator|+
name|actualSize
operator|+
literal|"/"
operator|+
name|totalSize
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|actualSize
argument_list|)
return|;
block|}
block|}
DECL|method|readTest (FileSystem fs)
specifier|private
name|void
name|readTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|readDir
init|=
name|getReadDir
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|readDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runIOTest
argument_list|(
name|ReadMapper
operator|.
name|class
argument_list|,
name|readDir
argument_list|)
expr_stmt|;
block|}
DECL|method|sequentialTest (FileSystem fs, int testType, long fileSize, int nrFiles )
specifier|private
name|void
name|sequentialTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|testType
parameter_list|,
name|long
name|fileSize
parameter_list|,
comment|// in bytes
name|int
name|nrFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|IOStatMapper
argument_list|<
name|Long
argument_list|>
name|ioer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_READ
condition|)
name|ioer
operator|=
operator|new
name|ReadMapper
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_WRITE
condition|)
name|ioer
operator|=
operator|new
name|WriteMapper
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_APPEND
condition|)
name|ioer
operator|=
operator|new
name|AppendMapper
argument_list|()
expr_stmt|;
else|else
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrFiles
condition|;
name|i
operator|++
control|)
name|ioer
operator|.
name|doIO
argument_list|(
name|Reporter
operator|.
name|NULL
argument_list|,
name|BASE_FILE_NAME
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestDFSIO
name|bench
init|=
operator|new
name|TestDFSIO
argument_list|()
decl_stmt|;
name|int
name|res
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|bench
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|-
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|==
operator|-
literal|1
condition|)
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Tool
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|testType
init|=
name|TEST_TYPE_READ
decl_stmt|;
name|int
name|bufferSize
init|=
name|DEFAULT_BUFFER_SIZE
decl_stmt|;
name|long
name|fileSize
init|=
literal|1
operator|*
name|MEGA
decl_stmt|;
name|int
name|nrFiles
init|=
literal|1
decl_stmt|;
name|String
name|resFileName
init|=
name|DEFAULT_RES_FILE_NAME
decl_stmt|;
name|String
name|compressionClass
init|=
literal|null
decl_stmt|;
name|boolean
name|isSequential
init|=
literal|false
decl_stmt|;
name|String
name|version
init|=
name|TestDFSIO
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".0.0.6"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Missing arguments."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-read"
argument_list|)
condition|)
block|{
name|testType
operator|=
name|TEST_TYPE_READ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-write"
argument_list|)
condition|)
block|{
name|testType
operator|=
name|TEST_TYPE_WRITE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-append"
argument_list|)
condition|)
block|{
name|testType
operator|=
name|TEST_TYPE_APPEND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-clean"
argument_list|)
condition|)
block|{
name|testType
operator|=
name|TEST_TYPE_CLEANUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-seq"
argument_list|)
condition|)
block|{
name|isSequential
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-compression"
argument_list|)
condition|)
block|{
name|compressionClass
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-nrFiles"
argument_list|)
condition|)
block|{
name|nrFiles
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-fileSize"
argument_list|)
condition|)
block|{
name|fileSize
operator|=
name|parseSize
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-bufferSize"
argument_list|)
condition|)
block|{
name|bufferSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-resFile"
argument_list|)
condition|)
block|{
name|resFileName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Illegal argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"nrFiles = "
operator|+
name|nrFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fileSize (MB) = "
operator|+
name|toMB
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"bufferSize = "
operator|+
name|bufferSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"baseDir = "
operator|+
name|getBaseDir
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|compressionClass
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|set
argument_list|(
literal|"test.io.compression.class"
argument_list|,
name|compressionClass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"compressionClass = "
operator|+
name|compressionClass
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setInt
argument_list|(
literal|"test.io.file.buffer.size"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSequential
condition|)
block|{
name|long
name|tStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sequentialTest
argument_list|(
name|fs
argument_list|,
name|testType
argument_list|,
name|fileSize
argument_list|,
name|nrFiles
argument_list|)
expr_stmt|;
name|long
name|execTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
decl_stmt|;
name|String
name|resultLine
init|=
literal|"Seq Test exec time sec: "
operator|+
operator|(
name|float
operator|)
name|execTime
operator|/
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|resultLine
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_CLEANUP
condition|)
block|{
name|cleanup
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|createControlFile
argument_list|(
name|fs
argument_list|,
name|fileSize
argument_list|,
name|nrFiles
argument_list|)
expr_stmt|;
name|long
name|tStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_WRITE
condition|)
name|writeTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_READ
condition|)
name|readTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_APPEND
condition|)
name|appendTest
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|long
name|execTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
decl_stmt|;
name|analyzeResult
argument_list|(
name|fs
argument_list|,
name|testType
argument_list|,
name|execTime
argument_list|,
name|resFileName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
comment|// Configurable
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
annotation|@
name|Override
comment|// Configurable
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Returns size in bytes.    *     * @param arg = {d}[B|KB|MB|GB|TB]    * @return    */
DECL|method|parseSize (String arg)
specifier|static
name|long
name|parseSize
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|arg
operator|.
name|split
argument_list|(
literal|"\\D"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// get digits
assert|assert
name|args
operator|.
name|length
operator|<=
literal|2
assert|;
name|long
name|fileSize
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|bytesMult
init|=
name|arg
operator|.
name|substring
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// get byte multiple
return|return
name|fileSize
operator|*
name|ByteMultiple
operator|.
name|parseString
argument_list|(
name|bytesMult
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|toMB (long bytes)
specifier|static
name|float
name|toMB
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|bytes
operator|)
operator|/
name|MEGA
return|;
block|}
DECL|method|analyzeResult ( FileSystem fs, int testType, long execTime, String resFileName )
specifier|private
name|void
name|analyzeResult
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|testType
parameter_list|,
name|long
name|execTime
parameter_list|,
name|String
name|resFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|reduceFile
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_WRITE
condition|)
name|reduceFile
operator|=
operator|new
name|Path
argument_list|(
name|getWriteDir
argument_list|(
name|config
argument_list|)
argument_list|,
literal|"part-00000"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|testType
operator|==
name|TEST_TYPE_APPEND
condition|)
name|reduceFile
operator|=
operator|new
name|Path
argument_list|(
name|getAppendDir
argument_list|(
name|config
argument_list|)
argument_list|,
literal|"part-00000"
argument_list|)
expr_stmt|;
else|else
comment|// if (testType == TEST_TYPE_READ)
name|reduceFile
operator|=
operator|new
name|Path
argument_list|(
name|getReadDir
argument_list|(
name|config
argument_list|)
argument_list|,
literal|"part-00000"
argument_list|)
expr_stmt|;
name|long
name|tasks
init|=
literal|0
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
literal|0
decl_stmt|;
name|float
name|rate
init|=
literal|0
decl_stmt|;
name|float
name|sqrate
init|=
literal|0
decl_stmt|;
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|lines
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|reduceFile
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|lines
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|" \t\n\r\f%"
argument_list|)
decl_stmt|;
name|String
name|attr
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|endsWith
argument_list|(
literal|":tasks"
argument_list|)
condition|)
name|tasks
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|attr
operator|.
name|endsWith
argument_list|(
literal|":size"
argument_list|)
condition|)
name|size
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|attr
operator|.
name|endsWith
argument_list|(
literal|":time"
argument_list|)
condition|)
name|time
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|attr
operator|.
name|endsWith
argument_list|(
literal|":rate"
argument_list|)
condition|)
name|rate
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|attr
operator|.
name|endsWith
argument_list|(
literal|":sqrate"
argument_list|)
condition|)
name|sqrate
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|lines
operator|!=
literal|null
condition|)
name|lines
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|double
name|med
init|=
name|rate
operator|/
literal|1000
operator|/
name|tasks
decl_stmt|;
name|double
name|stdDev
init|=
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|sqrate
operator|/
literal|1000
operator|/
name|tasks
operator|-
name|med
operator|*
name|med
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|resultLines
index|[]
init|=
block|{
literal|"----- TestDFSIO ----- : "
operator|+
operator|(
operator|(
name|testType
operator|==
name|TEST_TYPE_WRITE
operator|)
operator|?
literal|"write"
operator|:
operator|(
name|testType
operator|==
name|TEST_TYPE_READ
operator|)
operator|?
literal|"read"
operator|:
operator|(
name|testType
operator|==
name|TEST_TYPE_APPEND
operator|)
operator|?
literal|"append"
operator|:
literal|"unknown"
operator|)
block|,
literal|"           Date& time: "
operator|+
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
block|,
literal|"       Number of files: "
operator|+
name|tasks
block|,
literal|"Total MBytes processed: "
operator|+
name|toMB
argument_list|(
name|size
argument_list|)
block|,
literal|"     Throughput mb/sec: "
operator|+
name|size
operator|*
literal|1000.0
operator|/
operator|(
name|time
operator|*
name|MEGA
operator|)
block|,
literal|"Average IO rate mb/sec: "
operator|+
name|med
block|,
literal|" IO rate std deviation: "
operator|+
name|stdDev
block|,
literal|"    Test exec time sec: "
operator|+
operator|(
name|float
operator|)
name|execTime
operator|/
literal|1000
block|,
literal|""
block|}
decl_stmt|;
name|PrintStream
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|res
operator|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|resFileName
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|resultLines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|res
operator|.
name|println
argument_list|(
name|resultLines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanup (FileSystem fs)
specifier|private
name|void
name|cleanup
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up test files"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|getBaseDir
argument_list|(
name|config
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

