begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|HashPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A set of utilities to validate the<b>sort</b> of the map-reduce framework.  * This utility program has 2 main parts:  * 1. Checking the records' statistics  *   a) Validates the no. of bytes and records in sort's input& output.   *   b) Validates the xor of the md5's of each key/value pair.  *   c) Ensures same key/value is present in both input and output.  * 2. Check individual records  to ensure each record is present in both  *    the input and the output of the sort (expensive on large data-sets).   *      * To run: bin/hadoop jar build/hadoop-examples.jar sortvalidate  *            [-m<i>maps</i>] [-r<i>reduces</i>] [-deep]   *            -sortInput<i>sort-in-dir</i> -sortOutput<i>sort-out-dir</i>   */
end_comment

begin_class
DECL|class|SortValidator
specifier|public
class|class
name|SortValidator
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|sortInput
specifier|static
specifier|private
specifier|final
name|IntWritable
name|sortInput
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|sortOutput
specifier|static
specifier|private
specifier|final
name|IntWritable
name|sortOutput
init|=
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|SORT_REDUCES
specifier|static
specifier|public
name|String
name|SORT_REDUCES
init|=
literal|"mapreduce.sortvalidator.sort.reduce.tasks"
decl_stmt|;
DECL|field|MAPS_PER_HOST
specifier|static
specifier|public
name|String
name|MAPS_PER_HOST
init|=
literal|"mapreduce.sortvalidator.mapsperhost"
decl_stmt|;
DECL|field|REDUCES_PER_HOST
specifier|static
specifier|public
name|String
name|REDUCES_PER_HOST
init|=
literal|"mapreduce.sortvalidator.reducesperhost"
decl_stmt|;
DECL|method|printUsage ()
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"sortvalidate [-m<maps>] [-r<reduces>] [-deep] "
operator|+
literal|"-sortInput<sort-input-dir> -sortOutput<sort-output-dir>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|deduceInputFile (JobConf job)
specifier|static
specifier|private
name|IntWritable
name|deduceInputFile
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|Path
index|[]
name|inputPaths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|MAP_INPUT_FILE
argument_list|)
argument_list|)
decl_stmt|;
comment|// value == one for sort-input; value == two for sort-output
return|return
operator|(
name|inputFile
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|inputPaths
index|[
literal|0
index|]
argument_list|)
operator|)
condition|?
name|sortInput
else|:
name|sortOutput
return|;
block|}
DECL|method|pair (BytesWritable a, BytesWritable b)
specifier|static
specifier|private
name|byte
index|[]
name|pair
parameter_list|(
name|BytesWritable
name|a
parameter_list|,
name|BytesWritable
name|b
parameter_list|)
block|{
name|byte
index|[]
name|pairData
init|=
operator|new
name|byte
index|[
name|a
operator|.
name|getLength
argument_list|()
operator|+
name|b
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|a
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|pairData
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|pairData
argument_list|,
name|a
operator|.
name|getLength
argument_list|()
argument_list|,
name|b
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pairData
return|;
block|}
DECL|field|sortPathsFilter
specifier|private
specifier|static
specifier|final
name|PathFilter
name|sortPathsFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"part-"
argument_list|)
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * A simple map-reduce job which checks consistency of the    * MapReduce framework's sort by checking:    * a) Records are sorted correctly    * b) Keys are partitioned correctly    * c) The input and output have same no. of bytes and records.    * d) The input and output have the correct 'checksum' by xor'ing     *    the md5 of each record.    *        */
DECL|class|RecordStatsChecker
specifier|public
specifier|static
class|class
name|RecordStatsChecker
block|{
comment|/**      * Generic way to get<b>raw</b> data from a {@link Writable}.      */
DECL|class|Raw
specifier|static
class|class
name|Raw
block|{
comment|/**        * Get raw data bytes from a {@link Writable}        * @param writable {@link Writable} object from whom to get the raw data        * @return raw data of the writable        */
DECL|method|getRawBytes (Writable writable)
specifier|public
name|byte
index|[]
name|getRawBytes
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
return|return
name|writable
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**        * Get number of raw data bytes of the {@link Writable}        * @param writable {@link Writable} object from whom to get the raw data        *                 length        * @return number of raw data bytes        */
DECL|method|getRawBytesLength (Writable writable)
specifier|public
name|int
name|getRawBytesLength
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
return|return
name|writable
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
operator|.
name|length
return|;
block|}
block|}
comment|/**      * Specialization of {@link Raw} for {@link BytesWritable}.      */
DECL|class|RawBytesWritable
specifier|static
class|class
name|RawBytesWritable
extends|extends
name|Raw
block|{
DECL|method|getRawBytes (Writable bw)
specifier|public
name|byte
index|[]
name|getRawBytes
parameter_list|(
name|Writable
name|bw
parameter_list|)
block|{
return|return
operator|(
operator|(
name|BytesWritable
operator|)
name|bw
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|method|getRawBytesLength (Writable bw)
specifier|public
name|int
name|getRawBytesLength
parameter_list|(
name|Writable
name|bw
parameter_list|)
block|{
return|return
operator|(
operator|(
name|BytesWritable
operator|)
name|bw
operator|)
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
comment|/**      * Specialization of {@link Raw} for {@link Text}.      */
DECL|class|RawText
specifier|static
class|class
name|RawText
extends|extends
name|Raw
block|{
DECL|method|getRawBytes (Writable text)
specifier|public
name|byte
index|[]
name|getRawBytes
parameter_list|(
name|Writable
name|text
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|text
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|method|getRawBytesLength (Writable text)
specifier|public
name|int
name|getRawBytesLength
parameter_list|(
name|Writable
name|text
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|text
operator|)
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
DECL|method|createRaw (Class rawClass)
specifier|private
specifier|static
name|Raw
name|createRaw
parameter_list|(
name|Class
name|rawClass
parameter_list|)
block|{
if|if
condition|(
name|rawClass
operator|==
name|Text
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|RawText
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawClass
operator|==
name|BytesWritable
operator|.
name|class
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Returning "
operator|+
name|RawBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|new
name|RawBytesWritable
argument_list|()
return|;
block|}
return|return
operator|new
name|Raw
argument_list|()
return|;
block|}
DECL|class|RecordStatsWritable
specifier|public
specifier|static
class|class
name|RecordStatsWritable
implements|implements
name|Writable
block|{
DECL|field|bytes
specifier|private
name|long
name|bytes
init|=
literal|0
decl_stmt|;
DECL|field|records
specifier|private
name|long
name|records
init|=
literal|0
decl_stmt|;
DECL|field|checksum
specifier|private
name|int
name|checksum
init|=
literal|0
decl_stmt|;
DECL|method|RecordStatsWritable ()
specifier|public
name|RecordStatsWritable
parameter_list|()
block|{}
DECL|method|RecordStatsWritable (long bytes, long records, int checksum)
specifier|public
name|RecordStatsWritable
parameter_list|(
name|long
name|bytes
parameter_list|,
name|long
name|records
parameter_list|,
name|int
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|records
operator|=
name|records
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|bytes
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|records
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|getBytes ()
specifier|public
name|long
name|getBytes
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
DECL|method|getRecords ()
specifier|public
name|long
name|getRecords
parameter_list|()
block|{
return|return
name|records
return|;
block|}
DECL|method|getChecksum ()
specifier|public
name|int
name|getChecksum
parameter_list|()
block|{
return|return
name|checksum
return|;
block|}
block|}
DECL|class|Map
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|RecordStatsWritable
argument_list|>
block|{
DECL|field|key
specifier|private
name|IntWritable
name|key
init|=
literal|null
decl_stmt|;
DECL|field|prevKey
specifier|private
name|WritableComparable
name|prevKey
init|=
literal|null
decl_stmt|;
DECL|field|keyClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyClass
decl_stmt|;
DECL|field|partitioner
specifier|private
name|Partitioner
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|partitioner
init|=
literal|null
decl_stmt|;
DECL|field|partition
specifier|private
name|int
name|partition
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|noSortReducers
specifier|private
name|int
name|noSortReducers
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|recordId
specifier|private
name|long
name|recordId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|rawKey
specifier|private
name|Raw
name|rawKey
decl_stmt|;
DECL|field|rawValue
specifier|private
name|Raw
name|rawValue
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
comment|// 'key' == sortInput for sort-input; key == sortOutput for sort-output
name|key
operator|=
name|deduceInputFile
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
name|sortOutput
condition|)
block|{
name|partitioner
operator|=
operator|new
name|HashPartitioner
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|()
expr_stmt|;
comment|// Figure the 'current' partition and no. of reduces of the 'sort'
try|try
block|{
name|URI
name|inputURI
init|=
operator|new
name|URI
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|MAP_INPUT_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|inputFile
init|=
name|inputURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// part file is of the form part-r-xxxxx
name|partition
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|inputFile
operator|.
name|substring
argument_list|(
name|inputFile
operator|.
name|lastIndexOf
argument_list|(
literal|"part"
argument_list|)
operator|+
literal|7
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|noSortReducers
operator|=
name|job
operator|.
name|getInt
argument_list|(
name|SORT_REDUCES
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|map (WritableComparable key, Writable value, OutputCollector<IntWritable, RecordStatsWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|RecordStatsWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set up rawKey and rawValue on the first call to 'map'
if|if
condition|(
name|recordId
operator|==
operator|-
literal|1
condition|)
block|{
name|rawKey
operator|=
name|createRaw
argument_list|(
name|key
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|rawValue
operator|=
name|createRaw
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|recordId
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|==
name|sortOutput
condition|)
block|{
comment|// Check if keys are 'sorted' if this
comment|// record is from sort's output
if|if
condition|(
name|prevKey
operator|==
literal|null
condition|)
block|{
name|prevKey
operator|=
name|key
expr_stmt|;
name|keyClass
operator|=
name|prevKey
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Sanity check
if|if
condition|(
name|keyClass
operator|!=
name|key
operator|.
name|getClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Type mismatch in key: expected "
operator|+
name|keyClass
operator|.
name|getName
argument_list|()
operator|+
literal|", received "
operator|+
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Check if they were sorted correctly
if|if
condition|(
name|prevKey
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The 'map-reduce' framework wrongly"
operator|+
literal|" classifed ("
operator|+
name|prevKey
operator|+
literal|")> ("
operator|+
name|key
operator|+
literal|") "
operator|+
literal|"for record# "
operator|+
name|recordId
argument_list|)
throw|;
block|}
name|prevKey
operator|=
name|key
expr_stmt|;
block|}
comment|// Check if the sorted output is 'partitioned' right
name|int
name|keyPartition
init|=
name|partitioner
operator|.
name|getPartition
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|noSortReducers
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|!=
name|keyPartition
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Partitions do not match for record# "
operator|+
name|recordId
operator|+
literal|" ! - '"
operator|+
name|partition
operator|+
literal|"' v/s '"
operator|+
name|keyPartition
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|// Construct the record-stats and output (this.key, record-stats)
name|byte
index|[]
name|keyBytes
init|=
name|rawKey
operator|.
name|getRawBytes
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|keyBytesLen
init|=
name|rawKey
operator|.
name|getRawBytesLength
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueBytes
init|=
name|rawValue
operator|.
name|getRawBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|valueBytesLen
init|=
name|rawValue
operator|.
name|getRawBytesLength
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|keyValueChecksum
init|=
operator|(
name|WritableComparator
operator|.
name|hashBytes
argument_list|(
name|keyBytes
argument_list|,
name|keyBytesLen
argument_list|)
operator|^
name|WritableComparator
operator|.
name|hashBytes
argument_list|(
name|valueBytes
argument_list|,
name|valueBytesLen
argument_list|)
operator|)
decl_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|this
operator|.
name|key
argument_list|,
operator|new
name|RecordStatsWritable
argument_list|(
operator|(
name|keyBytesLen
operator|+
name|valueBytesLen
operator|)
argument_list|,
literal|1
argument_list|,
name|keyValueChecksum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Reduce
specifier|public
specifier|static
class|class
name|Reduce
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|RecordStatsWritable
argument_list|,
name|IntWritable
argument_list|,
name|RecordStatsWritable
argument_list|>
block|{
DECL|method|reduce (IntWritable key, Iterator<RecordStatsWritable> values, OutputCollector<IntWritable, RecordStatsWritable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|RecordStatsWritable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|RecordStatsWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytes
init|=
literal|0
decl_stmt|;
name|long
name|records
init|=
literal|0
decl_stmt|;
name|int
name|xor
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RecordStatsWritable
name|stats
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|bytes
operator|+=
name|stats
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|records
operator|+=
name|stats
operator|.
name|getRecords
argument_list|()
expr_stmt|;
name|xor
operator|^=
name|stats
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|RecordStatsWritable
argument_list|(
name|bytes
argument_list|,
name|records
argument_list|,
name|xor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NonSplitableSequenceFileInputFormat
specifier|public
specifier|static
class|class
name|NonSplitableSequenceFileInputFormat
extends|extends
name|SequenceFileInputFormat
block|{
DECL|method|isSplitable (FileSystem fs, Path filename)
specifier|protected
name|boolean
name|isSplitable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filename
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|checkRecords (Configuration defaults, Path sortInput, Path sortOutput)
specifier|static
name|void
name|checkRecords
parameter_list|(
name|Configuration
name|defaults
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|inputfs
init|=
name|sortInput
operator|.
name|getFileSystem
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
name|FileSystem
name|outputfs
init|=
name|sortOutput
operator|.
name|getFileSystem
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
name|FileSystem
name|defaultfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaults
argument_list|,
name|RecordStatsChecker
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"sortvalidate-recordstats-checker"
argument_list|)
expr_stmt|;
name|int
name|noSortReduceTasks
init|=
name|outputfs
operator|.
name|listStatus
argument_list|(
name|sortOutput
argument_list|,
name|sortPathsFilter
argument_list|)
operator|.
name|length
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|SORT_REDUCES
argument_list|,
name|noSortReduceTasks
argument_list|)
expr_stmt|;
name|int
name|noSortInputpaths
init|=
name|inputfs
operator|.
name|listStatus
argument_list|(
name|sortInput
argument_list|)
operator|.
name|length
decl_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|NonSplitableSequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|RecordStatsChecker
operator|.
name|RecordStatsWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setCombinerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|noSortReduceTasks
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|sortInput
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|jobConf
argument_list|,
name|sortOutput
argument_list|)
expr_stmt|;
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"sortvalidate"
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultfs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|defaultfs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
comment|// Uncomment to run locally in a single process
comment|//job_conf.set(JTConfig.JT, "local");
name|Path
index|[]
name|inputPaths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nSortValidator.RecordStatsChecker: Validate sort "
operator|+
literal|"from "
operator|+
name|inputPaths
index|[
literal|0
index|]
operator|+
literal|" ("
operator|+
name|noSortInputpaths
operator|+
literal|" files), "
operator|+
name|inputPaths
index|[
literal|1
index|]
operator|+
literal|" ("
operator|+
name|noSortReduceTasks
operator|+
literal|" files) into "
operator|+
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobConf
argument_list|)
operator|+
literal|" with 1 reducer."
argument_list|)
expr_stmt|;
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job started: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
try|try
block|{
name|Date
name|end_time
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job ended: "
operator|+
name|end_time
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The job took "
operator|+
operator|(
name|end_time
operator|.
name|getTime
argument_list|()
operator|-
name|startTime
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
comment|// Check to ensure that the statistics of the
comment|// framework's sort-input and sort-output match
name|SequenceFile
operator|.
name|Reader
name|stats
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|defaultfs
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
literal|"part-00000"
argument_list|)
argument_list|,
name|defaults
argument_list|)
decl_stmt|;
try|try
block|{
name|IntWritable
name|k1
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|IntWritable
name|k2
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|RecordStatsWritable
name|v1
init|=
operator|new
name|RecordStatsWritable
argument_list|()
decl_stmt|;
name|RecordStatsWritable
name|v2
init|=
operator|new
name|RecordStatsWritable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stats
operator|.
name|next
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read record #1 from reduce's output"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|stats
operator|.
name|next
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read record #2 from reduce's output"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|v1
operator|.
name|getBytes
argument_list|()
operator|!=
name|v2
operator|.
name|getBytes
argument_list|()
operator|)
operator|||
operator|(
name|v1
operator|.
name|getRecords
argument_list|()
operator|!=
name|v2
operator|.
name|getRecords
argument_list|()
operator|)
operator|||
name|v1
operator|.
name|getChecksum
argument_list|()
operator|!=
name|v2
operator|.
name|getChecksum
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"("
operator|+
name|v1
operator|.
name|getBytes
argument_list|()
operator|+
literal|", "
operator|+
name|v1
operator|.
name|getRecords
argument_list|()
operator|+
literal|", "
operator|+
name|v1
operator|.
name|getChecksum
argument_list|()
operator|+
literal|") v/s ("
operator|+
name|v2
operator|.
name|getBytes
argument_list|()
operator|+
literal|", "
operator|+
name|v2
operator|.
name|getRecords
argument_list|()
operator|+
literal|", "
operator|+
name|v2
operator|.
name|getChecksum
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|stats
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|defaultfs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A simple map-reduce task to check if the input and the output    * of the framework's sort is consistent by ensuring each record     * is present in both the input and the output.    *     */
DECL|class|RecordChecker
specifier|public
specifier|static
class|class
name|RecordChecker
block|{
DECL|class|Map
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|value
specifier|private
name|IntWritable
name|value
init|=
literal|null
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
comment|// value == one for sort-input; value == two for sort-output
name|value
operator|=
name|deduceInputFile
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|map (BytesWritable key, BytesWritable value, OutputCollector<BytesWritable, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|BytesWritable
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// newKey = (key, value)
name|BytesWritable
name|keyValue
init|=
operator|new
name|BytesWritable
argument_list|(
name|pair
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
decl_stmt|;
comment|// output (newKey, value)
name|output
operator|.
name|collect
argument_list|(
name|keyValue
argument_list|,
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Reduce
specifier|public
specifier|static
class|class
name|Reduce
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|BytesWritable
argument_list|,
name|IntWritable
argument_list|,
name|BytesWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|reduce (BytesWritable key, Iterator<IntWritable> values, OutputCollector<BytesWritable, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|BytesWritable
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ones
init|=
literal|0
decl_stmt|;
name|int
name|twos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntWritable
name|count
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|.
name|equals
argument_list|(
name|sortInput
argument_list|)
condition|)
block|{
operator|++
name|ones
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|count
operator|.
name|equals
argument_list|(
name|sortOutput
argument_list|)
condition|)
block|{
operator|++
name|twos
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid 'value' of "
operator|+
name|count
operator|.
name|get
argument_list|()
operator|+
literal|" for (key,value): "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Check to ensure there are equal no. of ones and twos
if|if
condition|(
name|ones
operator|!=
name|twos
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal ('one', 'two'): ("
operator|+
name|ones
operator|+
literal|", "
operator|+
name|twos
operator|+
literal|") for (key, value): "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkRecords (Configuration defaults, int noMaps, int noReduces, Path sortInput, Path sortOutput)
specifier|static
name|void
name|checkRecords
parameter_list|(
name|Configuration
name|defaults
parameter_list|,
name|int
name|noMaps
parameter_list|,
name|int
name|noReduces
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaults
argument_list|,
name|RecordChecker
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"sortvalidate-record-checker"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|ClusterStatus
name|cluster
init|=
name|client
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|noMaps
operator|==
operator|-
literal|1
condition|)
block|{
name|noMaps
operator|=
name|cluster
operator|.
name|getTaskTrackers
argument_list|()
operator|*
name|jobConf
operator|.
name|getInt
argument_list|(
name|MAPS_PER_HOST
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noReduces
operator|==
operator|-
literal|1
condition|)
block|{
name|noReduces
operator|=
call|(
name|int
call|)
argument_list|(
name|cluster
operator|.
name|getMaxReduceTasks
argument_list|()
operator|*
literal|0.9
argument_list|)
expr_stmt|;
name|String
name|sortReduces
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|REDUCES_PER_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortReduces
operator|!=
literal|null
condition|)
block|{
name|noReduces
operator|=
name|cluster
operator|.
name|getTaskTrackers
argument_list|()
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortReduces
argument_list|)
expr_stmt|;
block|}
block|}
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|noMaps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|noReduces
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|sortInput
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|jobConf
argument_list|,
name|sortOutput
argument_list|)
expr_stmt|;
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/sortvalidate/recordchecker"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
comment|// Uncomment to run locally in a single process
comment|//job_conf.set(JTConfig.JT, "local");
name|Path
index|[]
name|inputPaths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nSortValidator.RecordChecker: Running on "
operator|+
name|cluster
operator|.
name|getTaskTrackers
argument_list|()
operator|+
literal|" nodes to validate sort from "
operator|+
name|inputPaths
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|inputPaths
index|[
literal|1
index|]
operator|+
literal|" into "
operator|+
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobConf
argument_list|)
operator|+
literal|" with "
operator|+
name|noReduces
operator|+
literal|" reduces."
argument_list|)
expr_stmt|;
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job started: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Date
name|end_time
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job ended: "
operator|+
name|end_time
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The job took "
operator|+
operator|(
name|end_time
operator|.
name|getTime
argument_list|()
operator|-
name|startTime
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The main driver for sort-validator program.    * Invoke this method to submit the map/reduce job.    * @throws IOException When there is communication problems with the     *                     job tracker.    */
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|defaults
init|=
name|getConf
argument_list|()
decl_stmt|;
name|int
name|noMaps
init|=
operator|-
literal|1
decl_stmt|,
name|noReduces
init|=
operator|-
literal|1
decl_stmt|;
name|Path
name|sortInput
init|=
literal|null
decl_stmt|,
name|sortOutput
init|=
literal|null
decl_stmt|;
name|boolean
name|deepTest
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
if|if
condition|(
literal|"-m"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|noMaps
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-r"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|noReduces
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-sortInput"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sortInput
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-sortOutput"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sortOutput
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-deep"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|deepTest
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|except
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Integer expected instead of "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|except
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Required parameter missing from "
operator|+
name|args
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|// Sanity check
if|if
condition|(
name|sortInput
operator|==
literal|null
operator|||
name|sortOutput
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|2
return|;
block|}
comment|// Check if the records are consistent and sorted correctly
name|RecordStatsChecker
operator|.
name|checkRecords
argument_list|(
name|defaults
argument_list|,
name|sortInput
argument_list|,
name|sortOutput
argument_list|)
expr_stmt|;
comment|// Check if the same records are present in sort's inputs& outputs
if|if
condition|(
name|deepTest
condition|)
block|{
name|RecordChecker
operator|.
name|checkRecords
argument_list|(
name|defaults
argument_list|,
name|noMaps
argument_list|,
name|noReduces
argument_list|,
name|sortInput
argument_list|,
name|sortOutput
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nSUCCESS! Validated the MapReduce framework's 'sort'"
operator|+
literal|" successfully."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|SortValidator
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

