begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|ArgumentParser
operator|.
name|ParsedOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|DataVerifier
operator|.
name|VerifyOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|DataWriter
operator|.
name|GenerateOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Junit 4 test for slive  */
end_comment

begin_class
DECL|class|TestSlive
specifier|public
class|class
name|TestSlive
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSlive
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rnd
specifier|private
specifier|static
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
DECL|field|TEST_DATA_PROP
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_PROP
init|=
literal|"test.build.data"
decl_stmt|;
DECL|method|getBaseConfig ()
specifier|private
specifier|static
name|Configuration
name|getBaseConfig
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
return|return
name|conf
return|;
block|}
comment|/** gets the test write location according to the coding guidelines */
DECL|method|getWriteLoc ()
specifier|private
specifier|static
name|File
name|getWriteLoc
parameter_list|()
block|{
name|String
name|writeLoc
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_DATA_PROP
argument_list|,
literal|"build/test/data/"
argument_list|)
decl_stmt|;
name|File
name|writeDir
init|=
operator|new
name|File
argument_list|(
name|writeLoc
argument_list|,
literal|"slive"
argument_list|)
decl_stmt|;
name|writeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|writeDir
return|;
block|}
comment|/** gets where the MR job places its data + output + results */
DECL|method|getFlowLocation ()
specifier|private
specifier|static
name|File
name|getFlowLocation
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"flow"
argument_list|)
return|;
block|}
comment|/** gets the test directory which is created by the mkdir op */
DECL|method|getTestDir ()
specifier|private
specifier|static
name|File
name|getTestDir
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"slivedir"
argument_list|)
return|;
block|}
comment|/**    * gets the test file location    * which is used for reading, appending and created    */
DECL|method|getTestFile ()
specifier|private
specifier|static
name|File
name|getTestFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"slivefile"
argument_list|)
return|;
block|}
comment|/**    * gets the rename file which is used in combination    * with the test file to do a rename operation    */
DECL|method|getTestRenameFile ()
specifier|private
specifier|static
name|File
name|getTestRenameFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"slivefile1"
argument_list|)
return|;
block|}
comment|/** gets the MR result file name */
DECL|method|getResultFile ()
specifier|private
specifier|static
name|File
name|getResultFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"sliveresfile"
argument_list|)
return|;
block|}
DECL|method|getImaginaryFile ()
specifier|private
specifier|static
name|File
name|getImaginaryFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getWriteLoc
argument_list|()
argument_list|,
literal|"slivenofile"
argument_list|)
return|;
block|}
comment|/** gets the test program arguments used for merging and main MR running */
DECL|method|getTestArgs (boolean sleep)
specifier|private
name|String
index|[]
name|getTestArgs
parameter_list|(
name|boolean
name|sleep
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// setup the options
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|WRITE_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"1M,2M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|OPS
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|OperationType
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
literal|""
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|MAPS
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|REDUCES
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|APPEND_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"1M,2M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|BLOCK_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"1M,2M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|REPLICATION_AM
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"1,1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleep
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|SLEEP_TIME
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"10,10"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|getResultFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|BASE_DIR
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|getFlowLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|DURATION
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|DIR_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|FILES
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ConfigOption
operator|.
name|TRUNCATE_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"0,1M"
argument_list|)
expr_stmt|;
block|}
return|return
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testFinder ()
specifier|public
name|void
name|testFinder
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|PathFinder
name|fr
init|=
operator|new
name|PathFinder
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
comment|// should only be able to select 10 files
comment|// attempt for a given amount of iterations
name|int
name|maxIterations
init|=
literal|10000
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxIterations
condition|;
name|i
operator|++
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|fr
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|files
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxIterations
condition|;
name|i
operator|++
control|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|fr
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|dirs
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelection ()
specifier|public
name|void
name|testSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|WeightSelector
name|selector
init|=
operator|new
name|WeightSelector
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
comment|// should be 1 of each type - uniform
name|int
name|expected
init|=
name|OperationType
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|Operation
name|op
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|extractor
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|op
operator|=
name|selector
operator|.
name|select
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// doesn't matter if they work or not
name|op
operator|.
name|run
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|op
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// gets the config merged with the arguments
DECL|method|getTestConfig (boolean sleep)
specifier|private
name|ConfigExtractor
name|getTestConfig
parameter_list|(
name|boolean
name|sleep
parameter_list|)
throws|throws
name|Exception
block|{
name|ArgumentParser
name|parser
init|=
operator|new
name|ArgumentParser
argument_list|(
name|getTestArgs
argument_list|(
name|sleep
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedOutput
name|out
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|out
operator|.
name|shouldOutputHelp
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigMerger
name|merge
init|=
operator|new
name|ConfigMerger
argument_list|()
decl_stmt|;
name|Configuration
name|cfg
init|=
name|merge
operator|.
name|getMerged
argument_list|(
name|out
argument_list|,
name|getBaseConfig
argument_list|()
argument_list|)
decl_stmt|;
name|ConfigExtractor
name|extractor
init|=
operator|new
name|ConfigExtractor
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
return|return
name|extractor
return|;
block|}
annotation|@
name|Before
DECL|method|ensureDeleted ()
specifier|public
name|void
name|ensureDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|rDelete
argument_list|(
name|getTestFile
argument_list|()
argument_list|)
expr_stmt|;
name|rDelete
argument_list|(
name|getTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|rDelete
argument_list|(
name|getTestRenameFile
argument_list|()
argument_list|)
expr_stmt|;
name|rDelete
argument_list|(
name|getResultFile
argument_list|()
argument_list|)
expr_stmt|;
name|rDelete
argument_list|(
name|getFlowLocation
argument_list|()
argument_list|)
expr_stmt|;
name|rDelete
argument_list|(
name|getImaginaryFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** cleans up a file or directory recursively if need be */
DECL|method|rDelete (File place)
specifier|private
name|void
name|rDelete
parameter_list|(
name|File
name|place
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|place
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting file "
operator|+
name|place
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|place
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|place
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDir
argument_list|(
name|place
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** deletes a dir and its contents */
DECL|method|deleteDir (File dir)
specifier|private
name|void
name|deleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fns
index|[]
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// delete contents first
for|for
control|(
name|String
name|afn
range|:
name|fns
control|)
block|{
name|File
name|fn
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|afn
argument_list|)
decl_stmt|;
name|rDelete
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting directory "
operator|+
name|dir
argument_list|)
expr_stmt|;
comment|// now delete the dir
name|assertTrue
argument_list|(
name|dir
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArguments ()
specifier|public
name|void
name|testArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|extractor
operator|.
name|getOpCount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|OperationType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|extractor
operator|.
name|getMapAmount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|extractor
operator|.
name|getReducerAmount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|apRange
init|=
name|extractor
operator|.
name|getAppendSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|apRange
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|apRange
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|wRange
init|=
name|extractor
operator|.
name|getWriteSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|wRange
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|wRange
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|trRange
init|=
name|extractor
operator|.
name|getTruncateSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|trRange
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trRange
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|1
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|Long
argument_list|>
name|bRange
init|=
name|extractor
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bRange
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bRange
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|Constants
operator|.
name|MEGABYTES
operator|*
literal|2
argument_list|)
expr_stmt|;
name|String
name|resfile
init|=
name|extractor
operator|.
name|getResultFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|resfile
argument_list|,
name|getResultFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|durationMs
init|=
name|extractor
operator|.
name|getDurationMilliseconds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|durationMs
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDataWriting ()
specifier|public
name|void
name|testDataWriting
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|byteAm
init|=
literal|100
decl_stmt|;
name|File
name|fn
init|=
name|getTestFile
argument_list|()
decl_stmt|;
name|DataWriter
name|writer
init|=
operator|new
name|DataWriter
argument_list|(
name|rnd
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fs
init|=
operator|new
name|FileOutputStream
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|GenerateOutput
name|ostat
init|=
name|writer
operator|.
name|writeSegment
argument_list|(
name|byteAm
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ostat
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ostat
operator|.
name|getBytesWritten
argument_list|()
operator|==
name|byteAm
argument_list|)
expr_stmt|;
name|DataVerifier
name|vf
init|=
operator|new
name|DataVerifier
argument_list|()
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|VerifyOutput
name|vfout
init|=
name|vf
operator|.
name|verifyFile
argument_list|(
name|byteAm
argument_list|,
operator|new
name|DataInputStream
argument_list|(
name|fin
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|vfout
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|vfout
operator|.
name|getBytesRead
argument_list|()
argument_list|,
name|byteAm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vfout
operator|.
name|getChunksDifferent
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRange ()
specifier|public
name|void
name|testRange
parameter_list|()
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|r
init|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|10L
argument_list|,
literal|20L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateOp ()
specifier|public
name|void
name|testCreateOp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a valid config
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpFailures ()
specifier|public
name|void
name|testOpFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getImaginaryFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOp
name|rop
init|=
operator|new
name|ReadOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getReadFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationBad
argument_list|(
name|extractor
argument_list|,
name|rop
argument_list|)
expr_stmt|;
name|DeleteOp
name|dop
init|=
operator|new
name|DeleteOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getDeleteFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationBad
argument_list|(
name|extractor
argument_list|,
name|dop
argument_list|)
expr_stmt|;
name|RenameOp
name|reop
init|=
operator|new
name|RenameOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|SrcTarget
name|getRenames
parameter_list|()
block|{
return|return
operator|new
name|SrcTarget
argument_list|(
name|fn
argument_list|,
name|fn
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|runOperationBad
argument_list|(
name|extractor
argument_list|,
name|reop
argument_list|)
expr_stmt|;
name|AppendOp
name|aop
init|=
operator|new
name|AppendOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getAppendFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationBad
argument_list|(
name|extractor
argument_list|,
name|aop
argument_list|)
expr_stmt|;
block|}
DECL|method|runOperationBad (ConfigExtractor cfg, Operation op)
specifier|private
name|void
name|runOperationBad
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Operation
name|op
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cfg
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|data
init|=
name|op
operator|.
name|run
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundFail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OperationOutput
name|d
range|:
name|data
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|FAILURES
argument_list|)
condition|)
block|{
name|foundFail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|NOT_FOUND
argument_list|)
condition|)
block|{
name|foundFail
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundFail
argument_list|)
expr_stmt|;
block|}
DECL|method|runOperationOk (ConfigExtractor cfg, Operation op, boolean checkOk)
specifier|private
name|void
name|runOperationOk
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Operation
name|op
parameter_list|,
name|boolean
name|checkOk
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cfg
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|data
init|=
name|op
operator|.
name|run
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkOk
condition|)
block|{
name|boolean
name|foundSuc
init|=
literal|false
decl_stmt|;
name|boolean
name|foundOpCount
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTime
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OperationOutput
name|d
range|:
name|data
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|FAILURES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|SUCCESSES
argument_list|)
condition|)
block|{
name|foundSuc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|OP_COUNT
argument_list|)
condition|)
block|{
name|foundOpCount
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|ReportWriter
operator|.
name|OK_TIME_TAKEN
argument_list|)
condition|)
block|{
name|foundTime
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundSuc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundOpCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure file created before delete
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now delete
name|DeleteOp
name|dop
init|=
operator|new
name|DeleteOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getDeleteFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|dop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tgt
init|=
operator|new
name|Path
argument_list|(
name|getTestRenameFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure file created before rename
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|src
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RenameOp
name|rop
init|=
operator|new
name|RenameOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|SrcTarget
name|getRenames
parameter_list|()
block|{
return|return
operator|new
name|SrcTarget
argument_list|(
name|src
argument_list|,
name|tgt
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|rop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRFlow ()
specifier|public
name|void
name|testMRFlow
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SliveTest
name|s
init|=
operator|new
name|SliveTest
argument_list|(
name|getBaseConfig
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ec
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|s
argument_list|,
name|getTestArgs
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ec
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|resFile
init|=
name|extractor
operator|.
name|getResultFile
argument_list|()
decl_stmt|;
name|File
name|fn
init|=
operator|new
name|File
argument_list|(
name|resFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fn
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't validate completely since operations may fail (mainly anyone but
comment|// create +mkdir) since they may not find there files
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure file created before read
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ReadOp
name|rop
init|=
operator|new
name|ReadOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getReadFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|rop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSleep ()
specifier|public
name|void
name|testSleep
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SleepOp
name|op
init|=
operator|new
name|SleepOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure dir made
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|MkdirOp
name|op
init|=
operator|new
name|MkdirOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// list it
name|ListOp
name|lop
init|=
operator|new
name|ListOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|lop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadChunks ()
specifier|public
name|void
name|testBadChunks
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|fn
init|=
name|getTestFile
argument_list|()
decl_stmt|;
name|int
name|byteAm
init|=
literal|10000
decl_stmt|;
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|byteAm
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// attempt to read it
name|DataVerifier
name|vf
init|=
operator|new
name|DataVerifier
argument_list|()
decl_stmt|;
name|VerifyOutput
name|vout
init|=
operator|new
name|VerifyOutput
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|vout
operator|=
name|vf
operator|.
name|verifyFile
argument_list|(
name|byteAm
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{      }
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|vout
operator|.
name|getChunksSame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdir ()
specifier|public
name|void
name|testMkdir
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|MkdirOp
name|op
init|=
operator|new
name|MkdirOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelector ()
specifier|public
name|void
name|testSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|RouletteSelector
name|selector
init|=
operator|new
name|RouletteSelector
argument_list|(
name|rnd
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperationWeight
argument_list|>
name|sList
init|=
operator|new
name|LinkedList
argument_list|<
name|OperationWeight
argument_list|>
argument_list|()
decl_stmt|;
name|Operation
name|op
init|=
name|selector
operator|.
name|select
argument_list|(
name|sList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|op
operator|==
literal|null
argument_list|)
expr_stmt|;
name|CreateOp
name|cop
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
name|sList
operator|.
name|add
argument_list|(
operator|new
name|OperationWeight
argument_list|(
name|cop
argument_list|,
literal|1.0d
argument_list|)
argument_list|)
expr_stmt|;
name|AppendOp
name|aop
init|=
operator|new
name|AppendOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
name|sList
operator|.
name|add
argument_list|(
operator|new
name|OperationWeight
argument_list|(
name|aop
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|=
name|selector
operator|.
name|select
argument_list|(
name|sList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|op
operator|==
name|cop
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendOp ()
specifier|public
name|void
name|testAppendOp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a valid config
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// ensure file created before append
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// local file system (ChecksumFileSystem) currently doesn't support append -
comment|// but we'll leave this test here anyways but can't check the results..
name|AppendOp
name|aop
init|=
operator|new
name|AppendOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getAppendFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|aop
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncateOp ()
specifier|public
name|void
name|testTruncateOp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a valid config
name|ConfigExtractor
name|extractor
init|=
name|getTestConfig
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// ensure file created before append
specifier|final
name|Path
name|fn
init|=
operator|new
name|Path
argument_list|(
name|getTestFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|CreateOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getCreateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// local file system (ChecksumFileSystem) currently doesn't support truncate -
comment|// but we'll leave this test here anyways but can't check the results..
name|TruncateOp
name|top
init|=
operator|new
name|TruncateOp
argument_list|(
name|extractor
argument_list|,
name|rnd
argument_list|)
block|{
specifier|protected
name|Path
name|getTruncateFile
parameter_list|()
block|{
return|return
name|fn
return|;
block|}
block|}
decl_stmt|;
name|runOperationOk
argument_list|(
name|extractor
argument_list|,
name|top
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

