begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_class
DECL|class|CommonStub
specifier|public
class|class
name|CommonStub
block|{
DECL|field|socket
specifier|protected
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
DECL|field|dataInput
specifier|protected
name|DataInputStream
name|dataInput
decl_stmt|;
DECL|field|dataOut
specifier|protected
name|DataOutputStream
name|dataOut
decl_stmt|;
DECL|method|createDigest (byte[] password, String data)
specifier|protected
name|String
name|createDigest
parameter_list|(
name|byte
index|[]
name|password
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|SecretKey
name|key
init|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
name|password
argument_list|)
decl_stmt|;
return|return
name|SecureShuffleUtils
operator|.
name|hashFromString
argument_list|(
name|data
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|readObject (Writable obj, DataInputStream inStream)
specifier|protected
name|void
name|readObject
parameter_list|(
name|Writable
name|obj
parameter_list|,
name|DataInputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numBytes
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
decl_stmt|;
comment|// For BytesWritable and Text, use the specified length to set the length
comment|// this causes the "obvious" translations to work. So that if you emit
comment|// a string "abc" from C++, it shows up as "abc".
if|if
condition|(
name|obj
operator|instanceof
name|BytesWritable
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|numBytes
index|]
expr_stmt|;
name|inStream
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesWritable
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Text
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|numBytes
index|]
expr_stmt|;
name|inStream
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|set
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|.
name|readFields
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeObject (Writable obj, DataOutputStream stream)
specifier|protected
name|void
name|writeObject
parameter_list|(
name|Writable
name|obj
parameter_list|,
name|DataOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For Text and BytesWritable, encode them directly, so that they end up
comment|// in C++ as the natural translations.
name|DataOutputBuffer
name|buffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|t
init|=
operator|(
name|Text
operator|)
name|obj
decl_stmt|;
name|int
name|len
init|=
name|t
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|stream
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|t
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BytesWritable
condition|)
block|{
name|BytesWritable
name|b
init|=
operator|(
name|BytesWritable
operator|)
name|obj
decl_stmt|;
name|int
name|len
init|=
name|b
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|stream
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|obj
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|stream
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|initSoket ()
specifier|protected
name|void
name|initSoket
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"mapreduce.pipes.command.port"
argument_list|)
argument_list|)
decl_stmt|;
name|java
operator|.
name|net
operator|.
name|InetAddress
name|address
init|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|socket
operator|=
operator|new
name|Socket
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
comment|// try to read
name|dataInput
operator|=
operator|new
name|DataInputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|Text
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
decl_stmt|;
name|Text
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOut
argument_list|,
literal|57
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|createDigest
argument_list|(
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|dataOut
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// start
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|int
name|cuttentAnswer
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CURRENT_PROTOCOL_VERSION:"
operator|+
name|cuttentAnswer
argument_list|)
expr_stmt|;
comment|// get configuration
comment|// should be MessageType.SET_JOB_CONF.code
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
comment|// array length
name|int
name|j
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|Text
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Text
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeSoket ()
specifier|protected
name|void
name|closeSoket
parameter_list|()
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

