begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * An operation output has the following object format whereby simple types are  * represented as a key of dataType:operationType*measurementType and these  * simple types can be combined (mainly in the reducer) using there given types  * into a single operation output.  *   * Combination is done based on the data types and the following convention is  * followed (in the following order). If one is a string then the other will be  * concated as a string with a ";" separator. If one is a double then the other  * will be added as a double and the output will be a double. If one is a float  * then the other will be added as a float and the the output will be a float.  * Following this if one is a long the other will be added as a long and the  * output type will be a long and if one is a integer the other will be added as  * a integer and the output type will be an integer.  */
end_comment

begin_class
DECL|class|OperationOutput
class|class
name|OperationOutput
block|{
DECL|field|dataType
specifier|private
name|OutputType
name|dataType
decl_stmt|;
DECL|field|opType
DECL|field|measurementType
specifier|private
name|String
name|opType
decl_stmt|,
name|measurementType
decl_stmt|;
DECL|field|value
specifier|private
name|Object
name|value
decl_stmt|;
DECL|field|TYPE_SEP
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_SEP
init|=
literal|":"
decl_stmt|;
DECL|field|MEASUREMENT_SEP
specifier|private
specifier|static
specifier|final
name|String
name|MEASUREMENT_SEP
init|=
literal|"*"
decl_stmt|;
DECL|field|STRING_SEP
specifier|private
specifier|static
specifier|final
name|String
name|STRING_SEP
init|=
literal|";"
decl_stmt|;
DECL|enum|OutputType
enum|enum
name|OutputType
block|{
DECL|enumConstant|STRING
DECL|enumConstant|FLOAT
DECL|enumConstant|LONG
DECL|enumConstant|DOUBLE
DECL|enumConstant|INTEGER
name|STRING
block|,
name|FLOAT
block|,
name|LONG
block|,
name|DOUBLE
block|,
name|INTEGER
block|}
comment|/**    * Parses a given key according to the expected key format and forms the given    * segments.    *     * @param key    *          the key in expected dataType:operationType*measurementType format    * @param value    *          a generic value expected to match the output type    * @throws IllegalArgumentException    *           if invalid format    */
DECL|method|OperationOutput (String key, Object value)
name|OperationOutput
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|int
name|place
init|=
name|key
operator|.
name|indexOf
argument_list|(
name|TYPE_SEP
argument_list|)
decl_stmt|;
if|if
condition|(
name|place
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid key format - no type separator - "
operator|+
name|TYPE_SEP
argument_list|)
throw|;
block|}
try|try
block|{
name|dataType
operator|=
name|OutputType
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|place
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid key format - invalid output type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|place
operator|+
literal|1
argument_list|)
expr_stmt|;
name|place
operator|=
name|key
operator|.
name|indexOf
argument_list|(
name|MEASUREMENT_SEP
argument_list|)
expr_stmt|;
if|if
condition|(
name|place
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid key format - no measurement separator - "
operator|+
name|MEASUREMENT_SEP
argument_list|)
throw|;
block|}
name|opType
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|place
argument_list|)
expr_stmt|;
name|measurementType
operator|=
name|key
operator|.
name|substring
argument_list|(
name|place
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|OperationOutput (Text key, Object value)
name|OperationOutput
parameter_list|(
name|Text
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getKeyString
argument_list|()
operator|+
literal|" ("
operator|+
name|this
operator|.
name|value
operator|+
literal|")"
return|;
block|}
DECL|method|OperationOutput (OutputType dataType, String opType, String measurementType, Object value)
name|OperationOutput
parameter_list|(
name|OutputType
name|dataType
parameter_list|,
name|String
name|opType
parameter_list|,
name|String
name|measurementType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
name|this
operator|.
name|measurementType
operator|=
name|measurementType
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Merges according to the documented rules for merging. Only will merge if    * measurement type and operation type is the same.    *     * @param o1    *          the first object to merge with the second    * @param o2    *          the second object.    *     * @return OperationOutput merged output.    *     * @throws IllegalArgumentException    *           if unable to merge due to incompatible formats/types    */
DECL|method|merge (OperationOutput o1, OperationOutput o2)
specifier|static
name|OperationOutput
name|merge
parameter_list|(
name|OperationOutput
name|o1
parameter_list|,
name|OperationOutput
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getMeasurementType
argument_list|()
operator|.
name|equals
argument_list|(
name|o2
operator|.
name|getMeasurementType
argument_list|()
argument_list|)
operator|&&
name|o1
operator|.
name|getOperationType
argument_list|()
operator|.
name|equals
argument_list|(
name|o2
operator|.
name|getOperationType
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|newvalue
init|=
literal|null
decl_stmt|;
name|OutputType
name|newtype
init|=
literal|null
decl_stmt|;
name|String
name|opType
init|=
name|o1
operator|.
name|getOperationType
argument_list|()
decl_stmt|;
name|String
name|mType
init|=
name|o1
operator|.
name|getMeasurementType
argument_list|()
decl_stmt|;
if|if
condition|(
name|o1
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|STRING
operator|||
name|o2
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|STRING
condition|)
block|{
name|newtype
operator|=
name|OutputType
operator|.
name|STRING
expr_stmt|;
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|STRING_SEP
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|newvalue
operator|=
name|str
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|DOUBLE
operator|||
name|o2
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|DOUBLE
condition|)
block|{
name|newtype
operator|=
name|OutputType
operator|.
name|DOUBLE
expr_stmt|;
try|try
block|{
name|newvalue
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|Double
operator|.
name|parseDouble
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to combine a type with a double "
operator|+
name|o1
operator|+
literal|"& "
operator|+
name|o2
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|FLOAT
operator|||
name|o2
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|FLOAT
condition|)
block|{
name|newtype
operator|=
name|OutputType
operator|.
name|FLOAT
expr_stmt|;
try|try
block|{
name|newvalue
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|Float
operator|.
name|parseFloat
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to combine a type with a float "
operator|+
name|o1
operator|+
literal|"& "
operator|+
name|o2
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|LONG
operator|||
name|o2
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|LONG
condition|)
block|{
name|newtype
operator|=
name|OutputType
operator|.
name|LONG
expr_stmt|;
try|try
block|{
name|newvalue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|Long
operator|.
name|parseLong
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to combine a type with a long "
operator|+
name|o1
operator|+
literal|"& "
operator|+
name|o2
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|INTEGER
operator|||
name|o2
operator|.
name|getOutputType
argument_list|()
operator|==
name|OutputType
operator|.
name|INTEGER
condition|)
block|{
name|newtype
operator|=
name|OutputType
operator|.
name|INTEGER
expr_stmt|;
try|try
block|{
name|newvalue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to combine a type with an int "
operator|+
name|o1
operator|+
literal|"& "
operator|+
name|o2
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|OperationOutput
argument_list|(
name|newtype
argument_list|,
name|opType
argument_list|,
name|mType
argument_list|,
name|newvalue
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to combine dissimilar types "
operator|+
name|o1
operator|+
literal|"& "
operator|+
name|o2
argument_list|)
throw|;
block|}
block|}
comment|/**    * Formats the key for output    *     * @return String    */
DECL|method|getKeyString ()
specifier|private
name|String
name|getKeyString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|getOutputType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|TYPE_SEP
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|MEASUREMENT_SEP
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|getMeasurementType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Retrieves the key in a hadoop text object    *     * @return Text text output    */
DECL|method|getKey ()
name|Text
name|getKey
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|getKeyString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the output value in text format    *     * @return Text    */
DECL|method|getOutputValue ()
name|Text
name|getOutputValue
parameter_list|()
block|{
name|StringBuilder
name|valueStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|valueStr
operator|.
name|append
argument_list|(
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|valueStr
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the object that represents this value (expected to match the output    * data type)    *     * @return Object    */
DECL|method|getValue ()
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * Gets the output data type of this class.    */
DECL|method|getOutputType ()
name|OutputType
name|getOutputType
parameter_list|()
block|{
return|return
name|dataType
return|;
block|}
comment|/**    * Gets the operation type this object represents.    *     * @return String    */
DECL|method|getOperationType ()
name|String
name|getOperationType
parameter_list|()
block|{
return|return
name|opType
return|;
block|}
comment|/**    * Gets the measurement type this object represents.    *     * @return String    */
DECL|method|getMeasurementType ()
name|String
name|getMeasurementType
parameter_list|()
block|{
return|return
name|measurementType
return|;
block|}
block|}
end_class

end_unit

