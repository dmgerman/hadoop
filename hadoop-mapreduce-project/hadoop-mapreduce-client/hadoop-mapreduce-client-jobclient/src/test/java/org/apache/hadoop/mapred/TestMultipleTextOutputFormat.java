begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|MultipleTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestMultipleTextOutputFormat
specifier|public
class|class
name|TestMultipleTextOutputFormat
block|{
DECL|field|defaultConf
specifier|private
specifier|static
name|JobConf
name|defaultConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// A random task attempt id for testing.
DECL|field|attempt
specifier|private
specifier|static
name|String
name|attempt
init|=
literal|"attempt_200707121733_0001_m_000000_0"
decl_stmt|;
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
name|FileOutputCommitter
operator|.
name|TEMP_DIR_NAME
argument_list|)
argument_list|,
literal|"_"
operator|+
name|attempt
argument_list|)
decl_stmt|;
DECL|method|writeData (RecordWriter<Text, Text> rw)
specifier|private
specifier|static
name|void
name|writeData
parameter_list|(
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|rw
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|String
name|k
init|=
literal|""
operator|+
name|i
decl_stmt|;
name|String
name|v
init|=
literal|""
operator|+
name|i
decl_stmt|;
name|rw
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|k
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KeyBasedMultipleTextOutputFormat
specifier|static
class|class
name|KeyBasedMultipleTextOutputFormat
extends|extends
name|MultipleTextOutputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|generateFileNameForKeyValue (Text key, Text v, String name)
specifier|protected
name|String
name|generateFileNameForKeyValue
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|v
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|key
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
literal|"-"
operator|+
name|name
return|;
block|}
block|}
DECL|method|test1 (JobConf job)
specifier|private
specifier|static
name|void
name|test1
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"part-00000"
decl_stmt|;
name|KeyBasedMultipleTextOutputFormat
name|theOutputFormat
init|=
operator|new
name|KeyBasedMultipleTextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|rw
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|rw
argument_list|)
expr_stmt|;
name|rw
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|test2 (JobConf job)
specifier|private
specifier|static
name|void
name|test2
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"part-00000"
decl_stmt|;
comment|//pretend that we have input file with 1/2/3 as the suffix
name|job
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_INPUT_FILE
argument_list|,
literal|"1/2/3"
argument_list|)
expr_stmt|;
comment|// we use the last two legs of the input file as the output file
name|job
operator|.
name|set
argument_list|(
literal|"mapred.outputformat.numOfTrailingLegs"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|MultipleTextOutputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|theOutputFormat
init|=
operator|new
name|MultipleTextOutputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|rw
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|rw
argument_list|)
expr_stmt|;
name|rw
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|workDir
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setWorkOutputPath
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|workDir
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create output directory"
argument_list|)
expr_stmt|;
block|}
comment|//System.out.printf("workdir: %s\n", workDir.toString());
name|TestMultipleTextOutputFormat
operator|.
name|test1
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TestMultipleTextOutputFormat
operator|.
name|test2
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|String
name|file_11
init|=
literal|"1-part-00000"
decl_stmt|;
name|File
name|expectedFile_11
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|file_11
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.printf("expectedFile_11: %s\n", new Path(workDir, file_11).toString());
name|StringBuffer
name|expectedOutput
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|expectedOutput
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|UtilsForTests
operator|.
name|slurp
argument_list|(
name|expectedFile_11
argument_list|)
decl_stmt|;
comment|//System.out.printf("File_2 output: %s\n", output);
name|assertThat
argument_list|(
name|output
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|file_12
init|=
literal|"2-part-00000"
decl_stmt|;
name|File
name|expectedFile_12
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|file_12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.printf("expectedFile_12: %s\n", new Path(workDir, file_12).toString());
name|expectedOutput
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|expectedOutput
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
name|UtilsForTests
operator|.
name|slurp
argument_list|(
name|expectedFile_12
argument_list|)
expr_stmt|;
comment|//System.out.printf("File_2 output: %s\n", output);
name|assertThat
argument_list|(
name|output
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|file_13
init|=
literal|"3-part-00000"
decl_stmt|;
name|File
name|expectedFile_13
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|file_13
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.printf("expectedFile_13: %s\n", new Path(workDir, file_13).toString());
name|expectedOutput
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|30
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|expectedOutput
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
name|UtilsForTests
operator|.
name|slurp
argument_list|(
name|expectedFile_13
argument_list|)
expr_stmt|;
comment|//System.out.printf("File_2 output: %s\n", output);
name|assertThat
argument_list|(
name|output
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|file_2
init|=
literal|"2/3"
decl_stmt|;
name|File
name|expectedFile_2
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|file_2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.printf("expectedFile_2: %s\n", new Path(workDir, file_2).toString());
name|expectedOutput
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|expectedOutput
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
name|UtilsForTests
operator|.
name|slurp
argument_list|(
name|expectedFile_2
argument_list|)
expr_stmt|;
comment|//System.out.printf("File_2 output: %s\n", output);
name|assertThat
argument_list|(
name|output
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

