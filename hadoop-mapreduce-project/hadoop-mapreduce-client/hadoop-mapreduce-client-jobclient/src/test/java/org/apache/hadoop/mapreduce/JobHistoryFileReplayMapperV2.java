begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobHistoryFileReplayHelper
operator|.
name|JobFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TimelineServicePerformance
operator|.
name|PerfCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|AppLevelTimelineCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorManager
import|;
end_import

begin_comment
comment|/**  * Mapper for TimelineServicePerformance that replays job history files to the  * timeline service v.2.  *  */
end_comment

begin_class
DECL|class|JobHistoryFileReplayMapperV2
class|class
name|JobHistoryFileReplayMapperV2
extends|extends
name|EntityWriterV2
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobHistoryFileReplayMapperV2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|writeEntities (Configuration tlConf, TimelineCollectorManager manager, Context context)
specifier|protected
name|void
name|writeEntities
parameter_list|(
name|Configuration
name|tlConf
parameter_list|,
name|TimelineCollectorManager
name|manager
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|JobHistoryFileReplayHelper
name|helper
init|=
operator|new
name|JobHistoryFileReplayHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|replayMode
init|=
name|helper
operator|.
name|getReplayMode
argument_list|()
decl_stmt|;
name|JobHistoryFileParser
name|parser
init|=
name|helper
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|TimelineEntityConverterV2
name|converter
init|=
operator|new
name|TimelineEntityConverterV2
argument_list|()
decl_stmt|;
comment|// collect the apps it needs to process
name|Collection
argument_list|<
name|JobFiles
argument_list|>
name|jobs
init|=
name|helper
operator|.
name|getJobFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" will process no jobs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" will process "
operator|+
name|jobs
operator|.
name|size
argument_list|()
operator|+
literal|" jobs"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JobFiles
name|job
range|:
name|jobs
control|)
block|{
comment|// process each job
name|String
name|jobIdStr
init|=
name|job
operator|.
name|getJobId
argument_list|()
decl_stmt|;
comment|// skip if either of the file is missing
if|if
condition|(
name|job
operator|.
name|getJobConfFilePath
argument_list|()
operator|==
literal|null
operator|||
name|job
operator|.
name|getJobHistoryFilePath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|jobIdStr
operator|+
literal|" missing either the job history file or the "
operator|+
literal|"configuration file. Skipping."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"processing "
operator|+
name|jobIdStr
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jobIdStr
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|jobId
operator|.
name|getAppId
argument_list|()
decl_stmt|;
comment|// create the app level timeline collector and start it
name|AppLevelTimelineCollector
name|collector
init|=
operator|new
name|AppLevelTimelineCollector
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|manager
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
try|try
block|{
comment|// parse the job info and configuration
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parseHistoryFile
argument_list|(
name|job
operator|.
name|getJobHistoryFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|jobConf
init|=
name|parser
operator|.
name|parseConfiguration
argument_list|(
name|job
operator|.
name|getJobConfFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"parsed the job history file and the configuration file for job"
operator|+
name|jobIdStr
argument_list|)
expr_stmt|;
comment|// set the context
comment|// flow id: job name, flow run id: timestamp, user id
name|TimelineCollectorContext
name|tlContext
init|=
name|collector
operator|.
name|getTimelineEntityContext
argument_list|()
decl_stmt|;
name|tlContext
operator|.
name|setFlowName
argument_list|(
name|jobInfo
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|tlContext
operator|.
name|setFlowRunId
argument_list|(
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|tlContext
operator|.
name|setUserId
argument_list|(
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
comment|// create entities from job history and write them
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitySet
init|=
name|converter
operator|.
name|createTimelineEntities
argument_list|(
name|jobInfo
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"converted them into timeline entities for job "
operator|+
name|jobIdStr
argument_list|)
expr_stmt|;
comment|// use the current user for this purpose
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|long
name|startWrite
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|replayMode
condition|)
block|{
case|case
name|JobHistoryFileReplayHelper
operator|.
name|WRITE_ALL_AT_ONCE
case|:
name|writeAllEntities
argument_list|(
name|collector
argument_list|,
name|entitySet
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
break|break;
case|case
name|JobHistoryFileReplayHelper
operator|.
name|WRITE_PER_ENTITY
case|:
name|writePerEntity
argument_list|(
name|collector
argument_list|,
name|entitySet
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_FAILURES
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"writing to the timeline service failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|endWrite
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|totalTime
operator|+=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|endWrite
operator|-
name|startWrite
argument_list|)
expr_stmt|;
name|int
name|numEntities
init|=
name|entitySet
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote "
operator|+
name|numEntities
operator|+
literal|" entities in "
operator|+
name|totalTime
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_TIME
argument_list|)
operator|.
name|increment
argument_list|(
name|totalTime
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_COUNTER
argument_list|)
operator|.
name|increment
argument_list|(
name|numEntities
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|manager
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
comment|// move it along
block|}
block|}
block|}
DECL|method|writeAllEntities (AppLevelTimelineCollector collector, List<TimelineEntity> entitySet, UserGroupInformation ugi)
specifier|private
name|void
name|writeAllEntities
parameter_list|(
name|AppLevelTimelineCollector
name|collector
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitySet
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineEntities
name|entities
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|entities
operator|.
name|setEntities
argument_list|(
name|entitySet
argument_list|)
expr_stmt|;
name|collector
operator|.
name|putEntities
argument_list|(
name|entities
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
DECL|method|writePerEntity (AppLevelTimelineCollector collector, List<TimelineEntity> entitySet, UserGroupInformation ugi)
specifier|private
name|void
name|writePerEntity
parameter_list|(
name|AppLevelTimelineCollector
name|collector
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitySet
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entitySet
control|)
block|{
name|TimelineEntities
name|entities
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|entities
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|collector
operator|.
name|putEntities
argument_list|(
name|entities
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote entity "
operator|+
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

