begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Tests for ClientServiceDelegate.java  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestClientServiceDelegate
specifier|public
class|class
name|TestClientServiceDelegate
block|{
DECL|field|oldJobId
specifier|private
name|JobID
name|oldJobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1315895242400_2"
argument_list|)
decl_stmt|;
DECL|field|jobId
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
DECL|field|isAMReachableFromClient
specifier|private
name|boolean
name|isAMReachableFromClient
decl_stmt|;
DECL|method|TestClientServiceDelegate (boolean isAMReachableFromClient)
specifier|public
name|TestClientServiceDelegate
parameter_list|(
name|boolean
name|isAMReachableFromClient
parameter_list|)
block|{
name|this
operator|.
name|isAMReachableFromClient
operator|=
name|isAMReachableFromClient
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|true
block|}
block|,
block|{
literal|false
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testUnknownAppInRM ()
specifier|public
name|void
name|testUnknownAppInRM
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|getRMDelegate
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteExceptionFromHistoryServer ()
specifier|public
name|void
name|testRemoteExceptionFromHistoryServer
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Job ID doesnot Exist"
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
try|try
block|{
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invoke should throw exception after retries."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Job ID doesnot Exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetriesOnConnectionFailure ()
specifier|public
name|void
name|testRetriesOnConnectionFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|historyServerProxy
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetriesOnAMConnectionFailures ()
specifier|public
name|void
name|testRetriesOnAMConnectionFailures
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isAMReachableFromClient
condition|)
block|{
return|return;
block|}
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am1"
argument_list|,
literal|78
argument_list|)
argument_list|)
expr_stmt|;
comment|// throw exception in 1st, 2nd, 3rd and 4th call of getJobReport, and
comment|// succeed in the 5th call.
specifier|final
name|MRClientProtocol
name|amProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|amProxy
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"11"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"22"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"33"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"44"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_AM_ACCESS_DISABLED
argument_list|,
operator|!
name|isAMReachableFromClient
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
operator|new
name|ClientServiceDelegate
argument_list|(
name|conf
argument_list|,
name|rm
argument_list|,
name|oldJobId
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|MRClientProtocol
name|instantiateAMProxy
parameter_list|(
specifier|final
name|InetSocketAddress
name|serviceAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|instantiateAMProxy
argument_list|(
name|serviceAddr
argument_list|)
expr_stmt|;
return|return
name|amProxy
return|;
block|}
block|}
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
comment|// assert maxClientRetry is not decremented.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_CLIENT_MAX_RETRIES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_CLIENT_MAX_RETRIES
argument_list|)
argument_list|,
name|clientServiceDelegate
operator|.
name|getMaxClientRetry
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|amProxy
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryServerNotConfigured ()
specifier|public
name|void
name|testHistoryServerNotConfigured
parameter_list|()
throws|throws
name|Exception
block|{
comment|//RM doesn't have app report and job History Server is not configured
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
literal|null
argument_list|,
name|getRMDelegate
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|jobStatus
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|PREP
argument_list|,
name|jobStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|//RM has app report and job History Server is not configured
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationReport
name|applicationReport
init|=
name|getFinishedApplicationReport
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationReport
argument_list|)
expr_stmt|;
name|clientServiceDelegate
operator|=
name|getClientServiceDelegate
argument_list|(
literal|null
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|applicationReport
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobStatus
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|jobStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobReportFromHistoryServer ()
specifier|public
name|void
name|testJobReportFromHistoryServer
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponseFromHistoryServer
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TestJobFilePath"
argument_list|,
name|jobStatus
operator|.
name|getJobFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://TestTrackingUrl"
argument_list|,
name|jobStatus
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|jobStatus
operator|.
name|getMapProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|jobStatus
operator|.
name|getReduceProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCountersFromHistoryServer ()
specifier|public
name|void
name|testCountersFromHistoryServer
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getCounters
argument_list|(
name|getCountersRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getCountersResponseFromHistoryServer
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|clientServiceDelegate
operator|.
name|getJobCounters
argument_list|(
name|oldJobId
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1001
argument_list|,
name|counters
operator|.
name|getCounterGroup
argument_list|(
literal|"dummyCounters"
argument_list|)
operator|.
name|getCounter
argument_list|(
literal|"dummyCounter"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnectOnAMRestart ()
specifier|public
name|void
name|testReconnectOnAMRestart
parameter_list|()
throws|throws
name|IOException
block|{
comment|//test not applicable when AM not reachable
comment|//as instantiateAMProxy is not called at all
if|if
condition|(
operator|!
name|isAMReachableFromClient
condition|)
block|{
return|return;
block|}
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// RM returns AM1 url, null, null and AM2 url on invocations.
comment|// Nulls simulate the time when AM2 is in the process of restarting.
name|ResourceMgrDelegate
name|rmDelegate
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmDelegate
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am1"
argument_list|,
literal|78
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am2"
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|GetJobReportResponse
name|jobReportResponse1
init|=
name|mock
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobReportResponse1
operator|.
name|getJobReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"jobName-firstGen"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"anything"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// First AM returns a report with jobName firstGen and simulates AM shutdown
comment|// on second invocation.
name|MRClientProtocol
name|firstGenAMProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|firstGenAMProxy
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobReportResponse1
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"AM is down!"
argument_list|)
argument_list|)
expr_stmt|;
name|GetJobReportResponse
name|jobReportResponse2
init|=
name|mock
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobReportResponse2
operator|.
name|getJobReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"jobName-secondGen"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"anything"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second AM generation returns a report with jobName secondGen
name|MRClientProtocol
name|secondGenAMProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|secondGenAMProxy
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobReportResponse2
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|spy
argument_list|(
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rmDelegate
argument_list|)
argument_list|)
decl_stmt|;
comment|// First time, connection should be to AM1, then to AM2. Further requests
comment|// should use the same proxy to AM2 and so instantiateProxy shouldn't be
comment|// called.
name|doReturn
argument_list|(
name|firstGenAMProxy
argument_list|)
operator|.
name|doReturn
argument_list|(
name|secondGenAMProxy
argument_list|)
operator|.
name|when
argument_list|(
name|clientServiceDelegate
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jobName-firstGen"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jobName-secondGen"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jobName-secondGen"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clientServiceDelegate
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMAccessDisabled ()
specifier|public
name|void
name|testAMAccessDisabled
parameter_list|()
throws|throws
name|IOException
block|{
comment|//test only applicable when AM not reachable
if|if
condition|(
name|isAMReachableFromClient
condition|)
block|{
return|return;
block|}
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponseFromHistoryServer
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rmDelegate
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmDelegate
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am1"
argument_list|,
literal|78
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am1"
argument_list|,
literal|78
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRunningApplicationReport
argument_list|(
literal|"am1"
argument_list|,
literal|78
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getFinishedApplicationReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|spy
argument_list|(
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rmDelegate
argument_list|)
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clientServiceDelegate
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not reach AM even for second and third times too.
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clientServiceDelegate
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|jobStatus
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clientServiceDelegate
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// The third time around, app is completed, so should go to JHS
name|JobStatus
name|jobStatus1
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TestJobFilePath"
argument_list|,
name|jobStatus1
operator|.
name|getJobFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://TestTrackingUrl"
argument_list|,
name|jobStatus1
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|jobStatus1
operator|.
name|getMapProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|jobStatus1
operator|.
name|getReduceProgress
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clientServiceDelegate
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|instantiateAMProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMDownForJobStatusBeforeGetAMReport ()
specifier|public
name|void
name|testRMDownForJobStatusBeforeGetAMReport
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|testRMDownForJobStatusBeforeGetAMReport
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_CLIENT_MAX_RETRIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMDownForJobStatusBeforeGetAMReportWithRetryTimes ()
specifier|public
name|void
name|testRMDownForJobStatusBeforeGetAMReportWithRetryTimes
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_CLIENT_MAX_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testRMDownForJobStatusBeforeGetAMReport
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_CLIENT_MAX_RETRIES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_CLIENT_MAX_RETRIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMDownRestoreForJobStatusBeforeGetAMReport ()
specifier|public
name|void
name|testRMDownRestoreForJobStatusBeforeGetAMReport
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_CLIENT_MAX_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_AM_ACCESS_DISABLED
argument_list|,
operator|!
name|isAMReachableFromClient
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|any
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rmDelegate
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmDelegate
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection refuced1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection refuced2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getFinishedApplicationReport
argument_list|()
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
operator|new
name|ClientServiceDelegate
argument_list|(
name|conf
argument_list|,
name|rmDelegate
argument_list|,
name|oldJobId
argument_list|,
name|historyServerProxy
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|rmDelegate
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|testRMDownForJobStatusBeforeGetAMReport (Configuration conf, int noOfRetries)
specifier|private
name|void
name|testRMDownForJobStatusBeforeGetAMReport
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|noOfRetries
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_AM_ACCESS_DISABLED
argument_list|,
operator|!
name|isAMReachableFromClient
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceMgrDelegate
name|rmDelegate
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmDelegate
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection refuced1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection refuced2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection refuced3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
operator|new
name|ClientServiceDelegate
argument_list|(
name|conf
argument_list|,
name|rmDelegate
argument_list|,
name|oldJobId
argument_list|,
name|historyServerProxy
argument_list|)
decl_stmt|;
try|try
block|{
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"It should throw exception after retries"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fail to get job status,and e="
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|rmDelegate
argument_list|,
name|times
argument_list|(
name|noOfRetries
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getJobReportRequest ()
specifier|private
name|GetJobReportRequest
name|getJobReportRequest
parameter_list|()
block|{
name|GetJobReportRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|getJobReportResponse ()
specifier|private
name|GetJobReportResponse
name|getJobReportResponse
parameter_list|()
block|{
name|GetJobReportResponse
name|jobReportResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobReport
name|jobReport
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobReport
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|jobReportResponse
operator|.
name|setJobReport
argument_list|(
name|jobReport
argument_list|)
expr_stmt|;
return|return
name|jobReportResponse
return|;
block|}
DECL|method|getCountersRequest ()
specifier|private
name|GetCountersRequest
name|getCountersRequest
parameter_list|()
block|{
name|GetCountersRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetCountersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|getFinishedApplicationReport ()
specifier|private
name|ApplicationReport
name|getFinishedApplicationReport
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|attemptId
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.0f
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_TYPE
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRunningApplicationReport (String host, int port)
specifier|private
name|ApplicationReport
name|getRunningApplicationReport
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|attemptId
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.0f
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_TYPE
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRMDelegate ()
specifier|private
name|ResourceMgrDelegate
name|getRMDelegate
parameter_list|()
throws|throws
name|IOException
block|{
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|rm
return|;
block|}
DECL|method|getClientServiceDelegate ( MRClientProtocol historyServerProxy, ResourceMgrDelegate rm)
specifier|private
name|ClientServiceDelegate
name|getClientServiceDelegate
parameter_list|(
name|MRClientProtocol
name|historyServerProxy
parameter_list|,
name|ResourceMgrDelegate
name|rm
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_AM_ACCESS_DISABLED
argument_list|,
operator|!
name|isAMReachableFromClient
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
operator|new
name|ClientServiceDelegate
argument_list|(
name|conf
argument_list|,
name|rm
argument_list|,
name|oldJobId
argument_list|,
name|historyServerProxy
argument_list|)
decl_stmt|;
return|return
name|clientServiceDelegate
return|;
block|}
DECL|method|getJobReportResponseFromHistoryServer ()
specifier|private
name|GetJobReportResponse
name|getJobReportResponseFromHistoryServer
parameter_list|()
block|{
name|GetJobReportResponse
name|jobReportResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobReport
name|jobReport
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobReport
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setMapProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setReduceProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setJobFile
argument_list|(
literal|"TestJobFilePath"
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setTrackingUrl
argument_list|(
literal|"http://TestTrackingUrl"
argument_list|)
expr_stmt|;
name|jobReportResponse
operator|.
name|setJobReport
argument_list|(
name|jobReport
argument_list|)
expr_stmt|;
return|return
name|jobReportResponse
return|;
block|}
DECL|method|getCountersResponseFromHistoryServer ()
specifier|private
name|GetCountersResponse
name|getCountersResponseFromHistoryServer
parameter_list|()
block|{
name|GetCountersResponse
name|countersResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetCountersResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counter
name|counter
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|CounterGroup
name|counterGroup
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CounterGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setDisplayName
argument_list|(
literal|"dummyCounter"
argument_list|)
expr_stmt|;
name|counter
operator|.
name|setName
argument_list|(
literal|"dummyCounter"
argument_list|)
expr_stmt|;
name|counter
operator|.
name|setValue
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|counterGroup
operator|.
name|setName
argument_list|(
literal|"dummyCounters"
argument_list|)
expr_stmt|;
name|counterGroup
operator|.
name|setDisplayName
argument_list|(
literal|"dummyCounters"
argument_list|)
expr_stmt|;
name|counterGroup
operator|.
name|setCounter
argument_list|(
literal|"dummyCounter"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|counters
operator|.
name|setCounterGroup
argument_list|(
literal|"dummyCounters"
argument_list|,
name|counterGroup
argument_list|)
expr_stmt|;
name|countersResponse
operator|.
name|setCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
return|return
name|countersResponse
return|;
block|}
block|}
end_class

end_unit

