begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for ClientServiceDelegate.java  */
end_comment

begin_class
DECL|class|TestClientServiceDelegate
specifier|public
class|class
name|TestClientServiceDelegate
block|{
DECL|field|oldJobId
specifier|private
name|JobID
name|oldJobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1315895242400_2"
argument_list|)
decl_stmt|;
DECL|field|jobId
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testUnknownAppInRM ()
specifier|public
name|void
name|testUnknownAppInRM
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|getRMDelegate
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteExceptionFromHistoryServer ()
specifier|public
name|void
name|testRemoteExceptionFromHistoryServer
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Job ID doesnot Exist"
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
try|try
block|{
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invoke should throw exception after retries."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job ID doesnot Exist"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetriesOnConnectionFailure ()
specifier|public
name|void
name|testRetriesOnConnectionFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MRClientProtocol
name|historyServerProxy
init|=
name|mock
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyServerProxy
operator|.
name|getJobReport
argument_list|(
name|getJobReportRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJobReportResponse
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
name|historyServerProxy
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jobStatus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHistoryServerNotConfigured ()
specifier|public
name|void
name|testHistoryServerNotConfigured
parameter_list|()
throws|throws
name|Exception
block|{
comment|//RM doesn't have app report and job History Server is not configured
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
name|getClientServiceDelegate
argument_list|(
literal|null
argument_list|,
name|getRMDelegate
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unknown User"
argument_list|,
name|jobStatus
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|PREP
argument_list|,
name|jobStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|//RM has app report and job History Server is not configured
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationReport
name|applicationReport
init|=
name|getApplicationReport
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationReport
argument_list|)
expr_stmt|;
name|clientServiceDelegate
operator|=
name|getClientServiceDelegate
argument_list|(
literal|null
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|clientServiceDelegate
operator|.
name|getJobStatus
argument_list|(
name|oldJobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|applicationReport
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobStatus
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|jobStatus
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobReportRequest ()
specifier|private
name|GetJobReportRequest
name|getJobReportRequest
parameter_list|()
block|{
name|GetJobReportRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|getJobReportResponse ()
specifier|private
name|GetJobReportResponse
name|getJobReportResponse
parameter_list|()
block|{
name|GetJobReportResponse
name|jobReportResponse
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetJobReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobReport
name|jobReport
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobReport
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobReport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|jobReportResponse
operator|.
name|setJobReport
argument_list|(
name|jobReport
argument_list|)
expr_stmt|;
return|return
name|jobReportResponse
return|;
block|}
DECL|method|getApplicationReport ()
specifier|private
name|ApplicationReport
name|getApplicationReport
parameter_list|()
block|{
name|ApplicationReport
name|applicationReport
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|applicationReport
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|applicationReport
operator|.
name|setUser
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
return|return
name|applicationReport
return|;
block|}
DECL|method|getRMDelegate ()
specifier|private
name|ResourceMgrDelegate
name|getRMDelegate
parameter_list|()
throws|throws
name|YarnRemoteException
block|{
name|ResourceMgrDelegate
name|rm
init|=
name|mock
argument_list|(
name|ResourceMgrDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|getClientServiceDelegate ( MRClientProtocol historyServerProxy, ResourceMgrDelegate rm)
specifier|private
name|ClientServiceDelegate
name|getClientServiceDelegate
parameter_list|(
name|MRClientProtocol
name|historyServerProxy
parameter_list|,
name|ResourceMgrDelegate
name|rm
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
literal|"yarn"
argument_list|)
expr_stmt|;
name|ClientServiceDelegate
name|clientServiceDelegate
init|=
operator|new
name|ClientServiceDelegate
argument_list|(
name|conf
argument_list|,
name|rm
argument_list|,
name|oldJobId
argument_list|,
name|historyServerProxy
argument_list|)
decl_stmt|;
return|return
name|clientServiceDelegate
return|;
block|}
block|}
end_class

end_unit

