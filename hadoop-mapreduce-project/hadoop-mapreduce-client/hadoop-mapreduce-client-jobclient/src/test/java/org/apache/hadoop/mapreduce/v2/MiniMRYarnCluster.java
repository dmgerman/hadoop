begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
operator|.
name|JobHistoryServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * Configures and starts the MR-specific components in the YARN cluster.  *  */
end_comment

begin_class
DECL|class|MiniMRYarnCluster
specifier|public
class|class
name|MiniMRYarnCluster
extends|extends
name|MiniYARNCluster
block|{
DECL|field|HADOOP_MAPREDUCE_CLIENT_APP_JAR_NAME
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_MAPREDUCE_CLIENT_APP_JAR_NAME
init|=
literal|"hadoop-mapreduce-client-app-0.24.0-SNAPSHOT.jar"
decl_stmt|;
DECL|field|YARN_MAPREDUCE_APP_JAR_PATH
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MAPREDUCE_APP_JAR_PATH
init|=
literal|"$YARN_HOME/modules/"
operator|+
name|HADOOP_MAPREDUCE_CLIENT_APP_JAR_NAME
decl_stmt|;
DECL|field|APPJAR
specifier|public
specifier|static
specifier|final
name|String
name|APPJAR
init|=
literal|"../hadoop-mapreduce-client-app/target/"
operator|+
name|HADOOP_MAPREDUCE_CLIENT_APP_JAR_NAME
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniMRYarnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|historyServer
specifier|private
name|JobHistoryServer
name|historyServer
decl_stmt|;
DECL|field|historyServerWrapper
specifier|private
name|JobHistoryServerWrapper
name|historyServerWrapper
decl_stmt|;
DECL|method|MiniMRYarnCluster (String testName)
specifier|public
name|MiniMRYarnCluster
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|this
argument_list|(
name|testName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRYarnCluster (String testName, int noOfNMs)
specifier|public
name|MiniMRYarnCluster
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|noOfNMs
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|,
name|noOfNMs
argument_list|)
expr_stmt|;
comment|//TODO: add the history server
name|historyServerWrapper
operator|=
operator|new
name|JobHistoryServerWrapper
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|historyServerWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|YARN_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
operator|new
name|File
argument_list|(
name|getTestWorkDir
argument_list|()
argument_list|,
literal|"apps_staging_dir/${user.name}/"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
comment|// The default is local because of
comment|// which shuffle doesn't happen
comment|//configure the shuffle service in NM
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|)
argument_list|,
name|ShuffleHandler
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Non-standard shuffle port
name|conf
operator|.
name|setInt
argument_list|(
name|ShuffleHandler
operator|.
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_EXECUTOR
argument_list|,
name|DefaultContainerExecutor
operator|.
name|class
argument_list|,
name|ContainerExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// TestMRJobs is for testing non-uberized operation only; see TestUberAM
comment|// for corresponding uberized tests.
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set config for JH Server
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_ADDRESS
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|JobHistoryServerWrapper
specifier|private
class|class
name|JobHistoryServerWrapper
extends|extends
name|AbstractService
block|{
DECL|method|JobHistoryServerWrapper ()
specifier|public
name|JobHistoryServerWrapper
parameter_list|()
block|{
name|super
argument_list|(
name|JobHistoryServerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|historyServer
operator|=
operator|new
name|JobHistoryServer
argument_list|()
expr_stmt|;
name|historyServer
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|historyServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|historyServer
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HistoryServer to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|historyServer
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HistoryServer failed to start"
argument_list|)
throw|;
block|}
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|historyServer
operator|!=
literal|null
condition|)
block|{
name|historyServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getHistoryServer ()
specifier|public
name|JobHistoryServer
name|getHistoryServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|historyServer
return|;
block|}
block|}
end_class

end_unit

