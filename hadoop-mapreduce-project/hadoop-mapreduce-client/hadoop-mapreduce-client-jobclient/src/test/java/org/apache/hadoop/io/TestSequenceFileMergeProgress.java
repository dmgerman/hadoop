begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Sorter
operator|.
name|RawKeyValueIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Sorter
operator|.
name|SegmentDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestSequenceFileMergeProgress
specifier|public
class|class
name|TestSequenceFileMergeProgress
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|FileInputFormat
operator|.
name|LOG
decl_stmt|;
DECL|field|RECORDS
specifier|private
specifier|static
specifier|final
name|int
name|RECORDS
init|=
literal|10000
decl_stmt|;
annotation|@
name|Test
DECL|method|testMergeProgressWithNoCompression ()
specifier|public
name|void
name|testMergeProgressWithNoCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|runTest
argument_list|(
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeProgressWithRecordCompression ()
specifier|public
name|void
name|testMergeProgressWithRecordCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|runTest
argument_list|(
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|RECORD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeProgressWithBlockCompression ()
specifier|public
name|void
name|testMergeProgressWithBlockCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|runTest
argument_list|(
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest (CompressionType compressionType)
specifier|public
name|void
name|runTest
parameter_list|(
name|CompressionType
name|compressionType
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/mapred"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test.seq"
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|LongWritable
name|tkey
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|Text
name|tval
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|file
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|compressionType
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORDS
condition|;
operator|++
name|i
control|)
block|{
name|tkey
operator|.
name|set
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|tval
operator|.
name|set
argument_list|(
literal|"valuevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|tkey
argument_list|,
name|tval
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|fileLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"With compression = "
operator|+
name|compressionType
operator|+
literal|": "
operator|+
literal|"compressed length = "
operator|+
name|fileLength
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
name|job
operator|.
name|getOutputKeyComparator
argument_list|()
argument_list|,
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[]
block|{
name|file
block|}
decl_stmt|;
name|RawKeyValueIterator
name|rIter
init|=
name|sorter
operator|.
name|merge
argument_list|(
name|paths
argument_list|,
name|tempDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rIter
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|RECORDS
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|rIter
operator|.
name|getProgress
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|0.0000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

