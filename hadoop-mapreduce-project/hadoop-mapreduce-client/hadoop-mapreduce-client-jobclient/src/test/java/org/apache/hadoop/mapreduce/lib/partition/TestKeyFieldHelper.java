begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.partition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestKeyFieldHelper
specifier|public
class|class
name|TestKeyFieldHelper
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestKeyFieldHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test is key-field-helper's parse option.    */
DECL|method|testparseOption ()
specifier|public
name|void
name|testparseOption
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyFieldHelper
name|helper
init|=
operator|new
name|KeyFieldHelper
argument_list|()
decl_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|String
name|keySpecs
init|=
literal|"-k1.2,3.4"
decl_stmt|;
name|String
name|eKeySpecs
init|=
name|keySpecs
decl_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|String
name|actKeySpecs
init|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
comment|// test -k a.b
name|keySpecs
operator|=
literal|"-k 1.2"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,0.0"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr -k1.2,3.4"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr -k1.2,3.4n"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr -k1.2,3.4r"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr -k1.2,3.4 -k5.6,7.8n -k9.10,11.12r -k13.14,15.16nr"
expr_stmt|;
comment|//1st
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
comment|// 2nd
name|eKeySpecs
operator|=
literal|"-k5.6,7.8n"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
comment|//3rd
name|eKeySpecs
operator|=
literal|"-k9.10,11.12r"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
comment|//4th
name|eKeySpecs
operator|=
literal|"-k13.14,15.16nr"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2n,3.4"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2r,3.4"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2nr,3.4"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr -k1.2,3.4 -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8nr"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-n -k1.2,3.4 -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8n"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-r -k1.2,3.4 -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8r"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4n -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4r -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-k1.2,3.4nr -k5.6,7.8"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.2,3.4nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k5.6,7.8"
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-n"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.1,0.0n"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-r"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.1,0.0r"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
name|keySpecs
operator|=
literal|"-nr"
expr_stmt|;
name|eKeySpecs
operator|=
literal|"-k1.1,0.0nr"
expr_stmt|;
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
name|keySpecs
argument_list|)
expr_stmt|;
name|actKeySpecs
operator|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyFieldHelper's parsing is garbled"
argument_list|,
name|eKeySpecs
argument_list|,
name|actKeySpecs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test is key-field-helper's getWordLengths.    */
DECL|method|testGetWordLengths ()
specifier|public
name|void
name|testGetWordLengths
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyFieldHelper
name|helper
init|=
operator|new
name|KeyFieldHelper
argument_list|()
decl_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
comment|// test getWordLengths with unspecified key-specifications
name|String
name|input
init|=
literal|"hi"
decl_stmt|;
name|int
index|[]
name|result
init|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the key specs
name|helper
operator|.
name|setKeyFieldSpec
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test getWordLengths with 3 words
name|input
operator|=
literal|"hi\thello there"
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|11
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// test getWordLengths with 4 words but with a different separator
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"hi hello\tthere you"
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|2
block|,
literal|11
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with non zero start index
name|input
operator|=
literal|"hi hello there you where me there"
expr_stmt|;
comment|//                 .....................
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"hi hello there you where me "
expr_stmt|;
comment|//                 ..................
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|10
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|5
block|,
literal|2
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"  abc"
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"  abc"
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
literal|" abc "
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"abc"
expr_stmt|;
name|result
operator|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|input
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equals
argument_list|(
name|result
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test is key-field-helper's getStartOffset/getEndOffset.    */
DECL|method|testgetStartEndOffset ()
specifier|public
name|void
name|testgetStartEndOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyFieldHelper
name|helper
init|=
operator|new
name|KeyFieldHelper
argument_list|()
decl_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k1,2
name|helper
operator|.
name|setKeyFieldSpec
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|input
init|=
literal|"hi\thello"
decl_stmt|;
name|String
name|expectedOutput
init|=
name|input
decl_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k1.0,0 .. should result into start = -1
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1.0,0"
argument_list|)
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
literal|null
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k1,0
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1,0"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
name|input
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k1.2,0
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1.2,0"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"i\thello"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getWordLengths with -k1.0,2.3
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1.1,2.3"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hi\thel"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getWordLengths with -k1.2,2.3
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1.2,2.3"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"i\thel"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k1.2,3.0
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k1.2,3.0"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"i\thello"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k2,2
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k2,2"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hello"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k3.0,4.0
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k3.1,4.0"
argument_list|)
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
literal|null
argument_list|,
name|helper
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k2.1
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|input
operator|=
literal|"123123123123123hi\thello\thow"
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k2.1"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hello\thow"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|,
literal|15
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k2.1,4 with end ending on \t
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|input
operator|=
literal|"123123123123123hi\thello\t\thow\tare"
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k2.1,3"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hello\t"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|,
literal|17
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k2.1 with end ending on \t
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|input
operator|=
literal|"123123123123123hi\thello\thow\tare"
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k2.1"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hello\thow\t"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|,
literal|17
argument_list|,
literal|28
argument_list|)
expr_stmt|;
comment|// test getStartOffset with -k2.1,3 with smaller length
name|helper
operator|=
operator|new
name|KeyFieldHelper
argument_list|()
expr_stmt|;
name|input
operator|=
literal|"123123123123123hi\thello\thow"
expr_stmt|;
name|helper
operator|.
name|setKeyFieldSeparator
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|parseOption
argument_list|(
literal|"-k2.1,3"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|=
literal|"hello"
expr_stmt|;
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|,
literal|15
argument_list|,
literal|23
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySpecs (String input, String expectedOutput, KeyFieldHelper helper)
specifier|private
name|void
name|testKeySpecs
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|expectedOutput
parameter_list|,
name|KeyFieldHelper
name|helper
parameter_list|)
block|{
name|testKeySpecs
argument_list|(
name|input
argument_list|,
name|expectedOutput
argument_list|,
name|helper
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySpecs (String input, String expectedOutput, KeyFieldHelper helper, int s1, int e1)
specifier|private
name|void
name|testKeySpecs
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|expectedOutput
parameter_list|,
name|KeyFieldHelper
name|helper
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"input : "
operator|+
name|input
argument_list|)
expr_stmt|;
name|String
name|keySpecs
init|=
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"keyspecs : "
operator|+
name|keySpecs
argument_list|)
expr_stmt|;
name|byte
index|[]
name|inputBytes
init|=
name|input
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// get the input bytes
if|if
condition|(
name|e1
operator|==
operator|-
literal|1
condition|)
block|{
name|e1
operator|=
name|inputBytes
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"length : "
operator|+
name|e1
argument_list|)
expr_stmt|;
comment|// get the word lengths
name|int
index|[]
name|indices
init|=
name|helper
operator|.
name|getWordLengths
argument_list|(
name|inputBytes
argument_list|,
name|s1
argument_list|,
name|e1
argument_list|)
decl_stmt|;
comment|// get the start index
name|int
name|start
init|=
name|helper
operator|.
name|getStartOffset
argument_list|(
name|inputBytes
argument_list|,
name|s1
argument_list|,
name|e1
argument_list|,
name|indices
argument_list|,
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"start : "
operator|+
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedOutput
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Expected -1 when the start index is invalid"
argument_list|,
operator|-
literal|1
argument_list|,
name|start
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// get the end index
name|int
name|end
init|=
name|helper
operator|.
name|getEndOffset
argument_list|(
name|inputBytes
argument_list|,
name|s1
argument_list|,
name|e1
argument_list|,
name|indices
argument_list|,
name|helper
operator|.
name|keySpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"end : "
operator|+
name|end
argument_list|)
expr_stmt|;
comment|//my fix
name|end
operator|=
operator|(
name|end
operator|>=
name|inputBytes
operator|.
name|length
operator|)
condition|?
name|inputBytes
operator|.
name|length
operator|-
literal|1
else|:
name|end
expr_stmt|;
name|int
name|length
init|=
name|end
operator|+
literal|1
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"length : "
operator|+
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|outputBytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inputBytes
argument_list|,
name|start
argument_list|,
name|outputBytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|String
name|output
init|=
operator|new
name|String
argument_list|(
name|outputBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"output : "
operator|+
name|output
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expected-output : "
operator|+
name|expectedOutput
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keySpecs
operator|+
literal|" failed on input '"
operator|+
name|input
operator|+
literal|"'"
argument_list|,
name|expectedOutput
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|// check for equality of 2 int arrays
DECL|method|equals (int[] test, int[] expected)
specifier|private
name|boolean
name|equals
parameter_list|(
name|int
index|[]
name|test
parameter_list|,
name|int
index|[]
name|expected
parameter_list|)
block|{
comment|// check array length
if|if
condition|(
name|test
index|[
literal|0
index|]
operator|!=
name|expected
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if length is same then check the contents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
index|[
literal|0
index|]
operator|&&
name|i
operator|<
name|expected
index|[
literal|0
index|]
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|test
index|[
name|i
index|]
operator|!=
name|expected
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

