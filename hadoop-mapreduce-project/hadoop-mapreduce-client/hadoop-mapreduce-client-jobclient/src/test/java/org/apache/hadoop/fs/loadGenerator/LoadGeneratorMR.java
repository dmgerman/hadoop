begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.loadGenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|loadGenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** The load generator is a tool for testing NameNode behavior under  * different client loads.  * The main code is in HadoopCommon, @LoadGenerator. This class, LoadGeneratorMR  * lets you run that LoadGenerator as a MapReduce job.  *   * The synopsis of the command is  * java LoadGeneratorMR  *   -mr<numMapJobs><outputDir> : results in outputDir/Results  *   the rest of the args are the same as the original LoadGenerator.  *  */
end_comment

begin_class
DECL|class|LoadGeneratorMR
specifier|public
class|class
name|LoadGeneratorMR
extends|extends
name|LoadGenerator
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoadGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numMapTasks
specifier|private
specifier|static
name|int
name|numMapTasks
init|=
literal|1
decl_stmt|;
DECL|field|mrOutDir
specifier|private
name|String
name|mrOutDir
decl_stmt|;
DECL|field|USAGE_CMD
specifier|final
specifier|private
specifier|static
name|String
name|USAGE_CMD
init|=
literal|"java LoadGeneratorMR\n"
decl_stmt|;
DECL|field|USAGE
specifier|final
specifier|private
specifier|static
name|String
name|USAGE
init|=
name|USAGE_CMD
operator|+
literal|"-mr<numMapJobs><outputDir> [MUST be first 3 args] \n"
operator|+
name|USAGE_ARGS
decl_stmt|;
comment|// Constant "keys" used to communicate between map and reduce
DECL|field|OPEN_EXECTIME
specifier|final
specifier|private
specifier|static
name|Text
name|OPEN_EXECTIME
init|=
operator|new
name|Text
argument_list|(
literal|"OpenExecutionTime"
argument_list|)
decl_stmt|;
DECL|field|NUMOPS_OPEN
specifier|final
specifier|private
specifier|static
name|Text
name|NUMOPS_OPEN
init|=
operator|new
name|Text
argument_list|(
literal|"NumOpsOpen"
argument_list|)
decl_stmt|;
DECL|field|LIST_EXECTIME
specifier|final
specifier|private
specifier|static
name|Text
name|LIST_EXECTIME
init|=
operator|new
name|Text
argument_list|(
literal|"ListExecutionTime"
argument_list|)
decl_stmt|;
DECL|field|NUMOPS_LIST
specifier|final
specifier|private
specifier|static
name|Text
name|NUMOPS_LIST
init|=
operator|new
name|Text
argument_list|(
literal|"NumOpsList"
argument_list|)
decl_stmt|;
DECL|field|DELETE_EXECTIME
specifier|final
specifier|private
specifier|static
name|Text
name|DELETE_EXECTIME
init|=
operator|new
name|Text
argument_list|(
literal|"DeletionExecutionTime"
argument_list|)
decl_stmt|;
DECL|field|NUMOPS_DELETE
specifier|final
specifier|private
specifier|static
name|Text
name|NUMOPS_DELETE
init|=
operator|new
name|Text
argument_list|(
literal|"NumOpsDelete"
argument_list|)
decl_stmt|;
DECL|field|CREATE_EXECTIME
specifier|final
specifier|private
specifier|static
name|Text
name|CREATE_EXECTIME
init|=
operator|new
name|Text
argument_list|(
literal|"CreateExecutionTime"
argument_list|)
decl_stmt|;
DECL|field|NUMOPS_CREATE
specifier|final
specifier|private
specifier|static
name|Text
name|NUMOPS_CREATE
init|=
operator|new
name|Text
argument_list|(
literal|"NumOpsCreate"
argument_list|)
decl_stmt|;
DECL|field|WRITE_CLOSE_EXECTIME
specifier|final
specifier|private
specifier|static
name|Text
name|WRITE_CLOSE_EXECTIME
init|=
operator|new
name|Text
argument_list|(
literal|"WriteCloseExecutionTime"
argument_list|)
decl_stmt|;
DECL|field|NUMOPS_WRITE_CLOSE
specifier|final
specifier|private
specifier|static
name|Text
name|NUMOPS_WRITE_CLOSE
init|=
operator|new
name|Text
argument_list|(
literal|"NumOpsWriteClose"
argument_list|)
decl_stmt|;
DECL|field|ELAPSED_TIME
specifier|final
specifier|private
specifier|static
name|Text
name|ELAPSED_TIME
init|=
operator|new
name|Text
argument_list|(
literal|"ElapsedTime"
argument_list|)
decl_stmt|;
DECL|field|TOTALOPS
specifier|final
specifier|private
specifier|static
name|Text
name|TOTALOPS
init|=
operator|new
name|Text
argument_list|(
literal|"TotalOps"
argument_list|)
decl_stmt|;
comment|// Config keys to pass args from Main to the Job
DECL|field|LG_ROOT
specifier|final
specifier|private
specifier|static
name|String
name|LG_ROOT
init|=
literal|"LG.root"
decl_stmt|;
DECL|field|LG_SCRIPTFILE
specifier|final
specifier|private
specifier|static
name|String
name|LG_SCRIPTFILE
init|=
literal|"LG.scriptFile"
decl_stmt|;
DECL|field|LG_MAXDELAYBETWEENOPS
specifier|final
specifier|private
specifier|static
name|String
name|LG_MAXDELAYBETWEENOPS
init|=
literal|"LG.maxDelayBetweenOps"
decl_stmt|;
DECL|field|LG_NUMOFTHREADS
specifier|final
specifier|private
specifier|static
name|String
name|LG_NUMOFTHREADS
init|=
literal|"LG.numOfThreads"
decl_stmt|;
DECL|field|LG_READPR
specifier|final
specifier|private
specifier|static
name|String
name|LG_READPR
init|=
literal|"LG.readPr"
decl_stmt|;
DECL|field|LG_WRITEPR
specifier|final
specifier|private
specifier|static
name|String
name|LG_WRITEPR
init|=
literal|"LG.writePr"
decl_stmt|;
DECL|field|LG_SEED
specifier|final
specifier|private
specifier|static
name|String
name|LG_SEED
init|=
literal|"LG.r"
decl_stmt|;
DECL|field|LG_NUMMAPTASKS
specifier|final
specifier|private
specifier|static
name|String
name|LG_NUMMAPTASKS
init|=
literal|"LG.numMapTasks"
decl_stmt|;
DECL|field|LG_ELAPSEDTIME
specifier|final
specifier|private
specifier|static
name|String
name|LG_ELAPSEDTIME
init|=
literal|"LG.elapsedTime"
decl_stmt|;
DECL|field|LG_STARTTIME
specifier|final
specifier|private
specifier|static
name|String
name|LG_STARTTIME
init|=
literal|"LG.startTime"
decl_stmt|;
DECL|field|LG_FLAGFILE
specifier|final
specifier|private
specifier|static
name|String
name|LG_FLAGFILE
init|=
literal|"LG.flagFile"
decl_stmt|;
comment|/** Constructor */
DECL|method|LoadGeneratorMR ()
specifier|public
name|LoadGeneratorMR
parameter_list|()
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|LoadGeneratorMR (Configuration conf)
specifier|public
name|LoadGeneratorMR
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|this
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Main function called by tool runner.    * It first initializes data by parsing the command line arguments.    * It then calls the loadGenerator    */
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|parseArgsMR
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
return|return
name|exitCode
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running LoadGeneratorMR against fileSystem: "
operator|+
name|FileContext
operator|.
name|getFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|submitAsMapReduce
argument_list|()
return|;
comment|// reducer will print the results
block|}
comment|/**     * Parse the command line arguments and initialize the data.    * Only parse the first arg: -mr<numMapTasks><mrOutDir> (MUST be first three Args)    * The rest are parsed by the Parent LoadGenerator    **/
DECL|method|parseArgsMR (String[] args)
specifier|private
name|int
name|parseArgsMR
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|3
operator|&&
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-mr"
argument_list|)
condition|)
block|{
name|numMapTasks
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|mrOutDir
operator|=
name|args
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
name|mrOutDir
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Missing output file parameter, instead got: "
operator|+
name|mrOutDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|String
index|[]
name|strippedArgs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strippedArgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strippedArgs
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
operator|+
literal|3
index|]
expr_stmt|;
block|}
name|super
operator|.
name|parseArgs
argument_list|(
literal|true
argument_list|,
name|strippedArgs
argument_list|)
expr_stmt|;
comment|// Parse normal LoadGenerator args
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Illegal parameter: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/** Main program    *     * @param args command line arguments    * @throws Exception    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|LoadGeneratorMR
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|// The following methods are only used when LoadGenerator is run a MR job
comment|/**    * Based on args we submit the LoadGenerator as MR job.    * Number of MapTasks is numMapTasks    * @return exitCode for job submission    */
DECL|method|submitAsMapReduce ()
specifier|private
name|int
name|submitAsMapReduce
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running as a MapReduce job with "
operator|+
name|numMapTasks
operator|+
literal|" mapTasks;  Output to file "
operator|+
name|mrOutDir
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// First set all the args of LoadGenerator as Conf vars to pass to MR tasks
name|conf
operator|.
name|set
argument_list|(
name|LG_ROOT
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LG_MAXDELAYBETWEENOPS
argument_list|,
name|maxDelayBetweenOps
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LG_NUMOFTHREADS
argument_list|,
name|numOfThreads
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LG_READPR
argument_list|,
name|readProbs
index|[
literal|0
index|]
operator|+
literal|""
argument_list|)
expr_stmt|;
comment|//Pass Double as string
name|conf
operator|.
name|set
argument_list|(
name|LG_WRITEPR
argument_list|,
name|writeProbs
index|[
literal|0
index|]
operator|+
literal|""
argument_list|)
expr_stmt|;
comment|//Pass Double as string
name|conf
operator|.
name|setLong
argument_list|(
name|LG_SEED
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|//No idea what this is
name|conf
operator|.
name|setInt
argument_list|(
name|LG_NUMMAPTASKS
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptFile
operator|==
literal|null
operator|&&
name|durations
index|[
literal|0
index|]
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"When run as a MapReduce job, elapsed Time or ScriptFile must be specified"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|LG_ELAPSEDTIME
argument_list|,
name|durations
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|LG_STARTTIME
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptFile
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|LG_SCRIPTFILE
argument_list|,
name|scriptFile
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|LG_FLAGFILE
argument_list|,
name|flagFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now set the necessary conf variables that apply to run MR itself.
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|LoadGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"NNLoadGeneratorViaMR"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|numMapTasks
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 1 reducer to collect the results
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|MapperThatRunsNNLoadGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|ReducerThatCollectsLGdata
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|DummyInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Explicitly set number of max map attempts to 1.
name|jobConf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Explicitly turn off speculative execution
name|jobConf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// This mapReduce job has no input but has output
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
operator|new
name|Path
argument_list|(
name|mrOutDir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to run job: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|// Each split is empty
DECL|class|EmptySplit
specifier|public
specifier|static
class|class
name|EmptySplit
implements|implements
name|InputSplit
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
comment|// Dummy Input format to send 1 record - number of spits is numMapTasks
DECL|class|DummyInputFormat
specifier|public
specifier|static
class|class
name|DummyInputFormat
extends|extends
name|Configured
implements|implements
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|getSplits (JobConf conf, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|numSplits
parameter_list|)
block|{
name|numSplits
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"LG.numMapTasks"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|ret
init|=
operator|new
name|InputSplit
index|[
name|numSplits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|EmptySplit
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getRecordReader ( InputSplit ignored, JobConf conf, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|ignored
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
block|{
name|boolean
name|sentOneRecord
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sentOneRecord
operator|==
literal|false
condition|)
block|{
comment|// first call
name|sentOneRecord
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
comment|// we have sent one record - we are done
block|}
specifier|public
name|LongWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|LongWritable
argument_list|()
return|;
block|}
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
block|}
return|;
block|}
block|}
DECL|class|MapperThatRunsNNLoadGenerator
specifier|public
specifier|static
class|class
name|MapperThatRunsNNLoadGenerator
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|jobConf
operator|=
name|job
expr_stmt|;
name|getArgsFromConfiguration
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
DECL|class|ProgressThread
specifier|private
class|class
name|ProgressThread
extends|extends
name|Thread
block|{
DECL|field|keepGoing
name|boolean
name|keepGoing
decl_stmt|;
comment|// while this is true, thread runs.
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
decl_stmt|;
DECL|method|ProgressThread (final Reporter r)
specifier|public
name|ProgressThread
parameter_list|(
specifier|final
name|Reporter
name|r
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|keepGoing
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|keepGoing
condition|)
block|{
if|if
condition|(
operator|!
name|ProgressThread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|ProgressThread
name|progressThread
init|=
operator|new
name|ProgressThread
argument_list|(
name|reporter
argument_list|)
decl_stmt|;
name|progressThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|LoadGenerator
argument_list|(
name|jobConf
argument_list|)
operator|.
name|generateLoadOnNN
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished generating load on NN, sending results to the reducer"
argument_list|)
expr_stmt|;
name|printResults
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|progressThread
operator|.
name|keepGoing
operator|=
literal|false
expr_stmt|;
name|progressThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Send results to Reducer
name|output
operator|.
name|collect
argument_list|(
name|OPEN_EXECTIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|executionTime
index|[
name|OPEN
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|NUMOPS_OPEN
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|numOfOps
index|[
name|OPEN
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|LIST_EXECTIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|executionTime
index|[
name|LIST
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|NUMOPS_LIST
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|numOfOps
index|[
name|LIST
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|DELETE_EXECTIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|executionTime
index|[
name|DELETE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|NUMOPS_DELETE
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|numOfOps
index|[
name|DELETE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|CREATE_EXECTIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|executionTime
index|[
name|CREATE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|NUMOPS_CREATE
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|numOfOps
index|[
name|CREATE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|WRITE_CLOSE_EXECTIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|executionTime
index|[
name|WRITE_CLOSE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|NUMOPS_WRITE_CLOSE
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|numOfOps
index|[
name|WRITE_CLOSE
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|TOTALOPS
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|totalOps
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|ELAPSED_TIME
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|totalTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getArgsFromConfiguration (Configuration conf)
specifier|public
name|void
name|getArgsFromConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|maxDelayBetweenOps
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LG_MAXDELAYBETWEENOPS
argument_list|,
name|maxDelayBetweenOps
argument_list|)
expr_stmt|;
name|numOfThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LG_NUMOFTHREADS
argument_list|,
name|numOfThreads
argument_list|)
expr_stmt|;
name|readProbs
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|LG_READPR
argument_list|,
name|readProbs
index|[
literal|0
index|]
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|writeProbs
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|LG_WRITEPR
argument_list|,
name|writeProbs
index|[
literal|0
index|]
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|seed
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|LG_SEED
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|numMapTasks
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LG_NUMMAPTASKS
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|LG_ROOT
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|durations
index|[
literal|0
index|]
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|LG_ELAPSEDTIME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|LG_STARTTIME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scriptFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|LG_SCRIPTFILE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flagFile
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|LG_FLAGFILE
argument_list|,
name|FLAGFILE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|durations
index|[
literal|0
index|]
operator|>
literal|0
operator|&&
name|scriptFile
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot specify both ElapsedTime and ScriptFile, exiting"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|scriptFile
operator|!=
literal|null
operator|&&
name|loadScriptFile
argument_list|(
name|scriptFile
argument_list|,
literal|false
argument_list|)
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error in scriptFile, exiting"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading script file "
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|durations
index|[
literal|0
index|]
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"A duration of zero or less is not allowed when running via MapReduce."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ReducerThatCollectsLGdata
specifier|public
specifier|static
class|class
name|ReducerThatCollectsLGdata
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|result
specifier|private
name|IntWritable
name|result
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|jobConf
operator|=
name|job
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reduce (Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|values
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|OPEN_EXECTIME
argument_list|)
condition|)
block|{
name|executionTime
index|[
name|OPEN
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NUMOPS_OPEN
argument_list|)
condition|)
block|{
name|numOfOps
index|[
name|OPEN
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|LIST_EXECTIME
argument_list|)
condition|)
block|{
name|executionTime
index|[
name|LIST
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NUMOPS_LIST
argument_list|)
condition|)
block|{
name|numOfOps
index|[
name|LIST
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|DELETE_EXECTIME
argument_list|)
condition|)
block|{
name|executionTime
index|[
name|DELETE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NUMOPS_DELETE
argument_list|)
condition|)
block|{
name|numOfOps
index|[
name|DELETE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|CREATE_EXECTIME
argument_list|)
condition|)
block|{
name|executionTime
index|[
name|CREATE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NUMOPS_CREATE
argument_list|)
condition|)
block|{
name|numOfOps
index|[
name|CREATE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|WRITE_CLOSE_EXECTIME
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|WRITE_CLOSE_EXECTIME
operator|+
literal|" = "
operator|+
name|sum
argument_list|)
expr_stmt|;
name|executionTime
index|[
name|WRITE_CLOSE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NUMOPS_WRITE_CLOSE
argument_list|)
condition|)
block|{
name|numOfOps
index|[
name|WRITE_CLOSE
index|]
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|TOTALOPS
argument_list|)
condition|)
block|{
name|totalOps
operator|=
name|sum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|ELAPSED_TIME
argument_list|)
condition|)
block|{
name|totalTime
operator|=
name|sum
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// System.out.println("Key = " + key + " Sum is =" + sum);
comment|// printResults(System.out);
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Output the result to a file Results in the output dir
name|FileContext
name|fc
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not initialize the file system: "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|FSDataOutputStream
name|o
init|=
name|fc
operator|.
name|create
argument_list|(
name|FileOutputFormat
operator|.
name|getTaskOutputPath
argument_list|(
name|jobConf
argument_list|,
literal|"Results"
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|printResults
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

