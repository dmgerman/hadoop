begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SortValidator
operator|.
name|RecordStatsChecker
operator|.
name|NonSplitableSequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|MiniMRYarnCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**   * Utilities used in unit test.  *    */
end_comment

begin_class
DECL|class|UtilsForTests
specifier|public
class|class
name|UtilsForTests
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UtilsForTests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KB
specifier|final
specifier|static
name|long
name|KB
init|=
literal|1024L
operator|*
literal|1
decl_stmt|;
DECL|field|MB
specifier|final
specifier|static
name|long
name|MB
init|=
literal|1024L
operator|*
name|KB
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|long
name|GB
init|=
literal|1024L
operator|*
name|MB
decl_stmt|;
DECL|field|TB
specifier|final
specifier|static
name|long
name|TB
init|=
literal|1024L
operator|*
name|GB
decl_stmt|;
DECL|field|PB
specifier|final
specifier|static
name|long
name|PB
init|=
literal|1024L
operator|*
name|TB
decl_stmt|;
DECL|field|waitLock
specifier|final
specifier|static
name|Object
name|waitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|dfm
specifier|static
name|DecimalFormat
name|dfm
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####.000"
argument_list|)
decl_stmt|;
DECL|field|ifm
specifier|static
name|DecimalFormat
name|ifm
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"###,###,###,###,###"
argument_list|)
decl_stmt|;
DECL|method|dfmt (double d)
specifier|public
specifier|static
name|String
name|dfmt
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|dfm
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|ifmt (double d)
specifier|public
specifier|static
name|String
name|ifmt
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|ifm
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|formatBytes (long numBytes)
specifier|public
specifier|static
name|String
name|formatBytes
parameter_list|(
name|long
name|numBytes
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|bDetails
init|=
literal|true
decl_stmt|;
name|double
name|num
init|=
name|numBytes
decl_stmt|;
if|if
condition|(
name|numBytes
operator|<
name|KB
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|numBytes
operator|+
literal|" B"
argument_list|)
expr_stmt|;
name|bDetails
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBytes
operator|<
name|MB
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|dfmt
argument_list|(
name|num
operator|/
name|KB
argument_list|)
operator|+
literal|" KB"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBytes
operator|<
name|GB
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|dfmt
argument_list|(
name|num
operator|/
name|MB
argument_list|)
operator|+
literal|" MB"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBytes
operator|<
name|TB
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|dfmt
argument_list|(
name|num
operator|/
name|GB
argument_list|)
operator|+
literal|" GB"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBytes
operator|<
name|PB
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|dfmt
argument_list|(
name|num
operator|/
name|TB
argument_list|)
operator|+
literal|" TB"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|dfmt
argument_list|(
name|num
operator|/
name|PB
argument_list|)
operator|+
literal|" PB"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bDetails
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|ifmt
argument_list|(
name|numBytes
argument_list|)
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|formatBytes2 (long numBytes)
specifier|public
specifier|static
name|String
name|formatBytes2
parameter_list|(
name|long
name|numBytes
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|long
name|u
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numBytes
operator|>=
name|TB
condition|)
block|{
name|u
operator|=
name|numBytes
operator|/
name|TB
expr_stmt|;
name|numBytes
operator|-=
name|u
operator|*
name|TB
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|u
operator|+
literal|" TB "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numBytes
operator|>=
name|GB
condition|)
block|{
name|u
operator|=
name|numBytes
operator|/
name|GB
expr_stmt|;
name|numBytes
operator|-=
name|u
operator|*
name|GB
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|u
operator|+
literal|" GB "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numBytes
operator|>=
name|MB
condition|)
block|{
name|u
operator|=
name|numBytes
operator|/
name|MB
expr_stmt|;
name|numBytes
operator|-=
name|u
operator|*
name|MB
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|u
operator|+
literal|" MB "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numBytes
operator|>=
name|KB
condition|)
block|{
name|u
operator|=
name|numBytes
operator|/
name|KB
expr_stmt|;
name|numBytes
operator|-=
name|u
operator|*
name|KB
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|u
operator|+
literal|" KB "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|u
operator|+
literal|" B"
argument_list|)
expr_stmt|;
comment|//even if zero
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|regexpSpecials
specifier|static
specifier|final
name|String
name|regexpSpecials
init|=
literal|"[]()?*+|.!^-\\~@"
decl_stmt|;
DECL|method|regexpEscape (String plain)
specifier|public
specifier|static
name|String
name|regexpEscape
parameter_list|(
name|String
name|plain
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
index|[]
name|ch
init|=
name|plain
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|csup
init|=
name|ch
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|csup
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|regexpSpecials
operator|.
name|indexOf
argument_list|(
name|ch
index|[
name|c
index|]
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|ch
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|safeGetCanonicalPath (File f)
specifier|public
specifier|static
name|String
name|safeGetCanonicalPath
parameter_list|(
name|File
name|f
parameter_list|)
block|{
try|try
block|{
name|String
name|s
init|=
name|f
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
return|return
operator|(
name|s
operator|==
literal|null
operator|)
condition|?
name|f
operator|.
name|toString
argument_list|()
else|:
name|s
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
return|return
name|f
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|slurp (File f)
specifier|public
specifier|static
name|String
name|slurp
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|f
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
DECL|method|slurpHadoop (Path p, FileSystem fs)
specifier|public
specifier|static
name|String
name|slurpHadoop
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
DECL|method|rjustify (String s, int width)
specifier|public
specifier|static
name|String
name|rjustify
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|"null"
expr_stmt|;
if|if
condition|(
name|width
operator|>
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
name|s
operator|=
name|getSpace
argument_list|(
name|width
operator|-
name|s
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|ljustify (String s, int width)
specifier|public
specifier|static
name|String
name|ljustify
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|"null"
expr_stmt|;
if|if
condition|(
name|width
operator|>
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
name|s
operator|=
name|s
operator|+
name|getSpace
argument_list|(
name|width
operator|-
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|field|space
specifier|static
name|char
index|[]
name|space
decl_stmt|;
static|static
block|{
name|space
operator|=
operator|new
name|char
index|[
literal|300
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|space
argument_list|,
literal|'\u0020'
argument_list|)
expr_stmt|;
block|}
DECL|method|getSpace (int len)
specifier|public
specifier|static
name|String
name|getSpace
parameter_list|(
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
name|space
operator|.
name|length
condition|)
block|{
name|space
operator|=
operator|new
name|char
index|[
name|Math
operator|.
name|max
argument_list|(
name|len
argument_list|,
literal|2
operator|*
name|space
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|space
argument_list|,
literal|'\u0020'
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|space
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * Gets job status from the jobtracker given the jobclient and the job id    */
DECL|method|getJobStatus (JobClient jc, JobID id)
specifier|static
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobClient
name|jc
parameter_list|,
name|JobID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|JobStatus
index|[]
name|statuses
init|=
name|jc
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobStatus
name|jobStatus
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|jobStatus
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|jobStatus
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * A utility that waits for specified amount of time    */
DECL|method|waitFor (long duration)
specifier|public
specifier|static
name|void
name|waitFor
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|wait
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
comment|/**    * Wait for the jobtracker to be RUNNING.    */
DECL|method|waitForJobTracker (JobClient jobClient)
specifier|static
name|void
name|waitForJobTracker
parameter_list|(
name|JobClient
name|jobClient
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|ClusterStatus
name|status
init|=
name|jobClient
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
while|while
condition|(
name|status
operator|.
name|getJobTrackerStatus
argument_list|()
operator|!=
name|JobTrackerStatus
operator|.
name|RUNNING
condition|)
block|{
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|status
operator|=
name|jobClient
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
block|}
break|break;
comment|// means that the jt is ready
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
block|}
block|}
comment|/**    * Waits until all the jobs at the jobtracker complete.    */
DECL|method|waitTillDone (JobClient jobClient)
specifier|static
name|void
name|waitTillDone
parameter_list|(
name|JobClient
name|jobClient
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Wait for the last job to complete
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|shouldWait
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JobStatus
name|jobStatuses
range|:
name|jobClient
operator|.
name|getAllJobs
argument_list|()
control|)
block|{
if|if
condition|(
name|jobStatuses
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|SUCCEEDED
operator|&&
name|jobStatuses
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|FAILED
operator|&&
name|jobStatuses
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|KILLED
condition|)
block|{
name|shouldWait
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|shouldWait
condition|)
block|{
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Configure a waiting job    */
DECL|method|configureWaitingJobConf (JobConf jobConf, Path inDir, Path outputPath, int numMaps, int numRed, String jobName, String mapSignalFilename, String redSignalFilename)
specifier|static
name|void
name|configureWaitingJobConf
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numRed
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|mapSignalFilename
parameter_list|,
name|String
name|redSignalFilename
parameter_list|)
throws|throws
name|IOException
block|{
name|jobConf
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|NonSplitableSequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|UtilsForTests
operator|.
name|HalfWaitingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|numRed
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setJar
argument_list|(
literal|"build/test/mapred/testjar/testjob.jar"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|getTaskSignalParameter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|mapSignalFilename
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|getTaskSignalParameter
argument_list|(
literal|false
argument_list|)
argument_list|,
name|redSignalFilename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commonly used map and reduce classes     */
comment|/**     * Map is a Mapper that just waits for a file to be created on the dfs. The     * file creation is a signal to the mappers and hence acts as a waiting job.     */
DECL|class|WaitingMapper
specifier|static
class|class
name|WaitingMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|signal
name|Path
name|signal
decl_stmt|;
DECL|field|id
name|int
name|id
init|=
literal|0
decl_stmt|;
DECL|field|totalMaps
name|int
name|totalMaps
init|=
literal|0
decl_stmt|;
comment|/**      * Checks if the map task needs to wait. By default all the maps will wait.      * This method needs to be overridden to make a custom waiting mapper.       */
DECL|method|shouldWait (int id)
specifier|public
name|boolean
name|shouldWait
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Returns a signal file on which the map task should wait. By default all       * the maps wait on a single file passed as test.mapred.map.waiting.target.      * This method needs to be overridden to make a custom waiting mapper      */
DECL|method|getSignalFile (int id)
specifier|public
name|Path
name|getSignalFile
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|signal
return|;
block|}
comment|/** The waiting function.  The map exits once it gets a signal. Here the       * signal is the file existence.       */
DECL|method|map (WritableComparable key, Writable val, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldWait
argument_list|(
name|id
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|getSignalFile
argument_list|(
name|id
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for 1 sec
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted while the map was waiting for "
operator|+
literal|" the signal."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get the DFS!!"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|String
name|taskId
init|=
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
decl_stmt|;
name|id
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|taskId
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|totalMaps
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|NUM_MAPS
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|signal
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|getTaskSignalParameter
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got an exception while obtaining the filesystem"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Only the later half of the maps wait for the signal while the rest     * complete immediately.    */
DECL|class|HalfWaitingMapper
specifier|static
class|class
name|HalfWaitingMapper
extends|extends
name|WaitingMapper
block|{
annotation|@
name|Override
DECL|method|shouldWait (int id)
specifier|public
name|boolean
name|shouldWait
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|id
operator|>=
operator|(
name|totalMaps
operator|/
literal|2
operator|)
return|;
block|}
block|}
comment|/**     * Reduce that just waits for a file to be created on the dfs. The     * file creation is a signal to the reduce.    */
DECL|class|WaitingReducer
specifier|static
class|class
name|WaitingReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|signal
name|Path
name|signal
decl_stmt|;
comment|/** The waiting function.  The reduce exits once it gets a signal. Here the      * signal is the file existence.       */
DECL|method|reduce (WritableComparable key, Iterator<Writable> val, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|signal
argument_list|)
condition|)
block|{
try|try
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for 1 sec
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted while the map was waiting for the"
operator|+
literal|" signal."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get the DFS!!"
argument_list|)
throw|;
block|}
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|signal
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|getTaskSignalParameter
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got an exception while obtaining the filesystem"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTaskSignalParameter (boolean isMap)
specifier|static
name|String
name|getTaskSignalParameter
parameter_list|(
name|boolean
name|isMap
parameter_list|)
block|{
return|return
name|isMap
condition|?
literal|"test.mapred.map.waiting.target"
else|:
literal|"test.mapred.reduce.waiting.target"
return|;
block|}
comment|/**    * Signal the maps/reduces to start.    */
DECL|method|signalTasks (MiniDFSCluster dfs, FileSystem fileSys, String mapSignalFile, String reduceSignalFile, int replication)
specifier|static
name|void
name|signalTasks
parameter_list|(
name|MiniDFSCluster
name|dfs
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|String
name|mapSignalFile
parameter_list|,
name|String
name|reduceSignalFile
parameter_list|,
name|int
name|replication
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
try|try
block|{
name|writeFile
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|mapSignalFile
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|reduceSignalFile
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
comment|/**    * Signal the maps/reduces to start.    */
DECL|method|signalTasks (MiniDFSCluster dfs, FileSystem fileSys, boolean isMap, String mapSignalFile, String reduceSignalFile)
specifier|static
name|void
name|signalTasks
parameter_list|(
name|MiniDFSCluster
name|dfs
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|String
name|mapSignalFile
parameter_list|,
name|String
name|reduceSignalFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
try|try
block|{
comment|//  signal the maps to complete
name|writeFile
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
argument_list|,
name|isMap
condition|?
operator|new
name|Path
argument_list|(
name|mapSignalFile
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|reduceSignalFile
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
DECL|method|getSignalFile (Path dir)
specifier|static
name|String
name|getSignalFile
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"signal"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getMapSignalFile (Path dir)
specifier|static
name|String
name|getMapSignalFile
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"map-signal"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getReduceSignalFile (Path dir)
specifier|static
name|String
name|getReduceSignalFile
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"reduce-signal"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeFile (NameNode namenode, Configuration conf, Path name, short replication)
specifier|static
name|void
name|writeFile
parameter_list|(
name|NameNode
name|namenode
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|name
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fileSys
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|BytesWritable
argument_list|()
argument_list|,
operator|new
name|BytesWritable
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileSys
operator|.
name|setReplication
argument_list|(
name|name
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
comment|// Input formats
comment|/**    * A custom input format that creates virtual inputs of a single string    * for each map.     */
DECL|class|RandomInputFormat
specifier|public
specifier|static
class|class
name|RandomInputFormat
implements|implements
name|InputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|InputSplit
index|[]
name|result
init|=
operator|new
name|InputSplit
index|[
name|numSplits
index|]
decl_stmt|;
name|Path
name|outDir
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
literal|"dummy-split-"
operator|+
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|class|RandomRecordReader
specifier|static
class|class
name|RandomRecordReader
implements|implements
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|name
name|Path
name|name
decl_stmt|;
DECL|method|RandomRecordReader (Path p)
specifier|public
name|RandomRecordReader
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|name
operator|=
name|p
expr_stmt|;
block|}
DECL|method|next (Text key, Text value)
specifier|public
name|boolean
name|next
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|set
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createKey ()
specifier|public
name|Text
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
block|}
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RandomRecordReader
argument_list|(
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Start a job and return its RunningJob object
DECL|method|runJob (JobConf conf, Path inDir, Path outDir)
specifier|static
name|RunningJob
name|runJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|conf
operator|.
name|getNumMapTasks
argument_list|()
argument_list|,
name|conf
operator|.
name|getNumReduceTasks
argument_list|()
argument_list|)
return|;
block|}
comment|// Start a job and return its RunningJob object
DECL|method|runJob (JobConf conf, Path inDir, Path outDir, int numMaps, int numReds)
specifier|static
name|RunningJob
name|runJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|input
init|=
literal|"The quick brown fox\n"
operator|+
literal|"has many silly\n"
operator|+
literal|"red fox sox\n"
decl_stmt|;
comment|// submit the job and wait for it to complete
return|return
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|numMaps
argument_list|,
name|numReds
argument_list|,
name|input
argument_list|)
return|;
block|}
comment|// Start a job with the specified input and return its RunningJob object
DECL|method|runJob (JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input)
specifier|static
name|RunningJob
name|runJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
operator|++
name|i
control|)
block|{
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReds
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|job
return|;
block|}
DECL|method|waitForAppFinished (RunningJob job, MiniMRYarnCluster cluster)
specifier|public
specifier|static
name|void
name|waitForAppFinished
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|MiniMRYarnCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|job
operator|.
name|getID
argument_list|()
operator|.
name|getJtIdentifier
argument_list|()
argument_list|)
argument_list|,
name|job
operator|.
name|getID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|rmApps
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmApps
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Job not found"
argument_list|)
throw|;
block|}
specifier|final
name|RMApp
name|rmApp
init|=
name|rmApps
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|RMAppImpl
operator|.
name|isAppInFinalState
argument_list|(
name|rmApp
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|1000
operator|*
literal|180
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|InterruptedException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Yarn application with "
operator|+
name|appId
operator|+
literal|" didn't finish "
operator|+
literal|"did not reach finale State"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
block|}
comment|// Run a job that will be succeeded and wait until it completes
DECL|method|runJobSucceed (JobConf conf, Path inDir, Path outDir)
specifier|public
specifier|static
name|RunningJob
name|runJobSucceed
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"test-job-succeed"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|long
name|sleepCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|sleepCount
operator|>
literal|300
condition|)
block|{
comment|// 30 seconds
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Job didn't finish in 30 seconds"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sleepCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
return|return
name|job
return|;
block|}
comment|// Run a job that will be failed and wait until it completes
DECL|method|runJobFail (JobConf conf, Path inDir, Path outDir)
specifier|public
specifier|static
name|RunningJob
name|runJobFail
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"test-job-fail"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|FailMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|long
name|sleepCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|sleepCount
operator|>
literal|300
condition|)
block|{
comment|// 30 seconds
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Job didn't finish in 30 seconds"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sleepCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
return|return
name|job
return|;
block|}
comment|// Run a job that will be killed and wait until it completes
DECL|method|runJobKill (JobConf conf, Path inDir, Path outDir)
specifier|public
specifier|static
name|RunningJob
name|runJobKill
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"test-job-kill"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|KillMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|long
name|sleepCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|job
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
if|if
condition|(
name|sleepCount
operator|>
literal|300
condition|)
block|{
comment|// 30 seconds
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Job didn't finish in 30 seconds"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sleepCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|sleepCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|job
operator|.
name|cleanupProgress
argument_list|()
operator|==
literal|0.0f
condition|)
block|{
try|try
block|{
if|if
condition|(
name|sleepCount
operator|>
literal|2000
condition|)
block|{
comment|// 20 seconds
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Job cleanup didn't start in 20 seconds"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|sleepCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
return|return
name|job
return|;
block|}
comment|/**    * Cleans up files/dirs inline. CleanupQueue deletes in a separate thread    * asynchronously.    */
DECL|class|InlineCleanupQueue
specifier|public
specifier|static
class|class
name|InlineCleanupQueue
extends|extends
name|CleanupQueue
block|{
DECL|field|stalePaths
name|List
argument_list|<
name|String
argument_list|>
name|stalePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|InlineCleanupQueue ()
specifier|public
name|InlineCleanupQueue
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|addToQueue (PathDeletionContext... contexts)
specifier|public
name|void
name|addToQueue
parameter_list|(
name|PathDeletionContext
modifier|...
name|contexts
parameter_list|)
block|{
comment|// delete paths in-line
for|for
control|(
name|PathDeletionContext
name|context
range|:
name|contexts
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|deletePath
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stale path "
operator|+
name|context
operator|.
name|fullPath
argument_list|)
expr_stmt|;
name|stalePaths
operator|.
name|add
argument_list|(
name|context
operator|.
name|fullPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while deleting path "
operator|+
name|context
operator|.
name|fullPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|stalePaths
operator|.
name|add
argument_list|(
name|context
operator|.
name|fullPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|FakeClock
specifier|static
class|class
name|FakeClock
extends|extends
name|Clock
block|{
DECL|field|time
name|long
name|time
init|=
literal|0
decl_stmt|;
DECL|method|advance (long millis)
specifier|public
name|void
name|advance
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|time
operator|+=
name|millis
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTime ()
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
block|}
comment|// Mapper that fails
DECL|class|FailMapper
specifier|static
class|class
name|FailMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|//NOTE- the next line is required for the TestDebugScript test to succeed
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"failing map"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failing map"
argument_list|)
throw|;
block|}
block|}
comment|// Mapper that sleeps for a long time.
comment|// Used for running a job that will be killed
DECL|class|KillMapper
specifier|static
class|class
name|KillMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
DECL|method|setUpConfigFile (Properties confProps, File configFile)
specifier|static
name|void
name|setUpConfigFile
parameter_list|(
name|Properties
name|confProps
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|confProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|writeXml
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates a file in the dfs    * @param dfs FileSystem Local File System where file needs to be picked    * @param URIPATH Path dfs path where file needs to be copied    * @param permission FsPermission File permission    * @return returns the DataOutputStream    */
specifier|public
specifier|static
name|DataOutputStream
DECL|method|createTmpFileDFS (FileSystem dfs, Path URIPATH, FsPermission permission, String input)
name|createTmpFileDFS
parameter_list|(
name|FileSystem
name|dfs
parameter_list|,
name|Path
name|URIPATH
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Creating the path with the file
name|DataOutputStream
name|file
init|=
name|FileSystem
operator|.
name|create
argument_list|(
name|dfs
argument_list|,
name|URIPATH
argument_list|,
name|permission
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
comment|/**    * This formats the long tasktracker name to just the FQDN    * @param taskTrackerLong String The long format of the tasktracker string    * @return String The FQDN of the tasktracker    * @throws Exception    */
DECL|method|getFQDNofTT (String taskTrackerLong)
specifier|public
specifier|static
name|String
name|getFQDNofTT
parameter_list|(
name|String
name|taskTrackerLong
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Getting the exact FQDN of the tasktracker from the tasktracker string.
name|String
index|[]
name|firstSplit
init|=
name|taskTrackerLong
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|tmpOutput
init|=
name|firstSplit
index|[
literal|1
index|]
decl_stmt|;
name|String
index|[]
name|secondSplit
init|=
name|tmpOutput
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|tmpTaskTracker
init|=
name|secondSplit
index|[
literal|0
index|]
decl_stmt|;
return|return
name|tmpTaskTracker
return|;
block|}
block|}
end_class

end_unit

