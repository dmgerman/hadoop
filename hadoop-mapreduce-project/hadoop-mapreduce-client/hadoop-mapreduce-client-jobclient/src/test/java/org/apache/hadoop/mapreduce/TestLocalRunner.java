begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|LocalJobRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Stress tests for the LocalJobRunner  */
end_comment

begin_class
DECL|class|TestLocalRunner
specifier|public
class|class
name|TestLocalRunner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLocalRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INPUT_SIZES
specifier|private
specifier|static
name|int
name|INPUT_SIZES
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|50000
block|,
literal|500
block|,
literal|500
block|,
literal|20
block|,
literal|5000
block|,
literal|500
block|}
decl_stmt|;
DECL|field|OUTPUT_SIZES
specifier|private
specifier|static
name|int
name|OUTPUT_SIZES
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|500
block|,
literal|500
block|,
literal|500
block|,
literal|500
block|,
literal|500
block|}
decl_stmt|;
DECL|field|SLEEP_INTERVALS
specifier|private
specifier|static
name|int
name|SLEEP_INTERVALS
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|10000
block|,
literal|15
block|,
literal|15
block|,
literal|20
block|,
literal|250
block|,
literal|60
block|}
decl_stmt|;
DECL|class|StressMapper
specifier|private
specifier|static
class|class
name|StressMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
comment|// Different map tasks operate at different speeds.
comment|// We define behavior for 6 threads.
DECL|field|threadId
specifier|private
name|int
name|threadId
decl_stmt|;
comment|// Used to ensure that the compiler doesn't optimize away
comment|// some code.
DECL|field|exposedState
specifier|public
name|long
name|exposedState
decl_stmt|;
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
comment|// Get the thread num from the file number.
name|FileSplit
name|split
init|=
operator|(
name|FileSplit
operator|)
name|context
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
name|split
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|filePath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|threadId
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread "
operator|+
name|threadId
operator|+
literal|" : "
operator|+
name|context
operator|.
name|getInputSplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Map method with different behavior based on the thread id */
DECL|method|map (LongWritable key, Text val, Context c)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|Context
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Write many values quickly.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|OUTPUT_SIZES
index|[
name|threadId
index|]
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|write
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|SLEEP_INTERVALS
index|[
name|threadId
index|]
operator|==
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
comment|// Output this here, to ensure that the incrementing done in map()
comment|// cannot be optimized away.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Busy loop counter: "
operator|+
name|this
operator|.
name|exposedState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CountingReducer
specifier|private
specifier|static
class|class
name|CountingReducer
extends|extends
name|Reducer
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|method|reduce (LongWritable key, Iterable<Text> vals, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|Text
argument_list|>
name|vals
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|out
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Text
name|val
range|:
name|vals
control|)
block|{
name|out
operator|++
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GCMapper
specifier|private
specifier|static
class|class
name|GCMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|map (LongWritable key, Text val, Context c)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|Context
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Create a whole bunch of objects.
name|List
argument_list|<
name|Integer
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
name|i
operator|++
control|)
block|{
name|lst
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Actually use this list, to ensure that it isn't just optimized away.
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
range|:
name|lst
control|)
block|{
name|sum
operator|+=
name|x
expr_stmt|;
block|}
comment|// throw away the list and run a GC.
name|lst
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|c
operator|.
name|write
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|sum
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a single input file in the input directory.    * @param dirPath the directory in which the file resides    * @param id the file id number    * @param numRecords how many records to write to each file.    */
DECL|method|createInputFile (Path dirPath, int id, int numRecords)
specifier|private
name|void
name|createInputFile
parameter_list|(
name|Path
name|dirPath
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|MESSAGE
init|=
literal|"This is a line in a file: "
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|""
operator|+
name|id
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|write
argument_list|(
name|MESSAGE
operator|+
name|id
operator|+
literal|" "
operator|+
name|i
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// This is the total number of map output records we expect to generate,
comment|// based on input file sizes (see createMultiMapsInput()) and the behavior
comment|// of the different StressMapper threads.
DECL|field|TOTAL_RECORDS
specifier|private
specifier|static
name|int
name|TOTAL_RECORDS
init|=
literal|0
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|TOTAL_RECORDS
operator|+=
name|INPUT_SIZES
index|[
name|i
index|]
operator|*
name|OUTPUT_SIZES
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|field|INPUT_DIR
specifier|private
specifier|final
name|String
name|INPUT_DIR
init|=
literal|"multiMapInput"
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|private
specifier|final
name|String
name|OUTPUT_DIR
init|=
literal|"multiMapOutput"
decl_stmt|;
DECL|method|getInputPath ()
specifier|private
name|Path
name|getInputPath
parameter_list|()
block|{
name|String
name|dataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataDir
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|INPUT_DIR
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
argument_list|,
name|INPUT_DIR
argument_list|)
return|;
block|}
block|}
DECL|method|getOutputPath ()
specifier|private
name|Path
name|getOutputPath
parameter_list|()
block|{
name|String
name|dataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataDir
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
argument_list|,
name|OUTPUT_DIR
argument_list|)
return|;
block|}
block|}
comment|/**    * Create the inputs for the MultiMaps test.    * @return the path to the input directory.    */
DECL|method|createMultiMapsInput ()
specifier|private
name|Path
name|createMultiMapsInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|inputPath
init|=
name|getInputPath
argument_list|()
decl_stmt|;
comment|// Clear the input directory if it exists, first.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Create input files, with sizes calibrated based on
comment|// the amount of work done in each mapper.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|createInputFile
argument_list|(
name|inputPath
argument_list|,
name|i
argument_list|,
name|INPUT_SIZES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|inputPath
return|;
block|}
comment|/**    * Verify that we got the correct amount of output.    */
DECL|method|verifyOutput (Path outputPath)
specifier|private
name|void
name|verifyOutput
parameter_list|(
name|Path
name|outputPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|outputFile
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|outputFile
argument_list|)
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|// Should get a single line of the form "0\t(count)"
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Line does not have correct key"
argument_list|,
name|line
operator|.
name|startsWith
argument_list|(
literal|"0\t"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect count generated!"
argument_list|,
name|TOTAL_RECORDS
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that the GC counter actually increments when we know that we've    * spent some time in the GC during the mapper.    */
annotation|@
name|Test
DECL|method|testGcCounter ()
specifier|public
name|void
name|testGcCounter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|inputPath
init|=
name|getInputPath
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Clear input/output dirs.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Create one input file
name|createInputFile
argument_list|(
name|inputPath
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Now configure and run the job.
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|GCMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"job failed"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|// This job should have done *some* gc work.
comment|// It had to clean up 400,000 objects.
comment|// We strongly suspect this will result in a few milliseconds effort.
name|Counter
name|gcCounter
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|GC_TIME_MILLIS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|gcCounter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No time spent in gc"
argument_list|,
name|gcCounter
operator|.
name|getValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a test with several mappers in parallel, operating at different    * speeds. Verify that the correct amount of output is created.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120
operator|*
literal|1000
argument_list|)
DECL|method|testMultiMaps ()
specifier|public
name|void
name|testMultiMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|inputPath
init|=
name|createMultiMapsInput
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|StressMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|CountingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LocalJobRunner
operator|.
name|setLocalMaxRunningMaps
argument_list|(
name|job
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|toInterrupt
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|Thread
name|interrupter
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 2m
name|toInterrupt
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting job..."
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting thread to interrupt main thread in 2 minutes"
argument_list|)
expr_stmt|;
name|interrupter
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job to complete..."
argument_list|)
expr_stmt|;
try|try
block|{
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while waiting for job completion"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dumping stacks"
argument_list|)
expr_stmt|;
name|ReflectionUtils
operator|.
name|logThreadInfo
argument_list|(
name|LOG
argument_list|,
literal|"multimap threads"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ie
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Job completed, stopping interrupter"
argument_list|)
expr_stmt|;
name|interrupter
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|interrupter
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// it might interrupt us right as we interrupt it
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying output"
argument_list|)
expr_stmt|;
name|verifyOutput
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a test with a misconfigured number of mappers.    * Expect failure.    */
annotation|@
name|Test
DECL|method|testInvalidMultiMapParallelism ()
specifier|public
name|void
name|testInvalidMultiMapParallelism
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|inputPath
init|=
name|createMultiMapsInput
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|StressMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|CountingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LocalJobRunner
operator|.
name|setLocalMaxRunningMaps
argument_list|(
name|job
argument_list|,
operator|-
literal|6
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Job succeeded somehow"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
comment|/** An IF that creates no splits */
DECL|class|EmptyInputFormat
specifier|private
specifier|static
class|class
name|EmptyInputFormat
extends|extends
name|InputFormat
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
return|;
block|}
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|EmptyRecordReader
argument_list|()
return|;
block|}
block|}
DECL|class|EmptyRecordReader
specifier|private
specifier|static
class|class
name|EmptyRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{     }
DECL|method|getCurrentKey ()
specifier|public
name|Object
name|getCurrentKey
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
DECL|method|getCurrentValue ()
specifier|public
name|Object
name|getCurrentValue
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Test case for zero mappers */
annotation|@
name|Test
DECL|method|testEmptyMaps ()
specifier|public
name|void
name|testEmptyMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|EmptyInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty job should work"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
comment|/** @return the directory where numberfiles are written (mapper inputs)  */
DECL|method|getNumberDirPath ()
specifier|private
name|Path
name|getNumberDirPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getInputPath
argument_list|()
argument_list|,
literal|"numberfiles"
argument_list|)
return|;
block|}
comment|/**    * Write out an input file containing an integer.    *    * @param fileNum the file number to write to.    * @param value the value to write to the file    * @return the path of the written file.    */
DECL|method|makeNumberFile (int fileNum, int value)
specifier|private
name|Path
name|makeNumberFile
parameter_list|(
name|int
name|fileNum
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
init|=
name|getNumberDirPath
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"file"
operator|+
name|fileNum
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|""
operator|+
name|value
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|filePath
return|;
block|}
comment|/**    * Each record received by this mapper is a number 'n'.    * Emit the values [0..n-1]    */
DECL|class|SequenceMapper
specifier|public
specifier|static
class|class
name|SequenceMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|method|map (LongWritable k, Text v, Context c)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|k
parameter_list|,
name|Text
name|v
parameter_list|,
name|Context
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|max
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|NUMBER_FILE_VAL
specifier|private
specifier|final
specifier|static
name|int
name|NUMBER_FILE_VAL
init|=
literal|100
decl_stmt|;
comment|/**    * Tally up the values and ensure that we got as much data    * out as we put in.    * Each mapper generated 'NUMBER_FILE_VAL' values (0..NUMBER_FILE_VAL-1).    * Verify that across all our reducers we got exactly this much    * data back.    */
DECL|method|verifyNumberJob (int numMaps)
specifier|private
name|void
name|verifyNumberJob
parameter_list|(
name|int
name|numMaps
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputDir
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|int
name|valueSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|stats
control|)
block|{
name|FSDataInputStream
name|istream
init|=
name|fs
operator|.
name|open
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|istream
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|valueSum
operator|+=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|maxVal
init|=
name|NUMBER_FILE_VAL
operator|-
literal|1
decl_stmt|;
name|int
name|expectedPerMapper
init|=
name|maxVal
operator|*
operator|(
name|maxVal
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|expectedSum
init|=
name|expectedPerMapper
operator|*
name|numMaps
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expected sum: "
operator|+
name|expectedSum
operator|+
literal|", got "
operator|+
name|valueSum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Didn't get all our results back"
argument_list|,
name|expectedSum
argument_list|,
name|valueSum
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a test which creates a SequenceMapper / IdentityReducer    * job over a set of generated number files.    */
DECL|method|doMultiReducerTest (int numMaps, int numReduces, int parallelMaps, int parallelReduces)
specifier|private
name|void
name|doMultiReducerTest
parameter_list|(
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|,
name|int
name|parallelMaps
parameter_list|,
name|int
name|parallelReduces
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|in
init|=
name|getNumberDirPath
argument_list|()
decl_stmt|;
name|Path
name|out
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
comment|// Clear data from any previous tests.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|out
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
name|i
operator|++
control|)
block|{
name|makeNumberFile
argument_list|(
name|i
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SequenceMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|LocalJobRunner
operator|.
name|setLocalMaxRunningMaps
argument_list|(
name|job
argument_list|,
name|parallelMaps
argument_list|)
expr_stmt|;
name|LocalJobRunner
operator|.
name|setLocalMaxRunningReduces
argument_list|(
name|job
argument_list|,
name|parallelReduces
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed!!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verifyNumberJob
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneMapMultiReduce ()
specifier|public
name|void
name|testOneMapMultiReduce
parameter_list|()
throws|throws
name|Exception
block|{
name|doMultiReducerTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneMapMultiParallelReduce ()
specifier|public
name|void
name|testOneMapMultiParallelReduce
parameter_list|()
throws|throws
name|Exception
block|{
name|doMultiReducerTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMapOneReduce ()
specifier|public
name|void
name|testMultiMapOneReduce
parameter_list|()
throws|throws
name|Exception
block|{
name|doMultiReducerTest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMapMultiReduce ()
specifier|public
name|void
name|testMultiMapMultiReduce
parameter_list|()
throws|throws
name|Exception
block|{
name|doMultiReducerTest
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

