begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * Utility methods used in various Job Control unit tests.  */
end_comment

begin_class
DECL|class|JobControlTestUtils
specifier|public
class|class
name|JobControlTestUtils
block|{
DECL|field|rand
specifier|static
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|idFormat
specifier|private
specifier|static
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans the data from the passed Path in the passed FileSystem.    *     * @param fs FileSystem to delete data from.    * @param dirPath Path to be deleted.    * @throws IOException If an error occurs cleaning the data.    */
DECL|method|cleanData (FileSystem fs, Path dirPath)
specifier|static
name|void
name|cleanData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a string of random digits.    *     * @return A random string.    */
DECL|method|generateRandomWord ()
specifier|private
specifier|static
name|String
name|generateRandomWord
parameter_list|()
block|{
return|return
name|idFormat
operator|.
name|format
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Generates a line of random text.    *     * @return A line of random text.    */
DECL|method|generateRandomLine ()
specifier|private
specifier|static
name|String
name|generateRandomLine
parameter_list|()
block|{
name|long
name|r
init|=
name|rand
operator|.
name|nextLong
argument_list|()
operator|%
literal|7
decl_stmt|;
name|long
name|n
init|=
name|r
operator|+
literal|20
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|generateRandomWord
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Generates data that can be used for Job Control tests.    *     * @param fs FileSystem to create data in.    * @param dirPath Path to create the data in.    * @throws IOException If an error occurs creating the data.    */
DECL|method|generateData (FileSystem fs, Path dirPath)
specifier|static
name|void
name|generateData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"data.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|generateRandomLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a simple copy job.    *     * @param indirs List of input directories.    * @param outdir Output directory.    * @return JobConf initialised for a simple copy job.    * @throws Exception If an error occurs creating job configuration.    */
DECL|method|createCopyJob (List<Path> indirs, Path outdir)
specifier|static
name|JobConf
name|createCopyJob
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|indirs
parameter_list|,
name|Path
name|outdir
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|defaults
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobConf
name|theJob
init|=
operator|new
name|JobConf
argument_list|(
name|defaults
argument_list|,
name|TestJobControl
operator|.
name|class
argument_list|)
decl_stmt|;
name|theJob
operator|.
name|setJobName
argument_list|(
literal|"DataMoveJob"
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|theJob
argument_list|,
name|indirs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setMapperClass
argument_list|(
name|DataCopy
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|theJob
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setReducerClass
argument_list|(
name|DataCopy
operator|.
name|class
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setNumMapTasks
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|theJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|theJob
return|;
block|}
comment|/**    * Simple Mapper and Reducer implementation which copies data it reads in.    */
DECL|class|DataCopy
specifier|public
specifier|static
class|class
name|DataCopy
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
implements|,
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|dumbKey
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|data
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|dumbKey
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

