begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestIndexCache
specifier|public
class|class
name|TestIndexCache
extends|extends
name|TestCase
block|{
DECL|method|testLRCPolicy ()
specifier|public
name|void
name|testLRCPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"cache"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_INDEX_CACHE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|partsPerMap
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|bytesPerFile
init|=
name|partsPerMap
operator|*
literal|24
decl_stmt|;
name|IndexCache
name|cache
init|=
operator|new
name|IndexCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// fill cache
name|int
name|totalsize
init|=
name|bytesPerFile
decl_stmt|;
for|for
control|(
init|;
name|totalsize
operator|<
literal|1024
operator|*
literal|1024
condition|;
name|totalsize
operator|+=
name|bytesPerFile
control|)
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|totalsize
argument_list|,
literal|36
argument_list|)
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|totalsize
argument_list|,
name|partsPerMap
argument_list|)
expr_stmt|;
name|IndexRecord
name|rec
init|=
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|totalsize
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
name|f
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|checkRecord
argument_list|(
name|rec
argument_list|,
name|totalsize
argument_list|)
expr_stmt|;
block|}
comment|// delete files, ensure cache retains all elem
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|bytesPerFile
init|;
name|i
operator|<
literal|1024
operator|*
literal|1024
condition|;
name|i
operator|+=
name|bytesPerFile
control|)
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|,
literal|36
argument_list|)
argument_list|)
decl_stmt|;
name|IndexRecord
name|rec
init|=
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
name|f
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|checkRecord
argument_list|(
name|rec
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// push oldest (bytesPerFile) out of cache
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|totalsize
argument_list|,
literal|36
argument_list|)
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|totalsize
argument_list|,
name|partsPerMap
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|totalsize
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
name|f
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// oldest fails to read, or error
name|boolean
name|fnf
init|=
literal|false
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|bytesPerFile
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bytesPerFile
argument_list|)
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|fnf
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fnf
condition|)
name|fail
argument_list|(
literal|"Failed to push out last entry"
argument_list|)
expr_stmt|;
comment|// should find all the other entries
for|for
control|(
name|int
name|i
init|=
name|bytesPerFile
operator|<<
literal|1
init|;
name|i
operator|<
literal|1024
operator|*
literal|1024
condition|;
name|i
operator|+=
name|bytesPerFile
control|)
block|{
name|IndexRecord
name|rec
init|=
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|,
literal|36
argument_list|)
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|checkRecord
argument_list|(
name|rec
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|IndexRecord
name|rec
init|=
name|cache
operator|.
name|getIndexInformation
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|totalsize
argument_list|,
literal|36
argument_list|)
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|partsPerMap
argument_list|)
argument_list|,
name|f
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|checkRecord
argument_list|(
name|rec
argument_list|,
name|totalsize
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadIndex ()
specifier|public
name|void
name|testBadIndex
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|parts
init|=
literal|30
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"cache"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_INDEX_CACHE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IndexCache
name|cache
init|=
operator|new
name|IndexCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"badindex"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CheckedOutputStream
name|iout
init|=
operator|new
name|CheckedOutputStream
argument_list|(
name|out
argument_list|,
operator|new
name|CRC32
argument_list|()
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|iout
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MapTask
operator|.
name|MAP_OUTPUT_INDEX_RECORD_LENGTH
operator|/
literal|8
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
literal|0
operator|==
operator|(
name|i
operator|%
literal|3
operator|)
condition|)
block|{
name|dout
operator|.
name|writeLong
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|iout
operator|.
name|getChecksum
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getIndexInformation
argument_list|(
literal|"badindex"
argument_list|,
literal|7
argument_list|,
name|f
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not detect bad checksum"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ChecksumException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|testInvalidReduceNumberOrLength ()
specifier|public
name|void
name|testInvalidReduceNumberOrLength
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"cache"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_INDEX_CACHE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|partsPerMap
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|bytesPerFile
init|=
name|partsPerMap
operator|*
literal|24
decl_stmt|;
name|IndexCache
name|cache
init|=
operator|new
name|IndexCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// fill cache
name|Path
name|feq
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"invalidReduceOrPartsPerMap"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|feq
argument_list|,
name|bytesPerFile
argument_list|,
name|partsPerMap
argument_list|)
expr_stmt|;
comment|// Number of reducers should always be less than partsPerMap as reducer
comment|// numbers start from 0 and there cannot be more reducer than parts
try|try
block|{
comment|// Number of reducers equal to partsPerMap
name|cache
operator|.
name|getIndexInformation
argument_list|(
literal|"reduceEqualPartsPerMap"
argument_list|,
name|partsPerMap
argument_list|,
comment|// reduce number == partsPerMap
name|feq
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Number of reducers equal to partsPerMap did not fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|IOException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
comment|// Number of reducers more than partsPerMap
name|cache
operator|.
name|getIndexInformation
argument_list|(
literal|"reduceMorePartsPerMap"
argument_list|,
name|partsPerMap
operator|+
literal|1
argument_list|,
comment|// reduce number> partsPerMap
name|feq
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Number of reducers more than partsPerMap did not fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|IOException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|testRemoveMap ()
specifier|public
name|void
name|testRemoveMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test case use two thread to call getIndexInformation and
comment|// removeMap concurrently, in order to construct race condition.
comment|// This test case may not repeatable. But on my macbook this test
comment|// fails with probability of 100% on code before MAPREDUCE-2541,
comment|// so it is repeatable in practice.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"cache"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_INDEX_CACHE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Make a big file so removeMapThread almost surely runs faster than
comment|// getInfoThread
specifier|final
name|int
name|partsPerMap
init|=
literal|100000
decl_stmt|;
specifier|final
name|int
name|bytesPerFile
init|=
name|partsPerMap
operator|*
literal|24
decl_stmt|;
specifier|final
name|IndexCache
name|cache
init|=
operator|new
name|IndexCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|big
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"bigIndex"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|big
argument_list|,
name|bytesPerFile
argument_list|,
name|partsPerMap
argument_list|)
expr_stmt|;
comment|// run multiple times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|Thread
name|getInfoThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cache
operator|.
name|getIndexInformation
argument_list|(
literal|"bigIndex"
argument_list|,
name|partsPerMap
argument_list|,
name|big
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// should not be here
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|removeMapThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|removeMap
argument_list|(
literal|"bigIndex"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|getInfoThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|removeMapThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|removeMapThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|getInfoThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|getInfoThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|removeMapThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cache
operator|.
name|checkTotalMemoryUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkRecord (IndexRecord rec, long fill)
specifier|private
specifier|static
name|void
name|checkRecord
parameter_list|(
name|IndexRecord
name|rec
parameter_list|,
name|long
name|fill
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fill
argument_list|,
name|rec
operator|.
name|startOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fill
argument_list|,
name|rec
operator|.
name|rawLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fill
argument_list|,
name|rec
operator|.
name|partLength
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fs, Path f, long fill, int parts)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|,
name|long
name|fill
parameter_list|,
name|int
name|parts
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CheckedOutputStream
name|iout
init|=
operator|new
name|CheckedOutputStream
argument_list|(
name|out
argument_list|,
operator|new
name|CRC32
argument_list|()
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|iout
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|MapTask
operator|.
name|MAP_OUTPUT_INDEX_RECORD_LENGTH
operator|/
literal|8
condition|;
operator|++
name|j
control|)
block|{
name|dout
operator|.
name|writeLong
argument_list|(
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|iout
operator|.
name|getChecksum
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

