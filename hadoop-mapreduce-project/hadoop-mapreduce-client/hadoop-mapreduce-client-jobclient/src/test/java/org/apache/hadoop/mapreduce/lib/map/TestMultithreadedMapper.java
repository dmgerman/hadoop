begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.map
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestMultithreadedMapper
specifier|public
class|class
name|TestMultithreadedMapper
extends|extends
name|HadoopTestCase
block|{
DECL|method|TestMultithreadedMapper ()
specifier|public
name|TestMultithreadedMapper
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|LOCAL_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOKRun ()
specifier|public
name|void
name|testOKRun
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIOExRun ()
specifier|public
name|void
name|testIOExRun
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRuntimeExRun ()
specifier|public
name|void
name|testRuntimeExRun
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|run (boolean ioEx, boolean rtEx)
specifier|private
name|void
name|run
parameter_list|(
name|boolean
name|ioEx
parameter_list|,
name|boolean
name|rtEx
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"testing/mt/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"testing/mt/output"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioEx
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"multithreaded.ioException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rtEx
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"multithreaded.runtimeException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"mt"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MultithreadedMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultithreadedMapper
operator|.
name|setMapperClass
argument_list|(
name|job
argument_list|,
name|IDMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultithreadedMapper
operator|.
name|setNumberOfThreads
argument_list|(
name|job
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|ioEx
operator|||
name|rtEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|ioEx
operator|||
name|rtEx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IDMap
specifier|public
specifier|static
class|class
name|IDMap
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|ioEx
specifier|private
name|boolean
name|ioEx
init|=
literal|false
decl_stmt|;
DECL|field|rtEx
specifier|private
name|boolean
name|rtEx
init|=
literal|false
decl_stmt|;
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|ioEx
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"multithreaded.ioException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rtEx
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"multithreaded.runtimeException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|map (LongWritable key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|ioEx
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
if|if
condition|(
name|rtEx
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|super
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

