begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test Map-Reduce job cleanup.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestJobCleanup
specifier|public
class|class
name|TestJobCleanup
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
literal|"/"
operator|+
literal|"test-job-cleanup"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|CUSTOM_CLEANUP_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_CLEANUP_FILE_NAME
init|=
literal|"_custom_cleanup"
decl_stmt|;
DECL|field|ABORT_KILLED_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ABORT_KILLED_FILE_NAME
init|=
literal|"_custom_abort_killed"
decl_stmt|;
DECL|field|ABORT_FAILED_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ABORT_FAILED_FILE_NAME
init|=
literal|"_custom_abort_failed"
decl_stmt|;
DECL|field|fileSys
specifier|private
specifier|static
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|mr
specifier|private
specifier|static
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|inDir
specifier|private
specifier|static
name|Path
name|inDir
init|=
literal|null
decl_stmt|;
DECL|field|emptyInDir
specifier|private
specifier|static
name|Path
name|emptyInDir
init|=
literal|null
decl_stmt|;
DECL|field|outDirs
specifier|private
specifier|static
name|int
name|outDirs
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobCleanup
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|fileSys
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker.handler.count"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker.http.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.task.tracker.http.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/intermediate"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
operator|.
name|SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-input"
argument_list|)
expr_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox\n"
operator|+
literal|"has many silly\n"
operator|+
literal|"red fox sox\n"
decl_stmt|;
name|DataOutputStream
name|file
init|=
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-"
operator|+
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|emptyInDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"empty-input"
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|emptyInDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
block|{
comment|// fileSys.delete(new Path(TEST_ROOT_DIR), true);
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Committer with deprecated    * {@link FileOutputCommitter#cleanupJob(JobContext)} making a _failed/_killed    * in the output folder    */
DECL|class|CommitterWithCustomDeprecatedCleanup
specifier|static
class|class
name|CommitterWithCustomDeprecatedCleanup
extends|extends
name|FileOutputCommitter
block|{
annotation|@
name|Override
DECL|method|cleanupJob (JobContext context)
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"---- HERE ----"
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|CUSTOM_CLEANUP_FILE_NAME
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext context, int i)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Committer with abort making a _failed/_killed in the output folder    */
DECL|class|CommitterWithCustomAbort
specifier|static
class|class
name|CommitterWithCustomAbort
extends|extends
name|FileOutputCommitter
block|{
annotation|@
name|Override
DECL|method|abortJob (JobContext context, int state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|int
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
name|context
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
empty_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
operator|(
name|state
operator|==
name|JobStatus
operator|.
name|FAILED
operator|)
condition|?
name|TestJobCleanup
operator|.
name|ABORT_FAILED_FILE_NAME
else|:
name|TestJobCleanup
operator|.
name|ABORT_KILLED_FILE_NAME
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|fileName
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNewOutputDir ()
specifier|private
name|Path
name|getNewOutputDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"output-"
operator|+
name|outDirs
operator|++
argument_list|)
return|;
block|}
DECL|method|configureJob (JobConf jc, String jobName, int maps, int reds, Path outDir)
specifier|private
name|void
name|configureJob
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|String
name|jobName
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reds
parameter_list|,
name|Path
name|outDir
parameter_list|)
block|{
name|jc
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jc
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jc
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setNumMapTasks
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setNumReduceTasks
argument_list|(
name|reds
argument_list|)
expr_stmt|;
block|}
comment|// run a job with 1 map and let it run to completion
DECL|method|testSuccessfulJob (String filename, Class<? extends OutputCommitter> committer, String[] exclude)
specifier|private
name|void
name|testSuccessfulJob
parameter_list|(
name|String
name|filename
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputCommitter
argument_list|>
name|committer
parameter_list|,
name|String
index|[]
name|exclude
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jc
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|Path
name|outDir
init|=
name|getNewOutputDir
argument_list|()
decl_stmt|;
name|configureJob
argument_list|(
name|jc
argument_list|,
literal|"job with cleanup()"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setOutputCommitter
argument_list|(
name|committer
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job finished : "
operator|+
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Done file \""
operator|+
name|testFile
operator|+
literal|"\" missing for job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the files from the missing set exists
for|for
control|(
name|String
name|ex
range|:
name|exclude
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" should not be present for successful job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// run a job for which all the attempts simply fail.
DECL|method|testFailedJob (String fileName, Class<? extends OutputCommitter> committer, String[] exclude)
specifier|private
name|void
name|testFailedJob
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputCommitter
argument_list|>
name|committer
parameter_list|,
name|String
index|[]
name|exclude
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jc
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|Path
name|outDir
init|=
name|getNewOutputDir
argument_list|()
decl_stmt|;
name|configureJob
argument_list|(
name|jc
argument_list|,
literal|"fail job with abort()"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set the job to fail
name|jc
operator|.
name|setMapperClass
argument_list|(
name|UtilsForTests
operator|.
name|FailMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setOutputCommitter
argument_list|(
name|committer
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|testFile
operator|+
literal|" missing for failed job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if the files from the missing set exists
for|for
control|(
name|String
name|ex
range|:
name|exclude
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" should not be present for failed job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// run a job which gets stuck in mapper and kill it.
DECL|method|testKilledJob (String fileName, Class<? extends OutputCommitter> committer, String[] exclude)
specifier|private
name|void
name|testKilledJob
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputCommitter
argument_list|>
name|committer
parameter_list|,
name|String
index|[]
name|exclude
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jc
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|Path
name|outDir
init|=
name|getNewOutputDir
argument_list|()
decl_stmt|;
name|configureJob
argument_list|(
name|jc
argument_list|,
literal|"kill job with abort()"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|// set the job to wait for long
name|jc
operator|.
name|setMapperClass
argument_list|(
name|UtilsForTests
operator|.
name|KillMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setOutputCommitter
argument_list|(
name|committer
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// wait for the map to be launched
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|counters
operator|.
name|getCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for a map task to be launched"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|counters
operator|=
name|job
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// kill the job
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
comment|// wait for the job to complete
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|testFile
operator|+
literal|" missing for job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if the files from the missing set exists
for|for
control|(
name|String
name|ex
range|:
name|exclude
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" should not be present for killed job "
operator|+
name|id
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test default cleanup/abort behavior    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDefaultCleanupAndAbort ()
specifier|public
name|void
name|testDefaultCleanupAndAbort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check with a successful job
name|testSuccessfulJob
argument_list|(
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// check with a failed job
name|testFailedJob
argument_list|(
literal|null
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
comment|// check default abort job kill
name|testKilledJob
argument_list|(
literal|null
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if a failed job with custom committer runs the abort code.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testCustomAbort ()
specifier|public
name|void
name|testCustomAbort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check with a successful job
name|testSuccessfulJob
argument_list|(
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|,
name|CommitterWithCustomAbort
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|ABORT_FAILED_FILE_NAME
block|,
name|ABORT_KILLED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
comment|// check with a failed job
name|testFailedJob
argument_list|(
name|ABORT_FAILED_FILE_NAME
argument_list|,
name|CommitterWithCustomAbort
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|,
name|ABORT_KILLED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
comment|// check with a killed job
name|testKilledJob
argument_list|(
name|ABORT_KILLED_FILE_NAME
argument_list|,
name|CommitterWithCustomAbort
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|,
name|ABORT_FAILED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if a failed job with custom committer runs the deprecated    * {@link FileOutputCommitter#cleanupJob(JobContext)} code for api    * compatibility testing.    */
annotation|@
name|Test
DECL|method|testCustomCleanup ()
specifier|public
name|void
name|testCustomCleanup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check with a successful job
name|testSuccessfulJob
argument_list|(
name|CUSTOM_CLEANUP_FILE_NAME
argument_list|,
name|CommitterWithCustomDeprecatedCleanup
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// check with a failed job
name|testFailedJob
argument_list|(
name|CUSTOM_CLEANUP_FILE_NAME
argument_list|,
name|CommitterWithCustomDeprecatedCleanup
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
comment|// check with a killed job
name|testKilledJob
argument_list|(
name|TestJobCleanup
operator|.
name|CUSTOM_CLEANUP_FILE_NAME
argument_list|,
name|CommitterWithCustomDeprecatedCleanup
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

