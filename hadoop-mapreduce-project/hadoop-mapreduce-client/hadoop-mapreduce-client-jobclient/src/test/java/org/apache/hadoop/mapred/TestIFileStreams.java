begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestIFileStreams
specifier|public
class|class
name|TestIFileStreams
block|{
annotation|@
name|Test
DECL|method|testIFileStream ()
specifier|public
name|void
name|testIFileStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DLEN
init|=
literal|100
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|DLEN
operator|+
literal|4
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ifos
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DLEN
condition|;
operator|++
name|i
control|)
block|{
name|ifos
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ifos
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|DLEN
operator|+
literal|4
argument_list|)
expr_stmt|;
name|IFileInputStream
name|ifis
init|=
operator|new
name|IFileInputStream
argument_list|(
name|dib
argument_list|,
literal|104
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DLEN
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ifis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ifis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadIFileStream ()
specifier|public
name|void
name|testBadIFileStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DLEN
init|=
literal|100
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|DLEN
operator|+
literal|4
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ifos
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DLEN
condition|;
operator|++
name|i
control|)
block|{
name|ifos
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ifos
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
name|dob
operator|.
name|getData
argument_list|()
decl_stmt|;
operator|++
name|b
index|[
literal|17
index|]
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|b
argument_list|,
name|DLEN
operator|+
literal|4
argument_list|)
expr_stmt|;
name|IFileInputStream
name|ifis
init|=
operator|new
name|IFileInputStream
argument_list|(
name|dib
argument_list|,
literal|104
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|<
name|DLEN
condition|)
block|{
if|if
condition|(
literal|17
operator|==
name|i
condition|)
block|{
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|ifis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ifis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
name|ifis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected bad checksum"
argument_list|,
name|DLEN
operator|-
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Did not detect bad data in checksum"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadLength ()
specifier|public
name|void
name|testBadLength
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DLEN
init|=
literal|100
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|DLEN
operator|+
literal|4
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ifos
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DLEN
condition|;
operator|++
name|i
control|)
block|{
name|ifos
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ifos
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|DLEN
operator|+
literal|4
argument_list|)
expr_stmt|;
name|IFileInputStream
name|ifis
init|=
operator|new
name|IFileInputStream
argument_list|(
name|dib
argument_list|,
literal|100
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|<
name|DLEN
operator|-
literal|8
condition|)
block|{
name|assertEquals
argument_list|(
name|i
operator|++
argument_list|,
name|ifis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ifis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Checksum before close"
argument_list|,
name|i
argument_list|,
name|DLEN
operator|-
literal|8
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Did not detect bad data in checksum"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseStreamOnException ()
specifier|public
name|void
name|testCloseStreamOnException
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|IFileOutputStream
name|ifos
init|=
operator|new
name|IFileOutputStream
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Dummy Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|outputStream
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
name|ifos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"IOException is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Dummy Exception"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

