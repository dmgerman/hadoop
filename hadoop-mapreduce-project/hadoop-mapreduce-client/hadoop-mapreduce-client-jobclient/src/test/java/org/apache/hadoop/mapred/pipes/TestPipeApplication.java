begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPipeApplication
specifier|public
class|class
name|TestPipeApplication
block|{
DECL|field|workSpace
specifier|private
specifier|static
name|File
name|workSpace
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestPipeApplication
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-workSpace"
argument_list|)
decl_stmt|;
DECL|field|taskName
specifier|private
specifier|static
name|String
name|taskName
init|=
literal|"attempt_001_02_r03_04_05"
decl_stmt|;
comment|/**    * test PipesMapRunner    test the transfer data from reader    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRunner ()
specifier|public
name|void
name|testRunner
parameter_list|()
throws|throws
name|Exception
block|{
comment|// clean old password files
name|File
index|[]
name|psw
init|=
name|cleanTokenPasswordFile
argument_list|()
decl_stmt|;
try|try
block|{
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
name|rReader
init|=
operator|new
name|ReaderPipesMapRunner
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Submitter
operator|.
name|IS_JAVA_RR
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// for stdour and stderror
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|taskName
argument_list|)
expr_stmt|;
name|CombineOutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|output
init|=
operator|new
name|CombineOutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Counters
operator|.
name|Counter
argument_list|()
argument_list|,
operator|new
name|Progress
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Writer
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|wr
init|=
operator|new
name|Writer
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|workSpace
operator|+
name|File
operator|.
name|separator
operator|+
literal|"outfile"
argument_list|)
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|output
operator|.
name|setWriter
argument_list|(
name|wr
argument_list|)
expr_stmt|;
comment|// stub for client
name|File
name|fCommand
init|=
name|getFileCommand
argument_list|(
literal|"org.apache.hadoop.mapred.pipes.PipeApplicationRunnableStub"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_LOCALFILES
argument_list|,
name|fCommand
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// token for authorization
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
literal|"user"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|token
argument_list|,
name|conf
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SKIP_RECORDS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestTaskReporter
name|reporter
init|=
operator|new
name|TestTaskReporter
argument_list|()
decl_stmt|;
name|PipesMapRunner
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|runner
init|=
operator|new
name|PipesMapRunner
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|initStdOut
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runner
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runner
operator|.
name|run
argument_list|(
name|rReader
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|String
name|stdOut
init|=
name|readStdOut
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// test part of translated data. As common file for client and test -
comment|// clients stdOut
comment|// check version
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"CURRENT_PROTOCOL_VERSION:0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check key and value classes
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"Key class:org.apache.hadoop.io.FloatWritable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"Value class:org.apache.hadoop.io.NullWritable"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test have sent all data from reader
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"value:0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"value:9.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|psw
operator|!=
literal|null
condition|)
block|{
comment|// remove password files
for|for
control|(
name|File
name|file
range|:
name|psw
control|)
block|{
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * test org.apache.hadoop.mapred.pipes.Application    * test a internal functions: MessageType.REGISTER_COUNTER,  INCREMENT_COUNTER, STATUS, PROGRESS...    *    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testApplication ()
specifier|public
name|void
name|testApplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
name|rReader
init|=
operator|new
name|Reader
argument_list|()
decl_stmt|;
comment|// client for test
name|File
name|fCommand
init|=
name|getFileCommand
argument_list|(
literal|"org.apache.hadoop.mapred.pipes.PipeApplicationStub"
argument_list|)
decl_stmt|;
name|TestTaskReporter
name|reporter
init|=
operator|new
name|TestTaskReporter
argument_list|()
decl_stmt|;
name|File
index|[]
name|psw
init|=
name|cleanTokenPasswordFile
argument_list|()
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|taskName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_LOCALFILES
argument_list|,
name|fCommand
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// token for authorization
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
literal|"user"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|token
argument_list|,
name|conf
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|FakeCollector
name|output
init|=
operator|new
name|FakeCollector
argument_list|(
operator|new
name|Counters
operator|.
name|Counter
argument_list|()
argument_list|,
operator|new
name|Progress
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Writer
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|wr
init|=
operator|new
name|Writer
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"outfile"
argument_list|)
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|output
operator|.
name|setWriter
argument_list|(
name|wr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Submitter
operator|.
name|PRESERVE_COMMANDFILE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Application
argument_list|<
name|WritableComparable
argument_list|<
name|IntWritable
argument_list|>
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|application
init|=
operator|new
name|Application
argument_list|<
name|WritableComparable
argument_list|<
name|IntWritable
argument_list|>
argument_list|,
name|Writable
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|conf
argument_list|,
name|rReader
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
decl_stmt|;
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|mapItem
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
expr_stmt|;
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|application
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test getDownlink().mapItem();
name|String
name|stdOut
init|=
name|readStdOut
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"key:3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"value:txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// reporter test counter, and status should be sended
comment|// test MessageType.REGISTER_COUNTER and INCREMENT_COUNTER
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|reporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reporter
operator|.
name|getCounter
argument_list|(
literal|"group"
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test status MessageType.STATUS
name|assertEquals
argument_list|(
name|reporter
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"PROGRESS"
argument_list|)
expr_stmt|;
name|stdOut
operator|=
name|readFile
argument_list|(
operator|new
name|File
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"outfile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check MessageType.PROGRESS
name|assertEquals
argument_list|(
literal|0.55f
argument_list|,
name|rReader
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|application
operator|.
name|getDownlink
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test MessageType.OUTPUT
name|Entry
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|entry
init|=
name|output
operator|.
name|getCollect
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// try to abort
name|application
operator|.
name|abort
argument_list|(
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// abort works ?
name|assertEquals
argument_list|(
literal|"pipe child exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|psw
operator|!=
literal|null
condition|)
block|{
comment|// remove password files
for|for
control|(
name|File
name|file
range|:
name|psw
control|)
block|{
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * test org.apache.hadoop.mapred.pipes.Submitter    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSubmitter ()
specifier|public
name|void
name|testSubmitter
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|File
index|[]
name|psw
init|=
name|cleanTokenPasswordFile
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/tmp/build/TEST_SUBMITTER_MAPPER/data"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
comment|// prepare configuration
name|Submitter
operator|.
name|setIsJavaMapper
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|setIsJavaReducer
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|setKeepCommandFile
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|setIsJavaRecordReader
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|setIsJavaRecordWriter
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PipesPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|partitioner
init|=
operator|new
name|PipesPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|partitioner
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|setJavaPartitioner
argument_list|(
name|conf
argument_list|,
name|partitioner
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PipesPartitioner
operator|.
name|class
argument_list|,
operator|(
name|Submitter
operator|.
name|getJavaPartitioner
argument_list|(
name|conf
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// test going to call main method with System.exit(). Change Security
name|SecurityManager
name|securityManager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
comment|// store System.out
name|PrintStream
name|oldps
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
comment|// test without parameters
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|Submitter
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
comment|// System.exit prohibited! output message test
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bin/hadoop pipes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-input<path>] // Input directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-output<path>] // Output directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-jar<jar file> // jar filename"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-inputformat<class>] // InputFormat class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-map<class>] // Java Map class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-partitioner<class>] // Java Partitioner"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-reduce<class>] // Java Reduce class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-writer<class>] // Java RecordWriter"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-program<executable>] // executable URI"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-reduces<num>] // number of reduces"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[-lazyOutput<true/false>] // createOutputLazily"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-conf<configuration file>     specify an application configuration file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-D<property=value>            use value for given property"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-fs<local|namenode:port>      specify a namenode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-jt<local|jobtracker:port>    specify a job tracker"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-files<comma separated list of files>    specify comma separated files to be copied to the map reduce cluster"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-libjars<comma separated list of jars>    specify comma separated jar files to include in the classpath."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-archives<comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldps
argument_list|)
expr_stmt|;
comment|// restore
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|psw
operator|!=
literal|null
condition|)
block|{
comment|// remove password files
for|for
control|(
name|File
name|file
range|:
name|psw
control|)
block|{
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// test call Submitter form command line
try|try
block|{
name|File
name|fCommand
init|=
name|getFileCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|22
index|]
decl_stmt|;
name|File
name|input
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|+
name|File
operator|.
name|separator
operator|+
literal|"input"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|input
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|input
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|outPut
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|+
name|File
operator|.
name|separator
operator|+
literal|"output"
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|outPut
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-input"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|input
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
comment|// "input";
name|args
index|[
literal|2
index|]
operator|=
literal|"-output"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|outPut
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
comment|// "output";
name|args
index|[
literal|4
index|]
operator|=
literal|"-inputformat"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
literal|"org.apache.hadoop.mapred.TextInputFormat"
expr_stmt|;
name|args
index|[
literal|6
index|]
operator|=
literal|"-map"
expr_stmt|;
name|args
index|[
literal|7
index|]
operator|=
literal|"org.apache.hadoop.mapred.lib.IdentityMapper"
expr_stmt|;
name|args
index|[
literal|8
index|]
operator|=
literal|"-partitioner"
expr_stmt|;
name|args
index|[
literal|9
index|]
operator|=
literal|"org.apache.hadoop.mapred.pipes.PipesPartitioner"
expr_stmt|;
name|args
index|[
literal|10
index|]
operator|=
literal|"-reduce"
expr_stmt|;
name|args
index|[
literal|11
index|]
operator|=
literal|"org.apache.hadoop.mapred.lib.IdentityReducer"
expr_stmt|;
name|args
index|[
literal|12
index|]
operator|=
literal|"-writer"
expr_stmt|;
name|args
index|[
literal|13
index|]
operator|=
literal|"org.apache.hadoop.mapred.TextOutputFormat"
expr_stmt|;
name|args
index|[
literal|14
index|]
operator|=
literal|"-program"
expr_stmt|;
name|args
index|[
literal|15
index|]
operator|=
name|fCommand
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
comment|// "program";
name|args
index|[
literal|16
index|]
operator|=
literal|"-reduces"
expr_stmt|;
name|args
index|[
literal|17
index|]
operator|=
literal|"2"
expr_stmt|;
name|args
index|[
literal|18
index|]
operator|=
literal|"-lazyOutput"
expr_stmt|;
name|args
index|[
literal|19
index|]
operator|=
literal|"lazyOutput"
expr_stmt|;
name|args
index|[
literal|20
index|]
operator|=
literal|"-jobconf"
expr_stmt|;
name|args
index|[
literal|21
index|]
operator|=
literal|"mapreduce.pipes.isjavarecordwriter=false,mapreduce.pipes.isjavarecordreader=false"
expr_stmt|;
name|Submitter
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
comment|// status should be 0
name|assertEquals
argument_list|(
name|e
operator|.
name|status
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldps
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test org.apache.hadoop.mapred.pipes.PipesReducer    * test the transfer of data: key and value    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testPipesReduser ()
specifier|public
name|void
name|testPipesReduser
parameter_list|()
throws|throws
name|Exception
block|{
name|File
index|[]
name|psw
init|=
name|cleanTokenPasswordFile
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
try|try
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
literal|"user"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|token
argument_list|,
name|conf
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|fCommand
init|=
name|getFileCommand
argument_list|(
literal|"org.apache.hadoop.mapred.pipes.PipeReducerStub"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_LOCALFILES
argument_list|,
name|fCommand
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|PipesReducer
argument_list|<
name|BooleanWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|reducer
init|=
operator|new
name|PipesReducer
argument_list|<
name|BooleanWritable
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|reducer
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|BooleanWritable
name|bw
init|=
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|taskName
argument_list|)
expr_stmt|;
name|initStdOut
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SKIP_RECORDS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CombineOutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|output
init|=
operator|new
name|CombineOutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Counters
operator|.
name|Counter
argument_list|()
argument_list|,
operator|new
name|Progress
argument_list|()
argument_list|)
decl_stmt|;
name|Reporter
name|reporter
init|=
operator|new
name|TestTaskReporter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|texts
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|texts
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|texts
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|texts
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
name|reducer
operator|.
name|reduce
argument_list|(
name|bw
argument_list|,
name|texts
operator|.
name|iterator
argument_list|()
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|reducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|stdOut
init|=
name|readStdOut
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// test data: key
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"reducer key :true"
argument_list|)
argument_list|)
expr_stmt|;
comment|// and values
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"reduce value  :first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"reduce value  :second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdOut
operator|.
name|contains
argument_list|(
literal|"reduce value  :third"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|psw
operator|!=
literal|null
condition|)
block|{
comment|// remove password files
for|for
control|(
name|File
name|file
range|:
name|psw
control|)
block|{
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * test PipesPartitioner    * test set and get data from  PipesPartitioner    */
annotation|@
name|Test
DECL|method|testPipesPartitioner ()
specifier|public
name|void
name|testPipesPartitioner
parameter_list|()
block|{
name|PipesPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|partitioner
init|=
operator|new
name|PipesPartitioner
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|JobConf
name|configuration
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Submitter
operator|.
name|getJavaPartitioner
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|partitioner
operator|.
name|configure
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
name|IntWritable
name|iw
init|=
operator|new
name|IntWritable
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|// the cache empty
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|iw
argument_list|,
operator|new
name|Text
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// set data into cache
name|PipesPartitioner
operator|.
name|setNextPartition
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// get data from cache
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|iw
argument_list|,
operator|new
name|Text
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * clean previous std error and outs    */
DECL|method|initStdOut (JobConf configuration)
specifier|private
name|void
name|initStdOut
parameter_list|(
name|JobConf
name|configuration
parameter_list|)
block|{
name|TaskAttemptID
name|taskId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|stdOut
init|=
name|TaskLog
operator|.
name|getTaskLogFile
argument_list|(
name|taskId
argument_list|,
literal|false
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
argument_list|)
decl_stmt|;
name|File
name|stdErr
init|=
name|TaskLog
operator|.
name|getTaskLogFile
argument_list|(
name|taskId
argument_list|,
literal|false
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|)
decl_stmt|;
comment|// prepare folder
if|if
condition|(
operator|!
name|stdOut
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|stdOut
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// clean logs
name|stdOut
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|stdErr
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readStdOut (JobConf conf)
specifier|private
name|String
name|readStdOut
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttemptID
name|taskId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|stdOut
init|=
name|TaskLog
operator|.
name|getTaskLogFile
argument_list|(
name|taskId
argument_list|,
literal|false
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
argument_list|)
decl_stmt|;
return|return
name|readFile
argument_list|(
name|stdOut
argument_list|)
return|;
block|}
DECL|method|readFile (File file)
specifier|private
name|String
name|readFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|counter
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Progress
specifier|private
class|class
name|Progress
implements|implements
name|Progressable
block|{
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{      }
block|}
DECL|method|cleanTokenPasswordFile ()
specifier|private
name|File
index|[]
name|cleanTokenPasswordFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
index|[]
name|result
init|=
operator|new
name|File
index|[
literal|2
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|File
argument_list|(
literal|"./jobTokenPassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
name|result
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
index|[
literal|0
index|]
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|File
argument_list|(
literal|"./.jobTokenPassword.crc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
index|[
literal|1
index|]
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
name|result
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getFileCommand (String clazz)
specifier|private
name|File
name|getFileCommand
parameter_list|(
name|String
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|File
name|fCommand
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|+
name|File
operator|.
name|separator
operator|+
literal|"cache.sh"
argument_list|)
decl_stmt|;
name|fCommand
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fCommand
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fCommand
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|fCommand
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|fCommand
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"#!/bin/sh \n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
literal|"ls "
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
literal|"java -cp "
operator|+
name|classpath
operator|+
literal|" "
operator|+
name|clazz
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|fCommand
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
return|return
name|fCommand
return|;
block|}
DECL|class|CombineOutputCollector
specifier|private
class|class
name|CombineOutputCollector
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Object
parameter_list|>
implements|implements
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|writer
specifier|private
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
decl_stmt|;
DECL|field|outCounter
specifier|private
name|Counters
operator|.
name|Counter
name|outCounter
decl_stmt|;
DECL|field|progressable
specifier|private
name|Progressable
name|progressable
decl_stmt|;
DECL|method|CombineOutputCollector (Counters.Counter outCounter, Progressable progressable)
specifier|public
name|CombineOutputCollector
parameter_list|(
name|Counters
operator|.
name|Counter
name|outCounter
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
block|{
name|this
operator|.
name|outCounter
operator|=
name|outCounter
expr_stmt|;
name|this
operator|.
name|progressable
operator|=
name|progressable
expr_stmt|;
block|}
DECL|method|setWriter (Writer<K, V> writer)
specifier|public
specifier|synchronized
name|void
name|setWriter
parameter_list|(
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
DECL|method|collect (K key, V value)
specifier|public
specifier|synchronized
name|void
name|collect
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|outCounter
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|progressable
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FakeSplit
specifier|public
specifier|static
class|class
name|FakeSplit
implements|implements
name|InputSplit
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|class|TestTaskReporter
specifier|private
class|class
name|TestTaskReporter
implements|implements
name|Reporter
block|{
DECL|field|recordNum
specifier|private
name|int
name|recordNum
init|=
literal|0
decl_stmt|;
comment|// number of records processed
DECL|field|status
specifier|private
name|String
name|status
init|=
literal|null
decl_stmt|;
DECL|field|counters
specifier|private
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|field|split
specifier|private
name|InputSplit
name|split
init|=
operator|new
name|FakeSplit
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|recordNum
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
DECL|method|getCounter (String group, String name)
specifier|public
name|Counters
operator|.
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counter
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|Group
name|grp
init|=
name|counters
operator|.
name|addGroup
argument_list|(
name|group
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|counter
operator|=
name|grp
operator|.
name|addCounter
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counter
return|;
block|}
DECL|method|getCounter (Enum<?> name)
specifier|public
name|Counters
operator|.
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
name|counters
operator|==
literal|null
condition|?
literal|null
else|:
name|counters
operator|.
name|findCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|incrCounter (Enum<?> key, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|key
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incrCounter (String group, String counter, long amount)
specifier|public
name|void
name|incrCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|counter
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|group
argument_list|,
name|counter
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInputSplit ()
specifier|public
name|InputSplit
name|getInputSplit
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
return|return
name|split
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|recordNum
return|;
block|}
block|}
DECL|class|Reader
specifier|private
class|class
name|Reader
implements|implements
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|progress
specifier|private
name|FloatWritable
name|progress
decl_stmt|;
annotation|@
name|Override
DECL|method|next (FloatWritable key, NullWritable value)
specifier|public
name|boolean
name|next
parameter_list|(
name|FloatWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|progress
operator|=
name|key
expr_stmt|;
name|index
operator|++
expr_stmt|;
return|return
name|index
operator|<=
literal|10
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|progress
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|createValue ()
specifier|public
name|NullWritable
name|createValue
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKey ()
specifier|public
name|FloatWritable
name|createKey
parameter_list|()
block|{
name|FloatWritable
name|result
init|=
operator|new
name|FloatWritable
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
DECL|class|ReaderPipesMapRunner
specifier|private
class|class
name|ReaderPipesMapRunner
implements|implements
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|next (FloatWritable key, NullWritable value)
specifier|public
name|boolean
name|next
parameter_list|(
name|FloatWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|.
name|set
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
return|return
name|index
operator|<=
literal|10
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|createValue ()
specifier|public
name|NullWritable
name|createValue
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKey ()
specifier|public
name|FloatWritable
name|createKey
parameter_list|()
block|{
name|FloatWritable
name|result
init|=
operator|new
name|FloatWritable
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
DECL|class|FakeCollector
specifier|private
class|class
name|FakeCollector
extends|extends
name|CombineOutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|collect
specifier|final
specifier|private
name|Map
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|collect
init|=
operator|new
name|HashMap
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FakeCollector (Counter outCounter, Progressable progressable)
specifier|public
name|FakeCollector
parameter_list|(
name|Counter
name|outCounter
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
block|{
name|super
argument_list|(
name|outCounter
argument_list|,
name|progressable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect (IntWritable key, Text value)
specifier|public
specifier|synchronized
name|void
name|collect
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|collect
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|super
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getCollect ()
specifier|public
name|Map
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|getCollect
parameter_list|()
block|{
return|return
name|collect
return|;
block|}
block|}
block|}
end_class

end_unit

