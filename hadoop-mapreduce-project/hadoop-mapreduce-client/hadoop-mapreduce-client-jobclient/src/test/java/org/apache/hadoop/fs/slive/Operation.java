begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|OperationOutput
operator|.
name|OutputType
import|;
end_import

begin_comment
comment|/**  * An operation provides these abstractions and if it desires to perform any  * operations it must implement a override of the run() function to provide  * varying output to be captured.  */
end_comment

begin_class
DECL|class|Operation
specifier|abstract
class|class
name|Operation
block|{
DECL|field|config
specifier|private
name|ConfigExtractor
name|config
decl_stmt|;
DECL|field|finder
specifier|private
name|PathFinder
name|finder
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|rnd
specifier|private
name|Random
name|rnd
decl_stmt|;
DECL|method|Operation (String type, ConfigExtractor cfg, Random rnd)
specifier|protected
name|Operation
parameter_list|(
name|String
name|type
parameter_list|,
name|ConfigExtractor
name|cfg
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
comment|// Use a new Random instance so that the sequence of file names produced is
comment|// the same even in case of unsuccessful operations
name|this
operator|.
name|finder
operator|=
operator|new
name|PathFinder
argument_list|(
name|cfg
argument_list|,
operator|new
name|Random
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the configuration object this class is using    *     * @return ConfigExtractor    */
DECL|method|getConfig ()
specifier|protected
name|ConfigExtractor
name|getConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
comment|/**    * Gets the random number generator to use for this operation    *     * @return Random    */
DECL|method|getRandom ()
specifier|protected
name|Random
name|getRandom
parameter_list|()
block|{
return|return
name|this
operator|.
name|rnd
return|;
block|}
comment|/**    * Gets the type of operation that this class belongs to    *     * @return String    */
DECL|method|getType ()
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * Gets the path finding/generating instance that this class is using    *     * @return PathFinder    */
DECL|method|getFinder ()
specifier|protected
name|PathFinder
name|getFinder
parameter_list|()
block|{
return|return
name|this
operator|.
name|finder
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see java.lang.Object#toString()    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getType
argument_list|()
return|;
block|}
comment|/**    * This run() method simply sets up the default output container and adds in a    * data member to keep track of the number of operations that occurred    *     * @param fs    *          FileSystem object to perform operations with    *     * @return List of operation outputs to be collected and output in the overall    *         map reduce operation (or empty or null if none)    */
DECL|method|run (FileSystem fs)
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|out
init|=
operator|new
name|LinkedList
argument_list|<
name|OperationOutput
argument_list|>
argument_list|()
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|OP_COUNT
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

