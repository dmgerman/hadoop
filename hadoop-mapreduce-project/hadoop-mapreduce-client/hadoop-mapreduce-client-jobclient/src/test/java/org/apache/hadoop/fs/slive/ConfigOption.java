begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_comment
comment|/**  * Class which extends the basic option object and adds in the configuration id  * and a default value so a central place can be used for retrieval of these as  * needed  */
end_comment

begin_class
DECL|class|ConfigOption
class|class
name|ConfigOption
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Option
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7218954906367671150L
decl_stmt|;
comment|// config starts with this prefix
DECL|field|SLIVE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SLIVE_PREFIX
init|=
literal|"slive"
decl_stmt|;
comment|// command line options and descriptions and config option name
DECL|field|MAPS
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|MAPS
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"maps"
argument_list|,
literal|true
argument_list|,
literal|"Number of maps"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".maps"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
DECL|field|REDUCES
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|REDUCES
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"reduces"
argument_list|,
literal|true
argument_list|,
literal|"Number of reduces"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".reduces"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|OPS
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|OPS
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"ops"
argument_list|,
literal|true
argument_list|,
literal|"Max number of operations per map"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".map.ops"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
DECL|field|DURATION
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|DURATION
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"duration"
argument_list|,
literal|true
argument_list|,
literal|"Duration of a map task in seconds (MAX_INT for no limit)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".duration"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|EXIT_ON_ERROR
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Boolean
argument_list|>
name|EXIT_ON_ERROR
init|=
operator|new
name|ConfigOption
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"exitOnError"
argument_list|,
literal|false
argument_list|,
literal|"Exit on first error"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".exit.on.error"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|FILES
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|FILES
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"files"
argument_list|,
literal|true
argument_list|,
literal|"Max total number of files"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".total.files"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
DECL|field|DIR_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|DIR_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|"dirSize"
argument_list|,
literal|true
argument_list|,
literal|"Max files per directory"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".dir.size"
argument_list|,
literal|32
argument_list|)
decl_stmt|;
DECL|field|BASE_DIR
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|String
argument_list|>
name|BASE_DIR
init|=
operator|new
name|ConfigOption
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"baseDir"
argument_list|,
literal|true
argument_list|,
literal|"Base directory path"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".base.dir"
argument_list|,
literal|"/test/slive"
argument_list|)
decl_stmt|;
DECL|field|RESULT_FILE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|String
argument_list|>
name|RESULT_FILE
init|=
operator|new
name|ConfigOption
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"resFile"
argument_list|,
literal|true
argument_list|,
literal|"Result file name"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".result.file"
argument_list|,
literal|"part-0000"
argument_list|)
decl_stmt|;
DECL|field|REPLICATION_AM
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Short
argument_list|>
name|REPLICATION_AM
init|=
operator|new
name|ConfigOption
argument_list|<
name|Short
argument_list|>
argument_list|(
literal|"replication"
argument_list|,
literal|true
argument_list|,
literal|"Min,max value for replication amount"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".file.replication"
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|BLOCK_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"blockSize"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for dfs file block size"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".block.size"
argument_list|,
literal|64L
operator|*
name|Constants
operator|.
name|MEGABYTES
argument_list|)
decl_stmt|;
DECL|field|READ_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|READ_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"readSize"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for size to read (min=max=MAX_LONG=read entire file)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.read.size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|WRITE_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|WRITE_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"writeSize"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for size to write (min=max=MAX_LONG=blocksize)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.write.size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|SLEEP_TIME
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|SLEEP_TIME
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"sleep"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for millisecond of random sleep to perform (between operations)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.sleep.range"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|APPEND_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|APPEND_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"appendSize"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for size to append (min=max=MAX_LONG=blocksize)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.append.size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|TRUNCATE_WAIT
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Boolean
argument_list|>
name|TRUNCATE_WAIT
init|=
operator|new
name|ConfigOption
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"truncateWait"
argument_list|,
literal|true
argument_list|,
literal|"Should wait for truncate recovery"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.truncate.wait"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|TRUNCATE_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|TRUNCATE_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"truncateSize"
argument_list|,
literal|true
argument_list|,
literal|"Min,max for size to truncate (min=max=MAX_LONG=blocksize)"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".op.truncate.size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|RANDOM_SEED
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|RANDOM_SEED
init|=
operator|new
name|ConfigOption
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|"seed"
argument_list|,
literal|true
argument_list|,
literal|"Random number seed"
argument_list|,
name|SLIVE_PREFIX
operator|+
literal|".seed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// command line only options
DECL|field|HELP
specifier|static
specifier|final
name|Option
name|HELP
init|=
operator|new
name|Option
argument_list|(
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Usage information"
argument_list|)
decl_stmt|;
DECL|field|CLEANUP
specifier|static
specifier|final
name|Option
name|CLEANUP
init|=
operator|new
name|Option
argument_list|(
literal|"cleanup"
argument_list|,
literal|true
argument_list|,
literal|"Cleanup& remove directory after reporting"
argument_list|)
decl_stmt|;
comment|// non slive specific settings
DECL|field|QUEUE_NAME
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|String
argument_list|>
name|QUEUE_NAME
init|=
operator|new
name|ConfigOption
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"queue"
argument_list|,
literal|true
argument_list|,
literal|"Queue name"
argument_list|,
literal|"mapred.job.queue.name"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
DECL|field|PACKET_SIZE
specifier|static
specifier|final
name|ConfigOption
argument_list|<
name|String
argument_list|>
name|PACKET_SIZE
init|=
operator|new
name|ConfigOption
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"packetSize"
argument_list|,
literal|true
argument_list|,
literal|"Dfs write packet size"
argument_list|,
literal|"dfs.write.packet.size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Hadoop configuration property name    */
DECL|field|cfgOption
specifier|private
name|String
name|cfgOption
decl_stmt|;
comment|/**    * Default value if no value is located by other means    */
DECL|field|defaultValue
specifier|private
name|T
name|defaultValue
decl_stmt|;
DECL|method|ConfigOption (String cliOption, boolean hasArg, String description, String cfgOption, T def)
name|ConfigOption
parameter_list|(
name|String
name|cliOption
parameter_list|,
name|boolean
name|hasArg
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|cfgOption
parameter_list|,
name|T
name|def
parameter_list|)
block|{
name|super
argument_list|(
name|cliOption
argument_list|,
name|hasArg
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfgOption
operator|=
name|cfgOption
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|def
expr_stmt|;
block|}
comment|/**    * @return the configuration option name to lookup in Configuration objects    *         for this option    */
DECL|method|getCfgOption ()
name|String
name|getCfgOption
parameter_list|()
block|{
return|return
name|cfgOption
return|;
block|}
comment|/**    * @return the default object for this option    */
DECL|method|getDefault ()
name|T
name|getDefault
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

