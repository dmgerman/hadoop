begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|ArgumentParser
operator|.
name|ParsedOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|Distribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Class which merges options given from a config file and the command line and  * performs some basic verification of the data retrieved and sets the verified  * values back into the configuration object for return  */
end_comment

begin_class
DECL|class|ConfigMerger
class|class
name|ConfigMerger
block|{
comment|/**    * Exception that represents config problems...    */
DECL|class|ConfigException
specifier|static
class|class
name|ConfigException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2047129184917444550L
decl_stmt|;
DECL|method|ConfigException (String msg)
name|ConfigException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfigException (String msg, Throwable e)
name|ConfigException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merges the given command line parsed output with the given configuration    * object and returns the new configuration object with the correct options    * overwritten    *     * @param opts    *          the parsed command line option output    * @param base    *          the base configuration to merge with    * @return merged configuration object    * @throws ConfigException    *           when configuration errors or verification occur    */
DECL|method|getMerged (ParsedOutput opts, Configuration base)
name|Configuration
name|getMerged
parameter_list|(
name|ParsedOutput
name|opts
parameter_list|,
name|Configuration
name|base
parameter_list|)
throws|throws
name|ConfigException
block|{
return|return
name|handleOptions
argument_list|(
name|opts
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|/**    * Gets the base set of operations to use    *     * @return Map    */
DECL|method|getBaseOperations ()
specifier|private
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|getBaseOperations
parameter_list|()
block|{
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|base
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
argument_list|()
decl_stmt|;
comment|// add in all the operations
comment|// since they will all be applied unless changed
name|OperationType
index|[]
name|types
init|=
name|OperationType
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|types
control|)
block|{
name|base
operator|.
name|put
argument_list|(
name|type
argument_list|,
operator|new
name|OperationData
argument_list|(
name|Distribution
operator|.
name|UNIFORM
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
comment|/**    * Handles the specific task of merging operations from the command line or    * extractor object into the base configuration provided    *     * @param opts    *          the parsed command line option output    * @param base    *          the base configuration to merge with    * @param extractor    *          the access object to fetch operations from if none from the    *          command line    * @return merged configuration object    * @throws ConfigException    *           when verification fails    */
DECL|method|handleOperations (ParsedOutput opts, Configuration base, ConfigExtractor extractor)
specifier|private
name|Configuration
name|handleOperations
parameter_list|(
name|ParsedOutput
name|opts
parameter_list|,
name|Configuration
name|base
parameter_list|,
name|ConfigExtractor
name|extractor
parameter_list|)
throws|throws
name|ConfigException
block|{
comment|// get the base set to start off with
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|operations
init|=
name|getBaseOperations
argument_list|()
decl_stmt|;
comment|// merge with what is coming from config
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|cfgOperations
init|=
name|extractor
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|opType
range|:
name|cfgOperations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|operations
operator|.
name|put
argument_list|(
name|opType
argument_list|,
name|cfgOperations
operator|.
name|get
argument_list|(
name|opType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// see if any coming in from the command line
for|for
control|(
name|OperationType
name|opType
range|:
name|OperationType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|opName
init|=
name|opType
operator|.
name|lowerName
argument_list|()
decl_stmt|;
name|String
name|opVal
init|=
name|opts
operator|.
name|getValue
argument_list|(
name|opName
argument_list|)
decl_stmt|;
if|if
condition|(
name|opVal
operator|!=
literal|null
condition|)
block|{
name|operations
operator|.
name|put
argument_list|(
name|opType
argument_list|,
operator|new
name|OperationData
argument_list|(
name|opVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove those with<= zero percent
block|{
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|cleanedOps
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|opType
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OperationData
name|data
init|=
name|operations
operator|.
name|get
argument_list|(
name|opType
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getPercent
argument_list|()
operator|==
literal|null
operator|||
name|data
operator|.
name|getPercent
argument_list|()
operator|>
literal|0.0d
condition|)
block|{
name|cleanedOps
operator|.
name|put
argument_list|(
name|opType
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|operations
operator|=
name|cleanedOps
expr_stmt|;
block|}
if|if
condition|(
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"No operations provided!"
argument_list|)
throw|;
block|}
comment|// verify and adjust
name|double
name|currPct
init|=
literal|0
decl_stmt|;
name|int
name|needFill
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OperationData
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getPercent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currPct
operator|+=
name|op
operator|.
name|getPercent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|needFill
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currPct
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Unable to have accumlative percent greater than 100%"
argument_list|)
throw|;
block|}
if|if
condition|(
name|needFill
operator|>
literal|0
operator|&&
name|currPct
operator|<
literal|1
condition|)
block|{
name|double
name|leftOver
init|=
literal|1.0
operator|-
name|currPct
decl_stmt|;
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|mpcp
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OperationData
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getPercent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|op
operator|=
operator|new
name|OperationData
argument_list|(
name|op
operator|.
name|getDistribution
argument_list|()
argument_list|,
operator|(
name|leftOver
operator|/
name|needFill
operator|)
argument_list|)
expr_stmt|;
block|}
name|mpcp
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|operations
operator|=
name|mpcp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|needFill
operator|==
literal|0
operator|&&
name|currPct
operator|<
literal|1
condition|)
block|{
comment|// redistribute
name|double
name|leftOver
init|=
literal|1.0
operator|-
name|currPct
decl_stmt|;
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|mpcp
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|each
init|=
name|leftOver
operator|/
name|operations
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|t
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|OperationData
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|op
operator|=
operator|new
name|OperationData
argument_list|(
name|op
operator|.
name|getDistribution
argument_list|()
argument_list|,
operator|(
name|op
operator|.
name|getPercent
argument_list|()
operator|+
name|each
operator|)
argument_list|)
expr_stmt|;
name|mpcp
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|operations
operator|=
name|mpcp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|needFill
operator|>
literal|0
operator|&&
name|currPct
operator|>=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
name|needFill
operator|+
literal|" unfilled operations but no percentage left to fill with"
argument_list|)
throw|;
block|}
comment|// save into base
for|for
control|(
name|OperationType
name|opType
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|opName
init|=
name|opType
operator|.
name|lowerName
argument_list|()
decl_stmt|;
name|OperationData
name|opData
init|=
name|operations
operator|.
name|get
argument_list|(
name|opType
argument_list|)
decl_stmt|;
name|String
name|distr
init|=
name|opData
operator|.
name|getDistribution
argument_list|()
operator|.
name|lowerName
argument_list|()
decl_stmt|;
name|String
name|ratio
init|=
operator|new
name|Double
argument_list|(
name|opData
operator|.
name|getPercent
argument_list|()
operator|*
literal|100.0d
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|base
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Constants
operator|.
name|OP
argument_list|,
name|opName
argument_list|)
argument_list|,
name|opData
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Constants
operator|.
name|OP_DISTR
argument_list|,
name|opName
argument_list|)
argument_list|,
name|distr
argument_list|)
expr_stmt|;
name|base
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Constants
operator|.
name|OP_PERCENT
argument_list|,
name|opName
argument_list|)
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
comment|/**    * Handles merging all options and verifying from the given command line    * output and the given base configuration and returns the merged    * configuration    *     * @param opts    *          the parsed command line option output    * @param base    *          the base configuration to merge with    * @return the merged configuration    * @throws ConfigException    */
DECL|method|handleOptions (ParsedOutput opts, Configuration base)
specifier|private
name|Configuration
name|handleOptions
parameter_list|(
name|ParsedOutput
name|opts
parameter_list|,
name|Configuration
name|base
parameter_list|)
throws|throws
name|ConfigException
block|{
comment|// ensure variables are overwritten and verified
name|ConfigExtractor
name|extractor
init|=
operator|new
name|ConfigExtractor
argument_list|(
name|base
argument_list|)
decl_stmt|;
comment|// overwrite the map amount and check to ensure> 0
block|{
name|Integer
name|mapAmount
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mapAmount
operator|=
name|extractor
operator|.
name|getMapAmount
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|MAPS
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging map amount"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapAmount
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mapAmount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Map amount can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|MAPS
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|mapAmount
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// overwrite the reducer amount and check to ensure> 0
block|{
name|Integer
name|reduceAmount
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reduceAmount
operator|=
name|extractor
operator|.
name|getMapAmount
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|REDUCES
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging reducer amount"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|reduceAmount
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reduceAmount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Reducer amount can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|REDUCES
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|reduceAmount
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// overwrite the duration amount and ensure> 0
block|{
name|Integer
name|duration
init|=
literal|null
decl_stmt|;
try|try
block|{
name|duration
operator|=
name|extractor
operator|.
name|getDuration
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|DURATION
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging duration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|duration
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|duration
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Duration can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|DURATION
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|duration
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// overwrite the operation amount and ensure> 0
block|{
name|Integer
name|operationAmount
init|=
literal|null
decl_stmt|;
try|try
block|{
name|operationAmount
operator|=
name|extractor
operator|.
name|getOpCount
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|OPS
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging operation amount"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|operationAmount
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|operationAmount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Operation amount can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|OPS
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|operationAmount
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// overwrite the exit on error setting
block|{
try|try
block|{
name|boolean
name|exitOnError
init|=
name|extractor
operator|.
name|shouldExitOnFirstError
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|EXIT_ON_ERROR
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|base
operator|.
name|setBoolean
argument_list|(
name|ConfigOption
operator|.
name|EXIT_ON_ERROR
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|exitOnError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging exit on error value"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// overwrite the truncate wait setting
block|{
try|try
block|{
name|boolean
name|waitOnTruncate
init|=
name|extractor
operator|.
name|shouldWaitOnTruncate
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_WAIT
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|base
operator|.
name|setBoolean
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_WAIT
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|waitOnTruncate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging wait on truncate value"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// verify and set file limit and ensure> 0
block|{
name|Integer
name|fileAm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileAm
operator|=
name|extractor
operator|.
name|getTotalFiles
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|FILES
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging total file limit amount"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileAm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fileAm
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"File amount can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|FILES
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|fileAm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the grid queue to run on
block|{
try|try
block|{
name|String
name|qname
init|=
name|extractor
operator|.
name|getQueueName
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|QUEUE_NAME
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|QUEUE_NAME
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging queue name"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// verify and set the directory limit and ensure> 0
block|{
name|Integer
name|directoryLimit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|directoryLimit
operator|=
name|extractor
operator|.
name|getDirSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|DIR_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging directory file limit"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|directoryLimit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|directoryLimit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Directory file limit can not be less than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|DIR_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|directoryLimit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the base directory
block|{
name|Path
name|basedir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|basedir
operator|=
name|extractor
operator|.
name|getBaseDirectory
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|BASE_DIR
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging base directory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
comment|// always ensure in slive dir
name|basedir
operator|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|Constants
operator|.
name|BASE_DIR
argument_list|)
expr_stmt|;
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|BASE_DIR
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the result file
block|{
name|String
name|fn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fn
operator|=
name|extractor
operator|.
name|getResultFile
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging result file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|String
name|fn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fn
operator|=
name|extractor
operator|.
name|getResultFile
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging result file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the operations
block|{
try|try
block|{
name|base
operator|=
name|handleOperations
argument_list|(
name|opts
argument_list|,
name|base
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging operations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// set the replication amount range
block|{
name|Range
argument_list|<
name|Short
argument_list|>
name|replicationAm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replicationAm
operator|=
name|extractor
operator|.
name|getReplication
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|REPLICATION_AM
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging replication amount range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|replicationAm
operator|!=
literal|null
condition|)
block|{
name|int
name|minRepl
init|=
name|base
operator|.
name|getInt
argument_list|(
name|Constants
operator|.
name|MIN_REPLICATION
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationAm
operator|.
name|getLower
argument_list|()
operator|<
name|minRepl
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Replication amount minimum is less than property configured minimum "
operator|+
name|minRepl
argument_list|)
throw|;
block|}
if|if
condition|(
name|replicationAm
operator|.
name|getLower
argument_list|()
operator|>
name|replicationAm
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Replication amount minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|replicationAm
operator|.
name|getLower
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Replication amount minimum must be greater than zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|REPLICATION_AM
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|replicationAm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the sleep range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|sleepRange
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sleepRange
operator|=
name|extractor
operator|.
name|getSleepRange
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|SLEEP_TIME
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging sleep size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|sleepRange
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sleepRange
operator|.
name|getLower
argument_list|()
operator|>
name|sleepRange
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Sleep range minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sleepRange
operator|.
name|getLower
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Sleep range minimum must be greater than zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|SLEEP_TIME
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|sleepRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the packet size if given
block|{
name|String
name|pSize
init|=
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|PACKET_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pSize
operator|==
literal|null
condition|)
block|{
name|pSize
operator|=
name|ConfigOption
operator|.
name|PACKET_SIZE
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Long
name|packetSize
init|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|pSize
argument_list|)
decl_stmt|;
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|PACKET_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|packetSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging write packet size"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// set the block size range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|blockSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockSize
operator|=
name|extractor
operator|.
name|getBlockSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|BLOCK_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging block size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|blockSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockSize
operator|.
name|getLower
argument_list|()
operator|>
name|blockSize
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Block size minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|blockSize
operator|.
name|getLower
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Block size minimum must be greater than zero"
argument_list|)
throw|;
block|}
comment|// ensure block size is a multiple of BYTES_PER_CHECKSUM
comment|// if a value is set in the configuration
name|Long
name|bytesPerChecksum
init|=
name|extractor
operator|.
name|getByteCheckSum
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesPerChecksum
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|blockSize
operator|.
name|getLower
argument_list|()
operator|%
name|bytesPerChecksum
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Blocksize lower bound must be a multiple of "
operator|+
name|bytesPerChecksum
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|blockSize
operator|.
name|getUpper
argument_list|()
operator|%
name|bytesPerChecksum
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Blocksize upper bound must be a multiple of "
operator|+
name|bytesPerChecksum
argument_list|)
throw|;
block|}
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|BLOCK_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|blockSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the read size range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|readSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|readSize
operator|=
name|extractor
operator|.
name|getReadSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|READ_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging read size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|readSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|readSize
operator|.
name|getLower
argument_list|()
operator|>
name|readSize
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Read size minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|readSize
operator|.
name|getLower
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Read size minimum must be greater than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|READ_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|readSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the write size range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|writeSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writeSize
operator|=
name|extractor
operator|.
name|getWriteSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|WRITE_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging write size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writeSize
operator|.
name|getLower
argument_list|()
operator|>
name|writeSize
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Write size minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeSize
operator|.
name|getLower
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Write size minimum must be greater than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|WRITE_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|writeSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the append size range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|appendSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appendSize
operator|=
name|extractor
operator|.
name|getAppendSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|APPEND_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging append size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|appendSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appendSize
operator|.
name|getLower
argument_list|()
operator|>
name|appendSize
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Append size minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|appendSize
operator|.
name|getLower
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Append size minimum must be greater than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|APPEND_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|appendSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the truncate size range
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|truncateSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|truncateSize
operator|=
name|extractor
operator|.
name|getTruncateSize
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_SIZE
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging truncate size range"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|truncateSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|truncateSize
operator|.
name|getLower
argument_list|()
operator|>
name|truncateSize
operator|.
name|getUpper
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Truncate size minimum is greater than its maximum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|truncateSize
operator|.
name|getLower
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Truncate size minimum must be greater than or equal to zero"
argument_list|)
throw|;
block|}
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|TRUNCATE_SIZE
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|truncateSize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the seed
block|{
name|Long
name|seed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|seed
operator|=
name|extractor
operator|.
name|getRandomSeed
argument_list|(
name|opts
operator|.
name|getValue
argument_list|(
name|ConfigOption
operator|.
name|RANDOM_SEED
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigException
argument_list|(
literal|"Error extracting& merging random number seed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|seed
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|set
argument_list|(
name|ConfigOption
operator|.
name|RANDOM_SEED
operator|.
name|getCfgOption
argument_list|()
argument_list|,
name|seed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|base
return|;
block|}
block|}
end_class

end_unit

