begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestQueueConfigurationParser
specifier|public
class|class
name|TestQueueConfigurationParser
block|{
comment|/**  * test xml generation   * @throws ParserConfigurationException  * @throws Exception   */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testQueueConfigurationParser ()
specifier|public
name|void
name|testQueueConfigurationParser
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|Exception
block|{
name|JobQueueInfo
name|info
init|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"root"
argument_list|,
literal|"rootInfo"
argument_list|)
decl_stmt|;
name|JobQueueInfo
name|infoChild1
init|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"child1"
argument_list|,
literal|"child1Info"
argument_list|)
decl_stmt|;
name|JobQueueInfo
name|infoChild2
init|=
operator|new
name|JobQueueInfo
argument_list|(
literal|"child2"
argument_list|,
literal|"child1Info"
argument_list|)
decl_stmt|;
name|info
operator|.
name|addChild
argument_list|(
name|infoChild1
argument_list|)
expr_stmt|;
name|info
operator|.
name|addChild
argument_list|(
name|infoChild2
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|builder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
comment|// test QueueConfigurationParser.getQueueElement
name|Element
name|e
init|=
name|QueueConfigurationParser
operator|.
name|getQueueElement
argument_list|(
name|document
argument_list|,
name|info
argument_list|)
decl_stmt|;
comment|// transform result to string for check
name|DOMSource
name|domSource
init|=
operator|new
name|DOMSource
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|TransformerFactory
name|tf
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|tf
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|domSource
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|str
operator|.
name|endsWith
argument_list|(
literal|"<queue><name>root</name><properties/><state>running</state><queue><name>child1</name><properties/><state>running</state></queue><queue><name>child2</name><properties/><state>running</state></queue></queue>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

