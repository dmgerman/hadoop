begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Runs a job multiple times and takes average of all runs.  */
end_comment

begin_class
DECL|class|MRBench
specifier|public
class|class
name|MRBench
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MRBench
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_INPUT_SUB
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_INPUT_SUB
init|=
literal|"mr_input"
decl_stmt|;
DECL|field|DEFAULT_OUTPUT_SUB
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OUTPUT_SUB
init|=
literal|"mr_output"
decl_stmt|;
DECL|field|BASE_DIR
specifier|private
specifier|static
name|Path
name|BASE_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/benchmarks/MRBench"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INPUT_DIR
specifier|private
specifier|static
name|Path
name|INPUT_DIR
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
argument_list|,
name|DEFAULT_INPUT_SUB
argument_list|)
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|private
specifier|static
name|Path
name|OUTPUT_DIR
init|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
argument_list|,
name|DEFAULT_OUTPUT_SUB
argument_list|)
decl_stmt|;
DECL|enum|Order
DECL|enumConstant|RANDOM
DECL|enumConstant|ASCENDING
DECL|enumConstant|DESCENDING
specifier|public
enum|enum
name|Order
block|{
name|RANDOM
block|,
name|ASCENDING
block|,
name|DESCENDING
block|}
empty_stmt|;
comment|/**    * Takes input format as text lines, runs some processing on it and     * writes out data as text again.     */
DECL|class|Map
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|map (WritableComparable<?> key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|process
argument_list|(
name|line
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|process (String line)
specifier|public
name|String
name|process
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
return|;
block|}
block|}
comment|/**    * Ignores the key and writes values to the output.     */
DECL|class|Reduce
specifier|public
specifier|static
class|class
name|Reduce
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|values
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Generate a text file on the given filesystem with the given path name.    * The text file will contain the given number of lines of generated data.    * The generated data are string representations of numbers.  Each line    * is the same length, which is achieved by padding each number with    * an appropriate number of leading '0' (zero) characters.  The order of    * generated data is one of ascending, descending, or random.    */
DECL|method|generateTextFile (FileSystem fs, Path inputFile, long numLines, Order sortOrder)
specifier|public
name|void
name|generateTextFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|inputFile
parameter_list|,
name|long
name|numLines
parameter_list|,
name|Order
name|sortOrder
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating control file: "
operator|+
name|numLines
operator|+
literal|" numLines, "
operator|+
name|sortOrder
operator|+
literal|" sortOrder"
argument_list|)
expr_stmt|;
name|PrintStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
operator|new
name|PrintStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|inputFile
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|padding
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|numLines
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|sortOrder
condition|)
block|{
case|case
name|RANDOM
case|:
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
name|numLines
condition|;
name|l
operator|++
control|)
block|{
name|output
operator|.
name|println
argument_list|(
name|pad
argument_list|(
operator|(
operator|new
name|Random
argument_list|()
operator|)
operator|.
name|nextLong
argument_list|()
argument_list|,
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ASCENDING
case|:
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
name|numLines
condition|;
name|l
operator|++
control|)
block|{
name|output
operator|.
name|println
argument_list|(
name|pad
argument_list|(
name|l
argument_list|,
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DESCENDING
case|:
for|for
control|(
name|long
name|l
init|=
name|numLines
init|;
name|l
operator|>
literal|0
condition|;
name|l
operator|--
control|)
block|{
name|output
operator|.
name|println
argument_list|(
name|pad
argument_list|(
name|l
argument_list|,
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"created control file: "
operator|+
name|inputFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert the given number to a string and pad the number with     * leading '0' (zero) characters so that the string is exactly    * the given length.    */
DECL|method|pad (long number, int length)
specifier|private
specifier|static
name|String
name|pad
parameter_list|(
name|long
name|number
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|str
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|StringBuffer
name|value
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|str
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create the job configuration.    */
DECL|method|setupJob (int numMaps, int numReduces, String jarFile)
specifier|private
name|JobConf
name|setupJob
parameter_list|(
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|,
name|String
name|jarFile
parameter_list|)
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJarByClass
argument_list|(
name|MRBench
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|jobConf
argument_list|,
name|INPUT_DIR
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|jarFile
condition|)
block|{
name|jobConf
operator|.
name|setJar
argument_list|(
name|jarFile
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.job.complete.cancel.delegation.tokens"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
comment|/**    * Runs a MapReduce task, given number of times. The input to each run    * is the same file.    */
DECL|method|runJobInSequence (JobConf masterJobConf, int numRuns)
specifier|private
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|runJobInSequence
parameter_list|(
name|JobConf
name|masterJobConf
parameter_list|,
name|int
name|numRuns
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|execTimes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRuns
condition|;
name|i
operator|++
control|)
block|{
comment|// create a new job conf every time, reusing same object does not work
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|masterJobConf
argument_list|)
decl_stmt|;
comment|// reset the job jar because the copy constructor doesn't
name|jobConf
operator|.
name|setJar
argument_list|(
name|masterJobConf
operator|.
name|getJar
argument_list|()
argument_list|)
expr_stmt|;
comment|// give a new random name to output of the mapred tasks
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|"output_"
operator|+
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running job "
operator|+
name|i
operator|+
literal|":"
operator|+
literal|" input="
operator|+
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
index|[
literal|0
index|]
operator|+
literal|" output="
operator|+
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobConf
argument_list|)
argument_list|)
expr_stmt|;
comment|// run the mapred task now
name|long
name|curTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|execTimes
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|curTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|execTimes
return|;
block|}
comment|/**    *<pre>    * Usage: mrbench    *    [-baseDir<base DFS path for output/input, default is /benchmarks/MRBench>]    *    [-jar<local path to job jar file containing Mapper and Reducer implementations, default is current jar file>]    *    [-numRuns<number of times to run the job, default is 1>]    *    [-maps<number of maps for each run, default is 2>]    *    [-reduces<number of reduces for each run, default is 1>]    *    [-inputLines<number of input lines to generate, default is 1>]    *    [-inputType<type of input to generate, one of ascending (default), descending, random>]    *    [-verbose]    *</pre>    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|MRBench
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|version
init|=
literal|"MRBenchmark.0.0.2"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|String
name|usage
init|=
literal|"Usage: mrbench "
operator|+
literal|"[-baseDir<base DFS path for output/input, default is /benchmarks/MRBench>] "
operator|+
literal|"[-jar<local path to job jar file containing Mapper and Reducer implementations, default is current jar file>] "
operator|+
literal|"[-numRuns<number of times to run the job, default is 1>] "
operator|+
literal|"[-maps<number of maps for each run, default is 2>] "
operator|+
literal|"[-reduces<number of reduces for each run, default is 1>] "
operator|+
literal|"[-inputLines<number of input lines to generate, default is 1>] "
operator|+
literal|"[-inputType<type of input to generate, one of ascending (default), descending, random>] "
operator|+
literal|"[-verbose]"
decl_stmt|;
name|String
name|jarFile
init|=
literal|null
decl_stmt|;
name|long
name|inputLines
init|=
literal|1
decl_stmt|;
name|int
name|numRuns
init|=
literal|1
decl_stmt|;
name|int
name|numMaps
init|=
literal|2
decl_stmt|;
name|int
name|numReduces
init|=
literal|1
decl_stmt|;
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
name|Order
name|inputSortOrder
init|=
name|Order
operator|.
name|ASCENDING
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-jar"
argument_list|)
condition|)
block|{
name|jarFile
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-numRuns"
argument_list|)
condition|)
block|{
name|numRuns
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-baseDir"
argument_list|)
condition|)
block|{
name|BASE_DIR
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
name|INPUT_DIR
operator|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
argument_list|,
name|DEFAULT_INPUT_SUB
argument_list|)
expr_stmt|;
name|OUTPUT_DIR
operator|=
operator|new
name|Path
argument_list|(
name|BASE_DIR
argument_list|,
name|DEFAULT_OUTPUT_SUB
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-maps"
argument_list|)
condition|)
block|{
name|numMaps
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-reduces"
argument_list|)
condition|)
block|{
name|numReduces
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-inputLines"
argument_list|)
condition|)
block|{
name|inputLines
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-inputType"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|args
index|[
operator|++
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ascending"
argument_list|)
condition|)
block|{
name|inputSortOrder
operator|=
name|Order
operator|.
name|ASCENDING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"descending"
argument_list|)
condition|)
block|{
name|inputSortOrder
operator|=
name|Order
operator|.
name|DESCENDING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"random"
argument_list|)
condition|)
block|{
name|inputSortOrder
operator|=
name|Order
operator|.
name|RANDOM
expr_stmt|;
block|}
else|else
block|{
name|inputSortOrder
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numRuns
operator|<
literal|1
operator|||
comment|// verify args
name|numMaps
operator|<
literal|1
operator|||
name|numReduces
operator|<
literal|1
operator|||
name|inputLines
operator|<
literal|0
operator|||
name|inputSortOrder
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|JobConf
name|jobConf
init|=
name|setupJob
argument_list|(
name|numMaps
argument_list|,
name|numReduces
argument_list|,
name|jarFile
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|INPUT_DIR
argument_list|,
literal|"input_"
operator|+
operator|(
operator|new
name|Random
argument_list|()
operator|)
operator|.
name|nextInt
argument_list|()
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|generateTextFile
argument_list|(
name|fs
argument_list|,
name|inputFile
argument_list|,
name|inputLines
argument_list|,
name|inputSortOrder
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|execTimes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|execTimes
operator|=
name|runJobInSequence
argument_list|(
name|jobConf
argument_list|,
name|numRuns
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// delete all generated data -- should we really do this?
comment|// we don't know how much of the path was created for the run but this
comment|// cleans up as much as we can
name|fs
operator|.
name|delete
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|INPUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
comment|// Print out a report
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total MapReduce jobs executed: "
operator|+
name|numRuns
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total lines of data per job: "
operator|+
name|inputLines
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Maps per job: "
operator|+
name|numMaps
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reduces per job: "
operator|+
name|numReduces
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|time
range|:
name|execTimes
control|)
block|{
name|totalTime
operator|+=
name|time
operator|.
name|longValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total milliseconds for task: "
operator|+
operator|(
operator|++
name|i
operator|)
operator|+
literal|" = "
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|avgTime
init|=
name|totalTime
operator|/
name|numRuns
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DataLines\tMaps\tReduces\tAvgTime (milliseconds)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inputLines
operator|+
literal|"\t\t"
operator|+
name|numMaps
operator|+
literal|"\t"
operator|+
name|numReduces
operator|+
literal|"\t"
operator|+
name|avgTime
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

