begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.partition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|JavaSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|JavaSerializationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|WritableSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_class
DECL|class|TestTotalOrderPartitioner
specifier|public
class|class
name|TestTotalOrderPartitioner
extends|extends
name|TestCase
block|{
DECL|field|splitStrings
specifier|private
specifier|static
specifier|final
name|Text
index|[]
name|splitStrings
init|=
operator|new
name|Text
index|[]
block|{
comment|// -inf            // 0
operator|new
name|Text
argument_list|(
literal|"aabbb"
argument_list|)
block|,
comment|// 1
operator|new
name|Text
argument_list|(
literal|"babbb"
argument_list|)
block|,
comment|// 2
operator|new
name|Text
argument_list|(
literal|"daddd"
argument_list|)
block|,
comment|// 3
operator|new
name|Text
argument_list|(
literal|"dddee"
argument_list|)
block|,
comment|// 4
operator|new
name|Text
argument_list|(
literal|"ddhee"
argument_list|)
block|,
comment|// 5
operator|new
name|Text
argument_list|(
literal|"dingo"
argument_list|)
block|,
comment|// 6
operator|new
name|Text
argument_list|(
literal|"hijjj"
argument_list|)
block|,
comment|// 7
operator|new
name|Text
argument_list|(
literal|"n"
argument_list|)
block|,
comment|// 8
operator|new
name|Text
argument_list|(
literal|"yak"
argument_list|)
block|,
comment|// 9
block|}
decl_stmt|;
DECL|field|splitJavaStrings
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|splitJavaStrings
init|=
operator|new
name|String
index|[]
block|{
comment|// -inf            // 0
operator|new
name|String
argument_list|(
literal|"aabbb"
argument_list|)
block|,
comment|// 1
operator|new
name|String
argument_list|(
literal|"babbb"
argument_list|)
block|,
comment|// 2
operator|new
name|String
argument_list|(
literal|"daddd"
argument_list|)
block|,
comment|// 3
operator|new
name|String
argument_list|(
literal|"dddee"
argument_list|)
block|,
comment|// 4
operator|new
name|String
argument_list|(
literal|"ddhee"
argument_list|)
block|,
comment|// 5
operator|new
name|String
argument_list|(
literal|"dingo"
argument_list|)
block|,
comment|// 6
operator|new
name|String
argument_list|(
literal|"hijjj"
argument_list|)
block|,
comment|// 7
operator|new
name|String
argument_list|(
literal|"n"
argument_list|)
block|,
comment|// 8
operator|new
name|String
argument_list|(
literal|"yak"
argument_list|)
block|,
comment|// 9
block|}
decl_stmt|;
DECL|class|Check
specifier|static
class|class
name|Check
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|data
name|T
name|data
decl_stmt|;
DECL|field|part
name|int
name|part
decl_stmt|;
DECL|method|Check (T data, int part)
name|Check
parameter_list|(
name|T
name|data
parameter_list|,
name|int
name|part
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|part
operator|=
name|part
expr_stmt|;
block|}
block|}
DECL|field|testStrings
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|>
name|testStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaabb"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aabbb"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"babbb"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"baabb"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"yai"
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"yak"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ddngo"
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|testStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|field|testJavaStrings
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|String
argument_list|>
argument_list|>
name|testJavaStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"aaabb"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"aabbb"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"babbb"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"baabb"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"yai"
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"yak"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"ddngo"
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|testJavaStrings
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|method|writePartitionFile ( String testname, Configuration conf, T[] splits)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Path
name|writePartitionFile
parameter_list|(
name|String
name|testname
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|T
index|[]
name|splits
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|testdir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
name|testname
operator|+
literal|"/_partition.lst"
argument_list|)
decl_stmt|;
name|TotalOrderPartitioner
operator|.
name|setPartitionFile
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
name|splits
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|w
init|=
literal|null
decl_stmt|;
try|try
block|{
name|w
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|p
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|splits
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|append
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|w
condition|)
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
DECL|method|testTotalOrderWithCustomSerialization ()
specifier|public
name|void
name|testTotalOrderWithCustomSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|TotalOrderPartitioner
argument_list|<
name|String
argument_list|,
name|NullWritable
argument_list|>
name|partitioner
init|=
operator|new
name|TotalOrderPartitioner
argument_list|<
name|String
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|,
name|JavaSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|WritableSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|KEY_COMPARATOR
argument_list|,
name|JavaSerializationComparator
operator|.
name|class
argument_list|,
name|Comparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|TestTotalOrderPartitioner
operator|.
expr|<
name|String
operator|>
name|writePartitionFile
argument_list|(
literal|"totalordercustomserialization"
argument_list|,
name|conf
argument_list|,
name|splitJavaStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_CLASS
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|partitioner
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NullWritable
name|nw
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Check
argument_list|<
name|String
argument_list|>
name|chk
range|:
name|testJavaStrings
control|)
block|{
name|assertEquals
argument_list|(
name|chk
operator|.
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|chk
operator|.
name|part
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|chk
operator|.
name|data
argument_list|,
name|nw
argument_list|,
name|splitJavaStrings
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTotalOrderMemCmp ()
specifier|public
name|void
name|testTotalOrderMemCmp
parameter_list|()
throws|throws
name|Exception
block|{
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
name|partitioner
init|=
operator|new
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|TestTotalOrderPartitioner
operator|.
expr|<
name|Text
operator|>
name|writePartitionFile
argument_list|(
literal|"totalordermemcmp"
argument_list|,
name|conf
argument_list|,
name|splitStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_CLASS
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|partitioner
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NullWritable
name|nw
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Check
argument_list|<
name|Text
argument_list|>
name|chk
range|:
name|testStrings
control|)
block|{
name|assertEquals
argument_list|(
name|chk
operator|.
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|chk
operator|.
name|part
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|chk
operator|.
name|data
argument_list|,
name|nw
argument_list|,
name|splitStrings
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTotalOrderBinarySearch ()
specifier|public
name|void
name|testTotalOrderBinarySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
name|partitioner
init|=
operator|new
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|TestTotalOrderPartitioner
operator|.
expr|<
name|Text
operator|>
name|writePartitionFile
argument_list|(
literal|"totalorderbinarysearch"
argument_list|,
name|conf
argument_list|,
name|splitStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TotalOrderPartitioner
operator|.
name|NATURAL_ORDER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_CLASS
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|partitioner
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NullWritable
name|nw
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Check
argument_list|<
name|Text
argument_list|>
name|chk
range|:
name|testStrings
control|)
block|{
name|assertEquals
argument_list|(
name|chk
operator|.
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|chk
operator|.
name|part
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|chk
operator|.
name|data
argument_list|,
name|nw
argument_list|,
name|splitStrings
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReverseStringComparator
specifier|public
specifier|static
class|class
name|ReverseStringComparator
implements|implements
name|RawComparator
argument_list|<
name|Text
argument_list|>
block|{
DECL|method|compare (Text a, Text b)
specifier|public
name|int
name|compare
parameter_list|(
name|Text
name|a
parameter_list|,
name|Text
name|b
parameter_list|)
block|{
return|return
operator|-
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
name|int
name|n1
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b1
index|[
name|s1
index|]
argument_list|)
decl_stmt|;
name|int
name|n2
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b2
index|[
name|s2
index|]
argument_list|)
decl_stmt|;
return|return
operator|-
literal|1
operator|*
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
operator|+
name|n1
argument_list|,
name|l1
operator|-
name|n1
argument_list|,
name|b2
argument_list|,
name|s2
operator|+
name|n2
argument_list|,
name|l2
operator|-
name|n2
argument_list|)
return|;
block|}
block|}
DECL|method|testTotalOrderCustomComparator ()
specifier|public
name|void
name|testTotalOrderCustomComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
name|partitioner
init|=
operator|new
name|TotalOrderPartitioner
argument_list|<
name|Text
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Text
index|[]
name|revSplitStrings
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|splitStrings
argument_list|,
name|splitStrings
operator|.
name|length
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|revSplitStrings
argument_list|,
operator|new
name|ReverseStringComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|TestTotalOrderPartitioner
operator|.
expr|<
name|Text
operator|>
name|writePartitionFile
argument_list|(
literal|"totalordercustomcomparator"
argument_list|,
name|conf
argument_list|,
name|revSplitStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TotalOrderPartitioner
operator|.
name|NATURAL_ORDER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_KEY_CLASS
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|KEY_COMPARATOR
argument_list|,
name|ReverseStringComparator
operator|.
name|class
argument_list|,
name|RawComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|>
name|revCheck
init|=
operator|new
name|ArrayList
argument_list|<
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaabb"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aabbb"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaaaa"
argument_list|)
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"babbb"
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"baabb"
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"yai"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"yak"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ddngo"
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|revCheck
operator|.
name|add
argument_list|(
operator|new
name|Check
argument_list|<
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"hi"
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|partitioner
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NullWritable
name|nw
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Check
argument_list|<
name|Text
argument_list|>
name|chk
range|:
name|revCheck
control|)
block|{
name|assertEquals
argument_list|(
name|chk
operator|.
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|chk
operator|.
name|part
argument_list|,
name|partitioner
operator|.
name|getPartition
argument_list|(
name|chk
operator|.
name|data
argument_list|,
name|nw
argument_list|,
name|splitStrings
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

