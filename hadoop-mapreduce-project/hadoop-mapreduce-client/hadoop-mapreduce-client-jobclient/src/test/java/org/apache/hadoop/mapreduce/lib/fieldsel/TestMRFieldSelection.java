begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.fieldsel
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|fieldsel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestMRFieldSelection
specifier|public
class|class
name|TestMRFieldSelection
block|{
DECL|field|idFormat
specifier|private
specifier|static
name|NumberFormat
name|idFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|idFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|idFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldSelection ()
specifier|public
name|void
name|testFieldSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|launch
argument_list|()
expr_stmt|;
block|}
DECL|field|testDir
specifier|private
specifier|static
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
DECL|method|launch ()
specifier|public
specifier|static
name|void
name|launch
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numOfInputLines
init|=
literal|10
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output_for_field_selection_test"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"input_for_field_selection_test"
argument_list|)
decl_stmt|;
name|StringBuffer
name|inputData
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|expectedOutput
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|constructInputOutputData
argument_list|(
name|inputData
argument_list|,
name|expectedOutput
argument_list|,
name|numOfInputLines
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FieldSelectionHelper
operator|.
name|DATA_FIELD_SEPARATOR
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FieldSelectionHelper
operator|.
name|MAP_OUTPUT_KEY_VALUE_SPEC
argument_list|,
literal|"6,5,1-3:0-"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FieldSelectionHelper
operator|.
name|REDUCE_OUTPUT_KEY_VALUE_SPEC
argument_list|,
literal|":4,3,2,1,0,0-"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|inputData
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|FieldSelectionMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|FieldSelectionReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job Failed!"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// Finally, we compare the reconstructed answer key with the
comment|// original one.  Remember, we need to ignore zero-count items
comment|// in the original key.
comment|//
name|String
name|outdata
init|=
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Outputs doesnt match."
argument_list|,
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|,
name|outdata
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|constructInputOutputData (StringBuffer inputData, StringBuffer expectedOutput, int numOfInputLines)
specifier|public
specifier|static
name|void
name|constructInputOutputData
parameter_list|(
name|StringBuffer
name|inputData
parameter_list|,
name|StringBuffer
name|expectedOutput
parameter_list|,
name|int
name|numOfInputLines
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfInputLines
condition|;
name|i
operator|++
control|)
block|{
name|inputData
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|inputData
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|idFormat
operator|.
name|format
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"inputData:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inputData
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ExpectedData:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

