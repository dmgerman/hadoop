begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestGetSplitHosts
specifier|public
class|class
name|TestGetSplitHosts
block|{
annotation|@
name|Test
DECL|method|testGetSplitHosts ()
specifier|public
name|void
name|testGetSplitHosts
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBlocks
init|=
literal|3
decl_stmt|;
name|int
name|block1Size
init|=
literal|100
decl_stmt|,
name|block2Size
init|=
literal|150
decl_stmt|,
name|block3Size
init|=
literal|75
decl_stmt|;
name|int
name|fileSize
init|=
name|block1Size
operator|+
name|block2Size
operator|+
name|block3Size
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|3
decl_stmt|;
name|NetworkTopology
name|clusterMap
init|=
operator|new
name|NetworkTopology
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|bs
init|=
operator|new
name|BlockLocation
index|[
name|numBlocks
index|]
decl_stmt|;
name|String
index|[]
name|block1Hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
name|String
index|[]
name|block1Names
init|=
block|{
literal|"host1:100"
block|,
literal|"host2:100"
block|,
literal|"host3:100"
block|}
decl_stmt|;
name|String
index|[]
name|block1Racks
init|=
block|{
literal|"/rack1/"
block|,
literal|"/rack1/"
block|,
literal|"/rack2/"
block|}
decl_stmt|;
name|String
index|[]
name|block1Paths
init|=
operator|new
name|String
index|[
name|replicationFactor
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicationFactor
condition|;
name|i
operator|++
control|)
block|{
name|block1Paths
index|[
name|i
index|]
operator|=
name|block1Racks
index|[
name|i
index|]
operator|+
name|block1Names
index|[
name|i
index|]
expr_stmt|;
block|}
name|bs
index|[
literal|0
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block1Names
argument_list|,
name|block1Hosts
argument_list|,
name|block1Paths
argument_list|,
literal|0
argument_list|,
name|block1Size
argument_list|)
expr_stmt|;
name|String
index|[]
name|block2Hosts
init|=
block|{
literal|"host4"
block|,
literal|"host5"
block|,
literal|"host6"
block|}
decl_stmt|;
name|String
index|[]
name|block2Names
init|=
block|{
literal|"host4:100"
block|,
literal|"host5:100"
block|,
literal|"host6:100"
block|}
decl_stmt|;
name|String
index|[]
name|block2Racks
init|=
block|{
literal|"/rack2/"
block|,
literal|"/rack3/"
block|,
literal|"/rack3/"
block|}
decl_stmt|;
name|String
index|[]
name|block2Paths
init|=
operator|new
name|String
index|[
name|replicationFactor
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicationFactor
condition|;
name|i
operator|++
control|)
block|{
name|block2Paths
index|[
name|i
index|]
operator|=
name|block2Racks
index|[
name|i
index|]
operator|+
name|block2Names
index|[
name|i
index|]
expr_stmt|;
block|}
name|bs
index|[
literal|1
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block2Names
argument_list|,
name|block2Hosts
argument_list|,
name|block2Paths
argument_list|,
name|block1Size
argument_list|,
name|block2Size
argument_list|)
expr_stmt|;
name|String
index|[]
name|block3Hosts
init|=
block|{
literal|"host1"
block|,
literal|"host7"
block|,
literal|"host8"
block|}
decl_stmt|;
name|String
index|[]
name|block3Names
init|=
block|{
literal|"host1:100"
block|,
literal|"host7:100"
block|,
literal|"host8:100"
block|}
decl_stmt|;
name|String
index|[]
name|block3Racks
init|=
block|{
literal|"/rack1/"
block|,
literal|"/rack4/"
block|,
literal|"/rack4/"
block|}
decl_stmt|;
name|String
index|[]
name|block3Paths
init|=
operator|new
name|String
index|[
name|replicationFactor
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicationFactor
condition|;
name|i
operator|++
control|)
block|{
name|block3Paths
index|[
name|i
index|]
operator|=
name|block3Racks
index|[
name|i
index|]
operator|+
name|block3Names
index|[
name|i
index|]
expr_stmt|;
block|}
name|bs
index|[
literal|2
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block3Names
argument_list|,
name|block3Hosts
argument_list|,
name|block3Paths
argument_list|,
name|block1Size
operator|+
name|block2Size
argument_list|,
name|block3Size
argument_list|)
expr_stmt|;
name|SequenceFileInputFormat
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sif
init|=
operator|new
name|SequenceFileInputFormat
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts
init|=
name|sif
operator|.
name|getSplitHosts
argument_list|(
name|bs
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|,
name|clusterMap
argument_list|)
decl_stmt|;
comment|// Contributions By Racks are
comment|// Rack1   175
comment|// Rack2   275
comment|// Rack3   150
comment|// So, Rack2 hosts, host4 and host 3 should be returned
comment|// even if their individual contribution is not the highest
name|assertTrue
argument_list|(
name|hosts
operator|.
name|length
operator|==
name|replicationFactor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hosts
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"host4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hosts
index|[
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"host3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hosts
index|[
literal|2
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now Create the blocks without topology information
name|bs
index|[
literal|0
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block1Names
argument_list|,
name|block1Hosts
argument_list|,
literal|0
argument_list|,
name|block1Size
argument_list|)
expr_stmt|;
name|bs
index|[
literal|1
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block2Names
argument_list|,
name|block2Hosts
argument_list|,
name|block1Size
argument_list|,
name|block2Size
argument_list|)
expr_stmt|;
name|bs
index|[
literal|2
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|block3Names
argument_list|,
name|block3Hosts
argument_list|,
name|block1Size
operator|+
name|block2Size
argument_list|,
name|block3Size
argument_list|)
expr_stmt|;
name|hosts
operator|=
name|sif
operator|.
name|getSplitHosts
argument_list|(
name|bs
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|,
name|clusterMap
argument_list|)
expr_stmt|;
comment|// host1 makes the highest contribution among all hosts
comment|// So, that should be returned before others
name|assertTrue
argument_list|(
name|hosts
operator|.
name|length
operator|==
name|replicationFactor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hosts
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

