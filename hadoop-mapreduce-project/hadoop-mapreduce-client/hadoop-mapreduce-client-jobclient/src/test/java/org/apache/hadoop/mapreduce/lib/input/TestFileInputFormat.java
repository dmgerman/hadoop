begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoMaker
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_class
DECL|class|TestFileInputFormat
specifier|public
class|class
name|TestFileInputFormat
block|{
annotation|@
name|Test
DECL|method|testAddInputPath ()
specifier|public
name|void
name|testAddInputPath
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"s3://abc:xyz@hostname/"
argument_list|)
expr_stmt|;
specifier|final
name|Job
name|j
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"s3://abc:xyz@hostname/"
argument_list|)
expr_stmt|;
comment|//setup default fs
specifier|final
name|FileSystem
name|defaultfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"defaultfs.getUri() = "
operator|+
name|defaultfs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|//test addInputPath
specifier|final
name|Path
name|original
init|=
operator|new
name|Path
argument_list|(
literal|"file:/foo"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"original = "
operator|+
name|original
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|j
argument_list|,
name|original
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|results
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test setInputPaths
specifier|final
name|Path
name|original
init|=
operator|new
name|Path
argument_list|(
literal|"file:/bar"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"original = "
operator|+
name|original
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|j
argument_list|,
name|original
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|results
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNumInputFiles ()
specifier|public
name|void
name|testNumInputFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|spy
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|Job
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|conf
argument_list|)
operator|.
name|from
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
literal|0L
argument_list|)
operator|.
name|from
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|TextInputFormat
name|ispy
init|=
name|spy
argument_list|(
operator|new
name|TextInputFormat
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|stat
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|ispy
argument_list|)
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|ispy
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|conf
argument_list|)
operator|.
name|setLong
argument_list|(
name|FileInputFormat
operator|.
name|NUM_INPUT_FILES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|testLastInputSplitAtSplitBoundary ()
specifier|public
name|void
name|testLastInputSplitAtSplitBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
name|fif
init|=
operator|new
name|FileInputFormatForTest
argument_list|(
literal|1024l
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|128l
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|mock
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fif
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InputSplit
name|split
init|=
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"host"
operator|+
name|i
operator|)
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|testLastInputSplitExceedingSplitBoundary ()
specifier|public
name|void
name|testLastInputSplitExceedingSplitBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
name|fif
init|=
operator|new
name|FileInputFormatForTest
argument_list|(
literal|1027l
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|128l
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|mock
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fif
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InputSplit
name|split
init|=
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"host"
operator|+
name|i
operator|)
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|testLastInputSplitSingleSplit ()
specifier|public
name|void
name|testLastInputSplitSingleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
name|fif
init|=
operator|new
name|FileInputFormatForTest
argument_list|(
literal|100l
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|128l
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|mock
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|fif
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InputSplit
name|split
init|=
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"host"
operator|+
name|i
operator|)
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test when the input file's length is 0.    */
annotation|@
name|Test
DECL|method|testForEmptyFile ()
specifier|public
name|void
name|testForEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"test"
operator|+
literal|"/file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1024
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// split it using a File input format
name|DummyInputFormat
name|inFormat
init|=
operator|new
name|DummyInputFormat
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|inFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSplit
name|fileSplit
init|=
operator|(
name|FileSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileSplit
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|fileSplit
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileSplit
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileSplit
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy class to extend FileInputFormat*/
DECL|class|DummyInputFormat
specifier|private
class|class
name|DummyInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FileInputFormatForTest
specifier|private
class|class
name|FileInputFormatForTest
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|splitSize
name|long
name|splitSize
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|method|FileInputFormatForTest (long length, long splitSize)
name|FileInputFormatForTest
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|splitSize
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|splitSize
operator|=
name|splitSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (JobContext job)
specifier|protected
name|List
argument_list|<
name|FileStatus
argument_list|>
name|listStatus
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|mockFileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|splitSize
argument_list|)
expr_stmt|;
name|Path
name|mockPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
name|mockBlockLocations
argument_list|(
name|length
argument_list|,
name|splitSize
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileBlockLocations
argument_list|(
name|mockFileStatus
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blockLocations
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPath
operator|.
name|getFileSystem
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|mockFileStatus
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|computeSplitSize (long blockSize, long minSize, long maxSize)
specifier|protected
name|long
name|computeSplitSize
parameter_list|(
name|long
name|blockSize
parameter_list|,
name|long
name|minSize
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
return|return
name|splitSize
return|;
block|}
DECL|method|mockBlockLocations (long size, long splitSize)
specifier|private
name|BlockLocation
index|[]
name|mockBlockLocations
parameter_list|(
name|long
name|size
parameter_list|,
name|long
name|splitSize
parameter_list|)
block|{
name|int
name|numLocations
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|/
name|splitSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|%
name|splitSize
operator|!=
literal|0
condition|)
name|numLocations
operator|++
expr_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
operator|new
name|BlockLocation
index|[
name|numLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocations
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"b"
operator|+
name|i
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host"
operator|+
name|i
block|}
decl_stmt|;
name|blockLocations
index|[
name|i
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|i
operator|*
name|splitSize
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|splitSize
argument_list|,
name|size
operator|-
operator|(
name|splitSize
operator|*
name|i
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|blockLocations
return|;
block|}
block|}
block|}
end_class

end_unit

