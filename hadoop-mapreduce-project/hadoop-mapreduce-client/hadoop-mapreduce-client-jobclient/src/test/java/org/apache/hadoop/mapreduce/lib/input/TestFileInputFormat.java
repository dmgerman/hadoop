begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoMaker
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_class
DECL|class|TestFileInputFormat
specifier|public
class|class
name|TestFileInputFormat
block|{
annotation|@
name|Test
DECL|method|testAddInputPath ()
specifier|public
name|void
name|testAddInputPath
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"s3://abc:xyz@hostname/"
argument_list|)
expr_stmt|;
specifier|final
name|Job
name|j
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|j
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"s3://abc:xyz@hostname/"
argument_list|)
expr_stmt|;
comment|//setup default fs
specifier|final
name|FileSystem
name|defaultfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"defaultfs.getUri() = "
operator|+
name|defaultfs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|//test addInputPath
specifier|final
name|Path
name|original
init|=
operator|new
name|Path
argument_list|(
literal|"file:/foo"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"original = "
operator|+
name|original
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|j
argument_list|,
name|original
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|results
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test setInputPaths
specifier|final
name|Path
name|original
init|=
operator|new
name|Path
argument_list|(
literal|"file:/bar"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"original = "
operator|+
name|original
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|j
argument_list|,
name|original
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|results
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNumInputFiles ()
specifier|public
name|void
name|testNumInputFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|spy
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|Job
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|conf
argument_list|)
operator|.
name|from
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
literal|0L
argument_list|)
operator|.
name|from
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|TextInputFormat
name|ispy
init|=
name|spy
argument_list|(
operator|new
name|TextInputFormat
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|stat
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|ispy
argument_list|)
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|ispy
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|conf
argument_list|)
operator|.
name|setLong
argument_list|(
name|FileInputFormat
operator|.
name|NUM_INPUT_FILES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

