begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|LineRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|reduce
operator|.
name|IntSumReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMapperReducerCleanup
specifier|public
class|class
name|TestMapperReducerCleanup
block|{
DECL|field|mapCleanup
specifier|static
name|boolean
name|mapCleanup
init|=
literal|false
decl_stmt|;
DECL|field|reduceCleanup
specifier|static
name|boolean
name|reduceCleanup
init|=
literal|false
decl_stmt|;
DECL|field|recordReaderCleanup
specifier|static
name|boolean
name|recordReaderCleanup
init|=
literal|false
decl_stmt|;
DECL|field|recordWriterCleanup
specifier|static
name|boolean
name|recordWriterCleanup
init|=
literal|false
decl_stmt|;
DECL|method|reset ()
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|mapCleanup
operator|=
literal|false
expr_stmt|;
name|reduceCleanup
operator|=
literal|false
expr_stmt|;
name|recordReaderCleanup
operator|=
literal|false
expr_stmt|;
name|recordWriterCleanup
operator|=
literal|false
expr_stmt|;
block|}
DECL|class|FailingMapper
specifier|private
specifier|static
class|class
name|FailingMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
comment|/** Map method with different behavior based on the thread id */
DECL|method|map (LongWritable key, Text val, Context c)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|Context
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TestMapperReducerCleanup"
argument_list|)
throw|;
block|}
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|mapCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TrackingTokenizerMapper
specifier|private
specifier|static
class|class
name|TrackingTokenizerMapper
extends|extends
name|Mapper
argument_list|<
name|Object
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|one
specifier|private
specifier|final
specifier|static
name|IntWritable
name|one
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|word
specifier|private
name|Text
name|word
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|method|map (Object key, Text value, Context context )
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringTokenizer
name|itr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|word
operator|.
name|set
argument_list|(
name|itr
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|word
argument_list|,
name|one
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|cleanup (org.apache.hadoop.mapreduce.Mapper.Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|mapCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailingReducer
specifier|private
specifier|static
class|class
name|FailingReducer
extends|extends
name|Reducer
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
DECL|method|reduce (LongWritable key, Iterable<Text> vals, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|Text
argument_list|>
name|vals
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TestMapperReducerCleanup"
argument_list|)
throw|;
block|}
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|reduceCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|TrackingIntSumReducer
specifier|private
specifier|static
class|class
name|TrackingIntSumReducer
extends|extends
name|IntSumReducer
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|reduceCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TrackingTextInputFormat
specifier|public
specifier|static
class|class
name|TrackingTextInputFormat
extends|extends
name|TextInputFormat
block|{
DECL|class|TrackingRecordReader
specifier|public
specifier|static
class|class
name|TrackingRecordReader
extends|extends
name|LineRecordReader
block|{
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|recordReaderCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRecordReader ( InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|TrackingRecordReader
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|TrackingTextOutputFormat
specifier|public
specifier|static
class|class
name|TrackingTextOutputFormat
extends|extends
name|TextOutputFormat
block|{
DECL|class|TrackingRecordWriter
specifier|public
specifier|static
class|class
name|TrackingRecordWriter
extends|extends
name|LineRecordWriter
block|{
DECL|method|TrackingRecordWriter (DataOutputStream out)
specifier|public
name|TrackingRecordWriter
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (TaskAttemptContext context)
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|recordWriterCleanup
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRecordWriter (TaskAttemptContext job)
specifier|public
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|getDefaultWorkFile
argument_list|(
name|job
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fileOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|TrackingRecordWriter
argument_list|(
name|fileOut
argument_list|)
return|;
block|}
block|}
comment|/**    * Create a single input file in the input directory.    * @param dirPath the directory in which the file resides    * @param id the file id number    * @param numRecords how many records to write to each file.    */
DECL|method|createInputFile (Path dirPath, int id, int numRecords)
specifier|private
name|void
name|createInputFile
parameter_list|(
name|Path
name|dirPath
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|MESSAGE
init|=
literal|"This is a line in a file: "
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|""
operator|+
name|id
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|write
argument_list|(
name|MESSAGE
operator|+
name|id
operator|+
literal|" "
operator|+
name|i
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|INPUT_DIR
specifier|private
specifier|final
name|String
name|INPUT_DIR
init|=
literal|"input"
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|private
specifier|final
name|String
name|OUTPUT_DIR
init|=
literal|"output"
decl_stmt|;
DECL|method|getInputPath ()
specifier|private
name|Path
name|getInputPath
parameter_list|()
block|{
name|String
name|dataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataDir
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|INPUT_DIR
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
argument_list|,
name|INPUT_DIR
argument_list|)
return|;
block|}
block|}
DECL|method|getOutputPath ()
specifier|private
name|Path
name|getOutputPath
parameter_list|()
block|{
name|String
name|dataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataDir
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
argument_list|,
name|OUTPUT_DIR
argument_list|)
return|;
block|}
block|}
DECL|method|createInput ()
specifier|private
name|Path
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|inputPath
init|=
name|getInputPath
argument_list|()
decl_stmt|;
comment|// Clear the input directory if it exists, first.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Create an input file
name|createInputFile
argument_list|(
name|inputPath
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
name|inputPath
return|;
block|}
annotation|@
name|Test
DECL|method|testMapCleanup ()
specifier|public
name|void
name|testMapCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|inputPath
init|=
name|createInput
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|FailingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TrackingTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TrackingTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mapCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordReaderCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordWriterCleanup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReduceCleanup ()
specifier|public
name|void
name|testReduceCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|inputPath
init|=
name|createInput
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|TrackingTokenizerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|FailingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TrackingTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TrackingTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mapCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reduceCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordReaderCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordWriterCleanup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobSuccessCleanup ()
specifier|public
name|void
name|testJobSuccessCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Path
name|inputPath
init|=
name|createInput
argument_list|()
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|TrackingTokenizerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|TrackingIntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TrackingTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TrackingTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mapCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reduceCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordReaderCleanup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recordWriterCleanup
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

