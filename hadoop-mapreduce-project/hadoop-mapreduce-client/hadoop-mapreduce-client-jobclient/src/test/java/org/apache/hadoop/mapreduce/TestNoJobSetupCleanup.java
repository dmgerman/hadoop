begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|TestNoJobSetupCleanup
specifier|public
class|class
name|TestNoJobSetupCleanup
extends|extends
name|HadoopTestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|inDir
specifier|private
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"./wc/input"
argument_list|)
decl_stmt|;
DECL|field|outDir
specifier|private
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"./wc/output"
argument_list|)
decl_stmt|;
DECL|method|TestNoJobSetupCleanup ()
specifier|public
name|TestNoJobSetupCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|CLUSTER_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|submitAndValidateJob (Configuration conf, int numMaps, int numReds)
specifier|private
name|Job
name|submitAndValidateJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|numMaps
argument_list|,
name|numReds
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|MyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|length
operator|==
name|numMaps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|.
name|length
operator|==
name|numReds
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Job output directory doesn't exit!"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// job commit done only in cleanup
comment|// therefore output should still be in temp location
name|String
name|tempWorkingPathStr
init|=
name|outDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"_temporary"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"0"
decl_stmt|;
name|Path
name|tempWorkingPath
init|=
operator|new
name|Path
argument_list|(
name|tempWorkingPathStr
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|list
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tempWorkingPath
argument_list|,
operator|new
name|OutputFilter
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numPartFiles
init|=
name|numReds
operator|==
literal|0
condition|?
name|numMaps
else|:
name|numReds
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of part-files is "
operator|+
name|list
operator|.
name|length
operator|+
literal|" and not "
operator|+
name|numPartFiles
argument_list|,
name|list
operator|.
name|length
operator|==
name|numPartFiles
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
annotation|@
name|Test
DECL|method|testNoJobSetupCleanup ()
specifier|public
name|void
name|testNoJobSetupCleanup
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
comment|// run a job without job-setup and cleanup
name|submitAndValidateJob
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// run a map only job.
name|submitAndValidateJob
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// run empty job without job setup and cleanup
name|submitAndValidateJob
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// run empty job without job setup and cleanup, with non-zero reduces
name|submitAndValidateJob
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MyOutputFormat
specifier|public
specifier|static
class|class
name|MyOutputFormat
extends|extends
name|TextOutputFormat
block|{
DECL|method|checkOutputSpecs (JobContext job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|FileAlreadyExistsException
throws|,
name|IOException
block|{
name|super
operator|.
name|checkOutputSpecs
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// creating dummy TaskAttemptID
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"jt"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|JOB_SETUP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|getOutputCommitter
argument_list|(
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tid
argument_list|)
argument_list|)
operator|.
name|setupJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OutputFilter
specifier|private
specifier|static
class|class
name|OutputFilter
implements|implements
name|PathFilter
block|{
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
operator|!
operator|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

