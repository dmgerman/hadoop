begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TestJobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|MiniMRYarnCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|PerNodeTimelineCollectorsAuxService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestMRTimelineEventHandling
specifier|public
class|class
name|TestMRTimelineEventHandling
block|{
DECL|field|TIMELINE_AUX_SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TIMELINE_AUX_SERVICE_NAME
init|=
literal|"timeline_collector"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMRTimelineEventHandling
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testTimelineServiceStartInMiniCluster ()
specifier|public
name|void
name|testTimelineServiceStartInMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|/*      * Timeline service should not start if the config is set to false      * Regardless to the value of MAPREDUCE_JOB_EMIT_TIMELINE_DATA      */
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniMRYarnCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRTimelineEventHandling
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//verify that the timeline service is not started.
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Timeline Service should not have been started"
argument_list|,
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestJobHistoryEventHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//verify that the timeline service is not started.
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Timeline Service should not have been started"
argument_list|,
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMRTimelineEventHandling ()
specifier|public
name|void
name|testMRTimelineEventHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniMRYarnCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRTimelineEventHandling
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineStore
name|ts
init|=
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
decl_stmt|;
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|tEntity
init|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|job
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
name|tEntity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|job
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
name|tEntity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_FAILED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testMRNewTimelineServiceEventHandling ()
specifier|public
name|void
name|testMRNewTimelineServiceEventHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMRNewTimelineServiceEventHandling start."
argument_list|)
expr_stmt|;
name|String
name|testDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-test_dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|storageDir
init|=
name|testDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"timeline_service_data"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable new timeline service
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the file system root directory
name|conf
operator|.
name|set
argument_list|(
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_DIR_ROOT
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
comment|// enable aux-service based timeline collectors
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
name|TIMELINE_AUX_SERVICE_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
operator|+
literal|"."
operator|+
name|TIMELINE_AUX_SERVICE_NAME
operator|+
literal|".class"
argument_list|,
name|PerNodeTimelineCollectorsAuxService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniMRYarnCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRTimelineEventHandling
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"A MiniMRYarnCluster get start."
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Run 1st job which should be successful."
argument_list|)
expr_stmt|;
name|JobConf
name|successConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|successConf
operator|.
name|set
argument_list|(
literal|"dummy_conf1"
argument_list|,
name|UtilsForTests
operator|.
name|createConfigValue
argument_list|(
literal|51
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|successConf
operator|.
name|set
argument_list|(
literal|"dummy_conf2"
argument_list|,
name|UtilsForTests
operator|.
name|createConfigValue
argument_list|(
literal|51
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|successConf
operator|.
name|set
argument_list|(
literal|"huge_dummy_conf1"
argument_list|,
name|UtilsForTests
operator|.
name|createConfigValue
argument_list|(
literal|101
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|successConf
operator|.
name|set
argument_list|(
literal|"huge_dummy_conf2"
argument_list|,
name|UtilsForTests
operator|.
name|createConfigValue
argument_list|(
literal|101
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|successConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|YarnClient
name|yarnClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|firstAppId
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|apps
init|=
name|yarnClient
operator|.
name|getApplications
argument_list|(
name|appStates
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|apps
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|firstAppId
operator|=
name|appReport
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|UtilsForTests
operator|.
name|waitForAppFinished
argument_list|(
name|job
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|checkNewTimelineEvent
argument_list|(
name|firstAppId
argument_list|,
name|appReport
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Run 2nd job which should be failed."
argument_list|)
expr_stmt|;
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|yarnClient
operator|.
name|getApplications
argument_list|(
name|appStates
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|apps
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|appReport
operator|=
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|firstAppId
argument_list|)
condition|?
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|apps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkNewTimelineEvent
argument_list|(
name|firstAppId
argument_list|,
name|appReport
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Cleanup test file
name|File
name|testDirFolder
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|testDirFolder
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testDirFolder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkNewTimelineEvent (ApplicationId appId, ApplicationReport appReport, String storageDir)
specifier|private
name|void
name|checkNewTimelineEvent
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationReport
name|appReport
parameter_list|,
name|String
name|storageDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpRoot
init|=
name|storageDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"entities"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|File
name|tmpRootFolder
init|=
operator|new
name|File
argument_list|(
name|tmpRoot
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tmpRootFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|tmpRoot
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
operator|+
name|File
operator|.
name|separator
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|appReport
operator|.
name|getName
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|TimelineUtils
operator|.
name|DEFAULT_FLOW_VERSION
operator|+
name|File
operator|.
name|separator
operator|+
name|appReport
operator|.
name|getStartTime
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// for this test, we expect MAPREDUCE_JOB and MAPREDUCE_TASK dirs
name|String
name|outputDirJob
init|=
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
literal|"MAPREDUCE_JOB"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|File
name|entityFolder
init|=
operator|new
name|File
argument_list|(
name|outputDirJob
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job output directory: "
operator|+
name|outputDirJob
operator|+
literal|" does not exist."
argument_list|,
name|entityFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for job event file
name|String
name|jobEventFileName
init|=
name|appId
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"application"
argument_list|,
literal|"job"
argument_list|)
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|String
name|jobEventFilePath
init|=
name|outputDirJob
operator|+
name|jobEventFileName
decl_stmt|;
name|File
name|jobEventFile
init|=
operator|new
name|File
argument_list|(
name|jobEventFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"jobEventFilePath: "
operator|+
name|jobEventFilePath
operator|+
literal|" does not exist."
argument_list|,
name|jobEventFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEntity
argument_list|(
name|jobEventFile
argument_list|,
name|EventType
operator|.
name|JOB_FINISHED
operator|.
name|name
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|cfgsToCheck
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"dummy_conf1"
argument_list|,
literal|"dummy_conf2"
argument_list|,
literal|"huge_dummy_conf1"
argument_list|,
literal|"huge_dummy_conf2"
argument_list|)
decl_stmt|;
name|verifyEntity
argument_list|(
name|jobEventFile
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|cfgsToCheck
argument_list|)
expr_stmt|;
comment|// for this test, we expect MR job metrics are published in YARN_APPLICATION
name|String
name|outputAppDir
init|=
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
literal|"YARN_APPLICATION"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|entityFolder
operator|=
operator|new
name|File
argument_list|(
name|outputAppDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job output directory: "
operator|+
name|outputAppDir
operator|+
literal|" does not exist."
argument_list|,
name|entityFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for job event file
name|String
name|appEventFileName
init|=
name|appId
operator|.
name|toString
argument_list|()
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|String
name|appEventFilePath
init|=
name|outputAppDir
operator|+
name|appEventFileName
decl_stmt|;
name|File
name|appEventFile
init|=
operator|new
name|File
argument_list|(
name|appEventFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"appEventFilePath: "
operator|+
name|appEventFilePath
operator|+
literal|" does not exist."
argument_list|,
name|appEventFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEntity
argument_list|(
name|appEventFile
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyEntity
argument_list|(
name|appEventFile
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|cfgsToCheck
argument_list|)
expr_stmt|;
comment|// check for task event file
name|String
name|outputDirTask
init|=
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
literal|"MAPREDUCE_TASK"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|File
name|taskFolder
init|=
operator|new
name|File
argument_list|(
name|outputDirTask
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task output directory: "
operator|+
name|outputDirTask
operator|+
literal|" does not exist."
argument_list|,
name|taskFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|taskEventFileName
init|=
name|appId
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"application"
argument_list|,
literal|"task"
argument_list|)
operator|+
literal|"_m_000000"
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|String
name|taskEventFilePath
init|=
name|outputDirTask
operator|+
name|taskEventFileName
decl_stmt|;
name|File
name|taskEventFile
init|=
operator|new
name|File
argument_list|(
name|taskEventFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"taskEventFileName: "
operator|+
name|taskEventFilePath
operator|+
literal|" does not exist."
argument_list|,
name|taskEventFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEntity
argument_list|(
name|taskEventFile
argument_list|,
name|EventType
operator|.
name|TASK_FINISHED
operator|.
name|name
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check for task attempt event file
name|String
name|outputDirTaskAttempt
init|=
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
literal|"MAPREDUCE_TASK_ATTEMPT"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|File
name|taskAttemptFolder
init|=
operator|new
name|File
argument_list|(
name|outputDirTaskAttempt
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"TaskAttempt output directory: "
operator|+
name|outputDirTaskAttempt
operator|+
literal|" does not exist."
argument_list|,
name|taskAttemptFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|taskAttemptEventFileName
init|=
name|appId
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"application"
argument_list|,
literal|"attempt"
argument_list|)
operator|+
literal|"_m_000000_0"
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|String
name|taskAttemptEventFilePath
init|=
name|outputDirTaskAttempt
operator|+
name|taskAttemptEventFileName
decl_stmt|;
name|File
name|taskAttemptEventFile
init|=
operator|new
name|File
argument_list|(
name|taskAttemptEventFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"taskAttemptEventFileName: "
operator|+
name|taskAttemptEventFilePath
operator|+
literal|" does not exist."
argument_list|,
name|taskAttemptEventFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEntity
argument_list|(
name|taskAttemptEventFile
argument_list|,
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
operator|.
name|name
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies entity by reading the entity file written via FS impl.    * @param entityFile File to be read.    * @param eventId Event to be checked.    * @param chkMetrics If event is not null, this flag determines if metrics    *     exist when the event is encountered. If event is null, we merely check    *     if metrics exist in the entity file.    * @param chkCfg If event is not null, this flag determines if configs    *     exist when the event is encountered. If event is null, we merely check    *     if configs exist in the entity file.    * @param cfgsToVerify a set of configs which should exist in the entity file.    * @throws IOException    */
DECL|method|verifyEntity (File entityFile, String eventId, boolean chkMetrics, boolean chkCfg, Set<String> cfgsToVerify)
specifier|private
name|void
name|verifyEntity
parameter_list|(
name|File
name|entityFile
parameter_list|,
name|String
name|eventId
parameter_list|,
name|boolean
name|chkMetrics
parameter_list|,
name|boolean
name|chkCfg
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|cfgsToVerify
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|String
name|strLine
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|entityFile
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|strLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|strLine
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
name|entity
init|=
name|FileSystemTimelineReaderImpl
operator|.
name|getTimelineRecordFromJSON
argument_list|(
name|strLine
operator|.
name|trim
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventId
operator|==
literal|null
condition|)
block|{
comment|// Job metrics are published without any events for
comment|// ApplicationEntity. There is also possibility that some other
comment|// ApplicationEntity is published without events, hence loop till
comment|// its found. Same applies to configs.
if|if
condition|(
name|chkMetrics
operator|&&
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|chkCfg
operator|&&
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cfgsToVerify
operator|==
literal|null
condition|)
block|{
return|return;
block|}
else|else
block|{
comment|// Have configs to verify. Keep on removing configs from the set
comment|// of configs to verify as they are found. When the all the
comment|// entities have been looped through, we will check if the set
comment|// is empty or not(indicating if all configs have been found or
comment|// not).
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|cfgsToVerify
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|config
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// All the required configs have been verified, so return.
if|if
condition|(
name|cfgsToVerify
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventId
argument_list|)
condition|)
block|{
if|if
condition|(
name|chkMetrics
condition|)
block|{
name|assertTrue
argument_list|(
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chkCfg
condition|)
block|{
name|assertTrue
argument_list|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfgsToVerify
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|cfg
range|:
name|cfgsToVerify
control|)
block|{
name|assertTrue
argument_list|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|cfgsToVerify
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|cfgsToVerify
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Expected event : "
operator|+
name|eventId
operator|+
literal|" not found in the file "
operator|+
name|entityFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMapreduceJobTimelineServiceEnabled ()
specifier|public
name|void
name|testMapreduceJobTimelineServiceEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniMRYarnCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRTimelineEventHandling
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineStore
name|ts
init|=
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
decl_stmt|;
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|tEntity
init|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|job
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestJobHistoryEventHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineStore
name|ts
init|=
name|cluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
decl_stmt|;
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|tEntity
init|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|job
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

