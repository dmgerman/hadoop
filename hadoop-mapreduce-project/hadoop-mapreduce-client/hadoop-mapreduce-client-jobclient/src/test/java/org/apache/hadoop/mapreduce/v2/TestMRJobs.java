begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|FailingMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|RandomTextWriterJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|RandomTextWriterJob
operator|.
name|RandomInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMRJobs
specifier|public
class|class
name|TestMRJobs
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMRJobs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mrCluster
specifier|protected
specifier|static
name|MiniMRYarnCluster
name|mrCluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem getting local fs"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestMRJobs
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFs
argument_list|)
decl_stmt|;
DECL|field|APP_JAR
specifier|static
name|Path
name|APP_JAR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"MRAppJar.jar"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mrCluster
operator|==
literal|null
condition|)
block|{
name|mrCluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRJobs
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|mrCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Copy MRAppJar and make it private. TODO: FIXME. This is a hack to
comment|// workaround the absent public discache.
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
argument_list|,
name|APP_JAR
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|APP_JAR
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSleepJob ()
specifier|public
name|void
name|testSleepJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testSleepJob()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set master address to local to test that local mode applied iff framework == local
name|sleepConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
name|int
name|numReduces
init|=
name|sleepConf
operator|.
name|getInt
argument_list|(
literal|"TestMRJobs.testSleepJob.reduces"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// or sleepConf.getConfig().getInt(MRJobConfig.NUM_REDUCES, 2);
comment|// job with 3 maps (10s) and numReduces reduces (5s), 1 "record" each:
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
name|numReduces
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|5000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|verifySleepJobCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|verifyTaskProgress
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort (extend
comment|// JobStatus?)--compare against MRJobConfig.JOB_UBERTASK_ENABLE value
block|}
DECL|method|verifySleepJobCounters (Job job)
specifier|protected
name|void
name|verifySleepJobCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|!=
literal|null
operator|&&
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|!=
literal|null
operator|&&
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTaskProgress (Job job)
specifier|protected
name|void
name|verifyTaskProgress
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
for|for
control|(
name|TaskReport
name|taskReport
range|:
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|0.9999f
operator|<
name|taskReport
operator|.
name|getProgress
argument_list|()
operator|&&
literal|1.0001f
operator|>
name|taskReport
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskReport
name|taskReport
range|:
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|0.9999f
operator|<
name|taskReport
operator|.
name|getProgress
argument_list|()
operator|&&
literal|1.0001f
operator|>
name|taskReport
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomWriter ()
specifier|public
name|void
name|testRandomWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testRandomWriter()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|RandomTextWriterJob
name|randomWriterJob
init|=
operator|new
name|RandomTextWriterJob
argument_list|()
decl_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|RandomTextWriterJob
operator|.
name|TOTAL_BYTES
argument_list|,
literal|"3072"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|RandomTextWriterJob
operator|.
name|BYTES_PER_MAP
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|randomWriterJob
operator|.
name|createJob
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|mrCluster
operator|.
name|getTestWorkDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"random-output"
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setJarByClass
argument_list|(
name|RandomTextWriterJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure there are three files in the output-dir
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iterator
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|listStatus
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of part files is wrong!"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verifyRandomWriterCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
DECL|method|verifyRandomWriterCounters (Job job)
specifier|protected
name|void
name|verifyRandomWriterCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|!=
literal|null
operator|&&
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailingMapper ()
specifier|public
name|void
name|testFailingMapper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testFailingMapper()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Job
name|job
init|=
name|runFailingMapperJob
argument_list|()
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|aId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Diagnostics for "
operator|+
name|aId
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diag
range|:
name|job
operator|.
name|getTaskDiagnostics
argument_list|(
name|aId
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
name|aId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Diagnostics for "
operator|+
name|aId
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diag
range|:
name|job
operator|.
name|getTaskDiagnostics
argument_list|(
name|aId
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
name|TaskCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|FAILED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|TIPFAILED
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyFailingMapperCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
DECL|method|verifyFailingMapperCounters (Job job)
specifier|protected
name|void
name|verifyFailingMapperCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|!=
literal|null
operator|&&
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runFailingMapperJob ()
specifier|protected
name|Job
name|runFailingMapperJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|myConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|myConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//reduce the number of attempts
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|FailingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"failmapper"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|FailingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|mrCluster
operator|.
name|getTestWorkDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"failmapper-output"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|//@Test
DECL|method|testSleepJobWithSecurityOn ()
specifier|public
name|void
name|testSleepJobWithSecurityOn
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testSleepJobWithSecurityOn()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_KEYTAB
argument_list|,
literal|"/etc/krb5.keytab"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_KEYTAB
argument_list|,
literal|"/etc/krb5.keytab"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"rm/sightbusy-lx@LOCALHOST"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PRINCIPAL
argument_list|,
literal|"nm/sightbusy-lx@LOCALHOST"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// Keep it in here instead of after RM/NM as multiple user logins happen in
comment|// the same JVM.
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"User name is "
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|str
range|:
name|user
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Token is "
operator|+
name|str
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// //Job with reduces
comment|// Job job = sleepJob.createJob(3, 2, 10000, 1, 10000, 1);
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
DECL|class|DistributedCacheChecker
specifier|public
specifier|static
class|class
name|DistributedCacheChecker
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
index|[]
name|files
init|=
name|context
operator|.
name|getLocalCacheFiles
argument_list|()
decl_stmt|;
name|Path
index|[]
name|archives
init|=
name|context
operator|.
name|getLocalCacheArchives
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|LocalFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Check that 4 (2 + appjar + DistrubutedCacheChecker jar) files
comment|// and 2 archives are present
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|archives
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check lengths of the files
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|files
index|[
literal|1
index|]
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|files
index|[
literal|2
index|]
argument_list|)
operator|.
name|getLen
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Check extraction of the archive
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|archives
index|[
literal|0
index|]
argument_list|,
literal|"distributed.jar.inside3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|archives
index|[
literal|1
index|]
argument_list|,
literal|"distributed.jar.inside4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the class loaders
name|LOG
operator|.
name|info
argument_list|(
literal|"Java Classpath: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
comment|// Both the file and the archive should have been added to classpath, so
comment|// both should be reachable via the class loader.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The Job Jar should have been extracted to a folder named "job.jar" and
comment|// added to the classpath; the two jar files in the lib folder in the Job
comment|// Jar should have also been added to the classpath
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/lib/lib1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/lib/lib2.jar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the symlink for the renaming was created in the cwd;
name|File
name|symlinkFile
init|=
operator|new
name|File
argument_list|(
literal|"distributed.first.symlink"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|symlinkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|symlinkFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the symlink for the Job Jar was created in the cwd and
comment|// points to the extracted directory
name|File
name|jobJarDir
init|=
operator|new
name|File
argument_list|(
literal|"job.jar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isSymlink
argument_list|(
name|jobJarDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobJarDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDistributedCache ()
specifier|public
name|void
name|testDistributedCache
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create a temporary file of length 1.
name|Path
name|first
init|=
name|createTempFile
argument_list|(
literal|"distributed.first"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// Create two jars with a single file inside them.
name|Path
name|second
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.second.jar"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|third
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.third.jar"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|fourth
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.fourth.jar"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set the job jar to a new "dummy" jar so we can check that its extracted
comment|// properly
name|job
operator|.
name|setJar
argument_list|(
name|makeJobJarWithLib
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Because the job jar is a "dummy" jar, we need to include the jar with
comment|// DistributedCacheChecker or it won't be able to find it
name|job
operator|.
name|addFileToClassPath
argument_list|(
operator|new
name|Path
argument_list|(
name|JarFinder
operator|.
name|getJar
argument_list|(
name|DistributedCacheChecker
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|DistributedCacheChecker
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|first
argument_list|)
expr_stmt|;
comment|// Creates the Job Configuration
name|job
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|first
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#distributed.first.symlink"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|addArchiveToClassPath
argument_list|(
name|third
argument_list|)
expr_stmt|;
name|job
operator|.
name|addCacheArchive
argument_list|(
name|fourth
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile (String filename, String contents)
specifier|private
name|Path
name|createTempFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|localFs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|makeJar (Path p, int index)
specifier|private
name|Path
name|makeJar
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"distributed.jar.inside"
operator|+
name|index
argument_list|)
decl_stmt|;
name|jos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jos
operator|.
name|write
argument_list|(
operator|(
literal|"inside the jar!"
operator|+
name|index
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|jos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jos
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|makeJobJarWithLib (String testDir)
specifier|private
name|String
name|makeJobJarWithLib
parameter_list|(
name|String
name|testDir
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|jobJarPath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"thejob.jar"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|jobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
comment|// Have to put in real jar files or it will complain
name|createAndAddJarToJar
argument_list|(
name|jos
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"lib1.jar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createAndAddJarToJar
argument_list|(
name|jos
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"lib2.jar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jos
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|jobJarPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createAndAddJarToJar (JarOutputStream jos, File jarFile)
specifier|private
name|void
name|createAndAddJarToJar
parameter_list|(
name|JarOutputStream
name|jos
parameter_list|,
name|File
name|jarFile
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|fos2
init|=
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos2
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos2
argument_list|)
decl_stmt|;
comment|// Have to have at least one entry or it will complain
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib1.inside"
argument_list|)
decl_stmt|;
name|jos2
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jos2
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jos2
operator|.
name|close
argument_list|()
expr_stmt|;
name|ze
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib/"
operator|+
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|jarFile
argument_list|)
decl_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|numRead
decl_stmt|;
do|do
block|{
name|numRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRead
operator|>=
literal|0
condition|)
block|{
name|jos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|numRead
operator|!=
operator|-
literal|1
condition|)
do|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|jos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jarFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

