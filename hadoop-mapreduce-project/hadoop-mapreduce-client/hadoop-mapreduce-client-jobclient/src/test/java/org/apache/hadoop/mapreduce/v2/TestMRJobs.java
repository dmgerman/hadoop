begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|FailingMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|RandomTextWriterJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|RandomTextWriterJob
operator|.
name|RandomInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
operator|.
name|SleepMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRAppMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|DefaultSpeculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|Speculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ClassUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestMRJobs
specifier|public
class|class
name|TestMRJobs
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMRJobs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TERMINAL_RM_APP_STATES
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|RMAppState
argument_list|>
name|TERMINAL_RM_APP_STATES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
DECL|field|NUM_NODE_MGRS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODE_MGRS
init|=
literal|3
decl_stmt|;
DECL|field|TEST_IO_SORT_MB
specifier|private
specifier|static
specifier|final
name|String
name|TEST_IO_SORT_MB
init|=
literal|"11"
decl_stmt|;
DECL|field|DEFAULT_REDUCES
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_REDUCES
init|=
literal|2
decl_stmt|;
DECL|field|numSleepReducers
specifier|protected
name|int
name|numSleepReducers
init|=
name|DEFAULT_REDUCES
decl_stmt|;
DECL|field|mrCluster
specifier|protected
specifier|static
name|MiniMRYarnCluster
name|mrCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|remoteFs
specifier|private
specifier|static
name|FileSystem
name|remoteFs
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem getting local fs"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|Path
name|TEST_ROOT_DIR
init|=
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestMRJobs
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|APP_JAR
specifier|static
name|Path
name|APP_JAR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"MRAppJar.jar"
argument_list|)
decl_stmt|;
DECL|field|OUTPUT_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_ROOT_DIR
init|=
literal|"/tmp/"
operator|+
name|TestMRJobs
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|TEST_RESOURCES_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_RESOURCES_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"localizedResources"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|racks
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|remoteFs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem starting mini dfs cluster"
argument_list|,
name|io
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mrCluster
operator|==
literal|null
condition|)
block|{
name|mrCluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|TestMRJobs
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|NUM_NODE_MGRS
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|remoteFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// use HDFS
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
literal|"/apps_staging_dir"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Copy MRAppJar and make it private. TODO: FIXME. This is a hack to
comment|// workaround the absent public discache.
name|localFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
argument_list|,
name|APP_JAR
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|APP_JAR
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|localFs
operator|.
name|exists
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|)
condition|)
block|{
comment|// clean up resource directory
name|localFs
operator|.
name|delete
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|resetInit ()
specifier|public
name|void
name|resetInit
parameter_list|()
block|{
name|numSleepReducers
operator|=
name|DEFAULT_REDUCES
expr_stmt|;
block|}
DECL|method|setupJobResourceDirs ()
specifier|private
specifier|static
name|void
name|setupJobResourceDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localFs
operator|.
name|exists
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|)
condition|)
block|{
comment|// clean up directory
name|localFs
operator|.
name|delete
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|localFs
operator|.
name|mkdirs
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outF1
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// 10KB file
name|outF1
operator|=
name|localFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|,
literal|"file1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|outF1
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|outF1
operator|!=
literal|null
condition|)
block|{
name|outF1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|localFs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|,
literal|"file2.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|subDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_RESOURCES_DIR
argument_list|,
literal|"subDir"
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outF3
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// 1MB (plus 10 Bytes) file
name|outF3
operator|=
name|localFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir
argument_list|,
literal|"file3.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|outF3
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
operator|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
operator|)
operator|+
literal|10
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|outF3
operator|!=
literal|null
condition|)
block|{
name|outF3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|localFs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir
argument_list|,
literal|"file4.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJob ()
specifier|public
name|void
name|testSleepJob
parameter_list|()
throws|throws
name|Exception
block|{
name|testSleepJobInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithRemoteJar ()
specifier|public
name|void
name|testSleepJobWithRemoteJar
parameter_list|()
throws|throws
name|Exception
block|{
name|testSleepJobInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalResourceUnderLimit ()
specifier|public
name|void
name|testSleepJobWithLocalResourceUnderLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well above what is expected
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES_MB
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalResourceSizeOverLimit ()
specifier|public
name|void
name|testSleepJobWithLocalResourceSizeOverLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well below what is expected
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ResourceViolation
operator|.
name|TOTAL_RESOURCE_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalResourceNumberOverLimit ()
specifier|public
name|void
name|testSleepJobWithLocalResourceNumberOverLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well below what is expected
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ResourceViolation
operator|.
name|NUMBER_OF_RESOURCES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalResourceCheckAndRemoteJar ()
specifier|public
name|void
name|testSleepJobWithLocalResourceCheckAndRemoteJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well above what is expected
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAX_RESOURCES_MB
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalIndividualResourceOverLimit ()
specifier|public
name|void
name|testSleepJobWithLocalIndividualResourceOverLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well below what is expected
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_SINGLE_RESOURCE_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ResourceViolation
operator|.
name|SINGLE_RESOURCE_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSleepJobWithLocalIndividualResourceUnderLimit ()
specifier|public
name|void
name|testSleepJobWithLocalIndividualResourceUnderLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set limits to well below what is expected
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_SINGLE_RESOURCE_MB
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|setupJobResourceDirs
argument_list|()
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|TEST_RESOURCES_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testSleepJobInternal
argument_list|(
name|sleepConf
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testSleepJobInternal (boolean useRemoteJar)
specifier|private
name|void
name|testSleepJobInternal
parameter_list|(
name|boolean
name|useRemoteJar
parameter_list|)
throws|throws
name|Exception
block|{
name|testSleepJobInternal
argument_list|(
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|,
name|useRemoteJar
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|enum|ResourceViolation
specifier|private
enum|enum
name|ResourceViolation
block|{
DECL|enumConstant|NUMBER_OF_RESOURCES
DECL|enumConstant|TOTAL_RESOURCE_SIZE
DECL|enumConstant|SINGLE_RESOURCE_SIZE
name|NUMBER_OF_RESOURCES
block|,
name|TOTAL_RESOURCE_SIZE
block|,
name|SINGLE_RESOURCE_SIZE
block|;   }
DECL|method|testSleepJobInternal (Configuration sleepConf, boolean useRemoteJar, boolean jobSubmissionShouldSucceed, ResourceViolation violation)
specifier|private
name|void
name|testSleepJobInternal
parameter_list|(
name|Configuration
name|sleepConf
parameter_list|,
name|boolean
name|useRemoteJar
parameter_list|,
name|boolean
name|jobSubmissionShouldSucceed
parameter_list|,
name|ResourceViolation
name|violation
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testSleepJob: useRemoteJar="
operator|+
name|useRemoteJar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jobSubmissionShouldSucceed
operator|&&
name|violation
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test is misconfigured. jobSubmissionShouldSucceed is set"
operator|+
literal|" to false and a ResourceViolation is not specified."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set master address to local to test that local mode applied iff framework == local
name|sleepConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
comment|// job with 3 maps (10s) and numReduces reduces (5s), 1 "record" each:
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
name|numSleepReducers
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|5000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
if|if
condition|(
name|useRemoteJar
condition|)
block|{
specifier|final
name|Path
name|localJar
init|=
operator|new
name|Path
argument_list|(
name|ClassUtil
operator|.
name|findContainingJar
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"/jobjars"
argument_list|,
name|localFs
operator|.
name|makeQualified
argument_list|(
name|localJar
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJar
argument_list|(
literal|"viewfs:///jobjars/"
operator|+
name|localJar
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
try|try
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"JobSubmission succeeded when it should have failed."
argument_list|,
name|jobSubmissionShouldSucceed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|jobSubmissionShouldSucceed
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Job submission failed when it should have succeeded: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|violation
condition|)
block|{
case|case
name|NUMBER_OF_RESOURCES
case|:
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This job has exceeded the maximum number of"
operator|+
literal|" submitted resources"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed unexpectedly: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TOTAL_RESOURCE_SIZE
case|:
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This job has exceeded the maximum size of submitted resources"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed unexpectedly: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SINGLE_RESOURCE_SIZE
case|:
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This job has exceeded the maximum size of a single submitted"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed unexpectedly: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed unexpectedly: "
operator|+
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// we are done with the test (job submission failed)
return|return;
block|}
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|verifySleepJobCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|verifyTaskProgress
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort (extend
comment|// JobStatus?)--compare against MRJobConfig.JOB_UBERTASK_ENABLE value
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testJobWithChangePriority ()
specifier|public
name|void
name|testJobWithChangePriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assumption can be removed when FS priority support is implemented
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|sleepConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|)
operator|.
name|equals
argument_list|(
name|FairScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set master address to local to test that local mode applied if framework
comment|// equals local
name|sleepConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|,
literal|20
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Set the priority to HIGH
name|job
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|waitForPriorityToUpdate
argument_list|(
name|job
argument_list|,
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
comment|// Verify the priority from job itself
name|assertThat
argument_list|(
name|job
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
comment|// Change priority to NORMAL (3) with new api
name|job
operator|.
name|setPriorityAsInteger
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify the priority from job itself
name|waitForPriorityToUpdate
argument_list|(
name|job
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|job
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// Change priority to a high integer value with new api
name|job
operator|.
name|setPriorityAsInteger
argument_list|(
literal|89
argument_list|)
expr_stmt|;
comment|// Verify the priority from job itself
name|waitForPriorityToUpdate
argument_list|(
name|job
argument_list|,
name|JobPriority
operator|.
name|UNDEFINED_PRIORITY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|job
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|JobPriority
operator|.
name|UNDEFINED_PRIORITY
argument_list|)
expr_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForPriorityToUpdate (Job job, JobPriority expectedStatus)
specifier|private
name|void
name|waitForPriorityToUpdate
parameter_list|(
name|Job
name|job
parameter_list|,
name|JobPriority
name|expectedStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Max wait time to get the priority update can be kept as 20sec (100 *
comment|// 100ms)
name|int
name|waitCnt
init|=
literal|200
decl_stmt|;
while|while
condition|(
name|waitCnt
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|job
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedStatus
argument_list|)
condition|)
block|{
comment|// Stop waiting as priority is updated.
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testJobClassloader ()
specifier|public
name|void
name|testJobClassloader
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testJobClassloader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testJobClassloaderWithCustomClasses ()
specifier|public
name|void
name|testJobClassloaderWithCustomClasses
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testJobClassloader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobClassloader (boolean useCustomClasses)
specifier|private
name|void
name|testJobClassloader
parameter_list|(
name|boolean
name|useCustomClasses
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testJobClassloader()"
operator|+
literal|" useCustomClasses="
operator|+
name|useCustomClasses
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Configuration
name|sleepConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// set master address to local to test that local mode applied iff framework == local
name|sleepConf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|MASTER_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCustomClasses
condition|)
block|{
comment|// to test AM loading user classes such as output format class, we want
comment|// to blacklist them from the system classes (they need to be prepended
comment|// as the first match wins)
name|String
name|systemClasses
init|=
name|ApplicationClassLoader
operator|.
name|SYSTEM_CLASSES_DEFAULT
decl_stmt|;
comment|// exclude the custom classes from system classes
name|systemClasses
operator|=
literal|"-"
operator|+
name|CustomOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",-"
operator|+
name|CustomSpeculator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|systemClasses
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER_SYSTEM_CLASSES
argument_list|,
name|systemClasses
argument_list|)
expr_stmt|;
block|}
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
name|TEST_IO_SORT_MB
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_LEVEL
argument_list|,
name|Level
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_LOG_LEVEL
argument_list|,
name|Level
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_LOG_LEVEL
argument_list|,
name|Level
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
literal|"-verbose:class"
argument_list|)
expr_stmt|;
specifier|final
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
specifier|final
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|ConfVerificationMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
if|if
condition|(
name|useCustomClasses
condition|)
block|{
comment|// set custom output format class and speculator class
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|CustomOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|jobConf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|CustomSpeculator
operator|.
name|class
argument_list|,
name|Speculator
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// speculation needs to be enabled for the speculator to be loaded
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job status: "
operator|+
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getFailureInfo
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
block|}
DECL|class|CustomOutputFormat
specifier|public
specifier|static
class|class
name|CustomOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|NullOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|CustomOutputFormat ()
specifier|public
name|CustomOutputFormat
parameter_list|()
block|{
name|verifyClassLoader
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that the class was loaded by the job classloader if it is in the      * context of the MRAppMaster, and if not throws an exception to fail the      * job.      */
DECL|method|verifyClassLoader (Class<?> cls)
specifier|private
name|void
name|verifyClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// to detect that it is instantiated in the context of the MRAppMaster, we
comment|// inspect the stack trace and determine a caller is MRAppMaster
for|for
control|(
name|StackTraceElement
name|e
range|:
operator|new
name|Throwable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|MRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|cls
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|ApplicationClassLoader
operator|)
condition|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"incorrect classloader used"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|CustomSpeculator
specifier|public
specifier|static
class|class
name|CustomSpeculator
extends|extends
name|DefaultSpeculator
block|{
DECL|method|CustomSpeculator (Configuration conf, AppContext context)
specifier|public
name|CustomSpeculator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|verifyClassLoader
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that the class was loaded by the job classloader if it is in the      * context of the MRAppMaster, and if not throws an exception to fail the      * job.      */
DECL|method|verifyClassLoader (Class<?> cls)
specifier|private
name|void
name|verifyClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// to detect that it is instantiated in the context of the MRAppMaster, we
comment|// inspect the stack trace and determine a caller is MRAppMaster
for|for
control|(
name|StackTraceElement
name|e
range|:
operator|new
name|Throwable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|MRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|cls
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|ApplicationClassLoader
operator|)
condition|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"incorrect classloader used"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|verifySleepJobCounters (Job job)
specifier|protected
name|void
name|verifySleepJobCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numSleepReducers
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTaskProgress (Job job)
specifier|protected
name|void
name|verifyTaskProgress
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
for|for
control|(
name|TaskReport
name|taskReport
range|:
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|0.9999f
operator|<
name|taskReport
operator|.
name|getProgress
argument_list|()
operator|&&
literal|1.0001f
operator|>
name|taskReport
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskReport
name|taskReport
range|:
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|0.9999f
operator|<
name|taskReport
operator|.
name|getProgress
argument_list|()
operator|&&
literal|1.0001f
operator|>
name|taskReport
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRandomWriter ()
specifier|public
name|void
name|testRandomWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testRandomWriter()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|RandomTextWriterJob
name|randomWriterJob
init|=
operator|new
name|RandomTextWriterJob
argument_list|()
decl_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|RandomTextWriterJob
operator|.
name|TOTAL_BYTES
argument_list|,
literal|"3072"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|RandomTextWriterJob
operator|.
name|BYTES_PER_MAP
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|randomWriterJob
operator|.
name|createJob
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|OUTPUT_ROOT_DIR
argument_list|,
literal|"random-output"
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|setJarByClass
argument_list|(
name|RandomTextWriterJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure there are three files in the output-dir
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iterator
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|listStatus
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of part files is wrong!"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verifyRandomWriterCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
DECL|method|verifyRandomWriterCounters (Job job)
specifier|protected
name|void
name|verifyRandomWriterCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFailingMapper ()
specifier|public
name|void
name|testFailingMapper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testFailingMapper()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Job
name|job
init|=
name|runFailingMapperJob
argument_list|()
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|aId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Diagnostics for "
operator|+
name|aId
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diag
range|:
name|job
operator|.
name|getTaskDiagnostics
argument_list|(
name|aId
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
name|aId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Diagnostics for "
operator|+
name|aId
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|diag
range|:
name|job
operator|.
name|getTaskDiagnostics
argument_list|(
name|aId
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
name|TaskCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|FAILED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|TIPFAILED
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyFailingMapperCounters
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
DECL|method|verifyFailingMapperCounters (Job job)
specifier|protected
name|void
name|verifyFailingMapperCounters
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|!=
literal|null
operator|&&
name|counters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runFailingMapperJob ()
specifier|protected
name|Job
name|runFailingMapperJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|myConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|myConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//reduce the number of attempts
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|FailingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"failmapper"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|FailingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|OUTPUT_ROOT_DIR
argument_list|,
literal|"failmapper-output"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|//@Test (timeout = 60000)
DECL|method|testSleepJobWithSecurityOn ()
specifier|public
name|void
name|testSleepJobWithSecurityOn
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\nStarting testSleepJobWithSecurityOn()."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_KEYTAB
argument_list|,
literal|"/etc/krb5.keytab"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_KEYTAB
argument_list|,
literal|"/etc/krb5.keytab"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"rm/sightbusy-lx@LOCALHOST"
argument_list|)
expr_stmt|;
name|mrCluster
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PRINCIPAL
argument_list|,
literal|"nm/sightbusy-lx@LOCALHOST"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// Keep it in here instead of after RM/NM as multiple user logins happen in
comment|// the same JVM.
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"User name is "
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|str
range|:
name|user
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Token is "
operator|+
name|str
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// //Job with reduces
comment|// Job job = sleepJob.createJob(3, 2, 10000, 1, 10000, 1);
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// TODO later:  add explicit "isUber()" checks of some sort
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testContainerRollingLog ()
specifier|public
name|void
name|testContainerRollingLog
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
specifier|final
name|JobConf
name|sleepConf
init|=
operator|new
name|JobConf
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_LOG_LEVEL
argument_list|,
name|Level
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|userLogKb
init|=
literal|4
decl_stmt|;
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_USERLOG_LIMIT
argument_list|,
name|userLogKb
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|TASK_LOG_BACKUPS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_LEVEL
argument_list|,
name|Level
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|amLogKb
init|=
literal|7
decl_stmt|;
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_KB
argument_list|,
name|amLogKb
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_BACKUPS
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
specifier|final
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1L
argument_list|,
literal|100
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appID
init|=
name|jobId
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|int
name|pollElapsed
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|pollElapsed
operator|+=
literal|1000
expr_stmt|;
if|if
condition|(
name|TERMINAL_RM_APP_STATES
operator|.
name|contains
argument_list|(
name|mrCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|pollElapsed
operator|>=
literal|60000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"application did not reach terminal state within 60 seconds"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|mrCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Job finished, verify logs
comment|//
specifier|final
name|String
name|appIdStr
init|=
name|appID
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|appIdSuffix
init|=
name|appIdStr
operator|.
name|substring
argument_list|(
literal|"application_"
operator|.
name|length
argument_list|()
argument_list|,
name|appIdStr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|containerGlob
init|=
literal|"container_"
operator|+
name|appIdSuffix
operator|+
literal|"_*_*"
decl_stmt|;
specifier|final
name|String
name|syslogGlob
init|=
name|appIdStr
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|containerGlob
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
decl_stmt|;
name|int
name|numAppMasters
init|=
literal|0
decl_stmt|;
name|int
name|numMapTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODE_MGRS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Configuration
name|nmConf
init|=
name|mrCluster
operator|.
name|getNodeManager
argument_list|(
name|i
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|nmConf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|)
control|)
block|{
specifier|final
name|Path
name|absSyslogGlob
init|=
operator|new
name|Path
argument_list|(
name|logDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|syslogGlob
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for glob: "
operator|+
name|absSyslogGlob
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
index|[]
name|syslogs
init|=
name|localFs
operator|.
name|globStatus
argument_list|(
name|absSyslogGlob
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|slog
range|:
name|syslogs
control|)
block|{
name|boolean
name|foundAppMaster
init|=
name|job
operator|.
name|isUber
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|containerPathComponent
init|=
name|slog
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|foundAppMaster
condition|)
block|{
specifier|final
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerPathComponent
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|foundAppMaster
operator|=
operator|(
operator|(
name|cid
operator|.
name|getContainerId
argument_list|()
operator|&
name|ContainerId
operator|.
name|CONTAINER_ID_BITMASK
operator|)
operator|==
literal|1
operator|)
expr_stmt|;
block|}
specifier|final
name|FileStatus
index|[]
name|sysSiblings
init|=
name|localFs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|containerPathComponent
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
operator|+
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
comment|// sort to ensure for i> 0 sysSiblings[i] == "syslog.i"
name|Arrays
operator|.
name|sort
argument_list|(
name|sysSiblings
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundAppMaster
condition|)
block|{
name|numAppMasters
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numMapTasks
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|foundAppMaster
condition|)
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"Unexpected number of AM sylog* files"
argument_list|,
name|sleepConf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_BACKUPS
argument_list|,
literal|0
argument_list|)
operator|+
literal|1
argument_list|,
name|sysSiblings
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AM syslog.1 length kb should be>= "
operator|+
name|amLogKb
argument_list|,
name|sysSiblings
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
operator|>=
name|amLogKb
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"Unexpected number of MR task sylog* files"
argument_list|,
name|sleepConf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|TASK_LOG_BACKUPS
argument_list|,
literal|0
argument_list|)
operator|+
literal|1
argument_list|,
name|sysSiblings
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"MR syslog.1 length kb should be>= "
operator|+
name|userLogKb
argument_list|,
name|sysSiblings
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
operator|>=
name|userLogKb
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Make sure we checked non-empty set
comment|//
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No AppMaster log found!"
argument_list|,
literal|1
argument_list|,
name|numAppMasters
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepConf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MapTask log with uber found!"
argument_list|,
literal|0
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No MapTask log found!"
argument_list|,
literal|1
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DistributedCacheChecker
specifier|public
specifier|static
class|class
name|DistributedCacheChecker
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
index|[]
name|localFiles
init|=
name|context
operator|.
name|getLocalCacheFiles
argument_list|()
decl_stmt|;
name|URI
index|[]
name|files
init|=
name|context
operator|.
name|getCacheFiles
argument_list|()
decl_stmt|;
name|Path
index|[]
name|localArchives
init|=
name|context
operator|.
name|getLocalCacheArchives
argument_list|()
decl_stmt|;
name|URI
index|[]
name|archives
init|=
name|context
operator|.
name|getCacheArchives
argument_list|()
decl_stmt|;
comment|// Check that 4 (2 + appjar + DistrubutedCacheChecker jar) files
comment|// and 2 archives are present
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|localFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|localArchives
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|archives
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check lengths of the files
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|filesMap
init|=
name|pathsToMap
argument_list|(
name|localFiles
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filesMap
operator|.
name|containsKey
argument_list|(
literal|"distributed.first.symlink"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|filesMap
operator|.
name|get
argument_list|(
literal|"distributed.first.symlink"
argument_list|)
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filesMap
operator|.
name|containsKey
argument_list|(
literal|"distributed.second.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|filesMap
operator|.
name|get
argument_list|(
literal|"distributed.second.jar"
argument_list|)
argument_list|)
operator|.
name|getLen
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Check extraction of the archive
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|archivesMap
init|=
name|pathsToMap
argument_list|(
name|localArchives
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|archivesMap
operator|.
name|containsKey
argument_list|(
literal|"distributed.third.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|archivesMap
operator|.
name|get
argument_list|(
literal|"distributed.third.jar"
argument_list|)
argument_list|,
literal|"distributed.jar.inside3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|archivesMap
operator|.
name|containsKey
argument_list|(
literal|"distributed.fourth.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|archivesMap
operator|.
name|get
argument_list|(
literal|"distributed.fourth.jar"
argument_list|)
argument_list|,
literal|"distributed.jar.inside4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the class loaders
name|LOG
operator|.
name|info
argument_list|(
literal|"Java Classpath: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
comment|// Both the file and the archive should have been added to classpath, so
comment|// both should be reachable via the class loader.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"distributed.jar.inside4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The Job Jar should have been extracted to a folder named "job.jar" and
comment|// added to the classpath; the two jar files in the lib folder in the Job
comment|// Jar should have also been added to the classpath
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/lib/lib1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cl
operator|.
name|getResource
argument_list|(
literal|"job.jar/lib/lib2.jar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the symlink for the renaming was created in the cwd;
name|File
name|symlinkFile
init|=
operator|new
name|File
argument_list|(
literal|"distributed.first.symlink"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|symlinkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|symlinkFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the symlink for the Job Jar was created in the cwd and
comment|// points to the extracted directory
name|File
name|jobJarDir
init|=
operator|new
name|File
argument_list|(
literal|"job.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isWindowsSymlinkedDirectory
argument_list|(
name|jobJarDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isSymlink
argument_list|(
name|jobJarDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jobJarDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used on Windows to determine if the specified file is a symlink that      * targets a directory.  On most platforms, these checks can be done using      * commons-io.  On Windows, the commons-io implementation is unreliable and      * always returns false.  Instead, this method checks the output of the dir      * command.  After migrating to Java 7, this method can be removed in favor      * of the new method java.nio.file.Files.isSymbolicLink, which is expected to      * work cross-platform.      *       * @param file File to check      * @return boolean true if the file is a symlink that targets a directory      * @throws IOException thrown for any I/O error      */
DECL|method|isWindowsSymlinkedDirectory (File file)
specifier|private
specifier|static
name|boolean
name|isWindowsSymlinkedDirectory
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirOut
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
literal|"cmd"
argument_list|,
literal|"/c"
argument_list|,
literal|"dir"
argument_list|,
name|file
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|dirOut
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|sr
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|line
operator|.
name|contains
argument_list|(
literal|"<SYMLINKD>"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a mapping of the final component of each path to the corresponding      * Path instance.  This assumes that every given Path has a unique string in      * the final path component, which is true for these tests.      *       * @param paths Path[] to map      * @return Map<String, Path> mapping the final component of each path to the      *   corresponding Path instance      */
DECL|method|pathsToMap (Path[] paths)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|pathsToMap
parameter_list|(
name|Path
index|[]
name|paths
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
DECL|method|testDistributedCache (String jobJarPath, boolean withWildcard)
specifier|private
name|void
name|testDistributedCache
parameter_list|(
name|String
name|jobJarPath
parameter_list|,
name|boolean
name|withWildcard
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create a temporary file of length 1.
name|Path
name|first
init|=
name|createTempFile
argument_list|(
literal|"distributed.first"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// Create three jars with a single file inside them.
name|Path
name|second
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.second.jar"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|third
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.third.jar"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|fourth
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.fourth.jar"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set the job jar to a new "dummy" jar so we can check that its extracted
comment|// properly
name|job
operator|.
name|setJar
argument_list|(
name|jobJarPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|withWildcard
condition|)
block|{
comment|// If testing with wildcards, upload the DistributedCacheChecker into HDFS
comment|// and add the directory as a wildcard.
name|Path
name|libs
init|=
operator|new
name|Path
argument_list|(
literal|"testLibs"
argument_list|)
decl_stmt|;
name|Path
name|wildcard
init|=
name|remoteFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|libs
argument_list|,
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
name|remoteFs
operator|.
name|mkdirs
argument_list|(
name|libs
argument_list|)
expr_stmt|;
name|remoteFs
operator|.
name|copyFromLocalFile
argument_list|(
name|third
argument_list|,
name|libs
argument_list|)
expr_stmt|;
name|job
operator|.
name|addCacheFile
argument_list|(
name|wildcard
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise add the DistributedCacheChecker directly to the classpath.
comment|// Because the job jar is a "dummy" jar, we need to include the jar with
comment|// DistributedCacheChecker or it won't be able to find it
name|Path
name|distributedCacheCheckerJar
init|=
operator|new
name|Path
argument_list|(
name|JarFinder
operator|.
name|getJar
argument_list|(
name|DistributedCacheChecker
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
name|distributedCacheCheckerJar
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|DistributedCacheChecker
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|first
argument_list|)
expr_stmt|;
comment|// Creates the Job Configuration
name|job
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|first
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#distributed.first.symlink"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|second
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|APP_JAR
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addArchiveToClassPath
argument_list|(
name|third
argument_list|)
expr_stmt|;
name|job
operator|.
name|addCacheArchive
argument_list|(
name|fourth
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDistributedCache (boolean withWildcard)
specifier|private
name|void
name|testDistributedCache
parameter_list|(
name|boolean
name|withWildcard
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Test with a local (file:///) Job Jar
name|Path
name|localJobJarPath
init|=
name|makeJobJarWithLib
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|testDistributedCache
argument_list|(
name|localJobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|withWildcard
argument_list|)
expr_stmt|;
comment|// Test with a remote (hdfs://) Job Jar
name|Path
name|remoteJobJarPath
init|=
operator|new
name|Path
argument_list|(
name|remoteFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|localJobJarPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|remoteFs
operator|.
name|moveFromLocalFile
argument_list|(
name|localJobJarPath
argument_list|,
name|remoteJobJarPath
argument_list|)
expr_stmt|;
name|File
name|localJobJarFile
init|=
operator|new
name|File
argument_list|(
name|localJobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|localJobJarFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// just to make sure
name|localJobJarFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|testDistributedCache
argument_list|(
name|remoteJobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|withWildcard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDistributedCache ()
specifier|public
name|void
name|testDistributedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|testDistributedCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDistributedCacheWithWildcards ()
specifier|public
name|void
name|testDistributedCacheWithWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|testDistributedCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testThreadDumpOnTaskTimeout ()
specifier|public
name|void
name|testThreadDumpOnTaskTimeout
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
specifier|final
name|JobConf
name|sleepConf
init|=
operator|new
name|JobConf
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|sleepConf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|3
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|sleepConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|TestUberAM
condition|)
block|{
name|sleepConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// sleep for 10 seconds to trigger a kill with thread dump
specifier|final
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|10
operator|*
literal|60
operator|*
literal|1000L
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|APP_JAR
argument_list|)
expr_stmt|;
comment|// The AppMaster jar itself.
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appID
init|=
name|jobId
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|int
name|pollElapsed
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|pollElapsed
operator|+=
literal|1000
expr_stmt|;
if|if
condition|(
name|TERMINAL_RM_APP_STATES
operator|.
name|contains
argument_list|(
name|mrCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|pollElapsed
operator|>=
literal|60000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"application did not reach terminal state within 60 seconds"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Job finished, verify logs
comment|//
specifier|final
name|String
name|appIdStr
init|=
name|appID
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|appIdSuffix
init|=
name|appIdStr
operator|.
name|substring
argument_list|(
literal|"application_"
operator|.
name|length
argument_list|()
argument_list|,
name|appIdStr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|containerGlob
init|=
literal|"container_"
operator|+
name|appIdSuffix
operator|+
literal|"_*_*"
decl_stmt|;
specifier|final
name|String
name|syslogGlob
init|=
name|appIdStr
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|containerGlob
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
decl_stmt|;
name|int
name|numAppMasters
init|=
literal|0
decl_stmt|;
name|int
name|numMapTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODE_MGRS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Configuration
name|nmConf
init|=
name|mrCluster
operator|.
name|getNodeManager
argument_list|(
name|i
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|nmConf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|)
control|)
block|{
specifier|final
name|Path
name|absSyslogGlob
init|=
operator|new
name|Path
argument_list|(
name|logDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|syslogGlob
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for glob: "
operator|+
name|absSyslogGlob
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|syslog
range|:
name|localFs
operator|.
name|globStatus
argument_list|(
name|absSyslogGlob
argument_list|)
control|)
block|{
name|boolean
name|foundAppMaster
init|=
literal|false
decl_stmt|;
name|boolean
name|foundThreadDump
init|=
literal|false
decl_stmt|;
comment|// Determine the container type
specifier|final
name|BufferedReader
name|syslogReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|localFs
operator|.
name|open
argument_list|(
name|syslog
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|syslogReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|MRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundAppMaster
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|syslogReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Check for thread dump in stdout
specifier|final
name|Path
name|stdoutPath
init|=
operator|new
name|Path
argument_list|(
name|syslog
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|stdoutReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|localFs
operator|.
name|open
argument_list|(
name|stdoutPath
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|stdoutReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"Full thread dump"
argument_list|)
condition|)
block|{
name|foundThreadDump
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|stdoutReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|foundAppMaster
condition|)
block|{
name|numAppMasters
operator|++
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|TestUberAM
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No thread dump"
argument_list|,
name|foundThreadDump
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unexpected thread dump"
argument_list|,
name|foundThreadDump
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|numMapTasks
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No thread dump"
argument_list|,
name|foundThreadDump
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Make sure we checked non-empty set
comment|//
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No AppMaster log found!"
argument_list|,
literal|1
argument_list|,
name|numAppMasters
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepConf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"MapTask log with uber found!"
argument_list|,
literal|0
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"No MapTask log found!"
argument_list|,
literal|1
argument_list|,
name|numMapTasks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTempFile (String filename, String contents)
specifier|private
name|Path
name|createTempFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|localFs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|makeJar (Path p, int index)
specifier|private
name|Path
name|makeJar
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"distributed.jar.inside"
operator|+
name|index
argument_list|)
decl_stmt|;
name|jos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jos
operator|.
name|write
argument_list|(
operator|(
literal|"inside the jar!"
operator|+
name|index
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|jos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jos
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|makeJobJarWithLib (String testDir)
specifier|private
name|Path
name|makeJobJarWithLib
parameter_list|(
name|String
name|testDir
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|jobJarPath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"thejob.jar"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|jobJarPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
comment|// Have to put in real jar files or it will complain
name|createAndAddJarToJar
argument_list|(
name|jos
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"lib1.jar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createAndAddJarToJar
argument_list|(
name|jos
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"lib2.jar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jos
operator|.
name|close
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|setPermission
argument_list|(
name|jobJarPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jobJarPath
return|;
block|}
DECL|method|createAndAddJarToJar (JarOutputStream jos, File jarFile)
specifier|private
name|void
name|createAndAddJarToJar
parameter_list|(
name|JarOutputStream
name|jos
parameter_list|,
name|File
name|jarFile
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|fos2
init|=
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jos2
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos2
argument_list|)
decl_stmt|;
comment|// Have to have at least one entry or it will complain
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib1.inside"
argument_list|)
decl_stmt|;
name|jos2
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jos2
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jos2
operator|.
name|close
argument_list|()
expr_stmt|;
name|ze
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib/"
operator|+
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|jarFile
argument_list|)
decl_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|numRead
decl_stmt|;
do|do
block|{
name|numRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRead
operator|>=
literal|0
condition|)
block|{
name|jos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|numRead
operator|!=
operator|-
literal|1
condition|)
do|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|jos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jarFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSharedCache ()
specifier|public
name|void
name|testSharedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|localJobJarPath
init|=
name|makeJobJarWithLib
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppJar "
operator|+
name|MiniMRYarnCluster
operator|.
name|APPJAR
operator|+
literal|" not found. Not running test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|jobConf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SHARED_CACHE_MODE
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
name|Path
name|inputFile
init|=
name|createTempFile
argument_list|(
literal|"input-file"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// Create jars with a single file inside them.
name|Path
name|second
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.second.jar"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|third
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.third.jar"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|fourth
init|=
name|makeJar
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"distributed.fourth.jar"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Add libjars to job conf
name|jobConf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|second
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|third
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|fourth
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Because the job jar is a "dummy" jar, we need to include the jar with
comment|// DistributedCacheChecker or it won't be able to find it
name|Path
name|distributedCacheCheckerJar
init|=
operator|new
name|Path
argument_list|(
name|JarFinder
operator|.
name|getJar
argument_list|(
name|SharedCacheChecker
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|distributedCacheCheckerJar
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|distributedCacheCheckerJar
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SharedCacheChecker
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputFile
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// speed up failures
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|trackingUrl
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Tracking URL was "
operator|+
name|trackingUrl
operator|+
literal|" but didn't Match Job ID "
operator|+
name|jobId
argument_list|,
name|trackingUrl
operator|.
name|endsWith
argument_list|(
name|jobId
operator|.
name|substring
argument_list|(
name|jobId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * An identity mapper for testing the shared cache.    */
DECL|class|SharedCacheChecker
specifier|public
specifier|static
class|class
name|SharedCacheChecker
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|ConfVerificationMapper
specifier|public
specifier|static
class|class
name|ConfVerificationMapper
extends|extends
name|SleepMapper
block|{
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// check if the job classloader is enabled and verify the TCCL
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|tccl
operator|instanceof
name|ApplicationClassLoader
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TCCL expected: "
operator|+
name|ApplicationClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", actual: "
operator|+
name|tccl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|ioSortMb
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TEST_IO_SORT_MB
operator|.
name|equals
argument_list|(
name|ioSortMb
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"io.sort.mb expected: "
operator|+
name|TEST_IO_SORT_MB
operator|+
literal|", actual: "
operator|+
name|ioSortMb
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSleepJobName ()
specifier|public
name|void
name|testSleepJobName
parameter_list|()
throws|throws
name|IOException
block|{
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job1
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|job1
operator|.
name|getJobName
argument_list|()
argument_list|)
operator|.
name|withFailMessage
argument_list|(
literal|"Wrong default name of sleep job."
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SleepJob
operator|.
name|SLEEP_JOB_NAME
argument_list|)
expr_stmt|;
name|String
name|expectedJob2Name
init|=
name|SleepJob
operator|.
name|SLEEP_JOB_NAME
operator|+
literal|" - test"
decl_stmt|;
name|Job
name|job2
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|job2
operator|.
name|getJobName
argument_list|()
argument_list|)
operator|.
name|withFailMessage
argument_list|(
literal|"Wrong name of sleep job."
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedJob2Name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

