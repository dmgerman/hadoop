begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A test to rest the RunJar class.  */
end_comment

begin_class
DECL|class|TestRunJar
specifier|public
class|class
name|TestRunJar
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|TEST_JAR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_JAR_NAME
init|=
literal|"testjar.jar"
decl_stmt|;
DECL|field|CLASS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
literal|"Hello.class"
decl_stmt|;
annotation|@
name|Test
DECL|method|testRunjar ()
specifier|public
name|void
name|testRunjar
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
comment|// delete if output file already exists.
if|if
condition|(
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|outFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|File
name|makeTestJar
init|=
name|makeTestJar
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|makeTestJar
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"org.apache.hadoop.util.Hello"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|outFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|RunJar
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"RunJar failed"
argument_list|,
name|outFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestJar ()
specifier|private
name|File
name|makeTestJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|TEST_JAR_NAME
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jstream
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|entryInputStream
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"org/apache/hadoop/util/"
operator|+
name|CLASS_NAME
argument_list|)
decl_stmt|;
name|jstream
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BufferedInputStream
name|bufInputStream
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|entryInputStream
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|int
name|count
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|bufInputStream
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|2048
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|jstream
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|jstream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jstream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jarFile
return|;
block|}
block|}
end_class

end_unit

