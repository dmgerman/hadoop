begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|TestMultiFileInputFormat
specifier|public
class|class
name|TestMultiFileInputFormat
block|{
DECL|field|job
specifier|private
specifier|static
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMultiFileInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_SPLIT_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SPLIT_COUNT
init|=
literal|10000
decl_stmt|;
DECL|field|SPLIT_COUNT_INCR
specifier|private
specifier|static
specifier|final
name|int
name|SPLIT_COUNT_INCR
init|=
literal|6000
decl_stmt|;
DECL|field|MAX_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BYTES
init|=
literal|1024
decl_stmt|;
DECL|field|MAX_NUM_FILES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_FILES
init|=
literal|10000
decl_stmt|;
DECL|field|NUM_FILES_INCR
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FILES_INCR
init|=
literal|8000
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lengths
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lengths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Dummy class to extend MultiFileInputFormat*/
DECL|class|DummyMultiFileInputFormat
specifier|private
class|class
name|DummyMultiFileInputFormat
extends|extends
name|MultiFileInputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getRecordReader (InputSplit split, JobConf job , Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|initFiles (FileSystem fs, int numFiles, int numBytes)
specifier|private
name|Path
name|initFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|int
name|numBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/mapred"
argument_list|)
decl_stmt|;
name|Path
name|multiFileDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test.multifile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|multiFileDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|multiFileDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|numFiles
operator|+
literal|" file(s) in "
operator|+
name|multiFileDir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|multiFileDir
argument_list|,
literal|"file_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytes
operator|==
operator|-
literal|1
condition|)
block|{
name|numBytes
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|MAX_BYTES
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numBytes
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created file "
operator|+
name|path
operator|+
literal|" with length "
operator|+
name|numBytes
argument_list|)
expr_stmt|;
block|}
name|lengths
operator|.
name|put
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Long
argument_list|(
name|numBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|multiFileDir
argument_list|)
expr_stmt|;
return|return
name|multiFileDir
return|;
block|}
annotation|@
name|Test
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test started"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max split count           = "
operator|+
name|MAX_SPLIT_COUNT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Split count increment     = "
operator|+
name|SPLIT_COUNT_INCR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max bytes per file        = "
operator|+
name|MAX_BYTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max number of files       = "
operator|+
name|MAX_NUM_FILES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files increment = "
operator|+
name|NUM_FILES_INCR
argument_list|)
expr_stmt|;
name|MultiFileInputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|format
init|=
operator|new
name|DummyMultiFileInputFormat
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|numFiles
init|=
literal|1
init|;
name|numFiles
operator|<
name|MAX_NUM_FILES
condition|;
name|numFiles
operator|+=
operator|(
name|NUM_FILES_INCR
operator|/
literal|2
operator|)
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_FILES_INCR
operator|/
literal|2
argument_list|)
control|)
block|{
name|Path
name|dir
init|=
name|initFiles
argument_list|(
name|fs
argument_list|,
name|numFiles
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|MAX_SPLIT_COUNT
condition|;
name|i
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
name|SPLIT_COUNT_INCR
argument_list|)
operator|+
literal|1
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running for Num Files="
operator|+
name|numFiles
operator|+
literal|", split count="
operator|+
name|i
argument_list|)
expr_stmt|;
name|MultiFileSplit
index|[]
name|splits
init|=
operator|(
name|MultiFileSplit
index|[]
operator|)
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|bits
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|MultiFileSplit
name|split
range|:
name|splits
control|)
block|{
name|long
name|splitLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|split
operator|.
name|getPaths
argument_list|()
control|)
block|{
name|long
name|length
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|p
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|lengths
operator|.
name|get
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|splitLength
operator|+=
name|length
expr_stmt|;
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"file_"
argument_list|)
operator|+
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bits
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|splitLength
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|bits
operator|.
name|cardinality
argument_list|()
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test Finished"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatWithLessPathsThanSplits ()
specifier|public
name|void
name|testFormatWithLessPathsThanSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiFileInputFormat
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|format
init|=
operator|new
name|DummyMultiFileInputFormat
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|job
argument_list|)
decl_stmt|;
comment|// Test with no path
name|initFiles
argument_list|(
name|fs
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|2
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Test with 2 path and 4 splits
name|initFiles
argument_list|(
name|fs
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|4
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

