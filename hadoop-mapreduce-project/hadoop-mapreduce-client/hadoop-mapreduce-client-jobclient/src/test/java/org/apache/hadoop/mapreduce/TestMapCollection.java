begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestMapCollection
specifier|public
class|class
name|TestMapCollection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMapCollection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|FillWritable
specifier|public
specifier|static
specifier|abstract
class|class
name|FillWritable
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|len
specifier|private
name|int
name|len
decl_stmt|;
DECL|field|disableRead
specifier|protected
name|boolean
name|disableRead
decl_stmt|;
DECL|field|b
specifier|private
name|byte
index|[]
name|b
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
DECL|field|fillChar
specifier|protected
specifier|final
name|byte
name|fillChar
decl_stmt|;
DECL|method|FillWritable (byte fillChar)
specifier|public
name|FillWritable
parameter_list|(
name|byte
name|fillChar
parameter_list|)
block|{
name|this
operator|.
name|fillChar
operator|=
name|fillChar
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setLength (int len)
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
block|}
DECL|method|compareTo (FillWritable o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|FillWritable
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
return|return
literal|0
return|;
return|return
name|len
operator|-
name|o
operator|.
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|37
operator|*
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FillWritable
operator|)
condition|)
return|return
literal|false
return|;
return|return
literal|0
operator|==
name|compareTo
argument_list|(
operator|(
name|FillWritable
operator|)
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|disableRead
condition|)
block|{
return|return;
block|}
name|len
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid byte at "
operator|+
name|i
argument_list|,
name|fillChar
argument_list|,
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|0
operator|==
name|len
condition|)
block|{
return|return;
block|}
name|int
name|written
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|disableRead
condition|)
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|written
operator|-=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>
literal|1024
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|b
operator|||
name|b
operator|.
name|length
operator|<
name|len
condition|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
literal|2
operator|*
name|len
index|]
expr_stmt|;
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
do|do
block|{
specifier|final
name|int
name|write
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|written
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|len
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|written
operator|+=
name|write
expr_stmt|;
block|}
do|while
condition|(
name|written
operator|<
name|len
condition|)
do|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|written
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|written
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|fillChar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|KeyWritable
specifier|public
specifier|static
class|class
name|KeyWritable
extends|extends
name|FillWritable
implements|implements
name|WritableComparable
argument_list|<
name|FillWritable
argument_list|>
block|{
DECL|field|keyFill
specifier|static
specifier|final
name|byte
name|keyFill
init|=
call|(
name|byte
call|)
argument_list|(
literal|'K'
operator|&
literal|0xFF
argument_list|)
decl_stmt|;
DECL|method|KeyWritable ()
specifier|public
name|KeyWritable
parameter_list|()
block|{
name|super
argument_list|(
name|keyFill
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|disableRead
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ValWritable
specifier|public
specifier|static
class|class
name|ValWritable
extends|extends
name|FillWritable
block|{
DECL|method|ValWritable ()
specifier|public
name|ValWritable
parameter_list|()
block|{
name|super
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|'V'
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|disableRead
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.disable.val.read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|VariableComparator
specifier|public
specifier|static
class|class
name|VariableComparator
implements|implements
name|RawComparator
argument_list|<
name|KeyWritable
argument_list|>
implements|,
name|Configurable
block|{
DECL|field|readLen
specifier|private
name|boolean
name|readLen
decl_stmt|;
DECL|method|VariableComparator ()
specifier|public
name|VariableComparator
parameter_list|()
block|{ }
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|readLen
operator|=
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|compare (KeyWritable k1, KeyWritable k2)
specifier|public
name|int
name|compare
parameter_list|(
name|KeyWritable
name|k1
parameter_list|,
name|KeyWritable
name|k2
parameter_list|)
block|{
return|return
name|k1
operator|.
name|compareTo
argument_list|(
name|k2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
specifier|final
name|int
name|n1
decl_stmt|;
specifier|final
name|int
name|n2
decl_stmt|;
if|if
condition|(
name|readLen
condition|)
block|{
name|n1
operator|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b1
index|[
name|s1
index|]
argument_list|)
expr_stmt|;
name|n2
operator|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b2
index|[
name|s2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n1
operator|=
literal|0
expr_stmt|;
name|n2
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|s1
operator|+
name|n1
init|;
name|i
operator|<
name|l1
operator|-
name|n1
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid key at "
operator|+
name|s1
argument_list|,
operator|(
name|int
operator|)
name|KeyWritable
operator|.
name|keyFill
argument_list|,
name|b1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|s2
operator|+
name|n2
init|;
name|i
operator|<
name|l2
operator|-
name|n2
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid key at "
operator|+
name|s2
argument_list|,
operator|(
name|int
operator|)
name|KeyWritable
operator|.
name|keyFill
argument_list|,
name|b2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|l1
operator|-
name|l2
return|;
block|}
block|}
DECL|class|SpillReducer
specifier|public
specifier|static
class|class
name|SpillReducer
extends|extends
name|Reducer
argument_list|<
name|KeyWritable
argument_list|,
name|ValWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|numrecs
specifier|private
name|int
name|numrecs
decl_stmt|;
DECL|field|expected
specifier|private
name|int
name|expected
decl_stmt|;
annotation|@
name|Override
DECL|method|setup (Context job)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|job
parameter_list|)
block|{
name|numrecs
operator|=
literal|0
expr_stmt|;
name|expected
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reduce (KeyWritable k, Iterable<ValWritable> values, Context context)
specifier|protected
name|void
name|reduce
parameter_list|(
name|KeyWritable
name|k
parameter_list|,
name|Iterable
argument_list|<
name|ValWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|ValWritable
name|val
range|:
name|values
control|)
block|{
operator|++
name|numrecs
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|assertEquals
argument_list|(
literal|"Unexpected record count"
argument_list|,
name|expected
argument_list|,
name|numrecs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeSplit
specifier|public
specifier|static
class|class
name|FakeSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|class|RecordFactory
specifier|public
specifier|abstract
specifier|static
class|class
name|RecordFactory
implements|implements
name|Configurable
block|{
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|keyLen (int i)
specifier|public
specifier|abstract
name|int
name|keyLen
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
DECL|method|valLen (int i)
specifier|public
specifier|abstract
name|int
name|valLen
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
block|}
DECL|class|FixedRecordFactory
specifier|public
specifier|static
class|class
name|FixedRecordFactory
extends|extends
name|RecordFactory
block|{
DECL|field|keylen
specifier|private
name|int
name|keylen
decl_stmt|;
DECL|field|vallen
specifier|private
name|int
name|vallen
decl_stmt|;
DECL|method|FixedRecordFactory ()
specifier|public
name|FixedRecordFactory
parameter_list|()
block|{ }
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|keylen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.fixedrecord.keylen"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vallen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.fixedrecord.vallen"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|keyLen (int i)
specifier|public
name|int
name|keyLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|keylen
return|;
block|}
DECL|method|valLen (int i)
specifier|public
name|int
name|valLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|vallen
return|;
block|}
DECL|method|setLengths (Configuration conf, int keylen, int vallen)
specifier|public
specifier|static
name|void
name|setLengths
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|keylen
parameter_list|,
name|int
name|vallen
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.fixedrecord.keylen"
argument_list|,
name|keylen
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.fixedrecord.vallen"
argument_list|,
name|vallen
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
literal|0
operator|==
name|keylen
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.val.read"
argument_list|,
literal|0
operator|==
name|vallen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeIF
specifier|public
specifier|static
class|class
name|FakeIF
extends|extends
name|InputFormat
argument_list|<
name|KeyWritable
argument_list|,
name|ValWritable
argument_list|>
block|{
DECL|method|FakeIF ()
specifier|public
name|FakeIF
parameter_list|()
block|{ }
annotation|@
name|Override
DECL|method|getSplits (JobContext ctxt)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|ctxt
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numSplits
init|=
name|ctxt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"test.mapcollection.num.maps"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
name|numSplits
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
name|i
argument_list|,
operator|new
name|FakeSplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
DECL|method|createRecordReader ( InputSplit ignored, final TaskAttemptContext taskContext)
specifier|public
name|RecordReader
argument_list|<
name|KeyWritable
argument_list|,
name|ValWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|ignored
parameter_list|,
specifier|final
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{
return|return
operator|new
name|RecordReader
argument_list|<
name|KeyWritable
argument_list|,
name|ValWritable
argument_list|>
argument_list|()
block|{
specifier|private
name|RecordFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|KeyWritable
name|key
init|=
operator|new
name|KeyWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ValWritable
name|val
init|=
operator|new
name|ValWritable
argument_list|()
decl_stmt|;
specifier|private
name|int
name|current
decl_stmt|;
specifier|private
name|int
name|records
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|key
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|val
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|factory
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|FixedRecordFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|records
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
name|key
operator|.
name|setLength
argument_list|(
name|factory
operator|.
name|keyLen
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|.
name|setLength
argument_list|(
name|factory
operator|.
name|valLen
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|current
operator|++
operator|<
name|records
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|current
operator|/
name|records
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Unexpected count"
argument_list|,
name|records
argument_list|,
name|current
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
DECL|method|runTest (String name, int keylen, int vallen, int records, int ioSortMB, float spillPer)
specifier|private
specifier|static
name|void
name|runTest
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|keylen
parameter_list|,
name|int
name|vallen
parameter_list|,
name|int
name|records
parameter_list|,
name|int
name|ioSortMB
parameter_list|,
name|float
name|spillPer
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
name|ioSortMB
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|spillPer
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|FixedRecordFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|FixedRecordFactory
operator|.
name|setLengths
argument_list|(
name|conf
argument_list|,
name|keylen
argument_list|,
name|vallen
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|name
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest (String name, Job job)
specifier|private
specifier|static
name|void
name|runTest
parameter_list|(
name|String
name|name
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|Exception
block|{
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|LOCAL_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_FACTOR
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"test.mapcollection.num.maps"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|FakeIF
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SpillReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|KeyWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|ValWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSortComparatorClass
argument_list|(
name|VariableComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed!"
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValLastByte ()
specifier|public
name|void
name|testValLastByte
parameter_list|()
throws|throws
name|Exception
block|{
comment|// last byte of record/key is the last/first byte in the spill buffer
name|runTest
argument_list|(
literal|"vallastbyte"
argument_list|,
literal|128
argument_list|,
literal|896
argument_list|,
literal|1344
argument_list|,
literal|1
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"keylastbyte"
argument_list|,
literal|512
argument_list|,
literal|1024
argument_list|,
literal|896
argument_list|,
literal|1
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLargeRecords ()
specifier|public
name|void
name|testLargeRecords
parameter_list|()
throws|throws
name|Exception
block|{
comment|// maps emitting records larger than mapreduce.task.io.sort.mb
name|runTest
argument_list|(
literal|"largerec"
argument_list|,
literal|100
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|.8f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"largekeyzeroval"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|.8f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpillPer2B ()
specifier|public
name|void
name|testSpillPer2B
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set non-default, 100% speculative spill boundary
name|runTest
argument_list|(
literal|"fullspill2B"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"fullspill200B"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"fullspillbuf"
argument_list|,
literal|10
operator|*
literal|1024
argument_list|,
literal|20
operator|*
literal|1024
argument_list|,
literal|256
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"lt50perspill"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|0.3f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroVal ()
specifier|public
name|void
name|testZeroVal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test key/value at zero-length
name|runTest
argument_list|(
literal|"zeroval"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|.8f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"zerokey"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|.8f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"zerokeyval"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|.8f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"zerokeyvalfull"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleRecord ()
specifier|public
name|void
name|testSingleRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"singlerecord"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"zerokeyvalsingle"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowSpill ()
specifier|public
name|void
name|testLowSpill
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"lowspill"
argument_list|,
literal|4000
argument_list|,
literal|96
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|0.00390625f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitMetaSpill ()
specifier|public
name|void
name|testSplitMetaSpill
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"splitmetaspill"
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|131072
argument_list|,
literal|1
argument_list|,
literal|0.8f
argument_list|)
expr_stmt|;
block|}
DECL|class|StepFactory
specifier|public
specifier|static
class|class
name|StepFactory
extends|extends
name|RecordFactory
block|{
DECL|field|prekey
specifier|public
name|int
name|prekey
decl_stmt|;
DECL|field|postkey
specifier|public
name|int
name|postkey
decl_stmt|;
DECL|field|preval
specifier|public
name|int
name|preval
decl_stmt|;
DECL|field|postval
specifier|public
name|int
name|postval
decl_stmt|;
DECL|field|steprec
specifier|public
name|int
name|steprec
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|prekey
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stepfactory.prekey"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|postkey
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stepfactory.postkey"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|preval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stepfactory.preval"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|postval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stepfactory.postval"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|steprec
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stepfactory.steprec"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|setLengths (Configuration conf, int prekey, int postkey, int preval, int postval, int steprec)
specifier|public
specifier|static
name|void
name|setLengths
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|prekey
parameter_list|,
name|int
name|postkey
parameter_list|,
name|int
name|preval
parameter_list|,
name|int
name|postval
parameter_list|,
name|int
name|steprec
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.stepfactory.prekey"
argument_list|,
name|prekey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.stepfactory.postkey"
argument_list|,
name|postkey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.stepfactory.preval"
argument_list|,
name|preval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.stepfactory.postval"
argument_list|,
name|postval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.stepfactory.steprec"
argument_list|,
name|steprec
argument_list|)
expr_stmt|;
block|}
DECL|method|keyLen (int i)
specifier|public
name|int
name|keyLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
name|steprec
condition|?
name|postkey
else|:
name|prekey
return|;
block|}
DECL|method|valLen (int i)
specifier|public
name|int
name|valLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
name|steprec
condition|?
name|postval
else|:
name|preval
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPostSpillMeta ()
specifier|public
name|void
name|testPostSpillMeta
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write larger records until spill, then write records that generate
comment|// no writes into the serialization buffer
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 2^20 * spill = 14336 bytes available post-spill, at most 896 meta
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
literal|.986328125f
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|StepFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|StepFactory
operator|.
name|setLengths
argument_list|(
name|conf
argument_list|,
literal|4000
argument_list|,
literal|0
argument_list|,
literal|96
argument_list|,
literal|0
argument_list|,
literal|252
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.val.read"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"postspillmeta"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLargeRecConcurrent ()
specifier|public
name|void
name|testLargeRecConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
literal|.986328125f
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|StepFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|StepFactory
operator|.
name|setLengths
argument_list|(
name|conf
argument_list|,
literal|4000
argument_list|,
literal|261120
argument_list|,
literal|96
argument_list|,
literal|1024
argument_list|,
literal|251
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.val.read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"largeconcurrent"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
DECL|class|RandomFactory
specifier|public
specifier|static
class|class
name|RandomFactory
extends|extends
name|RecordFactory
block|{
DECL|field|minkey
specifier|public
name|int
name|minkey
decl_stmt|;
DECL|field|maxkey
specifier|public
name|int
name|maxkey
decl_stmt|;
DECL|field|minval
specifier|public
name|int
name|minval
decl_stmt|;
DECL|field|maxval
specifier|public
name|int
name|maxval
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|nextRand (Random r, int max)
specifier|private
specifier|static
name|int
name|nextRand
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|exp
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
name|Math
operator|.
name|log
argument_list|(
name|max
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|r
operator|.
name|setSeed
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.randomfactory.seed"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|minkey
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.randomfactory.minkey"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|maxkey
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.randomfactory.maxkey"
argument_list|,
literal|0
argument_list|)
operator|-
name|minkey
expr_stmt|;
name|minval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.randomfactory.minval"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|maxval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.randomfactory.maxval"
argument_list|,
literal|0
argument_list|)
operator|-
name|minval
expr_stmt|;
block|}
DECL|method|setLengths (Configuration conf, Random r, int max)
specifier|public
specifier|static
name|void
name|setLengths
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Random
name|r
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|int
name|k1
init|=
name|nextRand
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|k2
init|=
name|nextRand
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|k1
operator|>
name|k2
condition|)
block|{
specifier|final
name|int
name|tmp
init|=
name|k1
decl_stmt|;
name|k1
operator|=
name|k2
expr_stmt|;
name|k2
operator|=
name|k1
expr_stmt|;
block|}
name|int
name|v1
init|=
name|nextRand
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|v2
init|=
name|nextRand
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
specifier|final
name|int
name|tmp
init|=
name|v1
decl_stmt|;
name|v1
operator|=
name|v2
expr_stmt|;
name|v2
operator|=
name|v1
expr_stmt|;
block|}
name|setLengths
argument_list|(
name|conf
argument_list|,
name|k1
argument_list|,
operator|++
name|k2
argument_list|,
name|v1
argument_list|,
operator|++
name|v2
argument_list|)
expr_stmt|;
block|}
DECL|method|setLengths (Configuration conf, int minkey, int maxkey, int minval, int maxval)
specifier|public
specifier|static
name|void
name|setLengths
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|minkey
parameter_list|,
name|int
name|maxkey
parameter_list|,
name|int
name|minval
parameter_list|,
name|int
name|maxval
parameter_list|)
block|{
assert|assert
name|minkey
operator|<
name|maxkey
assert|;
assert|assert
name|minval
operator|<
name|maxval
assert|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.randomfactory.minkey"
argument_list|,
name|minkey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.randomfactory.maxkey"
argument_list|,
name|maxkey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.randomfactory.minval"
argument_list|,
name|minval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.randomfactory.maxval"
argument_list|,
name|maxval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.key.read"
argument_list|,
name|minkey
operator|==
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"test.disable.val.read"
argument_list|,
name|minval
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|keyLen (int i)
specifier|public
name|int
name|keyLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|minkey
operator|+
name|nextRand
argument_list|(
name|r
argument_list|,
name|maxkey
operator|-
name|minkey
argument_list|)
return|;
block|}
DECL|method|valLen (int i)
specifier|public
name|int
name|valLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|minval
operator|+
name|nextRand
argument_list|(
name|r
argument_list|,
name|maxval
operator|-
name|minval
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandom ()
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|RandomFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0.1f
argument_list|,
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomFactory
operator|.
name|setLengths
argument_list|(
name|conf
argument_list|,
name|r
argument_list|,
literal|1
operator|<<
literal|14
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"test.randomfactory.seed"
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"random"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomCompress ()
specifier|public
name|void
name|testRandomCompress
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"test.mapcollection.class"
argument_list|,
name|RandomFactory
operator|.
name|class
argument_list|,
name|RecordFactory
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SORT_SPILL_PERCENT
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0.1f
argument_list|,
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RandomFactory
operator|.
name|setLengths
argument_list|(
name|conf
argument_list|,
name|r
argument_list|,
literal|1
operator|<<
literal|14
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"test.spillmap.records"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"test.randomfactory.seed"
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
literal|"randomCompress"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

