begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_class
DECL|class|TestFileInputFormatPathFilter
specifier|public
class|class
name|TestFileInputFormatPathFilter
block|{
DECL|class|DummyFileInputFormat
specifier|public
specifier|static
class|class
name|DummyFileInputFormat
extends|extends
name|FileInputFormat
block|{
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"TestFileInputFormatPathFilter"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localFs
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFile (String fileName)
specifier|protected
name|Path
name|createFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|localFs
operator|.
name|makeQualified
argument_list|(
name|file
argument_list|)
return|;
block|}
DECL|method|createFiles ()
specifier|protected
name|Set
argument_list|<
name|Path
argument_list|>
name|createFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|"_hello"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
literal|".hello"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
DECL|class|TestPathFilter
specifier|public
specifier|static
class|class
name|TestPathFilter
implements|implements
name|PathFilter
block|{
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
literal|"TestFileInputFormatPathFilter"
argument_list|)
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
DECL|method|_testInputFiles (boolean withFilter, boolean withGlob)
specifier|private
name|void
name|_testInputFiles
parameter_list|(
name|boolean
name|withFilter
parameter_list|,
name|boolean
name|withGlob
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|createdFiles
init|=
name|createFiles
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Path
name|inputDir
init|=
operator|(
name|withGlob
operator|)
condition|?
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"a*"
argument_list|)
else|:
name|workDir
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|DummyFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|withFilter
condition|)
block|{
name|FileInputFormat
operator|.
name|setInputPathFilter
argument_list|(
name|conf
argument_list|,
name|TestPathFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|DummyFileInputFormat
name|inputFormat
init|=
operator|(
name|DummyFileInputFormat
operator|)
name|conf
operator|.
name|getInputFormat
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|computedFiles
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|inputFormat
operator|.
name|listStatus
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|computedFiles
operator|.
name|add
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"_hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|".hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|withFilter
condition|)
block|{
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"bb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withGlob
condition|)
block|{
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createdFiles
operator|.
name|remove
argument_list|(
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"bb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|createdFiles
argument_list|,
name|computedFiles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutPathFilterWithoutGlob ()
specifier|public
name|void
name|testWithoutPathFilterWithoutGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|_testInputFiles
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutPathFilterWithGlob ()
specifier|public
name|void
name|testWithoutPathFilterWithGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|_testInputFiles
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithPathFilterWithoutGlob ()
specifier|public
name|void
name|testWithPathFilterWithoutGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|_testInputFiles
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithPathFilterWithGlob ()
specifier|public
name|void
name|testWithPathFilterWithGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|_testInputFiles
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

