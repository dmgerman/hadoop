begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Class which generates a file or directory path using a simple random  * generation algorithm stated in http://issues.apache.org/jira/browse/HDFS-708  */
end_comment

begin_class
DECL|class|PathFinder
class|class
name|PathFinder
block|{
DECL|enum|Type
specifier|private
enum|enum
name|Type
block|{
DECL|enumConstant|FILE
DECL|enumConstant|DIRECTORY
name|FILE
block|,
name|DIRECTORY
block|}
DECL|field|DIR_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DIR_PREFIX
init|=
literal|"sl_dir_"
decl_stmt|;
DECL|field|FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PREFIX
init|=
literal|"sl_file_"
decl_stmt|;
DECL|field|basePath
specifier|private
name|Path
name|basePath
decl_stmt|;
DECL|field|config
specifier|private
name|ConfigExtractor
name|config
decl_stmt|;
DECL|field|rnd
specifier|private
name|Random
name|rnd
decl_stmt|;
DECL|method|PathFinder (ConfigExtractor cfg, Random rnd)
name|PathFinder
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|cfg
operator|.
name|getDataPath
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
block|}
comment|/**    * This function uses a simple recursive algorithm to generate a path name    * using the current id % limitPerDir and using current id / limitPerDir to    * form the rest of the tree segments    *     * @param curId    *          the current id to use for determining the current directory id %    *          per directory limit and then used for determining the next segment    *          of the path to use, if<= zero this will return the base path    * @param limitPerDir    *          the per directory file limit used in modulo and division    *          operations to calculate the file name and path tree    * @param type    *          directory or file enumeration    * @return Path    */
DECL|method|getPath (int curId, int limitPerDir, Type type)
specifier|private
name|Path
name|getPath
parameter_list|(
name|int
name|curId
parameter_list|,
name|int
name|limitPerDir
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|curId
operator|<=
literal|0
condition|)
block|{
return|return
name|basePath
return|;
block|}
name|String
name|name
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FILE
case|:
name|name
operator|=
name|FILE_PREFIX
operator|+
operator|new
name|Integer
argument_list|(
name|curId
operator|%
name|limitPerDir
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|DIRECTORY
case|:
name|name
operator|=
name|DIR_PREFIX
operator|+
operator|new
name|Integer
argument_list|(
name|curId
operator|%
name|limitPerDir
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
name|Path
name|base
init|=
name|getPath
argument_list|(
operator|(
name|curId
operator|/
name|limitPerDir
operator|)
argument_list|,
name|limitPerDir
argument_list|,
name|Type
operator|.
name|DIRECTORY
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Gets a file path using the given configuration provided total files and    * files per directory    *     * @return path    */
DECL|method|getFile ()
name|Path
name|getFile
parameter_list|()
block|{
name|int
name|fileLimit
init|=
name|config
operator|.
name|getTotalFiles
argument_list|()
decl_stmt|;
name|int
name|dirLimit
init|=
name|config
operator|.
name|getDirSize
argument_list|()
decl_stmt|;
name|int
name|startPoint
init|=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|fileLimit
argument_list|)
decl_stmt|;
return|return
name|getPath
argument_list|(
name|startPoint
argument_list|,
name|dirLimit
argument_list|,
name|Type
operator|.
name|FILE
argument_list|)
return|;
block|}
comment|/**    * Gets a directory path using the given configuration provided total files    * and files per directory    *     * @return path    */
DECL|method|getDirectory ()
name|Path
name|getDirectory
parameter_list|()
block|{
name|int
name|fileLimit
init|=
name|config
operator|.
name|getTotalFiles
argument_list|()
decl_stmt|;
name|int
name|dirLimit
init|=
name|config
operator|.
name|getDirSize
argument_list|()
decl_stmt|;
name|int
name|startPoint
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|fileLimit
argument_list|)
decl_stmt|;
return|return
name|getPath
argument_list|(
name|startPoint
argument_list|,
name|dirLimit
argument_list|,
name|Type
operator|.
name|DIRECTORY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

