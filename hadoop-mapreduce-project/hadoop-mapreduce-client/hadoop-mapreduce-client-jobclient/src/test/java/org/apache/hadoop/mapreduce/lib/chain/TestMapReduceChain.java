begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.chain
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|HadoopTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestMapReduceChain
specifier|public
class|class
name|TestMapReduceChain
extends|extends
name|HadoopTestCase
block|{
DECL|field|localPathRoot
specifier|private
specifier|static
name|String
name|localPathRoot
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
decl_stmt|;
DECL|field|flagDir
specifier|private
specifier|static
name|Path
name|flagDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"testing/chain/flags"
argument_list|)
decl_stmt|;
DECL|method|cleanFlags (Configuration conf)
specifier|private
specifier|static
name|void
name|cleanFlags
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|flagDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|flagDir
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFlag (Configuration conf, String flag)
specifier|private
specifier|static
name|void
name|writeFlag
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|getFlag
argument_list|(
name|conf
argument_list|,
name|flag
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Flag "
operator|+
name|flag
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|flagDir
argument_list|,
name|flag
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getFlag (Configuration conf, String flag)
specifier|private
specifier|static
name|boolean
name|getFlag
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|flagDir
argument_list|,
name|flag
argument_list|)
argument_list|)
return|;
block|}
DECL|method|TestMapReduceChain ()
specifier|public
name|TestMapReduceChain
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|HadoopTestCase
operator|.
name|LOCAL_MR
argument_list|,
name|HadoopTestCase
operator|.
name|LOCAL_FS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChain ()
specifier|public
name|void
name|testChain
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"testing/chain/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|localPathRoot
argument_list|,
literal|"testing/chain/output"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"1\n2\n"
decl_stmt|;
name|String
name|expectedOutput
init|=
literal|"0\t1ABCRDEF\n2\t2ABCRDEF\n"
decl_stmt|;
name|Configuration
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|cleanFlags
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|Configuration
name|mapAConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|mapAConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|ChainMapper
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|AMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|mapAConf
argument_list|)
expr_stmt|;
name|ChainMapper
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|BMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ChainMapper
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|CMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|reduceConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|reduceConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|setReducer
argument_list|(
name|job
argument_list|,
name|RReduce
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|reduceConf
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|DMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|mapEConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|mapEConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|EMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|mapEConf
argument_list|)
expr_stmt|;
name|ChainReducer
operator|.
name|addMapper
argument_list|(
name|job
argument_list|,
name|FMap
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"flag not set"
decl_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.setup.R"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup.F"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.A.value.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.A.value.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.B.value.1A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.B.value.2A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.C.value.1AB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.C.value.2AB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.R.value.1ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.R.value.2ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.D.value.1ABCR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.D.value.2ABCR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.E.value.1ABCRD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.E.value.2ABCRD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.F.value.1ABCRDE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.F.value.2ABCRDE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.cleanup.R"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFlag
argument_list|(
name|conf
argument_list|,
literal|"map.cleanup.F"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Outputs doesn't match"
argument_list|,
name|expectedOutput
argument_list|,
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outDir
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|AMap
specifier|public
specifier|static
class|class
name|AMap
extends|extends
name|IDMap
block|{
DECL|method|AMap ()
specifier|public
name|AMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BMap
specifier|public
specifier|static
class|class
name|BMap
extends|extends
name|IDMap
block|{
DECL|method|BMap ()
specifier|public
name|BMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"B"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CMap
specifier|public
specifier|static
class|class
name|CMap
extends|extends
name|IDMap
block|{
DECL|method|CMap ()
specifier|public
name|CMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"C"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RReduce
specifier|public
specifier|static
class|class
name|RReduce
extends|extends
name|IDReduce
block|{
DECL|method|RReduce ()
specifier|public
name|RReduce
parameter_list|()
block|{
name|super
argument_list|(
literal|"R"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DMap
specifier|public
specifier|static
class|class
name|DMap
extends|extends
name|IDMap
block|{
DECL|method|DMap ()
specifier|public
name|DMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"D"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|EMap
specifier|public
specifier|static
class|class
name|EMap
extends|extends
name|IDMap
block|{
DECL|method|EMap ()
specifier|public
name|EMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"E"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FMap
specifier|public
specifier|static
class|class
name|FMap
extends|extends
name|IDMap
block|{
DECL|method|FMap ()
specifier|public
name|FMap
parameter_list|()
block|{
name|super
argument_list|(
literal|"F"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IDMap
specifier|public
specifier|static
class|class
name|IDMap
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|prop
specifier|private
name|String
name|prop
decl_stmt|;
DECL|method|IDMap (String name, String prop)
specifier|public
name|IDMap
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prop
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
block|}
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|prop
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"map.setup."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|map (LongWritable key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|writeFlag
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"map."
operator|+
name|name
operator|+
literal|".value."
operator|+
name|value
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|value
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanup (Context context)
specifier|public
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|writeFlag
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"map.cleanup."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IDReduce
specifier|public
specifier|static
class|class
name|IDReduce
extends|extends
name|Reducer
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|prop
specifier|private
name|String
name|prop
decl_stmt|;
DECL|method|IDReduce (String name, String prop)
specifier|public
name|IDReduce
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prop
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
block|}
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|prop
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFlag
argument_list|(
name|conf
argument_list|,
literal|"reduce.setup."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce (LongWritable key, Iterable<Text> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|Text
name|value
range|:
name|values
control|)
block|{
name|writeFlag
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"reduce."
operator|+
name|name
operator|+
literal|".value."
operator|+
name|value
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|value
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanup (Context context)
specifier|public
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|writeFlag
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"reduce.cleanup."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

