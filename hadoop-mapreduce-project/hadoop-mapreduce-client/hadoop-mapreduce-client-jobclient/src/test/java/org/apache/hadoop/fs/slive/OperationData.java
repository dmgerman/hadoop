begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|Distribution
import|;
end_import

begin_comment
comment|/**  * This class holds the data representing what an operations distribution and  * its percentage is (between 0 and 1) and provides operations to access those  * types and parse and unparse from and into strings  */
end_comment

begin_class
DECL|class|OperationData
class|class
name|OperationData
block|{
DECL|field|SEP
specifier|private
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|","
decl_stmt|;
DECL|field|distribution
specifier|private
name|Distribution
name|distribution
decl_stmt|;
DECL|field|percent
specifier|private
name|Double
name|percent
decl_stmt|;
DECL|method|OperationData (Distribution d, Double p)
name|OperationData
parameter_list|(
name|Distribution
name|d
parameter_list|,
name|Double
name|p
parameter_list|)
block|{
name|this
operator|.
name|distribution
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|percent
operator|=
name|p
expr_stmt|;
block|}
comment|/**    * Expects a comma separated list (where the first element is the ratio    * (between 0 and 100)) and the second element is the distribution (if    * non-existent then uniform will be selected). If an empty list is passed in    * then this element will just set the distribution (to uniform) and leave the    * percent as null.    */
DECL|method|OperationData (String data)
name|OperationData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|String
name|pieces
index|[]
init|=
name|Helper
operator|.
name|getTrimmedStrings
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|distribution
operator|=
name|Distribution
operator|.
name|UNIFORM
expr_stmt|;
name|percent
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|pieces
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|percent
operator|=
operator|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|pieces
index|[
literal|0
index|]
argument_list|)
operator|/
literal|100.0d
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pieces
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|percent
operator|=
operator|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|pieces
index|[
literal|0
index|]
argument_list|)
operator|/
literal|100.0d
operator|)
expr_stmt|;
name|distribution
operator|=
name|Distribution
operator|.
name|valueOf
argument_list|(
name|pieces
index|[
literal|1
index|]
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets the distribution this operation represents    *     * @return Distribution    */
DECL|method|getDistribution ()
name|Distribution
name|getDistribution
parameter_list|()
block|{
return|return
name|distribution
return|;
block|}
comment|/**    * Gets the 0 - 1 percent that this operations run ratio should be    *     * @return Double (or null if not given)    */
DECL|method|getPercent ()
name|Double
name|getPercent
parameter_list|()
block|{
return|return
name|percent
return|;
block|}
comment|/**    * Returns a string list representation of this object (if the percent is    * null) then NaN will be output instead. Format is percent,distribution.    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPercent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
name|getPercent
argument_list|()
operator|*
literal|100.0d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|.
name|append
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|getDistribution
argument_list|()
operator|.
name|lowerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

