begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestJoinDatamerge
specifier|public
class|class
name|TestJoinDatamerge
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createWriters (Path testdir, Configuration conf, int srcs, Path[] src)
specifier|private
specifier|static
name|SequenceFile
operator|.
name|Writer
index|[]
name|createWriters
parameter_list|(
name|Path
name|testdir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|srcs
parameter_list|,
name|Path
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|src
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|10
argument_list|,
literal|36
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
index|[
name|srcs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|src
index|[
name|i
index|]
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|writeSimpleSrc (Path testdir, Configuration conf, int srcs)
specifier|private
specifier|static
name|Path
index|[]
name|writeSimpleSrc
parameter_list|(
name|Path
name|testdir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
literal|null
decl_stmt|;
name|Path
index|[]
name|src
init|=
operator|new
name|Path
index|[
name|srcs
index|]
decl_stmt|;
try|try
block|{
name|out
operator|=
name|createWriters
argument_list|(
name|testdir
argument_list|,
name|conf
argument_list|,
name|srcs
argument_list|,
name|src
argument_list|)
expr_stmt|;
specifier|final
name|int
name|capacity
init|=
name|srcs
operator|*
literal|2
operator|+
literal|1
decl_stmt|;
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|IntWritable
name|val
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|capacity
condition|;
operator|++
name|k
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|k
operator|%
name|srcs
operator|==
literal|0
condition|?
name|k
operator|*
name|srcs
else|:
name|k
operator|*
name|srcs
operator|+
name|i
argument_list|)
expr_stmt|;
name|val
operator|.
name|set
argument_list|(
literal|10
operator|*
name|k
operator|+
name|i
argument_list|)
expr_stmt|;
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|k
condition|)
block|{
comment|// add duplicate key
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|out
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|src
return|;
block|}
DECL|method|stringify (IntWritable key, Writable val)
specifier|private
specifier|static
name|String
name|stringify
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
operator|+
name|val
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|SimpleCheckerMapBase
specifier|private
specifier|static
specifier|abstract
class|class
name|SimpleCheckerMapBase
parameter_list|<
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|Mapper
argument_list|<
name|IntWritable
argument_list|,
name|V
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|one
specifier|protected
specifier|final
specifier|static
name|IntWritable
name|one
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|srcs
name|int
name|srcs
decl_stmt|;
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|srcs
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"testdatamerge.sources"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid src count: "
operator|+
name|srcs
argument_list|,
name|srcs
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SimpleCheckerReduceBase
specifier|private
specifier|static
specifier|abstract
class|class
name|SimpleCheckerReduceBase
extends|extends
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|one
specifier|protected
specifier|final
specifier|static
name|IntWritable
name|one
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|srcs
name|int
name|srcs
decl_stmt|;
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|srcs
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"testdatamerge.sources"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid src count: "
operator|+
name|srcs
argument_list|,
name|srcs
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce (IntWritable key, Iterable<IntWritable> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|IntWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|seen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntWritable
name|value
range|:
name|values
control|)
block|{
name|seen
operator|+=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Bad count for "
operator|+
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|verify
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|seen
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|seen
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (int key, int occ)
specifier|public
specifier|abstract
name|boolean
name|verify
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|occ
parameter_list|)
function_decl|;
block|}
DECL|class|InnerJoinMapChecker
specifier|private
specifier|static
class|class
name|InnerJoinMapChecker
extends|extends
name|SimpleCheckerMapBase
argument_list|<
name|TupleWritable
argument_list|>
block|{
DECL|method|map (IntWritable key, TupleWritable val, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|TupleWritable
name|val
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|k
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
literal|0
operator|==
name|k
operator|%
operator|(
name|srcs
operator|*
name|srcs
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|vali
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
operator|(
name|vali
operator|-
name|i
operator|)
operator|*
name|srcs
operator|==
literal|10
operator|*
name|k
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|one
argument_list|)
expr_stmt|;
comment|// If the user modifies the key or any of the values in the tuple, it
comment|// should not affect the rest of the join.
name|key
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|has
argument_list|(
literal|0
argument_list|)
condition|)
block|{
operator|(
operator|(
name|IntWritable
operator|)
name|val
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|InnerJoinReduceChecker
specifier|private
specifier|static
class|class
name|InnerJoinReduceChecker
extends|extends
name|SimpleCheckerReduceBase
block|{
DECL|method|verify (int key, int occ)
specifier|public
name|boolean
name|verify
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|occ
parameter_list|)
block|{
return|return
operator|(
name|key
operator|==
literal|0
operator|&&
name|occ
operator|==
literal|2
operator|)
operator|||
operator|(
name|key
operator|!=
literal|0
operator|&&
operator|(
name|key
operator|%
operator|(
name|srcs
operator|*
name|srcs
operator|)
operator|==
literal|0
operator|)
operator|&&
name|occ
operator|==
literal|1
operator|)
return|;
block|}
block|}
DECL|class|OuterJoinMapChecker
specifier|private
specifier|static
class|class
name|OuterJoinMapChecker
extends|extends
name|SimpleCheckerMapBase
argument_list|<
name|TupleWritable
argument_list|>
block|{
DECL|method|map (IntWritable key, TupleWritable val, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|TupleWritable
name|val
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|k
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|k
operator|%
operator|(
name|srcs
operator|*
name|srcs
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|IntWritable
argument_list|)
expr_stmt|;
specifier|final
name|int
name|vali
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
operator|(
name|vali
operator|-
name|i
operator|)
operator|*
name|srcs
operator|==
literal|10
operator|*
name|k
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|k
operator|%
name|srcs
condition|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|IntWritable
argument_list|)
expr_stmt|;
specifier|final
name|int
name|vali
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|val
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|srcs
operator|*
operator|(
name|vali
operator|-
name|i
operator|)
operator|==
literal|10
operator|*
operator|(
name|k
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
operator|!
name|val
operator|.
name|has
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|one
argument_list|)
expr_stmt|;
comment|//If the user modifies the key or any of the values in the tuple, it
comment|// should not affect the rest of the join.
name|key
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|has
argument_list|(
literal|0
argument_list|)
condition|)
block|{
operator|(
operator|(
name|IntWritable
operator|)
name|val
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|OuterJoinReduceChecker
specifier|private
specifier|static
class|class
name|OuterJoinReduceChecker
extends|extends
name|SimpleCheckerReduceBase
block|{
DECL|method|verify (int key, int occ)
specifier|public
name|boolean
name|verify
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|occ
parameter_list|)
block|{
if|if
condition|(
name|key
operator|<
name|srcs
operator|*
name|srcs
operator|&&
operator|(
name|key
operator|%
operator|(
name|srcs
operator|+
literal|1
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|2
operator|==
name|occ
return|;
block|}
return|return
literal|1
operator|==
name|occ
return|;
block|}
block|}
DECL|class|OverrideMapChecker
specifier|private
specifier|static
class|class
name|OverrideMapChecker
extends|extends
name|SimpleCheckerMapBase
argument_list|<
name|IntWritable
argument_list|>
block|{
DECL|method|map (IntWritable key, IntWritable val, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|IntWritable
name|val
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|k
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|int
name|vali
init|=
name|val
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|kvstr
init|=
literal|"Unexpected tuple: "
operator|+
name|stringify
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|k
operator|%
operator|(
name|srcs
operator|*
name|srcs
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|vali
operator|==
name|k
operator|*
literal|10
operator|/
name|srcs
operator|+
name|srcs
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|i
init|=
name|k
operator|%
name|srcs
decl_stmt|;
name|assertTrue
argument_list|(
name|kvstr
argument_list|,
name|srcs
operator|*
operator|(
name|vali
operator|-
name|i
operator|)
operator|==
literal|10
operator|*
operator|(
name|k
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|one
argument_list|)
expr_stmt|;
comment|//If the user modifies the key or any of the values in the tuple, it
comment|// should not affect the rest of the join.
name|key
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|val
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OverrideReduceChecker
specifier|private
specifier|static
class|class
name|OverrideReduceChecker
extends|extends
name|SimpleCheckerReduceBase
block|{
DECL|method|verify (int key, int occ)
specifier|public
name|boolean
name|verify
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|occ
parameter_list|)
block|{
if|if
condition|(
name|key
operator|<
name|srcs
operator|*
name|srcs
operator|&&
operator|(
name|key
operator|%
operator|(
name|srcs
operator|+
literal|1
operator|)
operator|)
operator|==
literal|0
operator|&&
name|key
operator|!=
literal|0
condition|)
block|{
return|return
literal|2
operator|==
name|occ
return|;
block|}
return|return
literal|1
operator|==
name|occ
return|;
block|}
block|}
DECL|method|joinAs (String jointype, Class<? extends SimpleCheckerMapBase<?>> map, Class<? extends SimpleCheckerReduceBase> reduce)
specifier|private
specifier|static
name|void
name|joinAs
parameter_list|(
name|String
name|jointype
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|SimpleCheckerMapBase
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|SimpleCheckerReduceBase
argument_list|>
name|reduce
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|srcs
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|base
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|jointype
argument_list|)
argument_list|)
decl_stmt|;
name|Path
index|[]
name|src
init|=
name|writeSimpleSrc
argument_list|(
name|base
argument_list|,
name|conf
argument_list|,
name|srcs
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|jointype
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"testdatamerge.sources"
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|CompositeInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"out"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"outer"
operator|.
name|equals
argument_list|(
name|jointype
argument_list|)
condition|)
block|{
name|checkOuterConsistency
argument_list|(
name|job
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
name|base
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleInnerJoin ()
specifier|public
name|void
name|testSimpleInnerJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|joinAs
argument_list|(
literal|"inner"
argument_list|,
name|InnerJoinMapChecker
operator|.
name|class
argument_list|,
name|InnerJoinReduceChecker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOuterJoin ()
specifier|public
name|void
name|testSimpleOuterJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|joinAs
argument_list|(
literal|"outer"
argument_list|,
name|OuterJoinMapChecker
operator|.
name|class
argument_list|,
name|OuterJoinReduceChecker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOuterConsistency (Job job, Path[] src)
specifier|private
specifier|static
name|void
name|checkOuterConsistency
parameter_list|(
name|Job
name|job
parameter_list|,
name|Path
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|outf
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|outlist
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|outf
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of part files is more than 1. It is"
operator|+
name|outlist
operator|.
name|length
argument_list|,
literal|1
argument_list|,
name|outlist
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"output file with zero length"
operator|+
name|outlist
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|,
literal|0
operator|<
name|outlist
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|r
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|outlist
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|IntWritable
name|k
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|IntWritable
name|v
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"counts does not match"
argument_list|,
name|v
operator|.
name|get
argument_list|()
argument_list|,
name|countProduct
argument_list|(
name|k
argument_list|,
name|src
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|countProduct (IntWritable key, Path[] src, Configuration conf)
specifier|private
specifier|static
name|int
name|countProduct
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Path
index|[]
name|src
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|product
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|src
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|r
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|IntWritable
name|k
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|IntWritable
name|v
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
condition|)
block|{
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|product
operator|*=
name|count
expr_stmt|;
block|}
block|}
return|return
name|product
return|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOverride ()
specifier|public
name|void
name|testSimpleOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|joinAs
argument_list|(
literal|"override"
argument_list|,
name|OverrideMapChecker
operator|.
name|class
argument_list|,
name|OverrideReduceChecker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedJoin ()
specifier|public
name|void
name|testNestedJoin
parameter_list|()
throws|throws
name|Exception
block|{
comment|// outer(inner(S1,...,Sn),outer(S1,...Sn))
specifier|final
name|int
name|SOURCES
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|ITEMS
init|=
operator|(
name|SOURCES
operator|+
literal|1
operator|)
operator|*
operator|(
name|SOURCES
operator|+
literal|1
operator|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|base
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nested"
argument_list|)
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|source
init|=
operator|new
name|int
index|[
name|SOURCES
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|source
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
name|ITEMS
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ITEMS
condition|;
operator|++
name|j
control|)
block|{
name|source
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|(
name|i
operator|+
literal|2
operator|)
operator|*
operator|(
name|j
operator|+
literal|1
operator|)
expr_stmt|;
block|}
block|}
name|Path
index|[]
name|src
init|=
operator|new
name|Path
index|[
name|SOURCES
index|]
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
name|createWriters
argument_list|(
name|base
argument_list|,
name|conf
argument_list|,
name|SOURCES
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|IntWritable
name|k
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|IntWritable
name|v
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|v
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ITEMS
condition|;
operator|++
name|j
control|)
block|{
name|k
operator|.
name|set
argument_list|(
name|source
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|out
operator|=
literal|null
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"outer(inner("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|SOURCES
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"),outer("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|class
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|src
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|class
argument_list|,
literal|"raboof"
argument_list|)
operator|+
literal|"))"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|setKeyClass
argument_list|(
name|conf
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|setValClass
argument_list|(
name|conf
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|outf
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outf
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|CompositeInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|TupleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|outlist
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|outf
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outlist
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|<
name|outlist
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|r
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|outlist
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TupleWritable
name|v
init|=
operator|new
name|TupleWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|has
argument_list|(
name|SOURCES
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|chk
init|=
literal|true
decl_stmt|;
name|int
name|ki
init|=
name|k
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|SOURCES
operator|+
literal|2
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|ki
operator|%
name|i
operator|)
operator|==
literal|0
operator|&&
name|ki
operator|<=
name|i
operator|*
name|ITEMS
condition|)
block|{
name|assertEquals
argument_list|(
name|i
operator|-
literal|2
argument_list|,
operator|(
call|(
name|IntWritable
call|)
argument_list|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|chk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|chk
condition|)
block|{
comment|// present in all sources; chk inner
name|assertTrue
argument_list|(
name|v
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOURCES
condition|;
operator|++
name|i
control|)
name|assertTrue
argument_list|(
operator|(
operator|(
name|TupleWritable
operator|)
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|has
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should not be present in inner join
name|assertFalse
argument_list|(
name|v
operator|.
name|has
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|base
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyJoin ()
specifier|public
name|void
name|testEmptyJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|base
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/empty"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
index|[]
name|src
init|=
block|{
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"i0"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"i1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"i2"
argument_list|)
block|}
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompositeInputFormat
operator|.
name|JOIN_EXPR
argument_list|,
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
literal|"outer"
argument_list|,
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|class
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|MapReduceTestUtil
operator|.
name|Fake_IF
operator|.
name|setKeyClass
argument_list|(
name|conf
argument_list|,
name|MapReduceTestUtil
operator|.
name|IncomparableKey
operator|.
name|class
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|CompositeInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"out"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|MapReduceTestUtil
operator|.
name|IncomparableKey
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

