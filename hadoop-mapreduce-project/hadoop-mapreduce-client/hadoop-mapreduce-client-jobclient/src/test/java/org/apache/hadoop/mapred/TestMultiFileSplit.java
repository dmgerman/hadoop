begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  *   * test MultiFileSplit class  */
end_comment

begin_class
DECL|class|TestMultiFileSplit
specifier|public
class|class
name|TestMultiFileSplit
extends|extends
name|TestCase
block|{
DECL|method|testReadWrite ()
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiFileSplit
name|split
init|=
operator|new
name|MultiFileSplit
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|,
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"/test/path/1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/test/path/2"
argument_list|)
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|100
block|,
literal|200
block|}
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|split
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|bos
argument_list|)
expr_stmt|;
block|}
name|MultiFileSplit
name|readSplit
init|=
operator|new
name|MultiFileSplit
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bis
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|readSplit
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|bis
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|bis
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|split
operator|.
name|getLength
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|split
operator|.
name|getLength
argument_list|()
argument_list|,
name|readSplit
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|split
operator|.
name|getPaths
argument_list|()
argument_list|,
name|readSplit
operator|.
name|getPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|split
operator|.
name|getLengths
argument_list|()
argument_list|,
name|readSplit
operator|.
name|getLengths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test method getLocations      * @throws IOException      */
DECL|method|testgetLocations ()
specifier|public
name|void
name|testgetLocations
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"tempfile"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
index|[]
name|path
init|=
block|{
operator|new
name|Path
argument_list|(
name|tmpFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|long
index|[]
name|lengths
init|=
block|{
literal|100
block|}
decl_stmt|;
name|MultiFileSplit
name|split
init|=
operator|new
name|MultiFileSplit
argument_list|(
name|job
argument_list|,
name|path
argument_list|,
name|lengths
argument_list|)
decl_stmt|;
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locations
index|[
literal|0
index|]
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

