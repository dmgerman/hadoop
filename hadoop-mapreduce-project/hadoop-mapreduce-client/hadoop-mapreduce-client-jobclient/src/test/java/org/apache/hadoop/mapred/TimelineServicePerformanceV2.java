begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
operator|.
name|SleepInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorManager
import|;
end_import

begin_class
DECL|class|TimelineServicePerformanceV2
specifier|public
class|class
name|TimelineServicePerformanceV2
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|NUM_MAPS_DEFAULT
specifier|static
specifier|final
name|int
name|NUM_MAPS_DEFAULT
init|=
literal|1
decl_stmt|;
DECL|field|SIMPLE_ENTITY_WRITER
specifier|static
specifier|final
name|int
name|SIMPLE_ENTITY_WRITER
init|=
literal|1
decl_stmt|;
DECL|field|JOB_HISTORY_FILE_REPLAY_MAPPER
specifier|static
specifier|final
name|int
name|JOB_HISTORY_FILE_REPLAY_MAPPER
init|=
literal|2
decl_stmt|;
DECL|field|mapperType
specifier|static
name|int
name|mapperType
init|=
name|SIMPLE_ENTITY_WRITER
decl_stmt|;
DECL|method|printUsage ()
specifier|protected
specifier|static
name|int
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: [-m<maps>] number of mappers (default: "
operator|+
name|NUM_MAPS_DEFAULT
operator|+
literal|")\n"
operator|+
literal|"     [-mtype<mapper type in integer>]\n"
operator|+
literal|"          1. simple entity write mapper\n"
operator|+
literal|"          2. job history file replay mapper\n"
operator|+
literal|"     [-s<(KBs)test>] number of KB per put (mtype=1, default: "
operator|+
name|SimpleEntityWriter
operator|.
name|KBS_SENT_DEFAULT
operator|+
literal|" KB)\n"
operator|+
literal|"     [-t] package sending iterations per mapper (mtype=1, default: "
operator|+
name|SimpleEntityWriter
operator|.
name|TEST_TIMES_DEFAULT
operator|+
literal|")\n"
operator|+
literal|"     [-d<path>] root path of job history files (mtype=2)\n"
operator|+
literal|"     [-r<replay mode>] (mtype=2)\n"
operator|+
literal|"          1. write all entities for a job in one put (default)\n"
operator|+
literal|"          2. write one entity at a time\n"
argument_list|)
expr_stmt|;
name|GenericOptionsParser
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Configure a job given argv.    */
DECL|method|parseArgs (String[] args, Job job)
specifier|public
specifier|static
name|boolean
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the common defaults
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
name|NUM_MAPS_DEFAULT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
name|i
operator|+
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Required parameter missing from "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|printUsage
argument_list|()
operator|==
literal|0
return|;
block|}
try|try
block|{
if|if
condition|(
literal|"-m"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-mtype"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|mapperType
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-s"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|SimpleEntityWriter
operator|.
name|KBS_SENT
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-t"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|SimpleEntityWriter
operator|.
name|TEST_TIMES
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-d"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|JobHistoryFileReplayMapper
operator|.
name|PROCESSING_PATH
argument_list|,
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-r"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|JobHistoryFileReplayMapper
operator|.
name|REPLAY_MODE
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unexpected argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|printUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|except
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Integer expected instead of "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|printUsage
argument_list|()
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// handle mapper-specific settings
switch|switch
condition|(
name|mapperType
condition|)
block|{
case|case
name|JOB_HISTORY_FILE_REPLAY_MAPPER
case|:
name|job
operator|.
name|setMapperClass
argument_list|(
name|JobHistoryFileReplayMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|processingPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|JobHistoryFileReplayMapper
operator|.
name|PROCESSING_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|processingPath
operator|==
literal|null
operator|||
name|processingPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"processing path is missing while mtype = 2"
argument_list|)
expr_stmt|;
return|return
name|printUsage
argument_list|()
operator|==
literal|0
return|;
block|}
break|break;
case|case
name|SIMPLE_ENTITY_WRITER
case|:
default|default:
name|job
operator|.
name|setMapperClass
argument_list|(
name|SimpleEntityWriter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// use the current timestamp as the "run id" of the test: this will
comment|// be used as simulating the cluster timestamp for apps
name|conf
operator|.
name|setLong
argument_list|(
name|SimpleEntityWriter
operator|.
name|TIMELINE_SERVICE_PERFORMANCE_RUN_ID
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * TimelineServer Performance counters    */
DECL|enum|PerfCounters
specifier|static
enum|enum
name|PerfCounters
block|{
DECL|enumConstant|TIMELINE_SERVICE_WRITE_TIME
name|TIMELINE_SERVICE_WRITE_TIME
block|,
DECL|enumConstant|TIMELINE_SERVICE_WRITE_COUNTER
name|TIMELINE_SERVICE_WRITE_COUNTER
block|,
DECL|enumConstant|TIMELINE_SERVICE_WRITE_FAILURES
name|TIMELINE_SERVICE_WRITE_FAILURES
block|,
DECL|enumConstant|TIMELINE_SERVICE_WRITE_KBS
name|TIMELINE_SERVICE_WRITE_KBS
block|,   }
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TimelineServicePerformanceV2
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SimpleEntityWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SleepInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parseArgs
argument_list|(
name|args
argument_list|,
name|job
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job started: "
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|counters
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|long
name|writetime
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_TIME
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|writecounts
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_COUNTER
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|writesize
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|PerfCounters
operator|.
name|TIMELINE_SERVICE_WRITE_KBS
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|double
name|transacrate
init|=
name|writecounts
operator|*
literal|1000
operator|/
operator|(
name|double
operator|)
name|writetime
decl_stmt|;
name|double
name|iorate
init|=
name|writesize
operator|*
literal|1000
operator|/
operator|(
name|double
operator|)
name|writetime
decl_stmt|;
name|int
name|numMaps
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TRANSACTION RATE (per mapper): "
operator|+
name|transacrate
operator|+
literal|" ops/s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IO RATE (per mapper): "
operator|+
name|iorate
operator|+
literal|" KB/s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TRANSACTION RATE (total): "
operator|+
name|transacrate
operator|*
name|numMaps
operator|+
literal|" ops/s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IO RATE (total): "
operator|+
name|iorate
operator|*
name|numMaps
operator|+
literal|" KB/s"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|TimelineServicePerformanceV2
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|/**    *  To ensure that the compression really gets exercised, generate a    *  random alphanumeric fixed length payload    */
DECL|field|alphaNums
specifier|static
specifier|final
name|char
index|[]
name|alphaNums
init|=
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'l'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'o'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|,
literal|'G'
block|,
literal|'H'
block|,
literal|'I'
block|,
literal|'J'
block|,
literal|'K'
block|,
literal|'L'
block|,
literal|'M'
block|,
literal|'N'
block|,
literal|'O'
block|,
literal|'P'
block|,
literal|'Q'
block|,
literal|'R'
block|,
literal|'S'
block|,
literal|'T'
block|,
literal|'U'
block|,
literal|'V'
block|,
literal|'W'
block|,
literal|'X'
block|,
literal|'Y'
block|,
literal|'Z'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'0'
block|,
literal|' '
block|}
decl_stmt|;
comment|/**    * Base mapper for writing entities to the timeline service. Subclasses    * override {@link #writeEntities(Configuration, TimelineCollectorManager,    * org.apache.hadoop.mapreduce.Mapper.Context)} to create and write entities    * to the timeline service.    */
DECL|class|EntityWriter
specifier|public
specifier|static
specifier|abstract
class|class
name|EntityWriter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|Writable
argument_list|,
name|Writable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map (IntWritable key, IntWritable val, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|IntWritable
name|val
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the timeline collector manager wired with the writer
name|Configuration
name|tlConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|TimelineCollectorManager
name|manager
init|=
operator|new
name|TimelineCollectorManager
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|tlConf
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// invoke the method to have the subclass write entities
name|writeEntities
argument_list|(
name|tlConf
argument_list|,
name|manager
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeEntities (Configuration tlConf, TimelineCollectorManager manager, Context context)
specifier|protected
specifier|abstract
name|void
name|writeEntities
parameter_list|(
name|Configuration
name|tlConf
parameter_list|,
name|TimelineCollectorManager
name|manager
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

