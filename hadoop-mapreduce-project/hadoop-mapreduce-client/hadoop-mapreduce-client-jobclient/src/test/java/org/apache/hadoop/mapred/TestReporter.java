begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests the old mapred APIs with {@link Reporter#getProgress()}.  */
end_comment

begin_class
DECL|class|TestReporter
specifier|public
class|class
name|TestReporter
block|{
DECL|field|rootTempDir
specifier|private
specifier|static
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|testRootTempDir
specifier|private
specifier|static
specifier|final
name|Path
name|testRootTempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestReporter"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testRootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testRootTempDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testRootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// an input with 4 lines
DECL|field|INPUT
specifier|private
specifier|static
specifier|final
name|String
name|INPUT
init|=
literal|"Hi\nHi\nHi\nHi\n"
decl_stmt|;
DECL|field|INPUT_LINES
specifier|private
specifier|static
specifier|final
name|int
name|INPUT_LINES
init|=
name|INPUT
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|ProgressTesterMapper
specifier|static
class|class
name|ProgressTesterMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|progressRange
specifier|private
name|float
name|progressRange
init|=
literal|0
decl_stmt|;
DECL|field|numRecords
specifier|private
name|int
name|numRecords
init|=
literal|0
decl_stmt|;
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// set the progress range accordingly
if|if
condition|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
operator|==
literal|0
condition|)
block|{
name|progressRange
operator|=
literal|1f
expr_stmt|;
block|}
else|else
block|{
name|progressRange
operator|=
literal|0.667f
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
comment|// calculate the actual map progress
name|float
name|mapProgress
init|=
operator|(
operator|(
name|float
operator|)
operator|++
name|numRecords
operator|)
operator|/
name|INPUT_LINES
decl_stmt|;
comment|// calculate the attempt progress based on the progress range
name|float
name|attemptProgress
init|=
name|progressRange
operator|*
name|mapProgress
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress in map"
argument_list|,
name|attemptProgress
argument_list|,
name|reporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|Text
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|+
name|numRecords
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress in map cleanup"
argument_list|,
name|progressRange
argument_list|,
name|reporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatusLimitMapper
specifier|static
class|class
name|StatusLimitMapper
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map (LongWritable key, Text value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|512
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setStatus
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|progressStatusLength
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRConfig
operator|.
name|PROGRESS_STATUS_LEN_LIMIT_KEY
argument_list|,
name|MRConfig
operator|.
name|PROGRESS_STATUS_LEN_LIMIT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getStatus
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|progressStatusLength
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Status is not truncated"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Test {@link Reporter}'s progress for a map-only job.    * This will make sure that only the map phase decides the attempt's progress.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testReporterProgressForMapOnlyJob ()
specifier|public
name|void
name|testReporterProgressForMapOnlyJob
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testReporterProgressForMapOnlyJob"
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|ProgressTesterMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// fail early
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|INPUT
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A {@link Reducer} implementation that checks the progress on every call    * to {@link Reducer#reduce(Object, Iterator, OutputCollector, Reporter)}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|ProgressTestingReducer
specifier|static
class|class
name|ProgressTestingReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|recordCount
specifier|private
name|int
name|recordCount
init|=
literal|0
decl_stmt|;
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
init|=
literal|null
decl_stmt|;
comment|// reduce task has a fixed split of progress amongst copy, shuffle and
comment|// reduce phases.
DECL|field|REDUCE_PROGRESS_RANGE
specifier|private
specifier|final
name|float
name|REDUCE_PROGRESS_RANGE
init|=
literal|1.0f
operator|/
literal|3
decl_stmt|;
DECL|field|SHUFFLE_PROGRESS_RANGE
specifier|private
specifier|final
name|float
name|SHUFFLE_PROGRESS_RANGE
init|=
literal|1
operator|-
name|REDUCE_PROGRESS_RANGE
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|reducePhaseProgress
init|=
operator|(
operator|(
name|float
operator|)
operator|++
name|recordCount
operator|)
operator|/
name|INPUT_LINES
decl_stmt|;
name|float
name|weightedReducePhaseProgress
init|=
name|reducePhaseProgress
operator|*
name|REDUCE_PROGRESS_RANGE
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress in reduce"
argument_list|,
name|SHUFFLE_PROGRESS_RANGE
operator|+
name|weightedReducePhaseProgress
argument_list|,
name|reporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.02f
argument_list|)
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress in reduce cleanup"
argument_list|,
literal|1.0f
argument_list|,
name|reporter
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link Reporter}'s progress for map-reduce job.    */
annotation|@
name|Test
DECL|method|testReporterProgressForMRJob ()
specifier|public
name|void
name|testReporterProgressForMRJob
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testReporterProgressForMRJob"
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|ProgressTesterMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|ProgressTestingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// fail early
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|INPUT
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatusLimit ()
specifier|public
name|void
name|testStatusLimit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|testRootTempDir
argument_list|,
literal|"testStatusLimit"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-"
operator|+
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
literal|"testStatusLimit"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"testStatusLimit"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|StatusLimitMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

