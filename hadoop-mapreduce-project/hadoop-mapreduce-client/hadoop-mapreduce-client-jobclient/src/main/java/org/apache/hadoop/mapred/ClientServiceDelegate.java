begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|LogParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillJobRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ApplicationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_class
DECL|class|ClientServiceDelegate
specifier|public
class|class
name|ClientServiceDelegate
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientServiceDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNAVAILABLE
specifier|private
specifier|static
specifier|final
name|String
name|UNAVAILABLE
init|=
literal|"N/A"
decl_stmt|;
comment|// Caches for per-user NotRunningJobs
DECL|field|notRunningJobs
specifier|private
name|HashMap
argument_list|<
name|JobState
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|NotRunningJob
argument_list|>
argument_list|>
name|notRunningJobs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|jobId
specifier|private
specifier|final
name|JobID
name|jobId
decl_stmt|;
DECL|field|appId
specifier|private
specifier|final
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceMgrDelegate
name|rm
decl_stmt|;
DECL|field|historyServerProxy
specifier|private
specifier|final
name|MRClientProtocol
name|historyServerProxy
decl_stmt|;
DECL|field|realProxy
specifier|private
name|MRClientProtocol
name|realProxy
init|=
literal|null
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|UNKNOWN_USER
specifier|private
specifier|static
name|String
name|UNKNOWN_USER
init|=
literal|"Unknown User"
decl_stmt|;
DECL|field|trackingUrl
specifier|private
name|String
name|trackingUrl
decl_stmt|;
DECL|field|amAclDisabledStatusLogged
specifier|private
name|boolean
name|amAclDisabledStatusLogged
init|=
literal|false
decl_stmt|;
DECL|method|ClientServiceDelegate (Configuration conf, ResourceMgrDelegate rm, JobID jobId, MRClientProtocol historyServerProxy)
specifier|public
name|ClientServiceDelegate
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceMgrDelegate
name|rm
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|MRClientProtocol
name|historyServerProxy
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Cloning for modifying.
comment|// For faster redirects from AM to HS.
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_CLIENT_TO_AM_IPC_MAX_RETRIES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_CLIENT_TO_AM_IPC_MAX_RETRIES
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|historyServerProxy
operator|=
name|historyServerProxy
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|getAppId
argument_list|()
expr_stmt|;
name|notRunningJobs
operator|=
operator|new
name|HashMap
argument_list|<
name|JobState
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|NotRunningJob
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Get the instance of the NotRunningJob corresponding to the specified
comment|// user and state
DECL|method|getNotRunningJob (ApplicationReport applicationReport, JobState state)
specifier|private
name|NotRunningJob
name|getNotRunningJob
parameter_list|(
name|ApplicationReport
name|applicationReport
parameter_list|,
name|JobState
name|state
parameter_list|)
block|{
synchronized|synchronized
init|(
name|notRunningJobs
init|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|NotRunningJob
argument_list|>
name|map
init|=
name|notRunningJobs
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NotRunningJob
argument_list|>
argument_list|()
expr_stmt|;
name|notRunningJobs
operator|.
name|put
argument_list|(
name|state
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
operator|(
name|applicationReport
operator|==
literal|null
operator|)
condition|?
name|UNKNOWN_USER
else|:
name|applicationReport
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|NotRunningJob
name|notRunningJob
init|=
name|map
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|notRunningJob
operator|==
literal|null
condition|)
block|{
name|notRunningJob
operator|=
operator|new
name|NotRunningJob
argument_list|(
name|applicationReport
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|notRunningJob
argument_list|)
expr_stmt|;
block|}
return|return
name|notRunningJob
return|;
block|}
block|}
DECL|method|getProxy ()
specifier|private
name|MRClientProtocol
name|getProxy
parameter_list|()
throws|throws
name|YarnRemoteException
block|{
if|if
condition|(
name|realProxy
operator|!=
literal|null
condition|)
block|{
return|return
name|realProxy
return|;
block|}
comment|// Possibly allow nulls through the PB tunnel, otherwise deal with an exception
comment|// and redirect to the history server.
name|ApplicationReport
name|application
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|trackingUrl
operator|=
name|application
operator|.
name|getTrackingUrl
argument_list|()
expr_stmt|;
block|}
name|String
name|serviceAddr
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|application
operator|==
literal|null
operator|||
name|YarnApplicationState
operator|.
name|RUNNING
operator|==
name|application
operator|.
name|getYarnApplicationState
argument_list|()
condition|)
block|{
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not get Job info from RM for job "
operator|+
name|jobId
operator|+
literal|". Redirecting to job history server."
argument_list|)
expr_stmt|;
return|return
name|checkAndGetHSProxy
argument_list|(
literal|null
argument_list|,
name|JobState
operator|.
name|NEW
argument_list|)
return|;
block|}
try|try
block|{
if|if
condition|(
name|application
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AM not assigned to Job. Waiting to get the AM ..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application state is "
operator|+
name|application
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|UNAVAILABLE
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|amAclDisabledStatusLogged
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is running, but the host is unknown."
operator|+
literal|" Verify user has VIEW_JOB access."
argument_list|)
expr_stmt|;
name|amAclDisabledStatusLogged
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|getNotRunningJob
argument_list|(
name|application
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_AM_ACCESS_DISABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|UserGroupInformation
name|newUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|serviceAddr
operator|=
name|application
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|application
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|clientTokenEncoded
init|=
name|application
operator|.
name|getClientToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
name|clientToken
init|=
operator|new
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|clientToken
operator|.
name|decodeFromUrlString
argument_list|(
name|clientTokenEncoded
argument_list|)
expr_stmt|;
comment|// RPC layer client expects ip:port as service for tokens
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|application
operator|.
name|getHost
argument_list|()
argument_list|,
name|application
operator|.
name|getRpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|clientToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newUgi
operator|.
name|addToken
argument_list|(
name|clientToken
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
specifier|final
name|String
name|tempStr
init|=
name|serviceAddr
decl_stmt|;
name|realProxy
operator|=
name|newUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|MRClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MRClientProtocol
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|instantiateAMProxy
argument_list|(
name|tempStr
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|amAclDisabledStatusLogged
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Network ACL closed to AM for job "
operator|+
name|jobId
operator|+
literal|". Not going to try to reach the AM."
argument_list|)
expr_stmt|;
name|amAclDisabledStatusLogged
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|getNotRunningJob
argument_list|(
literal|null
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
return|;
block|}
return|return
name|realProxy
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//possibly the AM has crashed
comment|//there may be some time before AM is restarted
comment|//keep retrying by getting the address from RM
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|serviceAddr
operator|+
literal|". Waiting for getting the latest AM address..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"getProxy() call interruped"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
name|application
operator|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not get Job info from RM for job "
operator|+
name|jobId
operator|+
literal|". Redirecting to job history server."
argument_list|)
expr_stmt|;
return|return
name|checkAndGetHSProxy
argument_list|(
literal|null
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"getProxy() call interruped"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** we just want to return if its allocating, so that we don't      * block on it. This is to be able to return job status      * on an allocating Application.      */
name|String
name|user
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"User is not set in the application report"
argument_list|)
throw|;
block|}
if|if
condition|(
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|NEW
operator|||
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|SUBMITTED
condition|)
block|{
name|realProxy
operator|=
literal|null
expr_stmt|;
return|return
name|getNotRunningJob
argument_list|(
name|application
argument_list|,
name|JobState
operator|.
name|NEW
argument_list|)
return|;
block|}
if|if
condition|(
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FAILED
condition|)
block|{
name|realProxy
operator|=
literal|null
expr_stmt|;
return|return
name|getNotRunningJob
argument_list|(
name|application
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
return|;
block|}
if|if
condition|(
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
condition|)
block|{
name|realProxy
operator|=
literal|null
expr_stmt|;
return|return
name|getNotRunningJob
argument_list|(
name|application
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|)
return|;
block|}
comment|//History server can serve a job only if application
comment|//succeeded.
if|if
condition|(
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application state is completed. FinalApplicationStatus="
operator|+
name|application
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|". Redirecting to job history server"
argument_list|)
expr_stmt|;
name|realProxy
operator|=
name|checkAndGetHSProxy
argument_list|(
name|application
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
return|return
name|realProxy
return|;
block|}
DECL|method|checkAndGetHSProxy ( ApplicationReport applicationReport, JobState state)
specifier|private
name|MRClientProtocol
name|checkAndGetHSProxy
parameter_list|(
name|ApplicationReport
name|applicationReport
parameter_list|,
name|JobState
name|state
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|historyServerProxy
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job History Server is not configured."
argument_list|)
expr_stmt|;
return|return
name|getNotRunningJob
argument_list|(
name|applicationReport
argument_list|,
name|state
argument_list|)
return|;
block|}
return|return
name|historyServerProxy
return|;
block|}
DECL|method|instantiateAMProxy (final String serviceAddr)
name|MRClientProtocol
name|instantiateAMProxy
parameter_list|(
specifier|final
name|String
name|serviceAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting to ApplicationMaster at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|proxy
init|=
operator|(
name|MRClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|serviceAddr
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connected to ApplicationMaster at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
DECL|method|invoke (String method, Class argClass, Object args)
specifier|private
specifier|synchronized
name|Object
name|invoke
parameter_list|(
name|String
name|method
parameter_list|,
name|Class
name|argClass
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|Method
name|methodOb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|methodOb
operator|=
name|MRClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|method
argument_list|,
name|argClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Method name mismatch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|methodOb
operator|.
name|invoke
argument_list|(
name|getProxy
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception thrown by remote end."
argument_list|,
name|yre
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|YarnRemoteException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error from remote end: "
operator|+
name|e
operator|.
name|getTargetException
argument_list|()
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tracing remote error "
argument_list|,
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|YarnRemoteException
operator|)
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact AM/History for job "
operator|+
name|jobId
operator|+
literal|" retrying.."
argument_list|,
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force reconnection by setting the proxy to null.
name|realProxy
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact AM/History for job "
operator|+
name|jobId
operator|+
literal|"  Will retry.."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Force reconnection by setting the proxy to null.
name|realProxy
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|getJobCounters (JobID arg0)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|getJobCounters
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|GetCountersRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetCountersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|Counters
name|cnt
init|=
operator|(
operator|(
name|GetCountersResponse
operator|)
name|invoke
argument_list|(
literal|"getCounters"
argument_list|,
name|GetCountersRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getCounters
argument_list|()
decl_stmt|;
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|cnt
argument_list|)
return|;
block|}
DECL|method|getTaskCompletionEvents (JobID arg0, int arg1, int arg2)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|GetTaskAttemptCompletionEventsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptCompletionEventsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFromEventId
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxEvents
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
argument_list|>
name|list
init|=
operator|(
operator|(
name|GetTaskAttemptCompletionEventsResponse
operator|)
name|invoke
argument_list|(
literal|"getTaskAttemptCompletionEvents"
argument_list|,
name|GetTaskAttemptCompletionEventsRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getCompletionEventList
argument_list|()
decl_stmt|;
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTaskDiagnostics (org.apache.hadoop.mapreduce.TaskAttemptID arg0)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|GetDiagnosticsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDiagnosticsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|(
operator|(
name|GetDiagnosticsResponse
operator|)
name|invoke
argument_list|(
literal|"getDiagnostics"
argument_list|,
name|GetDiagnosticsRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getDiagnosticsList
argument_list|()
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|list
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|c
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getJobStatus (JobID oldJobID)
specifier|public
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobID
name|oldJobID
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|GetJobReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|JobReport
name|report
init|=
operator|(
operator|(
name|GetJobReportResponse
operator|)
name|invoke
argument_list|(
literal|"getJobReport"
argument_list|,
name|GetJobReportRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getJobReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|report
operator|.
name|getJobFile
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|jobFile
init|=
name|MRApps
operator|.
name|getJobFile
argument_list|(
name|conf
argument_list|,
name|report
operator|.
name|getUser
argument_list|()
argument_list|,
name|oldJobID
argument_list|)
decl_stmt|;
name|report
operator|.
name|setJobFile
argument_list|(
name|jobFile
argument_list|)
expr_stmt|;
block|}
name|String
name|historyTrackingUrl
init|=
name|report
operator|.
name|getTrackingUrl
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|historyTrackingUrl
argument_list|)
condition|?
name|historyTrackingUrl
else|:
name|trackingUrl
decl_stmt|;
if|if
condition|(
operator|!
name|UNAVAILABLE
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"http://"
operator|+
name|url
expr_stmt|;
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|report
argument_list|,
name|url
argument_list|)
return|;
block|}
DECL|method|getTaskReports (JobID oldJobID, TaskType taskType)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|JobID
name|oldJobID
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|GetTaskReportsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskType
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskType
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
argument_list|>
name|taskReports
init|=
operator|(
operator|(
name|GetTaskReportsResponse
operator|)
name|invoke
argument_list|(
literal|"getTaskReports"
argument_list|,
name|GetTaskReportsRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getTaskReportList
argument_list|()
decl_stmt|;
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskReports
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|killTask (TaskAttemptID taskAttemptID, boolean fail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|,
name|boolean
name|fail
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskAttemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
name|FailTaskAttemptRequest
name|failRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|FailTaskAttemptRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|failRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
literal|"failTaskAttempt"
argument_list|,
name|FailTaskAttemptRequest
operator|.
name|class
argument_list|,
name|failRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|KillTaskAttemptRequest
name|killRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|KillTaskAttemptRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|killRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
literal|"killTaskAttempt"
argument_list|,
name|KillTaskAttemptRequest
operator|.
name|class
argument_list|,
name|killRequest
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|killJob (JobID oldJobID)
specifier|public
name|boolean
name|killJob
parameter_list|(
name|JobID
name|oldJobID
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|KillJobRequest
name|killRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|KillJobRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|killRequest
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
literal|"killJob"
argument_list|,
name|KillJobRequest
operator|.
name|class
argument_list|,
name|killRequest
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|getLogFilePath (JobID oldJobID, TaskAttemptID oldTaskAttemptID)
specifier|public
name|LogParams
name|getLogFilePath
parameter_list|(
name|JobID
name|oldJobID
parameter_list|,
name|TaskAttemptID
name|oldTaskAttemptID
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|GetJobReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|JobReport
name|report
init|=
operator|(
operator|(
name|GetJobReportResponse
operator|)
name|invoke
argument_list|(
literal|"getJobReport"
argument_list|,
name|GetJobReportRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
operator|)
operator|.
name|getJobReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|)
operator|.
name|contains
argument_list|(
name|report
operator|.
name|getJobState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldTaskAttemptID
operator|!=
literal|null
condition|)
block|{
name|GetTaskAttemptReportRequest
name|taRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|taRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldTaskAttemptID
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptReport
name|taReport
init|=
operator|(
operator|(
name|GetTaskAttemptReportResponse
operator|)
name|invoke
argument_list|(
literal|"getTaskAttemptReport"
argument_list|,
name|GetTaskAttemptReportRequest
operator|.
name|class
argument_list|,
name|taRequest
argument_list|)
operator|)
operator|.
name|getTaskAttemptReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|taReport
operator|.
name|getContainerId
argument_list|()
operator|==
literal|null
operator|||
name|taReport
operator|.
name|getNodeManagerHost
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get log information for task: "
operator|+
name|oldTaskAttemptID
argument_list|)
throw|;
block|}
return|return
operator|new
name|LogParams
argument_list|(
name|taReport
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taReport
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
name|taReport
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|,
name|taReport
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|report
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|report
operator|.
name|getAMInfos
argument_list|()
operator|==
literal|null
operator|||
name|report
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get log information for job: "
operator|+
name|oldJobID
argument_list|)
throw|;
block|}
name|AMInfo
name|amInfo
init|=
name|report
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
name|report
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|LogParams
argument_list|(
name|amInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
name|amInfo
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|,
name|amInfo
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|report
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot get log path for a in-progress job"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

