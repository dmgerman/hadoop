begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueAclsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskTrackerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|MRConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_comment
comment|/**  * This class enables the current JobClient (0.22 hadoop) to run on YARN.  */
end_comment

begin_class
DECL|class|YARNRunner
specifier|public
class|class
name|YARNRunner
implements|implements
name|ClientProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|YARNRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|resMgrDelegate
specifier|private
name|ResourceMgrDelegate
name|resMgrDelegate
decl_stmt|;
DECL|field|clientCache
specifier|private
name|ClientCache
name|clientCache
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|defaultFileContext
specifier|private
specifier|final
name|FileContext
name|defaultFileContext
decl_stmt|;
comment|/**    * Yarn runner incapsulates the client interface of    * yarn    * @param conf the configuration object for the client    */
DECL|method|YARNRunner (Configuration conf)
specifier|public
name|YARNRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|ResourceMgrDelegate
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to {@link #YARNRunner(Configuration)} but allowing injecting     * {@link ResourceMgrDelegate}. Enables mocking and testing.    * @param conf the configuration object for the client    * @param resMgrDelegate the resourcemanager client handle.    */
DECL|method|YARNRunner (Configuration conf, ResourceMgrDelegate resMgrDelegate)
specifier|public
name|YARNRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceMgrDelegate
name|resMgrDelegate
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|resMgrDelegate
operator|=
name|resMgrDelegate
expr_stmt|;
name|this
operator|.
name|clientCache
operator|=
operator|new
name|ClientCache
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|resMgrDelegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultFileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|ufe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in instantiating YarnClient"
argument_list|,
name|ufe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> arg0)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|resMgrDelegate
operator|.
name|cancelDelegationToken
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActiveTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getActiveTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getActiveTrackers
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|JobStatus
index|[]
name|getAllJobs
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getAllJobs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistedTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getBlacklistedTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getBlacklistedTrackers
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ()
specifier|public
name|ClusterMetrics
name|getClusterMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getClusterMetrics
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (Text arg0)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getDelegationToken
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFilesystemName ()
specifier|public
name|String
name|getFilesystemName
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getFilesystemName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNewJobID ()
specifier|public
name|JobID
name|getNewJobID
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getNewJobID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueue (String queueName)
specifier|public
name|QueueInfo
name|getQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAclsForCurrentUser ()
specifier|public
name|QueueAclsInfo
index|[]
name|getQueueAclsForCurrentUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueueAclsForCurrentUser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueues ()
specifier|public
name|QueueInfo
index|[]
name|getQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueues ()
specifier|public
name|QueueInfo
index|[]
name|getRootQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getRootQueues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues (String parent)
specifier|public
name|QueueInfo
index|[]
name|getChildQueues
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getChildQueues
argument_list|(
name|parent
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStagingAreaDir ()
specifier|public
name|String
name|getStagingAreaDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getStagingAreaDir
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSystemDir ()
specifier|public
name|String
name|getSystemDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getSystemDir
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskTrackerExpiryInterval ()
specifier|public
name|long
name|getTaskTrackerExpiryInterval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getTaskTrackerExpiryInterval
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|submitJob (JobID jobId, String jobSubmitDir, Credentials ts)
specifier|public
name|JobStatus
name|submitJob
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Upload only in security mode: TODO
name|Path
name|applicationTokensFile
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRConstants
operator|.
name|APPLICATION_TOKENS_FILE
argument_list|)
decl_stmt|;
try|try
block|{
name|ts
operator|.
name|writeTokenStorageFile
argument_list|(
name|applicationTokensFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// XXX Remove
name|Path
name|submitJobDir
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|)
decl_stmt|;
name|FileContext
name|defaultFS
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|submitJobFile
init|=
name|defaultFS
operator|.
name|makeQualified
argument_list|(
name|JobSubmissionFiles
operator|.
name|getJobConfPath
argument_list|(
name|submitJobDir
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|defaultFS
operator|.
name|open
argument_list|(
name|submitJobFile
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// ---
comment|// Construct necessary information to start the MR AM
name|ApplicationSubmissionContext
name|appContext
init|=
name|createApplicationSubmissionContext
argument_list|(
name|conf
argument_list|,
name|jobSubmitDir
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|appContext
argument_list|)
expr_stmt|;
comment|// XXX Remove
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ---
comment|// Submit to ResourceManager
name|ApplicationId
name|applicationId
init|=
name|resMgrDelegate
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appMaster
init|=
name|resMgrDelegate
operator|.
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appMaster
operator|==
literal|null
operator|||
name|appMaster
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|FAILED
operator|||
name|appMaster
operator|.
name|getState
argument_list|()
operator|==
name|ApplicationState
operator|.
name|KILLED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to run job : "
operator|+
name|appMaster
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobId
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|jobId
argument_list|)
return|;
block|}
DECL|method|createApplicationResource (FileContext fs, Path p)
specifier|private
name|LocalResource
name|createApplicationResource
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalResource
name|rsrc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileStatus
name|rsrcStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|rsrc
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|fs
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|rsrcStat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setSize
argument_list|(
name|rsrcStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setTimestamp
argument_list|(
name|rsrcStat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
return|return
name|rsrc
return|;
block|}
DECL|method|createApplicationSubmissionContext ( Configuration jobConf, String jobSubmitDir, Credentials ts)
specifier|public
name|ApplicationSubmissionContext
name|createApplicationSubmissionContext
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationSubmissionContext
name|appContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|resMgrDelegate
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|capability
operator|.
name|setMemory
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_VMEM_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_VMEM_MB
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AppMaster capability = "
operator|+
name|capability
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setMasterCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|Path
name|jobConfPath
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRConstants
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
name|URL
name|yarnUrlForJobSubmitDir
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|defaultFileContext
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|defaultFileContext
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating setup context, jobSubmitDir url is "
operator|+
name|yarnUrlForJobSubmitDir
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|MRConstants
operator|.
name|JOB_SUBMIT_DIR
argument_list|,
name|yarnUrlForJobSubmitDir
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResourceTodo
argument_list|(
name|MRConstants
operator|.
name|JOB_CONF_FILE
argument_list|,
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
name|jobConfPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|appContext
operator|.
name|setResourceTodo
argument_list|(
name|MRConstants
operator|.
name|JOB_JAR
argument_list|,
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRConstants
operator|.
name|JOB_JAR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Job jar may be null. For e.g, for pipes, the job jar is the hadoop
comment|// mapreduce jar itself which is already on the classpath.
name|LOG
operator|.
name|info
argument_list|(
literal|"Job jar is not present. "
operator|+
literal|"Not adding any jar to the list of resources."
argument_list|)
expr_stmt|;
block|}
comment|// TODO gross hack
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"job.split"
block|,
literal|"job.splitmetainfo"
block|,
name|MRConstants
operator|.
name|APPLICATION_TOKENS_FILE
block|}
control|)
block|{
name|appContext
operator|.
name|setResourceTodo
argument_list|(
name|MRConstants
operator|.
name|JOB_SUBMIT_DIR
operator|+
literal|"/"
operator|+
name|s
argument_list|,
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Only if security is on.
name|List
argument_list|<
name|String
argument_list|>
name|fsTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|ts
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|fsTokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO - Remove this!
name|appContext
operator|.
name|addAllFsTokens
argument_list|(
name|fsTokens
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setFsTokensTodo
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add queue information
name|appContext
operator|.
name|setQueue
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|QUEUE_NAME
argument_list|,
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add job name
name|appContext
operator|.
name|setApplicationName
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|JOB_NAME
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the command line
name|String
name|javaHome
init|=
literal|"$JAVA_HOME"
decl_stmt|;
name|Vector
argument_list|<
name|CharSequence
argument_list|>
name|vargs
init|=
operator|new
name|Vector
argument_list|<
name|CharSequence
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|javaHome
operator|+
literal|"/bin/java"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logger="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_OPTS
argument_list|)
operator|+
literal|",console"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_COMMAND_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_COMMAND_OPTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add { job jar, MR app jar } to classpath.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//    appContext.environment = new HashMap<CharSequence, CharSequence>();
name|MRApps
operator|.
name|setInitialClasspath
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|MRConstants
operator|.
name|JOB_JAR
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|MRConstants
operator|.
name|YARN_MAPREDUCE_APP_JAR_PATH
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|addAllEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.mapreduce.v2.app.MRAppMaster"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|applicationId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|applicationId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|ApplicationConstants
operator|.
name|AM_FAIL_COUNT_STRING
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/stdout"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/stderr"
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|vargsFinal
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
comment|// Final commmand
name|StringBuilder
name|mergedCommand
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CharSequence
name|str
range|:
name|vargs
control|)
block|{
name|mergedCommand
operator|.
name|append
argument_list|(
name|str
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|vargsFinal
operator|.
name|add
argument_list|(
name|mergedCommand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Command to launch container for ApplicationMaster is : "
operator|+
name|mergedCommand
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|addAllCommands
argument_list|(
name|vargsFinal
argument_list|)
expr_stmt|;
comment|// TODO: RM should get this from RPC.
name|appContext
operator|.
name|setUser
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appContext
return|;
block|}
comment|/**    *    * TODO: Copied for now from TaskAttemptImpl.java ... fixme    * @param strs    * @return    */
DECL|method|parseTimeStamps (String[] strs)
specifier|private
specifier|static
name|long
index|[]
name|parseTimeStamps
parameter_list|(
name|String
index|[]
name|strs
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|strs
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|strs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * TODO: Copied for now from TaskAttemptImpl.java ... fixme    *     * TODO: This is currently needed in YarnRunner as user code like setupJob,    * cleanupJob may need access to dist-cache. Once we separate distcache for    * maps, reduces, setup etc, this can include only a subset of artificats.    * This is also needed for uberAM case where we run everything inside AM.    */
DECL|method|setupDistributedCache (Configuration conf, ApplicationSubmissionContext container)
specifier|private
name|void
name|setupDistributedCache
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationSubmissionContext
name|container
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Cache archives
name|parseDistributedCacheArtifacts
argument_list|(
name|conf
argument_list|,
name|container
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|DistributedCache
operator|.
name|getCacheArchives
argument_list|(
name|conf
argument_list|)
argument_list|,
name|parseTimeStamps
argument_list|(
name|DistributedCache
operator|.
name|getArchiveTimestamps
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|getFileSizes
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_SIZES
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getArchiveVisibilities
argument_list|(
name|conf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getArchiveClassPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache files
name|parseDistributedCacheArtifacts
argument_list|(
name|conf
argument_list|,
name|container
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|conf
argument_list|)
argument_list|,
name|parseTimeStamps
argument_list|(
name|DistributedCache
operator|.
name|getFileTimestamps
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|getFileSizes
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getFileVisibilities
argument_list|(
name|conf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getFileClassPaths
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO - Move this to MR!
comment|// Use TaskDistributedCacheManager.CacheFiles.makeCacheFiles(URI[], long[], boolean[], Path[], FileType)
DECL|method|parseDistributedCacheArtifacts (Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath)
specifier|private
name|void
name|parseDistributedCacheArtifacts
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationSubmissionContext
name|container
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|URI
index|[]
name|uris
parameter_list|,
name|long
index|[]
name|timestamps
parameter_list|,
name|long
index|[]
name|sizes
parameter_list|,
name|boolean
name|visibilities
index|[]
parameter_list|,
name|Path
index|[]
name|pathsToPutOnClasspath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
comment|// Sanity check
if|if
condition|(
operator|(
name|uris
operator|.
name|length
operator|!=
name|timestamps
operator|.
name|length
operator|)
operator|||
operator|(
name|uris
operator|.
name|length
operator|!=
name|sizes
operator|.
name|length
operator|)
operator|||
operator|(
name|uris
operator|.
name|length
operator|!=
name|visibilities
operator|.
name|length
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid specification for "
operator|+
literal|"distributed-cache artifacts of type "
operator|+
name|type
operator|+
literal|" :"
operator|+
literal|" #uris="
operator|+
name|uris
operator|.
name|length
operator|+
literal|" #timestamps="
operator|+
name|timestamps
operator|.
name|length
operator|+
literal|" #visibilities="
operator|+
name|visibilities
operator|.
name|length
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|classPaths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathsToPutOnClasspath
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|pathsToPutOnClasspath
control|)
block|{
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|p
operator|=
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|classPaths
operator|.
name|put
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|URI
name|u
init|=
name|uris
index|[
name|i
index|]
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|p
operator|=
name|fs
operator|.
name|resolvePath
argument_list|(
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add URI fragment or just the filename
name|Path
name|name
init|=
operator|new
name|Path
argument_list|(
operator|(
literal|null
operator|==
name|u
operator|.
name|getFragment
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getName
argument_list|()
else|:
name|u
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource name must be relative"
argument_list|)
throw|;
block|}
name|String
name|linkName
init|=
name|name
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|container
operator|.
name|setResourceTodo
argument_list|(
name|linkName
argument_list|,
name|createLocalResource
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|,
name|type
argument_list|,
name|visibilities
index|[
name|i
index|]
condition|?
name|LocalResourceVisibility
operator|.
name|PUBLIC
else|:
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
name|timestamps
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|classPaths
operator|.
name|containsKey
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|container
operator|.
name|getAllEnvironment
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|linkName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TODO - Move this to MR!
DECL|method|getFileSizes (Configuration conf, String key)
specifier|private
specifier|static
name|long
index|[]
name|getFileSizes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|strs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|strs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createLocalResource (URI uri, LocalResourceType type, LocalResourceVisibility visibility, long size, long timestamp)
specifier|private
name|LocalResource
name|createLocalResource
parameter_list|(
name|URI
name|uri
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|visibility
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalResource
name|resource
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromURI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVisibility
argument_list|(
name|visibility
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
annotation|@
name|Override
DECL|method|setJobPriority (JobID arg0, String arg1)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|resMgrDelegate
operator|.
name|setJobPriority
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String arg0, long arg1)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|arg0
parameter_list|,
name|long
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resMgrDelegate
operator|.
name|getProtocolVersion
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> arg0)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|renewDelegationToken
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobCounters (JobID arg0)
specifier|public
name|Counters
name|getJobCounters
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getJobCounters
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobHistoryDir ()
specifier|public
name|String
name|getJobHistoryDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryServerDoneDirPrefix
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobStatus (JobID jobID)
specifier|public
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobID
name|jobID
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|JobStatus
name|status
init|=
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobID
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskCompletionEvents (JobID arg0, int arg1, int arg2)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getTaskCompletionEvents
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskDiagnostics (TaskAttemptID arg0)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|TaskAttemptID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|getTaskDiagnostics
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskReports (JobID jobID, TaskType taskType)
specifier|public
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|JobID
name|jobID
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobID
argument_list|)
operator|.
name|getTaskReports
argument_list|(
name|jobID
argument_list|,
name|taskType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|killJob (JobID arg0)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|killJob
argument_list|(
name|arg0
argument_list|)
condition|)
block|{
name|resMgrDelegate
operator|.
name|killApplication
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID arg0, boolean arg1)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|arg0
parameter_list|,
name|boolean
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|killTask
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAdmins (String arg0)
specifier|public
name|AccessControlList
name|getQueueAdmins
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobTrackerStatus ()
specifier|public
name|JobTrackerStatus
name|getJobTrackerStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|JobTrackerStatus
operator|.
name|RUNNING
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
block|}
end_class

end_unit

