begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueAclsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskTrackerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|LogParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class enables the current JobClient (0.22 hadoop) to run on YARN.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|YARNRunner
specifier|public
class|class
name|YARNRunner
implements|implements
name|ClientProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|YARNRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|resMgrDelegate
specifier|private
name|ResourceMgrDelegate
name|resMgrDelegate
decl_stmt|;
DECL|field|clientCache
specifier|private
name|ClientCache
name|clientCache
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|defaultFileContext
specifier|private
specifier|final
name|FileContext
name|defaultFileContext
decl_stmt|;
comment|/**    * Yarn runner incapsulates the client interface of    * yarn    * @param conf the configuration object for the client    */
DECL|method|YARNRunner (Configuration conf)
specifier|public
name|YARNRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|ResourceMgrDelegate
argument_list|(
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to {@link #YARNRunner(Configuration)} but allowing injecting    * {@link ResourceMgrDelegate}. Enables mocking and testing.    * @param conf the configuration object for the client    * @param resMgrDelegate the resourcemanager client handle.    */
DECL|method|YARNRunner (Configuration conf, ResourceMgrDelegate resMgrDelegate)
specifier|public
name|YARNRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceMgrDelegate
name|resMgrDelegate
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|resMgrDelegate
argument_list|,
operator|new
name|ClientCache
argument_list|(
name|conf
argument_list|,
name|resMgrDelegate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to {@link YARNRunner#YARNRunner(Configuration, ResourceMgrDelegate)}    * but allowing injecting {@link ClientCache}. Enable mocking and testing.    * @param conf the configuration object    * @param resMgrDelegate the resource manager delegate    * @param clientCache the client cache object.    */
DECL|method|YARNRunner (Configuration conf, ResourceMgrDelegate resMgrDelegate, ClientCache clientCache)
specifier|public
name|YARNRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceMgrDelegate
name|resMgrDelegate
parameter_list|,
name|ClientCache
name|clientCache
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
try|try
block|{
name|this
operator|.
name|resMgrDelegate
operator|=
name|resMgrDelegate
expr_stmt|;
name|this
operator|.
name|clientCache
operator|=
name|clientCache
expr_stmt|;
name|this
operator|.
name|defaultFileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|ufe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in instantiating YarnClient"
argument_list|,
name|ufe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Private
comment|/**    * Used for testing mostly.    * @param resMgrDelegate the resource manager delegate to set to.    */
DECL|method|setResourceMgrDelegate (ResourceMgrDelegate resMgrDelegate)
specifier|public
name|void
name|setResourceMgrDelegate
parameter_list|(
name|ResourceMgrDelegate
name|resMgrDelegate
parameter_list|)
block|{
name|this
operator|.
name|resMgrDelegate
operator|=
name|resMgrDelegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> arg0)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Use Token.renew instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getActiveTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getActiveTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getActiveTrackers
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|JobStatus
index|[]
name|getAllJobs
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getAllJobs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistedTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getBlacklistedTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getBlacklistedTrackers
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ()
specifier|public
name|ClusterMetrics
name|getClusterMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getClusterMetrics
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addHistoryToken (Credentials ts)
name|void
name|addHistoryToken
parameter_list|(
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|/* check if we have a hsproxy, if not, no need */
name|MRClientProtocol
name|hsProxy
init|=
name|clientCache
operator|.
name|getInitializedHSProxy
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|(
name|hsProxy
operator|!=
literal|null
operator|)
condition|)
block|{
comment|/*        * note that get delegation token was called. Again this is hack for oozie        * to make sure we add history server delegation tokens to the credentials        */
name|RMDelegationTokenSelector
name|tokenSelector
init|=
operator|new
name|RMDelegationTokenSelector
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
name|resMgrDelegate
operator|.
name|getRMDelegationTokenService
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenSelector
operator|.
name|selectToken
argument_list|(
name|service
argument_list|,
name|ts
operator|.
name|getAllTokens
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Text
name|hsService
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|hsProxy
operator|.
name|getConnectAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|.
name|getToken
argument_list|(
name|hsService
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ts
operator|.
name|addToken
argument_list|(
name|hsService
argument_list|,
name|getDelegationTokenFromHS
argument_list|(
name|hsProxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDelegationTokenFromHS (MRClientProtocol hsProxy)
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationTokenFromHS
parameter_list|(
name|MRClientProtocol
name|hsProxy
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|GetDelegationTokenRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRenewer
argument_list|(
name|Master
operator|.
name|getMasterPrincipal
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|mrDelegationToken
decl_stmt|;
name|mrDelegationToken
operator|=
name|hsProxy
operator|.
name|getDelegationToken
argument_list|(
name|request
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
return|return
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|mrDelegationToken
argument_list|,
name|hsProxy
operator|.
name|getConnectAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// The token is only used for serialization. So the type information
comment|// mismatch should be fine.
return|return
name|resMgrDelegate
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFilesystemName ()
specifier|public
name|String
name|getFilesystemName
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getFilesystemName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNewJobID ()
specifier|public
name|JobID
name|getNewJobID
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getNewJobID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueue (String queueName)
specifier|public
name|QueueInfo
name|getQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAclsForCurrentUser ()
specifier|public
name|QueueAclsInfo
index|[]
name|getQueueAclsForCurrentUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueueAclsForCurrentUser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueues ()
specifier|public
name|QueueInfo
index|[]
name|getQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getQueues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueues ()
specifier|public
name|QueueInfo
index|[]
name|getRootQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getRootQueues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues (String parent)
specifier|public
name|QueueInfo
index|[]
name|getChildQueues
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getChildQueues
argument_list|(
name|parent
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStagingAreaDir ()
specifier|public
name|String
name|getStagingAreaDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getStagingAreaDir
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSystemDir ()
specifier|public
name|String
name|getSystemDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getSystemDir
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskTrackerExpiryInterval ()
specifier|public
name|long
name|getTaskTrackerExpiryInterval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|resMgrDelegate
operator|.
name|getTaskTrackerExpiryInterval
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|submitJob (JobID jobId, String jobSubmitDir, Credentials ts)
specifier|public
name|JobStatus
name|submitJob
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|addHistoryToken
argument_list|(
name|ts
argument_list|)
expr_stmt|;
comment|// Construct necessary information to start the MR AM
name|ApplicationSubmissionContext
name|appContext
init|=
name|createApplicationSubmissionContext
argument_list|(
name|conf
argument_list|,
name|jobSubmitDir
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// Submit to ResourceManager
try|try
block|{
name|ApplicationId
name|applicationId
init|=
name|resMgrDelegate
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appMaster
init|=
name|resMgrDelegate
operator|.
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|String
name|diagnostics
init|=
operator|(
name|appMaster
operator|==
literal|null
condition|?
literal|"application report is null"
else|:
name|appMaster
operator|.
name|getDiagnostics
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|appMaster
operator|==
literal|null
operator|||
name|appMaster
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FAILED
operator|||
name|appMaster
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to run job : "
operator|+
name|diagnostics
argument_list|)
throw|;
block|}
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobId
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|jobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createApplicationResource (FileContext fs, Path p, LocalResourceType type)
specifier|private
name|LocalResource
name|createApplicationResource
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|LocalResourceType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalResource
name|rsrc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileStatus
name|rsrcStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|rsrc
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|fs
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|rsrcStat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setSize
argument_list|(
name|rsrcStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setTimestamp
argument_list|(
name|rsrcStat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|rsrc
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
return|return
name|rsrc
return|;
block|}
DECL|method|createApplicationSubmissionContext ( Configuration jobConf, String jobSubmitDir, Credentials ts)
specifier|public
name|ApplicationSubmissionContext
name|createApplicationSubmissionContext
parameter_list|(
name|Configuration
name|jobConf
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|applicationId
init|=
name|resMgrDelegate
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Setup resource requirements
name|Resource
name|capability
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|capability
operator|.
name|setMemory
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_VMEM_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_VMEM_MB
argument_list|)
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_CPU_VCORES
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"AppMaster capability = "
operator|+
name|capability
argument_list|)
expr_stmt|;
comment|// Setup LocalResources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|jobConfPath
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
name|URL
name|yarnUrlForJobSubmitDir
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|defaultFileContext
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|resolvePath
argument_list|(
name|defaultFileContext
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating setup context, jobSubmitDir url is "
operator|+
name|yarnUrlForJobSubmitDir
argument_list|)
expr_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|,
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
name|jobConfPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Path
name|jobJarPath
init|=
operator|new
name|Path
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rc
init|=
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
name|jobJarPath
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
name|conf
operator|.
name|getPattern
argument_list|(
name|JobContext
operator|.
name|JAR_UNPACK_PATTERN
argument_list|,
name|JobConf
operator|.
name|UNPACK_JAR_PATTERN_DEFAULT
argument_list|)
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_JAR
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Job jar may be null. For e.g, for pipes, the job jar is the hadoop
comment|// mapreduce jar itself which is already on the classpath.
name|LOG
operator|.
name|info
argument_list|(
literal|"Job jar is not present. "
operator|+
literal|"Not adding any jar to the list of resources."
argument_list|)
expr_stmt|;
block|}
comment|// TODO gross hack
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
name|MRJobConfig
operator|.
name|JOB_SPLIT
block|,
name|MRJobConfig
operator|.
name|JOB_SPLIT_METAINFO
block|}
control|)
block|{
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SUBMIT_DIR
operator|+
literal|"/"
operator|+
name|s
argument_list|,
name|createApplicationResource
argument_list|(
name|defaultFileContext
argument_list|,
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|s
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Setup security tokens
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// Setup the command to run the AM
name|List
argument_list|<
name|String
argument_list|>
name|vargs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|MRApps
operator|.
name|crossPlatformifyMREnv
argument_list|(
name|jobConf
argument_list|,
name|Environment
operator|.
name|JAVA_HOME
argument_list|)
operator|+
literal|"/bin/java"
argument_list|)
expr_stmt|;
comment|// TODO: why do we use 'conf' some places and 'jobConf' others?
name|long
name|logSize
init|=
name|jobConf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_KB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_KB
argument_list|)
operator|<<
literal|10
decl_stmt|;
name|String
name|logLevel
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_LEVEL
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_LEVEL
argument_list|)
decl_stmt|;
name|int
name|numBackups
init|=
name|jobConf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_BACKUPS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_BACKUPS
argument_list|)
decl_stmt|;
name|MRApps
operator|.
name|addLog4jSystemProperties
argument_list|(
name|logLevel
argument_list|,
name|logSize
argument_list|,
name|numBackups
argument_list|,
name|vargs
argument_list|)
expr_stmt|;
comment|// Check for Java Lib Path usage in MAP and REDUCE configs
name|warnForJavaLibPath
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"map"
argument_list|,
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|MAP_ENV
argument_list|)
expr_stmt|;
name|warnForJavaLibPath
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPRED_MAP_ADMIN_JAVA_OPTS
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"map"
argument_list|,
name|MRJobConfig
operator|.
name|MAPRED_MAP_ADMIN_JAVA_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|MAPRED_ADMIN_USER_ENV
argument_list|)
expr_stmt|;
name|warnForJavaLibPath
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"reduce"
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_ENV
argument_list|)
expr_stmt|;
name|warnForJavaLibPath
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPRED_REDUCE_ADMIN_JAVA_OPTS
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"reduce"
argument_list|,
name|MRJobConfig
operator|.
name|MAPRED_REDUCE_ADMIN_JAVA_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|MAPRED_ADMIN_USER_ENV
argument_list|)
expr_stmt|;
comment|// Add AM admin command opts before user command opts
comment|// so that it can be overridden by user
name|String
name|mrAppMasterAdminOptions
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_ADMIN_COMMAND_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_ADMIN_COMMAND_OPTS
argument_list|)
decl_stmt|;
name|warnForJavaLibPath
argument_list|(
name|mrAppMasterAdminOptions
argument_list|,
literal|"app master"
argument_list|,
name|MRJobConfig
operator|.
name|MR_AM_ADMIN_COMMAND_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|MR_AM_ADMIN_USER_ENV
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|mrAppMasterAdminOptions
argument_list|)
expr_stmt|;
comment|// Add AM user command opts
name|String
name|mrAppMasterUserOptions
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_COMMAND_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_COMMAND_OPTS
argument_list|)
decl_stmt|;
name|warnForJavaLibPath
argument_list|(
name|mrAppMasterUserOptions
argument_list|,
literal|"app master"
argument_list|,
name|MRJobConfig
operator|.
name|MR_AM_COMMAND_OPTS
argument_list|,
name|MRJobConfig
operator|.
name|MR_AM_ENV
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|mrAppMasterUserOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_PROFILE
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_PROFILE
argument_list|)
condition|)
block|{
specifier|final
name|String
name|profileParams
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_PROFILE_PARAMS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_TASK_PROFILE_PARAMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|profileParams
operator|!=
literal|null
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|profileParams
argument_list|,
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|PROFILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|vargs
operator|.
name|add
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_MASTER_CLASS
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ApplicationConstants
operator|.
name|STDOUT
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ApplicationConstants
operator|.
name|STDERR
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|vargsFinal
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
comment|// Final command
name|StringBuilder
name|mergedCommand
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CharSequence
name|str
range|:
name|vargs
control|)
block|{
name|mergedCommand
operator|.
name|append
argument_list|(
name|str
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|vargsFinal
operator|.
name|add
argument_list|(
name|mergedCommand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Command to launch container for ApplicationMaster is : "
operator|+
name|mergedCommand
argument_list|)
expr_stmt|;
comment|// Setup the CLASSPATH in environment
comment|// i.e. add { Hadoop jars, job jar, CWD } to classpath.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|environment
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Shell
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|SHELL
operator|.
name|name
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPRED_ADMIN_USER_SHELL
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHELL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the container working directory at the front of LD_LIBRARY_PATH
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|LD_LIBRARY_PATH
operator|.
name|name
argument_list|()
argument_list|,
name|MRApps
operator|.
name|crossPlatformifyMREnv
argument_list|(
name|conf
argument_list|,
name|Environment
operator|.
name|PWD
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Setup the environment variables for Admin first
name|MRApps
operator|.
name|setEnvFromInputString
argument_list|(
name|environment
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_ADMIN_USER_ENV
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Setup the environment variables (LD_LIBRARY_PATH, etc)
name|MRApps
operator|.
name|setEnvFromInputString
argument_list|(
name|environment
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_ENV
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Parse distributed cache
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|jobConf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_ACL_VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_ACL_MODIFY_JOB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup ContainerLaunchContext for AM container
name|ContainerLaunchContext
name|amContainer
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|environment
argument_list|,
name|vargsFinal
argument_list|,
literal|null
argument_list|,
name|securityTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|tagsFromConf
init|=
name|jobConf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|JOB_TAGS
argument_list|)
decl_stmt|;
comment|// Set up the ApplicationSubmissionContext
name|ApplicationSubmissionContext
name|appContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
comment|// ApplicationId
name|appContext
operator|.
name|setQueue
argument_list|(
comment|// Queue name
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|QUEUE_NAME
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// add reservationID if present
name|ReservationId
name|reservationID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reservationID
operator|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|RESERVATION_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// throw exception as reservationid as is invalid
name|String
name|errMsg
init|=
literal|"Invalid reservationId: "
operator|+
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|RESERVATION_ID
argument_list|)
operator|+
literal|" specified for the app: "
operator|+
name|applicationId
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|reservationID
operator|!=
literal|null
condition|)
block|{
name|appContext
operator|.
name|setReservationID
argument_list|(
name|reservationID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SUBMITTING ApplicationSubmissionContext app:"
operator|+
name|applicationId
operator|+
literal|" to queue:"
operator|+
name|appContext
operator|.
name|getQueue
argument_list|()
operator|+
literal|" with reservationId:"
operator|+
name|appContext
operator|.
name|getReservationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appContext
operator|.
name|setApplicationName
argument_list|(
comment|// Job name
name|jobConf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|JOB_NAME
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CANCEL_DELEGATION_TOKEN
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|// AM Container
name|appContext
operator|.
name|setMaxAppAttempts
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_MAX_ATTEMPTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_MAX_ATTEMPTS
argument_list|)
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setApplicationType
argument_list|(
name|MRJobConfig
operator|.
name|MR_APPLICATION_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagsFromConf
operator|!=
literal|null
operator|&&
operator|!
name|tagsFromConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appContext
operator|.
name|setApplicationTags
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tagsFromConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|appContext
return|;
block|}
annotation|@
name|Override
DECL|method|setJobPriority (JobID arg0, String arg1)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|resMgrDelegate
operator|.
name|setJobPriority
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String arg0, long arg1)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|arg0
parameter_list|,
name|long
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resMgrDelegate
operator|.
name|getProtocolVersion
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> arg0)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Use Token.renew instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobCounters (JobID arg0)
specifier|public
name|Counters
name|getJobCounters
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getJobCounters
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobHistoryDir ()
specifier|public
name|String
name|getJobHistoryDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryServerDoneDirPrefix
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobStatus (JobID jobID)
specifier|public
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobID
name|jobID
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|JobStatus
name|status
init|=
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobID
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskCompletionEvents (JobID arg0, int arg1, int arg2)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getTaskCompletionEvents
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskDiagnostics (TaskAttemptID arg0)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|TaskAttemptID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|getTaskDiagnostics
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskReports (JobID jobID, TaskType taskType)
specifier|public
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|JobID
name|jobID
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobID
argument_list|)
operator|.
name|getTaskReports
argument_list|(
name|jobID
argument_list|,
name|taskType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|killJob (JobID arg0)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|/* check if the status is not running, if not send kill to RM */
name|JobStatus
name|status
init|=
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|resMgrDelegate
operator|.
name|killApplication
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return;
block|}
try|try
block|{
comment|/* send a kill to the AM */
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|killJob
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
name|long
name|currentTimeMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeKillIssued
init|=
name|currentTimeMillis
decl_stmt|;
while|while
condition|(
operator|(
name|currentTimeMillis
operator|<
name|timeKillIssued
operator|+
literal|10000L
operator|)
operator|&&
operator|(
name|status
operator|.
name|getState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
operator|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|/** interrupted, just break */
break|break;
block|}
name|currentTimeMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|status
operator|=
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
argument_list|)
operator|.
name|getJobStatus
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error when checking for application status"
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
condition|)
block|{
try|try
block|{
name|resMgrDelegate
operator|.
name|killApplication
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID arg0, boolean arg1)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|arg0
parameter_list|,
name|boolean
name|arg1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|killTask
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAdmins (String arg0)
specifier|public
name|AccessControlList
name|getQueueAdmins
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobTrackerStatus ()
specifier|public
name|JobTrackerStatus
name|getJobTrackerStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|JobTrackerStatus
operator|.
name|RUNNING
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLogFileParams (JobID jobID, TaskAttemptID taskAttemptID)
specifier|public
name|LogParams
name|getLogFileParams
parameter_list|(
name|JobID
name|jobID
parameter_list|,
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|clientCache
operator|.
name|getClient
argument_list|(
name|jobID
argument_list|)
operator|.
name|getLogFilePath
argument_list|(
name|jobID
argument_list|,
name|taskAttemptID
argument_list|)
return|;
block|}
DECL|method|warnForJavaLibPath (String opts, String component, String javaConf, String envConf)
specifier|private
specifier|static
name|void
name|warnForJavaLibPath
parameter_list|(
name|String
name|opts
parameter_list|,
name|String
name|component
parameter_list|,
name|String
name|javaConf
parameter_list|,
name|String
name|envConf
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|!=
literal|null
operator|&&
name|opts
operator|.
name|contains
argument_list|(
literal|"-Djava.library.path"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Usage of -Djava.library.path in "
operator|+
name|javaConf
operator|+
literal|" can cause "
operator|+
literal|"programs to no longer function if hadoop native libraries "
operator|+
literal|"are used. These values should be set as part of the "
operator|+
literal|"LD_LIBRARY_PATH in the "
operator|+
name|component
operator|+
literal|" JVM env using "
operator|+
name|envConf
operator|+
literal|" config settings."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

