begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|HSClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|MRDelegationTokenRenewer
specifier|public
class|class
name|MRDelegationTokenRenewer
extends|extends
name|TokenRenewer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRDelegationTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|MRDelegationTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|histProxy
init|=
name|instantiateHistoryProxy
argument_list|(
name|conf
argument_list|,
name|SecurityUtil
operator|.
name|getTokenServiceAddr
argument_list|(
name|token
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|RenewDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
return|return
name|histProxy
operator|.
name|renewDelegationToken
argument_list|(
name|request
argument_list|)
operator|.
name|getNextExpirationTime
argument_list|()
return|;
block|}
finally|finally
block|{
name|stopHistoryProxy
argument_list|(
name|histProxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|histProxy
init|=
name|instantiateHistoryProxy
argument_list|(
name|conf
argument_list|,
name|SecurityUtil
operator|.
name|getTokenServiceAddr
argument_list|(
name|token
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|CancelDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CancelDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|histProxy
operator|.
name|cancelDelegationToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopHistoryProxy
argument_list|(
name|histProxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|stopHistoryProxy (MRClientProtocol proxy)
specifier|protected
name|void
name|stopHistoryProxy
parameter_list|(
name|MRClientProtocol
name|proxy
parameter_list|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
DECL|method|instantiateHistoryProxy (final Configuration conf, final InetSocketAddress hsAddress)
specifier|protected
name|MRClientProtocol
name|instantiateHistoryProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|hsAddress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to MRHistoryServer at: "
operator|+
name|hsAddress
argument_list|)
expr_stmt|;
block|}
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|MRClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MRClientProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|MRClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|HSClientProtocol
operator|.
name|class
argument_list|,
name|hsAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

