begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_class
DECL|class|FileNameIndexUtils
specifier|public
class|class
name|FileNameIndexUtils
block|{
comment|// Sanitize job history file for predictable parsing
DECL|field|DELIMITER
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"-"
decl_stmt|;
DECL|field|DELIMITER_ESCAPE
specifier|static
specifier|final
name|String
name|DELIMITER_ESCAPE
init|=
literal|"%2D"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileNameIndexUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Job history file names need to be backwards compatible
comment|// Only append new elements to the end of this list
DECL|field|JOB_ID_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|JOB_ID_INDEX
init|=
literal|0
decl_stmt|;
DECL|field|SUBMIT_TIME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|SUBMIT_TIME_INDEX
init|=
literal|1
decl_stmt|;
DECL|field|USER_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|USER_INDEX
init|=
literal|2
decl_stmt|;
DECL|field|JOB_NAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|JOB_NAME_INDEX
init|=
literal|3
decl_stmt|;
DECL|field|FINISH_TIME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|FINISH_TIME_INDEX
init|=
literal|4
decl_stmt|;
DECL|field|NUM_MAPS_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MAPS_INDEX
init|=
literal|5
decl_stmt|;
DECL|field|NUM_REDUCES_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REDUCES_INDEX
init|=
literal|6
decl_stmt|;
DECL|field|JOB_STATUS_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|JOB_STATUS_INDEX
init|=
literal|7
decl_stmt|;
DECL|field|QUEUE_NAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|QUEUE_NAME_INDEX
init|=
literal|8
decl_stmt|;
DECL|field|JOB_START_TIME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|JOB_START_TIME_INDEX
init|=
literal|9
decl_stmt|;
comment|/**    * Constructs the job history file name from the JobIndexInfo.    *     * @param indexInfo the index info.    * @return the done job history filename.    */
DECL|method|getDoneFileName (JobIndexInfo indexInfo)
specifier|public
specifier|static
name|String
name|getDoneFileName
parameter_list|(
name|JobIndexInfo
name|indexInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDoneFileName
argument_list|(
name|indexInfo
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HS_JOBNAME_LIMIT
argument_list|)
return|;
block|}
DECL|method|getDoneFileName (JobIndexInfo indexInfo, int jobNameLimit)
specifier|public
specifier|static
name|String
name|getDoneFileName
parameter_list|(
name|JobIndexInfo
name|indexInfo
parameter_list|,
name|int
name|jobNameLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//JobId
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|escapeDelimiters
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|indexInfo
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//SubmitTime
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|indexInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//UserName
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|escapeDelimiters
argument_list|(
name|getUserName
argument_list|(
name|indexInfo
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//JobName
name|sb
operator|.
name|append
argument_list|(
name|trimURLEncodedString
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|escapeDelimiters
argument_list|(
name|getJobName
argument_list|(
name|indexInfo
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|jobNameLimit
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//FinishTime
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|indexInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//NumMaps
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|indexInfo
operator|.
name|getNumMaps
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//NumReduces
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|indexInfo
operator|.
name|getNumReduces
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//JobStatus
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|indexInfo
operator|.
name|getJobStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//QueueName
name|sb
operator|.
name|append
argument_list|(
name|escapeDelimiters
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|getQueueName
argument_list|(
name|indexInfo
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
expr_stmt|;
comment|//JobStartTime
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|indexInfo
operator|.
name|getJobStartTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|encodeJobHistoryFileName
argument_list|(
name|JobHistoryUtils
operator|.
name|JOB_HISTORY_FILE_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parses the provided job history file name to construct a    * JobIndexInfo object which is returned.    *     * @param jhFileName the job history filename.    * @return a JobIndexInfo object built from the filename.    */
DECL|method|getIndexInfo (String jhFileName)
specifier|public
specifier|static
name|JobIndexInfo
name|getIndexInfo
parameter_list|(
name|String
name|jhFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|jhFileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|jhFileName
operator|.
name|indexOf
argument_list|(
name|JobHistoryUtils
operator|.
name|JOB_HISTORY_FILE_EXTENSION
argument_list|)
argument_list|)
decl_stmt|;
name|JobIndexInfo
name|indexInfo
init|=
operator|new
name|JobIndexInfo
argument_list|()
decl_stmt|;
name|String
index|[]
name|jobDetails
init|=
name|fileName
operator|.
name|split
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
name|JobID
name|oldJobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|JOB_ID_INDEX
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
name|indexInfo
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// Do not fail if there are some minor parse errors
try|try
block|{
try|try
block|{
name|indexInfo
operator|.
name|setSubmitTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|SUBMIT_TIME_INDEX
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse submit time from job history file "
operator|+
name|jhFileName
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|indexInfo
operator|.
name|setUser
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|USER_INDEX
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|setJobName
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|JOB_NAME_INDEX
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexInfo
operator|.
name|setFinishTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|FINISH_TIME_INDEX
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse finish time from job history file "
operator|+
name|jhFileName
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexInfo
operator|.
name|setNumMaps
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|NUM_MAPS_INDEX
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse num maps from job history file "
operator|+
name|jhFileName
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexInfo
operator|.
name|setNumReduces
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|NUM_REDUCES_INDEX
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse num reduces from job history file "
operator|+
name|jhFileName
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|indexInfo
operator|.
name|setJobStatus
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|JOB_STATUS_INDEX
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|setQueueName
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|QUEUE_NAME_INDEX
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|jobDetails
operator|.
name|length
operator|<=
name|JOB_START_TIME_INDEX
condition|)
block|{
name|indexInfo
operator|.
name|setJobStartTime
argument_list|(
name|indexInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexInfo
operator|.
name|setJobStartTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|decodeJobHistoryFileName
argument_list|(
name|jobDetails
index|[
name|JOB_START_TIME_INDEX
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse start time from job history file "
operator|+
name|jhFileName
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parsing job history file with partial data encoded into name: "
operator|+
name|jhFileName
argument_list|)
expr_stmt|;
block|}
return|return
name|indexInfo
return|;
block|}
comment|/**    * Helper function to encode the URL of the filename of the job-history    * log file.    *     * @param logFileName file name of the job-history file    * @return URL encoded filename    * @throws IOException    */
DECL|method|encodeJobHistoryFileName (String logFileName)
specifier|public
specifier|static
name|String
name|encodeJobHistoryFileName
parameter_list|(
name|String
name|logFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|replacementDelimiterEscape
init|=
literal|null
decl_stmt|;
comment|// Temporarily protect the escape delimiters from encoding
if|if
condition|(
name|logFileName
operator|.
name|contains
argument_list|(
name|DELIMITER_ESCAPE
argument_list|)
condition|)
block|{
name|replacementDelimiterEscape
operator|=
name|nonOccursString
argument_list|(
name|logFileName
argument_list|)
expr_stmt|;
name|logFileName
operator|=
name|logFileName
operator|.
name|replaceAll
argument_list|(
name|DELIMITER_ESCAPE
argument_list|,
name|replacementDelimiterEscape
argument_list|)
expr_stmt|;
block|}
name|String
name|encodedFileName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encodedFileName
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|logFileName
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|uee
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|uee
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|// Restore protected escape delimiters after encoding
if|if
condition|(
name|replacementDelimiterEscape
operator|!=
literal|null
condition|)
block|{
name|encodedFileName
operator|=
name|encodedFileName
operator|.
name|replaceAll
argument_list|(
name|replacementDelimiterEscape
argument_list|,
name|DELIMITER_ESCAPE
argument_list|)
expr_stmt|;
block|}
return|return
name|encodedFileName
return|;
block|}
comment|/**    * Helper function to decode the URL of the filename of the job-history    * log file.    *     * @param logFileName file name of the job-history file    * @return URL decoded filename    * @throws IOException    */
DECL|method|decodeJobHistoryFileName (String logFileName)
specifier|public
specifier|static
name|String
name|decodeJobHistoryFileName
parameter_list|(
name|String
name|logFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|decodedFileName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|decodedFileName
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|logFileName
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|uee
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|uee
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
name|decodedFileName
return|;
block|}
DECL|method|nonOccursString (String logFileName)
specifier|static
name|String
name|nonOccursString
parameter_list|(
name|String
name|logFileName
parameter_list|)
block|{
name|int
name|adHocIndex
init|=
literal|0
decl_stmt|;
name|String
name|unfoundString
init|=
literal|"q"
operator|+
name|adHocIndex
decl_stmt|;
while|while
condition|(
name|logFileName
operator|.
name|contains
argument_list|(
name|unfoundString
argument_list|)
condition|)
block|{
name|unfoundString
operator|=
literal|"q"
operator|+
operator|++
name|adHocIndex
expr_stmt|;
block|}
return|return
name|unfoundString
operator|+
literal|"q"
return|;
block|}
DECL|method|getUserName (JobIndexInfo indexInfo)
specifier|private
specifier|static
name|String
name|getUserName
parameter_list|(
name|JobIndexInfo
name|indexInfo
parameter_list|)
block|{
return|return
name|getNonEmptyString
argument_list|(
name|indexInfo
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getJobName (JobIndexInfo indexInfo)
specifier|private
specifier|static
name|String
name|getJobName
parameter_list|(
name|JobIndexInfo
name|indexInfo
parameter_list|)
block|{
return|return
name|getNonEmptyString
argument_list|(
name|indexInfo
operator|.
name|getJobName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getQueueName (JobIndexInfo indexInfo)
specifier|private
specifier|static
name|String
name|getQueueName
parameter_list|(
name|JobIndexInfo
name|indexInfo
parameter_list|)
block|{
return|return
name|getNonEmptyString
argument_list|(
name|indexInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
return|;
block|}
comment|//TODO Maybe handle default values for longs and integers here?
DECL|method|getNonEmptyString (String in)
specifier|private
specifier|static
name|String
name|getNonEmptyString
parameter_list|(
name|String
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
operator|||
name|in
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|in
operator|=
literal|"NA"
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
DECL|method|escapeDelimiters (String escapee)
specifier|private
specifier|static
name|String
name|escapeDelimiters
parameter_list|(
name|String
name|escapee
parameter_list|)
block|{
return|return
name|escapee
operator|.
name|replaceAll
argument_list|(
name|DELIMITER
argument_list|,
name|DELIMITER_ESCAPE
argument_list|)
return|;
block|}
comment|/**    * Trims the url-encoded string if required    */
DECL|method|trimURLEncodedString ( String encodedString, int limitLength)
specifier|private
specifier|static
name|String
name|trimURLEncodedString
parameter_list|(
name|String
name|encodedString
parameter_list|,
name|int
name|limitLength
parameter_list|)
block|{
assert|assert
operator|(
name|limitLength
operator|>=
literal|0
operator|)
operator|:
literal|"limitLength should be positive integer"
assert|;
if|if
condition|(
name|encodedString
operator|.
name|length
argument_list|()
operator|<=
name|limitLength
condition|)
block|{
return|return
name|encodedString
return|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|increase
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|strBytes
init|=
name|encodedString
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
comment|// calculate effective character length based on UTF-8 specification.
comment|// The size of a character coded in UTF-8 should be 4-byte at most.
comment|// See RFC3629
while|while
condition|(
literal|true
condition|)
block|{
name|byte
name|b
init|=
name|strBytes
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|'%'
condition|)
block|{
name|byte
name|minuend1
init|=
name|strBytes
index|[
name|index
operator|+
literal|1
index|]
decl_stmt|;
name|byte
name|subtrahend1
init|=
call|(
name|byte
call|)
argument_list|(
name|Character
operator|.
name|isDigit
argument_list|(
name|minuend1
argument_list|)
condition|?
literal|'0'
else|:
literal|'A'
operator|-
literal|10
argument_list|)
decl_stmt|;
name|byte
name|minuend2
init|=
name|strBytes
index|[
name|index
operator|+
literal|2
index|]
decl_stmt|;
name|byte
name|subtrahend2
init|=
call|(
name|byte
call|)
argument_list|(
name|Character
operator|.
name|isDigit
argument_list|(
name|minuend2
argument_list|)
condition|?
literal|'0'
else|:
literal|'A'
operator|-
literal|10
argument_list|)
decl_stmt|;
name|int
name|initialHex
init|=
operator|(
operator|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|minuend1
argument_list|)
operator|-
name|subtrahend1
operator|)
operator|<<
literal|4
operator|)
operator|+
operator|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|minuend2
argument_list|)
operator|-
name|subtrahend2
operator|)
decl_stmt|;
if|if
condition|(
literal|0x00
operator|<=
name|initialHex
operator|&&
name|initialHex
operator|<=
literal|0x7F
condition|)
block|{
comment|// For 1-byte UTF-8 characters
name|increase
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|0xC2
operator|<=
name|initialHex
operator|&&
name|initialHex
operator|<=
literal|0xDF
condition|)
block|{
comment|// For 2-byte UTF-8 characters
name|increase
operator|=
literal|6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|0xE0
operator|<=
name|initialHex
operator|&&
name|initialHex
operator|<=
literal|0xEF
condition|)
block|{
comment|// For 3-byte UTF-8 characters
name|increase
operator|=
literal|9
expr_stmt|;
block|}
else|else
block|{
comment|// For 4-byte UTF-8 characters
name|increase
operator|=
literal|12
expr_stmt|;
block|}
block|}
else|else
block|{
name|increase
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|+
name|increase
operator|>
name|limitLength
condition|)
block|{
break|break;
block|}
else|else
block|{
name|index
operator|+=
name|increase
expr_stmt|;
block|}
block|}
return|return
name|encodedString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

