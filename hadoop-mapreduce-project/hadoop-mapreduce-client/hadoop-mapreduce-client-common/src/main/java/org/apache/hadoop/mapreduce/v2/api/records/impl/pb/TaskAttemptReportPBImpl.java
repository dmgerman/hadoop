begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|CountersProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|PhaseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|TaskAttemptIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|TaskAttemptReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|TaskAttemptReportProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
operator|.
name|TaskAttemptStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ProtoBase
import|;
end_import

begin_class
DECL|class|TaskAttemptReportPBImpl
specifier|public
class|class
name|TaskAttemptReportPBImpl
extends|extends
name|ProtoBase
argument_list|<
name|TaskAttemptReportProto
argument_list|>
implements|implements
name|TaskAttemptReport
block|{
DECL|field|proto
name|TaskAttemptReportProto
name|proto
init|=
name|TaskAttemptReportProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|TaskAttemptReportProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|taskAttemptId
specifier|private
name|TaskAttemptId
name|taskAttemptId
init|=
literal|null
decl_stmt|;
DECL|field|counters
specifier|private
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
DECL|method|TaskAttemptReportPBImpl ()
specifier|public
name|TaskAttemptReportPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|TaskAttemptReportProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|TaskAttemptReportPBImpl (TaskAttemptReportProto proto)
specifier|public
name|TaskAttemptReportPBImpl
parameter_list|(
name|TaskAttemptReportProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|TaskAttemptReportProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|taskAttemptId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTaskAttemptId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|taskAttemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|counters
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCounters
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|TaskAttemptReportProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|counters
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|counters
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasCounters
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|counters
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|counters
return|;
block|}
annotation|@
name|Override
DECL|method|setCounters (Counters counters)
specifier|public
name|void
name|setCounters
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearCounters
argument_list|()
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|getStartTime
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setStartTime (long startTime)
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
operator|(
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|getFinishTime
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFinishTime (long finishTime)
specifier|public
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setFinishTime
argument_list|(
operator|(
name|finishTime
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptId ()
specifier|public
name|TaskAttemptId
name|getTaskAttemptId
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|taskAttemptId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|taskAttemptId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasTaskAttemptId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|taskAttemptId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|taskAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|setTaskAttemptId (TaskAttemptId taskAttemptId)
specifier|public
name|void
name|setTaskAttemptId
parameter_list|(
name|TaskAttemptId
name|taskAttemptId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttemptId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearTaskAttemptId
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskAttemptId
operator|=
name|taskAttemptId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptState ()
specifier|public
name|TaskAttemptState
name|getTaskAttemptState
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasTaskAttemptState
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTaskAttemptState (TaskAttemptState taskAttemptState)
specifier|public
name|void
name|setTaskAttemptState
parameter_list|(
name|TaskAttemptState
name|taskAttemptState
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttemptState
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearTaskAttemptState
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setTaskAttemptState
argument_list|(
name|convertToProtoFormat
argument_list|(
name|taskAttemptState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|getProgress
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProgress (float progress)
specifier|public
name|void
name|setProgress
parameter_list|(
name|float
name|progress
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProgress
argument_list|(
operator|(
name|progress
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDiagnosticInfo ()
specifier|public
name|String
name|getDiagnosticInfo
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasDiagnosticInfo
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getDiagnosticInfo
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setDiagnosticInfo (String diagnosticInfo)
specifier|public
name|void
name|setDiagnosticInfo
parameter_list|(
name|String
name|diagnosticInfo
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|diagnosticInfo
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearDiagnosticInfo
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setDiagnosticInfo
argument_list|(
operator|(
name|diagnosticInfo
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStateString ()
specifier|public
name|String
name|getStateString
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasStateString
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getStateString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setStateString (String stateString)
specifier|public
name|void
name|setStateString
parameter_list|(
name|String
name|stateString
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateString
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearStateString
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setStateString
argument_list|(
operator|(
name|stateString
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPhase ()
specifier|public
name|Phase
name|getPhase
parameter_list|()
block|{
name|TaskAttemptReportProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasPhase
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getPhase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPhase (Phase phase)
specifier|public
name|void
name|setPhase
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|phase
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearPhase
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setPhase
argument_list|(
name|convertToProtoFormat
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (CountersProto p)
specifier|private
name|CountersPBImpl
name|convertFromProtoFormat
parameter_list|(
name|CountersProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|CountersPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (Counters t)
specifier|private
name|CountersProto
name|convertToProtoFormat
parameter_list|(
name|Counters
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|CountersPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (TaskAttemptIdProto p)
specifier|private
name|TaskAttemptIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|TaskAttemptIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (TaskAttemptId t)
specifier|private
name|TaskAttemptIdProto
name|convertToProtoFormat
parameter_list|(
name|TaskAttemptId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TaskAttemptIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertToProtoFormat (TaskAttemptState e)
specifier|private
name|TaskAttemptStateProto
name|convertToProtoFormat
parameter_list|(
name|TaskAttemptState
name|e
parameter_list|)
block|{
return|return
name|MRProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (TaskAttemptStateProto e)
specifier|private
name|TaskAttemptState
name|convertFromProtoFormat
parameter_list|(
name|TaskAttemptStateProto
name|e
parameter_list|)
block|{
return|return
name|MRProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (Phase e)
specifier|private
name|PhaseProto
name|convertToProtoFormat
parameter_list|(
name|Phase
name|e
parameter_list|)
block|{
return|return
name|MRProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (PhaseProto e)
specifier|private
name|Phase
name|convertFromProtoFormat
parameter_list|(
name|PhaseProto
name|e
parameter_list|)
block|{
return|return
name|MRProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

