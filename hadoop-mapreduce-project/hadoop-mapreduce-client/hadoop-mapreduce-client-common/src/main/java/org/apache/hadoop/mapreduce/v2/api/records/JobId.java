begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_comment
comment|/**  *<p><code>JobId</code> represents the<em>globally unique</em>   * identifier for a MapReduce job.</p>  *   *<p>The globally unique nature of the identifier is achieved by using the   *<em>cluster timestamp</em> from the associated ApplicationId. i.e.   * start-time of the<code>ResourceManager</code> along with a monotonically  * increasing counter for the jobId.</p>  */
end_comment

begin_class
DECL|class|JobId
specifier|public
specifier|abstract
class|class
name|JobId
implements|implements
name|Comparable
argument_list|<
name|JobId
argument_list|>
block|{
comment|/**    * Get the associated<em>ApplicationId</em> which represents the     * start time of the<code>ResourceManager</code> and is used to generate     * the globally unique<code>JobId</code>.    * @return associated<code>ApplicationId</code>    */
DECL|method|getAppId ()
specifier|public
specifier|abstract
name|ApplicationId
name|getAppId
parameter_list|()
function_decl|;
comment|/**    * Get the short integer identifier of the<code>JobId</code>    * which is unique for all applications started by a particular instance    * of the<code>ResourceManager</code>.    * @return short integer identifier of the<code>JobId</code>    */
DECL|method|getId ()
specifier|public
specifier|abstract
name|int
name|getId
parameter_list|()
function_decl|;
DECL|method|setAppId (ApplicationId appId)
specifier|public
specifier|abstract
name|void
name|setAppId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
function_decl|;
DECL|method|setId (int id)
specifier|public
specifier|abstract
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
DECL|field|JOB
specifier|protected
specifier|static
specifier|final
name|String
name|JOB
init|=
literal|"job"
decl_stmt|;
DECL|field|SEPARATOR
specifier|protected
specifier|static
specifier|final
name|char
name|SEPARATOR
init|=
literal|'_'
decl_stmt|;
DECL|field|jobIdFormat
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|jobIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|JOB
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|jobIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getAppId
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getId
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|JobId
name|other
init|=
operator|(
name|JobId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getAppId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|getId
argument_list|()
operator|!=
name|other
operator|.
name|getId
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (JobId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|JobId
name|other
parameter_list|)
block|{
name|int
name|appIdComp
init|=
name|this
operator|.
name|getAppId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appIdComp
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getId
argument_list|()
operator|-
name|other
operator|.
name|getId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|appIdComp
return|;
block|}
block|}
block|}
end_class

end_unit

