begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_class
DECL|class|TypeConverter
specifier|public
class|class
name|TypeConverter
block|{
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
decl_stmt|;
static|static
block|{
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|fromYarn (JobId id)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|fromYarn
parameter_list|(
name|JobId
name|id
parameter_list|)
block|{
name|String
name|identifier
init|=
name|fromClusterTimeStamp
argument_list|(
name|id
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
argument_list|(
name|identifier
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
comment|//currently there is 1-1 mapping between appid and jobid
DECL|method|fromYarn (ApplicationId appID)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|fromYarn
parameter_list|(
name|ApplicationId
name|appID
parameter_list|)
block|{
name|String
name|identifier
init|=
name|fromClusterTimeStamp
argument_list|(
name|appID
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
argument_list|(
name|identifier
argument_list|,
name|appID
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapreduce.JobID id)
specifier|public
specifier|static
name|JobId
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|)
block|{
name|JobId
name|jobId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//currently there is 1-1 mapping between appid and jobid
name|ApplicationId
name|appId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appId
operator|.
name|setId
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|.
name|setClusterTimestamp
argument_list|(
name|toClusterTimeStamp
argument_list|(
name|id
operator|.
name|getJtIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return
name|jobId
return|;
block|}
DECL|method|fromClusterTimeStamp (long clusterTimeStamp)
specifier|private
specifier|static
name|String
name|fromClusterTimeStamp
parameter_list|(
name|long
name|clusterTimeStamp
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimeStamp
argument_list|)
return|;
block|}
DECL|method|toClusterTimeStamp (String identifier)
specifier|private
specifier|static
name|long
name|toClusterTimeStamp
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|identifier
argument_list|)
return|;
block|}
DECL|method|fromYarn ( TaskType taskType)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
name|fromYarn
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
return|;
case|case
name|REDUCE
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|REDUCE
return|;
default|default:
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized task type: "
operator|+
name|taskType
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|TaskType
DECL|method|toYarn (org.apache.hadoop.mapreduce.TaskType taskType)
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
name|taskType
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
name|TaskType
operator|.
name|MAP
return|;
case|case
name|REDUCE
case|:
return|return
name|TaskType
operator|.
name|REDUCE
return|;
default|default:
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized task type: "
operator|+
name|taskType
argument_list|)
throw|;
block|}
block|}
DECL|method|fromYarn (TaskId id)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
name|fromYarn
parameter_list|(
name|TaskId
name|id
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
argument_list|(
name|fromYarn
argument_list|(
name|id
operator|.
name|getJobId
argument_list|()
argument_list|)
argument_list|,
name|fromYarn
argument_list|(
name|id
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapreduce.TaskID id)
specifier|public
specifier|static
name|TaskId
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
name|id
parameter_list|)
block|{
name|TaskId
name|taskId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taskId
operator|.
name|setId
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setTaskType
argument_list|(
name|toYarn
argument_list|(
name|id
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setJobId
argument_list|(
name|toYarn
argument_list|(
name|id
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|taskId
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapred.TaskStatus.State state)
specifier|public
specifier|static
name|TaskAttemptState
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED_UNCLEAN
condition|)
block|{
return|return
name|TaskAttemptState
operator|.
name|KILLED
return|;
block|}
if|if
condition|(
name|state
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED_UNCLEAN
condition|)
block|{
return|return
name|TaskAttemptState
operator|.
name|FAILED
return|;
block|}
return|return
name|TaskAttemptState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapred.TaskStatus.Phase phase)
specifier|public
specifier|static
name|Phase
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|Phase
name|phase
parameter_list|)
block|{
switch|switch
condition|(
name|phase
condition|)
block|{
case|case
name|STARTING
case|:
return|return
name|Phase
operator|.
name|STARTING
return|;
case|case
name|MAP
case|:
return|return
name|Phase
operator|.
name|MAP
return|;
case|case
name|SHUFFLE
case|:
return|return
name|Phase
operator|.
name|SHUFFLE
return|;
case|case
name|SORT
case|:
return|return
name|Phase
operator|.
name|SORT
return|;
case|case
name|REDUCE
case|:
return|return
name|Phase
operator|.
name|REDUCE
return|;
case|case
name|CLEANUP
case|:
return|return
name|Phase
operator|.
name|CLEANUP
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized Phase: "
operator|+
name|phase
argument_list|)
throw|;
block|}
DECL|method|fromYarn ( TaskAttemptCompletionEvent[] newEvents)
specifier|public
specifier|static
name|TaskCompletionEvent
index|[]
name|fromYarn
parameter_list|(
name|TaskAttemptCompletionEvent
index|[]
name|newEvents
parameter_list|)
block|{
name|TaskCompletionEvent
index|[]
name|oldEvents
init|=
operator|new
name|TaskCompletionEvent
index|[
name|newEvents
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskAttemptCompletionEvent
name|newEvent
range|:
name|newEvents
control|)
block|{
name|oldEvents
index|[
name|i
operator|++
index|]
operator|=
name|fromYarn
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
block|}
return|return
name|oldEvents
return|;
block|}
DECL|method|fromYarn ( TaskAttemptCompletionEvent newEvent)
specifier|public
specifier|static
name|TaskCompletionEvent
name|fromYarn
parameter_list|(
name|TaskAttemptCompletionEvent
name|newEvent
parameter_list|)
block|{
return|return
operator|new
name|TaskCompletionEvent
argument_list|(
name|newEvent
operator|.
name|getEventId
argument_list|()
argument_list|,
name|fromYarn
argument_list|(
name|newEvent
operator|.
name|getAttemptId
argument_list|()
argument_list|)
argument_list|,
name|newEvent
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|newEvent
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
name|fromYarn
argument_list|(
name|newEvent
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|,
name|newEvent
operator|.
name|getMapOutputServerAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fromYarn ( TaskAttemptCompletionEventStatus newStatus)
specifier|public
specifier|static
name|TaskCompletionEvent
operator|.
name|Status
name|fromYarn
parameter_list|(
name|TaskAttemptCompletionEventStatus
name|newStatus
parameter_list|)
block|{
switch|switch
condition|(
name|newStatus
condition|)
block|{
case|case
name|FAILED
case|:
return|return
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|KILLED
return|;
case|case
name|OBSOLETE
case|:
return|return
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|OBSOLETE
return|;
case|case
name|SUCCEEDED
case|:
return|return
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|SUCCEEDED
return|;
case|case
name|TIPFAILED
case|:
return|return
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|TIPFAILED
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized status: "
operator|+
name|newStatus
argument_list|)
throw|;
block|}
DECL|method|fromYarn ( TaskAttemptId id)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|fromYarn
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
argument_list|(
name|fromYarn
argument_list|(
name|id
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toYarn ( org.apache.hadoop.mapred.TaskAttemptID id)
specifier|public
specifier|static
name|TaskAttemptId
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|id
parameter_list|)
block|{
name|TaskAttemptId
name|taskAttemptId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taskAttemptId
operator|.
name|setTaskId
argument_list|(
name|toYarn
argument_list|(
name|id
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttemptId
operator|.
name|setId
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|taskAttemptId
return|;
block|}
DECL|method|toYarn ( org.apache.hadoop.mapreduce.TaskAttemptID id)
specifier|public
specifier|static
name|TaskAttemptId
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|id
parameter_list|)
block|{
name|TaskAttemptId
name|taskAttemptId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taskAttemptId
operator|.
name|setTaskId
argument_list|(
name|toYarn
argument_list|(
name|id
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttemptId
operator|.
name|setId
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|taskAttemptId
return|;
block|}
DECL|method|fromYarn ( Counters yCntrs)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|fromYarn
parameter_list|(
name|Counters
name|yCntrs
parameter_list|)
block|{
if|if
condition|(
name|yCntrs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|counters
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|CounterGroup
name|yGrp
range|:
name|yCntrs
operator|.
name|getAllCounterGroups
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|counters
operator|.
name|addGroup
argument_list|(
name|yGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|yGrp
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|yCntr
range|:
name|yGrp
operator|.
name|getAllCounters
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|c
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|yGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|yCntr
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setValue
argument_list|(
name|yCntr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapred.Counters counters)
specifier|public
specifier|static
name|Counters
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
name|counters
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Counters
name|yCntrs
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
name|yCntrs
operator|.
name|addAllCounterGroups
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CounterGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Group
name|grp
range|:
name|counters
control|)
block|{
name|CounterGroup
name|yGrp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|CounterGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|yGrp
operator|.
name|setName
argument_list|(
name|grp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|setDisplayName
argument_list|(
name|grp
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|addAllCounters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
name|cntr
range|:
name|grp
control|)
block|{
name|Counter
name|yCntr
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|yCntr
operator|.
name|setName
argument_list|(
name|cntr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|yCntr
operator|.
name|setDisplayName
argument_list|(
name|cntr
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|yCntr
operator|.
name|setValue
argument_list|(
name|cntr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|setCounter
argument_list|(
name|yCntr
operator|.
name|getName
argument_list|()
argument_list|,
name|yCntr
argument_list|)
expr_stmt|;
block|}
name|yCntrs
operator|.
name|setCounterGroup
argument_list|(
name|yGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|yGrp
argument_list|)
expr_stmt|;
block|}
return|return
name|yCntrs
return|;
block|}
DECL|method|toYarn (org.apache.hadoop.mapreduce.Counters counters)
specifier|public
specifier|static
name|Counters
name|toYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|counters
parameter_list|)
block|{
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Counters
name|yCntrs
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
name|yCntrs
operator|.
name|addAllCounterGroups
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CounterGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
name|grp
range|:
name|counters
control|)
block|{
name|CounterGroup
name|yGrp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|CounterGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|yGrp
operator|.
name|setName
argument_list|(
name|grp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|setDisplayName
argument_list|(
name|grp
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|addAllCounters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|cntr
range|:
name|grp
control|)
block|{
name|Counter
name|yCntr
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|yCntr
operator|.
name|setName
argument_list|(
name|cntr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|yCntr
operator|.
name|setDisplayName
argument_list|(
name|cntr
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|yCntr
operator|.
name|setValue
argument_list|(
name|cntr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|yGrp
operator|.
name|setCounter
argument_list|(
name|yCntr
operator|.
name|getName
argument_list|()
argument_list|,
name|yCntr
argument_list|)
expr_stmt|;
block|}
name|yCntrs
operator|.
name|setCounterGroup
argument_list|(
name|yGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|yGrp
argument_list|)
expr_stmt|;
block|}
return|return
name|yCntrs
return|;
block|}
DECL|method|fromYarn (JobReport jobreport, String trackingUrl)
specifier|public
specifier|static
name|JobStatus
name|fromYarn
parameter_list|(
name|JobReport
name|jobreport
parameter_list|,
name|String
name|trackingUrl
parameter_list|)
block|{
name|JobPriority
name|jobPriority
init|=
name|JobPriority
operator|.
name|NORMAL
decl_stmt|;
name|JobStatus
name|jobStatus
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
argument_list|(
name|fromYarn
argument_list|(
name|jobreport
operator|.
name|getJobId
argument_list|()
argument_list|)
argument_list|,
name|jobreport
operator|.
name|getSetupProgress
argument_list|()
argument_list|,
name|jobreport
operator|.
name|getMapProgress
argument_list|()
argument_list|,
name|jobreport
operator|.
name|getReduceProgress
argument_list|()
argument_list|,
name|jobreport
operator|.
name|getCleanupProgress
argument_list|()
argument_list|,
name|fromYarn
argument_list|(
name|jobreport
operator|.
name|getJobState
argument_list|()
argument_list|)
argument_list|,
name|jobPriority
argument_list|,
name|jobreport
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobreport
operator|.
name|getJobName
argument_list|()
argument_list|,
name|jobreport
operator|.
name|getJobFile
argument_list|()
argument_list|,
name|trackingUrl
argument_list|)
decl_stmt|;
name|jobStatus
operator|.
name|setFailureInfo
argument_list|(
name|jobreport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobStatus
return|;
block|}
DECL|method|fromYarn ( QueueState state)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
name|fromYarn
parameter_list|(
name|QueueState
name|state
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
name|qState
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
operator|.
name|getState
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|qState
return|;
block|}
DECL|method|fromYarn (JobState state)
specifier|public
specifier|static
name|int
name|fromYarn
parameter_list|(
name|JobState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|INITED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
operator|.
name|PREP
return|;
case|case
name|RUNNING
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
operator|.
name|RUNNING
return|;
case|case
name|KILL_WAIT
case|:
case|case
name|KILLED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
operator|.
name|KILLED
return|;
case|case
name|SUCCEEDED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
operator|.
name|SUCCEEDED
return|;
case|case
name|FAILED
case|:
case|case
name|ERROR
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
operator|.
name|FAILED
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized job state: "
operator|+
name|state
argument_list|)
throw|;
block|}
DECL|method|fromYarn ( TaskState state)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
name|fromYarn
parameter_list|(
name|TaskState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|SCHEDULED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
operator|.
name|PENDING
return|;
case|case
name|RUNNING
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
operator|.
name|RUNNING
return|;
case|case
name|KILL_WAIT
case|:
case|case
name|KILLED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
operator|.
name|KILLED
return|;
case|case
name|SUCCEEDED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
operator|.
name|COMPLETE
return|;
case|case
name|FAILED
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TIPStatus
operator|.
name|FAILED
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized task state: "
operator|+
name|state
argument_list|)
throw|;
block|}
DECL|method|fromYarn (org.apache.hadoop.mapreduce.v2.api.records.TaskReport report)
specifier|public
specifier|static
name|TaskReport
name|fromYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
name|report
parameter_list|)
block|{
name|String
index|[]
name|diagnostics
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|getDiagnosticsList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|diagnostics
operator|=
operator|new
name|String
index|[
name|report
operator|.
name|getDiagnosticsCount
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|cs
range|:
name|report
operator|.
name|getDiagnosticsList
argument_list|()
control|)
block|{
name|diagnostics
index|[
name|i
operator|++
index|]
operator|=
name|cs
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|diagnostics
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|TaskReport
name|rep
init|=
operator|new
name|TaskReport
argument_list|(
name|fromYarn
argument_list|(
name|report
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|,
name|report
operator|.
name|getProgress
argument_list|()
argument_list|,
name|report
operator|.
name|getTaskState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|diagnostics
argument_list|,
name|fromYarn
argument_list|(
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
argument_list|,
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|fromYarn
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
argument_list|>
name|runningAtts
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|id
range|:
name|report
operator|.
name|getRunningAttemptsList
argument_list|()
control|)
block|{
name|runningAtts
operator|.
name|add
argument_list|(
name|fromYarn
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rep
operator|.
name|setRunningTaskAttemptIds
argument_list|(
name|runningAtts
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|getSuccessfulAttempt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|setSuccessfulAttemptId
argument_list|(
name|fromYarn
argument_list|(
name|report
operator|.
name|getSuccessfulAttempt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rep
return|;
block|}
DECL|method|fromYarn ( List<org.apache.hadoop.mapreduce.v2.api.records.TaskReport> taskReports)
specifier|public
specifier|static
name|List
argument_list|<
name|TaskReport
argument_list|>
name|fromYarn
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
argument_list|>
name|taskReports
parameter_list|)
block|{
name|List
argument_list|<
name|TaskReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
name|r
range|:
name|taskReports
control|)
block|{
name|reports
operator|.
name|add
argument_list|(
name|fromYarn
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reports
return|;
block|}
DECL|method|fromYarn (YarnApplicationState state)
specifier|public
specifier|static
name|JobStatus
operator|.
name|State
name|fromYarn
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SUBMITTED
case|:
return|return
name|State
operator|.
name|PREP
return|;
case|case
name|RUNNING
case|:
return|return
name|State
operator|.
name|RUNNING
return|;
case|case
name|FINISHED
case|:
return|return
name|State
operator|.
name|SUCCEEDED
return|;
case|case
name|FAILED
case|:
return|return
name|State
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|State
operator|.
name|KILLED
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unrecognized application state: "
operator|+
name|state
argument_list|)
throw|;
block|}
DECL|field|TT_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TT_NAME_PREFIX
init|=
literal|"tracker_"
decl_stmt|;
DECL|method|fromYarn (NodeReport node)
specifier|public
specifier|static
name|TaskTrackerInfo
name|fromYarn
parameter_list|(
name|NodeReport
name|node
parameter_list|)
block|{
name|TaskTrackerInfo
name|taskTracker
init|=
operator|new
name|TaskTrackerInfo
argument_list|(
name|TT_NAME_PREFIX
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|taskTracker
return|;
block|}
DECL|method|fromYarnNodes (List<NodeReport> nodes)
specifier|public
specifier|static
name|TaskTrackerInfo
index|[]
name|fromYarnNodes
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodes
parameter_list|)
block|{
name|List
argument_list|<
name|TaskTrackerInfo
argument_list|>
name|taskTrackers
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeReport
name|node
range|:
name|nodes
control|)
block|{
name|taskTrackers
operator|.
name|add
argument_list|(
name|fromYarn
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|taskTrackers
operator|.
name|toArray
argument_list|(
operator|new
name|TaskTrackerInfo
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|fromYarn (ApplicationReport application, String jobFile)
specifier|public
specifier|static
name|JobStatus
name|fromYarn
parameter_list|(
name|ApplicationReport
name|application
parameter_list|,
name|String
name|jobFile
parameter_list|)
block|{
name|String
name|trackingUrl
init|=
name|application
operator|.
name|getTrackingUrl
argument_list|()
decl_stmt|;
name|trackingUrl
operator|=
name|trackingUrl
operator|==
literal|null
condition|?
literal|""
else|:
name|trackingUrl
expr_stmt|;
name|JobStatus
name|jobStatus
init|=
operator|new
name|JobStatus
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|application
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
operator|.
name|NORMAL
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|application
operator|.
name|getName
argument_list|()
argument_list|,
name|application
operator|.
name|getQueue
argument_list|()
argument_list|,
name|jobFile
argument_list|,
name|trackingUrl
argument_list|)
decl_stmt|;
name|jobStatus
operator|.
name|setSchedulingInfo
argument_list|(
name|trackingUrl
argument_list|)
expr_stmt|;
comment|// Set AM tracking url
name|jobStatus
operator|.
name|setStartTime
argument_list|(
name|application
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setFailureInfo
argument_list|(
name|application
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setNeededMem
argument_list|(
name|application
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getNeededResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setNumReservedSlots
argument_list|(
name|application
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getNumReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setNumUsedSlots
argument_list|(
name|application
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getNumUsedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setReservedMem
argument_list|(
name|application
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getReservedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|jobStatus
operator|.
name|setUsedMem
argument_list|(
name|application
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobStatus
return|;
block|}
DECL|method|fromYarnApps (List<ApplicationReport> applications, Configuration conf)
specifier|public
specifier|static
name|JobStatus
index|[]
name|fromYarnApps
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applications
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|JobStatus
argument_list|>
name|jobStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|JobStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|application
range|:
name|applications
control|)
block|{
comment|// each applicationReport has its own jobFile
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|jobStatuses
operator|.
name|add
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|application
argument_list|,
name|MRApps
operator|.
name|getJobFile
argument_list|(
name|conf
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|jobStatuses
operator|.
name|toArray
argument_list|(
operator|new
name|JobStatus
index|[
name|jobStatuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|fromYarn (org.apache.hadoop.yarn.api.records.QueueInfo queueInfo, Configuration conf)
specifier|public
specifier|static
name|QueueInfo
name|fromYarn
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
name|queueInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|QueueInfo
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|queueInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|fromYarn
argument_list|(
name|queueInfo
operator|.
name|getQueueState
argument_list|()
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarnApps
argument_list|(
name|queueInfo
operator|.
name|getApplications
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fromYarnQueueInfo ( List<org.apache.hadoop.yarn.api.records.QueueInfo> queues, Configuration conf)
specifier|public
specifier|static
name|QueueInfo
index|[]
name|fromYarnQueueInfo
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
argument_list|>
name|queues
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queueInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|(
name|queues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
name|queue
range|:
name|queues
control|)
block|{
name|queueInfos
operator|.
name|add
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|queue
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|queueInfos
operator|.
name|toArray
argument_list|(
operator|new
name|QueueInfo
index|[
name|queueInfos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|fromYarnQueueUserAclsInfo ( List<QueueUserACLInfo> userAcls)
specifier|public
specifier|static
name|QueueAclsInfo
index|[]
name|fromYarnQueueUserAclsInfo
parameter_list|(
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|userAcls
parameter_list|)
block|{
name|List
argument_list|<
name|QueueAclsInfo
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueAclsInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueUserACLInfo
name|aclInfo
range|:
name|userAcls
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|qAcl
range|:
name|aclInfo
operator|.
name|getUserAcls
argument_list|()
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|qAcl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueueAclsInfo
name|acl
init|=
operator|new
name|QueueAclsInfo
argument_list|(
name|aclInfo
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|operations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|operations
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
return|return
name|acls
operator|.
name|toArray
argument_list|(
operator|new
name|QueueAclsInfo
index|[
name|acls
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

