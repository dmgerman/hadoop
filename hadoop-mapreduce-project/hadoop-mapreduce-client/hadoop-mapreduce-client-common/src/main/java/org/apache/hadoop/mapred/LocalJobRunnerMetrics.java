begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_class
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"LocalJobRunnerMetrics"
argument_list|,
name|context
operator|=
literal|"mapred"
argument_list|)
DECL|class|LocalJobRunnerMetrics
specifier|final
class|class
name|LocalJobRunnerMetrics
block|{
annotation|@
name|Metric
DECL|field|numMapTasksLaunched
specifier|private
name|MutableCounterInt
name|numMapTasksLaunched
decl_stmt|;
annotation|@
name|Metric
DECL|field|numMapTasksCompleted
specifier|private
name|MutableCounterInt
name|numMapTasksCompleted
decl_stmt|;
annotation|@
name|Metric
DECL|field|numReduceTasksLaunched
specifier|private
name|MutableCounterInt
name|numReduceTasksLaunched
decl_stmt|;
annotation|@
name|Metric
DECL|field|numReduceTasksCompleted
specifier|private
name|MutableGaugeInt
name|numReduceTasksCompleted
decl_stmt|;
DECL|method|LocalJobRunnerMetrics ()
specifier|private
name|LocalJobRunnerMetrics
parameter_list|()
block|{   }
DECL|method|create ()
specifier|public
specifier|static
name|LocalJobRunnerMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"JobTracker"
argument_list|)
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
literal|"LocalJobRunnerMetrics-"
operator|+
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|LocalJobRunnerMetrics
argument_list|()
argument_list|)
return|;
block|}
DECL|method|launchMap (TaskAttemptID taskAttemptID)
specifier|public
specifier|synchronized
name|void
name|launchMap
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
name|numMapTasksLaunched
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|completeMap (TaskAttemptID taskAttemptID)
specifier|public
name|void
name|completeMap
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
name|numMapTasksCompleted
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|launchReduce (TaskAttemptID taskAttemptID)
specifier|public
specifier|synchronized
name|void
name|launchReduce
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
name|numReduceTasksLaunched
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|completeReduce (TaskAttemptID taskAttemptID)
specifier|public
name|void
name|completeReduce
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
name|numReduceTasksCompleted
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

