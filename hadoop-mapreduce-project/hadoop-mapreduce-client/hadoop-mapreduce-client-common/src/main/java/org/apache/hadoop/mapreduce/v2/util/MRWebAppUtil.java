begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Evolving
DECL|class|MRWebAppUtil
specifier|public
class|class
name|MRWebAppUtil
block|{
DECL|field|ADDR_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|ADDR_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|trimResults
argument_list|()
decl_stmt|;
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|isSSLEnabledInYARN
specifier|private
specifier|static
name|boolean
name|isSSLEnabledInYARN
decl_stmt|;
DECL|field|isSSLEnabledInJHS
specifier|private
specifier|static
name|boolean
name|isSSLEnabledInJHS
decl_stmt|;
DECL|field|isSSLEnabledInMRAM
specifier|private
specifier|static
name|boolean
name|isSSLEnabledInMRAM
decl_stmt|;
DECL|method|initialize (Configuration conf)
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setSSLEnabledInYARN
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SSL_ENABLED_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SSL_ENABLED_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|setSSLEnabledInJHS
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_SSL_ENABLED
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HS_SSL_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|setSSLEnabledInMRAM
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|SSL_ENABLED_KEY
argument_list|,
name|MRConfig
operator|.
name|SSL_ENABLED_KEY_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setSSLEnabledInYARN (boolean isSSLEnabledInYARN)
specifier|private
specifier|static
name|void
name|setSSLEnabledInYARN
parameter_list|(
name|boolean
name|isSSLEnabledInYARN
parameter_list|)
block|{
name|MRWebAppUtil
operator|.
name|isSSLEnabledInYARN
operator|=
name|isSSLEnabledInYARN
expr_stmt|;
block|}
DECL|method|setSSLEnabledInJHS (boolean isSSLEnabledInJHS)
specifier|private
specifier|static
name|void
name|setSSLEnabledInJHS
parameter_list|(
name|boolean
name|isSSLEnabledInJHS
parameter_list|)
block|{
name|MRWebAppUtil
operator|.
name|isSSLEnabledInJHS
operator|=
name|isSSLEnabledInJHS
expr_stmt|;
block|}
DECL|method|setSSLEnabledInMRAM (boolean isSSLEnabledInMRAM)
specifier|private
specifier|static
name|void
name|setSSLEnabledInMRAM
parameter_list|(
name|boolean
name|isSSLEnabledInMRAM
parameter_list|)
block|{
name|MRWebAppUtil
operator|.
name|isSSLEnabledInMRAM
operator|=
name|isSSLEnabledInMRAM
expr_stmt|;
block|}
DECL|method|isSSLEnabledInYARN ()
specifier|public
specifier|static
name|boolean
name|isSSLEnabledInYARN
parameter_list|()
block|{
return|return
name|isSSLEnabledInYARN
return|;
block|}
DECL|method|isSSLEnabledInJHS ()
specifier|public
specifier|static
name|boolean
name|isSSLEnabledInJHS
parameter_list|()
block|{
return|return
name|isSSLEnabledInJHS
return|;
block|}
DECL|method|isSSLEnabledInMRAM ()
specifier|public
specifier|static
name|boolean
name|isSSLEnabledInMRAM
parameter_list|()
block|{
return|return
name|isSSLEnabledInMRAM
return|;
block|}
DECL|method|getYARNWebappScheme ()
specifier|public
specifier|static
name|String
name|getYARNWebappScheme
parameter_list|()
block|{
if|if
condition|(
name|isSSLEnabledInYARN
condition|)
block|{
return|return
literal|"https://"
return|;
block|}
else|else
block|{
return|return
literal|"http://"
return|;
block|}
block|}
DECL|method|getJHSWebappScheme ()
specifier|public
specifier|static
name|String
name|getJHSWebappScheme
parameter_list|()
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
return|return
literal|"https://"
return|;
block|}
else|else
block|{
return|return
literal|"http://"
return|;
block|}
block|}
DECL|method|setJHSWebappURLWithoutScheme (Configuration conf, String hostAddress)
specifier|public
specifier|static
name|void
name|setJHSWebappURLWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostAddress
parameter_list|)
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|hostAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_ADDRESS
argument_list|,
name|hostAddress
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJHSWebappURLWithoutScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getJHSWebappURLWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_HTTPS_ADDRESS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_ADDRESS
argument_list|)
return|;
block|}
block|}
DECL|method|getJHSWebappURLWithScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getJHSWebappURLWithScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getJHSWebappScheme
argument_list|()
operator|+
name|getJHSWebappURLWithoutScheme
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getJHSWebBindAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getJHSWebBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_HTTPS_PORT
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_WEBAPP_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_PORT
argument_list|)
return|;
block|}
block|}
DECL|method|getApplicationWebURLOnJHSWithoutScheme (Configuration conf, ApplicationId appId)
specifier|public
specifier|static
name|String
name|getApplicationWebURLOnJHSWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|UnknownHostException
block|{
comment|//construct the history url for job
name|String
name|addr
init|=
name|getJHSWebappURLWithoutScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ADDR_SPLITTER
operator|.
name|split
argument_list|(
name|addr
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// ignore the bind host
name|String
name|port
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Use hs address to figure out the host for webapp
name|addr
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_ADDRESS
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_ADDRESS
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|ADDR_SPLITTER
operator|.
name|split
argument_list|(
name|addr
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|hsAddress
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|host
argument_list|,
literal|":"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hsAddress
argument_list|,
name|getDefaultJHSWebappPort
argument_list|()
argument_list|,
name|getDefaultJHSWebappURLWithoutScheme
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/jobhistory/job/"
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getApplicationWebURLOnJHSWithScheme (Configuration conf, ApplicationId appId)
specifier|public
specifier|static
name|String
name|getApplicationWebURLOnJHSWithScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|UnknownHostException
block|{
return|return
name|getJHSWebappScheme
argument_list|()
operator|+
name|getApplicationWebURLOnJHSWithoutScheme
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|)
return|;
block|}
DECL|method|getDefaultJHSWebappPort ()
specifier|private
specifier|static
name|int
name|getDefaultJHSWebappPort
parameter_list|()
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
return|return
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_HTTPS_PORT
return|;
block|}
else|else
block|{
return|return
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_PORT
return|;
block|}
block|}
DECL|method|getDefaultJHSWebappURLWithoutScheme ()
specifier|private
specifier|static
name|String
name|getDefaultJHSWebappURLWithoutScheme
parameter_list|()
block|{
if|if
condition|(
name|isSSLEnabledInJHS
condition|)
block|{
return|return
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_HTTPS_ADDRESS
return|;
block|}
else|else
block|{
return|return
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HISTORY_WEBAPP_ADDRESS
return|;
block|}
block|}
DECL|method|getAMWebappScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getAMWebappScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|isSSLEnabledInMRAM
condition|)
block|{
return|return
literal|"https://"
return|;
block|}
else|else
block|{
return|return
literal|"http://"
return|;
block|}
block|}
block|}
end_class

end_unit

