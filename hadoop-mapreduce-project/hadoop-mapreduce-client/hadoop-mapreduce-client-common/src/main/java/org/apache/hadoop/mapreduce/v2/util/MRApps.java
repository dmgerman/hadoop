begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|_join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|_split
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|MRConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_comment
comment|/**  * Helper class for MR applications  */
end_comment

begin_class
DECL|class|MRApps
specifier|public
class|class
name|MRApps
extends|extends
name|Apps
block|{
DECL|field|JOB
specifier|public
specifier|static
specifier|final
name|String
name|JOB
init|=
literal|"job"
decl_stmt|;
DECL|field|TASK
specifier|public
specifier|static
specifier|final
name|String
name|TASK
init|=
literal|"task"
decl_stmt|;
DECL|field|ATTEMPT
specifier|public
specifier|static
specifier|final
name|String
name|ATTEMPT
init|=
literal|"attempt"
decl_stmt|;
DECL|method|toString (JobId jid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|JobId
name|jid
parameter_list|)
block|{
return|return
name|_join
argument_list|(
name|JOB
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|jid
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toJobID (String jid)
specifier|public
specifier|static
name|JobId
name|toJobID
parameter_list|(
name|String
name|jid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|jid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|toJobID
argument_list|(
name|JOB
argument_list|,
name|jid
argument_list|,
name|it
argument_list|)
return|;
block|}
comment|// mostly useful for parsing task/attempt id like strings
DECL|method|toJobID (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|JobId
name|toJobID
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|toAppID
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
decl_stmt|;
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|JobId
name|jobId
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jobId
return|;
block|}
DECL|method|toString (TaskId tid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|TaskId
name|tid
parameter_list|)
block|{
return|return
name|_join
argument_list|(
literal|"task"
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|taskSymbol
argument_list|(
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|tid
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toTaskID (String tid)
specifier|public
specifier|static
name|TaskId
name|toTaskID
parameter_list|(
name|String
name|tid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|tid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|toTaskID
argument_list|(
name|TASK
argument_list|,
name|tid
argument_list|,
name|it
argument_list|)
return|;
block|}
DECL|method|toTaskID (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|TaskId
name|toTaskID
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
name|JobId
name|jid
init|=
name|toJobID
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
decl_stmt|;
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|TaskId
name|tid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|tid
operator|.
name|setJobId
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|taskType
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tid
return|;
block|}
DECL|method|toString (TaskAttemptId taid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|TaskAttemptId
name|taid
parameter_list|)
block|{
return|return
name|_join
argument_list|(
literal|"attempt"
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|taskSymbol
argument_list|(
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|taid
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toTaskAttemptID (String taid)
specifier|public
specifier|static
name|TaskAttemptId
name|toTaskAttemptID
parameter_list|(
name|String
name|taid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|taid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TaskId
name|tid
init|=
name|toTaskID
argument_list|(
name|ATTEMPT
argument_list|,
name|taid
argument_list|,
name|it
argument_list|)
decl_stmt|;
name|shouldHaveNext
argument_list|(
name|ATTEMPT
argument_list|,
name|taid
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|taId
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taId
operator|.
name|setTaskId
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|taId
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|taId
return|;
block|}
DECL|method|taskSymbol (TaskType type)
specifier|public
specifier|static
name|String
name|taskSymbol
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MAP
case|:
return|return
literal|"m"
return|;
case|case
name|REDUCE
case|:
return|return
literal|"r"
return|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unknown task type: "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
DECL|enum|TaskAttemptStateUI
specifier|public
specifier|static
enum|enum
name|TaskAttemptStateUI
block|{
DECL|enumConstant|NEW
name|NEW
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|NEW
block|,
name|TaskAttemptState
operator|.
name|UNASSIGNED
block|,
name|TaskAttemptState
operator|.
name|ASSIGNED
block|}
argument_list|)
block|,
DECL|enumConstant|RUNNING
name|RUNNING
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|RUNNING
block|,
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
block|,
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
block|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
block|,
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
block|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
block|,
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
block|}
argument_list|)
block|,
DECL|enumConstant|SUCCESSFUL
name|SUCCESSFUL
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|SUCCEEDED
block|}
argument_list|)
block|,
DECL|enumConstant|FAILED
name|FAILED
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|FAILED
block|}
argument_list|)
block|,
DECL|enumConstant|KILLED
name|KILLED
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|KILLED
block|}
argument_list|)
block|;
DECL|field|correspondingStates
specifier|private
specifier|final
name|List
argument_list|<
name|TaskAttemptState
argument_list|>
name|correspondingStates
decl_stmt|;
DECL|method|TaskAttemptStateUI (TaskAttemptState[] correspondingStates)
specifier|private
name|TaskAttemptStateUI
parameter_list|(
name|TaskAttemptState
index|[]
name|correspondingStates
parameter_list|)
block|{
name|this
operator|.
name|correspondingStates
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|correspondingStates
argument_list|)
expr_stmt|;
block|}
DECL|method|correspondsTo (TaskAttemptState state)
specifier|public
name|boolean
name|correspondsTo
parameter_list|(
name|TaskAttemptState
name|state
parameter_list|)
block|{
return|return
name|this
operator|.
name|correspondingStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
DECL|method|taskType (String symbol)
specifier|public
specifier|static
name|TaskType
name|taskType
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
comment|// JDK 7 supports switch on strings
if|if
condition|(
name|symbol
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
condition|)
return|return
name|TaskType
operator|.
name|MAP
return|;
if|if
condition|(
name|symbol
operator|.
name|equals
argument_list|(
literal|"r"
argument_list|)
condition|)
return|return
name|TaskType
operator|.
name|REDUCE
return|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unknown task symbol: "
operator|+
name|symbol
argument_list|)
throw|;
block|}
DECL|method|taskAttemptState (String attemptStateStr)
specifier|public
specifier|static
name|TaskAttemptStateUI
name|taskAttemptState
parameter_list|(
name|String
name|attemptStateStr
parameter_list|)
block|{
return|return
name|TaskAttemptStateUI
operator|.
name|valueOf
argument_list|(
name|attemptStateStr
argument_list|)
return|;
block|}
DECL|method|setInitialClasspath ( Map<String, String> environment)
specifier|public
specifier|static
name|void
name|setInitialClasspath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|classpathFileStream
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Get yarn mapreduce-app classpath from generated classpath
comment|// Works if compile time env is same as runtime. Mainly tests.
name|ClassLoader
name|thisClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|String
name|mrAppGeneratedClasspathFile
init|=
literal|"mrapp-generated-classpath"
decl_stmt|;
name|classpathFileStream
operator|=
name|thisClassLoader
operator|.
name|getResourceAsStream
argument_list|(
name|mrAppGeneratedClasspathFile
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|classpathFileStream
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|cp
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|cp
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Put the file itself on classpath for tasks.
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|thisClassLoader
operator|.
name|getResource
argument_list|(
name|mrAppGeneratedClasspathFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// If runtime env is different.
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_HOME"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ShellCommandExecutor
name|exec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_HOME"
argument_list|)
operator|+
literal|"/bin/yarn"
block|,
literal|"classpath"
block|}
argument_list|)
decl_stmt|;
name|exec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|exec
operator|.
name|getOutput
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get yarn mapreduce-app classpath
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
literal|"HADOOP_MAPRED_HOME"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ShellCommandExecutor
name|exec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
literal|"HADOOP_MAPRED_HOME"
argument_list|)
operator|+
literal|"/bin/mapred"
block|,
literal|"classpath"
block|}
argument_list|)
decl_stmt|;
name|exec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|addToClassPath
argument_list|(
name|environment
argument_list|,
name|exec
operator|.
name|getOutput
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|classpathFileStream
operator|!=
literal|null
condition|)
block|{
name|classpathFileStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: Remove duplicates.
block|}
DECL|method|addToClassPath ( Map<String, String> environment, String fileName)
specifier|public
specifier|static
name|void
name|addToClassPath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|String
name|classpath
init|=
name|environment
operator|.
name|get
argument_list|(
name|CLASSPATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|classpath
operator|==
literal|null
condition|)
block|{
name|classpath
operator|=
name|fileName
expr_stmt|;
block|}
else|else
block|{
name|classpath
operator|=
name|classpath
operator|+
literal|":"
operator|+
name|fileName
expr_stmt|;
block|}
name|environment
operator|.
name|put
argument_list|(
name|CLASSPATH
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
DECL|field|CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|CLASSPATH
init|=
literal|"CLASSPATH"
decl_stmt|;
DECL|field|STAGING_CONSTANT
specifier|private
specifier|static
specifier|final
name|String
name|STAGING_CONSTANT
init|=
literal|".staging"
decl_stmt|;
DECL|method|getStagingAreaDir (Configuration conf, String user)
specifier|public
specifier|static
name|Path
name|getStagingAreaDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|user
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|STAGING_CONSTANT
argument_list|)
return|;
block|}
DECL|method|getJobFile (Configuration conf, String user, org.apache.hadoop.mapreduce.JobID jobId)
specifier|public
specifier|static
name|String
name|getJobFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|)
block|{
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|MRConstants
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
return|return
name|jobFile
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

