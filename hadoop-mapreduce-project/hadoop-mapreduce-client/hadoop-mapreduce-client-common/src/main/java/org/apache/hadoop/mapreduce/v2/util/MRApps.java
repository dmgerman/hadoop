begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ContainerLogAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ContainerRollingLogAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_comment
comment|/**  * Helper class for MR applications  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|MRApps
specifier|public
class|class
name|MRApps
extends|extends
name|Apps
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRApps
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|toString (JobId jid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|JobId
name|jid
parameter_list|)
block|{
return|return
name|jid
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toJobID (String jid)
specifier|public
specifier|static
name|JobId
name|toJobID
parameter_list|(
name|String
name|jid
parameter_list|)
block|{
return|return
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|jid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toString (TaskId tid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|TaskId
name|tid
parameter_list|)
block|{
return|return
name|tid
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toTaskID (String tid)
specifier|public
specifier|static
name|TaskId
name|toTaskID
parameter_list|(
name|String
name|tid
parameter_list|)
block|{
return|return
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TaskID
operator|.
name|forName
argument_list|(
name|tid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toString (TaskAttemptId taid)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|TaskAttemptId
name|taid
parameter_list|)
block|{
return|return
name|taid
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toTaskAttemptID (String taid)
specifier|public
specifier|static
name|TaskAttemptId
name|toTaskAttemptID
parameter_list|(
name|String
name|taid
parameter_list|)
block|{
return|return
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|taid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|taskSymbol (TaskType type)
specifier|public
specifier|static
name|String
name|taskSymbol
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MAP
case|:
return|return
literal|"m"
return|;
case|case
name|REDUCE
case|:
return|return
literal|"r"
return|;
block|}
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown task type: "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
DECL|enum|TaskAttemptStateUI
specifier|public
enum|enum
name|TaskAttemptStateUI
block|{
DECL|enumConstant|NEW
name|NEW
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|NEW
block|,
name|TaskAttemptState
operator|.
name|STARTING
block|}
argument_list|)
block|,
DECL|enumConstant|RUNNING
name|RUNNING
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|RUNNING
block|,
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
block|}
argument_list|)
block|,
DECL|enumConstant|SUCCESSFUL
name|SUCCESSFUL
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|SUCCEEDED
block|}
argument_list|)
block|,
DECL|enumConstant|FAILED
name|FAILED
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|FAILED
block|}
argument_list|)
block|,
DECL|enumConstant|KILLED
name|KILLED
argument_list|(
operator|new
name|TaskAttemptState
index|[]
block|{
name|TaskAttemptState
operator|.
name|KILLED
block|}
argument_list|)
block|;
DECL|field|correspondingStates
specifier|private
specifier|final
name|List
argument_list|<
name|TaskAttemptState
argument_list|>
name|correspondingStates
decl_stmt|;
DECL|method|TaskAttemptStateUI (TaskAttemptState[] correspondingStates)
specifier|private
name|TaskAttemptStateUI
parameter_list|(
name|TaskAttemptState
index|[]
name|correspondingStates
parameter_list|)
block|{
name|this
operator|.
name|correspondingStates
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|correspondingStates
argument_list|)
expr_stmt|;
block|}
DECL|method|correspondsTo (TaskAttemptState state)
specifier|public
name|boolean
name|correspondsTo
parameter_list|(
name|TaskAttemptState
name|state
parameter_list|)
block|{
return|return
name|this
operator|.
name|correspondingStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
DECL|enum|TaskStateUI
specifier|public
enum|enum
name|TaskStateUI
block|{
DECL|enumConstant|RUNNING
name|RUNNING
argument_list|(
operator|new
name|TaskState
index|[]
block|{
name|TaskState
operator|.
name|RUNNING
block|}
argument_list|)
block|,
DECL|enumConstant|PENDING
name|PENDING
argument_list|(
operator|new
name|TaskState
index|[]
block|{
name|TaskState
operator|.
name|SCHEDULED
block|}
argument_list|)
block|,
DECL|enumConstant|COMPLETED
name|COMPLETED
argument_list|(
operator|new
name|TaskState
index|[]
block|{
name|TaskState
operator|.
name|SUCCEEDED
block|,
name|TaskState
operator|.
name|FAILED
block|,
name|TaskState
operator|.
name|KILLED
block|}
argument_list|)
block|;
DECL|field|correspondingStates
specifier|private
specifier|final
name|List
argument_list|<
name|TaskState
argument_list|>
name|correspondingStates
decl_stmt|;
DECL|method|TaskStateUI (TaskState[] correspondingStates)
specifier|private
name|TaskStateUI
parameter_list|(
name|TaskState
index|[]
name|correspondingStates
parameter_list|)
block|{
name|this
operator|.
name|correspondingStates
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|correspondingStates
argument_list|)
expr_stmt|;
block|}
DECL|method|correspondsTo (TaskState state)
specifier|public
name|boolean
name|correspondsTo
parameter_list|(
name|TaskState
name|state
parameter_list|)
block|{
return|return
name|this
operator|.
name|correspondingStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
DECL|method|taskType (String symbol)
specifier|public
specifier|static
name|TaskType
name|taskType
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
comment|// JDK 7 supports switch on strings
if|if
condition|(
name|symbol
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
condition|)
return|return
name|TaskType
operator|.
name|MAP
return|;
if|if
condition|(
name|symbol
operator|.
name|equals
argument_list|(
literal|"r"
argument_list|)
condition|)
return|return
name|TaskType
operator|.
name|REDUCE
return|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown task symbol: "
operator|+
name|symbol
argument_list|)
throw|;
block|}
DECL|method|taskAttemptState (String attemptStateStr)
specifier|public
specifier|static
name|TaskAttemptStateUI
name|taskAttemptState
parameter_list|(
name|String
name|attemptStateStr
parameter_list|)
block|{
return|return
name|TaskAttemptStateUI
operator|.
name|valueOf
argument_list|(
name|attemptStateStr
argument_list|)
return|;
block|}
DECL|method|taskState (String taskStateStr)
specifier|public
specifier|static
name|TaskStateUI
name|taskState
parameter_list|(
name|String
name|taskStateStr
parameter_list|)
block|{
return|return
name|TaskStateUI
operator|.
name|valueOf
argument_list|(
name|taskStateStr
argument_list|)
return|;
block|}
comment|// gets the base name of the MapReduce framework or null if no
comment|// framework was configured
DECL|method|getMRFrameworkName (Configuration conf)
specifier|private
specifier|static
name|String
name|getMRFrameworkName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|frameworkName
init|=
literal|null
decl_stmt|;
name|String
name|framework
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_FRAMEWORK_PATH
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|framework
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|framework
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse '"
operator|+
name|framework
operator|+
literal|"' as a URI, check the setting for "
operator|+
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_FRAMEWORK_PATH
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|frameworkName
operator|=
name|uri
operator|.
name|getFragment
argument_list|()
expr_stmt|;
if|if
condition|(
name|frameworkName
operator|==
literal|null
condition|)
block|{
name|frameworkName
operator|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|frameworkName
return|;
block|}
DECL|method|setMRFrameworkClasspath ( Map<String, String> environment, Configuration conf)
specifier|private
specifier|static
name|void
name|setMRFrameworkClasspath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Propagate the system classpath when using the mini cluster
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|boolean
name|crossPlatform
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
name|MRConfig
operator|.
name|DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|)
decl_stmt|;
comment|// if the framework is specified then only use the MR classpath
name|String
name|frameworkName
init|=
name|getMRFrameworkName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|frameworkName
operator|==
literal|null
condition|)
block|{
comment|// Add standard Hadoop classes
for|for
control|(
name|String
name|c
range|:
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
name|crossPlatform
condition|?
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
else|:
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_APPLICATION_CLASSPATH
argument_list|)
control|)
block|{
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|c
operator|.
name|trim
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|foundFrameworkInClasspath
init|=
operator|(
name|frameworkName
operator|==
literal|null
operator|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|conf
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_CLASSPATH
argument_list|,
name|crossPlatform
condition|?
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH
argument_list|)
else|:
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH
argument_list|)
argument_list|)
control|)
block|{
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|c
operator|.
name|trim
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|foundFrameworkInClasspath
condition|)
block|{
name|foundFrameworkInClasspath
operator|=
name|c
operator|.
name|contains
argument_list|(
name|frameworkName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundFrameworkInClasspath
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not locate MapReduce framework name '"
operator|+
name|frameworkName
operator|+
literal|"' in "
operator|+
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_CLASSPATH
argument_list|)
throw|;
block|}
comment|// TODO: Remove duplicates.
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setClasspath (Map<String, String> environment, Configuration conf)
specifier|public
specifier|static
name|void
name|setClasspath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|userClassesTakesPrecedence
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|classpathEnvVar
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER
argument_list|,
literal|false
argument_list|)
condition|?
name|Environment
operator|.
name|APP_CLASSPATH
operator|.
name|name
argument_list|()
else|:
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|crossPlatformifyMREnv
argument_list|(
name|conf
argument_list|,
name|Environment
operator|.
name|PWD
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|userClassesTakesPrecedence
condition|)
block|{
name|MRApps
operator|.
name|setMRFrameworkClasspath
argument_list|(
name|environment
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*      * We use "*" for the name of the JOB_JAR instead of MRJobConfig.JOB_JAR for      * the case where the job jar is not necessarily named "job.jar". This can      * happen, for example, when the job is leveraging a resource from the YARN      * shared cache.      */
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|MRJobConfig
operator|.
name|JOB_JAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"*"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|MRJobConfig
operator|.
name|JOB_JAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"classes"
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|MRJobConfig
operator|.
name|JOB_JAR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"lib"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"*"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|crossPlatformifyMREnv
argument_list|(
name|conf
argument_list|,
name|Environment
operator|.
name|PWD
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"*"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// a * in the classpath will only find a .jar, so we need to filter out
comment|// all .jars and add everything else
name|addToClasspathIfNotJar
argument_list|(
name|DistributedCache
operator|.
name|getFileClassPaths
argument_list|(
name|conf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|environment
argument_list|,
name|classpathEnvVar
argument_list|)
expr_stmt|;
name|addToClasspathIfNotJar
argument_list|(
name|DistributedCache
operator|.
name|getArchiveClassPaths
argument_list|(
name|conf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getCacheArchives
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|environment
argument_list|,
name|classpathEnvVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|userClassesTakesPrecedence
condition|)
block|{
name|MRApps
operator|.
name|setMRFrameworkClasspath
argument_list|(
name|environment
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add the paths to the classpath if they are not jars    * @param paths the paths to add to the classpath    * @param withLinks the corresponding paths that may have a link name in them    * @param conf used to resolve the paths    * @param environment the environment to update CLASSPATH in    * @throws IOException if there is an error resolving any of the paths.    */
DECL|method|addToClasspathIfNotJar (Path[] paths, URI[] withLinks, Configuration conf, Map<String, String> environment, String classpathEnvVar)
specifier|private
specifier|static
name|void
name|addToClasspathIfNotJar
parameter_list|(
name|Path
index|[]
name|paths
parameter_list|,
name|URI
index|[]
name|withLinks
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|classpathEnvVar
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
name|HashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|linkLookup
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|withLinks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|withLinks
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|FileSystem
name|remoteFS
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|wildcard
init|=
literal|null
decl_stmt|;
comment|// If the path is wildcarded, resolve its parent directory instead
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DistributedCache
operator|.
name|WILDCARD
argument_list|)
condition|)
block|{
name|wildcard
operator|=
name|name
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|p
operator|=
name|remoteFS
operator|.
name|resolvePath
argument_list|(
name|p
operator|.
name|makeQualified
argument_list|(
name|remoteFS
operator|.
name|getUri
argument_list|()
argument_list|,
name|remoteFS
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|wildcard
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|u
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid path URI: "
operator|+
name|p
operator|+
literal|" - cannot "
operator|+
literal|"contain both a URI fragment and a wildcard"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|wildcard
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|p
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|wildcard
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|u
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|u
operator|.
name|getFragment
argument_list|()
expr_stmt|;
block|}
comment|// If it's not a JAR, add it to the link lookup.
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|name
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|String
name|old
init|=
name|linkLookup
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|old
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The same path is included more than once "
operator|+
literal|"with different links or wildcards: "
operator|+
name|p
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|", "
operator|+
name|old
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|FileSystem
name|remoteFS
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|p
operator|=
name|remoteFS
operator|.
name|resolvePath
argument_list|(
name|p
operator|.
name|makeQualified
argument_list|(
name|remoteFS
operator|.
name|getUri
argument_list|()
argument_list|,
name|remoteFS
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|linkLookup
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|name
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|classpathEnvVar
argument_list|,
name|crossPlatformifyMREnv
argument_list|(
name|conf
argument_list|,
name|Environment
operator|.
name|PWD
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Creates and sets a {@link ApplicationClassLoader} on the given    * configuration and as the thread context classloader, if    * {@link MRJobConfig#MAPREDUCE_JOB_CLASSLOADER} is set to true, and    * the APP_CLASSPATH environment variable is set.    * @param conf    * @throws IOException    */
DECL|method|setJobClassLoader (Configuration conf)
specifier|public
specifier|static
name|void
name|setJobClassLoader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setClassLoader
argument_list|(
name|createJobClassLoader
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a {@link ApplicationClassLoader} if    * {@link MRJobConfig#MAPREDUCE_JOB_CLASSLOADER} is set to true, and    * the APP_CLASSPATH environment variable is set.    * @param conf    * @return the created job classloader, or null if the job classloader is not    * enabled or the APP_CLASSPATH environment variable is not set    * @throws IOException    */
DECL|method|createJobClassLoader (Configuration conf)
specifier|public
specifier|static
name|ClassLoader
name|createJobClassLoader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|jobClassLoader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|String
name|appClasspath
init|=
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|APP_CLASSPATH
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appClasspath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not creating job classloader since APP_CLASSPATH is not set."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating job classloader"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"APP_CLASSPATH="
operator|+
name|appClasspath
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|systemClasses
init|=
name|getSystemClasses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobClassLoader
operator|=
name|createJobClassLoader
argument_list|(
name|appClasspath
argument_list|,
name|systemClasses
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobClassLoader
return|;
block|}
comment|/**    * Sets the provided classloader on the given configuration and as the thread    * context classloader if the classloader is not null.    * @param classLoader    * @param conf    */
DECL|method|setClassLoader (ClassLoader classLoader, Configuration conf)
specifier|public
specifier|static
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting classloader "
operator|+
name|classLoader
operator|+
literal|" on the configuration and as the thread context classloader"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getSystemClasses (Configuration conf)
specifier|static
name|String
index|[]
name|getSystemClasses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER_SYSTEM_CLASSES
argument_list|)
return|;
block|}
DECL|method|createJobClassLoader (final String appClasspath, final String[] systemClasses)
specifier|private
specifier|static
name|ClassLoader
name|createJobClassLoader
parameter_list|(
specifier|final
name|String
name|appClasspath
parameter_list|,
specifier|final
name|String
index|[]
name|systemClasses
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassLoader
name|run
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|ApplicationClassLoader
argument_list|(
name|appClasspath
argument_list|,
name|MRApps
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|systemClasses
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|MalformedURLException
condition|)
block|{
throw|throw
operator|(
name|MalformedURLException
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|STAGING_CONSTANT
specifier|private
specifier|static
specifier|final
name|String
name|STAGING_CONSTANT
init|=
literal|".staging"
decl_stmt|;
DECL|method|getStagingAreaDir (Configuration conf, String user)
specifier|public
specifier|static
name|Path
name|getStagingAreaDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_STAGING_DIR
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|user
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|STAGING_CONSTANT
argument_list|)
return|;
block|}
DECL|method|getJobFile (Configuration conf, String user, org.apache.hadoop.mapreduce.JobID jobId)
specifier|public
specifier|static
name|String
name|getJobFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|)
block|{
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
return|return
name|jobFile
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getEndJobCommitSuccessFile (Configuration conf, String user, JobId jobId)
specifier|public
specifier|static
name|Path
name|getEndJobCommitSuccessFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|Path
name|endCommitFile
init|=
operator|new
name|Path
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"COMMIT_SUCCESS"
argument_list|)
decl_stmt|;
return|return
name|endCommitFile
return|;
block|}
DECL|method|getEndJobCommitFailureFile (Configuration conf, String user, JobId jobId)
specifier|public
specifier|static
name|Path
name|getEndJobCommitFailureFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|Path
name|endCommitFile
init|=
operator|new
name|Path
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"COMMIT_FAIL"
argument_list|)
decl_stmt|;
return|return
name|endCommitFile
return|;
block|}
DECL|method|getStartJobCommitFile (Configuration conf, String user, JobId jobId)
specifier|public
specifier|static
name|Path
name|getStartJobCommitFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|Path
name|startCommitFile
init|=
operator|new
name|Path
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"COMMIT_STARTED"
argument_list|)
decl_stmt|;
return|return
name|startCommitFile
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setupDistributedCache (Configuration conf, Map<String, LocalResource> localResources)
specifier|public
specifier|static
name|void
name|setupDistributedCache
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalResourceBuilder
name|lrb
init|=
operator|new
name|LocalResourceBuilder
argument_list|()
decl_stmt|;
name|lrb
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Cache archives
name|lrb
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setUris
argument_list|(
name|DistributedCache
operator|.
name|getCacheArchives
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setTimestamps
argument_list|(
name|DistributedCache
operator|.
name|getArchiveTimestamps
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setSizes
argument_list|(
name|getFileSizes
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_SIZES
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setVisibilities
argument_list|(
name|DistributedCache
operator|.
name|getArchiveVisibilities
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setSharedCacheUploadPolicies
argument_list|(
name|Job
operator|.
name|getArchiveSharedCacheUploadPolicies
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|createLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
comment|// Cache files
name|lrb
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setUris
argument_list|(
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setTimestamps
argument_list|(
name|DistributedCache
operator|.
name|getFileTimestamps
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setSizes
argument_list|(
name|getFileSizes
argument_list|(
name|conf
argument_list|,
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setVisibilities
argument_list|(
name|DistributedCache
operator|.
name|getFileVisibilities
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|setSharedCacheUploadPolicies
argument_list|(
name|Job
operator|.
name|getFileSharedCacheUploadPolicies
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|lrb
operator|.
name|createLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up the DistributedCache related configs to make    * {@link DistributedCache#getLocalCacheFiles(Configuration)}    * and    * {@link DistributedCache#getLocalCacheArchives(Configuration)}    * working.    * @param conf    * @throws java.io.IOException    */
DECL|method|setupDistributedCacheLocal (Configuration conf)
specifier|public
specifier|static
name|void
name|setupDistributedCacheLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localWorkDir
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"PWD"
argument_list|)
decl_stmt|;
comment|//        ^ ^ all symlinks are created in the current work-dir
comment|// Update the configuration object with localized archives.
name|URI
index|[]
name|cacheArchives
init|=
name|DistributedCache
operator|.
name|getCacheArchives
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheArchives
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localArchives
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cacheArchives
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|URI
name|u
init|=
name|cacheArchives
index|[
name|i
index|]
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|Path
name|name
init|=
operator|new
name|Path
argument_list|(
operator|(
literal|null
operator|==
name|u
operator|.
name|getFragment
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getName
argument_list|()
else|:
name|u
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|linkName
init|=
name|name
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|localArchives
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|localWorkDir
argument_list|,
name|linkName
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localArchives
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_LOCALARCHIVES
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|localArchives
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|localArchives
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the configuration object with localized files.
name|URI
index|[]
name|cacheFiles
init|=
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheFiles
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cacheFiles
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|URI
name|u
init|=
name|cacheFiles
index|[
name|i
index|]
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|Path
name|name
init|=
operator|new
name|Path
argument_list|(
operator|(
literal|null
operator|==
name|u
operator|.
name|getFragment
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getName
argument_list|()
else|:
name|u
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|linkName
init|=
name|name
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|localFiles
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|localWorkDir
argument_list|,
name|linkName
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_LOCALFILES
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|localFiles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|localFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO - Move this to MR!
DECL|method|getFileSizes (Configuration conf, String key)
specifier|private
specifier|static
name|long
index|[]
name|getFileSizes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|strs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|strs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getChildLogLevel (Configuration conf, boolean isMap)
specifier|public
specifier|static
name|String
name|getChildLogLevel
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isMap
parameter_list|)
block|{
if|if
condition|(
name|isMap
condition|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_LOG_LEVEL
argument_list|,
name|JobConf
operator|.
name|DEFAULT_LOG_LEVEL
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_LOG_LEVEL
argument_list|,
name|JobConf
operator|.
name|DEFAULT_LOG_LEVEL
argument_list|)
return|;
block|}
block|}
comment|/**    * Add the JVM system properties necessary to configure    *  {@link ContainerLogAppender} or    *  {@link ContainerRollingLogAppender}.    *    * @param task for map/reduce, or null for app master    * @param vargs the argument list to append to    * @param conf configuration of MR job    */
DECL|method|addLog4jSystemProperties (Task task, List<String> vargs, Configuration conf)
specifier|public
specifier|static
name|void
name|addLog4jSystemProperties
parameter_list|(
name|Task
name|task
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|log4jPropertyFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_LOG4J_PROPERTIES_FILE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|log4jPropertyFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration=container-log4j.properties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URI
name|log4jURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log4jURI
operator|=
operator|new
name|URI
argument_list|(
name|log4jPropertyFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|log4jPath
init|=
operator|new
name|Path
argument_list|(
name|log4jURI
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration="
operator|+
name|log4jPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|logSize
decl_stmt|;
name|String
name|logLevel
decl_stmt|;
name|int
name|numBackups
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|logSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_KB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_KB
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|logLevel
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_LEVEL
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_LEVEL
argument_list|)
expr_stmt|;
name|numBackups
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_LOG_BACKUPS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_LOG_BACKUPS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logSize
operator|=
name|TaskLog
operator|.
name|getTaskLogLimitBytes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logLevel
operator|=
name|getChildLogLevel
argument_list|(
name|conf
argument_list|,
name|task
operator|.
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|numBackups
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|TASK_LOG_BACKUPS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_TASK_LOG_BACKUPS
argument_list|)
expr_stmt|;
block|}
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_DIR
operator|+
literal|"="
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_SIZE
operator|+
literal|"="
operator|+
name|logSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|logSize
operator|>
literal|0L
operator|&&
name|numBackups
operator|>
literal|0
condition|)
block|{
comment|// log should be rolled
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_BACKUPS
operator|+
literal|"="
operator|+
name|numBackups
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logger="
operator|+
name|logLevel
operator|+
literal|",CRLA"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logger="
operator|+
name|logLevel
operator|+
literal|",CLA"
argument_list|)
expr_stmt|;
block|}
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logfile="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
operator|!
name|task
operator|.
name|isMapTask
argument_list|()
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SEPARATE_SHUFFLE_LOG
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_REDUCE_SEPARATE_SHUFFLE_LOG
argument_list|)
condition|)
block|{
specifier|final
name|int
name|numShuffleBackups
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_LOG_BACKUPS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHUFFLE_LOG_BACKUPS
argument_list|)
decl_stmt|;
specifier|final
name|long
name|shuffleLogSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|SHUFFLE_LOG_KB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHUFFLE_LOG_KB
argument_list|)
operator|<<
literal|10
decl_stmt|;
specifier|final
name|String
name|shuffleLogger
init|=
name|logLevel
operator|+
operator|(
name|shuffleLogSize
operator|>
literal|0L
operator|&&
name|numShuffleBackups
operator|>
literal|0
condition|?
literal|",shuffleCRLA"
else|:
literal|",shuffleCLA"
operator|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|MRJobConfig
operator|.
name|MR_PREFIX
operator|+
literal|"shuffle.logger="
operator|+
name|shuffleLogger
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|MRJobConfig
operator|.
name|MR_PREFIX
operator|+
literal|"shuffle.logfile="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
operator|+
literal|".shuffle"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|MRJobConfig
operator|.
name|MR_PREFIX
operator|+
literal|"shuffle.log.filesize="
operator|+
name|shuffleLogSize
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|MRJobConfig
operator|.
name|MR_PREFIX
operator|+
literal|"shuffle.log.backups="
operator|+
name|numShuffleBackups
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return lines for system property keys and values per configuration.    *    * @return the formatted string for the system property lines or null if no    * properties are specified.    */
DECL|method|getSystemPropertiesToLog (Configuration conf)
specifier|public
specifier|static
name|String
name|getSystemPropertiesToLog
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|key
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// trim leading and trailing whitespace from the config
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|props
init|=
name|key
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n/************************************************************\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[system properties]\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|props
control|)
block|{
name|prop
operator|=
name|prop
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// trim leading and trailing whitespace
if|if
condition|(
operator|!
name|prop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|prop
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"************************************************************/"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setEnvFromInputString (Map<String, String> env, String envString, Configuration conf)
specifier|public
specifier|static
name|void
name|setEnvFromInputString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|classPathSeparator
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
name|MRConfig
operator|.
name|DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|)
condition|?
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
else|:
name|File
operator|.
name|pathSeparator
decl_stmt|;
name|Apps
operator|.
name|setEnvFromInputString
argument_list|(
name|env
argument_list|,
name|envString
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|addToEnvironment (Map<String, String> environment, String variable, String value, Configuration conf)
specifier|public
specifier|static
name|void
name|addToEnvironment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|,
name|String
name|value
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|classPathSeparator
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
name|MRConfig
operator|.
name|DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|)
condition|?
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
else|:
name|File
operator|.
name|pathSeparator
decl_stmt|;
name|Apps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|variable
argument_list|,
name|value
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
DECL|method|crossPlatformifyMREnv (Configuration conf, Environment env)
specifier|public
specifier|static
name|String
name|crossPlatformifyMREnv
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
name|boolean
name|crossPlatform
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
name|MRConfig
operator|.
name|DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|)
decl_stmt|;
return|return
name|crossPlatform
condition|?
name|env
operator|.
name|$$
argument_list|()
else|:
name|env
operator|.
name|$
argument_list|()
return|;
block|}
block|}
end_class

end_unit

