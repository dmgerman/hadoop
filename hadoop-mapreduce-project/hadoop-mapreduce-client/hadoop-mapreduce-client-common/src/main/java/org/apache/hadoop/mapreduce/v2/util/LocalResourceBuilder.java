begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InvalidJobConfException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class for MR applications that parses distributed cache artifacts and  * creates a map of LocalResources.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LocalResourceBuilder
class|class
name|LocalResourceBuilder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LocalResourceBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|type
specifier|private
name|LocalResourceType
name|type
decl_stmt|;
DECL|field|uris
specifier|private
name|URI
index|[]
name|uris
decl_stmt|;
DECL|field|timestamps
specifier|private
name|long
index|[]
name|timestamps
decl_stmt|;
DECL|field|sizes
specifier|private
name|long
index|[]
name|sizes
decl_stmt|;
DECL|field|visibilities
specifier|private
name|boolean
index|[]
name|visibilities
decl_stmt|;
DECL|field|sharedCacheUploadPolicies
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|sharedCacheUploadPolicies
decl_stmt|;
DECL|method|LocalResourceBuilder ()
name|LocalResourceBuilder
parameter_list|()
block|{   }
DECL|method|setConf (Configuration c)
name|void
name|setConf
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
block|}
DECL|method|setType (LocalResourceType t)
name|void
name|setType
parameter_list|(
name|LocalResourceType
name|t
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|t
expr_stmt|;
block|}
DECL|method|setUris (URI[] u)
name|void
name|setUris
parameter_list|(
name|URI
index|[]
name|u
parameter_list|)
block|{
name|this
operator|.
name|uris
operator|=
name|u
expr_stmt|;
block|}
DECL|method|setTimestamps (long[] t)
name|void
name|setTimestamps
parameter_list|(
name|long
index|[]
name|t
parameter_list|)
block|{
name|this
operator|.
name|timestamps
operator|=
name|t
expr_stmt|;
block|}
DECL|method|setSizes (long[] s)
name|void
name|setSizes
parameter_list|(
name|long
index|[]
name|s
parameter_list|)
block|{
name|this
operator|.
name|sizes
operator|=
name|s
expr_stmt|;
block|}
DECL|method|setVisibilities (boolean[] v)
name|void
name|setVisibilities
parameter_list|(
name|boolean
index|[]
name|v
parameter_list|)
block|{
name|this
operator|.
name|visibilities
operator|=
name|v
expr_stmt|;
block|}
DECL|method|setSharedCacheUploadPolicies (Map<String, Boolean> policies)
name|void
name|setSharedCacheUploadPolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|policies
parameter_list|)
block|{
name|this
operator|.
name|sharedCacheUploadPolicies
operator|=
name|policies
expr_stmt|;
block|}
DECL|method|createLocalResources (Map<String, LocalResource> localResources)
name|void
name|createLocalResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
comment|// Sanity check
if|if
condition|(
operator|(
name|uris
operator|.
name|length
operator|!=
name|timestamps
operator|.
name|length
operator|)
operator|||
operator|(
name|uris
operator|.
name|length
operator|!=
name|sizes
operator|.
name|length
operator|)
operator|||
operator|(
name|uris
operator|.
name|length
operator|!=
name|visibilities
operator|.
name|length
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid specification for "
operator|+
literal|"distributed-cache artifacts of type "
operator|+
name|type
operator|+
literal|" :"
operator|+
literal|" #uris="
operator|+
name|uris
operator|.
name|length
operator|+
literal|" #timestamps="
operator|+
name|timestamps
operator|.
name|length
operator|+
literal|" #visibilities="
operator|+
name|visibilities
operator|.
name|length
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|URI
name|u
init|=
name|uris
index|[
name|i
index|]
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|FileSystem
name|remoteFS
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|linkName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|DistributedCache
operator|.
name|WILDCARD
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|linkName
operator|=
name|p
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|DistributedCache
operator|.
name|WILDCARD
expr_stmt|;
block|}
name|p
operator|=
name|remoteFS
operator|.
name|resolvePath
argument_list|(
name|p
operator|.
name|makeQualified
argument_list|(
name|remoteFS
operator|.
name|getUri
argument_list|()
argument_list|,
name|remoteFS
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If there's no wildcard, try using the fragment for the link
if|if
condition|(
name|linkName
operator|==
literal|null
condition|)
block|{
name|linkName
operator|=
name|u
operator|.
name|getFragment
argument_list|()
expr_stmt|;
comment|// Because we don't know what's in the fragment, we have to handle
comment|// it with care.
if|if
condition|(
name|linkName
operator|!=
literal|null
condition|)
block|{
name|Path
name|linkPath
init|=
operator|new
name|Path
argument_list|(
name|linkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource name must be "
operator|+
literal|"relative"
argument_list|)
throw|;
block|}
name|linkName
operator|=
name|linkPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|u
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path URI: "
operator|+
name|p
operator|+
literal|" - cannot contain both a URI fragment and a wildcard"
argument_list|)
throw|;
block|}
comment|// If there's no wildcard or fragment, just link to the file name
if|if
condition|(
name|linkName
operator|==
literal|null
condition|)
block|{
name|linkName
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|LocalResource
name|orig
init|=
name|localResources
operator|.
name|get
argument_list|(
name|linkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|orig
operator|!=
literal|null
operator|&&
operator|!
name|orig
operator|.
name|getResource
argument_list|()
operator|.
name|equals
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidJobConfException
argument_list|(
name|getResourceDescription
argument_list|(
name|orig
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
name|orig
operator|.
name|getResource
argument_list|()
operator|+
literal|" conflicts with "
operator|+
name|getResourceDescription
argument_list|(
name|type
argument_list|)
operator|+
name|u
argument_list|)
throw|;
block|}
name|Boolean
name|sharedCachePolicy
init|=
name|sharedCacheUploadPolicies
operator|.
name|get
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sharedCachePolicy
operator|=
name|sharedCachePolicy
operator|==
literal|null
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|sharedCachePolicy
expr_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|linkName
argument_list|,
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|type
argument_list|,
name|visibilities
index|[
name|i
index|]
condition|?
name|LocalResourceVisibility
operator|.
name|PUBLIC
else|:
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
name|timestamps
index|[
name|i
index|]
argument_list|,
name|sharedCachePolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getResourceDescription (LocalResourceType type)
specifier|private
specifier|static
name|String
name|getResourceDescription
parameter_list|(
name|LocalResourceType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|LocalResourceType
operator|.
name|ARCHIVE
operator|||
name|type
operator|==
name|LocalResourceType
operator|.
name|PATTERN
condition|)
block|{
return|return
literal|"cache archive ("
operator|+
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES
operator|+
literal|") "
return|;
block|}
return|return
literal|"cache file ("
operator|+
name|MRJobConfig
operator|.
name|CACHE_FILES
operator|+
literal|") "
return|;
block|}
block|}
end_class

end_unit

