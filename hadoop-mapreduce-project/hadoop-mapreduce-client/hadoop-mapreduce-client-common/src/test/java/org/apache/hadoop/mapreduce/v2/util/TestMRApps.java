begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestMRApps
specifier|public
class|class
name|TestMRApps
block|{
DECL|method|testJobIDtoString ()
annotation|@
name|Test
specifier|public
name|void
name|testJobIDtoString
parameter_list|()
block|{
name|JobId
name|jid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|jid
operator|.
name|setAppId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job_0_0_0"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|jid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToJobID ()
annotation|@
name|Test
specifier|public
name|void
name|testToJobID
parameter_list|()
block|{
name|JobId
name|jid
init|=
name|MRApps
operator|.
name|toJobID
argument_list|(
literal|"job_1_1_1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIDShort ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testJobIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toJobID
argument_list|(
literal|"job_0_0"
argument_list|)
expr_stmt|;
block|}
comment|//TODO_get.set
DECL|method|testTaskIDtoString ()
annotation|@
name|Test
specifier|public
name|void
name|testTaskIDtoString
parameter_list|()
block|{
name|TaskId
name|tid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|tid
operator|.
name|setJobId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|setAppId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|TaskType
name|type
init|=
name|tid
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|TaskType
operator|.
name|REDUCE
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_0_0_0_m_0"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_0_0_0_r_0"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToTaskID ()
annotation|@
name|Test
specifier|public
name|void
name|testToTaskID
parameter_list|()
block|{
name|TaskId
name|tid
init|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_1_2_3_r_4"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tid
operator|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_1_2_3_m_4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskIDShort ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTaskIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_0_0_0_m"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskIDBadType ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTaskIDBadType
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_0_0_0_x_0"
argument_list|)
expr_stmt|;
block|}
comment|//TODO_get.set
DECL|method|testTaskAttemptIDtoString ()
annotation|@
name|Test
specifier|public
name|void
name|testTaskAttemptIDtoString
parameter_list|()
block|{
name|TaskAttemptId
name|taid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taid
operator|.
name|setTaskId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|setJobId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|setAppId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attempt_0_0_0_m_0_0"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|taid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToTaskAttemptID ()
annotation|@
name|Test
specifier|public
name|void
name|testToTaskAttemptID
parameter_list|()
block|{
name|TaskAttemptId
name|taid
init|=
name|MRApps
operator|.
name|toTaskAttemptID
argument_list|(
literal|"attempt_0_1_2_m_3_4"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|taid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskAttemptIDShort ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTaskAttemptIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskAttemptID
argument_list|(
literal|"attempt_0_0_0_m_0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetJobFileWithUser ()
annotation|@
name|Test
specifier|public
name|void
name|testGetJobFileWithUser
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
literal|"/my/path/to/staging"
argument_list|)
expr_stmt|;
name|String
name|jobFile
init|=
name|MRApps
operator|.
name|getJobFile
argument_list|(
name|conf
argument_list|,
literal|"dummy-user"
argument_list|,
operator|new
name|JobID
argument_list|(
literal|"dummy-job"
argument_list|,
literal|12345
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getJobFile results in null."
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jobFile with specified user is not as expected."
argument_list|,
literal|"/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml"
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetClasspath ()
annotation|@
name|Test
specifier|public
name|void
name|testSetClasspath
parameter_list|()
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|environment
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$HADOOP_CONF_DIR:"
operator|+
literal|"$HADOOP_COMMON_HOME/share/hadoop/common/*:"
operator|+
literal|"$HADOOP_COMMON_HOME/share/hadoop/common/lib/*:"
operator|+
literal|"$HADOOP_HDFS_HOME/share/hadoop/hdfs/*:"
operator|+
literal|"$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*:"
operator|+
literal|"$YARN_HOME/share/hadoop/mapreduce/*:"
operator|+
literal|"$YARN_HOME/share/hadoop/mapreduce/lib/*:"
operator|+
literal|"job.jar:$PWD/*"
argument_list|,
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetClasspathWithUserPrecendence ()
annotation|@
name|Test
specifier|public
name|void
name|testSetClasspathWithUserPrecendence
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got exception while setting classpath"
argument_list|)
expr_stmt|;
block|}
name|String
name|env_str
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!"
argument_list|,
name|env_str
operator|.
name|indexOf
argument_list|(
literal|"job.jar"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetClasspathWithNoUserPrecendence ()
annotation|@
name|Test
specifier|public
name|void
name|testSetClasspathWithNoUserPrecendence
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got exception while setting classpath"
argument_list|)
expr_stmt|;
block|}
name|String
name|env_str
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, but taking effect!"
argument_list|,
name|env_str
operator|.
name|indexOf
argument_list|(
literal|"job.jar"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

