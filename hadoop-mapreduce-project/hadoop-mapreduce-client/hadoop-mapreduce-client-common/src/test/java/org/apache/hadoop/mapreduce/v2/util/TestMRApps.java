begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InvalidJobConfException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMRApps
specifier|public
class|class
name|TestMRApps
block|{
DECL|field|testWorkDir
specifier|private
specifier|static
name|File
name|testWorkDir
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupTestDirs ()
specifier|public
specifier|static
name|void
name|setupTestDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|testWorkDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestMRApps
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|testWorkDir
argument_list|)
expr_stmt|;
name|testWorkDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testWorkDir
operator|=
name|testWorkDir
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanupTestDirs ()
specifier|public
specifier|static
name|void
name|cleanupTestDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testWorkDir
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|testWorkDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|delete (File dir)
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testJobIDtoString ()
specifier|public
name|void
name|testJobIDtoString
parameter_list|()
block|{
name|JobId
name|jid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|jid
operator|.
name|setAppId
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"job_0_0000"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|jid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testToJobID ()
specifier|public
name|void
name|testToJobID
parameter_list|()
block|{
name|JobId
name|jid
init|=
name|MRApps
operator|.
name|toJobID
argument_list|(
literal|"job_1_1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// tests against some proto.id and not a job.id field
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testJobIDShort ()
specifier|public
name|void
name|testJobIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toJobID
argument_list|(
literal|"job_0_0_0"
argument_list|)
expr_stmt|;
block|}
comment|//TODO_get.set
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTaskIDtoString ()
specifier|public
name|void
name|testTaskIDtoString
parameter_list|()
block|{
name|TaskId
name|tid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|tid
operator|.
name|setJobId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|setAppId
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|TaskType
name|type
init|=
name|tid
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|TaskType
operator|.
name|REDUCE
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_0_0000_m_000000"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_0_0000_r_000000"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|tid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testToTaskID ()
specifier|public
name|void
name|testToTaskID
parameter_list|()
block|{
name|TaskId
name|tid
init|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_1_2_r_3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tid
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tid
operator|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_1_2_m_3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|tid
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testTaskIDShort ()
specifier|public
name|void
name|testTaskIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_0_0000_m"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testTaskIDBadType ()
specifier|public
name|void
name|testTaskIDBadType
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskID
argument_list|(
literal|"task_0_0000_x_000000"
argument_list|)
expr_stmt|;
block|}
comment|//TODO_get.set
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTaskAttemptIDtoString ()
specifier|public
name|void
name|testTaskAttemptIDtoString
parameter_list|()
block|{
name|TaskAttemptId
name|taid
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taid
operator|.
name|setTaskId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|setJobId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|setAppId
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attempt_0_0000_m_000000_0"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|taid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testToTaskAttemptID ()
specifier|public
name|void
name|testToTaskAttemptID
parameter_list|()
block|{
name|TaskAttemptId
name|taid
init|=
name|MRApps
operator|.
name|toTaskAttemptID
argument_list|(
literal|"attempt_0_1_m_2_3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taid
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testTaskAttemptIDShort ()
specifier|public
name|void
name|testTaskAttemptIDShort
parameter_list|()
block|{
name|MRApps
operator|.
name|toTaskAttemptID
argument_list|(
literal|"attempt_0_0_0_m_0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testGetJobFileWithUser ()
specifier|public
name|void
name|testGetJobFileWithUser
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
literal|"/my/path/to/staging"
argument_list|)
expr_stmt|;
name|String
name|jobFile
init|=
name|MRApps
operator|.
name|getJobFile
argument_list|(
name|conf
argument_list|,
literal|"dummy-user"
argument_list|,
operator|new
name|JobID
argument_list|(
literal|"dummy-job"
argument_list|,
literal|12345
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getJobFile results in null."
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jobFile with specified user is not as expected."
argument_list|,
literal|"/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml"
argument_list|,
name|jobFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetClasspath ()
specifier|public
name|void
name|testSetClasspath
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|environment
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|startsWith
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|yarnAppClasspath
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|yarnAppClasspath
operator|!=
literal|null
condition|)
block|{
name|yarnAppClasspath
operator|=
name|yarnAppClasspath
operator|.
name|replaceAll
argument_list|(
literal|",\\s*"
argument_list|,
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|contains
argument_list|(
name|yarnAppClasspath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mrAppClasspath
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_CLASSPATH
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|mrAppClasspath
operator|!=
literal|null
condition|)
block|{
name|mrAppClasspath
operator|=
name|mrAppClasspath
operator|.
name|replaceAll
argument_list|(
literal|",\\s*"
argument_list|,
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|contains
argument_list|(
name|mrAppClasspath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetClasspathWithArchives ()
specifier|public
name|void
name|testSetClasspathWithArchives
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testTGZ
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
literal|"test.tgz"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|testTGZ
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|String
name|testTGZQualifiedPath
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testTGZ
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CLASSPATH_ARCHIVES
argument_list|,
name|testTGZQualifiedPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES
argument_list|,
name|testTGZQualifiedPath
operator|+
literal|"#testTGZ"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|environment
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|startsWith
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|confClasspath
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|confClasspath
operator|!=
literal|null
condition|)
block|{
name|confClasspath
operator|=
name|confClasspath
operator|.
name|replaceAll
argument_list|(
literal|",\\s*"
argument_list|,
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|contains
argument_list|(
name|confClasspath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|environment
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"testTGZ"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetClasspathWithUserPrecendence ()
specifier|public
name|void
name|testSetClasspathWithUserPrecendence
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got exception while setting classpath"
argument_list|)
expr_stmt|;
block|}
name|String
name|env_str
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|String
name|expectedClasspath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
argument_list|,
literal|"job.jar/job.jar"
argument_list|,
literal|"job.jar/classes/"
argument_list|,
literal|"job.jar/lib/*"
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!"
argument_list|,
name|env_str
operator|.
name|startsWith
argument_list|(
name|expectedClasspath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetClasspathWithNoUserPrecendence ()
specifier|public
name|void
name|testSetClasspathWithNoUserPrecendence
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got exception while setting classpath"
argument_list|)
expr_stmt|;
block|}
name|String
name|env_str
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|String
name|expectedClasspath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"job.jar/job.jar"
argument_list|,
literal|"job.jar/classes/"
argument_list|,
literal|"job.jar/lib/*"
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, and job.jar is not in"
operator|+
literal|" the classpath!"
argument_list|,
name|env_str
operator|.
name|contains
argument_list|(
name|expectedClasspath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, but taking effect!"
argument_list|,
name|env_str
operator|.
name|startsWith
argument_list|(
name|expectedClasspath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetClasspathWithJobClassloader ()
specifier|public
name|void
name|testSetClasspathWithJobClassloader
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_CLASSLOADER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|cp
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|String
name|appCp
init|=
name|env
operator|.
name|get
argument_list|(
literal|"APP_CLASSPATH"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"MAPREDUCE_JOB_CLASSLOADER true, but job.jar is in the"
operator|+
literal|" classpath!"
argument_list|,
name|cp
operator|.
name|contains
argument_list|(
literal|"jar"
operator|+
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
operator|+
literal|"job"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"MAPREDUCE_JOB_CLASSLOADER true, but PWD is in the classpath!"
argument_list|,
name|cp
operator|.
name|contains
argument_list|(
literal|"PWD"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedAppClasspath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
argument_list|,
literal|"job.jar/job.jar"
argument_list|,
literal|"job.jar/classes/"
argument_list|,
literal|"job.jar/lib/*"
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MAPREDUCE_JOB_CLASSLOADER true, but job.jar is not in the app"
operator|+
literal|" classpath!"
argument_list|,
name|expectedAppClasspath
argument_list|,
name|appCp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testSetClasspathWithFramework ()
specifier|public
name|void
name|testSetClasspathWithFramework
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|FRAMEWORK_NAME
init|=
literal|"some-framework-name"
decl_stmt|;
specifier|final
name|String
name|FRAMEWORK_PATH
init|=
literal|"some-framework-path#"
operator|+
name|FRAMEWORK_NAME
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_FRAMEWORK_PATH
argument_list|,
name|FRAMEWORK_PATH
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to catch framework path set without classpath change"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected IllegalArgumentException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Could not locate MapReduce framework name '"
operator|+
name|FRAMEWORK_NAME
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|String
name|FRAMEWORK_CLASSPATH
init|=
name|FRAMEWORK_NAME
operator|+
literal|"/*.jar"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_APPLICATION_CLASSPATH
argument_list|,
name|FRAMEWORK_CLASSPATH
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|stdClasspath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"job.jar/job.jar"
argument_list|,
literal|"job.jar/classes/"
argument_list|,
literal|"job.jar/lib/*"
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
operator|+
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedClasspath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
argument_list|,
name|FRAMEWORK_CLASSPATH
argument_list|,
name|stdClasspath
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect classpath with framework and no user precedence"
argument_list|,
name|expectedClasspath
argument_list|,
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|clear
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_USER_CLASSPATH_FIRST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|expectedClasspath
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|PWD
operator|.
name|$$
argument_list|()
argument_list|,
name|stdClasspath
argument_list|,
name|FRAMEWORK_CLASSPATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect classpath with framework and user precedence"
argument_list|,
name|expectedClasspath
argument_list|,
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetupDistributedCacheEmpty ()
specifier|public
name|void
name|testSetupDistributedCacheEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty Config did not produce an empty list of resources"
argument_list|,
name|localResources
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|InvalidJobConfException
operator|.
name|class
argument_list|)
DECL|method|testSetupDistributedCacheConflicts ()
specifier|public
name|void
name|testSetupDistributedCacheConflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|URI
name|mockUri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"mockfs://mock/"
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|mockUri
argument_list|,
name|conf
argument_list|)
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|URI
name|archive
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.zip#something"
argument_list|)
decl_stmt|;
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|URI
name|file
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.txt#something"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|archivePath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|archivePath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|filePath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheArchive
argument_list|(
name|archive
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_TIMESTAMPS
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_SIZES
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_VISIBILITIES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|,
name|expected
operator|=
name|InvalidJobConfException
operator|.
name|class
argument_list|)
DECL|method|testSetupDistributedCacheConflictsFiles ()
specifier|public
name|void
name|testSetupDistributedCacheConflictsFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|URI
name|mockUri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"mockfs://mock/"
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|mockUri
argument_list|,
name|conf
argument_list|)
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|URI
name|file
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.zip#something"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|URI
name|file2
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.txt#something"
argument_list|)
decl_stmt|;
name|Path
name|file2Path
init|=
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|filePath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|file2Path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|file2Path
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|file2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
literal|"10,11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
literal|"10,11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|,
literal|"true,true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetupDistributedCache ()
specifier|public
name|void
name|testSetupDistributedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|URI
name|mockUri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"mockfs://mock/"
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|mockUri
argument_list|,
name|conf
argument_list|)
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|URI
name|archive
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.zip"
argument_list|)
decl_stmt|;
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|URI
name|file
init|=
operator|new
name|URI
argument_list|(
literal|"mockfs://mock/tmp/something.txt#something"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|archivePath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|archivePath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|resolvePath
argument_list|(
name|filePath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheArchive
argument_list|(
name|archive
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_TIMESTAMPS
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_SIZES
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_ARCHIVES_VISIBILITIES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|localResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResource
name|lr
init|=
name|localResources
operator|.
name|get
argument_list|(
literal|"something.zip"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10l
argument_list|,
name|lr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10l
argument_list|,
name|lr
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|lr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|lr
operator|=
name|localResources
operator|.
name|get
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|lr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11l
argument_list|,
name|lr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11l
argument_list|,
name|lr
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|lr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
annotation|@
name|Test
DECL|method|testLogSystemProperties ()
specifier|public
name|void
name|testLogSystemProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test no logging
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|MRApps
operator|.
name|getSystemPropertiesToLog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// test logging of selected keys
name|String
name|classpath
init|=
literal|"java.class.path"
decl_stmt|;
name|String
name|os
init|=
literal|"os.name"
decl_stmt|;
name|String
name|version
init|=
literal|"java.version"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG
argument_list|,
name|classpath
operator|+
literal|", "
operator|+
name|os
argument_list|)
expr_stmt|;
name|value
operator|=
name|MRApps
operator|.
name|getSystemPropertiesToLog
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|contains
argument_list|(
name|classpath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|contains
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|contains
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskStateUI ()
specifier|public
name|void
name|testTaskStateUI
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|MRApps
operator|.
name|TaskStateUI
operator|.
name|PENDING
operator|.
name|correspondsTo
argument_list|(
name|TaskState
operator|.
name|SCHEDULED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MRApps
operator|.
name|TaskStateUI
operator|.
name|COMPLETED
operator|.
name|correspondsTo
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MRApps
operator|.
name|TaskStateUI
operator|.
name|COMPLETED
operator|.
name|correspondsTo
argument_list|(
name|TaskState
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MRApps
operator|.
name|TaskStateUI
operator|.
name|COMPLETED
operator|.
name|correspondsTo
argument_list|(
name|TaskState
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MRApps
operator|.
name|TaskStateUI
operator|.
name|RUNNING
operator|.
name|correspondsTo
argument_list|(
name|TaskState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|SYS_CLASSES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SYS_CLASSES
init|=
operator|new
name|String
index|[]
block|{
literal|"/java/fake/Klass"
block|,
literal|"/javax/management/fake/Klass"
block|,
literal|"/org/apache/commons/logging/fake/Klass"
block|,
literal|"/org/apache/log4j/fake/Klass"
block|,
literal|"/org/apache/hadoop/fake/Klass"
block|}
decl_stmt|;
DECL|field|DEFAULT_XMLS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_XMLS
init|=
operator|new
name|String
index|[]
block|{
literal|"core-default.xml"
block|,
literal|"mapred-default.xml"
block|,
literal|"hdfs-default.xml"
block|,
literal|"yarn-default.xml"
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testSystemClasses ()
specifier|public
name|void
name|testSystemClasses
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|systemClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|ApplicationClassLoader
operator|.
name|SYSTEM_CLASSES_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|defaultXml
range|:
name|DEFAULT_XMLS
control|)
block|{
name|assertTrue
argument_list|(
name|defaultXml
operator|+
literal|" must be system resource"
argument_list|,
name|ApplicationClassLoader
operator|.
name|isSystemClass
argument_list|(
name|defaultXml
argument_list|,
name|systemClasses
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|klass
range|:
name|SYS_CLASSES
control|)
block|{
name|assertTrue
argument_list|(
name|klass
operator|+
literal|" must be system class"
argument_list|,
name|ApplicationClassLoader
operator|.
name|isSystemClass
argument_list|(
name|klass
argument_list|,
name|systemClasses
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"/fake/Klass must not be a system class"
argument_list|,
name|ApplicationClassLoader
operator|.
name|isSystemClass
argument_list|(
literal|"/fake/Klass"
argument_list|,
name|systemClasses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

