begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|APP_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockJobs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|MRClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|amfilter
operator|.
name|AmFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
operator|.
name|WebAppTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|java
operator|.
name|lang
operator|.
name|system
operator|.
name|EnvironmentVariables
import|;
end_import

begin_class
DECL|class|TestAMWebApp
specifier|public
class|class
name|TestAMWebApp
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestAMWebApp
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TEST_DIR
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppControllerIndex ()
annotation|@
name|Test
specifier|public
name|void
name|testAppControllerIndex
parameter_list|()
block|{
name|AppContext
name|ctx
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|AppContext
operator|.
name|class
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|AppController
name|controller
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|AppController
operator|.
name|class
argument_list|)
decl_stmt|;
name|controller
operator|.
name|index
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ctx
operator|.
name|getApplicationID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|controller
operator|.
name|get
argument_list|(
name|APP_ID
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppView ()
annotation|@
name|Test
specifier|public
name|void
name|testAppView
parameter_list|()
block|{
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|AppView
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobView ()
annotation|@
name|Test
specifier|public
name|void
name|testJobView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getJobParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|JobPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|testTasksView ()
annotation|@
name|Test
specifier|public
name|void
name|testTasksView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getTaskParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|TasksPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskView ()
annotation|@
name|Test
specifier|public
name|void
name|testTaskView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getTaskParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|App
name|app
init|=
operator|new
name|App
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|app
operator|.
name|setJob
argument_list|(
name|appContext
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|setTask
argument_list|(
name|app
operator|.
name|getJob
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|TaskPage
operator|.
name|class
argument_list|,
name|App
operator|.
name|class
argument_list|,
name|app
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobParams (AppContext appContext)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJobParams
parameter_list|(
name|AppContext
name|appContext
parameter_list|)
block|{
name|JobId
name|jobId
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|JOB_ID
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|getTaskParams (AppContext appContext)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTaskParams
parameter_list|(
name|AppContext
name|appContext
parameter_list|)
block|{
name|JobId
name|jobId
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|e
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|JOB_ID
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|TASK_ID
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|TASK_TYPE
argument_list|,
name|MRApps
operator|.
name|taskSymbol
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|testConfView ()
annotation|@
name|Test
specifier|public
name|void
name|testConfView
parameter_list|()
block|{
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|JobConfPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCountersView ()
annotation|@
name|Test
specifier|public
name|void
name|testCountersView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getJobParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|CountersPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleCounterView ()
annotation|@
name|Test
specifier|public
name|void
name|testSingleCounterView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// add a failed task to the job without any counters
name|Task
name|failedTask
init|=
name|MockJobs
operator|.
name|newTask
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|put
argument_list|(
name|failedTask
operator|.
name|getID
argument_list|()
argument_list|,
name|failedTask
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getJobParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|COUNTER_GROUP
argument_list|,
literal|"org.apache.hadoop.mapreduce.FileSystemCounter"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|COUNTER_NAME
argument_list|,
literal|"HDFS_WRITE_OPS"
argument_list|)
expr_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|SingleCounterPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskCountersView ()
annotation|@
name|Test
specifier|public
name|void
name|testTaskCountersView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getTaskParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|CountersPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleTaskCounterView ()
annotation|@
name|Test
specifier|public
name|void
name|testSingleTaskCounterView
parameter_list|()
block|{
name|AppContext
name|appContext
init|=
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|getTaskParams
argument_list|(
name|appContext
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|COUNTER_GROUP
argument_list|,
literal|"org.apache.hadoop.mapreduce.FileSystemCounter"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|AMParams
operator|.
name|COUNTER_NAME
argument_list|,
literal|"HDFS_WRITE_OPS"
argument_list|)
expr_stmt|;
comment|// remove counters from one task attempt
comment|// to test handling of missing counters
name|TaskId
name|taskID
init|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AMParams
operator|.
name|TASK_ID
argument_list|)
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|taskID
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|attempt
operator|.
name|getReport
argument_list|()
operator|.
name|setCounters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|SingleCounterPage
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
name|appContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRWebAppSSLDisabled ()
specifier|public
name|void
name|testMRWebAppSSLDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// MR is explicitly disabling SSL, even though YARN setting as HTTPS_ONLY
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_HTTP_POLICY_KEY
argument_list|,
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|hostPort
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
operator|(
operator|(
name|MRClientService
operator|)
name|app
operator|.
name|getClientService
argument_list|()
operator|)
operator|.
name|getWebApp
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// http:// should be accessible
name|URL
name|httpUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|hostPort
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MapReduce Application"
argument_list|)
argument_list|)
expr_stmt|;
comment|// https:// is not accessible.
name|URL
name|httpsUrl
init|=
operator|new
name|URL
argument_list|(
literal|"https://"
operator|+
name|hostPort
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|httpsConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpsUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|httpsConn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"https:// is not accessible, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|environmentVariables
specifier|public
specifier|final
name|EnvironmentVariables
name|environmentVariables
init|=
operator|new
name|EnvironmentVariables
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testMRWebAppSSLEnabled ()
specifier|public
name|void
name|testMRWebAppSSLEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_WEBAPP_HTTPS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|KeyPair
name|keyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|Certificate
name|cert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo"
argument_list|,
name|keyPair
argument_list|,
literal|5
argument_list|,
literal|"SHA512WITHRSA"
argument_list|)
decl_stmt|;
name|File
name|keystoreFile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"server.keystore"
argument_list|)
decl_stmt|;
name|keystoreFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|createKeyStore
argument_list|(
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"password"
argument_list|,
literal|"server"
argument_list|,
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|cert
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"KEYSTORE_FILE_LOCATION"
argument_list|,
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"KEYSTORE_PASSWORD"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|hostPort
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
operator|(
operator|(
name|MRClientService
operator|)
name|app
operator|.
name|getClientService
argument_list|()
operator|)
operator|.
name|getWebApp
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// https:// should be accessible
name|URL
name|httpsUrl
init|=
operator|new
name|URL
argument_list|(
literal|"https://"
operator|+
name|hostPort
argument_list|)
decl_stmt|;
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|httpsUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setAllowAllSSL
argument_list|(
name|httpsConn
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpsConn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MapReduce Application"
argument_list|)
argument_list|)
expr_stmt|;
comment|// http:// is not accessible.
name|URL
name|httpUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|hostPort
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|httpConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|httpConn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"http:// is not accessible, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|keystoreFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRWebAppSSLEnabledWithClientAuth ()
specifier|public
name|void
name|testMRWebAppSSLEnabledWithClientAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_WEBAPP_HTTPS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_WEBAPP_HTTPS_CLIENT_AUTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|KeyPair
name|keyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|Certificate
name|cert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=foo"
argument_list|,
name|keyPair
argument_list|,
literal|5
argument_list|,
literal|"SHA512WITHRSA"
argument_list|)
decl_stmt|;
name|File
name|keystoreFile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"server.keystore"
argument_list|)
decl_stmt|;
name|keystoreFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|createKeyStore
argument_list|(
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"password"
argument_list|,
literal|"server"
argument_list|,
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|cert
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"KEYSTORE_FILE_LOCATION"
argument_list|,
name|keystoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"KEYSTORE_PASSWORD"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|KeyPair
name|clientKeyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|X509Certificate
name|clientCert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=bar"
argument_list|,
name|clientKeyPair
argument_list|,
literal|5
argument_list|,
literal|"SHA512WITHRSA"
argument_list|)
decl_stmt|;
name|File
name|truststoreFile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"client.truststore"
argument_list|)
decl_stmt|;
name|truststoreFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|createTrustStore
argument_list|(
name|truststoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"password"
argument_list|,
literal|"client"
argument_list|,
name|clientCert
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"TRUSTSTORE_FILE_LOCATION"
argument_list|,
name|truststoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|environmentVariables
operator|.
name|set
argument_list|(
literal|"TRUSTSTORE_PASSWORD"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|hostPort
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
operator|(
operator|(
name|MRClientService
operator|)
name|app
operator|.
name|getClientService
argument_list|()
operator|)
operator|.
name|getWebApp
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// https:// should be accessible
name|URL
name|httpsUrl
init|=
operator|new
name|URL
argument_list|(
literal|"https://"
operator|+
name|hostPort
argument_list|)
decl_stmt|;
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|httpsUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setAllowAllSSL
argument_list|(
name|httpsConn
argument_list|,
name|clientCert
argument_list|,
name|clientKeyPair
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpsConn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MapReduce Application"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try with wrong client cert
name|KeyPair
name|otherClientKeyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|X509Certificate
name|otherClientCert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=bar"
argument_list|,
name|otherClientKeyPair
argument_list|,
literal|5
argument_list|,
literal|"SHA512WITHRSA"
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setAllowAllSSL
argument_list|(
name|httpsConn
argument_list|,
name|otherClientCert
argument_list|,
name|clientKeyPair
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpURLConnection
name|httpConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpsUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|httpConn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong client certificate, expected to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|keystoreFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|truststoreFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|field|webProxyBase
specifier|static
name|String
name|webProxyBase
init|=
literal|null
decl_stmt|;
DECL|class|TestAMFilterInitializer
specifier|public
specifier|static
class|class
name|TestAMFilterInitializer
extends|extends
name|AmFilterInitializer
block|{
annotation|@
name|Override
DECL|method|getApplicationWebProxyBase ()
specifier|protected
name|String
name|getApplicationWebProxyBase
parameter_list|()
block|{
return|return
name|webProxyBase
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMRWebAppRedirection ()
specifier|public
name|void
name|testMRWebAppRedirection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|schemePrefix
init|=
block|{
name|WebAppUtils
operator|.
name|HTTP_PREFIX
block|,
name|WebAppUtils
operator|.
name|HTTPS_PREFIX
block|}
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|schemePrefix
control|)
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|,
literal|"9.9.9.9"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_HTTP_POLICY_KEY
argument_list|,
name|scheme
operator|.
name|equals
argument_list|(
name|WebAppUtils
operator|.
name|HTTPS_PREFIX
argument_list|)
condition|?
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
else|:
name|Policy
operator|.
name|HTTP_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|webProxyBase
operator|=
literal|"/proxy/"
operator|+
name|app
operator|.
name|getAppID
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
name|TestAMFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|hostPort
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
operator|(
operator|(
name|MRClientService
operator|)
name|app
operator|.
name|getClientService
argument_list|()
operator|)
operator|.
name|getWebApp
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|httpUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|hostPort
operator|+
literal|"/mapreduce"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Because we're not calling from the proxy's address, we'll be redirected
name|String
name|expectedURL
init|=
name|scheme
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|)
operator|+
name|ProxyUriUtils
operator|.
name|getPath
argument_list|(
name|app
operator|.
name|getAppID
argument_list|()
argument_list|,
literal|"/mapreduce"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedURL
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_MOVED_TEMPORARILY
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|WebApps
operator|.
name|$for
argument_list|(
literal|"yarn"
argument_list|,
name|AppContext
operator|.
name|class
argument_list|,
operator|new
name|MockAppContext
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|88
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|at
argument_list|(
literal|58888
argument_list|)
operator|.
name|inDevMode
argument_list|()
operator|.
name|start
argument_list|(
operator|new
name|AMWebApp
argument_list|()
argument_list|)
operator|.
name|joinThread
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

