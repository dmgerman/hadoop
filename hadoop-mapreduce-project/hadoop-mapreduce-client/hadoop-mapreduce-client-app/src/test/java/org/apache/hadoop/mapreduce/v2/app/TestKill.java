begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskTAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the state machine with respect to Job/Task/TaskAttempt kill scenarios.  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestKill
specifier|public
class|class
name|TestKill
block|{
annotation|@
name|Test
DECL|method|testKillJob ()
specifier|public
name|void
name|testKillJob
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|BlockingMRApp
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|latch
argument_list|)
decl_stmt|;
comment|//this will start the job but job won't complete as task is
comment|//blocked
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|//wait and vailidate for Job to become RUNNING
name|app
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the kill signal to Job
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|//unblock Task
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|//wait and validate for Job to be KILLED
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// make sure all events are processed. The AM is stopped
comment|// only when all tasks and task attempts have been killed
name|app
operator|.
name|waitForState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks is not correct"
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|KILLED
argument_list|,
name|task
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of attempts is not correct"
argument_list|,
literal|1
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|it
init|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillTask ()
specifier|public
name|void
name|testKillTask
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|jobRunning
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
block|{
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// We have to wait until the internal state is RUNNING and not SETUP
comment|// because it can cause a transition failure. If the dispatchable
comment|// event is TASK_STARTED, we can continue because the job must be in
comment|// RUNNING at that point.
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|TASK_STARTED
condition|)
block|{
name|jobRunning
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|BlockingMRApp
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|latch
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
comment|//this will start the job but job won't complete as Task is blocked
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// wait until the job transitions to JobInternalState.RUNNING
name|jobRunning
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks is not correct"
argument_list|,
literal|2
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|task1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|task2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//send the kill signal to the first Task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|task1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|//unblock Task
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|//wait and validate for Job to become SUCCEEDED
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//first Task is killed and second is Succeeded
comment|//Job is succeeded
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|KILLED
argument_list|,
name|task1
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|task2
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|task1
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of attempts is not correct"
argument_list|,
literal|1
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|iter
init|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|attempts
operator|=
name|task2
operator|.
name|getAttempts
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of attempts is not correct"
argument_list|,
literal|1
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillTaskWait ()
specifier|public
name|void
name|testKillTaskWait
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
block|{
specifier|private
name|TaskAttemptEvent
name|cachedKillEvent
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptEvent
condition|)
block|{
name|TaskAttemptEvent
name|killEvent
init|=
operator|(
name|TaskAttemptEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|killEvent
operator|.
name|getType
argument_list|()
operator|==
name|TaskAttemptEventType
operator|.
name|TA_KILL
condition|)
block|{
name|TaskAttemptId
name|taID
init|=
name|killEvent
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
if|if
condition|(
name|taID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
operator|&&
name|taID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|&&
name|taID
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Task is asking the reduce TA to kill itself. 'Create' a race
comment|// condition. Make the task succeed and then inform the task that
comment|// TA has succeeded. Once Task gets the TA succeeded event at
comment|// KILL_WAIT, then relay the actual kill signal to TA
name|super
operator|.
name|dispatch
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|dispatch
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|taID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|dispatch
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taID
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cachedKillEvent
operator|=
name|killEvent
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskEvent
condition|)
block|{
name|TaskEvent
name|taskEvent
init|=
operator|(
name|TaskEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|taskEvent
operator|.
name|getType
argument_list|()
operator|==
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
operator|&&
name|this
operator|.
name|cachedKillEvent
operator|!=
literal|null
condition|)
block|{
comment|// When the TA comes and reports that it is done, send the
comment|// cachedKillEvent
name|super
operator|.
name|dispatch
argument_list|(
name|this
operator|.
name|cachedKillEvent
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|app
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Finish map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Now kill the job
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillTaskWaitKillJobAfterTA_DONE ()
specifier|public
name|void
name|testKillTaskWaitKillJobAfterTA_DONE
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|MyAsyncDispatch
argument_list|(
name|latch
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|app
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// The order in the dispatch event queue, from first to last
comment|// TA_DONE
comment|// JobEventType.JOB_KILL
comment|// TaskAttemptEventType.TA_CONTAINER_COMPLETED ( from TA_DONE handling )
comment|// TaskEventType.T_KILL ( from JobEventType.JOB_KILL handling )
comment|// TaskEventType.T_ATTEMPT_SUCCEEDED ( from TA_CONTAINER_COMPLETED handling )
comment|// Finish map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now kill the job
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|//unblock
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|app
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillTaskWaitKillJobBeforeTA_DONE ()
specifier|public
name|void
name|testKillTaskWaitKillJobBeforeTA_DONE
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|MyAsyncDispatch
argument_list|(
name|latch
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|app
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// The order in the dispatch event queue, from first to last
comment|// JobEventType.JOB_KILL
comment|// TA_DONE
comment|// TaskEventType.T_KILL ( from JobEventType.JOB_KILL handling )
comment|// TaskAttemptEventType.TA_CONTAINER_COMPLETED ( from TA_DONE handling )
comment|// TaskAttemptEventType.TA_KILL ( from TaskEventType.T_KILL handling )
comment|// TaskEventType.T_ATTEMPT_SUCCEEDED ( from TA_CONTAINER_COMPLETED handling )
comment|// TaskEventType.T_ATTEMPT_KILLED ( from TA_KILL handling )
comment|// Now kill the job
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//unblock
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|app
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
DECL|class|MyAsyncDispatch
specifier|static
class|class
name|MyAsyncDispatch
extends|extends
name|AsyncDispatcher
block|{
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|attemptEventTypeToWait
specifier|private
name|TaskAttemptEventType
name|attemptEventTypeToWait
decl_stmt|;
DECL|field|jobEventTypeToWait
specifier|private
name|JobEventType
name|jobEventTypeToWait
decl_stmt|;
DECL|method|MyAsyncDispatch (CountDownLatch latch, TaskAttemptEventType attemptEventTypeToWait)
name|MyAsyncDispatch
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|,
name|TaskAttemptEventType
name|attemptEventTypeToWait
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|attemptEventTypeToWait
operator|=
name|attemptEventTypeToWait
expr_stmt|;
block|}
DECL|method|MyAsyncDispatch (CountDownLatch latch, JobEventType jobEventTypeToWait)
name|MyAsyncDispatch
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|,
name|JobEventType
name|jobEventTypeToWait
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|jobEventTypeToWait
operator|=
name|jobEventTypeToWait
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptEvent
condition|)
block|{
name|TaskAttemptEvent
name|attemptEvent
init|=
operator|(
name|TaskAttemptEvent
operator|)
name|event
decl_stmt|;
name|TaskAttemptId
name|attemptID
init|=
operator|(
operator|(
name|TaskAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptEvent
operator|.
name|getType
argument_list|()
operator|==
name|this
operator|.
name|attemptEventTypeToWait
operator|&&
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|&&
name|attemptID
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobEvent
condition|)
block|{
name|JobEvent
name|jobEvent
init|=
operator|(
name|JobEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|jobEvent
operator|.
name|getType
argument_list|()
operator|==
name|this
operator|.
name|jobEventTypeToWait
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKillTaskAttempt ()
specifier|public
name|void
name|testKillTaskAttempt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|BlockingMRApp
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|latch
argument_list|)
decl_stmt|;
comment|//this will start the job but job won't complete as Task is blocked
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|//wait and vailidate for Job to become RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks is not correct"
argument_list|,
literal|2
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|task1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|task2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//wait for tasks to become running
name|app
operator|.
name|waitForState
argument_list|(
name|task1
argument_list|,
name|TaskState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2
argument_list|,
name|TaskState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
comment|//send the kill signal to the first Task's attempt
name|TaskAttempt
name|attempt
init|=
name|task1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|//unblock
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|//wait and validate for Job to become SUCCEEDED
comment|//job will still succeed
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//first Task will have two attempts 1st is killed, 2nd Succeeds
comment|//both Tasks and Job succeeds
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|task1
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|task2
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|task1
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of attempts is not correct"
argument_list|,
literal|2
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|iter
init|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|attempts
operator|=
name|task2
operator|.
name|getAttempts
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of attempts is not correct"
argument_list|,
literal|1
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|BlockingMRApp
specifier|static
class|class
name|BlockingMRApp
extends|extends
name|MRApp
block|{
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|BlockingMRApp (int maps, int reduces, CountDownLatch latch)
name|BlockingMRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
literal|true
argument_list|,
literal|"testKill"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|0
operator|&&
name|attemptID
operator|.
name|getId
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//this blocks the first task's first attempt
comment|//the subsequent ones are completed
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestKill
name|t
init|=
operator|new
name|TestKill
argument_list|()
decl_stmt|;
name|t
operator|.
name|testKillJob
argument_list|()
expr_stmt|;
name|t
operator|.
name|testKillTask
argument_list|()
expr_stmt|;
name|t
operator|.
name|testKillTaskAttempt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

