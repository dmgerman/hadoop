begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|TaskReportPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockJobs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|proto
operator|.
name|MRProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestTaskReport
specifier|public
class|class
name|TestTaskReport
block|{
annotation|@
name|Test
DECL|method|testSetRawCounters ()
specifier|public
name|void
name|testSetRawCounters
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|rCounters
init|=
name|MockJobs
operator|.
name|newCounters
argument_list|()
decl_stmt|;
comment|// Set raw counters
name|report
operator|.
name|setRawCounters
argument_list|(
name|rCounters
argument_list|)
expr_stmt|;
comment|// Verify getCounters converts properly from raw to real
name|Counters
name|counters
init|=
name|report
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|null
argument_list|,
name|counters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildImplicitRawCounters ()
specifier|public
name|void
name|testBuildImplicitRawCounters
parameter_list|()
block|{
comment|// Create basic class
name|TaskReportPBImpl
name|report
init|=
operator|new
name|TaskReportPBImpl
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|rCounters
init|=
name|MockJobs
operator|.
name|newCounters
argument_list|()
decl_stmt|;
comment|// Set raw counters
name|report
operator|.
name|setRawCounters
argument_list|(
name|rCounters
argument_list|)
expr_stmt|;
comment|// Verify getProto method implicitly converts/sets real counters
name|MRProtos
operator|.
name|TaskReportProto
name|protoVal
init|=
name|report
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|protoVal
operator|.
name|hasCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCountersOverRawCounters ()
specifier|public
name|void
name|testCountersOverRawCounters
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|rCounters
init|=
name|MockJobs
operator|.
name|newCounters
argument_list|()
decl_stmt|;
name|Counters
name|altCounters
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|rCounters
argument_list|)
decl_stmt|;
comment|// Set raw counters
name|report
operator|.
name|setRawCounters
argument_list|(
name|rCounters
argument_list|)
expr_stmt|;
comment|// Set real counters
name|report
operator|.
name|setCounters
argument_list|(
name|altCounters
argument_list|)
expr_stmt|;
comment|// Verify real counters has priority over raw
name|Counters
name|counters
init|=
name|report
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|counters
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rCounters
argument_list|,
name|altCounters
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
argument_list|,
name|altCounters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUninitializedCounters ()
specifier|public
name|void
name|testUninitializedCounters
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Verify properties initialized to null
name|assertThat
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getRawCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetRawCountersToNull ()
specifier|public
name|void
name|testSetRawCountersToNull
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Set raw counters to null
name|report
operator|.
name|setRawCounters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Verify properties still null
name|assertThat
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getRawCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCountersToNull ()
specifier|public
name|void
name|testSetCountersToNull
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Set raw counters to null
name|report
operator|.
name|setCounters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Verify properties still null
name|assertThat
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getRawCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetNonNullCountersToNull ()
specifier|public
name|void
name|testSetNonNullCountersToNull
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Set raw counters
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|rCounters
init|=
name|MockJobs
operator|.
name|newCounters
argument_list|()
decl_stmt|;
name|report
operator|.
name|setRawCounters
argument_list|(
name|rCounters
argument_list|)
expr_stmt|;
comment|// Verify getCounters converts properly from raw to real
name|Counters
name|counters
init|=
name|report
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|null
argument_list|,
name|counters
argument_list|)
expr_stmt|;
comment|// Clear counters to null and then verify
name|report
operator|.
name|setCounters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getRawCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetNonNullRawCountersToNull ()
specifier|public
name|void
name|testSetNonNullRawCountersToNull
parameter_list|()
block|{
comment|// Create basic class
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Set raw counters
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|rCounters
init|=
name|MockJobs
operator|.
name|newCounters
argument_list|()
decl_stmt|;
name|report
operator|.
name|setRawCounters
argument_list|(
name|rCounters
argument_list|)
expr_stmt|;
comment|// Verify getCounters converts properly from raw to real
name|Counters
name|counters
init|=
name|report
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|null
argument_list|,
name|counters
argument_list|)
expr_stmt|;
comment|// Clear counters to null and then verify
name|report
operator|.
name|setRawCounters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|report
operator|.
name|getRawCounters
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

