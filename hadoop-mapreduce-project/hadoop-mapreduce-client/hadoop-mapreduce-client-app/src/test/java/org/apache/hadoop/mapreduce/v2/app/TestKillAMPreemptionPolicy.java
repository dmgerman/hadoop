begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRAppMaster
operator|.
name|RunningAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|AMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|KillAMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|StrictPreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKillAMPreemptionPolicy
specifier|public
class|class
name|TestKillAMPreemptionPolicy
block|{
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testKillAMPreemptPolicy ()
specifier|public
name|void
name|testKillAMPreemptPolicy
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456789
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AMPreemptionPolicy
operator|.
name|Context
name|mPctxt
init|=
name|mock
argument_list|(
name|AMPreemptionPolicy
operator|.
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mPctxt
operator|.
name|getTaskAttempt
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|p
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Container
operator|.
name|newInstance
argument_list|(
name|container
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mPctxt
operator|.
name|getContainers
argument_list|(
name|any
argument_list|(
name|TaskType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|KillAMPreemptionPolicy
name|policy
init|=
operator|new
name|KillAMPreemptionPolicy
argument_list|()
decl_stmt|;
comment|// strictContract is null& contract is null
name|RunningAppContext
name|mActxt
init|=
name|getRunningAppContext
argument_list|()
decl_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|mActxt
argument_list|)
expr_stmt|;
name|PreemptionMessage
name|pM
init|=
name|getPreemptionMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|policy
operator|.
name|preempt
argument_list|(
name|mPctxt
argument_list|,
name|pM
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|JobCounterUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// strictContract is not null& contract is null
name|mActxt
operator|=
name|getRunningAppContext
argument_list|()
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|mActxt
argument_list|)
expr_stmt|;
name|pM
operator|=
name|getPreemptionMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|policy
operator|.
name|preempt
argument_list|(
name|mPctxt
argument_list|,
name|pM
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|JobCounterUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// strictContract is null& contract is not null
name|mActxt
operator|=
name|getRunningAppContext
argument_list|()
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|mActxt
argument_list|)
expr_stmt|;
name|pM
operator|=
name|getPreemptionMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|policy
operator|.
name|preempt
argument_list|(
name|mPctxt
argument_list|,
name|pM
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|JobCounterUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// strictContract is not null& contract is not null
name|mActxt
operator|=
name|getRunningAppContext
argument_list|()
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|mActxt
argument_list|)
expr_stmt|;
name|pM
operator|=
name|getPreemptionMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|policy
operator|.
name|preempt
argument_list|(
name|mPctxt
argument_list|,
name|pM
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|JobCounterUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRunningAppContext ()
specifier|private
name|RunningAppContext
name|getRunningAppContext
parameter_list|()
block|{
name|RunningAppContext
name|mActxt
init|=
name|mock
argument_list|(
name|RunningAppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|?
argument_list|>
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mActxt
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
return|return
name|mActxt
return|;
block|}
DECL|method|getPreemptionMessage (boolean strictContract, boolean contract, final ContainerId container)
specifier|private
name|PreemptionMessage
name|getPreemptionMessage
parameter_list|(
name|boolean
name|strictContract
parameter_list|,
name|boolean
name|contract
parameter_list|,
specifier|final
name|ContainerId
name|container
parameter_list|)
block|{
name|PreemptionMessage
name|preemptionMessage
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PreemptionContainer
argument_list|>
name|cntrs
init|=
operator|new
name|HashSet
argument_list|<
name|PreemptionContainer
argument_list|>
argument_list|()
decl_stmt|;
name|PreemptionContainer
name|preemptContainer
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|preemptContainer
operator|.
name|setId
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|cntrs
operator|.
name|add
argument_list|(
name|preemptContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|strictContract
condition|)
block|{
name|StrictPreemptionContract
name|set
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StrictPreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|set
operator|.
name|setContainers
argument_list|(
name|cntrs
argument_list|)
expr_stmt|;
name|preemptionMessage
operator|.
name|setStrictContract
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contract
condition|)
block|{
name|PreemptionContract
name|preemptContract
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|PreemptionContract
operator|.
name|class
argument_list|)
decl_stmt|;
name|preemptContract
operator|.
name|setContainers
argument_list|(
name|cntrs
argument_list|)
expr_stmt|;
name|preemptionMessage
operator|.
name|setContract
argument_list|(
name|preemptContract
argument_list|)
expr_stmt|;
block|}
return|return
name|preemptionMessage
return|;
block|}
block|}
end_class

end_unit

