begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_class
DECL|class|ContainerRequestCreator
specifier|final
class|class
name|ContainerRequestCreator
block|{
DECL|method|ContainerRequestCreator ()
specifier|private
name|ContainerRequestCreator
parameter_list|()
block|{}
DECL|method|createRequest (JobId jobId, int taskAttemptId, Resource resource, String[] hosts)
specifier|static
name|ContainerRequestEvent
name|createRequest
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
return|return
name|createRequest
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|resource
argument_list|,
name|hosts
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createRequest (JobId jobId, int taskAttemptId, Resource resource, String[] hosts, boolean earlierFailedAttempt, boolean reduce)
specifier|static
name|ContainerRequestEvent
name|createRequest
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|boolean
name|earlierFailedAttempt
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
specifier|final
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|earlierFailedAttempt
condition|)
block|{
return|return
name|ContainerRequestEvent
operator|.
name|createContainerRequestEventForFailedContainer
argument_list|(
name|attemptId
argument_list|,
name|resource
argument_list|)
return|;
block|}
return|return
operator|new
name|ContainerRequestEvent
argument_list|(
name|attemptId
argument_list|,
name|resource
argument_list|,
name|hosts
argument_list|,
operator|new
name|String
index|[]
block|{
name|NetworkTopology
operator|.
name|DEFAULT_RACK
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

