begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttemptStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|TaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|ContainerManagementProtocolProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|ContainerManagementProtocolProxy
operator|.
name|ContainerManagementProtocolProxyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|HadoopYarnProtoRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerLauncher
specifier|public
class|class
name|TestContainerLauncher
block|{
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPoolSize ()
specifier|public
name|void
name|testPoolSize
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|67
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|9
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|CustomContainerLauncher
name|containerLauncher
init|=
operator|new
name|CustomContainerLauncher
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|containerLauncher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|start
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
name|containerLauncher
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
comment|// No events yet
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerLauncher
operator|.
name|initialPoolSize
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerLauncher
operator|.
name|initialPoolSize
argument_list|,
name|threadPool
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|expectedCorePoolSize
operator|=
name|containerLauncher
operator|.
name|initialPoolSize
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|containerLauncher
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
comment|// Same set of hosts, so no change
name|containerLauncher
operator|.
name|finishEventHandling
operator|=
literal|true
expr_stmt|;
name|int
name|timeOut
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containerLauncher
operator|.
name|numEventsProcessed
operator|.
name|get
argument_list|()
operator|<
literal|10
operator|&&
name|timeOut
operator|++
operator|<
literal|200
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for number of events processed to become "
operator|+
literal|10
operator|+
literal|". It is now "
operator|+
name|containerLauncher
operator|.
name|numEventsProcessed
operator|.
name|get
argument_list|()
operator|+
literal|". Timeout is "
operator|+
name|timeOut
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|containerLauncher
operator|.
name|numEventsProcessed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|finishEventHandling
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|i
operator|+
literal|10
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|i
operator|+
literal|10
argument_list|)
decl_stmt|;
name|containerLauncher
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
comment|// Different hosts, there should be an increase in core-thread-pool size to
comment|// 21(11hosts+10buffer)
comment|// Core pool size should be 21 but the live pool size should be only 11.
name|containerLauncher
operator|.
name|expectedCorePoolSize
operator|=
literal|11
operator|+
name|containerLauncher
operator|.
name|initialPoolSize
expr_stmt|;
name|containerLauncher
operator|.
name|finishEventHandling
operator|=
literal|false
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|containerLauncher
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host11:1234"
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
argument_list|)
expr_stmt|;
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// change configuration MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE
comment|// and verify initialPoolSize value.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|containerLauncher
operator|=
operator|new
name|CustomContainerLauncher
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerLauncher
operator|.
name|initialPoolSize
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testPoolLimits ()
specifier|public
name|void
name|testPoolLimits
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|67
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|9
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|CustomContainerLauncher
name|containerLauncher
init|=
operator|new
name|CustomContainerLauncher
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_CONTAINERLAUNCHER_THREAD_COUNT_LIMIT
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|start
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
name|containerLauncher
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
comment|// 10 different hosts
name|containerLauncher
operator|.
name|expectedCorePoolSize
operator|=
name|containerLauncher
operator|.
name|initialPoolSize
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|containerLauncher
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
comment|// 4 more different hosts, but thread pool size should be capped at 12
name|containerLauncher
operator|.
name|expectedCorePoolSize
operator|=
literal|12
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|containerLauncher
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host1"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
comment|// Make some threads ideal so that remaining events are also done.
name|containerLauncher
operator|.
name|finishEventHandling
operator|=
literal|true
expr_stmt|;
name|waitForEvents
argument_list|(
name|containerLauncher
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|threadPool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerLauncher
operator|.
name|foundErrors
argument_list|)
expr_stmt|;
name|containerLauncher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForEvents (CustomContainerLauncher containerLauncher, int expectedNumEvents)
specifier|private
name|void
name|waitForEvents
parameter_list|(
name|CustomContainerLauncher
name|containerLauncher
parameter_list|,
name|int
name|expectedNumEvents
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|timeOut
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containerLauncher
operator|.
name|numEventsProcessing
operator|.
name|get
argument_list|()
operator|<
name|expectedNumEvents
operator|&&
name|timeOut
operator|++
operator|<
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for number of events to become "
operator|+
name|expectedNumEvents
operator|+
literal|". It is now "
operator|+
name|containerLauncher
operator|.
name|numEventsProcessing
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumEvents
argument_list|,
name|containerLauncher
operator|.
name|numEventsProcessing
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testSlowNM ()
specifier|public
name|void
name|testSlowNM
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|int
name|maxAttempts
init|=
literal|1
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
name|maxAttempts
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set timeout low for the test
name|conf
operator|.
name|setInt
argument_list|(
literal|"yarn.rpc.nm-command-timeout"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_RPC_IMPL
argument_list|,
name|HadoopYarnProtoRPC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|bindAddr
init|=
literal|"localhost:0"
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|bindAddr
argument_list|)
decl_stmt|;
name|NMTokenSecretManagerInNM
name|tokenSecretManager
init|=
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
decl_stmt|;
name|MasterKey
name|masterKey
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|MasterKey
operator|.
name|class
argument_list|)
decl_stmt|;
name|masterKey
operator|.
name|setBytes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"key"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenSecretManager
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"token"
argument_list|)
expr_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ContainerManagementProtocol
operator|.
name|class
argument_list|,
operator|new
name|DummyContainerManager
argument_list|()
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|,
name|tokenSecretManager
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithSlowNM
argument_list|(
name|tokenSecretManager
argument_list|)
decl_stmt|;
try|try
block|{
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks is not correct"
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task
argument_list|,
name|TaskState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num attempts is not correct"
argument_list|,
name|maxAttempts
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttempt
name|attempt
init|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|TaskAttemptImpl
operator|)
name|attempt
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|String
name|diagnostics
init|=
name|attempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"attempt.getDiagnostics: "
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"Container launch failed for "
operator|+
literal|"container_0_0000_01_000000 : "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"java.net.SocketTimeoutException: 3000 millis timeout while waiting for channel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CustomContainerLauncher
specifier|private
specifier|final
class|class
name|CustomContainerLauncher
extends|extends
name|ContainerLauncherImpl
block|{
DECL|field|expectedCorePoolSize
specifier|private
specifier|volatile
name|int
name|expectedCorePoolSize
init|=
literal|0
decl_stmt|;
DECL|field|numEventsProcessing
specifier|private
name|AtomicInteger
name|numEventsProcessing
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numEventsProcessed
specifier|private
name|AtomicInteger
name|numEventsProcessed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|foundErrors
specifier|private
specifier|volatile
name|String
name|foundErrors
init|=
literal|null
decl_stmt|;
DECL|field|finishEventHandling
specifier|private
specifier|volatile
name|boolean
name|finishEventHandling
decl_stmt|;
DECL|method|CustomContainerLauncher (AppContext context)
specifier|private
name|CustomContainerLauncher
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadPool ()
specifier|public
name|ThreadPoolExecutor
name|getThreadPool
parameter_list|()
block|{
return|return
name|super
operator|.
name|launcherPool
return|;
block|}
DECL|class|CustomEventProcessor
specifier|private
specifier|final
class|class
name|CustomEventProcessor
extends|extends
name|ContainerLauncherImpl
operator|.
name|EventProcessor
block|{
DECL|field|event
specifier|private
specifier|final
name|ContainerLauncherEvent
name|event
decl_stmt|;
DECL|method|CustomEventProcessor (ContainerLauncherEvent event)
specifier|private
name|CustomEventProcessor
parameter_list|(
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// do nothing substantial
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing the event "
operator|+
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numEventsProcessing
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Stall
while|while
condition|(
operator|!
name|finishEventHandling
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
block|}
block|}
name|numEventsProcessed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createEventProcessor ( final ContainerLauncherEvent event)
specifier|protected
name|ContainerLauncherImpl
operator|.
name|EventProcessor
name|createEventProcessor
parameter_list|(
specifier|final
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
comment|// At this point of time, the EventProcessor is being created and so no
comment|// additional threads would have been created.
comment|// Core-pool-size should have increased by now.
if|if
condition|(
name|expectedCorePoolSize
operator|!=
name|launcherPool
operator|.
name|getCorePoolSize
argument_list|()
condition|)
block|{
name|foundErrors
operator|=
literal|"Expected "
operator|+
name|expectedCorePoolSize
operator|+
literal|" but found "
operator|+
name|launcherPool
operator|.
name|getCorePoolSize
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CustomEventProcessor
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
DECL|class|MRAppWithSlowNM
specifier|private
class|class
name|MRAppWithSlowNM
extends|extends
name|MRApp
block|{
DECL|field|tokenSecretManager
specifier|private
name|NMTokenSecretManagerInNM
name|tokenSecretManager
decl_stmt|;
DECL|method|MRAppWithSlowNM (NMTokenSecretManagerInNM tokenSecretManager)
specifier|public
name|MRAppWithSlowNM
parameter_list|(
name|NMTokenSecretManagerInNM
name|tokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"TestContainerLauncher"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenSecretManager
operator|=
name|tokenSecretManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerLauncher
DECL|method|createContainerLauncher (final AppContext context)
name|createContainerLauncher
parameter_list|(
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerLauncherImpl
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ContainerManagementProtocolProxyData
name|getCMProxy
parameter_list|(
name|String
name|containerMgrBindAddr
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|String
name|containerManagerBindAddr
init|=
name|addr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|Token
name|token
init|=
name|tokenSecretManager
operator|.
name|createNMToken
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|ContainerManagementProtocolProxy
name|cmProxy
init|=
operator|new
name|ContainerManagementProtocolProxy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerManagementProtocolProxyData
name|proxy
init|=
name|cmProxy
operator|.
expr|new
name|ContainerManagementProtocolProxyData
argument_list|(
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|,
name|containerManagerBindAddr
argument_list|,
name|containerId
argument_list|,
name|token
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
return|;
block|}
empty_stmt|;
block|}
DECL|class|DummyContainerManager
specifier|public
class|class
name|DummyContainerManager
implements|implements
name|ContainerManagementProtocol
block|{
DECL|field|status
specifier|private
name|ContainerStatus
name|status
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getContainerStatuses ( GetContainerStatusesRequest request)
specifier|public
name|GetContainerStatusesResponse
name|getContainerStatuses
parameter_list|(
name|GetContainerStatusesRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|GetContainerStatusesResponse
operator|.
name|newInstance
argument_list|(
name|statuses
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|startContainers (StartContainersRequest requests)
specifier|public
name|StartContainersResponse
name|startContainers
parameter_list|(
name|StartContainersRequest
name|requests
parameter_list|)
throws|throws
name|IOException
block|{
name|StartContainerRequest
name|request
init|=
name|requests
operator|.
name|getStartContainerRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|MRApp
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|request
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
comment|// Validate that the container is what RM is giving.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HOST
operator|+
literal|":"
operator|+
name|MRApp
operator|.
name|NM_PORT
argument_list|,
name|containerTokenIdentifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|StartContainersResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainersResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
comment|// make the thread sleep to look like its not going to respond
name|Thread
operator|.
name|sleep
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|status
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerId
argument_list|(
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setExitStatus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|stopContainers (StopContainersRequest request)
specifier|public
name|StopContainersResponse
name|stopContainers
parameter_list|(
name|StopContainersRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
literal|"Dummy function"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Dummy function cause"
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|increaseContainersResource ( IncreaseContainersResourceRequest request)
specifier|public
name|IncreaseContainersResourceResponse
name|increaseContainersResource
parameter_list|(
name|IncreaseContainersResourceRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|IOException
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
literal|"Dummy function"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Dummy function cause"
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

