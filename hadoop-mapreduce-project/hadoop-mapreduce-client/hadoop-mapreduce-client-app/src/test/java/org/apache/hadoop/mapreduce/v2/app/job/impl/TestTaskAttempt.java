begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapTaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestTaskAttempt
specifier|public
class|class
name|TestTaskAttempt
block|{
annotation|@
name|Test
DECL|method|testMRAppHistoryForMap ()
specifier|public
name|void
name|testMRAppHistoryForMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|FailingAttemptsMRApp
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testMRAppHistory
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppHistoryForReduce ()
specifier|public
name|void
name|testMRAppHistoryForReduce
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|FailingAttemptsMRApp
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|testMRAppHistory
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testSingleRackRequest ()
specifier|public
name|void
name|testSingleRackRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskAttemptImpl
operator|.
name|RequestContainerTransition
name|rct
init|=
operator|new
name|TaskAttemptImpl
operator|.
name|RequestContainerTransition
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|EventHandler
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|hosts
index|[
literal|0
index|]
operator|=
literal|"host1"
expr_stmt|;
name|hosts
index|[
literal|1
index|]
operator|=
literal|"host2"
expr_stmt|;
name|hosts
index|[
literal|2
index|]
operator|=
literal|"host3"
expr_stmt|;
name|TaskSplitMetaInfo
name|splitInfo
init|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|hosts
argument_list|,
literal|0
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024l
argument_list|)
decl_stmt|;
name|TaskAttemptImpl
name|mockTaskAttempt
init|=
name|createMapTaskAttemptImplForTest
argument_list|(
name|eventHandler
argument_list|,
name|splitInfo
argument_list|)
decl_stmt|;
name|TaskAttemptEvent
name|mockTAEvent
init|=
name|mock
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|rct
operator|.
name|transition
argument_list|(
name|mockTaskAttempt
argument_list|,
name|mockTAEvent
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|eventHandler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ContainerRequestEvent
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Second Event not of type ContainerRequestEvent"
argument_list|)
expr_stmt|;
block|}
name|ContainerRequestEvent
name|cre
init|=
operator|(
name|ContainerRequestEvent
operator|)
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|requestedRacks
init|=
name|cre
operator|.
name|getRacks
argument_list|()
decl_stmt|;
comment|//Only a single occurance of /DefaultRack
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestedRacks
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testHostResolveAttempt ()
specifier|public
name|void
name|testHostResolveAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskAttemptImpl
operator|.
name|RequestContainerTransition
name|rct
init|=
operator|new
name|TaskAttemptImpl
operator|.
name|RequestContainerTransition
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|EventHandler
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|hosts
index|[
literal|0
index|]
operator|=
literal|"192.168.1.1"
expr_stmt|;
name|hosts
index|[
literal|1
index|]
operator|=
literal|"host2"
expr_stmt|;
name|hosts
index|[
literal|2
index|]
operator|=
literal|"host3"
expr_stmt|;
name|TaskSplitMetaInfo
name|splitInfo
init|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|hosts
argument_list|,
literal|0
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024l
argument_list|)
decl_stmt|;
name|TaskAttemptImpl
name|mockTaskAttempt
init|=
name|createMapTaskAttemptImplForTest
argument_list|(
name|eventHandler
argument_list|,
name|splitInfo
argument_list|)
decl_stmt|;
name|TaskAttemptImpl
name|spyTa
init|=
name|spy
argument_list|(
name|mockTaskAttempt
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyTa
operator|.
name|resolveHost
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"host1"
argument_list|)
expr_stmt|;
name|TaskAttemptEvent
name|mockTAEvent
init|=
name|mock
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|rct
operator|.
name|transition
argument_list|(
name|spyTa
argument_list|,
name|mockTAEvent
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyTa
argument_list|)
operator|.
name|resolveHost
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|eventHandler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ContainerRequestEvent
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Second Event not of type ContainerRequestEvent"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"host1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"host2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"host3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|cre
init|=
operator|(
name|ContainerRequestEvent
operator|)
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|requestedHosts
init|=
name|cre
operator|.
name|getHosts
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|h
range|:
name|requestedHosts
control|)
block|{
name|expected
operator|.
name|remove
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|createMapTaskAttemptImplForTest ( EventHandler eventHandler, TaskSplitMetaInfo taskSplitMetaInfo)
specifier|private
name|TaskAttemptImpl
name|createMapTaskAttemptImplForTest
parameter_list|(
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskSplitMetaInfo
name|taskSplitMetaInfo
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|TaskAttemptListener
name|taListener
init|=
name|mock
argument_list|(
name|TaskAttemptListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|jobFile
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|OutputCommitter
name|outputCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
name|TaskAttemptImpl
name|taImpl
init|=
operator|new
name|MapTaskAttemptImpl
argument_list|(
name|taskId
argument_list|,
literal|1
argument_list|,
name|eventHandler
argument_list|,
name|jobFile
argument_list|,
literal|1
argument_list|,
name|taskSplitMetaInfo
argument_list|,
name|jobConf
argument_list|,
name|taListener
argument_list|,
name|outputCommitter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
argument_list|)
decl_stmt|;
return|return
name|taImpl
return|;
block|}
DECL|method|testMRAppHistory (MRApp app)
specifier|private
name|void
name|testMRAppHistory
parameter_list|(
name|MRApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks is not correct"
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state not correct"
argument_list|,
name|TaskState
operator|.
name|FAILED
argument_list|,
name|task
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|tasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num attempts is not correct"
argument_list|,
literal|4
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|it
init|=
name|attempts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TaskAttemptReport
name|report
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Diagnostic Information is not Correct"
argument_list|,
literal|"Test Diagnostic Event"
argument_list|,
name|report
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailingAttemptsMRApp
specifier|static
class|class
name|FailingAttemptsMRApp
extends|extends
name|MRApp
block|{
DECL|method|FailingAttemptsMRApp (int maps, int reduces)
name|FailingAttemptsMRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
literal|true
argument_list|,
literal|"FailingAttemptsMRApp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptDiagnosticsUpdateEvent
argument_list|(
name|attemptID
argument_list|,
literal|"Test Diagnostic Event"
argument_list|)
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
condition|)
block|{
name|TaskAttemptUnsuccessfulCompletion
name|datum
init|=
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getDatum
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Diagnostic Information is not Correct"
argument_list|,
literal|"Test Diagnostic Event"
argument_list|,
name|datum
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

