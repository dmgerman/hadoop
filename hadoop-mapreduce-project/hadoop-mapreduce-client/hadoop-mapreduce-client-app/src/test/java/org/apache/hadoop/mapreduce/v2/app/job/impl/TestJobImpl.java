begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobStartEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
operator|.
name|InitTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Tests various functions of the JobImpl class  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestJobImpl
specifier|public
class|class
name|TestJobImpl
block|{
DECL|field|stagingDir
specifier|static
name|String
name|stagingDir
init|=
literal|"target/test-staging/"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
name|stagingDir
operator|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobNoTasks ()
specifier|public
name|void
name|testJobNoTasks
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_ID
argument_list|,
literal|"testId"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_NAME
argument_list|,
literal|"testName"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_NODE_NAME
argument_list|,
literal|"testNodeName"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_ADJACENCY_PREFIX_STRING
operator|+
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_ADJACENCY_PREFIX_STRING
operator|+
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_TAGS
argument_list|,
literal|"tag1,tag2"
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobSubmittedEventHandler
name|jseHandler
init|=
operator|new
name|JobSubmittedEventHandler
argument_list|(
literal|"testId"
argument_list|,
literal|"testName"
argument_list|,
literal|"testNodeName"
argument_list|,
literal|"\"key2\"=\"value2\" \"key1\"=\"value1\" "
argument_list|,
literal|"tag1,tag2"
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|EventType
operator|.
name|class
argument_list|,
name|jseHandler
argument_list|)
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jseHandler
operator|.
name|getAssertValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Workflow related attributes are not tested properly"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testCommitJobFailsJob ()
specifier|public
name|void
name|testCommitJobFailsJob
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|CyclicBarrier
name|syncBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|TestingOutputCommitter
argument_list|(
name|syncBarrier
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createRunningStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|completeJobTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|)
expr_stmt|;
comment|// let the committer fail and verify the job fails
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testCheckJobCompleteSuccess ()
specifier|public
name|void
name|testCheckJobCompleteSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|CyclicBarrier
name|syncBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|TestingOutputCommitter
argument_list|(
name|syncBarrier
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createRunningStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|completeJobTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|)
expr_stmt|;
comment|// let the committer complete and verify the job succeeds
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRebootedDuringSetup ()
specifier|public
name|void
name|testRebootedDuringSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|StubbedOutputCommitter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
block|}
block|}
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRebootedDuringCommit ()
specifier|public
name|void
name|testRebootedDuringCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|CyclicBarrier
name|syncBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|WaitingOutputCommitter
argument_list|(
name|syncBarrier
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createRunningStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|completeJobTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|)
expr_stmt|;
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKilledDuringSetup ()
specifier|public
name|void
name|testKilledDuringSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|StubbedOutputCommitter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
block|}
block|}
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKilledDuringCommit ()
specifier|public
name|void
name|testKilledDuringCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|CyclicBarrier
name|syncBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|WaitingOutputCommitter
argument_list|(
name|syncBarrier
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createRunningStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|completeJobTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|)
expr_stmt|;
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbortJobCalledAfterKillingTasks ()
specifier|public
name|void
name|testAbortJobCalledAfterKillingTasks
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_COMMITTER_CANCEL_TIMEOUT_MS
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|InlineDispatcher
name|dispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createRunningStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//Fail one task. This should land the JobImpl in the FAIL_WAIT state
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
name|TaskState
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
comment|//Verify abort job hasn't been called
name|Mockito
operator|.
name|verify
argument_list|(
name|committer
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|abortJob
argument_list|(
operator|(
name|JobContext
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|State
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|)
expr_stmt|;
comment|//Verify abortJob is called once and the job failed
name|Mockito
operator|.
name|verify
argument_list|(
name|committer
argument_list|,
name|Mockito
operator|.
name|timeout
argument_list|(
literal|2000
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|abortJob
argument_list|(
operator|(
name|JobContext
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|State
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKilledDuringFailAbort ()
specifier|public
name|void
name|testKilledDuringFailAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|StubbedOutputCommitter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"forced failure"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
block|}
block|}
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKilledDuringKillAbort ()
specifier|public
name|void
name|testKilledDuringKillAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
operator|new
name|StubbedOutputCommitter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
block|}
block|}
decl_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestJobImpl
name|t
init|=
operator|new
name|TestJobImpl
argument_list|()
decl_stmt|;
name|t
operator|.
name|testJobNoTasks
argument_list|()
expr_stmt|;
name|t
operator|.
name|testCheckJobCompleteSuccess
argument_list|()
expr_stmt|;
name|t
operator|.
name|testCheckAccess
argument_list|()
expr_stmt|;
name|t
operator|.
name|testReportDiagnostics
argument_list|()
expr_stmt|;
name|t
operator|.
name|testUberDecision
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccess ()
specifier|public
name|void
name|testCheckAccess
parameter_list|()
block|{
comment|// Create two unique users
name|String
name|user1
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|user2
init|=
name|user1
operator|+
literal|"1234"
decl_stmt|;
name|UserGroupInformation
name|ugi1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user2
argument_list|)
decl_stmt|;
comment|// Create the job
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1234567890000_0001"
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
comment|// Setup configuration access only to user1 (owner)
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Verify access
name|JobImpl
name|job1
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|,
name|conf1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job1
operator|.
name|checkAccess
argument_list|(
name|ugi1
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|job1
operator|.
name|checkAccess
argument_list|(
name|ugi2
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup configuration access to the user1 (owner) and user2
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// Verify access
name|JobImpl
name|job2
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|,
name|conf2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job2
operator|.
name|checkAccess
argument_list|(
name|ugi1
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job2
operator|.
name|checkAccess
argument_list|(
name|ugi2
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup configuration access with security enabled and access to all
name|Configuration
name|conf3
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf3
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf3
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
comment|// Verify access
name|JobImpl
name|job3
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|,
name|conf3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job3
operator|.
name|checkAccess
argument_list|(
name|ugi1
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job3
operator|.
name|checkAccess
argument_list|(
name|ugi2
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup configuration access without security enabled
name|Configuration
name|conf4
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf4
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf4
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Verify access
name|JobImpl
name|job4
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|,
name|conf4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job4
operator|.
name|checkAccess
argument_list|(
name|ugi1
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job4
operator|.
name|checkAccess
argument_list|(
name|ugi2
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup configuration access without security enabled
name|Configuration
name|conf5
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf5
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf5
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Verify access
name|JobImpl
name|job5
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|,
name|conf5
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job5
operator|.
name|checkAccess
argument_list|(
name|ugi1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job5
operator|.
name|checkAccess
argument_list|(
name|ugi2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReportDiagnostics ()
specifier|public
name|void
name|testReportDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1234567890000_0001"
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
specifier|final
name|String
name|diagMsg
init|=
literal|"some diagnostic message"
decl_stmt|;
specifier|final
name|JobDiagnosticsUpdateEvent
name|diagUpdateEvent
init|=
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|jobId
argument_list|,
name|diagMsg
argument_list|)
decl_stmt|;
name|MRAppMetrics
name|mrAppMetrics
init|=
name|MRAppMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|JobImpl
name|job
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|JobTokenSecretManager
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
literal|null
argument_list|,
name|mrAppMetrics
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
name|diagUpdateEvent
argument_list|)
expr_stmt|;
name|String
name|diagnostics
init|=
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
name|diagMsg
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|JobTokenSecretManager
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
literal|null
argument_list|,
name|mrAppMetrics
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
name|diagUpdateEvent
argument_list|)
expr_stmt|;
name|diagnostics
operator|=
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
name|diagMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUberDecision ()
specifier|public
name|void
name|testUberDecision
parameter_list|()
throws|throws
name|Exception
block|{
comment|// with default values, no of maps is 2
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|boolean
name|isUber
init|=
name|testUberDecision
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
comment|// enable uber mode, no of maps is 2
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isUber
operator|=
name|testUberDecision
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
comment|// enable uber mode, no of maps is 2, no of reduces is 1 and uber task max
comment|// reduces is 0
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXREDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|isUber
operator|=
name|testUberDecision
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
comment|// enable uber mode, no of maps is 2, no of reduces is 1 and uber task max
comment|// reduces is 1
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXREDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|isUber
operator|=
name|testUberDecision
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
comment|// enable uber mode, no of maps is 2 and uber task max maps is 0
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXMAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|isUber
operator|=
name|testUberDecision
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isUber
argument_list|)
expr_stmt|;
block|}
DECL|method|testUberDecision (Configuration conf)
specifier|private
name|boolean
name|testUberDecision
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1234567890000_0001"
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|MRAppMetrics
name|mrAppMetrics
init|=
name|MRAppMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|JobImpl
name|job
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|JobTokenSecretManager
argument_list|()
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mrAppMetrics
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|InitTransition
name|initTransition
init|=
name|getInitTransition
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|JobEvent
name|mockJobEvent
init|=
name|mock
argument_list|(
name|JobEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|initTransition
operator|.
name|transition
argument_list|(
name|job
argument_list|,
name|mockJobEvent
argument_list|)
expr_stmt|;
name|boolean
name|isUber
init|=
name|job
operator|.
name|isUber
argument_list|()
decl_stmt|;
return|return
name|isUber
return|;
block|}
DECL|method|getInitTransition (final int numSplits)
specifier|private
specifier|static
name|InitTransition
name|getInitTransition
parameter_list|(
specifier|final
name|int
name|numSplits
parameter_list|)
block|{
name|InitTransition
name|initTransition
init|=
operator|new
name|InitTransition
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|TaskSplitMetaInfo
index|[]
name|splits
init|=
operator|new
name|TaskSplitMetaInfo
index|[
name|numSplits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|splits
index|[
name|i
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
block|}
decl_stmt|;
return|return
name|initTransition
return|;
block|}
annotation|@
name|Test
DECL|method|testTransitionsAtFailed ()
specifier|public
name|void
name|testTransitionsAtFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|OutputCommitter
name|committer
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"forcefail"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|committer
argument_list|)
operator|.
name|setupJob
argument_list|(
name|any
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CommitterEventHandler
name|commitHandler
init|=
name|createCommitterEventHandler
argument_list|(
name|dispatcher
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|commitHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commitHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobImpl
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|commitHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createCommitterEventHandler ( Dispatcher dispatcher, OutputCommitter committer)
specifier|private
specifier|static
name|CommitterEventHandler
name|createCommitterEventHandler
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|)
block|{
specifier|final
name|SystemClock
name|clock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
name|AppContext
name|appContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|RMHeartbeatHandler
name|heartbeatHandler
init|=
operator|new
name|RMHeartbeatHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getLastHeartbeatTime
parameter_list|()
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runOnNextHeartbeat
parameter_list|(
name|Runnable
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ApplicationAttemptId
name|id
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1234567890000_0001_0"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|CommitterEventHandler
name|handler
init|=
operator|new
name|CommitterEventHandler
argument_list|(
name|appContext
argument_list|,
name|committer
argument_list|,
name|heartbeatHandler
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|CommitterEventType
operator|.
name|class
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
DECL|method|createStubbedJob (Configuration conf, Dispatcher dispatcher, int numSplits)
specifier|private
specifier|static
name|StubbedJob
name|createStubbedJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|int
name|numSplits
parameter_list|)
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1234567890000_0001"
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|StubbedJob
name|job
init|=
operator|new
name|StubbedJob
argument_list|(
name|jobId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|"somebody"
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|JobEventType
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|EventHandler
name|mockHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskEventType
operator|.
name|class
argument_list|,
name|mockHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|mockHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|JobFinishEvent
operator|.
name|Type
operator|.
name|class
argument_list|,
name|mockHandler
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|createRunningStubbedJob (Configuration conf, Dispatcher dispatcher, int numSplits)
specifier|private
specifier|static
name|StubbedJob
name|createRunningStubbedJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|int
name|numSplits
parameter_list|)
block|{
name|StubbedJob
name|job
init|=
name|createStubbedJob
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|)
expr_stmt|;
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobStartEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertJobState
argument_list|(
name|job
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|completeJobTasks (JobImpl job)
specifier|private
specifier|static
name|void
name|completeJobTasks
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
comment|// complete the map tasks and the reduce tasks so we start committing
name|int
name|numMaps
init|=
name|job
operator|.
name|getTotalMaps
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
operator|++
name|i
control|)
block|{
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numReduces
init|=
name|job
operator|.
name|getTotalReduces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReduces
condition|;
operator|++
name|i
control|)
block|{
name|job
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertJobState (JobImpl job, JobStateInternal state)
specifier|private
specifier|static
name|void
name|assertJobState
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobStateInternal
name|state
parameter_list|)
block|{
name|int
name|timeToWaitMsec
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
name|timeToWaitMsec
operator|>
literal|0
operator|&&
name|job
operator|.
name|getInternalState
argument_list|()
operator|!=
name|state
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMsec
operator|-=
literal|10
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|state
argument_list|,
name|job
operator|.
name|getInternalState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|JobSubmittedEventHandler
specifier|private
specifier|static
class|class
name|JobSubmittedEventHandler
implements|implements
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
block|{
DECL|field|workflowId
specifier|private
name|String
name|workflowId
decl_stmt|;
DECL|field|workflowName
specifier|private
name|String
name|workflowName
decl_stmt|;
DECL|field|workflowNodeName
specifier|private
name|String
name|workflowNodeName
decl_stmt|;
DECL|field|workflowAdjacencies
specifier|private
name|String
name|workflowAdjacencies
decl_stmt|;
DECL|field|workflowTags
specifier|private
name|String
name|workflowTags
decl_stmt|;
DECL|field|assertBoolean
specifier|private
name|Boolean
name|assertBoolean
decl_stmt|;
DECL|method|JobSubmittedEventHandler (String workflowId, String workflowName, String workflowNodeName, String workflowAdjacencies, String workflowTags)
specifier|public
name|JobSubmittedEventHandler
parameter_list|(
name|String
name|workflowId
parameter_list|,
name|String
name|workflowName
parameter_list|,
name|String
name|workflowNodeName
parameter_list|,
name|String
name|workflowAdjacencies
parameter_list|,
name|String
name|workflowTags
parameter_list|)
block|{
name|this
operator|.
name|workflowId
operator|=
name|workflowId
expr_stmt|;
name|this
operator|.
name|workflowName
operator|=
name|workflowName
expr_stmt|;
name|this
operator|.
name|workflowNodeName
operator|=
name|workflowNodeName
expr_stmt|;
name|this
operator|.
name|workflowAdjacencies
operator|=
name|workflowAdjacencies
expr_stmt|;
name|this
operator|.
name|workflowTags
operator|=
name|workflowTags
expr_stmt|;
name|assertBoolean
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (JobHistoryEvent jhEvent)
specifier|public
name|void
name|handle
parameter_list|(
name|JobHistoryEvent
name|jhEvent
parameter_list|)
block|{
if|if
condition|(
name|jhEvent
operator|.
name|getType
argument_list|()
operator|!=
name|EventType
operator|.
name|JOB_SUBMITTED
condition|)
block|{
return|return;
block|}
name|JobSubmittedEvent
name|jsEvent
init|=
operator|(
name|JobSubmittedEvent
operator|)
name|jhEvent
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|workflowId
operator|.
name|equals
argument_list|(
name|jsEvent
operator|.
name|getWorkflowId
argument_list|()
argument_list|)
condition|)
block|{
name|setAssertValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|workflowName
operator|.
name|equals
argument_list|(
name|jsEvent
operator|.
name|getWorkflowName
argument_list|()
argument_list|)
condition|)
block|{
name|setAssertValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|workflowNodeName
operator|.
name|equals
argument_list|(
name|jsEvent
operator|.
name|getWorkflowNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|setAssertValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|wrkflowAdj
init|=
name|workflowAdjacencies
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
index|[]
name|jswrkflowAdj
init|=
name|jsEvent
operator|.
name|getWorkflowAdjacencies
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|wrkflowAdj
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|jswrkflowAdj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|wrkflowAdj
argument_list|,
name|jswrkflowAdj
argument_list|)
condition|)
block|{
name|setAssertValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|workflowTags
operator|.
name|equals
argument_list|(
name|jsEvent
operator|.
name|getWorkflowTags
argument_list|()
argument_list|)
condition|)
block|{
name|setAssertValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|setAssertValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setAssertValue (Boolean bool)
specifier|private
specifier|synchronized
name|void
name|setAssertValue
parameter_list|(
name|Boolean
name|bool
parameter_list|)
block|{
name|assertBoolean
operator|=
name|bool
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
DECL|method|getAssertValue ()
specifier|public
specifier|synchronized
name|boolean
name|getAssertValue
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|assertBoolean
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
return|return
name|assertBoolean
return|;
block|}
block|}
DECL|class|StubbedJob
specifier|private
specifier|static
class|class
name|StubbedJob
extends|extends
name|JobImpl
block|{
comment|//override the init transition
DECL|field|initTransition
specifier|private
specifier|final
name|InitTransition
name|initTransition
decl_stmt|;
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
DECL|field|localFactory
name|localFactory
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
DECL|field|localStateMachine
name|localStateMachine
decl_stmt|;
annotation|@
name|Override
DECL|method|getStateMachine ()
specifier|protected
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|getStateMachine
parameter_list|()
block|{
return|return
name|localStateMachine
return|;
block|}
DECL|method|StubbedJob (JobId jobId, ApplicationAttemptId applicationAttemptId, Configuration conf, EventHandler eventHandler, boolean newApiCommitter, String user, int numSplits)
specifier|public
name|StubbedJob
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|boolean
name|newApiCommitter
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|numSplits
parameter_list|)
block|{
name|super
argument_list|(
name|jobId
argument_list|,
name|applicationAttemptId
argument_list|,
name|conf
argument_list|,
name|eventHandler
argument_list|,
literal|null
argument_list|,
operator|new
name|JobTokenSecretManager
argument_list|()
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|TaskId
argument_list|,
name|TaskInfo
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|MRAppMetrics
operator|.
name|create
argument_list|()
argument_list|,
literal|null
argument_list|,
name|newApiCommitter
argument_list|,
name|user
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|initTransition
operator|=
name|getInitTransition
argument_list|(
name|numSplits
argument_list|)
expr_stmt|;
name|localFactory
operator|=
name|stateMachineFactory
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
comment|// This is abusive.
name|initTransition
argument_list|)
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|localStateMachine
operator|=
name|localFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StubbedOutputCommitter
specifier|private
specifier|static
class|class
name|StubbedOutputCommitter
extends|extends
name|OutputCommitter
block|{
DECL|method|StubbedOutputCommitter ()
specifier|public
name|StubbedOutputCommitter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext jobContext)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext taskContext)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|TestingOutputCommitter
specifier|private
specifier|static
class|class
name|TestingOutputCommitter
extends|extends
name|StubbedOutputCommitter
block|{
DECL|field|syncBarrier
name|CyclicBarrier
name|syncBarrier
decl_stmt|;
DECL|field|shouldSucceed
name|boolean
name|shouldSucceed
decl_stmt|;
DECL|method|TestingOutputCommitter (CyclicBarrier syncBarrier, boolean shouldSucceed)
specifier|public
name|TestingOutputCommitter
parameter_list|(
name|CyclicBarrier
name|syncBarrier
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|syncBarrier
operator|=
name|syncBarrier
expr_stmt|;
name|this
operator|.
name|shouldSucceed
operator|=
name|shouldSucceed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext jobContext)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
if|if
condition|(
operator|!
name|shouldSucceed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"forced failure"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|WaitingOutputCommitter
specifier|private
specifier|static
class|class
name|WaitingOutputCommitter
extends|extends
name|TestingOutputCommitter
block|{
DECL|method|WaitingOutputCommitter (CyclicBarrier syncBarrier, boolean shouldSucceed)
specifier|public
name|WaitingOutputCommitter
parameter_list|(
name|CyclicBarrier
name|syncBarrier
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
block|{
name|super
argument_list|(
name|syncBarrier
argument_list|,
name|shouldSucceed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext jobContext)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

