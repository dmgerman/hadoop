begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerRemoteLaunchEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestLocalContainerLauncher
specifier|public
class|class
name|TestLocalContainerLauncher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLocalContainerLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testWorkDir
specifier|private
specifier|static
name|File
name|testWorkDir
decl_stmt|;
DECL|field|localDirs
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|localDirs
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
DECL|method|delete (File dir)
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupTestDirs ()
specifier|public
specifier|static
name|void
name|setupTestDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|testWorkDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestLocalContainerLauncher
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|testWorkDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|testWorkDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testWorkDir
operator|=
name|testWorkDir
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
literal|"local-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|localDirs
index|[
name|i
index|]
operator|=
name|dir
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|cleanupTestDirs ()
specifier|public
specifier|static
name|void
name|cleanupTestDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testWorkDir
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|testWorkDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testKillJob ()
specifier|public
name|void
name|testKillJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// a simple event handler solely to detect the container cleaned event
specifier|final
name|CountDownLatch
name|isDone
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|handler
init|=
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"handling event "
operator|+
name|event
operator|.
name|getClass
argument_list|()
operator|+
literal|" with type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptEvent
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
condition|)
block|{
name|isDone
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// create and start the launcher
name|LocalContainerLauncher
name|launcher
init|=
operator|new
name|LocalContainerLauncher
argument_list|(
name|context
argument_list|,
name|mock
argument_list|(
name|TaskUmbilicalProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create mocked job, task, and task attempt
comment|// a single-mapper job
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
operator|new
name|HashMap
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// app context returns the one and only job
name|when
argument_list|(
name|context
operator|.
name|getAllJobs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobs
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
name|ytask
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ytask
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTask
argument_list|(
name|taskId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ytask
argument_list|)
expr_stmt|;
comment|// create a sleeping mapper that runs beyond the test timeout
name|MapTask
name|mapTask
init|=
name|mock
argument_list|(
name|MapTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapTask
operator|.
name|isMapOrReduce
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mapTask
operator|.
name|isMapTask
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taskID
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taId
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapTask
operator|.
name|getTaskID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mapTask
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// sleep for a long time
name|LOG
operator|.
name|info
argument_list|(
literal|"sleeping for 5 minutes..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mapTask
argument_list|)
operator|.
name|run
argument_list|(
name|isA
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|TaskUmbilicalProtocol
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// pump in a task attempt launch event
name|ContainerLauncherEvent
name|launchEvent
init|=
operator|new
name|ContainerRemoteLaunchEvent
argument_list|(
name|taId
argument_list|,
literal|null
argument_list|,
name|createMockContainer
argument_list|()
argument_list|,
name|mapTask
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|handle
argument_list|(
name|launchEvent
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// now pump in a container clean-up event
name|ContainerLauncherEvent
name|cleanupEvent
init|=
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|handle
argument_list|(
name|cleanupEvent
argument_list|)
expr_stmt|;
comment|// wait for the event to fire: this should be received promptly
name|isDone
operator|.
name|await
argument_list|()
expr_stmt|;
name|launcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createMockContainer ()
specifier|private
specifier|static
name|Container
name|createMockContainer
parameter_list|()
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"foo.bar.org"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Test
DECL|method|testRenameMapOutputForReduce ()
specifier|public
name|void
name|testRenameMapOutputForReduce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
specifier|final
name|MROutputFiles
name|mrOutputFiles
init|=
operator|new
name|MROutputFiles
argument_list|()
decl_stmt|;
name|mrOutputFiles
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// make sure both dirs are distinct
comment|//
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localDirs
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|mapOut
init|=
name|mrOutputFiles
operator|.
name|getOutputFileForWrite
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localDirs
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|mapOutIdx
init|=
name|mrOutputFiles
operator|.
name|getOutputIndexFileForWrite
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Paths must be different!"
argument_list|,
name|mapOut
operator|.
name|getParent
argument_list|()
argument_list|,
name|mapOutIdx
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|// make both dirs part of LOCAL_DIR
name|conf
operator|.
name|setStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
specifier|final
name|FileContext
name|lfc
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|lfc
operator|.
name|create
argument_list|(
name|mapOut
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|lfc
operator|.
name|create
argument_list|(
name|mapOutIdx
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|12345L
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|TaskId
name|tid
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
specifier|final
name|TaskAttemptId
name|taid
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LocalContainerLauncher
operator|.
name|renameMapOutputForReduce
argument_list|(
name|conf
argument_list|,
name|taid
argument_list|,
name|mrOutputFiles
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

