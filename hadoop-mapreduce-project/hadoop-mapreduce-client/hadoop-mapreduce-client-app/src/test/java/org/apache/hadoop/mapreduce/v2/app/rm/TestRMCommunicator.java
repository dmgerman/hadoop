begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMCommunicator
operator|.
name|AllocatorRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestRMCommunicator
specifier|public
class|class
name|TestRMCommunicator
block|{
DECL|class|MockRMCommunicator
class|class
name|MockRMCommunicator
extends|extends
name|RMCommunicator
block|{
DECL|method|MockRMCommunicator (ClientService clientService, AppContext context)
specifier|public
name|MockRMCommunicator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|heartbeat ()
specifier|protected
name|void
name|heartbeat
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testRMContainerAllocatorExceptionIsHandled ()
specifier|public
name|void
name|testRMContainerAllocatorExceptionIsHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientService
name|mockClientService
init|=
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockRMCommunicator
name|mockRMCommunicator
init|=
operator|new
name|MockRMCommunicator
argument_list|(
name|mockClientService
argument_list|,
name|mockContext
argument_list|)
decl_stmt|;
name|RMCommunicator
name|communicator
init|=
name|spy
argument_list|(
name|mockRMCommunicator
argument_list|)
decl_stmt|;
name|Clock
name|mockClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClock
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|RMContainerAllocationException
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|communicator
argument_list|)
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockClock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"GetClock called second time, when it should not have since the "
operator|+
literal|"thread should have quit"
argument_list|)
argument_list|)
expr_stmt|;
name|AllocatorRunnable
name|testRunnable
init|=
name|communicator
operator|.
expr|new
name|AllocatorRunnable
argument_list|()
decl_stmt|;
name|testRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testRMContainerAllocatorYarnRuntimeExceptionIsHandled ()
specifier|public
name|void
name|testRMContainerAllocatorYarnRuntimeExceptionIsHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientService
name|mockClientService
init|=
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockRMCommunicator
name|mockRMCommunicator
init|=
operator|new
name|MockRMCommunicator
argument_list|(
name|mockClientService
argument_list|,
name|mockContext
argument_list|)
decl_stmt|;
specifier|final
name|RMCommunicator
name|communicator
init|=
name|spy
argument_list|(
name|mockRMCommunicator
argument_list|)
decl_stmt|;
name|Clock
name|mockClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClock
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|communicator
argument_list|)
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockClock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|(
name|Answer
argument_list|<
name|Long
argument_list|>
operator|)
name|invocation
lambda|->
block|{
name|communicator
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
literal|2L
return|;
block|}
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"GetClock called second time, when it should not "
operator|+
literal|"have since the thread should have quit"
argument_list|)
argument_list|)
expr_stmt|;
name|AllocatorRunnable
name|testRunnable
init|=
name|communicator
operator|.
expr|new
name|AllocatorRunnable
argument_list|()
decl_stmt|;
name|testRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockClock
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

