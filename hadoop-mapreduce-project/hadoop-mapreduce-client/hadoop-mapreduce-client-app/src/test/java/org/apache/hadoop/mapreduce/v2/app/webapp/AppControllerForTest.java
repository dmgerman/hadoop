begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|View
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Class AppControllerForTest overrides some methods of AppController for test  */
end_comment

begin_class
DECL|class|AppControllerForTest
specifier|public
class|class
name|AppControllerForTest
extends|extends
name|AppController
block|{
DECL|field|properties
specifier|final
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|responseInfo
specifier|private
name|ResponseInfo
name|responseInfo
init|=
operator|new
name|ResponseInfo
argument_list|()
decl_stmt|;
DECL|field|view
specifier|private
name|View
name|view
init|=
operator|new
name|ViewForTest
argument_list|()
decl_stmt|;
DECL|field|clazz
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|response
specifier|private
name|HttpServletResponse
name|response
decl_stmt|;
DECL|method|AppControllerForTest (App app, Configuration configuration, RequestContext ctx)
specifier|protected
name|AppControllerForTest
parameter_list|(
name|App
name|app
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|RequestContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|,
name|configuration
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|getClazz ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInstance (Class<T> cls)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|clazz
operator|=
name|cls
expr_stmt|;
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|ResponseInfo
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|responseInfo
return|;
block|}
return|return
operator|(
name|T
operator|)
name|view
return|;
block|}
DECL|method|getResponseInfo ()
specifier|public
name|ResponseInfo
name|getResponseInfo
parameter_list|()
block|{
return|return
name|responseInfo
return|;
block|}
DECL|method|get (String key, String defaultValue)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|set (String key, String value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|request ()
specifier|public
name|HttpServletRequest
name|request
parameter_list|()
block|{
name|HttpServletRequest
name|result
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|result
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|response ()
specifier|public
name|HttpServletResponse
name|response
parameter_list|()
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|getProperty ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperty
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|field|data
name|OutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|writer
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
DECL|method|getData ()
specifier|public
name|String
name|getData
parameter_list|()
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|data
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writer ()
specifier|protected
name|PrintWriter
name|writer
parameter_list|()
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
block|}
end_class

end_unit

