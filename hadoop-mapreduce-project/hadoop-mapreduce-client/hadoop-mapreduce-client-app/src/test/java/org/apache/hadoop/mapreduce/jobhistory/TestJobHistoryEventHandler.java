begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestJobHistoryEventHandler
specifier|public
class|class
name|TestJobHistoryEventHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobHistoryEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|coreSitePath
specifier|private
specifier|static
name|String
name|coreSitePath
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|coreSitePath
operator|=
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test-classes"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"core-site.xml"
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanUpClass ()
specifier|public
specifier|static
name|void
name|cleanUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanTest ()
specifier|public
name|void
name|cleanTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|coreSitePath
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testFirstFlushOnCompletionEvent ()
specifier|public
name|void
name|testFirstFlushOnCompletionEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|t
operator|.
name|workDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|,
literal|60
operator|*
literal|1000l
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|queueEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskStartedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// First completion event, but min-queue-size for batching flushes is 10
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskFinishedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
name|t
operator|.
name|taskAttemptID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testMaxUnflushedCompletionEvents ()
specifier|public
name|void
name|testMaxUnflushedCompletionEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|t
operator|.
name|workDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|,
literal|60
operator|*
literal|1000l
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|queueEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskFinishedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
name|t
operator|.
name|taskAttemptID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testUnflushedTimer ()
specifier|public
name|void
name|testUnflushedTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|t
operator|.
name|workDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|,
literal|2
operator|*
literal|1000l
argument_list|)
expr_stmt|;
comment|//2 seconds.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|queueEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskFinishedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
name|t
operator|.
name|taskAttemptID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jheh
operator|.
name|getFlushTimerStatus
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|4
operator|*
literal|1000l
argument_list|)
expr_stmt|;
comment|// 4 seconds should be enough. Just be safe.
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|jheh
operator|.
name|getFlushTimerStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testBatchedFlushJobEndMultiplier ()
specifier|public
name|void
name|testBatchedFlushJobEndMultiplier
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|t
operator|.
name|workDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|,
literal|60
operator|*
literal|1000l
argument_list|)
expr_stmt|;
comment|//2 seconds.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|queueEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskFinishedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
name|t
operator|.
name|taskAttemptID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|queueEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|handleNextNEvents
argument_list|(
name|jheh
argument_list|,
literal|72
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//3 * 30 + 1 for JobFinished
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// In case of all types of events, process Done files if it's last AM retry
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testProcessDoneFilesOnLastAMRetry ()
specifier|public
name|void
name|testProcessDoneFilesOnLastAMRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Skip processing Done files in case of ERROR, if it's not last AM retry
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testProcessDoneFilesNotLastAMRetry ()
specifier|public
name|void
name|testProcessDoneFilesNotLastAMRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
comment|// skip processing done files
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testDefaultFsIsUsedForHistory ()
specifier|public
name|void
name|testDefaultFsIsUsedForHistory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create default configuration pointing to the minicluster
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|dfsCluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|coreSitePath
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// simulate execution under a non-default namenode
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|t
operator|.
name|dfsWorkDir
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we got here then event handler worked but we don't know with which
comment|// file system. Now we check that history stuff was written to minicluster
name|FileSystem
name|dfsFileSystem
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Minicluster contains some history files"
argument_list|,
name|dfsFileSystem
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|dfsWorkDir
operator|+
literal|"/*"
argument_list|)
argument_list|)
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|localFileSystem
init|=
name|LocalFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"No history directory on non-default file system"
argument_list|,
name|localFileSystem
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|dfsWorkDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetHistoryIntermediateDoneDirForUser ()
specifier|public
name|void
name|testGetHistoryIntermediateDoneDirForUser
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test relative path
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_INTERMEDIATE_DONE_DIR
argument_list|,
literal|"/mapred/history/done_intermediate"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pathStr
init|=
name|JobHistoryUtils
operator|.
name|getHistoryIntermediateDoneDirForUser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/mapred/history/done_intermediate/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|pathStr
argument_list|)
expr_stmt|;
comment|// Test fully qualified path
comment|// Create default configuration pointing to the minicluster
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|dfsCluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|coreSitePath
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Simulate execution under a non-default namenode
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|pathStr
operator|=
name|JobHistoryUtils
operator|.
name|getHistoryIntermediateDoneDirForUser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsCluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/mapred/history/done_intermediate/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|pathStr
argument_list|)
expr_stmt|;
block|}
comment|// test AMStartedEvent for submitTime and startTime
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testAMStartedEvent ()
specifier|public
name|void
name|testAMStartedEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JHEvenHandlerForTest
name|realJheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
name|spy
argument_list|(
name|realJheh
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventWriter
name|mockWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|JobHistoryEventHandler
operator|.
name|MetaInfo
name|mi
init|=
name|JobHistoryEventHandler
operator|.
name|fileMap
operator|.
name|get
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getJobStartTime
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|getJobSubmitTime
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|getJobLaunchTime
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|getJobStartTime
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|getJobSubmitTime
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|getJobLaunchTime
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|jheh
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|processDoneFiles
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|mockWriter
operator|=
name|jheh
operator|.
name|getEventWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockWriter
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|HistoryEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Have JobHistoryEventHandler handle some events and make sure they get
comment|// stored to the Timeline store
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testTimelineEventHandling ()
specifier|public
name|void
name|testTimelineEventHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParams
name|t
init|=
operator|new
name|TestParams
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestJobHistoryEventHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|Configuration
name|confJHEH
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|confJHEH
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|confJHEH
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|yarnCluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|JHEvenHandlerForTest
name|jheh
init|=
operator|new
name|JHEvenHandlerForTest
argument_list|(
name|t
operator|.
name|mockAppContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|init
argument_list|(
name|confJHEH
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|start
argument_list|()
expr_stmt|;
name|TimelineStore
name|ts
init|=
name|yarnCluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
decl_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|t
operator|.
name|appAttemptId
argument_list|,
literal|200
argument_list|,
name|t
operator|.
name|containerId
argument_list|,
literal|"nmhost"
argument_list|,
literal|3000
argument_list|,
literal|4000
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|currentTime
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|tEntity
init|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobSubmittedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|200
argument_list|,
literal|"/foo/job.xml"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|currentTime
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_SUBMITTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|+
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobQueueChangeEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|"q2"
argument_list|)
argument_list|,
name|currentTime
operator|-
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_SUBMITTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_QUEUE_CHANGED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|+
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|20
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
argument_list|,
name|currentTime
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_SUBMITTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_QUEUE_CHANGED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|+
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|20
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|t
operator|.
name|jobId
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|currentTime
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_JOB"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_KILLED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_SUBMITTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|AM_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|JOB_QUEUE_CHANGED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|+
literal|20
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|+
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTime
operator|-
literal|20
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskStartedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_TASK"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|taskID
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|MAP
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"TASK_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|jheh
argument_list|,
operator|new
name|JobHistoryEvent
argument_list|(
name|t
operator|.
name|jobId
argument_list|,
operator|new
name|TaskStartedEvent
argument_list|(
name|t
operator|.
name|taskID
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|ts
operator|.
name|getEntities
argument_list|(
literal|"MAPREDUCE_TASK"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|=
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|taskID
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"TASK_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskType
operator|.
name|MAP
operator|.
name|toString
argument_list|()
argument_list|,
name|tEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"TASK_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testCountersToJSON ()
specifier|public
name|void
name|testCountersToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHistoryEventHandler
name|jheh
init|=
operator|new
name|JobHistoryEventHandler
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|CounterGroup
name|group1
init|=
name|counters
operator|.
name|addGroup
argument_list|(
literal|"DOCTORS"
argument_list|,
literal|"Incarnations of the Doctor"
argument_list|)
decl_stmt|;
name|group1
operator|.
name|addCounter
argument_list|(
literal|"PETER_CAPALDI"
argument_list|,
literal|"Peter Capaldi"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|group1
operator|.
name|addCounter
argument_list|(
literal|"MATT_SMITH"
argument_list|,
literal|"Matt Smith"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|group1
operator|.
name|addCounter
argument_list|(
literal|"DAVID_TENNANT"
argument_list|,
literal|"David Tennant"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CounterGroup
name|group2
init|=
name|counters
operator|.
name|addGroup
argument_list|(
literal|"COMPANIONS"
argument_list|,
literal|"Companions of the Doctor"
argument_list|)
decl_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"CLARA_OSWALD"
argument_list|,
literal|"Clara Oswald"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"RORY_WILLIAMS"
argument_list|,
literal|"Rory Williams"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"AMY_POND"
argument_list|,
literal|"Amy Pond"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"MARTHA_JONES"
argument_list|,
literal|"Martha Jones"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"DONNA_NOBLE"
argument_list|,
literal|"Donna Noble"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addCounter
argument_list|(
literal|"ROSE_TYLER"
argument_list|,
literal|"Rose Tyler"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JsonNode
name|jsonNode
init|=
name|jheh
operator|.
name|countersToJSON
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|String
name|jsonStr
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|jsonNode
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"[{\"NAME\":\"COMPANIONS\",\"DISPLAY_NAME\":\"Companions "
operator|+
literal|"of the Doctor\",\"COUNTERS\":[{\"NAME\":\"AMY_POND\",\"DISPLAY_NAME\""
operator|+
literal|":\"Amy Pond\",\"VALUE\":4},{\"NAME\":\"CLARA_OSWALD\","
operator|+
literal|"\"DISPLAY_NAME\":\"Clara Oswald\",\"VALUE\":6},{\"NAME\":"
operator|+
literal|"\"DONNA_NOBLE\",\"DISPLAY_NAME\":\"Donna Noble\",\"VALUE\":2},"
operator|+
literal|"{\"NAME\":\"MARTHA_JONES\",\"DISPLAY_NAME\":\"Martha Jones\","
operator|+
literal|"\"VALUE\":3},{\"NAME\":\"RORY_WILLIAMS\",\"DISPLAY_NAME\":\"Rory "
operator|+
literal|"Williams\",\"VALUE\":5},{\"NAME\":\"ROSE_TYLER\",\"DISPLAY_NAME\":"
operator|+
literal|"\"Rose Tyler\",\"VALUE\":1}]},{\"NAME\":\"DOCTORS\",\"DISPLAY_NAME\""
operator|+
literal|":\"Incarnations of the Doctor\",\"COUNTERS\":[{\"NAME\":"
operator|+
literal|"\"DAVID_TENNANT\",\"DISPLAY_NAME\":\"David Tennant\",\"VALUE\":10},"
operator|+
literal|"{\"NAME\":\"MATT_SMITH\",\"DISPLAY_NAME\":\"Matt Smith\",\"VALUE\":"
operator|+
literal|"11},{\"NAME\":\"PETER_CAPALDI\",\"DISPLAY_NAME\":\"Peter Capaldi\","
operator|+
literal|"\"VALUE\":12}]}]"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|jsonStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testCountersToJSONEmpty ()
specifier|public
name|void
name|testCountersToJSONEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHistoryEventHandler
name|jheh
init|=
operator|new
name|JobHistoryEventHandler
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
name|JsonNode
name|jsonNode
init|=
name|jheh
operator|.
name|countersToJSON
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|String
name|jsonStr
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|jsonNode
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"[]"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|jsonStr
argument_list|)
expr_stmt|;
name|counters
operator|=
operator|new
name|Counters
argument_list|()
expr_stmt|;
name|jsonNode
operator|=
name|jheh
operator|.
name|countersToJSON
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|jsonNode
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|"[]"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|jsonStr
argument_list|)
expr_stmt|;
name|counters
operator|.
name|addGroup
argument_list|(
literal|"DOCTORS"
argument_list|,
literal|"Incarnations of the Doctor"
argument_list|)
expr_stmt|;
name|jsonNode
operator|=
name|jheh
operator|.
name|countersToJSON
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|jsonNode
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|"[{\"NAME\":\"DOCTORS\",\"DISPLAY_NAME\":\"Incarnations of the "
operator|+
literal|"Doctor\",\"COUNTERS\":[]}]"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|jsonStr
argument_list|)
expr_stmt|;
block|}
DECL|method|queueEvent (JHEvenHandlerForTest jheh, JobHistoryEvent event)
specifier|private
name|void
name|queueEvent
parameter_list|(
name|JHEvenHandlerForTest
name|jheh
parameter_list|,
name|JobHistoryEvent
name|event
parameter_list|)
block|{
name|jheh
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|handleEvent (JHEvenHandlerForTest jheh, JobHistoryEvent event)
specifier|private
name|void
name|handleEvent
parameter_list|(
name|JHEvenHandlerForTest
name|jheh
parameter_list|,
name|JobHistoryEvent
name|event
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|jheh
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|handleEvent
argument_list|(
name|jheh
operator|.
name|eventQueue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleNextNEvents (JHEvenHandlerForTest jheh, int numEvents)
specifier|private
name|void
name|handleNextNEvents
parameter_list|(
name|JHEvenHandlerForTest
name|jheh
parameter_list|,
name|int
name|numEvents
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEvents
condition|;
name|i
operator|++
control|)
block|{
name|jheh
operator|.
name|handleEvent
argument_list|(
name|jheh
operator|.
name|eventQueue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupTestWorkDir ()
specifier|private
name|String
name|setupTestWorkDir
parameter_list|()
block|{
name|File
name|testWorkDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not cleanup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup test dir"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|mockAppContext (ApplicationId appId, boolean isLastAMRetry)
specifier|private
name|AppContext
name|mockAppContext
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|boolean
name|isLastAMRetry
parameter_list|)
block|{
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getAllCounters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mockjob"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJob
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|isLastAMRetry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|isLastAMRetry
argument_list|)
expr_stmt|;
return|return
name|mockContext
return|;
block|}
DECL|class|TestParams
specifier|private
class|class
name|TestParams
block|{
DECL|field|isLastAMRetry
name|boolean
name|isLastAMRetry
decl_stmt|;
DECL|field|workDir
name|String
name|workDir
init|=
name|setupTestWorkDir
argument_list|()
decl_stmt|;
DECL|field|dfsWorkDir
name|String
name|dfsWorkDir
init|=
literal|"/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
DECL|field|appId
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|200
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|appAttemptId
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|containerId
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|taskID
name|TaskID
name|taskID
init|=
name|TaskID
operator|.
name|forName
argument_list|(
literal|"task_200707121733_0003_m_000005"
argument_list|)
decl_stmt|;
DECL|field|taskAttemptID
name|TaskAttemptID
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|jobId
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|mockAppContext
name|AppContext
name|mockAppContext
decl_stmt|;
DECL|method|TestParams ()
specifier|public
name|TestParams
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|TestParams (boolean isLastAMRetry)
specifier|public
name|TestParams
parameter_list|(
name|boolean
name|isLastAMRetry
parameter_list|)
block|{
name|this
operator|.
name|isLastAMRetry
operator|=
name|isLastAMRetry
expr_stmt|;
name|mockAppContext
operator|=
name|mockAppContext
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|isLastAMRetry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEventToEnqueue (JobId jobId)
specifier|private
name|JobHistoryEvent
name|getEventToEnqueue
parameter_list|(
name|JobId
name|jobId
parameter_list|)
block|{
name|HistoryEvent
name|toReturn
init|=
operator|new
name|JobStatusChangedEvent
argument_list|(
operator|new
name|JobID
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|jobId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|"change status"
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
name|toReturn
argument_list|)
return|;
block|}
annotation|@
name|Test
comment|/**    * Tests that in case of SIGTERM, the JHEH stops without processing its event    * queue (because we must stop quickly lest we get SIGKILLed) and processes    * a JobUnsuccessfulEvent for jobs which were still running (so that they may    * show up in the JobHistoryServer)    */
DECL|method|testSigTermedFunctionality ()
specifier|public
name|void
name|testSigTermedFunctionality
parameter_list|()
throws|throws
name|IOException
block|{
name|AppContext
name|mockedContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|JHEventHandlerForSigtermTest
name|jheh
init|=
operator|new
name|JHEventHandlerForSigtermTest
argument_list|(
name|mockedContext
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|jheh
operator|.
name|addToFileMap
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|//Submit 4 events and check that they're handled in the absence of a signal
specifier|final
name|int
name|numEvents
init|=
literal|4
decl_stmt|;
name|JobHistoryEvent
name|events
index|[]
init|=
operator|new
name|JobHistoryEvent
index|[
name|numEvents
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEvents
condition|;
operator|++
name|i
control|)
block|{
name|events
index|[
name|i
index|]
operator|=
name|getEventToEnqueue
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|handle
argument_list|(
name|events
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//Make sure events were handled
name|assertTrue
argument_list|(
literal|"handleEvent should've been called only 4 times but was "
operator|+
name|jheh
operator|.
name|eventsHandled
argument_list|,
name|jheh
operator|.
name|eventsHandled
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Create a new jheh because the last stop closed the eventWriter etc.
name|jheh
operator|=
operator|new
name|JHEventHandlerForSigtermTest
argument_list|(
name|mockedContext
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make constructor of JobUnsuccessfulCompletionEvent pass
name|Job
name|job
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedContext
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// Make TypeConverter(JobID) pass
name|ApplicationId
name|mockAppId
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockAppId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|jobId
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAppId
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|addToFileMap
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|setForcejobCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEvents
condition|;
operator|++
name|i
control|)
block|{
name|events
index|[
name|i
index|]
operator|=
name|getEventToEnqueue
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jheh
operator|.
name|handle
argument_list|(
name|events
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|jheh
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//Make sure events were handled, 4 + 1 finish event
name|assertTrue
argument_list|(
literal|"handleEvent should've been called only 5 times but was "
operator|+
name|jheh
operator|.
name|eventsHandled
argument_list|,
name|jheh
operator|.
name|eventsHandled
operator|==
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Last event handled wasn't JobUnsuccessfulCompletionEvent"
argument_list|,
name|jheh
operator|.
name|lastEventHandled
operator|.
name|getHistoryEvent
argument_list|()
operator|instanceof
name|JobUnsuccessfulCompletionEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|JHEvenHandlerForTest
class|class
name|JHEvenHandlerForTest
extends|extends
name|JobHistoryEventHandler
block|{
DECL|field|eventWriter
specifier|private
name|EventWriter
name|eventWriter
decl_stmt|;
DECL|field|mockHistoryProcessing
specifier|private
name|boolean
name|mockHistoryProcessing
init|=
literal|true
decl_stmt|;
DECL|method|JHEvenHandlerForTest (AppContext context, int startCount)
specifier|public
name|JHEvenHandlerForTest
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
name|JobHistoryEventHandler
operator|.
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|JHEvenHandlerForTest (AppContext context, int startCount, boolean mockHistoryProcessing)
specifier|public
name|JHEvenHandlerForTest
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|int
name|startCount
parameter_list|,
name|boolean
name|mockHistoryProcessing
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|mockHistoryProcessing
operator|=
name|mockHistoryProcessing
expr_stmt|;
name|JobHistoryEventHandler
operator|.
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|createEventWriter (Path historyFilePath)
specifier|protected
name|EventWriter
name|createEventWriter
parameter_list|(
name|Path
name|historyFilePath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mockHistoryProcessing
condition|)
block|{
name|this
operator|.
name|eventWriter
operator|=
name|mock
argument_list|(
name|EventWriter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|eventWriter
operator|=
name|super
operator|.
name|createEventWriter
argument_list|(
name|historyFilePath
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|eventWriter
return|;
block|}
annotation|@
name|Override
DECL|method|closeEventWriter (JobId jobId)
specifier|protected
name|void
name|closeEventWriter
parameter_list|(
name|JobId
name|jobId
parameter_list|)
block|{   }
DECL|method|getEventWriter ()
specifier|public
name|EventWriter
name|getEventWriter
parameter_list|()
block|{
return|return
name|this
operator|.
name|eventWriter
return|;
block|}
annotation|@
name|Override
DECL|method|processDoneFiles (JobId jobId)
specifier|protected
name|void
name|processDoneFiles
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|mockHistoryProcessing
condition|)
block|{
name|super
operator|.
name|processDoneFiles
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// do nothing
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Class to help with testSigTermedFunctionality  */
end_comment

begin_class
DECL|class|JHEventHandlerForSigtermTest
class|class
name|JHEventHandlerForSigtermTest
extends|extends
name|JobHistoryEventHandler
block|{
DECL|method|JHEventHandlerForSigtermTest (AppContext context, int startCount)
specifier|public
name|JHEventHandlerForSigtermTest
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
block|}
DECL|method|addToFileMap (JobId jobId)
specifier|public
name|void
name|addToFileMap
parameter_list|(
name|JobId
name|jobId
parameter_list|)
block|{
name|MetaInfo
name|metaInfo
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetaInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metaInfo
operator|.
name|isWriterActive
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fileMap
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|metaInfo
argument_list|)
expr_stmt|;
block|}
DECL|field|lastEventHandled
name|JobHistoryEvent
name|lastEventHandled
decl_stmt|;
DECL|field|eventsHandled
name|int
name|eventsHandled
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|handleEvent (JobHistoryEvent event)
specifier|public
name|void
name|handleEvent
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|lastEventHandled
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|eventsHandled
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

