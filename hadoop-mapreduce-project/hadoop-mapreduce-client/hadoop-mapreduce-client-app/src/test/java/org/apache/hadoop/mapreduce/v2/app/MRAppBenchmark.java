begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|AMRMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MRAppBenchmark
specifier|public
class|class
name|MRAppBenchmark
block|{
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Runs memory and time benchmark with Mock MRApp.    */
DECL|method|run (MRApp app)
specifier|public
name|void
name|run
parameter_list|(
name|MRApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getJobState
argument_list|()
operator|.
name|equals
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
condition|)
block|{
name|printStat
argument_list|(
name|job
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|printStat
argument_list|(
name|job
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
DECL|method|printStat (Job job, long startTime)
specifier|private
name|void
name|printStat
parameter_list|(
name|Job
name|job
parameter_list|,
name|long
name|startTime
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|gc
argument_list|()
expr_stmt|;
name|long
name|mem
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JobState:"
operator|+
name|job
operator|.
name|getState
argument_list|()
operator|+
literal|" CompletedMaps:"
operator|+
name|job
operator|.
name|getCompletedMaps
argument_list|()
operator|+
literal|" CompletedReduces:"
operator|+
name|job
operator|.
name|getCompletedReduces
argument_list|()
operator|+
literal|" Memory(total-free)(KB):"
operator|+
name|mem
operator|/
literal|1024
operator|+
literal|" ElapsedTime(ms):"
operator|+
operator|(
name|currentTime
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//Throttles the maximum number of concurrent running tasks.
comment|//This affects the memory requirement since
comment|//org.apache.hadoop.mapred.MapTask/ReduceTask is loaded in memory for all
comment|//running task and discarded once the task is launched.
DECL|class|ThrottledMRApp
specifier|static
class|class
name|ThrottledMRApp
extends|extends
name|MRApp
block|{
DECL|field|maxConcurrentRunningTasks
name|int
name|maxConcurrentRunningTasks
decl_stmt|;
DECL|field|concurrentRunningTasks
specifier|volatile
name|int
name|concurrentRunningTasks
decl_stmt|;
DECL|method|ThrottledMRApp (int maps, int reduces, int maxConcurrentRunningTasks)
name|ThrottledMRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|int
name|maxConcurrentRunningTasks
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
literal|true
argument_list|,
literal|"ThrottledMRApp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentRunningTasks
operator|=
name|maxConcurrentRunningTasks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|super
operator|.
name|attemptLaunched
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
comment|//the task is launched and sends done immediately
name|concurrentRunningTasks
operator|--
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContainerAllocator ( ClientService clientService, AppContext context)
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ThrottledContainerAllocator
argument_list|()
return|;
block|}
DECL|class|ThrottledContainerAllocator
class|class
name|ThrottledContainerAllocator
extends|extends
name|AbstractService
implements|implements
name|ContainerAllocator
block|{
DECL|field|containerCount
specifier|private
name|int
name|containerCount
decl_stmt|;
DECL|field|thread
specifier|private
name|Thread
name|thread
decl_stmt|;
DECL|field|eventQueue
specifier|private
name|BlockingQueue
argument_list|<
name|ContainerAllocatorEvent
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|ContainerAllocatorEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ThrottledContainerAllocator ()
specifier|public
name|ThrottledContainerAllocator
parameter_list|()
block|{
name|super
argument_list|(
literal|"ThrottledContainerAllocator"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerAllocatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|eventQueue
operator|.
name|put
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerAllocatorEvent
name|event
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|concurrentRunningTasks
operator|<
name|maxConcurrentRunningTasks
condition|)
block|{
name|event
operator|=
name|eventQueue
operator|.
name|take
argument_list|()
expr_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|getContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerCount
operator|++
argument_list|)
decl_stmt|;
comment|//System.out.println("Allocating " + containerCount);
name|Container
name|container
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"dummy"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|container
operator|.
name|setContainerToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeHttpAddress
argument_list|(
literal|"localhost:8042"
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptContainerAssignedEvent
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|container
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|concurrentRunningTasks
operator|++
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Returning, interrupted"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|benchmark1 ()
specifier|public
name|void
name|benchmark1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maps
init|=
literal|100
decl_stmt|;
comment|// Adjust for benchmarking. Start with thousands.
name|int
name|reduces
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running benchmark with maps:"
operator|+
name|maps
operator|+
literal|" reduces:"
operator|+
name|reduces
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|MRApp
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|RMContainerAllocator
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AMRMProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
operator|new
name|AMRMProtocol
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|RegisterApplicationMasterResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setMinimumResourceCapability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMaximumResourceCapability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|FinishApplicationMasterResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocateResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
name|request
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|askList
control|)
block|{
if|if
condition|(
operator|!
name|ResourceRequest
operator|.
name|isAnyLocation
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|numContainers
init|=
name|req
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainers
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
name|i
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|2345
argument_list|)
argument_list|,
literal|"host"
operator|+
name|containerId
operator|.
name|getId
argument_list|()
operator|+
literal|":5678"
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setAllocatedContainers
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNumClusterNodes
argument_list|(
literal|350
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|benchmark2 ()
specifier|public
name|void
name|benchmark2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maps
init|=
literal|100
decl_stmt|;
comment|// Adjust for benchmarking, start with a couple of thousands
name|int
name|reduces
init|=
literal|50
decl_stmt|;
name|int
name|maxConcurrentRunningTasks
init|=
literal|500
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running benchmark with throttled running tasks with "
operator|+
literal|"maxConcurrentRunningTasks:"
operator|+
name|maxConcurrentRunningTasks
operator|+
literal|" maps:"
operator|+
name|maps
operator|+
literal|" reduces:"
operator|+
name|reduces
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|ThrottledMRApp
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|maxConcurrentRunningTasks
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|MRAppBenchmark
name|benchmark
init|=
operator|new
name|MRAppBenchmark
argument_list|()
decl_stmt|;
name|benchmark
operator|.
name|benchmark1
argument_list|()
expr_stmt|;
name|benchmark
operator|.
name|benchmark2
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

