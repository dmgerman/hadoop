begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerLaunchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskRecoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|MapTaskImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestRecovery
specifier|public
class|class
name|TestRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|outputDir
specifier|private
specifier|static
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestRecovery
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"out"
argument_list|)
decl_stmt|;
DECL|field|partFile
specifier|private
specifier|static
name|String
name|partFile
init|=
literal|"part-r-00000"
decl_stmt|;
DECL|field|key1
specifier|private
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
decl_stmt|;
DECL|field|key2
specifier|private
name|Text
name|key2
init|=
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
decl_stmt|;
DECL|field|val1
specifier|private
name|Text
name|val1
init|=
operator|new
name|Text
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
DECL|field|val2
specifier|private
name|Text
name|val2
init|=
operator|new
name|Text
argument_list|(
literal|"val2"
argument_list|)
decl_stmt|;
comment|/**    * AM with 2 maps and 1 reduce. For 1st map, one attempt fails, one attempt    * completely disappears because of failed launch, one attempt gets killed and    * one attempt succeeds. AM crashes after the first tasks finishes and    * recovers completely and succeeds in the second generation.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testCrashed ()
specifier|public
name|void
name|testCrashed
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|long
name|am1StartTimeEst
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|long
name|jobStartTime
init|=
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task2Attempt
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// reduces must be in NEW state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Reduce Task state not correct"
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|,
name|reduceTask
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
comment|/////////// Play some games with the TaskAttempts of the first task //////
comment|//send the fail signal to the 1st map task attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|int
name|timeOut
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|timeOut
operator|++
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for next attempt to start"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|itr
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|task1Attempt2
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// This attempt will automatically fail because of the way ContainerLauncher
comment|// is setup
comment|// This attempt 'disappears' from JobHistory and so causes MAPREDUCE-3846
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|timeOut
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|3
operator|&&
name|timeOut
operator|++
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for next attempt to start"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|itr
operator|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|task1Attempt3
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt3
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the kill signal to the 1st map 3rd attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt3
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt3
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|timeOut
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|4
operator|&&
name|timeOut
operator|++
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for next attempt to start"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|itr
operator|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|task1Attempt4
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt4
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st map 4th attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt4
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|/////////// End of games with the TaskAttempts of the first task //////
comment|//wait for first map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|long
name|task1StartTime
init|=
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|task1FinishTime
init|=
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
comment|//stop the app
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the 1st map will be recovered from previous run
name|long
name|am2StartTimeEst
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// first map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|task2Attempt
operator|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//wait for reduce to be running before sending done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job Start time not correct"
argument_list|,
name|jobStartTime
argument_list|,
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Start time not correct"
argument_list|,
name|task1StartTime
argument_list|,
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Finish time not correct"
argument_list|,
name|task1FinishTime
argument_list|,
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|attemptNum
init|=
literal|1
decl_stmt|;
comment|// Verify AMInfo
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|job
operator|.
name|getAMInfos
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptNum
operator|++
argument_list|,
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|amInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HOST
argument_list|,
name|amInfo
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HTTP_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|am1StartTimeReal
init|=
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|am2StartTimeReal
init|=
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am1StartTimeReal
operator|>=
name|am1StartTimeEst
operator|&&
name|am1StartTimeReal
operator|<=
name|am2StartTimeEst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am2StartTimeReal
operator|>=
name|am2StartTimeEst
operator|&&
name|am2StartTimeReal
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Add verification of additional data from jobHistory - whatever was
comment|// available in the failed attempt should be available here
block|}
comment|/**    * AM with 3 maps and 0 reduce. AM crashes after the first two tasks finishes    * and recovers completely and succeeds in the second generation.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testCrashOfMapsOnlyJob ()
specifier|public
name|void
name|testCrashOfMapsOnlyJob
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask3
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask3
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task2Attempt
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task3Attempt
init|=
name|mapTask3
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// before sending the TA_DONE, event make sure attempt has come to
comment|// RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task3Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// send the done signal to the 1st two maps
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task2Attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for first two map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// stop the app
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// rerun
comment|// in rerun the 1st two map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set num-reduces explicitly in conf as recovery logic depends on it.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask3
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// first two maps will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask3
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|task3Attempt
operator|=
name|mapTask3
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// before sending the TA_DONE, event make sure attempt has come to
comment|// RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task3Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// send the done signal to the 3rd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask3
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask3
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleCrashes ()
specifier|public
name|void
name|testMultipleCrashes
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task2Attempt
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// reduces must be in NEW state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Reduce Task state not correct"
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|,
name|reduceTask
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for first map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Crash the app
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the 1st map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// first map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|task2Attempt
operator|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Crash the app again.
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the 1st and 2nd map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// The maps will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//wait for reduce to be running before sending done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputRecovery ()
specifier|public
name|void
name|testOutputRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduce1Attempt1
init|=
name|reduceTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// write output corresponding to reduce1
name|writeOutput
argument_list|(
name|reduce1Attempt1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduce1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for first reduce task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//stop the app before the job completes.
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Task
name|reduceTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port after recovery
name|task1Attempt1
operator|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
comment|// first reduce will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduce2Attempt
init|=
name|reduceTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|reduce2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd reduce task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduce2Attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|validateOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputRecoveryMapsOnly ()
specifier|public
name|void
name|testOutputRecoveryMapsOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// write output corresponding to map1 (This is just to validate that it is
comment|//no included in the output)
name|writeBadOutput
argument_list|(
name|task1Attempt1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//send the done signal to the map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
comment|//stop the app before the job completes.
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port after recovery
name|task1Attempt1
operator|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task2Attempt1
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task2Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task2Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduce1Attempt1
init|=
name|reduceTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// write output corresponding to reduce1
name|writeOutput
argument_list|(
name|reduce1Attempt1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduce1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for first reduce task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|validateOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryWithOldCommiter ()
specifier|public
name|void
name|testRecoveryWithOldCommiter
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduce1Attempt1
init|=
name|reduceTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// write output corresponding to reduce1
name|writeOutput
argument_list|(
name|reduce1Attempt1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduce1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for first reduce task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//stop the app before the job completes.
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the map will be recovered from previous run
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Task
name|reduceTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// Verify the shuffle-port after recovery
name|task1Attempt1
operator|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5467
argument_list|,
name|task1Attempt1
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
comment|// first reduce will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduce2Attempt
init|=
name|reduceTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|reduce2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd reduce task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduce2Attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|validateOutput
argument_list|()
expr_stmt|;
block|}
comment|/**    * AM with 2 maps and 1 reduce. For 1st map, one attempt fails, one attempt    * completely disappears because of failed launch, one attempt gets killed and    * one attempt succeeds. AM crashes after the first tasks finishes and    * recovers completely and succeeds in the second generation.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testSpeculative ()
specifier|public
name|void
name|testSpeculative
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|long
name|am1StartTimeEst
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|long
name|jobStartTime
init|=
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Launch a Speculative Task for the first Task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|mapTask1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|timeOut
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|timeOut
operator|++
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for next attempt to start"
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|t1it
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task1Attempt1
init|=
name|t1it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task1Attempt2
init|=
name|t1it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task2Attempt
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerId
name|t1a2contId
init|=
name|task1Attempt2
operator|.
name|getAssignedContainerID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|t1a2contId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|task1Attempt2
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Launch container for speculative attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptContainerLaunchedEvent
argument_list|(
name|task1Attempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|runCount
argument_list|)
argument_list|)
expr_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt2
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// reduces must be in NEW state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Reduce Task state not correct"
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|,
name|reduceTask
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
comment|//send the done signal to the map 1 attempt 1
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt1
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//wait for first map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|long
name|task1StartTime
init|=
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|task1FinishTime
init|=
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
comment|//stop the app
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
comment|//in rerun the 1st map will be recovered from previous run
name|long
name|am2StartTimeEst
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// first map will be recovered, no need to send done
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|task2Attempt
operator|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//wait for reduce to be running before sending done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job Start time not correct"
argument_list|,
name|jobStartTime
argument_list|,
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Start time not correct"
argument_list|,
name|task1StartTime
argument_list|,
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Finish time not correct"
argument_list|,
name|task1FinishTime
argument_list|,
name|mapTask1
operator|.
name|getReport
argument_list|()
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|attemptNum
init|=
literal|1
decl_stmt|;
comment|// Verify AMInfo
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|job
operator|.
name|getAMInfos
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptNum
operator|++
argument_list|,
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|amInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HOST
argument_list|,
name|amInfo
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MRApp
operator|.
name|NM_HTTP_PORT
argument_list|,
name|amInfo
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|am1StartTimeReal
init|=
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|am2StartTimeReal
init|=
name|job
operator|.
name|getAMInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am1StartTimeReal
operator|>=
name|am1StartTimeEst
operator|&&
name|am1StartTimeReal
operator|<=
name|am2StartTimeEst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am2StartTimeReal
operator|>=
name|am2StartTimeEst
operator|&&
name|am2StartTimeReal
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRecoveryWithoutShuffleSecret ()
specifier|public
name|void
name|testRecoveryWithoutShuffleSecret
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppNoShuffleSecret
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|mapTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// all maps must be running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|task1Attempt
init|=
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TaskAttempt
name|task2Attempt
init|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task1Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// reduces must be in NEW state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Reduce Task state not correct"
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|,
name|reduceTask
operator|.
name|getReport
argument_list|()
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
comment|//send the done signal to the 1st map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|task1Attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for first map task to complete
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//stop the app
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//in recovery the 1st map should NOT be recovered from previous run
comment|//since the shuffle secret was not provided with the job credentials
comment|//and had to be rolled per app attempt
name|app
operator|=
operator|new
name|MRAppNoShuffleSecret
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of tasks not correct"
argument_list|,
literal|3
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask1
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mapTask2
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|task2Attempt
operator|=
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//before sending the TA_DONE, event make sure attempt has come to
comment|//RUNNING state
name|app
operator|.
name|waitForState
argument_list|(
name|task2Attempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask2
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//verify first map task is still running
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the 2nd map task
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapTask1
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait to get it completed
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask1
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//wait for reduce to be running before sending done
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|app
operator|.
name|verifyCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverySuccessAttempt ()
specifier|public
name|void
name|testRecoverySuccessAttempt
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testRecoverySuccessAttempt ---"
argument_list|)
expr_stmt|;
name|long
name|clusterTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|recoverMapTask
init|=
name|getMockMapTask
argument_list|(
name|clusterTimestamp
argument_list|,
name|mockEventHandler
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|recoverMapTask
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobID
name|jobID
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimestamp
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|jobID
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mock up the TaskAttempts
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|mockTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taId1
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo1
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|mockTAinfo1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taId2
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo2
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|mockTAinfo2
argument_list|)
expr_stmt|;
name|OutputCommitter
name|mockCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|mockTaskInfo
init|=
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"SUCCEEDED"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempts
argument_list|)
expr_stmt|;
name|recoverMapTask
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskId
argument_list|,
name|mockTaskInfo
argument_list|,
name|mockCommitter
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
operator|)
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
argument_list|()
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EventType
argument_list|>
name|jobHistoryEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|EventType
argument_list|>
argument_list|()
decl_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_FINISHED
argument_list|)
expr_stmt|;
name|recoveryChecker
argument_list|(
name|recoverMapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|finalAttemptStates
argument_list|,
name|arg
argument_list|,
name|jobHistoryEvents
argument_list|,
literal|2L
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryAllFailAttempts ()
specifier|public
name|void
name|testRecoveryAllFailAttempts
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testRecoveryAllFailAttempts ---"
argument_list|)
expr_stmt|;
name|long
name|clusterTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|recoverMapTask
init|=
name|getMockMapTask
argument_list|(
name|clusterTimestamp
argument_list|,
name|mockEventHandler
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|recoverMapTask
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobID
name|jobID
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimestamp
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|jobID
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mock up the TaskAttempts
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|mockTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taId1
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo1
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|mockTAinfo1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taId2
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo2
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|mockTAinfo2
argument_list|)
expr_stmt|;
name|OutputCommitter
name|mockCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|mockTaskInfo
init|=
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempts
argument_list|)
expr_stmt|;
name|recoverMapTask
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskId
argument_list|,
name|mockTaskInfo
argument_list|,
name|mockCommitter
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
operator|)
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
argument_list|()
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EventType
argument_list|>
name|jobHistoryEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|EventType
argument_list|>
argument_list|()
decl_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_FAILED
argument_list|)
expr_stmt|;
name|recoveryChecker
argument_list|(
name|recoverMapTask
argument_list|,
name|TaskState
operator|.
name|FAILED
argument_list|,
name|finalAttemptStates
argument_list|,
name|arg
argument_list|,
name|jobHistoryEvents
argument_list|,
literal|2L
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryTaskSuccessAllAttemptsFail ()
specifier|public
name|void
name|testRecoveryTaskSuccessAllAttemptsFail
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START:  testRecoveryTaskSuccessAllAttemptsFail ---"
argument_list|)
expr_stmt|;
name|long
name|clusterTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|recoverMapTask
init|=
name|getMockMapTask
argument_list|(
name|clusterTimestamp
argument_list|,
name|mockEventHandler
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|recoverMapTask
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobID
name|jobID
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimestamp
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|jobID
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mock up the TaskAttempts
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|mockTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taId1
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo1
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|mockTAinfo1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taId2
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo2
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|mockTAinfo2
argument_list|)
expr_stmt|;
name|OutputCommitter
name|mockCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|mockTaskInfo
init|=
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"SUCCEEDED"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempts
argument_list|)
expr_stmt|;
name|recoverMapTask
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskId
argument_list|,
name|mockTaskInfo
argument_list|,
name|mockCommitter
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
operator|)
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
argument_list|()
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// check for one new attempt launched since successful attempt not found
name|TaskAttemptID
name|taId3
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId3
argument_list|,
name|TaskAttemptState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EventType
argument_list|>
name|jobHistoryEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|EventType
argument_list|>
argument_list|()
decl_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|)
expr_stmt|;
name|recoveryChecker
argument_list|(
name|recoverMapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|,
name|finalAttemptStates
argument_list|,
name|arg
argument_list|,
name|jobHistoryEvents
argument_list|,
literal|2L
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryTaskSuccessAllAttemptsSucceed ()
specifier|public
name|void
name|testRecoveryTaskSuccessAllAttemptsSucceed
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START:  testRecoveryTaskSuccessAllAttemptsFail ---"
argument_list|)
expr_stmt|;
name|long
name|clusterTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|recoverMapTask
init|=
name|getMockMapTask
argument_list|(
name|clusterTimestamp
argument_list|,
name|mockEventHandler
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|recoverMapTask
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobID
name|jobID
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimestamp
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|jobID
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mock up the TaskAttempts
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|mockTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taId1
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo1
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|mockTAinfo1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taId2
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo2
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|mockTAinfo2
argument_list|)
expr_stmt|;
name|OutputCommitter
name|mockCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|mockTaskInfo
init|=
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"SUCCEEDED"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempts
argument_list|)
expr_stmt|;
name|recoverMapTask
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskId
argument_list|,
name|mockTaskInfo
argument_list|,
name|mockCommitter
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
operator|)
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
argument_list|()
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EventType
argument_list|>
name|jobHistoryEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|EventType
argument_list|>
argument_list|()
decl_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_FINISHED
argument_list|)
expr_stmt|;
name|recoveryChecker
argument_list|(
name|recoverMapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|finalAttemptStates
argument_list|,
name|arg
argument_list|,
name|jobHistoryEvents
argument_list|,
literal|2L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryAllAttemptsKilled ()
specifier|public
name|void
name|testRecoveryAllAttemptsKilled
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START:  testRecoveryAllAttemptsKilled ---"
argument_list|)
expr_stmt|;
name|long
name|clusterTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|recoverMapTask
init|=
name|getMockMapTask
argument_list|(
name|clusterTimestamp
argument_list|,
name|mockEventHandler
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|recoverMapTask
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobID
name|jobID
init|=
operator|new
name|JobID
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|clusterTimestamp
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|taskID
init|=
operator|new
name|TaskID
argument_list|(
name|jobID
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mock up the TaskAttempts
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|mockTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taId1
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo1
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|mockTAinfo1
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taId2
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo2
init|=
name|getMockTaskAttemptInfo
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|mockTaskAttempts
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|mockTAinfo2
argument_list|)
expr_stmt|;
name|OutputCommitter
name|mockCommitter
init|=
name|mock
argument_list|(
name|OutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskInfo
name|mockTaskInfo
init|=
name|mock
argument_list|(
name|TaskInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"KILLED"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempts
argument_list|)
expr_stmt|;
name|recoverMapTask
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskId
argument_list|,
name|mockTaskInfo
argument_list|,
name|mockCommitter
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
operator|)
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
argument_list|()
decl_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId1
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|finalAttemptStates
operator|.
name|put
argument_list|(
name|taId2
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EventType
argument_list|>
name|jobHistoryEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|EventType
argument_list|>
argument_list|()
decl_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_KILLED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_STARTED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_KILLED
argument_list|)
expr_stmt|;
name|jobHistoryEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|TASK_FAILED
argument_list|)
expr_stmt|;
name|recoveryChecker
argument_list|(
name|recoverMapTask
argument_list|,
name|TaskState
operator|.
name|KILLED
argument_list|,
name|finalAttemptStates
argument_list|,
name|arg
argument_list|,
name|jobHistoryEvents
argument_list|,
literal|2L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|recoveryChecker (MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps)
specifier|private
name|void
name|recoveryChecker
parameter_list|(
name|MapTaskImpl
name|checkTask
parameter_list|,
name|TaskState
name|finalState
parameter_list|,
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptState
argument_list|>
name|finalAttemptStates
parameter_list|,
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
parameter_list|,
name|List
argument_list|<
name|EventType
argument_list|>
name|expectedJobHistoryEvents
parameter_list|,
name|long
name|expectedMapLaunches
parameter_list|,
name|long
name|expectedFailedMaps
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Final State of Task"
argument_list|,
name|finalState
argument_list|,
name|checkTask
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|recoveredAttempts
init|=
name|checkTask
operator|.
name|getAttempts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected Number of Task Attempts"
argument_list|,
name|finalAttemptStates
operator|.
name|size
argument_list|()
argument_list|,
name|recoveredAttempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttemptID
name|taID
range|:
name|finalAttemptStates
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expected Task Attempt State"
argument_list|,
name|finalAttemptStates
operator|.
name|get
argument_list|(
name|taID
argument_list|)
argument_list|,
name|recoveredAttempts
operator|.
name|get
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taID
argument_list|)
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Event
argument_list|>
name|ie
init|=
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|eventNum
init|=
literal|0
decl_stmt|;
name|long
name|totalLaunchedMaps
init|=
literal|0
decl_stmt|;
name|long
name|totalFailedMaps
init|=
literal|0
decl_stmt|;
name|boolean
name|jobTaskEventReceived
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|ie
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|current
init|=
name|ie
operator|.
name|next
argument_list|()
decl_stmt|;
operator|++
name|eventNum
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|eventNum
operator|+
literal|" "
operator|+
name|current
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|JobHistoryEvent
condition|)
block|{
name|JobHistoryEvent
name|jhe
init|=
operator|(
name|JobHistoryEvent
operator|)
name|current
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|expectedJobHistoryEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|jhe
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|jhe
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedJobHistoryEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jhe
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|expectedJobHistoryEvents
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|JobCounterUpdateEvent
condition|)
block|{
name|JobCounterUpdateEvent
name|jcue
init|=
operator|(
name|JobCounterUpdateEvent
operator|)
name|current
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobCounterUpdateEvent "
operator|+
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounterKey
argument_list|()
operator|+
literal|" "
operator|+
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIncrementValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounterKey
argument_list|()
operator|==
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
condition|)
block|{
name|totalFailedMaps
operator|+=
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIncrementValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounterKey
argument_list|()
operator|==
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
condition|)
block|{
name|totalLaunchedMaps
operator|+=
name|jcue
operator|.
name|getCounterUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIncrementValue
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|JobTaskEvent
condition|)
block|{
name|JobTaskEvent
name|jte
init|=
operator|(
name|JobTaskEvent
operator|)
name|current
decl_stmt|;
name|assertEquals
argument_list|(
name|jte
operator|.
name|getState
argument_list|()
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
name|jobTaskEventReceived
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|jobTaskEventReceived
operator|||
operator|(
name|finalState
operator|==
name|TaskState
operator|.
name|RUNNING
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not process all expected JobHistoryEvents"
argument_list|,
literal|0
argument_list|,
name|expectedJobHistoryEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected Map Launches"
argument_list|,
name|expectedMapLaunches
argument_list|,
name|totalLaunchedMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected Failed Maps"
argument_list|,
name|expectedFailedMaps
argument_list|,
name|totalFailedMaps
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockMapTask (long clusterTimestamp, EventHandler eh)
specifier|private
name|MapTaskImpl
name|getMockMapTask
parameter_list|(
name|long
name|clusterTimestamp
parameter_list|,
name|EventHandler
name|eh
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTimestamp
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|partitions
init|=
literal|2
decl_stmt|;
name|Path
name|remoteJobConfFile
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|TaskAttemptListener
name|taskAttemptListener
init|=
name|mock
argument_list|(
name|TaskAttemptListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
init|=
operator|(
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
operator|)
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
name|int
name|appAttemptId
init|=
literal|3
decl_stmt|;
name|MRAppMetrics
name|metrics
init|=
name|mock
argument_list|(
name|MRAppMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|minContainerRequirements
init|=
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|minContainerRequirements
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|mock
argument_list|(
name|ClusterInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|appContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterInfo
argument_list|)
expr_stmt|;
name|TaskSplitMetaInfo
name|taskSplitMetaInfo
init|=
name|mock
argument_list|(
name|TaskSplitMetaInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|MapTaskImpl
name|mapTask
init|=
operator|new
name|MapTaskImpl
argument_list|(
name|jobId
argument_list|,
name|partitions
argument_list|,
name|eh
argument_list|,
name|remoteJobConfFile
argument_list|,
name|conf
argument_list|,
name|taskSplitMetaInfo
argument_list|,
name|taskAttemptListener
argument_list|,
name|jobToken
argument_list|,
name|credentials
argument_list|,
name|clock
argument_list|,
name|appAttemptId
argument_list|,
name|metrics
argument_list|,
name|appContext
argument_list|)
decl_stmt|;
return|return
name|mapTask
return|;
block|}
DECL|method|getMockTaskAttemptInfo (TaskAttemptID tai, TaskAttemptState tas)
specifier|private
name|TaskAttemptInfo
name|getMockTaskAttemptInfo
parameter_list|(
name|TaskAttemptID
name|tai
parameter_list|,
name|TaskAttemptState
name|tas
parameter_list|)
block|{
name|ContainerId
name|ci
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
name|mock
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskType
name|tt
init|=
name|TaskType
operator|.
name|MAP
decl_stmt|;
name|long
name|finishTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TaskAttemptInfo
name|mockTAinfo
init|=
name|mock
argument_list|(
name|TaskAttemptInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tai
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getCounters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|counters
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getError
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getHttpPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getMapFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|finishTime
operator|-
literal|1000L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getRackname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"defaultRack"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|finishTime
operator|-
literal|2000L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getShufflePort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|finishTime
operator|-
literal|3000L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|finishTime
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"task in progress"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tas
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTAinfo
operator|.
name|getTrackerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TrackerName"
argument_list|)
expr_stmt|;
return|return
name|mockTAinfo
return|;
block|}
DECL|method|writeBadOutput (TaskAttempt attempt, Configuration conf)
specifier|private
name|void
name|writeBadOutput
parameter_list|(
name|TaskAttempt
name|attempt
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TextOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|NullWritable
name|nullWritable
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|nullWritable
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|theRecordWriter
operator|.
name|close
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
block|}
name|OutputFormat
name|outputFormat
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|tContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
block|}
DECL|method|writeOutput (TaskAttempt attempt, Configuration conf)
specifier|private
name|void
name|writeOutput
parameter_list|(
name|TaskAttempt
name|attempt
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttemptContext
name|tContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TextOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|theOutputFormat
init|=
operator|new
name|TextOutputFormat
argument_list|()
decl_stmt|;
name|RecordWriter
name|theRecordWriter
init|=
name|theOutputFormat
operator|.
name|getRecordWriter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|NullWritable
name|nullWritable
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|nullWritable
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
name|nullWritable
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|theRecordWriter
operator|.
name|write
argument_list|(
name|key2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|theRecordWriter
operator|.
name|close
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
block|}
name|OutputFormat
name|outputFormat
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|tContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|OutputCommitter
name|committer
init|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|tContext
argument_list|)
decl_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|tContext
argument_list|)
expr_stmt|;
block|}
DECL|method|validateOutput ()
specifier|private
name|void
name|validateOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|expectedFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
name|partFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|expectedOutput
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key1
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|val1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|val1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|val2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key1
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|key2
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|val2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|slurp
argument_list|(
name|expectedFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|output
argument_list|,
name|expectedOutput
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|slurp (File f)
specifier|public
specifier|static
name|String
name|slurp
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|f
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
DECL|class|MRAppWithHistory
specifier|static
class|class
name|MRAppWithHistory
extends|extends
name|MRApp
block|{
DECL|method|MRAppWithHistory (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount)
specifier|public
name|MRAppWithHistory
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContainerLauncher (AppContext context)
specifier|protected
name|ContainerLauncher
name|createContainerLauncher
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|MockContainerLauncher
name|launcher
init|=
operator|new
name|MockContainerLauncher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
name|TaskAttemptId
name|taskAttemptID
init|=
name|event
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
comment|// Pass everything except the 2nd attempt of the first task.
if|if
condition|(
name|taskAttemptID
operator|.
name|getId
argument_list|()
operator|!=
literal|1
operator|||
name|taskAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|super
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|launcher
operator|.
name|shufflePort
operator|=
literal|5467
expr_stmt|;
return|return
name|launcher
return|;
block|}
annotation|@
name|Override
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|JobHistoryEventHandler
name|eventHandler
init|=
operator|new
name|JobHistoryEventHandler
argument_list|(
name|context
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|eventHandler
return|;
block|}
block|}
DECL|class|MRAppNoShuffleSecret
specifier|static
class|class
name|MRAppNoShuffleSecret
extends|extends
name|MRAppWithHistory
block|{
DECL|method|MRAppNoShuffleSecret (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount)
specifier|public
name|MRAppNoShuffleSecret
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initJobCredentialsAndUGI (Configuration conf)
specifier|protected
name|void
name|initJobCredentialsAndUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// do NOT put a shuffle secret in the job credentials
block|}
block|}
DECL|method|main (String[] arg)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRecovery
name|test
init|=
operator|new
name|TestRecovery
argument_list|()
decl_stmt|;
name|test
operator|.
name|testCrashed
argument_list|()
expr_stmt|;
name|test
operator|.
name|testMultipleCrashes
argument_list|()
expr_stmt|;
name|test
operator|.
name|testOutputRecovery
argument_list|()
expr_stmt|;
name|test
operator|.
name|testOutputRecoveryMapsOnly
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryWithOldCommiter
argument_list|()
expr_stmt|;
name|test
operator|.
name|testSpeculative
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryWithoutShuffleSecret
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoverySuccessAttempt
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryAllFailAttempts
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryTaskSuccessAllAttemptsFail
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryTaskSuccessAllAttemptsSucceed
argument_list|()
expr_stmt|;
name|test
operator|.
name|testRecoveryAllAttemptsKilled
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

