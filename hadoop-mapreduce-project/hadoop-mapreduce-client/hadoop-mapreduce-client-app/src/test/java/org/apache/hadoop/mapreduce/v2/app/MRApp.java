begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedJvmID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|NormalizedResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|MRClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttemptStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerLaunchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|TaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|TaskImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|AMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Mock MRAppMaster. Doesn't start RPC servers.  * No threads are started except of the event Dispatcher thread.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|MRApp
specifier|public
class|class
name|MRApp
extends|extends
name|MRAppMaster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRApp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maps
name|int
name|maps
decl_stmt|;
DECL|field|reduces
name|int
name|reduces
decl_stmt|;
DECL|field|testWorkDir
specifier|private
name|File
name|testWorkDir
decl_stmt|;
DECL|field|testAbsPath
specifier|private
name|Path
name|testAbsPath
decl_stmt|;
DECL|field|clusterInfo
specifier|private
name|ClusterInfo
name|clusterInfo
decl_stmt|;
comment|// Queue to pretend the RM assigned us
DECL|field|assignedQueue
specifier|private
name|String
name|assignedQueue
decl_stmt|;
DECL|field|NM_HOST
specifier|public
specifier|static
name|String
name|NM_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|NM_PORT
specifier|public
specifier|static
name|int
name|NM_PORT
init|=
literal|1234
decl_stmt|;
DECL|field|NM_HTTP_PORT
specifier|public
specifier|static
name|int
name|NM_HTTP_PORT
init|=
literal|8042
decl_stmt|;
comment|//if true, tasks complete automatically as soon as they are launched
DECL|field|autoComplete
specifier|protected
name|boolean
name|autoComplete
init|=
literal|false
decl_stmt|;
DECL|field|applicationId
specifier|static
name|ApplicationId
name|applicationId
decl_stmt|;
static|static
block|{
name|applicationId
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, Clock clock)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
literal|1
argument_list|,
name|clock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, Clock clock, boolean unregistered)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|boolean
name|unregistered
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
literal|1
argument_list|,
name|clock
argument_list|,
name|unregistered
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, String assignedQueue)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|String
name|assignedQueue
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
literal|1
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|assignedQueue
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, boolean unregistered)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|boolean
name|unregistered
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
literal|1
argument_list|,
name|unregistered
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initJobCredentialsAndUGI (Configuration conf)
specifier|protected
name|void
name|initJobCredentialsAndUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Fake a shuffle secret that normally is provided by the job client.
name|String
name|shuffleSecret
init|=
literal|"fake-shuffle-secret"
decl_stmt|;
name|TokenCache
operator|.
name|setShuffleSecretKey
argument_list|(
name|shuffleSecret
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationAttemptId ( ApplicationId applicationId, int startCount)
specifier|private
specifier|static
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
decl_stmt|;
return|return
name|applicationAttemptId
return|;
block|}
DECL|method|getContainerId (ApplicationId applicationId, int startCount)
specifier|private
specifier|static
name|ContainerId
name|getContainerId
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|getApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|startCount
argument_list|)
decl_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount, boolean unregistered)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|,
name|boolean
name|unregistered
parameter_list|)
block|{
name|this
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|unregistered
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount, Clock clock, boolean unregistered)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|boolean
name|unregistered
parameter_list|)
block|{
name|this
argument_list|(
name|getApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
argument_list|,
name|getContainerId
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
name|clock
argument_list|,
name|unregistered
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount, Clock clock, String assignedQueue)
specifier|public
name|MRApp
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|String
name|assignedQueue
parameter_list|)
block|{
name|this
argument_list|(
name|getApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
argument_list|,
name|getContainerId
argument_list|(
name|applicationId
argument_list|,
name|startCount
argument_list|)
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
name|clock
argument_list|,
literal|true
argument_list|,
name|assignedQueue
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (ApplicationAttemptId appAttemptId, ContainerId amContainerId, int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount, boolean unregistered)
specifier|public
name|MRApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ContainerId
name|amContainerId
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|,
name|boolean
name|unregistered
parameter_list|)
block|{
name|this
argument_list|(
name|appAttemptId
argument_list|,
name|amContainerId
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|unregistered
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (ApplicationAttemptId appAttemptId, ContainerId amContainerId, int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount)
specifier|public
name|MRApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ContainerId
name|amContainerId
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|this
argument_list|(
name|appAttemptId
argument_list|,
name|amContainerId
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MRApp (ApplicationAttemptId appAttemptId, ContainerId amContainerId, int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount, Clock clock, boolean unregistered, String assignedQueue)
specifier|public
name|MRApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ContainerId
name|amContainerId
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|boolean
name|unregistered
parameter_list|,
name|String
name|assignedQueue
parameter_list|)
block|{
name|super
argument_list|(
name|appAttemptId
argument_list|,
name|amContainerId
argument_list|,
name|NM_HOST
argument_list|,
name|NM_PORT
argument_list|,
name|NM_HTTP_PORT
argument_list|,
name|clock
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|testWorkDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|testName
argument_list|)
expr_stmt|;
name|testAbsPath
operator|=
operator|new
name|Path
argument_list|(
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PathUsed: "
operator|+
name|testAbsPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanOnStart
condition|)
block|{
name|testAbsPath
operator|=
operator|new
name|Path
argument_list|(
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
name|testAbsPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"COULD NOT CLEANUP: "
operator|+
name|testAbsPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup test dir"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|maps
operator|=
name|maps
expr_stmt|;
name|this
operator|.
name|reduces
operator|=
name|reduces
expr_stmt|;
name|this
operator|.
name|autoComplete
operator|=
name|autoComplete
expr_stmt|;
comment|// If safeToReportTerminationToUser is set to true, we can verify whether
comment|// the job can reaches the final state when MRAppMaster shuts down.
name|this
operator|.
name|successfullyUnregistered
operator|.
name|set
argument_list|(
name|unregistered
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignedQueue
operator|=
name|assignedQueue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|//Create the staging directory if it does not exist
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Path
name|stagingDir
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Error creating staging dir"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|clusterInfo
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|setMaxContainerCapability
argument_list|(
name|this
operator|.
name|clusterInfo
operator|.
name|getMaxContainerCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContext
argument_list|()
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|setMaxContainerCapability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|submit (Configuration conf)
specifier|public
name|Job
name|submit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|//TODO: fix the bug where the speculator gets events with
comment|//not-fully-constructed objects. For now, disable speculative exec
return|return
name|submit
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|submit (Configuration conf, boolean mapSpeculative, boolean reduceSpeculative)
specifier|public
name|Job
name|submit
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|mapSpeculative
parameter_list|,
name|boolean
name|reduceSpeculative
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|testAbsPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_CREATE_JH_INTERMEDIATE_BASE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: fix the bug where the speculator gets events with
comment|// not-fully-constructed objects. For now, disable speculative exec
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
name|mapSpeculative
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
name|reduceSpeculative
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedQueue
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setQueueName
argument_list|(
name|assignedQueue
argument_list|)
expr_stmt|;
block|}
comment|// Write job.xml
name|String
name|jobFile
init|=
name|MRApps
operator|.
name|getJobFile
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing job conf to "
operator|+
name|jobFile
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|jobFile
argument_list|)
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jobFile
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|waitForInternalState (JobImpl job, JobStateInternal finalState)
specifier|public
name|void
name|waitForInternalState
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobStateInternal
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|JobStateInternal
name|iState
init|=
name|job
operator|.
name|getInternalState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|iState
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job Internal State is : "
operator|+
name|iState
operator|+
literal|" Waiting for Internal state : "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|iState
operator|=
name|job
operator|.
name|getInternalState
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task Internal State is : "
operator|+
name|iState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Internal state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|iState
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForInternalState (TaskImpl task, TaskStateInternal finalState)
specifier|public
name|void
name|waitForInternalState
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskStateInternal
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|TaskReport
name|report
init|=
name|task
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|TaskStateInternal
name|iState
init|=
name|task
operator|.
name|getInternalState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|iState
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task Internal State is : "
operator|+
name|iState
operator|+
literal|" Waiting for Internal state : "
operator|+
name|finalState
operator|+
literal|"   progress : "
operator|+
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|report
operator|=
name|task
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|iState
operator|=
name|task
operator|.
name|getInternalState
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task Internal State is : "
operator|+
name|iState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task Internal state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|iState
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForInternalState (TaskAttemptImpl attempt, TaskAttemptStateInternal finalState)
specifier|public
name|void
name|waitForInternalState
parameter_list|(
name|TaskAttemptImpl
name|attempt
parameter_list|,
name|TaskAttemptStateInternal
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|TaskAttemptReport
name|report
init|=
name|attempt
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|TaskAttemptStateInternal
name|iState
init|=
name|attempt
operator|.
name|getInternalState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|iState
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TaskAttempt Internal State is : "
operator|+
name|iState
operator|+
literal|" Waiting for Internal state : "
operator|+
name|finalState
operator|+
literal|"   progress : "
operator|+
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|report
operator|=
name|attempt
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|iState
operator|=
name|attempt
operator|.
name|getInternalState
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TaskAttempt Internal State is : "
operator|+
name|iState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TaskAttempt Internal state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|iState
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForState (TaskAttempt attempt, TaskAttemptState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|TaskAttempt
name|attempt
parameter_list|,
name|TaskAttemptState
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|TaskAttemptReport
name|report
init|=
name|attempt
operator|.
name|getReport
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TaskAttempt State is : "
operator|+
name|report
operator|.
name|getTaskAttemptState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
operator|+
literal|"   progress : "
operator|+
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|attempt
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TaskAttempt State is : "
operator|+
name|report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TaskAttempt state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|report
operator|.
name|getTaskAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForState (Task task, TaskState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|Task
name|task
parameter_list|,
name|TaskState
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|TaskReport
name|report
init|=
name|task
operator|.
name|getReport
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task State for "
operator|+
name|task
operator|.
name|getID
argument_list|()
operator|+
literal|" is : "
operator|+
name|report
operator|.
name|getTaskState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
operator|+
literal|"   progress : "
operator|+
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|task
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task State is : "
operator|+
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForState (Job job, JobState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|Job
name|job
parameter_list|,
name|JobState
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|JobReport
name|report
init|=
name|job
operator|.
name|getReport
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|report
operator|.
name|getJobState
argument_list|()
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job State is : "
operator|+
name|report
operator|.
name|getJobState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
operator|+
literal|"   map progress : "
operator|+
name|report
operator|.
name|getMapProgress
argument_list|()
operator|+
literal|"   reduce progress : "
operator|+
name|report
operator|.
name|getReduceProgress
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|job
operator|.
name|getReport
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job State is : "
operator|+
name|report
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|job
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForState (Service.STATE finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|Service
operator|.
name|STATE
name|finalState
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|finalState
operator|==
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Timeout while waiting for MRApp to stop"
argument_list|,
name|waitForServiceToStop
argument_list|(
literal|20
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|getServiceState
argument_list|()
argument_list|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MRApp State is : "
operator|+
name|getServiceState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MRApp State is : "
operator|+
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MRApp state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyCompleted ()
specifier|public
name|void
name|verifyCompleted
parameter_list|()
block|{
for|for
control|(
name|Job
name|job
range|:
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|JobReport
name|jobReport
init|=
name|job
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job start time :"
operator|+
name|jobReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job finish time :"
operator|+
name|jobReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job start time is not less than finish time"
argument_list|,
name|jobReport
operator|.
name|getStartTime
argument_list|()
operator|<=
name|jobReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job finish time is in future"
argument_list|,
name|jobReport
operator|.
name|getFinishTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskReport
name|taskReport
init|=
name|task
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task start time : "
operator|+
name|taskReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task finish time : "
operator|+
name|taskReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task start time is not less than finish time"
argument_list|,
name|taskReport
operator|.
name|getStartTime
argument_list|()
operator|<=
name|taskReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskAttemptReport
name|attemptReport
init|=
name|attempt
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Attempt start time is not less than finish time"
argument_list|,
name|attemptReport
operator|.
name|getStartTime
argument_list|()
operator|<=
name|attemptReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createJob (Configuration conf, JobStateInternal forcedState, String diagnostic)
specifier|protected
name|Job
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobStateInternal
name|forcedState
parameter_list|,
name|String
name|diagnostic
parameter_list|)
block|{
name|UserGroupInformation
name|currentUser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|currentUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Job
name|newJob
init|=
operator|new
name|TestJob
argument_list|(
name|getJobId
argument_list|()
argument_list|,
name|getAttemptID
argument_list|()
argument_list|,
name|conf
argument_list|,
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|getTaskAttemptListener
argument_list|()
argument_list|,
name|getContext
argument_list|()
operator|.
name|getClock
argument_list|()
argument_list|,
name|getCommitter
argument_list|()
argument_list|,
name|isNewApiCommitter
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|forcedState
argument_list|,
name|diagnostic
argument_list|)
decl_stmt|;
operator|(
operator|(
name|AppContext
operator|)
name|getContext
argument_list|()
operator|)
operator|.
name|getAllJobs
argument_list|()
operator|.
name|put
argument_list|(
name|newJob
operator|.
name|getID
argument_list|()
argument_list|,
name|newJob
argument_list|)
expr_stmt|;
name|getDispatcher
argument_list|()
operator|.
name|register
argument_list|(
name|JobFinishEvent
operator|.
name|Type
operator|.
name|class
argument_list|,
operator|new
name|EventHandler
argument_list|<
name|JobFinishEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|JobFinishEvent
name|event
parameter_list|)
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|newJob
return|;
block|}
annotation|@
name|Override
DECL|method|createTaskAttemptListener ( AppContext context, AMPreemptionPolicy policy)
specifier|protected
name|TaskAttemptListener
name|createTaskAttemptListener
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|AMPreemptionPolicy
name|policy
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:54321"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerLaunchedTask
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|WrappedJvmID
name|jvmID
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|WrappedJvmID
name|jvmID
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|registerPendingTask
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
name|task
parameter_list|,
name|WrappedJvmID
name|jvmID
parameter_list|)
block|{       }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
comment|//disable history
return|return
operator|new
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{       }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createContainerLauncher (AppContext context)
specifier|protected
name|ContainerLauncher
name|createContainerLauncher
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MockContainerLauncher
argument_list|()
return|;
block|}
DECL|class|MockContainerLauncher
specifier|protected
class|class
name|MockContainerLauncher
implements|implements
name|ContainerLauncher
block|{
comment|//We are running locally so set the shuffle port to -1
DECL|field|shufflePort
name|int
name|shufflePort
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MockContainerLauncher ()
specifier|public
name|MockContainerLauncher
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|handle (ContainerLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONTAINER_REMOTE_LAUNCH
case|:
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptContainerLaunchedEvent
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|shufflePort
argument_list|)
argument_list|)
expr_stmt|;
name|attemptLaunched
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_REMOTE_CLEANUP
case|:
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|attemptLaunched (TaskAttemptId attemptID)
specifier|protected
name|void
name|attemptLaunched
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|autoComplete
condition|)
block|{
comment|// send the done event
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createContainerAllocator ( ClientService clientService, final AppContext context)
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRAppContainerAllocator
argument_list|()
return|;
block|}
DECL|class|MRAppContainerAllocator
specifier|protected
class|class
name|MRAppContainerAllocator
implements|implements
name|ContainerAllocator
implements|,
name|RMHeartbeatHandler
block|{
DECL|field|containerCount
specifier|private
name|int
name|containerCount
decl_stmt|;
annotation|@
name|Override
DECL|method|handle (ContainerAllocatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|getContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerCount
operator|++
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|NM_HOST
argument_list|,
name|NM_PORT
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|cId
argument_list|,
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|,
literal|"user"
argument_list|,
name|resource
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
argument_list|,
literal|42
argument_list|,
literal|42
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|newContainerToken
argument_list|(
name|nodeId
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|containerTokenIdentifier
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|cId
argument_list|,
name|nodeId
argument_list|,
name|NM_HOST
operator|+
literal|":"
operator|+
name|NM_HTTP_PORT
argument_list|,
name|resource
argument_list|,
literal|null
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
operator|new
name|NormalizedResourceEvent
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
operator|new
name|NormalizedResourceEvent
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptContainerAssignedEvent
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|container
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastHeartbeatTime ()
specifier|public
name|long
name|getLastHeartbeatTime
parameter_list|()
block|{
return|return
name|getContext
argument_list|()
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runOnNextHeartbeat (Runnable callback)
specifier|public
name|void
name|runOnNextHeartbeat
parameter_list|(
name|Runnable
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCommitterEventHandler ( AppContext context, final OutputCommitter committer)
specifier|protected
name|EventHandler
argument_list|<
name|CommitterEvent
argument_list|>
name|createCommitterEventHandler
parameter_list|(
name|AppContext
name|context
parameter_list|,
specifier|final
name|OutputCommitter
name|committer
parameter_list|)
block|{
comment|// create an output committer with the task methods stubbed out
name|OutputCommitter
name|stubbedCommitter
init|=
operator|new
name|OutputCommitter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|committer
operator|.
name|setupJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|committer
operator|.
name|cleanupJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|committer
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRecoverySupported
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|committer
operator|.
name|isRecoverySupported
argument_list|(
name|jobContext
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|isRecoverySupported
parameter_list|()
block|{
return|return
name|committer
operator|.
name|isRecoverySupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{       }
annotation|@
name|Override
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|recoverTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{       }
block|}
decl_stmt|;
return|return
operator|new
name|CommitterEventHandler
argument_list|(
name|context
argument_list|,
name|stubbedCommitter
argument_list|,
name|getRMHeartbeatHandler
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createClientService (AppContext context)
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:9876"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|;
block|}
DECL|method|setClusterInfo (ClusterInfo clusterInfo)
specifier|public
name|void
name|setClusterInfo
parameter_list|(
name|ClusterInfo
name|clusterInfo
parameter_list|)
block|{
comment|// Only useful if set before a job is started.
if|if
condition|(
name|getServiceState
argument_list|()
operator|==
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
operator|||
name|getServiceState
argument_list|()
operator|==
name|Service
operator|.
name|STATE
operator|.
name|INITED
condition|)
block|{
name|this
operator|.
name|clusterInfo
operator|=
name|clusterInfo
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ClusterInfo can only be set before the App is STARTED"
argument_list|)
throw|;
block|}
block|}
DECL|class|TestJob
class|class
name|TestJob
extends|extends
name|JobImpl
block|{
comment|//override the init transition
DECL|field|initTransition
specifier|private
specifier|final
name|TestInitTransition
name|initTransition
init|=
operator|new
name|TestInitTransition
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|)
decl_stmt|;
DECL|field|localFactory
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|localFactory
init|=
name|stateMachineFactory
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
comment|// This is abusive.
name|initTransition
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
DECL|field|localStateMachine
name|localStateMachine
decl_stmt|;
annotation|@
name|Override
DECL|method|getStateMachine ()
specifier|protected
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|getStateMachine
parameter_list|()
block|{
return|return
name|localStateMachine
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|TestJob (JobId jobId, ApplicationAttemptId applicationAttemptId, Configuration conf, EventHandler eventHandler, TaskAttemptListener taskAttemptListener, Clock clock, OutputCommitter committer, boolean newApiCommitter, String user, AppContext appContext, JobStateInternal forcedState, String diagnostic)
specifier|public
name|TestJob
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|boolean
name|newApiCommitter
parameter_list|,
name|String
name|user
parameter_list|,
name|AppContext
name|appContext
parameter_list|,
name|JobStateInternal
name|forcedState
parameter_list|,
name|String
name|diagnostic
parameter_list|)
block|{
name|super
argument_list|(
name|jobId
argument_list|,
name|getApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|eventHandler
argument_list|,
name|taskAttemptListener
argument_list|,
operator|new
name|JobTokenSecretManager
argument_list|()
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
name|clock
argument_list|,
name|getCompletedTaskFromPreviousRun
argument_list|()
argument_list|,
name|metrics
argument_list|,
name|committer
argument_list|,
name|newApiCommitter
argument_list|,
name|user
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|getAllAMInfos
argument_list|()
argument_list|,
name|appContext
argument_list|,
name|forcedState
argument_list|,
name|diagnostic
argument_list|)
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|localStateMachine
operator|=
name|localFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Override InitTransition to not look for split files etc
DECL|class|TestInitTransition
specifier|static
class|class
name|TestInitTransition
extends|extends
name|JobImpl
operator|.
name|InitTransition
block|{
DECL|field|maps
specifier|private
name|int
name|maps
decl_stmt|;
DECL|field|reduces
specifier|private
name|int
name|reduces
decl_stmt|;
DECL|method|TestInitTransition (int maps, int reduces)
name|TestInitTransition
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|)
block|{
name|this
operator|.
name|maps
operator|=
name|maps
expr_stmt|;
name|this
operator|.
name|reduces
operator|=
name|reduces
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup (JobImpl job)
specifier|protected
name|void
name|setup
parameter_list|(
name|JobImpl
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
name|reduces
argument_list|)
expr_stmt|;
name|job
operator|.
name|remoteJobConfFile
operator|=
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSplits (JobImpl job, JobId jobId)
specifier|protected
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|TaskSplitMetaInfo
index|[]
name|splits
init|=
operator|new
name|TaskSplitMetaInfo
index|[
name|maps
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
condition|;
name|i
operator|++
control|)
block|{
name|splits
index|[
name|i
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
block|}
DECL|method|newContainerToken (NodeId nodeId, byte[] password, ContainerTokenIdentifier tokenIdentifier)
specifier|public
specifier|static
name|Token
name|newContainerToken
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|ContainerTokenIdentifier
name|tokenIdentifier
parameter_list|)
block|{
comment|// RPC layer client expects ip:port as service for tokens
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// NOTE: use SecurityUtil.setTokenService if this becomes a "real" token
name|Token
name|containerToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|tokenIdentifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ContainerTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
name|password
argument_list|,
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|addr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|containerToken
return|;
block|}
DECL|method|newContainerId (int appId, int appAttemptId, long timestamp, int containerId)
specifier|public
specifier|static
name|ContainerId
name|newContainerId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|appAttemptId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|timestamp
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
return|return
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
DECL|method|newContainerTokenIdentifier ( Token containerToken)
specifier|public
specifier|static
name|ContainerTokenIdentifier
name|newContainerTokenIdentifier
parameter_list|(
name|Token
name|containerToken
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|containerToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|containerToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|token
operator|.
name|decodeIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

