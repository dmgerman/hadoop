begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFetchFailure
specifier|public
class|class
name|TestFetchFailure
block|{
annotation|@
name|Test
DECL|method|testFetchFailure ()
specifier|public
name|void
name|testFetchFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// map -> reduce -> fetch-failure -> map retry is incompatible with
comment|// sequential, single-task-attempt approach in uber-AM, so disable:
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//wait for Task state move to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt1
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for reduce to start running
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send 3 fetch failures from reduce to trigger map re execution
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
comment|//wait for map Task state move back to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//map attempt must have become FAILED
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Map TaskAttempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|mapAttempt1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num attempts in Map Task not correct"
argument_list|,
literal|2
argument_list|,
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|atIt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|atIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|mapAttempt2
init|=
name|atIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt2
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the second map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//previous completion event now becomes obsolete
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|4
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event redude attempt id not correct"
argument_list|,
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt2"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for reduce attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|TaskCompletionEvent
name|mapEvents
index|[]
init|=
name|job
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskCompletionEvent
name|convertedEvents
index|[]
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of map events"
argument_list|,
literal|2
argument_list|,
name|mapEvents
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Unexpected map events"
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|convertedEvents
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEvents
argument_list|)
expr_stmt|;
name|mapEvents
operator|=
name|job
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of map events"
argument_list|,
literal|1
argument_list|,
name|mapEvents
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected map event"
argument_list|,
name|convertedEvents
index|[
literal|2
index|]
argument_list|,
name|mapEvents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * This tests that if a map attempt was failed (say due to fetch failures),    * then it gets re-run. When the next map attempt is running, if the AM dies,    * then, on AM re-run, the AM does not incorrectly remember the first failed    * attempt. Currently recovery does not recover running tasks. Effectively,    * the AM re-runs the maps from scratch.    */
annotation|@
name|Test
DECL|method|testFetchFailureWithRecovery ()
specifier|public
name|void
name|testFetchFailureWithRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runCount
init|=
literal|0
decl_stmt|;
name|MRApp
name|app
init|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|++
name|runCount
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// map -> reduce -> fetch-failure -> map retry is incompatible with
comment|// sequential, single-task-attempt approach in uber-AM, so disable:
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//wait for Task state move to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt1
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for reduce to start running
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send 3 fetch failures from reduce to trigger map re execution
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
comment|//wait for map Task state move back to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Crash the app again.
name|app
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//rerun
name|app
operator|=
operator|new
name|MRAppWithHistory
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|++
name|runCount
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|mapTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|reduceTask
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// the map is not in a SUCCEEDED state after restart of AM
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|mapAttempt1
operator|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|reduceAttempt
operator|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|events
operator|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|2
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFetchFailureMultipleReduces ()
specifier|public
name|void
name|testFetchFailureMultipleReduces
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// map -> reduce -> fetch-failure -> map retry is incompatible with
comment|// sequential, single-task-attempt approach in uber-AM, so disable:
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|4
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask3
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//wait for Task state move to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt1
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for reduce to start running
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask2
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask3
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|updateStatus
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|Phase
operator|.
name|SHUFFLE
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt2
init|=
name|reduceTask2
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt2
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|updateStatus
argument_list|(
name|app
argument_list|,
name|reduceAttempt2
argument_list|,
name|Phase
operator|.
name|SHUFFLE
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt3
init|=
name|reduceTask3
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt3
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|updateStatus
argument_list|(
name|app
argument_list|,
name|reduceAttempt3
argument_list|,
name|Phase
operator|.
name|SHUFFLE
argument_list|)
expr_stmt|;
comment|//send 2 fetch failures from reduce to prepare for map re execution
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt2
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
comment|//We should not re-launch the map task yet
name|assertEquals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|,
name|mapTask
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|updateStatus
argument_list|(
name|app
argument_list|,
name|reduceAttempt2
argument_list|,
name|Phase
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|updateStatus
argument_list|(
name|app
argument_list|,
name|reduceAttempt3
argument_list|,
name|Phase
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
comment|//send 3rd fetch failures from reduce to trigger map re execution
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt3
argument_list|,
name|mapAttempt1
argument_list|,
literal|"host3"
argument_list|)
expr_stmt|;
comment|//wait for map Task state move back to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//map attempt must have become FAILED
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Map TaskAttempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|mapAttempt1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mapAttempt1
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Too many fetch failures. Failing the attempt. "
operator|+
literal|"Last failure reported by "
operator|+
name|reduceAttempt3
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" from host host3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num attempts in Map Task not correct"
argument_list|,
literal|2
argument_list|,
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|atIt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|atIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|mapAttempt2
init|=
name|atIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt2
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the second map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt3
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//previous completion event now becomes obsolete
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|6
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event reduce attempt id not correct"
argument_list|,
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt2"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for reduce attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|TaskCompletionEvent
name|mapEvents
index|[]
init|=
name|job
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskCompletionEvent
name|convertedEvents
index|[]
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of map events"
argument_list|,
literal|2
argument_list|,
name|mapEvents
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Unexpected map events"
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|convertedEvents
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEvents
argument_list|)
expr_stmt|;
name|mapEvents
operator|=
name|job
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of map events"
argument_list|,
literal|1
argument_list|,
name|mapEvents
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected map event"
argument_list|,
name|convertedEvents
index|[
literal|2
index|]
argument_list|,
name|mapEvents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|updateStatus (MRApp app, TaskAttempt attempt, Phase phase)
specifier|private
name|void
name|updateStatus
parameter_list|(
name|MRApp
name|app
parameter_list|,
name|TaskAttempt
name|attempt
parameter_list|,
name|Phase
name|phase
parameter_list|)
block|{
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
name|status
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|counters
operator|=
operator|new
name|Counters
argument_list|()
expr_stmt|;
name|status
operator|.
name|fetchFailedMaps
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
expr_stmt|;
name|status
operator|.
name|id
operator|=
name|attempt
operator|.
name|getID
argument_list|()
expr_stmt|;
name|status
operator|.
name|mapFinishTime
operator|=
literal|0
expr_stmt|;
name|status
operator|.
name|phase
operator|=
name|phase
expr_stmt|;
name|status
operator|.
name|progress
operator|=
literal|0.5f
expr_stmt|;
name|status
operator|.
name|shuffleFinishTime
operator|=
literal|0
expr_stmt|;
name|status
operator|.
name|sortFinishTime
operator|=
literal|0
expr_stmt|;
name|status
operator|.
name|stateString
operator|=
literal|"OK"
expr_stmt|;
name|status
operator|.
name|taskState
operator|=
name|attempt
operator|.
name|getState
argument_list|()
expr_stmt|;
name|TaskAttemptStatusUpdateEvent
name|event
init|=
operator|new
name|TaskAttemptStatusUpdateEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFetchFailure (MRApp app, TaskAttempt reduceAttempt, TaskAttempt mapAttempt, String hostname)
specifier|private
name|void
name|sendFetchFailure
parameter_list|(
name|MRApp
name|app
parameter_list|,
name|TaskAttempt
name|reduceAttempt
parameter_list|,
name|TaskAttempt
name|mapAttempt
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskAttemptFetchFailureEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TaskAttemptId
index|[]
block|{
name|mapAttempt
operator|.
name|getID
argument_list|()
block|}
argument_list|)
argument_list|,
name|hostname
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MRAppWithHistory
specifier|static
class|class
name|MRAppWithHistory
extends|extends
name|MRApp
block|{
DECL|method|MRAppWithHistory (int maps, int reduces, boolean autoComplete, String testName, boolean cleanOnStart, int startCount)
specifier|public
name|MRAppWithHistory
parameter_list|(
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|boolean
name|autoComplete
parameter_list|,
name|String
name|testName
parameter_list|,
name|boolean
name|cleanOnStart
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
name|maps
argument_list|,
name|reduces
argument_list|,
name|autoComplete
argument_list|,
name|testName
argument_list|,
name|cleanOnStart
argument_list|,
name|startCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|JobHistoryEventHandler
name|eventHandler
init|=
operator|new
name|JobHistoryEventHandler
argument_list|(
name|context
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|eventHandler
return|;
block|}
block|}
block|}
end_class

end_unit

