begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.speculate.forecast
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|forecast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testing the statistical model of simple exponential estimator.  */
end_comment

begin_class
DECL|class|TestSimpleExponentialForecast
specifier|public
class|class
name|TestSimpleExponentialForecast
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimpleExponentialForecast
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clockTicks
specifier|private
specifier|static
name|long
name|clockTicks
init|=
literal|1000L
decl_stmt|;
DECL|field|clock
specifier|private
name|ControlledClock
name|clock
decl_stmt|;
DECL|method|incTestSimpleExponentialForecast ()
specifier|private
name|int
name|incTestSimpleExponentialForecast
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|SimpleExponentialSmoothing
name|forecaster
init|=
operator|new
name|SimpleExponentialSmoothing
argument_list|(
literal|10000
argument_list|,
literal|12
argument_list|,
literal|10000
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|progress
init|=
literal|0.0
decl_stmt|;
while|while
condition|(
name|progress
operator|<=
literal|1.0
condition|)
block|{
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|forecaster
operator|.
name|incorporateReading
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|progress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"progress: "
operator|+
name|progress
operator|+
literal|" --> "
operator|+
name|forecaster
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|progress
operator|+=
literal|0.005
expr_stmt|;
block|}
return|return
name|forecaster
operator|.
name|getSSE
argument_list|()
operator|<
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
operator|-
literal|6
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
DECL|method|decTestSimpleExponentialForecast ()
specifier|private
name|int
name|decTestSimpleExponentialForecast
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|SimpleExponentialSmoothing
name|forecaster
init|=
operator|new
name|SimpleExponentialSmoothing
argument_list|(
literal|800
argument_list|,
literal|12
argument_list|,
literal|10000
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|progress
init|=
literal|0.0
decl_stmt|;
name|double
index|[]
name|progressRates
init|=
operator|new
name|double
index|[]
block|{
literal|0.005
block|,
literal|0.004
block|,
literal|0.002
block|,
literal|0.001
block|}
decl_stmt|;
while|while
condition|(
name|progress
operator|<=
literal|1.0
condition|)
block|{
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|forecaster
operator|.
name|incorporateReading
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|progress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"progress: "
operator|+
name|progress
operator|+
literal|" --> "
operator|+
name|forecaster
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|progress
operator|+=
name|progressRates
index|[
call|(
name|int
call|)
argument_list|(
name|progress
operator|/
literal|0.25
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|forecaster
operator|.
name|getSSE
argument_list|()
operator|<
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
operator|-
literal|6
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
DECL|method|zeroTestSimpleExponentialForecast ()
specifier|private
name|int
name|zeroTestSimpleExponentialForecast
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|SimpleExponentialSmoothing
name|forecaster
init|=
operator|new
name|SimpleExponentialSmoothing
argument_list|(
literal|800
argument_list|,
literal|12
argument_list|,
literal|10000
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|progress
init|=
literal|0.0
decl_stmt|;
name|double
index|[]
name|progressRates
init|=
operator|new
name|double
index|[]
block|{
literal|0.005
block|,
literal|0.004
block|,
literal|0.002
block|,
literal|0.0
block|,
literal|0.003
block|}
decl_stmt|;
name|int
name|progressInd
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|progress
operator|<=
literal|1.0
condition|)
block|{
name|clock
operator|.
name|tickMsec
argument_list|(
name|clockTicks
argument_list|)
expr_stmt|;
name|forecaster
operator|.
name|incorporateReading
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|progress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"progress: "
operator|+
name|progress
operator|+
literal|" --> "
operator|+
name|forecaster
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|currInd
init|=
name|progressInd
operator|++
operator|>
literal|1000
condition|?
literal|4
else|:
call|(
name|int
call|)
argument_list|(
name|progress
operator|/
literal|0.25
argument_list|)
decl_stmt|;
name|progress
operator|+=
name|progressRates
index|[
name|currInd
index|]
expr_stmt|;
block|}
return|return
name|forecaster
operator|.
name|getSSE
argument_list|()
operator|<
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
operator|-
literal|6
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Test
DECL|method|testSimpleExponentialForecastLinearInc ()
specifier|public
name|void
name|testSimpleExponentialForecastLinearInc
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|incTestSimpleExponentialForecast
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We got the wrong estimate from simple exponential."
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleExponentialForecastLinearDec ()
specifier|public
name|void
name|testSimpleExponentialForecastLinearDec
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|decTestSimpleExponentialForecast
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We got the wrong estimate from simple exponential."
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleExponentialForecastZeros ()
specifier|public
name|void
name|testSimpleExponentialForecastZeros
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|zeroTestSimpleExponentialForecast
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We got the wrong estimate from simple exponential."
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

