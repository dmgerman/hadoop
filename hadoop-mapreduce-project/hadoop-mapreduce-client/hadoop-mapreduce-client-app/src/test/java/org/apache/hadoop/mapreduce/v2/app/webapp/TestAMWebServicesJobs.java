begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|ujoin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MockJobs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_comment
comment|/**  * Test the app master web service Rest API for getting jobs, a specific job,  * and job counters.  *  * /ws/v1/mapreduce/jobs  * /ws/v1/mapreduce/jobs/{jobid}  * /ws/v1/mapreduce/jobs/{jobid}/counters  * /ws/v1/mapreduce/jobs/{jobid}/jobattempts  */
end_comment

begin_class
DECL|class|TestAMWebServicesJobs
specifier|public
class|class
name|TestAMWebServicesJobs
extends|extends
name|JerseyTest
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|appContext
specifier|private
specifier|static
name|TestAppContext
name|appContext
decl_stmt|;
DECL|class|TestAppContext
specifier|static
class|class
name|TestAppContext
implements|implements
name|AppContext
block|{
DECL|field|appAttemptID
specifier|final
name|ApplicationAttemptId
name|appAttemptID
decl_stmt|;
DECL|field|appID
specifier|final
name|ApplicationId
name|appID
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
init|=
name|MockJobs
operator|.
name|newUserName
argument_list|()
decl_stmt|;
DECL|field|jobs
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|TestAppContext (int appid, int numJobs, int numTasks, int numAttempts)
name|TestAppContext
parameter_list|(
name|int
name|appid
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numAttempts
parameter_list|)
block|{
name|appID
operator|=
name|MockJobs
operator|.
name|newAppID
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|appAttemptID
operator|=
name|MockJobs
operator|.
name|newAppAttemptID
argument_list|(
name|appID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobs
operator|=
name|MockJobs
operator|.
name|newJobs
argument_list|(
name|appID
argument_list|,
name|numJobs
argument_list|,
name|numTasks
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
block|}
DECL|method|TestAppContext ()
name|TestAppContext
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|appID
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CharSequence
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|jobs
return|;
comment|// OK
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
literal|"TestApp"
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
block|}
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|appContext
operator|=
operator|new
name|TestAppContext
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestAMWebServicesJobs ()
specifier|public
name|TestAMWebServicesJobs
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.mapreduce.v2.app.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobs ()
specifier|public
name|void
name|testJobs
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|jobs
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobs"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|jobs
operator|.
name|getJSONArray
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|MRApps
operator|.
name|toJobID
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobsSlash ()
specifier|public
name|void
name|testJobsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|jobs
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobs"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|jobs
operator|.
name|getJSONArray
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|MRApps
operator|.
name|toJobID
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobsDefault ()
specifier|public
name|void
name|testJobsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|jobs
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobs"
argument_list|)
decl_stmt|;
name|JSONArray
name|arr
init|=
name|jobs
operator|.
name|getJSONArray
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|MRApps
operator|.
name|toJobID
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobsXML ()
specifier|public
name|void
name|testJobsXML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|jobs
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"jobs"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|jobs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|job
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAMJobXML
argument_list|(
name|job
argument_list|,
name|appContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobId ()
specifier|public
name|void
name|testJobId
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobIdSlash ()
specifier|public
name|void
name|testJobIdSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
operator|+
literal|"/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobIdDefault ()
specifier|public
name|void
name|testJobIdDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|verifyAMJob
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobIdNonExist ()
specifier|public
name|void
name|testJobIdNonExist
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
literal|"job_0_1234"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: job, job_0_1234, is not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobIdInvalid ()
specifier|public
name|void
name|testJobIdInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
literal|"job_foo"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyJobIdInvalid
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify the exception output default is JSON
annotation|@
name|Test
DECL|method|testJobIdInvalidDefault ()
specifier|public
name|void
name|testJobIdInvalidDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
literal|"job_foo"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyJobIdInvalid
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test that the exception output works in XML
annotation|@
name|Test
DECL|method|testJobIdInvalidXML ()
specifier|public
name|void
name|testJobIdInvalidXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
literal|"job_foo"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyJobIdInvalid
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyJobIdInvalid (String message, String type, String classname)
specifier|private
name|void
name|verifyJobIdInvalid
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classname
parameter_list|)
block|{
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: JobId string : job_foo is not properly formed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobIdInvalidBogus ()
specifier|public
name|void
name|testJobIdInvalidBogus
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
literal|"bogusfoo"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: JobId string : bogusfoo is not properly formed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobIdXML ()
specifier|public
name|void
name|testJobIdXML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|job
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
name|verifyAMJobXML
argument_list|(
name|job
argument_list|,
name|appContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAMJob (JSONObject info, Job job)
specifier|public
name|void
name|verifyAMJob
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|30
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// everyone access fields
name|verifyAMJobGeneric
argument_list|(
name|job
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"finishTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"elapsedTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"mapsTotal"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"mapsCompleted"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"reducesTotal"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"reducesCompleted"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"reduceProgress"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"mapProgress"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|diagnostics
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|has
argument_list|(
literal|"diagnostics"
argument_list|)
condition|)
block|{
name|diagnostics
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"diagnostics"
argument_list|)
expr_stmt|;
block|}
comment|// restricted access fields - if security and acls set
name|verifyAMJobGenericSecure
argument_list|(
name|job
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"mapsPending"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"mapsRunning"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"reducesPending"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"reducesRunning"
argument_list|)
argument_list|,
name|info
operator|.
name|getBoolean
argument_list|(
literal|"uberized"
argument_list|)
argument_list|,
name|diagnostics
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"newReduceAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"runningReduceAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"failedReduceAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"killedReduceAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"successfulReduceAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"newMapAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"runningMapAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"failedMapAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"killedMapAttempts"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"successfulMapAttempts"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|allacls
init|=
name|job
operator|.
name|getJobACLs
argument_list|()
decl_stmt|;
if|if
condition|(
name|allacls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|entry
range|:
name|allacls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|expectName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getAclName
argument_list|()
decl_stmt|;
name|String
name|expectValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAclString
argument_list|()
decl_stmt|;
name|Boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// make sure ws includes it
if|if
condition|(
name|info
operator|.
name|has
argument_list|(
literal|"acls"
argument_list|)
condition|)
block|{
name|JSONArray
name|arr
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"acls"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|aclInfo
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectName
operator|.
name|matches
argument_list|(
name|aclInfo
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"value"
argument_list|,
name|expectValue
argument_list|,
name|aclInfo
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"should have acls in the web service info"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"acl: "
operator|+
name|expectName
operator|+
literal|" not found in webservice output"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAMJobXML (NodeList nodes, TestAppContext appContext)
specifier|public
name|void
name|verifyAMJobXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|TestAppContext
name|appContext
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|appContext
operator|.
name|getJob
argument_list|(
name|MRApps
operator|.
name|toJobID
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job not found - output incorrect"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|verifyAMJobGeneric
argument_list|(
name|job
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"user"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"finishTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"elapsedTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"mapsTotal"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"mapsCompleted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reducesTotal"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reducesCompleted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"reduceProgress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"mapProgress"
argument_list|)
argument_list|)
expr_stmt|;
comment|// restricted access fields - if security and acls set
name|verifyAMJobGenericSecure
argument_list|(
name|job
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"mapsPending"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"mapsRunning"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reducesPending"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reducesRunning"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlBoolean
argument_list|(
name|element
argument_list|,
literal|"uberized"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"diagnostics"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"newReduceAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"runningReduceAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"failedReduceAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"killedReduceAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"successfulReduceAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"newMapAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"runningMapAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"failedMapAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"killedMapAttempts"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"successfulMapAttempts"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|allacls
init|=
name|job
operator|.
name|getJobACLs
argument_list|()
decl_stmt|;
if|if
condition|(
name|allacls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|entry
range|:
name|allacls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|expectName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getAclName
argument_list|()
decl_stmt|;
name|String
name|expectValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAclString
argument_list|()
decl_stmt|;
name|Boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// make sure ws includes it
name|NodeList
name|id
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"acls"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|id
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|aclElem
init|=
operator|(
name|Element
operator|)
name|id
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclElem
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"should have acls in the web service info"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectName
operator|.
name|matches
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|aclElem
argument_list|,
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"value"
argument_list|,
name|expectValue
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|aclElem
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"should have acls in the web service info"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"acl: "
operator|+
name|expectName
operator|+
literal|" not found in webservice output"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verifyAMJobGeneric (Job job, String id, String user, String name, String state, long startTime, long finishTime, long elapsedTime, int mapsTotal, int mapsCompleted, int reducesTotal, int reducesCompleted, float reduceProgress, float mapProgress)
specifier|public
name|void
name|verifyAMJobGeneric
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|state
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|long
name|elapsedTime
parameter_list|,
name|int
name|mapsTotal
parameter_list|,
name|int
name|mapsCompleted
parameter_list|,
name|int
name|reducesTotal
parameter_list|,
name|int
name|reducesCompleted
parameter_list|,
name|float
name|reduceProgress
parameter_list|,
name|float
name|mapProgress
parameter_list|)
block|{
name|JobReport
name|report
init|=
name|job
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"user"
argument_list|,
name|job
operator|.
name|getUserName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"name"
argument_list|,
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|job
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startTime incorrect"
argument_list|,
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"finishTime incorrect"
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|finishTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"elapsedTime incorrect"
argument_list|,
name|Times
operator|.
name|elapsed
argument_list|(
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
argument_list|,
name|elapsedTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mapsTotal incorrect"
argument_list|,
name|job
operator|.
name|getTotalMaps
argument_list|()
argument_list|,
name|mapsTotal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mapsCompleted incorrect"
argument_list|,
name|job
operator|.
name|getCompletedMaps
argument_list|()
argument_list|,
name|mapsCompleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reducesTotal incorrect"
argument_list|,
name|job
operator|.
name|getTotalReduces
argument_list|()
argument_list|,
name|reducesTotal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reducesCompleted incorrect"
argument_list|,
name|job
operator|.
name|getCompletedReduces
argument_list|()
argument_list|,
name|reducesCompleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mapProgress incorrect"
argument_list|,
name|report
operator|.
name|getMapProgress
argument_list|()
operator|*
literal|100
argument_list|,
name|mapProgress
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reduceProgress incorrect"
argument_list|,
name|report
operator|.
name|getReduceProgress
argument_list|()
operator|*
literal|100
argument_list|,
name|reduceProgress
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAMJobGenericSecure (Job job, int mapsPending, int mapsRunning, int reducesPending, int reducesRunning, Boolean uberized, String diagnostics, int newReduceAttempts, int runningReduceAttempts, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int newMapAttempts, int runningMapAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts)
specifier|public
name|void
name|verifyAMJobGenericSecure
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|mapsPending
parameter_list|,
name|int
name|mapsRunning
parameter_list|,
name|int
name|reducesPending
parameter_list|,
name|int
name|reducesRunning
parameter_list|,
name|Boolean
name|uberized
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|int
name|newReduceAttempts
parameter_list|,
name|int
name|runningReduceAttempts
parameter_list|,
name|int
name|failedReduceAttempts
parameter_list|,
name|int
name|killedReduceAttempts
parameter_list|,
name|int
name|successfulReduceAttempts
parameter_list|,
name|int
name|newMapAttempts
parameter_list|,
name|int
name|runningMapAttempts
parameter_list|,
name|int
name|failedMapAttempts
parameter_list|,
name|int
name|killedMapAttempts
parameter_list|,
name|int
name|successfulMapAttempts
parameter_list|)
block|{
name|String
name|diagString
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|diagList
init|=
name|job
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
if|if
condition|(
name|diagList
operator|!=
literal|null
operator|&&
operator|!
name|diagList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|diag
range|:
name|diagList
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
name|diagString
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"diagnostics"
argument_list|,
name|diagString
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"isUber incorrect"
argument_list|,
name|job
operator|.
name|isUber
argument_list|()
argument_list|,
name|uberized
argument_list|)
expr_stmt|;
comment|// unfortunately the following fields are all calculated in JobInfo
comment|// so not easily accessible without doing all the calculations again.
comment|// For now just make sure they are present.
name|assertTrue
argument_list|(
literal|"mapsPending not>= 0"
argument_list|,
name|mapsPending
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"mapsRunning not>= 0"
argument_list|,
name|mapsRunning
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"reducesPending not>= 0"
argument_list|,
name|reducesPending
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"reducesRunning not>= 0"
argument_list|,
name|reducesRunning
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"newReduceAttempts not>= 0"
argument_list|,
name|newReduceAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"runningReduceAttempts not>= 0"
argument_list|,
name|runningReduceAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failedReduceAttempts not>= 0"
argument_list|,
name|failedReduceAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"killedReduceAttempts not>= 0"
argument_list|,
name|killedReduceAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"successfulReduceAttempts not>= 0"
argument_list|,
name|successfulReduceAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"newMapAttempts not>= 0"
argument_list|,
name|newMapAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"runningMapAttempts not>= 0"
argument_list|,
name|runningMapAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failedMapAttempts not>= 0"
argument_list|,
name|failedMapAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"killedMapAttempts not>= 0"
argument_list|,
name|killedMapAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"successfulMapAttempts not>= 0"
argument_list|,
name|successfulMapAttempts
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobCounters ()
specifier|public
name|void
name|testJobCounters
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobCounters"
argument_list|)
decl_stmt|;
name|verifyAMJobCounters
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobCountersSlash ()
specifier|public
name|void
name|testJobCountersSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobCounters"
argument_list|)
decl_stmt|;
name|verifyAMJobCounters
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobCountersDefault ()
specifier|public
name|void
name|testJobCountersDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters/"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobCounters"
argument_list|)
decl_stmt|;
name|verifyAMJobCounters
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobCountersXML ()
specifier|public
name|void
name|testJobCountersXML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"counters"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|info
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"jobCounters"
argument_list|)
decl_stmt|;
name|verifyAMJobCountersXML
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAMJobCounters (JSONObject info, Job job)
specifier|public
name|void
name|verifyAMJobCounters
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// just do simple verification of fields - not data is correct
comment|// in the fields
name|JSONArray
name|counterGroups
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"counterGroup"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counterGroups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|counterGroup
init|=
name|counterGroups
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|counterGroup
operator|.
name|getString
argument_list|(
literal|"counterGroupName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"name not set"
argument_list|,
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|JSONArray
name|counters
init|=
name|counterGroup
operator|.
name|getJSONArray
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|counters
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|JSONObject
name|counter
init|=
name|counters
operator|.
name|getJSONObject
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|counterName
init|=
name|counter
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"counter name not set"
argument_list|,
operator|(
name|counterName
operator|!=
literal|null
operator|&&
operator|!
name|counterName
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|mapValue
init|=
name|counter
operator|.
name|getLong
argument_list|(
literal|"mapCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"mapCounterValue>= 0"
argument_list|,
name|mapValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|long
name|reduceValue
init|=
name|counter
operator|.
name|getLong
argument_list|(
literal|"reduceCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reduceCounterValue>= 0"
argument_list|,
name|reduceValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|long
name|totalValue
init|=
name|counter
operator|.
name|getLong
argument_list|(
literal|"totalCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"totalCounterValue>= 0"
argument_list|,
name|totalValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAMJobCountersXML (NodeList nodes, Job job)
specifier|public
name|void
name|verifyAMJobCountersXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job not found - output incorrect"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// just do simple verification of fields - not data is correct
comment|// in the fields
name|NodeList
name|groups
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"counterGroup"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groups
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|counters
init|=
operator|(
name|Element
operator|)
name|groups
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should have counters in the web service info"
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|counters
argument_list|,
literal|"counterGroupName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"name not set"
argument_list|,
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|NodeList
name|counterArr
init|=
name|counters
operator|.
name|getElementsByTagName
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|counterArr
operator|.
name|getLength
argument_list|()
condition|;
name|z
operator|++
control|)
block|{
name|Element
name|counter
init|=
operator|(
name|Element
operator|)
name|counterArr
operator|.
name|item
argument_list|(
name|z
argument_list|)
decl_stmt|;
name|String
name|counterName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|counter
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"counter name not set"
argument_list|,
operator|(
name|counterName
operator|!=
literal|null
operator|&&
operator|!
name|counterName
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|mapValue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|counter
argument_list|,
literal|"mapCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"mapCounterValue not>= 0"
argument_list|,
name|mapValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|long
name|reduceValue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|counter
argument_list|,
literal|"reduceCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reduceCounterValue>= 0"
argument_list|,
name|reduceValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|long
name|totalValue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|counter
argument_list|,
literal|"totalCounterValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"totalCounterValue>= 0"
argument_list|,
name|totalValue
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testJobAttempts ()
specifier|public
name|void
name|testJobAttempts
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobAttempts"
argument_list|)
decl_stmt|;
name|verifyJobAttempts
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobAttemptsSlash ()
specifier|public
name|void
name|testJobAttemptsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobattempts/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobAttempts"
argument_list|)
decl_stmt|;
name|verifyJobAttempts
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobAttemptsDefault ()
specifier|public
name|void
name|testJobAttemptsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobattempts"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"jobAttempts"
argument_list|)
decl_stmt|;
name|verifyJobAttempts
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobAttemptsXML ()
specifier|public
name|void
name|testJobAttemptsXML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobsMap
init|=
name|appContext
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobId
name|id
range|:
name|jobsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
name|MRApps
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"mapreduce"
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|path
argument_list|(
name|jobId
argument_list|)
operator|.
name|path
argument_list|(
literal|"jobattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|attempts
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"jobAttempts"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|attempts
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|info
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"jobAttempt"
argument_list|)
decl_stmt|;
name|verifyJobAttemptsXML
argument_list|(
name|info
argument_list|,
name|jobsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyJobAttempts (JSONObject info, Job job)
specifier|public
name|void
name|verifyJobAttempts
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONArray
name|attempts
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"jobAttempt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|attempts
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|attempt
init|=
name|attempts
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyJobAttemptsGeneric
argument_list|(
name|job
argument_list|,
name|attempt
operator|.
name|getString
argument_list|(
literal|"nodeHttpAddress"
argument_list|)
argument_list|,
name|attempt
operator|.
name|getString
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|,
name|attempt
operator|.
name|getInt
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|attempt
operator|.
name|getLong
argument_list|(
literal|"startTime"
argument_list|)
argument_list|,
name|attempt
operator|.
name|getString
argument_list|(
literal|"containerId"
argument_list|)
argument_list|,
name|attempt
operator|.
name|getString
argument_list|(
literal|"logsLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyJobAttemptsXML (NodeList nodes, Job job)
specifier|public
name|void
name|verifyJobAttemptsXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyJobAttemptsGeneric
argument_list|(
name|job
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeHttpAddress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeId"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"containerId"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"logsLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyJobAttemptsGeneric (Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink)
specifier|public
name|void
name|verifyJobAttemptsGeneric
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|nodeHttpAddress
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|int
name|id
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|logsLink
parameter_list|)
block|{
name|boolean
name|attemptFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|job
operator|.
name|getAMInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|amInfo
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
operator|==
name|id
condition|)
block|{
name|attemptFound
operator|=
literal|true
expr_stmt|;
name|String
name|nmHost
init|=
name|amInfo
operator|.
name|getNodeManagerHost
argument_list|()
decl_stmt|;
name|int
name|nmHttpPort
init|=
name|amInfo
operator|.
name|getNodeManagerHttpPort
argument_list|()
decl_stmt|;
name|int
name|nmPort
init|=
name|amInfo
operator|.
name|getNodeManagerPort
argument_list|()
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeHttpAddress"
argument_list|,
name|nmHost
operator|+
literal|":"
operator|+
name|nmHttpPort
argument_list|,
name|nodeHttpAddress
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeId"
argument_list|,
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
name|nmHost
argument_list|,
name|nmPort
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"startime not greater than 0"
argument_list|,
name|startTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"containerId"
argument_list|,
name|amInfo
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|String
name|localLogsLink
init|=
name|ujoin
argument_list|(
literal|"node"
argument_list|,
literal|"containerlogs"
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"logsLink"
argument_list|,
name|logsLink
operator|.
name|contains
argument_list|(
name|localLogsLink
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"attempt: "
operator|+
name|id
operator|+
literal|" was not found"
argument_list|,
name|attemptFound
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

