begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapTaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedJvmID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestTaskAttemptContainerRequest
specifier|public
class|class
name|TestTaskAttemptContainerRequest
block|{
comment|//WARNING: This test must be the only test in this file.  This is because
comment|// there is an optimization where the credentials passed in are cached
comment|// statically so they do not need to be recomputed when creating a new
comment|// ContainerLaunchContext. if other tests run first this code will cache
comment|// their credentials and this test will fail trying to look for the
comment|// credentials it inserted in.
annotation|@
name|Test
DECL|method|testAttemptContainerRequest ()
specifier|public
name|void
name|testAttemptContainerRequest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Text
name|SECRET_KEY_ALIAS
init|=
operator|new
name|Text
argument_list|(
literal|"secretkeyalias"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SECRET_KEY
init|=
operator|(
literal|"secretkey"
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|Path
name|jobFile
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskAttemptListener
name|taListener
init|=
name|mock
argument_list|(
name|TaskAttemptListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|taListener
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|StubbedFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
literal|"fs.file.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// setup UGI for security so tokens and keys are preserved
name|jobConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|SECRET_KEY_ALIAS
argument_list|,
name|SECRET_KEY
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
operator|(
literal|"tokenid"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"tokenpw"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenkind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"tokenservice"
argument_list|)
argument_list|)
decl_stmt|;
name|TaskAttemptImpl
name|taImpl
init|=
operator|new
name|MapTaskAttemptImpl
argument_list|(
name|taskId
argument_list|,
literal|1
argument_list|,
name|eventHandler
argument_list|,
name|jobFile
argument_list|,
literal|1
argument_list|,
name|mock
argument_list|(
name|TaskSplitMetaInfo
operator|.
name|class
argument_list|)
argument_list|,
name|jobConf
argument_list|,
name|taListener
argument_list|,
name|jobToken
argument_list|,
name|credentials
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
name|taImpl
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|launchCtx
init|=
name|TaskAttemptImpl
operator|.
name|createContainerLaunchContext
argument_list|(
name|acls
argument_list|,
name|jobConf
argument_list|,
name|jobToken
argument_list|,
name|taImpl
operator|.
name|createRemoteTask
argument_list|()
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|mock
argument_list|(
name|WrappedJvmID
operator|.
name|class
argument_list|)
argument_list|,
name|taListener
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ACLs mismatch"
argument_list|,
name|acls
argument_list|,
name|launchCtx
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|launchCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dibb
operator|.
name|reset
argument_list|(
name|launchCtx
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
name|launchCredentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
comment|// verify all tokens specified for the task attempt are in the launch context
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|launchToken
init|=
name|launchCredentials
operator|.
name|getToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Token "
operator|+
name|token
operator|.
name|getService
argument_list|()
operator|+
literal|" is missing"
argument_list|,
name|launchToken
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Token "
operator|+
name|token
operator|.
name|getService
argument_list|()
operator|+
literal|" mismatch"
argument_list|,
name|token
argument_list|,
name|launchToken
argument_list|)
expr_stmt|;
block|}
comment|// verify the secret key is in the launch context
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Secret key missing"
argument_list|,
name|launchCredentials
operator|.
name|getSecretKey
argument_list|(
name|SECRET_KEY_ALIAS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Secret key mismatch"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|SECRET_KEY
argument_list|,
name|launchCredentials
operator|.
name|getSecretKey
argument_list|(
name|SECRET_KEY_ALIAS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|StubbedFS
specifier|static
specifier|public
class|class
name|StubbedFS
extends|extends
name|RawLocalFileSystem
block|{
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|f
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

