begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
DECL|class|MockJobs
specifier|public
class|class
name|MockJobs
extends|extends
name|MockApps
block|{
DECL|field|JOB_STATES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|JobState
argument_list|>
name|JOB_STATES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|JobState
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TASK_STATES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|TaskState
argument_list|>
name|TASK_STATES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|TaskState
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TASK_ATTEMPT_STATES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|TaskAttemptState
argument_list|>
name|TASK_ATTEMPT_STATES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|TaskAttemptState
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TASK_TYPES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|TaskType
argument_list|>
name|TASK_TYPES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|TaskType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|JOB_COUNTERS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|JobCounter
argument_list|>
name|JOB_COUNTERS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|JobCounter
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FS_COUNTERS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|FileSystemCounter
argument_list|>
name|FS_COUNTERS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|FileSystemCounter
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TASK_COUNTERS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|TaskCounter
argument_list|>
name|TASK_COUNTERS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|TaskCounter
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FS_SCHEMES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|FS_SCHEMES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"FILE"
argument_list|,
literal|"HDFS"
argument_list|,
literal|"LAFS"
argument_list|,
literal|"CEPH"
argument_list|)
decl_stmt|;
DECL|field|USER_COUNTER_GROUPS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|USER_COUNTER_GROUPS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"com.company.project.subproject.component.subcomponent.UserDefinedSpecificSpecialTask$Counters"
argument_list|,
literal|"PigCounters"
argument_list|)
decl_stmt|;
DECL|field|USER_COUNTERS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|USER_COUNTERS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"counter1"
argument_list|,
literal|"counter2"
argument_list|,
literal|"counter3"
argument_list|)
decl_stmt|;
DECL|field|PHASES
specifier|static
specifier|final
name|Iterator
argument_list|<
name|Phase
argument_list|>
name|PHASES
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|Phase
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|DIAGS
specifier|static
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|DIAGS
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"Error: java.lang.OutOfMemoryError: Java heap space"
argument_list|,
literal|"Lost task tracker: tasktracker.domain/127.0.0.1:40879"
argument_list|)
decl_stmt|;
DECL|field|NM_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NM_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|NM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|NM_PORT
init|=
literal|1234
decl_stmt|;
DECL|field|NM_HTTP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|NM_HTTP_PORT
init|=
literal|8042
decl_stmt|;
DECL|field|DT
specifier|static
specifier|final
name|int
name|DT
init|=
literal|1000000
decl_stmt|;
comment|// ms
DECL|method|newJobName ()
specifier|public
specifier|static
name|String
name|newJobName
parameter_list|()
block|{
return|return
name|newAppName
argument_list|()
return|;
block|}
comment|/**    * Create numJobs in a map with jobs having appId==jobId    */
DECL|method|newJobs (int numJobs, int numTasksPerJob, int numAttemptsPerTask)
specifier|public
specifier|static
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|newJobs
parameter_list|(
name|int
name|numJobs
parameter_list|,
name|int
name|numTasksPerJob
parameter_list|,
name|int
name|numAttemptsPerTask
parameter_list|)
block|{
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numJobs
condition|;
operator|++
name|j
control|)
block|{
name|ApplicationId
name|appID
init|=
name|MockJobs
operator|.
name|newAppID
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|newJob
argument_list|(
name|appID
argument_list|,
name|j
argument_list|,
name|numTasksPerJob
argument_list|,
name|numAttemptsPerTask
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|newJobs (ApplicationId appID, int numJobsPerApp, int numTasksPerJob, int numAttemptsPerTask)
specifier|public
specifier|static
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|newJobs
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|numJobsPerApp
parameter_list|,
name|int
name|numTasksPerJob
parameter_list|,
name|int
name|numAttemptsPerTask
parameter_list|)
block|{
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numJobsPerApp
condition|;
operator|++
name|j
control|)
block|{
name|Job
name|job
init|=
name|newJob
argument_list|(
name|appID
argument_list|,
name|j
argument_list|,
name|numTasksPerJob
argument_list|,
name|numAttemptsPerTask
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|newJobs (ApplicationId appID, int numJobsPerApp, int numTasksPerJob, int numAttemptsPerTask, boolean hasFailedTasks)
specifier|public
specifier|static
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|newJobs
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|numJobsPerApp
parameter_list|,
name|int
name|numTasksPerJob
parameter_list|,
name|int
name|numAttemptsPerTask
parameter_list|,
name|boolean
name|hasFailedTasks
parameter_list|)
block|{
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numJobsPerApp
condition|;
operator|++
name|j
control|)
block|{
name|Job
name|job
init|=
name|newJob
argument_list|(
name|appID
argument_list|,
name|j
argument_list|,
name|numTasksPerJob
argument_list|,
name|numAttemptsPerTask
argument_list|,
literal|null
argument_list|,
name|hasFailedTasks
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|newJobID (ApplicationId appID, int i)
specifier|public
specifier|static
name|JobId
name|newJobID
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|JobId
name|id
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
decl_stmt|;
name|id
operator|.
name|setAppId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|id
operator|.
name|setId
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|method|newJobReport (JobId id)
specifier|public
specifier|static
name|JobReport
name|newJobReport
parameter_list|(
name|JobId
name|id
parameter_list|)
block|{
name|JobReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setJobId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSubmitTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|DT
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|report
operator|.
name|setMapProgress
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setReduceProgress
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobState
argument_list|(
name|JOB_STATES
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
DECL|method|newTaskReport (TaskId id)
specifier|public
specifier|static
name|TaskReport
name|newTaskReport
parameter_list|(
name|TaskId
name|id
parameter_list|)
block|{
name|TaskReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setTaskId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStatus
argument_list|(
literal|"Moving average: "
operator|+
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|newCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskState
argument_list|(
name|TASK_STATES
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
DECL|method|newTaskAttemptReport (TaskAttemptId id)
specifier|public
specifier|static
name|TaskAttemptReport
name|newTaskAttemptReport
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|id
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setTaskAttemptId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|report
operator|.
name|setShuffleFinishTime
argument_list|(
operator|(
name|report
operator|.
name|getFinishTime
argument_list|()
operator|+
name|report
operator|.
name|getStartTime
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSortFinishTime
argument_list|(
operator|(
name|report
operator|.
name|getFinishTime
argument_list|()
operator|+
name|report
operator|.
name|getShuffleFinishTime
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|setPhase
argument_list|(
name|PHASES
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskAttemptState
argument_list|(
name|TASK_ATTEMPT_STATES
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|newCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDiagnosticInfo
argument_list|(
name|DIAGS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStateString
argument_list|(
literal|"Moving average "
operator|+
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
DECL|method|newCounters ()
specifier|public
specifier|static
name|Counters
name|newCounters
parameter_list|()
block|{
name|Counters
name|hc
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|JobCounter
name|c
range|:
name|JobCounter
operator|.
name|values
argument_list|()
control|)
block|{
name|hc
operator|.
name|findCounter
argument_list|(
name|c
argument_list|)
operator|.
name|setValue
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskCounter
name|c
range|:
name|TaskCounter
operator|.
name|values
argument_list|()
control|)
block|{
name|hc
operator|.
name|findCounter
argument_list|(
name|c
argument_list|)
operator|.
name|setValue
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nc
init|=
name|FileSystemCounter
operator|.
name|values
argument_list|()
operator|.
name|length
operator|*
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nc
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|FileSystemCounter
name|c
range|:
name|FileSystemCounter
operator|.
name|values
argument_list|()
control|)
block|{
name|hc
operator|.
name|findCounter
argument_list|(
name|FS_SCHEMES
operator|.
name|next
argument_list|()
argument_list|,
name|c
argument_list|)
operator|.
name|setValue
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|DT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|hc
operator|.
name|findCounter
argument_list|(
name|USER_COUNTER_GROUPS
operator|.
name|next
argument_list|()
argument_list|,
name|USER_COUNTERS
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hc
return|;
block|}
DECL|method|newTaskAttempts (TaskId tid, int m)
specifier|public
specifier|static
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|newTaskAttempts
parameter_list|(
name|TaskId
name|tid
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
operator|++
name|i
control|)
block|{
name|TaskAttempt
name|ta
init|=
name|newTaskAttempt
argument_list|(
name|tid
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ta
operator|.
name|getID
argument_list|()
argument_list|,
name|ta
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|newTaskAttempt (TaskId tid, int i)
specifier|public
specifier|static
name|TaskAttempt
name|newTaskAttempt
parameter_list|(
name|TaskId
name|tid
parameter_list|,
name|int
name|i
parameter_list|)
block|{
specifier|final
name|TaskAttemptId
name|taid
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|taid
operator|.
name|setTaskId
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|taid
operator|.
name|setId
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|final
name|TaskAttemptReport
name|report
init|=
name|newTaskAttemptReport
argument_list|(
name|taid
argument_list|)
decl_stmt|;
return|return
operator|new
name|TaskAttempt
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptId
name|getID
parameter_list|()
block|{
return|return
name|taid
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptReport
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
return|return
name|report
operator|.
name|getStartTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|report
operator|.
name|getFinishTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
return|return
name|ShuffleHandler
operator|.
name|DEFAULT_SHUFFLE_PORT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
if|if
condition|(
name|report
operator|!=
literal|null
operator|&&
name|report
operator|.
name|getCounters
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Counters
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|report
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Phase
name|getPhase
parameter_list|()
block|{
return|return
name|report
operator|.
name|getPhase
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptState
name|getState
parameter_list|()
block|{
return|return
name|report
operator|.
name|getTaskAttemptState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
switch|switch
condition|(
name|report
operator|.
name|getTaskAttemptState
argument_list|()
condition|)
block|{
case|case
name|SUCCEEDED
case|:
case|case
name|FAILED
case|:
case|case
name|KILLED
case|:
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContainerId
name|getAssignedContainerID
parameter_list|()
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|taid
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|id
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
return|return
literal|"localhost:8042"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|report
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAssignedContainerMgrAddress
parameter_list|()
block|{
return|return
literal|"localhost:9998"
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
return|return
name|report
operator|.
name|getShuffleFinishTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
return|return
name|report
operator|.
name|getSortFinishTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeRackName
parameter_list|()
block|{
return|return
literal|"/default-rack"
return|;
block|}
block|}
return|;
block|}
DECL|method|newTasks (JobId jid, int n, int m, boolean hasFailedTasks)
specifier|public
specifier|static
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|newTasks
parameter_list|(
name|JobId
name|jid
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|,
name|boolean
name|hasFailedTasks
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Task
name|task
init|=
name|newTask
argument_list|(
name|jid
argument_list|,
name|i
argument_list|,
name|m
argument_list|,
name|hasFailedTasks
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|newTask (JobId jid, int i, int m, final boolean hasFailedTasks)
specifier|public
specifier|static
name|Task
name|newTask
parameter_list|(
name|JobId
name|jid
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|m
parameter_list|,
specifier|final
name|boolean
name|hasFailedTasks
parameter_list|)
block|{
specifier|final
name|TaskId
name|tid
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
decl_stmt|;
name|tid
operator|.
name|setJobId
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tid
operator|.
name|setTaskType
argument_list|(
name|TASK_TYPES
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TaskReport
name|report
init|=
name|newTaskReport
argument_list|(
name|tid
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
name|newTaskAttempts
argument_list|(
name|tid
argument_list|,
name|m
argument_list|)
decl_stmt|;
return|return
operator|new
name|Task
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TaskId
name|getID
parameter_list|()
block|{
return|return
name|tid
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskReport
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
if|if
condition|(
name|hasFailedTasks
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Counters
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|report
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|report
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskType
name|getType
parameter_list|()
block|{
return|return
name|tid
operator|.
name|getTaskType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|getAttempts
parameter_list|()
block|{
return|return
name|attempts
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttempt
name|getAttempt
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
switch|switch
condition|(
name|report
operator|.
name|getTaskState
argument_list|()
condition|)
block|{
case|case
name|SUCCEEDED
case|:
case|case
name|KILLED
case|:
case|case
name|FAILED
case|:
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskState
name|getState
parameter_list|()
block|{
return|return
name|report
operator|.
name|getTaskState
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|getCounters ( Collection<Task> tasks)
specifier|public
specifier|static
name|Counters
name|getCounters
parameter_list|(
name|Collection
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|completedTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getCounters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|completedTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
return|return
name|JobImpl
operator|.
name|incrTaskCounters
argument_list|(
name|counters
argument_list|,
name|completedTasks
argument_list|)
return|;
block|}
DECL|class|TaskCount
specifier|static
class|class
name|TaskCount
block|{
DECL|field|maps
name|int
name|maps
decl_stmt|;
DECL|field|reduces
name|int
name|reduces
decl_stmt|;
DECL|field|completedMaps
name|int
name|completedMaps
decl_stmt|;
DECL|field|completedReduces
name|int
name|completedReduces
decl_stmt|;
DECL|method|incr (Task task)
name|void
name|incr
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|TaskType
name|type
init|=
name|task
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|finished
init|=
name|task
operator|.
name|isFinished
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
if|if
condition|(
name|finished
condition|)
block|{
operator|++
name|completedMaps
expr_stmt|;
block|}
operator|++
name|maps
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
if|if
condition|(
name|finished
condition|)
block|{
operator|++
name|completedReduces
expr_stmt|;
block|}
operator|++
name|reduces
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTaskCount (Collection<Task> tasks)
specifier|static
name|TaskCount
name|getTaskCount
parameter_list|(
name|Collection
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
block|{
name|TaskCount
name|tc
init|=
operator|new
name|TaskCount
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|tc
operator|.
name|incr
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|tc
return|;
block|}
DECL|method|newJob (ApplicationId appID, int i, int n, int m)
specifier|public
specifier|static
name|Job
name|newJob
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
return|return
name|newJob
argument_list|(
name|appID
argument_list|,
name|i
argument_list|,
name|n
argument_list|,
name|m
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newJob (ApplicationId appID, int i, int n, int m, Path confFile)
specifier|public
specifier|static
name|Job
name|newJob
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|,
name|Path
name|confFile
parameter_list|)
block|{
return|return
name|newJob
argument_list|(
name|appID
argument_list|,
name|i
argument_list|,
name|n
argument_list|,
name|m
argument_list|,
name|confFile
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|newJob (ApplicationId appID, int i, int n, int m, Path confFile, boolean hasFailedTasks)
specifier|public
specifier|static
name|Job
name|newJob
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|,
name|Path
name|confFile
parameter_list|,
name|boolean
name|hasFailedTasks
parameter_list|)
block|{
specifier|final
name|JobId
name|id
init|=
name|newJobID
argument_list|(
name|appID
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|newJobName
argument_list|()
decl_stmt|;
specifier|final
name|JobReport
name|report
init|=
name|newJobReport
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|newTasks
argument_list|(
name|id
argument_list|,
name|n
argument_list|,
name|m
argument_list|,
name|hasFailedTasks
argument_list|)
decl_stmt|;
specifier|final
name|TaskCount
name|taskCount
init|=
name|getTaskCount
argument_list|(
name|tasks
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Counters
name|counters
init|=
name|getCounters
argument_list|(
name|tasks
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|configFile
init|=
name|confFile
decl_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|tmpJobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|"testuser"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobACLsManager
name|aclsManager
init|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpJobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
name|tmpJobACLs
decl_stmt|;
return|return
operator|new
name|Job
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JobId
name|getID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobState
name|getState
parameter_list|()
block|{
return|return
name|report
operator|.
name|getJobState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobReport
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Counters
name|getAllCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|tasks
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
name|getTask
parameter_list|(
name|TaskId
name|taskID
parameter_list|)
block|{
return|return
name|tasks
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|taskCount
operator|.
name|maps
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|taskCount
operator|.
name|reduces
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCompletedMaps
parameter_list|()
block|{
return|return
name|taskCount
operator|.
name|completedMaps
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCompletedReduces
parameter_list|()
block|{
return|return
name|taskCount
operator|.
name|completedReduces
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUber
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptCompletionEvent
index|[]
name|getTaskAttemptCompletionEvents
parameter_list|(
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskCompletionEvent
index|[]
name|getMapAttemptCompletionEvents
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
literal|"mockqueue"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|configFile
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
name|jobACLs
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAMInfos
parameter_list|()
block|{
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfoList
init|=
operator|new
name|LinkedList
argument_list|<
name|AMInfo
argument_list|>
argument_list|()
decl_stmt|;
name|amInfoList
operator|.
name|add
argument_list|(
name|createAMInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|amInfoList
operator|.
name|add
argument_list|(
name|createAMInfo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|amInfoList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|loadConfFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|configFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Configuration
name|jobConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|addResource
argument_list|(
name|fc
operator|.
name|open
argument_list|(
name|configFile
argument_list|)
argument_list|,
name|configFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|;
block|}
DECL|method|createAMInfo (int attempt)
specifier|private
specifier|static
name|AMInfo
name|createAMInfo
parameter_list|(
name|int
name|attempt
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attempt
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|MRBuilderUtils
operator|.
name|newAMInfo
argument_list|(
name|appAttemptId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|NM_HOST
argument_list|,
name|NM_PORT
argument_list|,
name|NM_HTTP_PORT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

