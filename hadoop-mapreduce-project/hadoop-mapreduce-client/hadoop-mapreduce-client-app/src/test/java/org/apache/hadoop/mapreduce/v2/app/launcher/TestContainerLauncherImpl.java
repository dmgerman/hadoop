begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeast
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerLauncherImpl
specifier|public
class|class
name|TestContainerLauncherImpl
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerLauncherImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|class|ContainerLauncherImplUnderTest
specifier|private
specifier|static
class|class
name|ContainerLauncherImplUnderTest
extends|extends
name|ContainerLauncherImpl
block|{
DECL|field|rpc
specifier|private
name|YarnRPC
name|rpc
decl_stmt|;
DECL|method|ContainerLauncherImplUnderTest (AppContext context, YarnRPC rpc)
specifier|public
name|ContainerLauncherImplUnderTest
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|YarnRPC
name|rpc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpc
operator|=
name|rpc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createYarnRPC (Configuration conf)
specifier|protected
name|YarnRPC
name|createYarnRPC
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|rpc
return|;
block|}
DECL|method|waitForPoolToIdle ()
specifier|public
name|void
name|waitForPoolToIdle
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|//I wish that we did not need the sleep, but it is here so that we are sure
comment|// That the other thread had time to insert the event into the queue and
comment|// start processing it.  For some reason we were getting interrupted
comment|// exceptions within eventQueue without this sleep.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"POOL SIZE 1: "
operator|+
name|this
operator|.
name|eventQueue
operator|.
name|size
argument_list|()
operator|+
literal|" POOL SIZE 2: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" ACTIVE COUNT: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|eventQueue
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|this
operator|.
name|launcherPool
operator|.
name|getQueue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|this
operator|.
name|launcherPool
operator|.
name|getActiveCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"POOL SIZE 1: "
operator|+
name|this
operator|.
name|eventQueue
operator|.
name|size
argument_list|()
operator|+
literal|" POOL SIZE 2: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" ACTIVE COUNT: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"POOL SIZE 1: "
operator|+
name|this
operator|.
name|eventQueue
operator|.
name|size
argument_list|()
operator|+
literal|" POOL SIZE 2: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" ACTIVE COUNT: "
operator|+
name|this
operator|.
name|launcherPool
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeContainerId (long ts, int appId, int attemptId, int id)
specifier|public
specifier|static
name|ContainerId
name|makeContainerId
parameter_list|(
name|long
name|ts
parameter_list|,
name|int
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
name|appId
argument_list|)
argument_list|,
name|attemptId
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|makeTaskAttemptId (long ts, int appId, int taskId, TaskType taskType, int id)
specifier|public
specifier|static
name|TaskAttemptId
name|makeTaskAttemptId
parameter_list|(
name|long
name|ts
parameter_list|,
name|int
name|appId
parameter_list|,
name|int
name|taskId
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|aID
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|JobId
name|jID
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|aID
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|TaskId
name|tID
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jID
argument_list|,
name|taskId
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
return|return
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|tID
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testHandle ()
specifier|public
name|void
name|testHandle
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testHandle"
argument_list|)
expr_stmt|;
name|YarnRPC
name|mockRpc
init|=
name|mock
argument_list|(
name|YarnRPC
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockEventHandler
argument_list|)
expr_stmt|;
name|ContainerManager
name|mockCM
init|=
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRpc
operator|.
name|getProxy
argument_list|(
name|eq
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCM
argument_list|)
expr_stmt|;
name|ContainerLauncherImplUnderTest
name|ut
init|=
operator|new
name|ContainerLauncherImplUnderTest
argument_list|(
name|mockContext
argument_list|,
name|mockRpc
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ut
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ut
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerId
name|contId
init|=
name|makeContainerId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|makeTaskAttemptId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|cmAddress
init|=
literal|"127.0.0.1:8000"
decl_stmt|;
name|StartContainerResponse
name|startResp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|startResp
operator|.
name|setServiceResponse
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting launch event"
argument_list|)
expr_stmt|;
name|ContainerRemoteLaunchEvent
name|mockLaunchEvent
init|=
name|mock
argument_list|(
name|ContainerRemoteLaunchEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCM
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startResp
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockLaunchEvent
argument_list|)
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|)
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting cleanup event"
argument_list|)
expr_stmt|;
name|ContainerLauncherEvent
name|mockCleanupEvent
init|=
name|mock
argument_list|(
name|ContainerLauncherEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockCleanupEvent
argument_list|)
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ut
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOutOfOrder ()
specifier|public
name|void
name|testOutOfOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testOutOfOrder"
argument_list|)
expr_stmt|;
name|YarnRPC
name|mockRpc
init|=
name|mock
argument_list|(
name|YarnRPC
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockEventHandler
argument_list|)
expr_stmt|;
name|ContainerManager
name|mockCM
init|=
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRpc
operator|.
name|getProxy
argument_list|(
name|eq
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCM
argument_list|)
expr_stmt|;
name|ContainerLauncherImplUnderTest
name|ut
init|=
operator|new
name|ContainerLauncherImplUnderTest
argument_list|(
name|mockContext
argument_list|,
name|mockRpc
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ut
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ut
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerId
name|contId
init|=
name|makeContainerId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|makeTaskAttemptId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|cmAddress
init|=
literal|"127.0.0.1:8000"
decl_stmt|;
name|StartContainerResponse
name|startResp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|startResp
operator|.
name|setServiceResponse
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting cleanup event"
argument_list|)
expr_stmt|;
name|ContainerLauncherEvent
name|mockCleanupEvent
init|=
name|mock
argument_list|(
name|ContainerLauncherEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockCleanupEvent
argument_list|)
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting launch event"
argument_list|)
expr_stmt|;
name|ContainerRemoteLaunchEvent
name|mockLaunchEvent
init|=
name|mock
argument_list|(
name|ContainerRemoteLaunchEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCM
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startResp
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockLaunchEvent
argument_list|)
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ut
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMyShutdown ()
specifier|public
name|void
name|testMyShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"in test Shutdown"
argument_list|)
expr_stmt|;
name|YarnRPC
name|mockRpc
init|=
name|mock
argument_list|(
name|YarnRPC
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockEventHandler
argument_list|)
expr_stmt|;
name|ContainerManager
name|mockCM
init|=
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRpc
operator|.
name|getProxy
argument_list|(
name|eq
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCM
argument_list|)
expr_stmt|;
name|ContainerLauncherImplUnderTest
name|ut
init|=
operator|new
name|ContainerLauncherImplUnderTest
argument_list|(
name|mockContext
argument_list|,
name|mockRpc
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ut
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ut
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerId
name|contId
init|=
name|makeContainerId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|makeTaskAttemptId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|cmAddress
init|=
literal|"127.0.0.1:8000"
decl_stmt|;
name|StartContainerResponse
name|startResp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|startResp
operator|.
name|setServiceResponse
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting launch event"
argument_list|)
expr_stmt|;
name|ContainerRemoteLaunchEvent
name|mockLaunchEvent
init|=
name|mock
argument_list|(
name|ContainerRemoteLaunchEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCM
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startResp
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockLaunchEvent
argument_list|)
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|)
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// skip cleanup and make sure stop kills the container
block|}
finally|finally
block|{
name|ut
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCM
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testContainerCleaned ()
specifier|public
name|void
name|testContainerCleaned
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING testContainerCleaned"
argument_list|)
expr_stmt|;
name|CyclicBarrier
name|startLaunchBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|completeLaunchBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|YarnRPC
name|mockRpc
init|=
name|mock
argument_list|(
name|YarnRPC
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|mockContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
name|mockEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockEventHandler
argument_list|)
expr_stmt|;
name|ContainerManager
name|mockCM
init|=
operator|new
name|ContainerManagerForTest
argument_list|(
name|startLaunchBarrier
argument_list|,
name|completeLaunchBarrier
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRpc
operator|.
name|getProxy
argument_list|(
name|eq
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCM
argument_list|)
expr_stmt|;
name|ContainerLauncherImplUnderTest
name|ut
init|=
operator|new
name|ContainerLauncherImplUnderTest
argument_list|(
name|mockContext
argument_list|,
name|mockRpc
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ut
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ut
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerId
name|contId
init|=
name|makeContainerId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptId
init|=
name|makeTaskAttemptId
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|cmAddress
init|=
literal|"127.0.0.1:8000"
decl_stmt|;
name|StartContainerResponse
name|startResp
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|startResp
operator|.
name|setServiceResponse
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeMetaData
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting launch event"
argument_list|)
expr_stmt|;
name|ContainerRemoteLaunchEvent
name|mockLaunchEvent
init|=
name|mock
argument_list|(
name|ContainerRemoteLaunchEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockLaunchEvent
argument_list|)
expr_stmt|;
name|startLaunchBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inserting cleanup event"
argument_list|)
expr_stmt|;
name|ContainerLauncherEvent
name|mockCleanupEvent
init|=
name|mock
argument_list|(
name|ContainerLauncherEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCleanupEvent
operator|.
name|getContainerMgrAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cmAddress
argument_list|)
expr_stmt|;
name|ut
operator|.
name|handle
argument_list|(
name|mockCleanupEvent
argument_list|)
expr_stmt|;
name|completeLaunchBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|ut
operator|.
name|waitForPoolToIdle
argument_list|()
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockEventHandler
argument_list|,
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|containerCleaned
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|currentEvent
init|=
name|arg
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentEvent
operator|.
name|getType
argument_list|()
operator|==
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
condition|)
block|{
name|containerCleaned
operator|=
literal|true
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|containerCleaned
operator|)
assert|;
block|}
finally|finally
block|{
name|ut
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ContainerManagerForTest
specifier|private
specifier|static
class|class
name|ContainerManagerForTest
implements|implements
name|ContainerManager
block|{
DECL|field|startLaunchBarrier
specifier|private
name|CyclicBarrier
name|startLaunchBarrier
decl_stmt|;
DECL|field|completeLaunchBarrier
specifier|private
name|CyclicBarrier
name|completeLaunchBarrier
decl_stmt|;
DECL|method|ContainerManagerForTest (CyclicBarrier startLaunchBarrier, CyclicBarrier completeLaunchBarrier)
name|ContainerManagerForTest
parameter_list|(
name|CyclicBarrier
name|startLaunchBarrier
parameter_list|,
name|CyclicBarrier
name|completeLaunchBarrier
parameter_list|)
block|{
name|this
operator|.
name|startLaunchBarrier
operator|=
name|startLaunchBarrier
expr_stmt|;
name|this
operator|.
name|completeLaunchBarrier
operator|=
name|completeLaunchBarrier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startContainer (StartContainerRequest request)
specifier|public
name|StartContainerResponse
name|startContainer
parameter_list|(
name|StartContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
try|try
block|{
name|startLaunchBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|completeLaunchBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//To ensure the kill is started before the launch
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ContainerException
argument_list|(
literal|"Force fail CM"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|stopContainer (StopContainerRequest request)
specifier|public
name|StopContainerResponse
name|stopContainer
parameter_list|(
name|StopContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerStatus ( GetContainerStatusRequest request)
specifier|public
name|GetContainerStatusResponse
name|getContainerStatus
parameter_list|(
name|GetContainerStatusRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ContainerException
specifier|private
specifier|static
class|class
name|ContainerException
extends|extends
name|YarnRemoteException
block|{
DECL|method|ContainerException (String message)
specifier|public
name|ContainerException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRemoteTrace ()
specifier|public
name|String
name|getRemoteTrace
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCause ()
specifier|public
name|YarnRemoteException
name|getCause
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

