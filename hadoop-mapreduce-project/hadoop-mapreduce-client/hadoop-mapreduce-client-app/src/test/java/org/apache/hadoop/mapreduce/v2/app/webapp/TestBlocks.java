begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|JobIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|TaskIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|BlockForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
operator|.
name|Block
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestBlocks
specifier|public
class|class
name|TestBlocks
block|{
DECL|field|data
specifier|private
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|/**    * Test rendering for ConfBlock    */
annotation|@
name|Test
DECL|method|testConfigurationBlock ()
specifier|public
name|void
name|testConfigurationBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"Key for test"
argument_list|,
literal|"Value for test"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|job
operator|.
name|loadConfFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getJob
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|ConfBlockForTest
name|configurationBlock
init|=
operator|new
name|ConfBlockForTest
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|PrintWriter
name|pWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Block
name|html
init|=
operator|new
name|BlockForTest
argument_list|(
operator|new
name|HtmlBlockForTest
argument_list|()
argument_list|,
name|pWriter
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|configurationBlock
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Sorry, can't do anything without a JobID"
argument_list|)
argument_list|)
expr_stmt|;
name|configurationBlock
operator|.
name|addParameter
argument_list|(
name|AMParams
operator|.
name|JOB_ID
argument_list|,
literal|"job_01_01"
argument_list|)
expr_stmt|;
name|data
operator|.
name|reset
argument_list|()
expr_stmt|;
name|configurationBlock
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Key for test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Value for test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rendering for TasksBlock    */
annotation|@
name|Test
DECL|method|testTasksBlock ()
specifier|public
name|void
name|testTasksBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
operator|new
name|JobIdPBImpl
argument_list|()
decl_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|TaskId
name|taskId
init|=
operator|new
name|TaskIdPBImpl
argument_list|()
decl_stmt|;
name|taskId
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|TaskReport
name|report
init|=
name|mock
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0.7f
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getTaskState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100001L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100011L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Dummy Status \n*"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|AppContext
name|ctx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getTasks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|App
name|app
init|=
operator|new
name|App
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|app
operator|.
name|setJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TasksBlockForTest
name|taskBlock
init|=
operator|new
name|TasksBlockForTest
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|taskBlock
operator|.
name|addParameter
argument_list|(
name|AMParams
operator|.
name|TASK_TYPE
argument_list|,
literal|"m"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Block
name|html
init|=
operator|new
name|BlockForTest
argument_list|(
operator|new
name|HtmlBlockForTest
argument_list|()
argument_list|,
name|pWriter
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|taskBlock
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|pWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"task_0_0001_m_000000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"70.00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100001"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"100011"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Dummy Status \n*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Dummy Status \\n*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ConfBlockForTest
specifier|private
class|class
name|ConfBlockForTest
extends|extends
name|ConfBlock
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addParameter (String name, String value)
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|$ (String key, String defaultValue)
specifier|public
name|String
name|$
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
DECL|method|ConfBlockForTest (AppContext appCtx)
name|ConfBlockForTest
parameter_list|(
name|AppContext
name|appCtx
parameter_list|)
block|{
name|super
argument_list|(
name|appCtx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HtmlBlockForTest
specifier|private
class|class
name|HtmlBlockForTest
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{      }
block|}
block|}
end_class

end_unit

