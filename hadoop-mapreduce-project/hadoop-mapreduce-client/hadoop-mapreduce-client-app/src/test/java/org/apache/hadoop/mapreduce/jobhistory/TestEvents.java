begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestEvents
specifier|public
class|class
name|TestEvents
block|{
comment|/**    * test a getters of TaskAttemptFinishedEvent and TaskAttemptFinished    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTaskAttemptFinishedEvent ()
specifier|public
name|void
name|testTaskAttemptFinishedEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taskAttemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tid
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|TaskAttemptFinishedEvent
name|test
init|=
operator|new
name|TaskAttemptFinishedEvent
argument_list|(
name|taskAttemptId
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|"TEST"
argument_list|,
literal|123L
argument_list|,
literal|"RAKNAME"
argument_list|,
literal|"HOSTNAME"
argument_list|,
literal|"STATUS"
argument_list|,
name|counters
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taskAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getCounters
argument_list|()
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getFinishTime
argument_list|()
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|"HOSTNAME"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|"RAKNAME"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getState
argument_list|()
argument_list|,
literal|"STATUS"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getTaskStatus
argument_list|()
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
comment|/**    * simple test JobPriorityChangeEvent and JobPriorityChange    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testJobPriorityChange ()
specifier|public
name|void
name|testJobPriorityChange
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobPriorityChangeEvent
name|test
init|=
operator|new
name|JobPriorityChangeEvent
argument_list|(
name|jid
argument_list|,
name|JobPriority
operator|.
name|LOW
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getPriority
argument_list|()
argument_list|,
name|JobPriority
operator|.
name|LOW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testJobQueueChange ()
specifier|public
name|void
name|testJobQueueChange
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobQueueChangeEvent
name|test
init|=
operator|new
name|JobQueueChangeEvent
argument_list|(
name|jid
argument_list|,
literal|"newqueue"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getJobQueueName
argument_list|()
argument_list|,
literal|"newqueue"
argument_list|)
expr_stmt|;
block|}
comment|/**    * simple test TaskUpdatedEvent and TaskUpdated    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTaskUpdated ()
specifier|public
name|void
name|testTaskUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"001"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TaskUpdatedEvent
name|test
init|=
operator|new
name|TaskUpdatedEvent
argument_list|(
name|tid
argument_list|,
literal|1234L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
operator|.
name|getFinishTime
argument_list|()
argument_list|,
literal|1234L
argument_list|)
expr_stmt|;
block|}
comment|/*    * test EventReader EventReader should read the list of events and return    * instance of HistoryEvent Different HistoryEvent should have a different    * datum.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testEvents ()
specifier|public
name|void
name|testEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|EventReader
name|reader
init|=
operator|new
name|EventReader
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|getEvents
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HistoryEvent
name|e
init|=
name|reader
operator|.
name|getNextEvent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|JOB_PRIORITY_CHANGED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|JobPriorityChange
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|JOB_STATUS_CHANGED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|JobStatusChanged
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|TASK_UPDATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|TaskUpdated
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|JOB_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|JobUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptStarted
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptFinished
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptStarted
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptFinished
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|reader
operator|.
name|getNextEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"task_1_2_r03_4"
argument_list|,
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|e
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * makes array of bytes with History events    */
DECL|method|getEvents ()
specifier|private
name|byte
index|[]
name|getEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|fsOutput
init|=
operator|new
name|FSDataOutputStream
argument_list|(
name|output
argument_list|,
operator|new
name|FileSystem
operator|.
name|Statistics
argument_list|(
literal|"scheme"
argument_list|)
argument_list|)
decl_stmt|;
name|EventWriter
name|writer
init|=
operator|new
name|EventWriter
argument_list|(
name|fsOutput
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getJobPriorityChangedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getJobStatusChangedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getTaskUpdatedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getReduceAttemptKilledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getJobKilledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getSetupAttemptStartedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getTaskAttemptFinishedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getSetupAttemptFieledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getSetupAttemptKilledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getCleanupAttemptStartedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getCleanupAttemptFinishedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getCleanupAttemptFiledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getCleanupAttemptKilledEvent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getCleanupAttemptKilledEvent ()
specifier|private
name|FakeEvent
name|getCleanupAttemptKilledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|CLEANUP_ATTEMPT_KILLED
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|getTaskAttemptUnsuccessfulCompletion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getCleanupAttemptFiledEvent ()
specifier|private
name|FakeEvent
name|getCleanupAttemptFiledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|CLEANUP_ATTEMPT_FAILED
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|getTaskAttemptUnsuccessfulCompletion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTaskAttemptUnsuccessfulCompletion ()
specifier|private
name|TaskAttemptUnsuccessfulCompletion
name|getTaskAttemptUnsuccessfulCompletion
parameter_list|()
block|{
name|TaskAttemptUnsuccessfulCompletion
name|datum
init|=
operator|new
name|TaskAttemptUnsuccessfulCompletion
argument_list|()
decl_stmt|;
name|datum
operator|.
name|attemptId
operator|=
literal|"attempt_1_2_r3_4_5"
expr_stmt|;
name|datum
operator|.
name|clockSplits
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|datum
operator|.
name|cpuUsages
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|datum
operator|.
name|error
operator|=
literal|"Error"
expr_stmt|;
name|datum
operator|.
name|finishTime
operator|=
literal|2
expr_stmt|;
name|datum
operator|.
name|hostname
operator|=
literal|"hostname"
expr_stmt|;
name|datum
operator|.
name|rackname
operator|=
literal|"rackname"
expr_stmt|;
name|datum
operator|.
name|physMemKbytes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"task_1_2_r03_4"
expr_stmt|;
name|datum
operator|.
name|port
operator|=
literal|1000
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
literal|"REDUCE"
expr_stmt|;
name|datum
operator|.
name|status
operator|=
literal|"STATUS"
expr_stmt|;
name|datum
operator|.
name|counters
operator|=
name|getCounters
argument_list|()
expr_stmt|;
name|datum
operator|.
name|vMemKbytes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
return|return
name|datum
return|;
block|}
DECL|method|getCounters ()
specifier|private
name|JhCounters
name|getCounters
parameter_list|()
block|{
name|JhCounters
name|counters
init|=
operator|new
name|JhCounters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|groups
operator|=
operator|new
name|ArrayList
argument_list|<
name|JhCounterGroup
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|counters
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
return|return
name|counters
return|;
block|}
DECL|method|getCleanupAttemptFinishedEvent ()
specifier|private
name|FakeEvent
name|getCleanupAttemptFinishedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|CLEANUP_ATTEMPT_FINISHED
argument_list|)
decl_stmt|;
name|TaskAttemptFinished
name|datum
init|=
operator|new
name|TaskAttemptFinished
argument_list|()
decl_stmt|;
name|datum
operator|.
name|attemptId
operator|=
literal|"attempt_1_2_r3_4_5"
expr_stmt|;
name|datum
operator|.
name|counters
operator|=
name|getCounters
argument_list|()
expr_stmt|;
name|datum
operator|.
name|finishTime
operator|=
literal|2
expr_stmt|;
name|datum
operator|.
name|hostname
operator|=
literal|"hostname"
expr_stmt|;
name|datum
operator|.
name|rackname
operator|=
literal|"rackName"
expr_stmt|;
name|datum
operator|.
name|state
operator|=
literal|"state"
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"task_1_2_r03_4"
expr_stmt|;
name|datum
operator|.
name|taskStatus
operator|=
literal|"taskStatus"
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
literal|"REDUCE"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getCleanupAttemptStartedEvent ()
specifier|private
name|FakeEvent
name|getCleanupAttemptStartedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|CLEANUP_ATTEMPT_STARTED
argument_list|)
decl_stmt|;
name|TaskAttemptStarted
name|datum
init|=
operator|new
name|TaskAttemptStarted
argument_list|()
decl_stmt|;
name|datum
operator|.
name|attemptId
operator|=
literal|"attempt_1_2_r3_4_5"
expr_stmt|;
name|datum
operator|.
name|avataar
operator|=
literal|"avatar"
expr_stmt|;
name|datum
operator|.
name|containerId
operator|=
literal|"containerId"
expr_stmt|;
name|datum
operator|.
name|httpPort
operator|=
literal|10000
expr_stmt|;
name|datum
operator|.
name|locality
operator|=
literal|"locality"
expr_stmt|;
name|datum
operator|.
name|shufflePort
operator|=
literal|10001
expr_stmt|;
name|datum
operator|.
name|startTime
operator|=
literal|1
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"task_1_2_r03_4"
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
literal|"taskType"
expr_stmt|;
name|datum
operator|.
name|trackerName
operator|=
literal|"trackerName"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getSetupAttemptKilledEvent ()
specifier|private
name|FakeEvent
name|getSetupAttemptKilledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|SETUP_ATTEMPT_KILLED
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|getTaskAttemptUnsuccessfulCompletion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getSetupAttemptFieledEvent ()
specifier|private
name|FakeEvent
name|getSetupAttemptFieledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|SETUP_ATTEMPT_FAILED
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|getTaskAttemptUnsuccessfulCompletion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTaskAttemptFinishedEvent ()
specifier|private
name|FakeEvent
name|getTaskAttemptFinishedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|SETUP_ATTEMPT_FINISHED
argument_list|)
decl_stmt|;
name|TaskAttemptFinished
name|datum
init|=
operator|new
name|TaskAttemptFinished
argument_list|()
decl_stmt|;
name|datum
operator|.
name|attemptId
operator|=
literal|"attempt_1_2_r3_4_5"
expr_stmt|;
name|datum
operator|.
name|counters
operator|=
name|getCounters
argument_list|()
expr_stmt|;
name|datum
operator|.
name|finishTime
operator|=
literal|2
expr_stmt|;
name|datum
operator|.
name|hostname
operator|=
literal|"hostname"
expr_stmt|;
name|datum
operator|.
name|rackname
operator|=
literal|"rackname"
expr_stmt|;
name|datum
operator|.
name|state
operator|=
literal|"state"
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"task_1_2_r03_4"
expr_stmt|;
name|datum
operator|.
name|taskStatus
operator|=
literal|"taskStatus"
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
literal|"REDUCE"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getSetupAttemptStartedEvent ()
specifier|private
name|FakeEvent
name|getSetupAttemptStartedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|SETUP_ATTEMPT_STARTED
argument_list|)
decl_stmt|;
name|TaskAttemptStarted
name|datum
init|=
operator|new
name|TaskAttemptStarted
argument_list|()
decl_stmt|;
name|datum
operator|.
name|attemptId
operator|=
literal|"ID"
expr_stmt|;
name|datum
operator|.
name|avataar
operator|=
literal|"avataar"
expr_stmt|;
name|datum
operator|.
name|containerId
operator|=
literal|"containerId"
expr_stmt|;
name|datum
operator|.
name|httpPort
operator|=
literal|10000
expr_stmt|;
name|datum
operator|.
name|locality
operator|=
literal|"locality"
expr_stmt|;
name|datum
operator|.
name|shufflePort
operator|=
literal|10001
expr_stmt|;
name|datum
operator|.
name|startTime
operator|=
literal|1
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"task_1_2_r03_4"
expr_stmt|;
name|datum
operator|.
name|taskType
operator|=
literal|"taskType"
expr_stmt|;
name|datum
operator|.
name|trackerName
operator|=
literal|"trackerName"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getJobKilledEvent ()
specifier|private
name|FakeEvent
name|getJobKilledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|JOB_KILLED
argument_list|)
decl_stmt|;
name|JobUnsuccessfulCompletion
name|datum
init|=
operator|new
name|JobUnsuccessfulCompletion
argument_list|()
decl_stmt|;
name|datum
operator|.
name|setFinishedMaps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishedReduces
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setFinishTime
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setJobid
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setJobStatus
argument_list|(
literal|"STATUS"
argument_list|)
expr_stmt|;
name|datum
operator|.
name|setDiagnostics
argument_list|(
name|JobImpl
operator|.
name|JOB_KILLED_DIAG
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getReduceAttemptKilledEvent ()
specifier|private
name|FakeEvent
name|getReduceAttemptKilledEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|getTaskAttemptUnsuccessfulCompletion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getJobPriorityChangedEvent ()
specifier|private
name|FakeEvent
name|getJobPriorityChangedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|JOB_PRIORITY_CHANGED
argument_list|)
decl_stmt|;
name|JobPriorityChange
name|datum
init|=
operator|new
name|JobPriorityChange
argument_list|()
decl_stmt|;
name|datum
operator|.
name|jobid
operator|=
literal|"ID"
expr_stmt|;
name|datum
operator|.
name|priority
operator|=
literal|"priority"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getJobStatusChangedEvent ()
specifier|private
name|FakeEvent
name|getJobStatusChangedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|JOB_STATUS_CHANGED
argument_list|)
decl_stmt|;
name|JobStatusChanged
name|datum
init|=
operator|new
name|JobStatusChanged
argument_list|()
decl_stmt|;
name|datum
operator|.
name|jobid
operator|=
literal|"ID"
expr_stmt|;
name|datum
operator|.
name|jobStatus
operator|=
literal|"newStatus"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTaskUpdatedEvent ()
specifier|private
name|FakeEvent
name|getTaskUpdatedEvent
parameter_list|()
block|{
name|FakeEvent
name|result
init|=
operator|new
name|FakeEvent
argument_list|(
name|EventType
operator|.
name|TASK_UPDATED
argument_list|)
decl_stmt|;
name|TaskUpdated
name|datum
init|=
operator|new
name|TaskUpdated
argument_list|()
decl_stmt|;
name|datum
operator|.
name|finishTime
operator|=
literal|2
expr_stmt|;
name|datum
operator|.
name|taskid
operator|=
literal|"ID"
expr_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|FakeEvent
specifier|private
class|class
name|FakeEvent
implements|implements
name|HistoryEvent
block|{
DECL|field|eventType
specifier|private
name|EventType
name|eventType
decl_stmt|;
DECL|field|datum
specifier|private
name|Object
name|datum
decl_stmt|;
DECL|method|FakeEvent (EventType eventType)
specifier|public
name|FakeEvent
parameter_list|(
name|EventType
name|eventType
parameter_list|)
block|{
name|this
operator|.
name|eventType
operator|=
name|eventType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEventType ()
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
return|return
name|eventType
return|;
block|}
annotation|@
name|Override
DECL|method|getDatum ()
specifier|public
name|Object
name|getDatum
parameter_list|()
block|{
return|return
name|datum
return|;
block|}
annotation|@
name|Override
DECL|method|setDatum (Object datum)
specifier|public
name|void
name|setDatum
parameter_list|(
name|Object
name|datum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
name|datum
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

