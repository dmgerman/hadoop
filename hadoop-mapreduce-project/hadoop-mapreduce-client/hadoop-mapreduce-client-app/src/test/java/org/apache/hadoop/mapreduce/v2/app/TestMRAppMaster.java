begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplitWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestMRAppMaster
specifier|public
class|class
name|TestMRAppMaster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMRAppMaster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-dir"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|TestMRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
decl_stmt|;
DECL|field|stagingDir
specifier|static
name|String
name|stagingDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"staging"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|localFS
specifier|private
specifier|static
name|FileContext
name|localFS
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
comment|//Do not error out if metrics are inited multiple times
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
name|stagingDir
operator|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|localFS
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|localFS
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|prepare ()
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|localFS
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterForDifferentUser ()
specifier|public
name|void
name|testMRAppMasterForDifferentUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000001"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000001_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMasterTest
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|Path
name|userPath
init|=
operator|new
name|Path
argument_list|(
name|stagingDir
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Path
name|userStagingPath
init|=
operator|new
name|Path
argument_list|(
name|userPath
argument_list|,
literal|".staging"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userStagingPath
operator|.
name|toString
argument_list|()
argument_list|,
name|appMaster
operator|.
name|stagingDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterMidLock ()
specifier|public
name|void
name|testMRAppMasterMidLock
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
operator|.
name|FILEOUTPUTCOMMITTER_ALGORITHM_VERSION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|start
init|=
name|MRApps
operator|.
name|getStartJobCommitFile
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//Create the file, but no end file so we should unregister with an error.
name|fs
operator|.
name|create
argument_list|(
name|start
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//The IO Exception is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appMaster
operator|.
name|errorHappenedShutDown
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|appMaster
operator|.
name|forcedState
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// verify the final status is FAILED
name|verifyFailedStatus
argument_list|(
operator|(
name|MRAppMasterTest
operator|)
name|appMaster
argument_list|,
literal|"FAILED"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterJobLaunchTime ()
specifier|public
name|void
name|testMRAppMasterJobLaunchTime
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_JHIST_FORMAT
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|historyFile
init|=
operator|new
name|File
argument_list|(
name|JobHistoryUtils
operator|.
name|getStagingJobHistoryFile
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|jobId
argument_list|,
operator|(
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
name|historyFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|historyFile
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EventWriter
name|writer
init|=
operator|new
name|EventWriter
argument_list|(
name|out
argument_list|,
name|EventWriter
operator|.
name|WriteMode
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobSplitWriter
operator|.
name|createSplitFiles
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMasterTestLaunchTime
name|appMaster
init|=
operator|new
name|MRAppMasterTestLaunchTime
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job launch time should not be negative."
argument_list|,
name|appMaster
operator|.
name|jobLaunchTime
operator|.
name|get
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterSuccessLock ()
specifier|public
name|void
name|testMRAppMasterSuccessLock
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|start
init|=
name|MRApps
operator|.
name|getStartJobCommitFile
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|Path
name|end
init|=
name|MRApps
operator|.
name|getEndJobCommitSuccessFile
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|start
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|end
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//The IO Exception is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appMaster
operator|.
name|errorHappenedShutDown
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|appMaster
operator|.
name|forcedState
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// verify the final status is SUCCEEDED
name|verifyFailedStatus
argument_list|(
operator|(
name|MRAppMasterTest
operator|)
name|appMaster
argument_list|,
literal|"SUCCEEDED"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterFailLock ()
specifier|public
name|void
name|testMRAppMasterFailLock
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|start
init|=
name|MRApps
operator|.
name|getStartJobCommitFile
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|Path
name|end
init|=
name|MRApps
operator|.
name|getEndJobCommitFailureFile
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|start
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|end
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//The IO Exception is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appMaster
operator|.
name|errorHappenedShutDown
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|appMaster
operator|.
name|forcedState
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// verify the final status is FAILED
name|verifyFailedStatus
argument_list|(
operator|(
name|MRAppMasterTest
operator|)
name|appMaster
argument_list|,
literal|"FAILED"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterMissingStaging ()
specifier|public
name|void
name|testMRAppMasterMissingStaging
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
comment|//Delete the staging directory
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//The IO Exception is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appMaster
operator|.
name|errorHappenedShutDown
argument_list|)
expr_stmt|;
comment|//Copying the history file is disabled, but it is not really visible from
comment|//here
name|assertEquals
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|appMaster
operator|.
name|forcedState
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMRAppMasterMaxAppAttempts ()
specifier|public
name|void
name|testMRAppMasterMaxAppAttempts
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// No matter what's the maxAppAttempt or attempt id, the isLastRetry always
comment|// equals to false
name|Boolean
index|[]
name|expectedBools
init|=
operator|new
name|Boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|File
name|stagingDir
init|=
operator|new
name|File
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedBools
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|MRAppMasterTest
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"isLastAMRetry is correctly computed."
argument_list|,
name|expectedBools
index|[
name|i
index|]
argument_list|,
name|appMaster
operator|.
name|isLastAMRetry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A dirty hack to modify the env of the current JVM itself - Dirty, but
comment|// should be okay for testing.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|setNewEnvironmentHack (Map<String, String> newenv)
specifier|private
specifier|static
name|void
name|setNewEnvironmentHack
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newenv
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.ProcessEnvironment"
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"theEnvironment"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|env
operator|.
name|clear
argument_list|()
expr_stmt|;
name|env
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
name|Field
name|ciField
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"theCaseInsensitiveEnvironment"
argument_list|)
decl_stmt|;
name|ciField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cienv
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|ciField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cienv
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cienv
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
index|[]
name|classes
init|=
name|Collections
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|System
operator|.
name|getenv
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|classes
control|)
block|{
if|if
condition|(
literal|"java.util.Collections$UnmodifiableMap"
operator|.
name|equals
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|field
operator|.
name|get
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|obj
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterCredentials ()
specifier|public
name|void
name|testMRAppMasterCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setRootLogLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
comment|// Simulate credentials passed to AM via client->RM->NM
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|byte
index|[]
name|identifier
init|=
literal|"MyIdentifier"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|password
init|=
literal|"MyPassword"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Text
name|kind
init|=
operator|new
name|Text
argument_list|(
literal|"MyTokenKind"
argument_list|)
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"host:port"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|myToken
init|=
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|,
name|kind
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|Text
name|tokenAlias
init|=
operator|new
name|Text
argument_list|(
literal|"myToken"
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|tokenAlias
argument_list|,
name|myToken
argument_list|)
expr_stmt|;
name|Text
name|appTokenService
init|=
operator|new
name|Text
argument_list|(
literal|"localhost:0"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appToken
init|=
operator|new
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|,
name|AMRMTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
name|appTokenService
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|appTokenService
argument_list|,
name|appToken
argument_list|)
expr_stmt|;
name|Text
name|keyAlias
init|=
operator|new
name|Text
argument_list|(
literal|"mySecretKeyAlias"
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|keyAlias
argument_list|,
literal|"mySecretKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|storedToken
init|=
name|credentials
operator|.
name|getToken
argument_list|(
name|tokenAlias
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Path
name|tokenFilePath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"tokens-file"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newEnv
operator|.
name|put
argument_list|(
name|UserGroupInformation
operator|.
name|HADOOP_TOKEN_FILE_LOCATION
argument_list|,
name|tokenFilePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|setNewEnvironmentHack
argument_list|(
name|newEnv
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|writeTokenStorageFile
argument_list|(
name|tokenFilePath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|56
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|546
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
comment|// Create staging dir, so MRAppMaster doesn't barf.
name|File
name|stagingDir
init|=
operator|new
name|File
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Set login-user to null as that is how real world MRApp starts with.
comment|// This is null is the reason why token-file is read by UGI.
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MRAppMasterTest
name|appMaster
init|=
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|// Now validate the task credentials
name|Credentials
name|appMasterCreds
init|=
name|appMaster
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appMasterCreds
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appMasterCreds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appMasterCreds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate the tokens - app token should not be present
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|usedToken
init|=
name|appMasterCreds
operator|.
name|getToken
argument_list|(
name|tokenAlias
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|usedToken
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storedToken
argument_list|,
name|usedToken
argument_list|)
expr_stmt|;
comment|// Validate the keys
name|byte
index|[]
name|usedKey
init|=
name|appMasterCreds
operator|.
name|getSecretKey
argument_list|(
name|keyAlias
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|usedKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mySecretKey"
argument_list|,
operator|new
name|String
argument_list|(
name|usedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// The credentials should also be added to conf so that OuputCommitter can
comment|// access it - app token should not be present
name|Credentials
name|confCredentials
init|=
name|conf
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|confCredentials
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|confCredentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storedToken
argument_list|,
name|confCredentials
operator|.
name|getToken
argument_list|(
name|tokenAlias
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mySecretKey"
argument_list|,
operator|new
name|String
argument_list|(
name|confCredentials
operator|.
name|getSecretKey
argument_list|(
name|keyAlias
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the AM's ugi - app token should be present
name|Credentials
name|ugiCredentials
init|=
name|appMaster
operator|.
name|getUgi
argument_list|()
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ugiCredentials
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ugiCredentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storedToken
argument_list|,
name|ugiCredentials
operator|.
name|getToken
argument_list|(
name|tokenAlias
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appToken
argument_list|,
name|ugiCredentials
operator|.
name|getToken
argument_list|(
name|appTokenService
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mySecretKey"
argument_list|,
operator|new
name|String
argument_list|(
name|ugiCredentials
operator|.
name|getSecretKey
argument_list|(
name|keyAlias
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMRAppMasterShutDownJob ()
specifier|public
name|void
name|testMRAppMasterShutDownJob
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|String
name|applicationAttemptIdStr
init|=
literal|"appattempt_1317529182569_0004_000002"
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|"container_1317529182569_0004_000002_1"
decl_stmt|;
name|String
name|userName
init|=
literal|"TestAppMasterUser"
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|applicationAttemptIdStr
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_STAGING_DIR
argument_list|,
name|stagingDir
argument_list|)
expr_stmt|;
name|File
name|stagingDir
init|=
operator|new
name|File
argument_list|(
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|MRAppMasterTest
name|appMaster
init|=
name|spy
argument_list|(
operator|new
name|MRAppMasterTest
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
literal|"host"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|MRAppMaster
operator|.
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|conf
argument_list|)
operator|.
name|when
argument_list|(
name|appMaster
argument_list|)
operator|.
name|getConfig
argument_list|()
expr_stmt|;
name|appMaster
operator|.
name|isLastAMRetry
operator|=
literal|true
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|appMaster
argument_list|)
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
comment|// Test normal shutdown.
name|appMaster
operator|.
name|shutDownJob
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected shutDownJob to terminate."
argument_list|,
name|ExitUtil
operator|.
name|terminateCalled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected shutDownJob to exit with status code of 0."
argument_list|,
literal|0
argument_list|,
name|ExitUtil
operator|.
name|getFirstExitException
argument_list|()
operator|.
name|status
argument_list|)
expr_stmt|;
comment|// Test shutdown with exception.
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Injected Exception"
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|appMaster
argument_list|)
operator|.
name|notifyIsLastAMRetry
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|shutDownJob
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected message from ExitUtil.ExitException to be "
operator|+
name|msg
argument_list|,
name|ExitUtil
operator|.
name|getFirstExitException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected shutDownJob to exit with status code of 1."
argument_list|,
literal|1
argument_list|,
name|ExitUtil
operator|.
name|getFirstExitException
argument_list|()
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFailedStatus (MRAppMasterTest appMaster, String expectedJobState)
specifier|private
name|void
name|verifyFailedStatus
parameter_list|(
name|MRAppMasterTest
name|appMaster
parameter_list|,
name|String
name|expectedJobState
parameter_list|)
block|{
name|ArgumentCaptor
argument_list|<
name|JobHistoryEvent
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|JobHistoryEvent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// handle two events: AMStartedEvent and JobUnsuccessfulCompletionEvent
name|verify
argument_list|(
name|appMaster
operator|.
name|spyHistoryService
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handleEvent
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|HistoryEvent
name|event
init|=
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|event
operator|instanceof
name|JobUnsuccessfulCompletionEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
operator|)
operator|.
name|getStatus
argument_list|()
argument_list|,
name|expectedJobState
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|MRAppMasterTest
class|class
name|MRAppMasterTest
extends|extends
name|MRAppMaster
block|{
DECL|field|stagingDirPath
name|Path
name|stagingDirPath
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|overrideInit
specifier|private
name|boolean
name|overrideInit
decl_stmt|;
DECL|field|overrideStart
specifier|private
name|boolean
name|overrideStart
decl_stmt|;
DECL|field|mockContainerAllocator
name|ContainerAllocator
name|mockContainerAllocator
decl_stmt|;
DECL|field|mockCommitterEventHandler
name|CommitterEventHandler
name|mockCommitterEventHandler
decl_stmt|;
DECL|field|mockRMHeartbeatHandler
name|RMHeartbeatHandler
name|mockRMHeartbeatHandler
decl_stmt|;
DECL|field|spyHistoryService
name|JobHistoryEventHandler
name|spyHistoryService
decl_stmt|;
DECL|method|MRAppMasterTest (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String host, int port, int httpPort, long submitTime)
specifier|public
name|MRAppMasterTest
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|long
name|submitTime
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|httpPort
argument_list|,
name|submitTime
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|MRAppMasterTest (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String host, int port, int httpPort, long submitTime, boolean overrideInit, boolean overrideStart)
specifier|public
name|MRAppMasterTest
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|boolean
name|overrideInit
parameter_list|,
name|boolean
name|overrideStart
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|httpPort
argument_list|,
name|submitTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|overrideInit
operator|=
name|overrideInit
expr_stmt|;
name|this
operator|.
name|overrideStart
operator|=
name|overrideStart
expr_stmt|;
name|mockContainerAllocator
operator|=
name|mock
argument_list|(
name|ContainerAllocator
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCommitterEventHandler
operator|=
name|mock
argument_list|(
name|CommitterEventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockRMHeartbeatHandler
operator|=
name|mock
argument_list|(
name|RMHeartbeatHandler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|overrideInit
condition|)
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContainerAllocator ( final ClientService clientService, final AppContext context)
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
specifier|final
name|ClientService
name|clientService
parameter_list|,
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
name|mockContainerAllocator
return|;
block|}
annotation|@
name|Override
DECL|method|createCommitterEventHandler ( AppContext context, OutputCommitter committer)
specifier|protected
name|EventHandler
argument_list|<
name|CommitterEvent
argument_list|>
name|createCommitterEventHandler
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|)
block|{
return|return
name|mockCommitterEventHandler
return|;
block|}
annotation|@
name|Override
DECL|method|getRMHeartbeatHandler ()
specifier|protected
name|RMHeartbeatHandler
name|getRMHeartbeatHandler
parameter_list|()
block|{
return|return
name|mockRMHeartbeatHandler
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|overrideStart
condition|)
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|stagingDirPath
operator|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
return|return
name|super
operator|.
name|getCredentials
argument_list|()
return|;
block|}
DECL|method|getUgi ()
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|currentUser
return|;
block|}
annotation|@
name|Override
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|spyHistoryService
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|JobHistoryEventHandler
operator|)
name|super
operator|.
name|createJobHistoryHandler
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|spyHistoryService
operator|.
name|setForcejobCompletion
argument_list|(
name|this
operator|.
name|isLastAMRetry
argument_list|)
expr_stmt|;
return|return
name|spyHistoryService
return|;
block|}
block|}
end_class

begin_class
DECL|class|MRAppMasterTestLaunchTime
class|class
name|MRAppMasterTestLaunchTime
extends|extends
name|MRAppMasterTest
block|{
DECL|field|jobLaunchTime
specifier|final
name|AtomicLong
name|jobLaunchTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|method|MRAppMasterTestLaunchTime (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String host, int port, int httpPort, long submitTime)
specifier|public
name|MRAppMasterTestLaunchTime
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|long
name|submitTime
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|httpPort
argument_list|,
name|submitTime
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCommitterEventHandler ( AppContext context, OutputCommitter committer)
specifier|protected
name|EventHandler
argument_list|<
name|CommitterEvent
argument_list|>
name|createCommitterEventHandler
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|)
block|{
return|return
operator|new
name|CommitterEventHandler
argument_list|(
name|context
argument_list|,
name|committer
argument_list|,
name|getRMHeartbeatHandler
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CommitterEvent
name|event
parameter_list|)
block|{       }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JobHistoryEventHandler
argument_list|(
name|context
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_INITED
condition|)
block|{
name|JobInitedEvent
name|jie
init|=
operator|(
name|JobInitedEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|jobLaunchTime
operator|.
name|set
argument_list|(
name|jie
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

