begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTaskAttemptListenerImpl
specifier|public
class|class
name|TestTaskAttemptListenerImpl
block|{
DECL|class|MockTaskAttemptListenerImpl
specifier|public
specifier|static
class|class
name|MockTaskAttemptListenerImpl
extends|extends
name|TaskAttemptListenerImpl
block|{
DECL|method|MockTaskAttemptListenerImpl (AppContext context, JobTokenSecretManager jobTokenSecretManager, TaskHeartbeatHandler hbHandler)
specifier|public
name|MockTaskAttemptListenerImpl
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|JobTokenSecretManager
name|jobTokenSecretManager
parameter_list|,
name|TaskHeartbeatHandler
name|hbHandler
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|jobTokenSecretManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerHeartbeatHandler (Configuration conf)
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|//Empty
block|}
annotation|@
name|Override
DECL|method|startRpcServer ()
specifier|protected
name|void
name|startRpcServer
parameter_list|()
block|{
comment|//Empty
block|}
annotation|@
name|Override
DECL|method|stopRpcServer ()
specifier|protected
name|void
name|stopRpcServer
parameter_list|()
block|{
comment|//Empty
block|}
block|}
annotation|@
name|Test
DECL|method|testGetTask ()
specifier|public
name|void
name|testGetTask
parameter_list|()
throws|throws
name|IOException
block|{
name|AppContext
name|appCtx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobTokenSecretManager
name|secret
init|=
name|mock
argument_list|(
name|JobTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskHeartbeatHandler
name|hbHandler
init|=
name|mock
argument_list|(
name|TaskHeartbeatHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockTaskAttemptListenerImpl
name|listener
init|=
operator|new
name|MockTaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|,
name|hbHandler
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|JVMId
name|id
init|=
operator|new
name|JVMId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WrappedJvmID
name|wid
init|=
operator|new
name|WrappedJvmID
argument_list|(
name|id
operator|.
name|getJobId
argument_list|()
argument_list|,
name|id
operator|.
name|isMap
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify ask before registration.
comment|//The JVM ID has not been registered yet so we should kill it.
name|JvmContext
name|context
init|=
operator|new
name|JvmContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|jvmId
operator|=
name|id
expr_stmt|;
name|JvmTask
name|result
init|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
comment|// Verify ask after registration but before launch.
comment|// Don't kill, should be null.
name|TaskAttemptId
name|attemptID
init|=
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Now put a task with the ID
name|listener
operator|.
name|registerPendingTask
argument_list|(
name|task
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Unregister for more testing.
name|listener
operator|.
name|unregister
argument_list|(
name|attemptID
argument_list|,
name|wid
argument_list|)
expr_stmt|;
comment|// Verify ask after registration and launch
comment|//Now put a task with the ID
name|listener
operator|.
name|registerPendingTask
argument_list|(
name|task
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|listener
operator|.
name|registerLaunchedTask
argument_list|(
name|attemptID
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|hbHandler
argument_list|)
operator|.
name|register
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
comment|// Don't unregister yet for more testing.
comment|//Verify that if we call it again a second time we are told to die.
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
name|listener
operator|.
name|unregister
argument_list|(
name|attemptID
argument_list|,
name|wid
argument_list|)
expr_stmt|;
comment|// Verify after unregistration.
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
name|listener
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMapCompletionEvents ()
specifier|public
name|void
name|testGetMapCompletionEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptCompletionEvent
index|[]
name|empty
init|=
block|{}
decl_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|taskEvents
init|=
block|{
name|createTce
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|)
block|,
name|createTce
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|)
block|,
name|createTce
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|)
block|,
name|createTce
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|)
block|}
decl_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|mapEvents
init|=
block|{
name|taskEvents
index|[
literal|0
index|]
block|,
name|taskEvents
index|[
literal|2
index|]
block|}
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskEvents
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|taskEvents
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|taskEvents
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapEvents
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapEvents
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|AppContext
name|appCtx
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getJob
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJob
argument_list|)
expr_stmt|;
name|JobTokenSecretManager
name|secret
init|=
name|mock
argument_list|(
name|JobTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TaskHeartbeatHandler
name|hbHandler
init|=
name|mock
argument_list|(
name|TaskHeartbeatHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskAttemptListenerImpl
name|listener
init|=
operator|new
name|TaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|MapTaskCompletionEventsUpdate
name|update
init|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|tid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
operator|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
operator|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createTce (int eventId, boolean isMap, TaskAttemptCompletionEventStatus status)
specifier|private
specifier|static
name|TaskAttemptCompletionEvent
name|createTce
parameter_list|(
name|int
name|eventId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|TaskAttemptCompletionEventStatus
name|status
parameter_list|)
block|{
name|JobId
name|jid
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskId
name|tid
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
name|isMap
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
operator|.
name|MAP
else|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TaskAttemptCompletionEvent
name|tce
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptCompletionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|tce
operator|.
name|setEventId
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|tce
return|;
block|}
block|}
end_class

end_unit

