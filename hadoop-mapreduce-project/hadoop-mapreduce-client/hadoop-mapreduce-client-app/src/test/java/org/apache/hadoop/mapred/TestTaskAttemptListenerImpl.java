begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
operator|.
name|EnumCounter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
operator|.
name|CheckpointID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
operator|.
name|FSCheckpointID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|checkpoint
operator|.
name|TaskCheckpointID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|AMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|CheckpointAMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests the behavior of TaskAttemptListenerImpl.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestTaskAttemptListenerImpl
specifier|public
class|class
name|TestTaskAttemptListenerImpl
block|{
DECL|field|ATTEMPT1_ID
specifier|private
specifier|static
specifier|final
name|String
name|ATTEMPT1_ID
init|=
literal|"attempt_123456789012_0001_m_000001_0"
decl_stmt|;
DECL|field|ATTEMPT2_ID
specifier|private
specifier|static
specifier|final
name|String
name|ATTEMPT2_ID
init|=
literal|"attempt_123456789012_0001_m_000002_0"
decl_stmt|;
DECL|field|TASKATTEMPTID1
specifier|private
specifier|static
specifier|final
name|TaskAttemptId
name|TASKATTEMPTID1
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|ATTEMPT1_ID
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|TASKATTEMPTID2
specifier|private
specifier|static
specifier|final
name|TaskAttemptId
name|TASKATTEMPTID2
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|ATTEMPT2_ID
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Mock
DECL|field|appCtx
specifier|private
name|AppContext
name|appCtx
decl_stmt|;
annotation|@
name|Mock
DECL|field|secret
specifier|private
name|JobTokenSecretManager
name|secret
decl_stmt|;
annotation|@
name|Mock
DECL|field|rmHeartbeatHandler
specifier|private
name|RMHeartbeatHandler
name|rmHeartbeatHandler
decl_stmt|;
annotation|@
name|Mock
DECL|field|hbHandler
specifier|private
name|TaskHeartbeatHandler
name|hbHandler
decl_stmt|;
annotation|@
name|Mock
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
annotation|@
name|Mock
DECL|field|task
specifier|private
name|Task
name|task
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Mock
DECL|field|ea
specifier|private
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|ea
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Captor
DECL|field|eventCaptor
specifier|private
name|ArgumentCaptor
argument_list|<
name|Event
argument_list|>
name|eventCaptor
decl_stmt|;
DECL|field|policy
specifier|private
name|CheckpointAMPreemptionPolicy
name|policy
decl_stmt|;
DECL|field|id
specifier|private
name|JVMId
name|id
decl_stmt|;
DECL|field|wid
specifier|private
name|WrappedJvmID
name|wid
decl_stmt|;
DECL|field|attemptID
specifier|private
name|TaskAttemptID
name|attemptID
decl_stmt|;
DECL|field|attemptId
specifier|private
name|TaskAttemptId
name|attemptId
decl_stmt|;
DECL|field|firstReduceStatus
specifier|private
name|ReduceTaskStatus
name|firstReduceStatus
decl_stmt|;
DECL|field|secondReduceStatus
specifier|private
name|ReduceTaskStatus
name|secondReduceStatus
decl_stmt|;
DECL|field|thirdReduceStatus
specifier|private
name|ReduceTaskStatus
name|thirdReduceStatus
decl_stmt|;
DECL|field|listener
specifier|private
name|MockTaskAttemptListenerImpl
name|listener
decl_stmt|;
DECL|class|MockTaskAttemptListenerImpl
specifier|public
specifier|static
class|class
name|MockTaskAttemptListenerImpl
extends|extends
name|TaskAttemptListenerImpl
block|{
DECL|method|MockTaskAttemptListenerImpl (AppContext context, JobTokenSecretManager jobTokenSecretManager, RMHeartbeatHandler rmHeartbeatHandler, AMPreemptionPolicy policy)
specifier|public
name|MockTaskAttemptListenerImpl
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|JobTokenSecretManager
name|jobTokenSecretManager
parameter_list|,
name|RMHeartbeatHandler
name|rmHeartbeatHandler
parameter_list|,
name|AMPreemptionPolicy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|jobTokenSecretManager
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
DECL|method|MockTaskAttemptListenerImpl (AppContext context, JobTokenSecretManager jobTokenSecretManager, RMHeartbeatHandler rmHeartbeatHandler, TaskHeartbeatHandler hbHandler, AMPreemptionPolicy policy)
specifier|public
name|MockTaskAttemptListenerImpl
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|JobTokenSecretManager
name|jobTokenSecretManager
parameter_list|,
name|RMHeartbeatHandler
name|rmHeartbeatHandler
parameter_list|,
name|TaskHeartbeatHandler
name|hbHandler
parameter_list|,
name|AMPreemptionPolicy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|jobTokenSecretManager
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerHeartbeatHandler (Configuration conf)
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|//Empty
block|}
annotation|@
name|Override
DECL|method|startRpcServer ()
specifier|protected
name|void
name|startRpcServer
parameter_list|()
block|{
comment|//Empty
block|}
annotation|@
name|Override
DECL|method|stopRpcServer ()
specifier|protected
name|void
name|stopRpcServer
parameter_list|()
block|{
comment|//Empty
block|}
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|close
argument_list|()
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetTask ()
specifier|public
name|void
name|testGetTask
parameter_list|()
throws|throws
name|IOException
block|{
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Verify ask before registration.
comment|//The JVM ID has not been registered yet so we should kill it.
name|JvmContext
name|context
init|=
operator|new
name|JvmContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|jvmId
operator|=
name|id
expr_stmt|;
name|JvmTask
name|result
init|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
comment|// Verify ask after registration but before launch.
comment|// Don't kill, should be null.
comment|//Now put a task with the ID
name|listener
operator|.
name|registerPendingTask
argument_list|(
name|task
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Unregister for more testing.
name|listener
operator|.
name|unregister
argument_list|(
name|attemptId
argument_list|,
name|wid
argument_list|)
expr_stmt|;
comment|// Verify ask after registration and launch
comment|//Now put a task with the ID
name|listener
operator|.
name|registerPendingTask
argument_list|(
name|task
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|listener
operator|.
name|registerLaunchedTask
argument_list|(
name|attemptId
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|hbHandler
argument_list|)
operator|.
name|register
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
comment|// Don't unregister yet for more testing.
comment|//Verify that if we call it again a second time we are told to die.
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
name|listener
operator|.
name|unregister
argument_list|(
name|attemptId
argument_list|,
name|wid
argument_list|)
expr_stmt|;
comment|// Verify after unregistration.
name|result
operator|=
name|listener
operator|.
name|getTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|shouldDie
argument_list|)
expr_stmt|;
comment|// test JVMID
name|JVMId
name|jvmid
init|=
name|JVMId
operator|.
name|forName
argument_list|(
literal|"jvm_001_002_m_004"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jvmid
argument_list|)
expr_stmt|;
try|try
block|{
name|JVMId
operator|.
name|forName
argument_list|(
literal|"jvm_001_002_m_004_006"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"TaskId string : jvm_001_002_m_004_006 is not properly formed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testJVMId ()
specifier|public
name|void
name|testJVMId
parameter_list|()
block|{
name|JVMId
name|jvmid
init|=
operator|new
name|JVMId
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JVMId
name|jvmid1
init|=
name|JVMId
operator|.
name|forName
argument_list|(
literal|"jvm_test_0001_m_000002"
argument_list|)
decl_stmt|;
comment|// test compare methot should be the same
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|jvmid
operator|.
name|compareTo
argument_list|(
name|jvmid1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetMapCompletionEvents ()
specifier|public
name|void
name|testGetMapCompletionEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptCompletionEvent
index|[]
name|empty
init|=
block|{}
decl_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|taskEvents
init|=
block|{
name|createTce
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|)
block|,
name|createTce
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|)
block|,
name|createTce
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|)
block|,
name|createTce
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|)
block|}
decl_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|mapEvents
init|=
block|{
name|taskEvents
index|[
literal|0
index|]
block|,
name|taskEvents
index|[
literal|2
index|]
block|}
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskEvents
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|taskEvents
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|taskEvents
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|mapEvents
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|mapEvents
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getMapAttemptCompletionEvents
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|configureMocks
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getJob
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJob
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|MockTaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|policy
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobID
name|jid
init|=
operator|new
name|JobID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|MapTaskCompletionEventsUpdate
name|update
init|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|tid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
operator|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
operator|=
name|listener
operator|.
name|getMapCompletionEvents
argument_list|(
name|jid
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|update
operator|.
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createTce (int eventId, boolean isMap, TaskAttemptCompletionEventStatus status)
specifier|private
specifier|static
name|TaskAttemptCompletionEvent
name|createTce
parameter_list|(
name|int
name|eventId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|TaskAttemptCompletionEventStatus
name|status
parameter_list|)
block|{
name|JobId
name|jid
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskId
name|tid
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jid
argument_list|,
literal|0
argument_list|,
name|isMap
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
operator|.
name|MAP
else|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TaskAttemptCompletionEvent
name|tce
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptCompletionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|tce
operator|.
name|setEventId
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|tce
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCommitWindow ()
specifier|public
name|void
name|testCommitWindow
parameter_list|()
throws|throws
name|IOException
block|{
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|configureMocks
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|canCommit
argument_list|(
name|any
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTask
argument_list|(
name|any
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTask
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getJob
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJob
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|MockTaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|policy
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify commit not allowed when RM heartbeat has not occurred recently
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|canCommit
init|=
name|listener
operator|.
name|canCommit
argument_list|(
name|tid
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|canCommit
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTask
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|canCommit
argument_list|(
name|any
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify commit allowed when RM heartbeat is recent
name|when
argument_list|(
name|rmHeartbeatHandler
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|canCommit
operator|=
name|listener
operator|.
name|canCommit
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canCommit
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTask
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|canCommit
argument_list|(
name|any
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckpointIDTracking ()
specifier|public
name|void
name|testCheckpointIDTracking
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|configureMocks
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|canCommit
argument_list|(
name|any
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTask
argument_list|(
name|any
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTask
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getJob
argument_list|(
name|any
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJob
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|MockTaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|policy
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|registerHeartbeatHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|taskHeartbeatHandler
operator|=
name|hbHandler
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|TASK_PREEMPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//conf.setBoolean("preemption.reduce", true);
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|TaskAttemptID
name|tid
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partialOut
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|partialOut
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/prev1"
argument_list|)
argument_list|)
expr_stmt|;
name|partialOut
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/prev2"
argument_list|)
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|mock
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|long
name|CBYTES
init|=
literal|64L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|long
name|CTIME
init|=
literal|4344L
decl_stmt|;
specifier|final
name|Path
name|CLOC
init|=
operator|new
name|Path
argument_list|(
literal|"/test/1"
argument_list|)
decl_stmt|;
name|Counter
name|cbytes
init|=
name|mock
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cbytes
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CBYTES
argument_list|)
expr_stmt|;
name|Counter
name|ctime
init|=
name|mock
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctime
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CTIME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|eq
argument_list|(
name|EnumCounter
operator|.
name|CHECKPOINT_BYTES
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cbytes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|eq
argument_list|(
name|EnumCounter
operator|.
name|CHECKPOINT_MS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctime
argument_list|)
expr_stmt|;
comment|// propagating a taskstatus that contains a checkpoint id
name|TaskCheckpointID
name|incid
init|=
operator|new
name|TaskCheckpointID
argument_list|(
operator|new
name|FSCheckpointID
argument_list|(
name|CLOC
argument_list|)
argument_list|,
name|partialOut
argument_list|,
name|counters
argument_list|)
decl_stmt|;
name|listener
operator|.
name|setCheckpointID
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
operator|.
name|downgrade
argument_list|(
name|tid
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|,
name|incid
argument_list|)
expr_stmt|;
comment|// and try to get it back
name|CheckpointID
name|outcid
init|=
name|listener
operator|.
name|getCheckpointID
argument_list|(
name|tid
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskCheckpointID
name|tcid
init|=
operator|(
name|TaskCheckpointID
operator|)
name|outcid
decl_stmt|;
name|assertEquals
argument_list|(
name|CBYTES
argument_list|,
name|tcid
operator|.
name|getCheckpointBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CTIME
argument_list|,
name|tcid
operator|.
name|getCheckpointTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partialOut
operator|.
name|containsAll
argument_list|(
name|tcid
operator|.
name|getPartialCommittedOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tcid
operator|.
name|getPartialCommittedOutput
argument_list|()
operator|.
name|containsAll
argument_list|(
name|partialOut
argument_list|)
argument_list|)
expr_stmt|;
comment|//assert it worked
assert|assert
name|outcid
operator|==
name|incid
assert|;
block|}
annotation|@
name|Test
DECL|method|testStatusUpdateProgress ()
specifier|public
name|void
name|testStatusUpdateProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|hbHandler
argument_list|)
operator|.
name|register
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
comment|// make sure a ping doesn't report progress
name|AMFeedback
name|feedback
init|=
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|feedback
operator|.
name|getTaskFound
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|hbHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|progressing
argument_list|(
name|eq
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure a status update does report progress
name|MapTaskStatus
name|mockStatus
init|=
operator|new
name|MapTaskStatus
argument_list|(
name|attemptID
argument_list|,
literal|0.0f
argument_list|,
literal|1
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|"RUNNING"
argument_list|,
literal|""
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|MAP
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
decl_stmt|;
name|feedback
operator|=
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|mockStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|feedback
operator|.
name|getTaskFound
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|hbHandler
argument_list|)
operator|.
name|progressing
argument_list|(
name|eq
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleStatusUpdate ()
specifier|public
name|void
name|testSingleStatusUpdate
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|firstReduceStatus
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ea
argument_list|)
operator|.
name|handle
argument_list|(
name|eventCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptStatusUpdateEvent
name|updateEvent
init|=
operator|(
name|TaskAttemptStatusUpdateEvent
operator|)
name|eventCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TaskAttemptStatus
name|status
init|=
name|updateEvent
operator|.
name|getTaskAttemptStatusRef
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|fetchFailedMaps
operator|.
name|contains
argument_list|(
name|TASKATTEMPTID1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|fetchFailedMaps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|SHUFFLE
argument_list|,
name|status
operator|.
name|phase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatusUpdateEventCoalescing ()
specifier|public
name|void
name|testStatusUpdateEventCoalescing
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|firstReduceStatus
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|secondReduceStatus
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ea
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|Event
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|AtomicReference
argument_list|<
name|TaskAttemptStatus
argument_list|>
argument_list|>
name|attemptIdToStatus
init|=
name|listener
operator|.
name|getAttemptIdToStatus
argument_list|()
decl_stmt|;
name|TaskAttemptStatus
name|status
init|=
name|attemptIdToStatus
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|fetchFailedMaps
operator|.
name|contains
argument_list|(
name|TASKATTEMPTID1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|fetchFailedMaps
operator|.
name|contains
argument_list|(
name|TASKATTEMPTID2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|fetchFailedMaps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|SORT
argument_list|,
name|status
operator|.
name|phase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoalescedStatusUpdatesCleared ()
specifier|public
name|void
name|testCoalescedStatusUpdatesCleared
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// First two events are coalesced, the third is not
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|firstReduceStatus
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|secondReduceStatus
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|AtomicReference
argument_list|<
name|TaskAttemptStatus
argument_list|>
argument_list|>
name|attemptIdToStatus
init|=
name|listener
operator|.
name|getAttemptIdToStatus
argument_list|()
decl_stmt|;
name|attemptIdToStatus
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|thirdReduceStatus
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ea
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|eventCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptStatusUpdateEvent
name|updateEvent
init|=
operator|(
name|TaskAttemptStatusUpdateEvent
operator|)
name|eventCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TaskAttemptStatus
name|status
init|=
name|updateEvent
operator|.
name|getTaskAttemptStatusRef
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|status
operator|.
name|fetchFailedMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|REDUCE
argument_list|,
name|status
operator|.
name|phase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testStatusUpdateFromUnregisteredTask ()
specifier|public
name|void
name|testStatusUpdateFromUnregisteredTask
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|configureMocks
argument_list|()
expr_stmt|;
name|startListener
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|listener
operator|.
name|statusUpdate
argument_list|(
name|attemptID
argument_list|,
name|firstReduceStatus
argument_list|)
expr_stmt|;
block|}
DECL|method|configureMocks ()
specifier|private
name|void
name|configureMocks
parameter_list|()
block|{
name|firstReduceStatus
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|attemptID
argument_list|,
literal|0.0f
argument_list|,
literal|1
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|"RUNNING"
argument_list|,
literal|""
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|SHUFFLE
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|firstReduceStatus
operator|.
name|addFetchFailedMap
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|ATTEMPT1_ID
argument_list|)
argument_list|)
expr_stmt|;
name|secondReduceStatus
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|attemptID
argument_list|,
literal|0.0f
argument_list|,
literal|1
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|"RUNNING"
argument_list|,
literal|""
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|SORT
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|secondReduceStatus
operator|.
name|addFetchFailedMap
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|ATTEMPT2_ID
argument_list|)
argument_list|)
expr_stmt|;
name|thirdReduceStatus
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|attemptID
argument_list|,
literal|0.0f
argument_list|,
literal|1
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|"RUNNING"
argument_list|,
literal|""
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|REDUCE
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ea
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appCtx
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ea
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|CheckpointAMPreemptionPolicy
argument_list|()
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|appCtx
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|MockTaskAttemptListenerImpl
argument_list|(
name|appCtx
argument_list|,
name|secret
argument_list|,
name|rmHeartbeatHandler
argument_list|,
name|hbHandler
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|id
operator|=
operator|new
name|JVMId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|wid
operator|=
operator|new
name|WrappedJvmID
argument_list|(
name|id
operator|.
name|getJobId
argument_list|()
argument_list|,
name|id
operator|.
name|isMap
argument_list|,
name|id
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptID
operator|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|attemptId
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
DECL|method|startListener (boolean registerTask)
specifier|private
name|void
name|startListener
parameter_list|(
name|boolean
name|registerTask
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|registerTask
condition|)
block|{
name|listener
operator|.
name|registerPendingTask
argument_list|(
name|task
argument_list|,
name|wid
argument_list|)
expr_stmt|;
name|listener
operator|.
name|registerLaunchedTask
argument_list|(
name|attemptId
argument_list|,
name|wid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

