begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestResourceCalculatorUtils
specifier|public
class|class
name|TestResourceCalculatorUtils
block|{
annotation|@
name|Test
DECL|method|testComputeAvailableContainers ()
specifier|public
name|void
name|testComputeAvailableContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|Resource
name|clusterAvailableResources
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|81920
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|Resource
name|nonZeroResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|expectedNumberOfContainersForMemory
init|=
literal|80
decl_stmt|;
name|int
name|expectedNumberOfContainersForCPU
init|=
literal|20
decl_stmt|;
name|verifyDifferentResourceTypes
argument_list|(
name|clusterAvailableResources
argument_list|,
name|nonZeroResource
argument_list|,
name|expectedNumberOfContainersForMemory
argument_list|,
name|expectedNumberOfContainersForCPU
argument_list|)
expr_stmt|;
name|Resource
name|zeroMemoryResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|nonZeroResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
decl_stmt|;
name|verifyDifferentResourceTypes
argument_list|(
name|clusterAvailableResources
argument_list|,
name|zeroMemoryResource
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|expectedNumberOfContainersForCPU
argument_list|)
expr_stmt|;
name|Resource
name|zeroCpuResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|nonZeroResource
operator|.
name|getMemory
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|verifyDifferentResourceTypes
argument_list|(
name|clusterAvailableResources
argument_list|,
name|zeroCpuResource
argument_list|,
name|expectedNumberOfContainersForMemory
argument_list|,
name|expectedNumberOfContainersForMemory
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDifferentResourceTypes (Resource clusterAvailableResources, Resource nonZeroResource, int expectedNumberOfContainersForMemoryOnly, int expectedNumberOfContainersOverall)
specifier|private
name|void
name|verifyDifferentResourceTypes
parameter_list|(
name|Resource
name|clusterAvailableResources
parameter_list|,
name|Resource
name|nonZeroResource
parameter_list|,
name|int
name|expectedNumberOfContainersForMemoryOnly
parameter_list|,
name|int
name|expectedNumberOfContainersOverall
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of available containers for Memory"
argument_list|,
name|expectedNumberOfContainersForMemoryOnly
argument_list|,
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|clusterAvailableResources
argument_list|,
name|nonZeroResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of available containers overall"
argument_list|,
name|expectedNumberOfContainersOverall
argument_list|,
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|clusterAvailableResources
argument_list|,
name|nonZeroResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|CPU
argument_list|,
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

