begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyFloat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRAppMaster
operator|.
name|RunningAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttemptStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobUpdatedNodesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|TaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|AMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|NoopAMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|CollectorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineV2Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|security
operator|.
name|TimelineV2DelegationTokenSecretManagerService
operator|.
name|TimelineV2DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestRMContainerAllocator
specifier|public
class|class
name|TestRMContainerAllocator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|MyContainerAllocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MyContainerAllocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// make each test create a fresh user to avoid leaking tokens between tests
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple ()
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testSimple"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|,
name|event3
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// check that the assigned container requests are cancelled
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapNodeLocality ()
specifier|public
name|void
name|testMapNodeLocality
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test checks that ordering of allocated containers list from the RM does
comment|// not affect the map->container assignment done by the AM. If there is a
comment|// node local container available for a map then it should be assigned to
comment|// that container and not a rack-local container that happened to be seen
comment|// earlier in the allocated containers list from the RM.
comment|// Regression test for MAPREDUCE-4893
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testMapNodeLocality"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|3072
argument_list|)
decl_stmt|;
comment|// can assign 2 maps
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
comment|// wont heartbeat on node local node
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|1536
argument_list|)
decl_stmt|;
comment|// assign 1 map
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container requests for maps
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
comment|// Node heartbeat from rack-local first. This makes node h3 the first in the
comment|// list of allocated containers but it should not be assigned to task1.
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat from node-local next. This allocates 2 node local
comment|// containers for task1 and task2. These should be matched with those tasks.
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|,
name|event3
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove the rack-local assignment that should have happened for task3
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|event
range|:
name|assigned
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|equals
argument_list|(
name|event3
operator|.
name|getAttemptID
argument_list|()
argument_list|)
condition|)
block|{
name|assigned
operator|.
name|remove
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"h3"
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|}
argument_list|,
name|assigned
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResource ()
specifier|public
name|void
name|testResource
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testResource"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testReducerRampdownDiagnostics ()
specifier|public
name|void
name|testReducerRampdownDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running tesReducerRampdownDiagnostics"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|String
name|host
init|=
literal|"host1"
decl_stmt|;
specifier|final
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:1234"
argument_list|,
name|host
argument_list|)
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container request
specifier|final
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[]
block|{
name|host
block|}
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|locations
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
control|)
block|{
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|i
operator|+=
name|allocator
operator|.
name|schedule
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|sendRequest
argument_list|(
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|locations
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|killEventMessage
init|=
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No reducer rampDown preemption message"
argument_list|,
name|killEventMessage
operator|.
name|contains
argument_list|(
name|RMContainerAllocator
operator|.
name|RAMPDOWN_DIAGNOSTIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testPreemptReducers ()
specifier|public
name|void
name|testPreemptReducers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testPreemptReducers"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setMapResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|setReduceResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerAllocator
operator|.
name|AssignedRequests
name|assignedRequests
init|=
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
decl_stmt|;
name|RMContainerAllocator
operator|.
name|ScheduledRequests
name|scheduledRequests
init|=
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
decl_stmt|;
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduledRequests
operator|.
name|maps
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|RMContainerRequestor
operator|.
name|ContainerRequest
argument_list|(
name|event1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|reduces
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|preemptReducesIfNeeded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The reducer is not preempted"
argument_list|,
literal|1
argument_list|,
name|assignedRequests
operator|.
name|preemptionWaitingReduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNonAggressivelyPreemptReducers ()
specifier|public
name|void
name|testNonAggressivelyPreemptReducers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testNonAggressivelyPreemptReducers"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|preemptThreshold
init|=
literal|2
decl_stmt|;
comment|//sec
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_PREEMPT_DELAY_SEC
argument_list|,
name|preemptThreshold
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setMapResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|setReduceResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerAllocator
operator|.
name|AssignedRequests
name|assignedRequests
init|=
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
decl_stmt|;
name|RMContainerAllocator
operator|.
name|ScheduledRequests
name|scheduledRequests
init|=
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
decl_stmt|;
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduledRequests
operator|.
name|maps
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|RMContainerRequestor
operator|.
name|ContainerRequest
argument_list|(
name|event1
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|reduces
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|preemptReducesIfNeeded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The reducer is aggressively preeempted"
argument_list|,
literal|0
argument_list|,
name|assignedRequests
operator|.
name|preemptionWaitingReduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|preemptThreshold
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|preemptReducesIfNeeded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The reducer is not preeempted"
argument_list|,
literal|1
argument_list|,
name|assignedRequests
operator|.
name|preemptionWaitingReduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testUnconditionalPreemptReducers ()
specifier|public
name|void
name|testUnconditionalPreemptReducers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testForcePreemptReducers"
argument_list|)
expr_stmt|;
name|int
name|forcePreemptThresholdSecs
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_PREEMPT_DELAY_SEC
argument_list|,
literal|2
operator|*
name|forcePreemptThresholdSecs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC
argument_list|,
name|forcePreemptThresholdSecs
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setMapResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|setReduceResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerAllocator
operator|.
name|AssignedRequests
name|assignedRequests
init|=
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
decl_stmt|;
name|RMContainerAllocator
operator|.
name|ScheduledRequests
name|scheduledRequests
init|=
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
decl_stmt|;
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduledRequests
operator|.
name|maps
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|RMContainerRequestor
operator|.
name|ContainerRequest
argument_list|(
name|event1
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|reduces
operator|.
name|put
argument_list|(
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|preemptReducesIfNeeded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The reducer is preeempted too soon"
argument_list|,
literal|0
argument_list|,
name|assignedRequests
operator|.
name|preemptionWaitingReduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|1000
operator|*
name|forcePreemptThresholdSecs
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|preemptReducesIfNeeded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The reducer is not preeempted"
argument_list|,
literal|1
argument_list|,
name|assignedRequests
operator|.
name|preemptionWaitingReduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testExcessReduceContainerAssign ()
specifier|public
name|void
name|testExcessReduceContainerAssign
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
specifier|final
name|MyResourceManager2
name|rm
init|=
operator|new
name|MyResourceManager2
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|String
name|host
init|=
literal|"host1"
decl_stmt|;
specifier|final
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:1234"
argument_list|,
name|host
argument_list|)
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// request to allocate two reduce priority containers
specifier|final
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[]
block|{
name|host
block|}
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
name|locations
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|scheduleAllReduces
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|makeRemoteRequest
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|locations
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|assignedContainer
decl_stmt|;
for|for
control|(
name|assignedContainer
operator|=
literal|0
init|;
name|assignedContainer
operator|<
literal|1
condition|;
control|)
block|{
name|assignedContainer
operator|+=
name|allocator
operator|.
name|schedule
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
block|}
comment|// only 1 allocated container should be assigned
name|Assert
operator|.
name|assertEquals
argument_list|(
name|assignedContainer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapReduceAllocationWithNodeLabelExpression ()
specifier|public
name|void
name|testMapReduceAllocationWithNodeLabelExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testMapReduceAllocationWithNodeLabelExpression"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/*      * final int MAP_LIMIT = 3; final int REDUCE_LIMIT = 1;      * conf.setInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT, MAP_LIMIT);      * conf.setInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT, REDUCE_LIMIT);      */
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_NODE_LABEL_EXP
argument_list|,
literal|"MapNodes"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_NODE_LABEL_EXP
argument_list|,
literal|"ReduceNodes"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MockScheduler
name|mockScheduler
init|=
operator|new
name|MockScheduler
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
block|}
decl_stmt|;
comment|// create some map requests
name|ContainerRequestEvent
name|reqMapEvents
decl_stmt|;
name|reqMapEvents
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"map"
block|}
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqMapEvents
argument_list|)
argument_list|)
expr_stmt|;
comment|// create some reduce requests
name|ContainerRequestEvent
name|reqReduceEvents
decl_stmt|;
name|reqReduceEvents
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"reduce"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqReduceEvents
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// verify all of the host-specific asks were sent plus one for the
comment|// default rack and one for the ANY request
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify ResourceRequest sent for MAP have appropriate node
comment|// label expression as per the configuration
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// assign a map task and verify we do not ask for any more maps
name|ContainerId
name|cid0
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"map"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// default rack and one for the ANY request
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateLabelsRequests
argument_list|(
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// complete the map task and verify that we ask for one more
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|validateLabelsRequests (ResourceRequest resourceRequest, boolean isReduce)
specifier|private
name|void
name|validateLabelsRequests
parameter_list|(
name|ResourceRequest
name|resourceRequest
parameter_list|,
name|boolean
name|isReduce
parameter_list|)
block|{
switch|switch
condition|(
name|resourceRequest
operator|.
name|getResourceName
argument_list|()
condition|)
block|{
case|case
literal|"map"
case|:
case|case
literal|"reduce"
case|:
case|case
name|NetworkTopology
operator|.
name|DEFAULT_RACK
case|:
name|Assert
operator|.
name|assertNull
argument_list|(
name|resourceRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"*"
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|isReduce
condition|?
literal|"ReduceNodes"
else|:
literal|"MapNodes"
argument_list|,
name|resourceRequest
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid resource location "
operator|+
name|resourceRequest
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateCollectorInfo ()
specifier|public
name|void
name|testUpdateCollectorInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testUpdateCollectorInfo"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|localAddr
init|=
literal|"localhost:1234"
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// Generate a timeline delegation token.
name|TimelineDelegationTokenIdentifier
name|ident
init|=
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ident
operator|.
name|setSequenceNumber
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|collectorToken
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|(
name|ident
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
operator|new
name|Text
argument_list|(
name|localAddr
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|token
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
operator|.
name|newInstance
argument_list|(
name|collectorToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|collectorToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|collectorToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|collectorToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|CollectorInfo
name|collectorInfo
init|=
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
name|localAddr
argument_list|,
name|token
argument_list|)
decl_stmt|;
comment|// Mock scheduler to server Allocate request.
specifier|final
name|MockSchedulerForTimelineCollector
name|mockScheduler
init|=
operator|new
name|MockSchedulerForTimelineCollector
argument_list|(
name|collectorInfo
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|attemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
block|}
decl_stmt|;
comment|// Initially UGI should have no tokens.
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineV2Client
name|client
init|=
name|spy
argument_list|(
name|TimelineV2Client
operator|.
name|createTimelineClient
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
operator|(
operator|(
name|RunningAppContext
operator|)
name|allocator
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|getTimelineV2Client
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// Send allocate request to RM and fetch collector address and token.
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|collectorInfo
argument_list|)
expr_stmt|;
comment|// Verify if token has been updated in UGI.
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectorToken
operator|.
name|decodeIdentifier
argument_list|()
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate new collector token, send allocate request to RM and fetch the
comment|// new token.
name|ident
operator|.
name|setSequenceNumber
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|collectorToken1
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|(
name|ident
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
operator|new
name|Text
argument_list|(
name|localAddr
argument_list|)
argument_list|)
decl_stmt|;
name|token
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
operator|.
name|newInstance
argument_list|(
name|collectorToken1
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|collectorToken1
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|collectorToken1
operator|.
name|getPassword
argument_list|()
argument_list|,
name|collectorToken1
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectorInfo
operator|=
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
name|localAddr
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|mockScheduler
operator|.
name|updateCollectorInfo
argument_list|(
name|collectorInfo
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|collectorInfo
argument_list|)
expr_stmt|;
comment|// Verify if new token has been updated in UGI.
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectorToken1
operator|.
name|decodeIdentifier
argument_list|()
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapReduceScheduling ()
specifier|public
name|void
name|testMapReduceScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testMapReduceScheduling"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container request
comment|// send MAP request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send REDUCE request
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|3000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// send MAP request
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event3
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// validate that no container is assigned to h1 as it doesn't have 2048
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Assigned count not correct"
argument_list|,
literal|"h1"
operator|.
name|equals
argument_list|(
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyResourceManager
specifier|private
specifier|static
class|class
name|MyResourceManager
extends|extends
name|MockRM
block|{
DECL|field|fakeClusterTimeStamp
specifier|private
specifier|static
name|long
name|fakeClusterTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|MyResourceManager (Configuration conf)
specifier|public
name|MyResourceManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|MyResourceManager (Configuration conf, RMStateStore store)
specifier|public
name|MyResourceManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
comment|// Ensure that the application attempt IDs for all the tests are the same
comment|// The application attempt IDs will be used as the login user names
name|MyResourceManager
operator|.
name|setClusterTimeStamp
argument_list|(
name|fakeClusterTimeStamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSchedulerEventDispatcher ()
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
comment|// Dispatch inline for test sanity
return|return
operator|new
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createScheduler ()
specifier|protected
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
return|return
operator|new
name|MyFifoScheduler
argument_list|(
name|this
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getMyFifoScheduler ()
name|MyFifoScheduler
name|getMyFifoScheduler
parameter_list|()
block|{
return|return
operator|(
name|MyFifoScheduler
operator|)
name|scheduler
return|;
block|}
block|}
DECL|class|MyResourceManager2
specifier|private
specifier|static
class|class
name|MyResourceManager2
extends|extends
name|MyResourceManager
block|{
DECL|method|MyResourceManager2 (Configuration conf)
specifier|public
name|MyResourceManager2
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createScheduler ()
specifier|protected
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
return|return
operator|new
name|ExcessReduceContainerAllocateScheduler
argument_list|(
name|this
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReportedAppProgress ()
specifier|public
name|void
name|testReportedAppProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testReportedAppProgress"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|rmDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|21504
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MRApp
name|mrApp
init|=
operator|new
name|MRApp
argument_list|(
name|appAttemptId
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|appAttemptId
argument_list|,
name|context
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DrainDispatcher
name|amDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|mrApp
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|(
name|MyContainerAllocator
operator|)
name|mrApp
operator|.
name|getContainerAllocator
argument_list|()
decl_stmt|;
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait till all map-attempts request for containers
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|TaskAttemptImpl
operator|)
name|t
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
block|}
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Wait for all map-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 1 map.
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.095f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.095f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 7 more so that map-progress is 80%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.41f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.41f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off the 2 remaining maps
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Wait for all reduce-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finish off 2 reduces
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off the remaining 8 reduces.
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Remaining is JobCleanup
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
DECL|method|finishNextNTasks (DrainDispatcher rmDispatcher, MockNM node, MRApp mrApp, Iterator<Task> it, int nextN)
specifier|private
name|void
name|finishNextNTasks
parameter_list|(
name|DrainDispatcher
name|rmDispatcher
parameter_list|,
name|MockNM
name|node
parameter_list|,
name|MRApp
name|mrApp
parameter_list|,
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
parameter_list|,
name|int
name|nextN
parameter_list|)
throws|throws
name|Exception
block|{
name|Task
name|task
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nextN
condition|;
name|i
operator|++
control|)
block|{
name|task
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|finishTask
argument_list|(
name|rmDispatcher
argument_list|,
name|node
argument_list|,
name|mrApp
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishTask (DrainDispatcher rmDispatcher, MockNM node, MRApp mrApp, Task task)
specifier|private
name|void
name|finishTask
parameter_list|(
name|DrainDispatcher
name|rmDispatcher
parameter_list|,
name|MockNM
name|node
parameter_list|,
name|MRApp
name|mrApp
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|contStatus
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|contStatus
operator|.
name|add
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|attempt
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|statusUpdate
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusUpdate
operator|.
name|put
argument_list|(
name|mrApp
operator|.
name|getAppID
argument_list|()
argument_list|,
name|contStatus
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
name|statusUpdate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|waitForState
argument_list|(
name|task
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReportedAppProgressWithOnlyMaps ()
specifier|public
name|void
name|testReportedAppProgressWithOnlyMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testReportedAppProgressWithOnlyMaps"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|rmDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|11264
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MRApp
name|mrApp
init|=
operator|new
name|MRApp
argument_list|(
name|appAttemptId
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|appAttemptId
argument_list|,
name|context
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DrainDispatcher
name|amDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|mrApp
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|(
name|MyContainerAllocator
operator|)
name|mrApp
operator|.
name|getContainerAllocator
argument_list|()
decl_stmt|;
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|JobImpl
operator|)
name|job
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait till all map-attempts request for containers
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|TaskAttemptImpl
operator|)
name|t
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Wait for all map-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Finish off 1 map so that map-progress is 10%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.14f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.14f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 5 more map so that map-progress is 60%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off remaining map so that map-progress is 100%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdatedNodes ()
specifier|public
name|void
name|testUpdatedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the map container request
name|ContainerRequestEvent
name|event
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|event
operator|.
name|getAttemptID
argument_list|()
decl_stmt|;
name|TaskAttempt
name|mockTaskAttempt
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskAttempt
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|getAttempt
argument_list|(
name|attemptId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTask
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTask
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdatedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// get the assignment
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|assigned
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// no updated nodes reported
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark nodes bad
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// schedule response returns updated nodes
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// updated nodes are reported
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdatedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no updated nodes reported
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlackListedNodes ()
specifier|public
name|void
name|testBlackListedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testBlackListedNodes"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|ContainerFailedEvent
name|f2
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f2
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
comment|// mark h1/h2 as bad nodes
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No of assignments must be 3"
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// validate that all containers are assigned to h3
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Assigned container host not correct"
argument_list|,
literal|"h3"
operator|.
name|equals
argument_list|(
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIgnoreBlacklisting ()
specifier|public
name|void
name|testIgnoreBlacklisting
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testIgnoreBlacklisting"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
index|[]
name|nodeManagers
init|=
operator|new
name|MockNM
index|[
literal|10
index|]
decl_stmt|;
name|int
name|nmNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
literal|null
decl_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
literal|0
index|]
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Known=1, blacklisted=0, ignore should be false - assign first container
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing container _1 on H1 (Node should be blacklisted and"
operator|+
literal|" ignore blacklisting enabled"
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
comment|// Test single node.
comment|// Known=1, blacklisted=1, ignore should be true - assign 0
comment|// Because makeRemoteRequest will not be aware of it until next call
comment|// The current call will send blacklisted node "h1" to RM
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=1, blacklisted=1, ignore should be true - assign 1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
comment|// Known=2, blacklisted=1, ignore should be true - assign 1 anyway.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
name|nodeManagers
index|[
literal|1
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
comment|// Known=3, blacklisted=1, ignore should be true - assign 1 anyway.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=3, blacklisted=1, ignore should be true - assign 1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|5
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
comment|// Known=4, blacklisted=1, ignore should be false - assign 1 anyway
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|6
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h4"
block|}
argument_list|,
name|nodeManagers
index|[
literal|3
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test blacklisting re-enabled.
comment|// Known=4, blacklisted=1, ignore should be false - no assignment on h1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// RMContainerRequestor would have created a replacement request.
comment|// Blacklist h2
name|ContainerFailedEvent
name|f2
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f2
argument_list|)
expr_stmt|;
comment|// Test ignore blacklisting re-enabled
comment|// Known=4, blacklisted=2, ignore should be true. Should assign 0
comment|// container for the same reason above.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|8
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=4, blacklisted=2, ignore should be true. Should assign 2
comment|// containers.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|8
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 2"
argument_list|,
literal|2
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=4, blacklisted=2, ignore should be true.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|9
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
name|nodeManagers
index|[
literal|1
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test blacklist while ignore blacklisting enabled
name|ContainerFailedEvent
name|f3
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|"h3"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f3
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
comment|// Known=5, blacklisted=3, ignore should be true.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign on 5 more nodes - to re-enable blacklisting
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|11
operator|+
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
literal|5
operator|+
name|i
argument_list|)
block|}
argument_list|,
name|nodeManagers
index|[
literal|4
operator|+
name|i
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|i
operator|==
literal|4
condition|?
literal|3
else|:
literal|0
operator|)
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test h3 (blacklisted while ignoring blacklisting) is blacklisted.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|allocator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNodeManager (int i, MyResourceManager rm)
specifier|private
name|MockNM
name|registerNodeManager
parameter_list|(
name|int
name|i
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|":1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
return|return
name|nm
return|;
block|}
specifier|private
DECL|method|getContainerOnHost (JobId jobId, int taskAttemptId, int memory, String[] hosts, MockNM mockNM, MyContainerAllocator allocator, int expectedAdditions1, int expectedRemovals1, int expectedAdditions2, int expectedRemovals2, MyResourceManager rm)
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|getContainerOnHost
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|MockNM
name|mockNM
parameter_list|,
name|MyContainerAllocator
name|allocator
parameter_list|,
name|int
name|expectedAdditions1
parameter_list|,
name|int
name|expectedRemovals1
parameter_list|,
name|int
name|expectedAdditions2
parameter_list|,
name|int
name|expectedRemovals2
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerRequestEvent
name|reqEvent
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|memory
argument_list|,
name|hosts
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|reqEvent
argument_list|)
expr_stmt|;
comment|// Send the request to the RM
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
name|expectedAdditions1
argument_list|,
name|expectedRemovals1
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat from the required nodeManager
name|mockNM
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
name|expectedAdditions2
argument_list|,
name|expectedRemovals2
argument_list|,
name|rm
argument_list|)
expr_stmt|;
return|return
name|assigned
return|;
block|}
annotation|@
name|Test
DECL|method|testBlackListedNodesWithSchedulingToThatNode ()
specifier|public
name|void
name|testBlackListedNodesWithSchedulingToThatNode
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testBlackListedNodesWithSchedulingToThatNode"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting 1 Containers _1 on H1"
argument_list|)
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (to send the container requests)"
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"h1 Heartbeat (To actually schedule the containers)"
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing container _1 on H1 (should blacklist the node)"
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
comment|//At this stage, a request should be created for a fast fail map
comment|//Create a FAST_FAIL request for a previously failed map.
name|ContainerRequestEvent
name|event1f
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1f
argument_list|)
expr_stmt|;
comment|//Update the Scheduler with the new requests.
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|//Allocator is aware of prio:5 container, and prio:20 (h1+h3) container.
comment|//RM is only aware of the prio:5 container
name|LOG
operator|.
name|info
argument_list|(
literal|"h1 Heartbeat (To actually schedule the containers)"
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//RMContainerAllocator gets assigned a p:5 on a blacklisted node.
comment|//Send a release for the p:5 container + another request.
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the re-scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Hearbeat from H3 to schedule on this host.
name|LOG
operator|.
name|info
argument_list|(
literal|"h3 Heartbeat (To re-schedule the containers)"
argument_list|)
expr_stmt|;
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the re-scheduled containers for H3)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// For debugging
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|assig
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" assgined to "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" with priority "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 2"
argument_list|,
literal|2
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate that all containers are assigned to h3
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned container "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" host not correct"
argument_list|,
literal|"h3"
argument_list|,
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBlacklistAdditionsAndRemovals ( int expectedAdditions, int expectedRemovals, MyResourceManager rm)
specifier|private
specifier|static
name|void
name|assertBlacklistAdditionsAndRemovals
parameter_list|(
name|int
name|expectedAdditions
parameter_list|,
name|int
name|expectedRemovals
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAdditions
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastBlacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRemovals
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastBlacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAsksAndReleases (int expectedAsk, int expectedRelease, MyResourceManager rm)
specifier|private
specifier|static
name|void
name|assertAsksAndReleases
parameter_list|(
name|int
name|expectedAsk
parameter_list|,
name|int
name|expectedRelease
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAsk
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRelease
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastRelease
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyFifoScheduler
specifier|private
specifier|static
class|class
name|MyFifoScheduler
extends|extends
name|FifoScheduler
block|{
DECL|method|MyFifoScheduler (RMContext rmContext)
specifier|public
name|MyFifoScheduler
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"add application failed with "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
DECL|field|lastAsk
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|lastAsk
init|=
literal|null
decl_stmt|;
DECL|field|lastRelease
name|List
argument_list|<
name|ContainerId
argument_list|>
name|lastRelease
init|=
literal|null
decl_stmt|;
DECL|field|lastBlacklistAdditions
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistAdditions
decl_stmt|;
DECL|field|lastBlacklistRemovals
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistRemovals
decl_stmt|;
DECL|field|forceResourceLimit
name|Resource
name|forceResourceLimit
init|=
literal|null
decl_stmt|;
comment|// override this to copy the objects otherwise FifoScheduler updates the
comment|// numContainers in same objects as kept by RMContainerAllocator
annotation|@
name|Override
DECL|method|allocate ( ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals, ContainerUpdates updateRequests)
specifier|public
specifier|synchronized
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|,
name|ContainerUpdates
name|updateRequests
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|ask
control|)
block|{
name|ResourceRequest
name|reqCopy
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
decl_stmt|;
name|askCopy
operator|.
name|add
argument_list|(
name|reqCopy
argument_list|)
expr_stmt|;
block|}
name|SecurityUtil
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lastAsk
operator|=
name|ask
expr_stmt|;
name|lastRelease
operator|=
name|release
expr_stmt|;
name|lastBlacklistAdditions
operator|=
name|blacklistAdditions
expr_stmt|;
name|lastBlacklistRemovals
operator|=
name|blacklistRemovals
expr_stmt|;
name|Allocation
name|allocation
init|=
name|super
operator|.
name|allocate
argument_list|(
name|applicationAttemptId
argument_list|,
name|askCopy
argument_list|,
name|release
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|,
name|updateRequests
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceResourceLimit
operator|!=
literal|null
condition|)
block|{
comment|// Test wants to force the non-default resource limit
name|allocation
operator|.
name|setResourceLimit
argument_list|(
name|forceResourceLimit
argument_list|)
expr_stmt|;
block|}
return|return
name|allocation
return|;
block|}
DECL|method|forceResourceLimit (Resource resource)
specifier|public
name|void
name|forceResourceLimit
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|forceResourceLimit
operator|=
name|resource
expr_stmt|;
block|}
block|}
DECL|class|ExcessReduceContainerAllocateScheduler
specifier|private
specifier|static
class|class
name|ExcessReduceContainerAllocateScheduler
extends|extends
name|FifoScheduler
block|{
DECL|method|ExcessReduceContainerAllocateScheduler (RMContext rmContext)
specifier|public
name|ExcessReduceContainerAllocateScheduler
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"add application failed with "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate ( ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals, ContainerUpdates updateRequests)
specifier|public
specifier|synchronized
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|,
name|ContainerUpdates
name|updateRequests
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|ask
control|)
block|{
name|ResourceRequest
name|reqCopy
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
decl_stmt|;
name|askCopy
operator|.
name|add
argument_list|(
name|reqCopy
argument_list|)
expr_stmt|;
block|}
name|SecurityUtil
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Allocation
name|normalAlloc
init|=
name|super
operator|.
name|allocate
argument_list|(
name|applicationAttemptId
argument_list|,
name|askCopy
argument_list|,
name|release
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|,
name|updateRequests
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|normalAlloc
operator|.
name|getContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// allocate excess container
name|FiCaSchedulerApp
name|application
init|=
name|super
operator|.
name|getApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|application
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|excessC
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|excessC
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|excessC
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|)
expr_stmt|;
name|Resource
name|mockR
init|=
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockR
operator|.
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2048L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|excessC
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockR
argument_list|)
expr_stmt|;
name|NodeId
name|nId
init|=
name|mock
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nId
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|excessC
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nId
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|excessC
argument_list|)
expr_stmt|;
block|}
name|Allocation
name|excessAlloc
init|=
name|mock
argument_list|(
name|Allocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|excessAlloc
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containers
argument_list|)
expr_stmt|;
return|return
name|excessAlloc
return|;
block|}
block|}
DECL|method|createReq (JobId jobId, int taskAttemptId, int memory, String[] hosts)
specifier|private
name|ContainerRequestEvent
name|createReq
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
return|return
name|createReq
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|memory
argument_list|,
literal|1
argument_list|,
name|hosts
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createReq (JobId jobId, int taskAttemptId, int mem, String[] hosts, boolean earlierFailedAttempt, boolean reduce)
specifier|private
name|ContainerRequestEvent
name|createReq
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|mem
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|boolean
name|earlierFailedAttempt
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
return|return
name|createReq
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|mem
argument_list|,
literal|1
argument_list|,
name|hosts
argument_list|,
name|earlierFailedAttempt
argument_list|,
name|reduce
argument_list|)
return|;
block|}
DECL|method|createReq (JobId jobId, int taskAttemptId, int memory, int vcore, String[] hosts, boolean earlierFailedAttempt, boolean reduce)
specifier|private
name|ContainerRequestEvent
name|createReq
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vcore
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|boolean
name|earlierFailedAttempt
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
name|Resource
name|containerNeed
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vcore
argument_list|)
decl_stmt|;
if|if
condition|(
name|earlierFailedAttempt
condition|)
block|{
return|return
name|ContainerRequestEvent
operator|.
name|createContainerRequestEventForFailedContainer
argument_list|(
name|attemptId
argument_list|,
name|containerNeed
argument_list|)
return|;
block|}
return|return
operator|new
name|ContainerRequestEvent
argument_list|(
name|attemptId
argument_list|,
name|containerNeed
argument_list|,
name|hosts
argument_list|,
operator|new
name|String
index|[]
block|{
name|NetworkTopology
operator|.
name|DEFAULT_RACK
block|}
argument_list|)
return|;
block|}
DECL|method|createFailEvent (JobId jobId, int taskAttemptId, String host, boolean reduce)
specifier|private
name|ContainerFailedEvent
name|createFailEvent
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|String
name|host
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContainerFailedEvent
argument_list|(
name|attemptId
argument_list|,
name|host
argument_list|)
return|;
block|}
DECL|method|createDeallocateEvent (JobId jobId, int taskAttemptId, boolean reduce)
specifier|private
name|ContainerAllocatorEvent
name|createDeallocateEvent
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContainerAllocatorEvent
argument_list|(
name|attemptId
argument_list|,
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_DEALLOCATE
argument_list|)
return|;
block|}
DECL|method|checkAssignments (ContainerRequestEvent[] requests, List<TaskAttemptContainerAssignedEvent> assignments, boolean checkHostMatch)
specifier|private
name|void
name|checkAssignments
parameter_list|(
name|ContainerRequestEvent
index|[]
name|requests
parameter_list|,
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assignments
parameter_list|,
name|boolean
name|checkHostMatch
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Container not assigned"
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned count not correct"
argument_list|,
name|requests
operator|.
name|length
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for uniqueness of containerIDs
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assigned
range|:
name|assignments
control|)
block|{
name|containerIds
operator|.
name|add
argument_list|(
name|assigned
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned containers must be different"
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|,
name|containerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for all assignment
for|for
control|(
name|ContainerRequestEvent
name|req
range|:
name|requests
control|)
block|{
name|TaskAttemptContainerAssignedEvent
name|assigned
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|ass
range|:
name|assignments
control|)
block|{
if|if
condition|(
name|ass
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getAttemptID
argument_list|()
argument_list|)
condition|)
block|{
name|assigned
operator|=
name|ass
expr_stmt|;
break|break;
block|}
block|}
name|checkAssignment
argument_list|(
name|req
argument_list|,
name|assigned
argument_list|,
name|checkHostMatch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkAssignment (ContainerRequestEvent request, TaskAttemptContainerAssignedEvent assigned, boolean checkHostMatch)
specifier|private
name|void
name|checkAssignment
parameter_list|(
name|ContainerRequestEvent
name|request
parameter_list|,
name|TaskAttemptContainerAssignedEvent
name|assigned
parameter_list|,
name|boolean
name|checkHostMatch
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Nothing assigned to attempt "
operator|+
name|request
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"assigned to wrong attempt"
argument_list|,
name|request
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|assigned
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkHostMatch
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not assigned to requested host"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|request
operator|.
name|getHosts
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|assigned
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Mock RMContainerAllocator
comment|// Instead of talking to remote Scheduler,uses the local Scheduler
DECL|class|MyContainerAllocator
specifier|private
specifier|static
class|class
name|MyContainerAllocator
extends|extends
name|RMContainerAllocator
block|{
DECL|field|events
specifier|static
specifier|final
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|taskAttemptKillEvents
specifier|static
specifier|final
name|List
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
name|taskAttemptKillEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobUpdatedNodeEvents
specifier|static
specifier|final
name|List
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
name|jobUpdatedNodeEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobEvents
specifier|static
specifier|final
name|List
argument_list|<
name|JobEvent
argument_list|>
name|jobEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|JobEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rm
specifier|private
name|MyResourceManager
name|rm
decl_stmt|;
DECL|field|isUnregistered
specifier|private
name|boolean
name|isUnregistered
init|=
literal|false
decl_stmt|;
DECL|field|allocateResponse
specifier|private
name|AllocateResponse
name|allocateResponse
decl_stmt|;
DECL|method|createAppContext ( ApplicationAttemptId appAttemptId, Job job)
specifier|private
specifier|static
name|AppContext
name|createAppContext
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|RunningAppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getJob
argument_list|(
name|isA
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ControlledClock
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ClusterInfo
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// Only capture interesting events.
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptContainerAssignedEvent
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|(
name|TaskAttemptContainerAssignedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|taskAttemptKillEvents
operator|.
name|add
argument_list|(
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobUpdatedNodesEvent
condition|)
block|{
name|jobUpdatedNodeEvents
operator|.
name|add
argument_list|(
operator|(
name|JobUpdatedNodesEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobEvent
condition|)
block|{
name|jobEvents
operator|.
name|add
argument_list|(
operator|(
name|JobEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createAppContext ( ApplicationAttemptId appAttemptId, Job job, Clock clock)
specifier|private
specifier|static
name|AppContext
name|createAppContext
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|AppContext
name|context
init|=
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createMockClientService ()
specifier|private
specifier|static
name|ClientService
name|createMockClientService
parameter_list|()
block|{
name|ClientService
name|service
init|=
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:4567"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getHttpPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|890
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|// Use this constructor when using a real job.
DECL|method|MyContainerAllocator (MyResourceManager rm, ApplicationAttemptId appAttemptId, AppContext context)
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|context
argument_list|,
operator|new
name|NoopAMPreemptionPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
comment|// Use this constructor when you are using a mocked job.
DECL|method|MyContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job)
specifier|public
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|)
argument_list|,
operator|new
name|NoopAMPreemptionPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|MyContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job, Clock clock)
specifier|public
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|,
name|clock
argument_list|)
argument_list|,
operator|new
name|NoopAMPreemptionPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSchedulerProxy ()
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|this
operator|.
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register ()
specifier|protected
name|void
name|register
parameter_list|()
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|getContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unregister ()
specifier|protected
name|void
name|unregister
parameter_list|()
block|{
name|isUnregistered
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxContainerCapability ()
specifier|protected
name|Resource
name|getMaxContainerCapability
parameter_list|()
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|sendRequest (ContainerRequestEvent req)
specifier|public
name|void
name|sendRequest
parameter_list|(
name|ContainerRequestEvent
name|req
parameter_list|)
block|{
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|req
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendRequests (List<ContainerRequestEvent> reqs)
specifier|public
name|void
name|sendRequests
parameter_list|(
name|List
argument_list|<
name|ContainerRequestEvent
argument_list|>
name|reqs
parameter_list|)
block|{
for|for
control|(
name|ContainerRequestEvent
name|req
range|:
name|reqs
control|)
block|{
name|super
operator|.
name|handleEvent
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendFailure (ContainerFailedEvent f)
specifier|public
name|void
name|sendFailure
parameter_list|(
name|ContainerFailedEvent
name|f
parameter_list|)
block|{
name|super
operator|.
name|handleEvent
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
DECL|method|sendDeallocate (ContainerAllocatorEvent f)
specifier|public
name|void
name|sendDeallocate
parameter_list|(
name|ContainerAllocatorEvent
name|f
parameter_list|)
block|{
name|super
operator|.
name|handleEvent
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|// API to be used by tests
DECL|method|schedule ()
specifier|public
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|schedule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// before doing heartbeat with RM, drain all the outstanding events to
comment|// ensure all the requests before this heartbeat is to be handled
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|eventQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// run the scheduler
name|super
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTaskAttemptKillEvents ()
specifier|static
name|List
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
name|getTaskAttemptKillEvents
parameter_list|()
block|{
return|return
name|taskAttemptKillEvents
return|;
block|}
DECL|method|getJobUpdatedNodeEvents ()
specifier|static
name|List
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
name|getJobUpdatedNodeEvents
parameter_list|()
block|{
return|return
name|jobUpdatedNodeEvents
return|;
block|}
annotation|@
name|Override
DECL|method|startAllocatorThread ()
specifier|protected
name|void
name|startAllocatorThread
parameter_list|()
block|{
comment|// override to NOT start thread
block|}
annotation|@
name|Override
DECL|method|isApplicationMasterRegistered ()
specifier|protected
name|boolean
name|isApplicationMasterRegistered
parameter_list|()
block|{
return|return
name|super
operator|.
name|isApplicationMasterRegistered
argument_list|()
return|;
block|}
DECL|method|isUnregistered ()
specifier|public
name|boolean
name|isUnregistered
parameter_list|()
block|{
return|return
name|isUnregistered
return|;
block|}
DECL|method|updateSchedulerProxy (MyResourceManager rm)
specifier|public
name|void
name|updateSchedulerProxy
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|scheduler
operator|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeRemoteRequest ()
specifier|protected
name|AllocateResponse
name|makeRemoteRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|allocateResponse
operator|=
name|super
operator|.
name|makeRemoteRequest
argument_list|()
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
block|}
DECL|class|MyContainerAllocator2
specifier|private
specifier|static
class|class
name|MyContainerAllocator2
extends|extends
name|MyContainerAllocator
block|{
DECL|method|MyContainerAllocator2 (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job)
specifier|public
name|MyContainerAllocator2
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeRemoteRequest ()
specifier|protected
name|AllocateResponse
name|makeRemoteRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"for testing"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReduceScheduling ()
specifier|public
name|void
name|testReduceScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|totalMaps
init|=
literal|10
decl_stmt|;
name|int
name|succeededMaps
init|=
literal|1
decl_stmt|;
name|int
name|scheduledMaps
init|=
literal|10
decl_stmt|;
name|int
name|scheduledReduces
init|=
literal|0
decl_stmt|;
name|int
name|assignedMaps
init|=
literal|2
decl_stmt|;
name|int
name|assignedReduces
init|=
literal|0
decl_stmt|;
name|Resource
name|mapResourceReqt
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|reduceResourceReqt
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|numPendingReduces
init|=
literal|4
decl_stmt|;
name|float
name|maxReduceRampupLimit
init|=
literal|0.5f
decl_stmt|;
name|float
name|reduceSlowStart
init|=
literal|0.2f
decl_stmt|;
name|RMContainerAllocator
name|allocator
init|=
name|mock
argument_list|(
name|RMContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|scheduleReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyFloat
argument_list|()
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getSchedulerResourceTypes
argument_list|()
expr_stmt|;
comment|// Test slow-start
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify slow-start still in effect when no more maps need to
comment|// be scheduled but some have yet to complete
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
literal|0
argument_list|,
name|scheduledReduces
argument_list|,
name|totalMaps
operator|-
name|succeededMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|scheduleAllReduces
argument_list|()
expr_stmt|;
name|succeededMaps
operator|=
literal|3
expr_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Test reduce ramp-up
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|100
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|)
operator|.
name|rampUpReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test reduce ramp-down
name|scheduledReduces
operator|=
literal|3
expr_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
operator|*
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test reduce ramp-down for when there are scheduled maps
comment|// Since we have two scheduled Maps, rampDownReducers
comment|// should be invoked twice.
name|scheduledMaps
operator|=
literal|2
expr_stmt|;
name|assignedReduces
operator|=
literal|2
expr_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
operator|*
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|,
name|SchedulerResourceTypes
operator|.
name|CPU
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getSchedulerResourceTypes
argument_list|()
expr_stmt|;
comment|// Test ramp-down when enough memory but not enough cpu resource
name|scheduledMaps
operator|=
literal|10
expr_stmt|;
name|assignedReduces
operator|=
literal|0
expr_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|100
operator|*
literal|1024
argument_list|,
literal|5
operator|*
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test ramp-down when enough cpu but not enough memory resource
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getResourceLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|RecalculateContainerAllocator
specifier|private
specifier|static
class|class
name|RecalculateContainerAllocator
extends|extends
name|MyContainerAllocator
block|{
DECL|field|recalculatedReduceSchedule
specifier|public
name|boolean
name|recalculatedReduceSchedule
init|=
literal|false
decl_stmt|;
DECL|method|RecalculateContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job)
specifier|public
name|RecalculateContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleReduces (int totalMaps, int completedMaps, int scheduledMaps, int scheduledReduces, int assignedMaps, int assignedReduces, Resource mapResourceReqt, Resource reduceResourceReqt, int numPendingReduces, float maxReduceRampupLimit, float reduceSlowStart)
specifier|public
name|void
name|scheduleReduces
parameter_list|(
name|int
name|totalMaps
parameter_list|,
name|int
name|completedMaps
parameter_list|,
name|int
name|scheduledMaps
parameter_list|,
name|int
name|scheduledReduces
parameter_list|,
name|int
name|assignedMaps
parameter_list|,
name|int
name|assignedReduces
parameter_list|,
name|Resource
name|mapResourceReqt
parameter_list|,
name|Resource
name|reduceResourceReqt
parameter_list|,
name|int
name|numPendingReduces
parameter_list|,
name|float
name|maxReduceRampupLimit
parameter_list|,
name|float
name|reduceSlowStart
parameter_list|)
block|{
name|recalculatedReduceSchedule
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompletedTasksRecalculateSchedule ()
specifier|public
name|void
name|testCompletedTasksRecalculateSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testCompletedTasksRecalculateSchedule"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Make a node to register so as to launch the AM.
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|10
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getTotalMaps
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|10
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getTotalReduces
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getCompletedMaps
argument_list|()
expr_stmt|;
name|RecalculateContainerAllocator
name|allocator
init|=
operator|new
name|RecalculateContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|recalculatedReduceSchedule
operator|=
literal|false
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unexpected recalculate of reduce schedule"
argument_list|,
name|allocator
operator|.
name|recalculatedReduceSchedule
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getCompletedMaps
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected recalculate of reduce schedule"
argument_list|,
name|allocator
operator|.
name|recalculatedReduceSchedule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeartbeatHandler ()
specifier|public
name|void
name|testHeartbeatHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testHeartbeatHandler"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|AppContext
name|appContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerAllocator
name|allocator
init|=
operator|new
name|RMContainerAllocator
argument_list|(
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
argument_list|,
name|appContext
argument_list|,
operator|new
name|NoopAMPreemptionPolicy
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|heartbeat
parameter_list|()
throws|throws
name|Exception
block|{           }
block|}
decl_stmt|;
name|allocator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|start
argument_list|()
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|int
name|timeToWaitMs
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|5
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|=
literal|5000
expr_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|7
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|callbackCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|runOnNextHeartbeat
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callbackCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|=
literal|5000
expr_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|8
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|callbackCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompletedContainerEvent ()
specifier|public
name|void
name|testCompletedContainerEvent
parameter_list|()
block|{
name|RMContainerAllocator
name|allocator
init|=
operator|new
name|RMContainerAllocator
argument_list|(
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|NoopAMPreemptionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerStatus
name|abortedStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|)
decl_stmt|;
name|TaskAttemptEvent
name|event
init|=
name|allocator
operator|.
name|createContainerFinishedEvent
argument_list|(
name|status
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptEvent
name|abortedEvent
init|=
name|allocator
operator|.
name|createContainerFinishedEvent
argument_list|(
name|abortedStatus
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|abortedEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerStatus
name|status2
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerStatus
name|preemptedStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|PREEMPTED
argument_list|)
decl_stmt|;
name|TaskAttemptEvent
name|event2
init|=
name|allocator
operator|.
name|createContainerFinishedEvent
argument_list|(
name|status2
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|event2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptEvent
name|abortedEvent2
init|=
name|allocator
operator|.
name|createContainerFinishedEvent
argument_list|(
name|preemptedStatus
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|abortedEvent2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnregistrationOnlyIfRegistered ()
specifier|public
name|void
name|testUnregistrationOnlyIfRegistered
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|11264
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MRApp
name|mrApp
init|=
operator|new
name|MRApp
argument_list|(
name|appAttemptId
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|appAttemptId
argument_list|,
name|context
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|mrApp
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|amDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|mrApp
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|(
name|MyContainerAllocator
operator|)
name|mrApp
operator|.
name|getContainerAllocator
argument_list|()
decl_stmt|;
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|isApplicationMasterRegistered
argument_list|()
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|isUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Step-1 : AM send allocate request for 2 ContainerRequests and 1
comment|// blackListeNode
comment|// Step-2 : 2 containers are allocated by RM.
comment|// Step-3 : AM Send 1 containerRequest(event3) and 1 releaseRequests to
comment|// RM
comment|// Step-4 : On RM restart, AM(does not know RM is restarted) sends
comment|// additional containerRequest(event4) and blacklisted nodes.
comment|// Intern RM send resync command
comment|// Step-5 : On Resync,AM sends all outstanding
comment|// asks,release,blacklistAaddition
comment|// and another containerRequest(event5)
comment|// Step-6 : RM allocates containers i.e event3,event4 and cRequest5
annotation|@
name|Test
DECL|method|testRMContainerAllocatorResendsRequestsOnRMRestart ()
specifier|public
name|void
name|testRMContainerAllocatorResendsRequestsOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm1
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm1
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Step-1 : AM send allocate request for 2 ContainerRequests and 1
comment|// blackListeNode
comment|// create the container request
comment|// send MAP request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// Send events to blacklist h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
comment|// send allocate request and 1 blacklisted nodes
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assignedContainers
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assignedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Why ask is 3, not 4? --> ask from blacklisted node h2 is removed
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Step-2 : 2 containers are allocated by RM.
name|assignedContainers
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 2"
argument_list|,
literal|2
argument_list|,
name|assignedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assignedContainers
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assignedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
comment|// Step-3 : AM Send 1 containerRequest(event3) and 1 releaseRequests to
comment|// RM
comment|// send container request
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// send deallocate request
name|ContainerAllocatorEvent
name|deallocate1
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate1
argument_list|)
expr_stmt|;
name|assignedContainers
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assignedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
comment|// Phase-2 start 2nd RM is up
name|MyResourceManager
name|rm2
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|updateSchedulerProxy
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
comment|// NM should be rebooted on heartbeat, even first heartbeat for nm2
name|NodeHeartbeatResponse
name|hbResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// new NM to represent NM re-register
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Step-4 : On RM restart, AM(does not know RM is restarted) sends
comment|// additional containerRequest(event4) and blacklisted nodes.
comment|// Intern RM send resync command
comment|// send deallocate request, release=1
name|ContainerAllocatorEvent
name|deallocate2
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate2
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h3
name|ContainerFailedEvent
name|f2
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h3"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event4
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|2000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event4
argument_list|)
expr_stmt|;
comment|// send allocate request to 2nd RM and get resync command
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Step-5 : On Resync,AM sends all outstanding
comment|// asks,release,blacklistAaddition
comment|// and another containerRequest(event5)
name|ContainerRequestEvent
name|event5
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|5
argument_list|,
literal|3000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|,
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event5
argument_list|)
expr_stmt|;
comment|// send all outstanding request again.
name|assignedContainers
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Step-6 : RM allocates containers i.e event3,event4 and cRequest5
name|assignedContainers
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of container should be 3"
argument_list|,
literal|3
argument_list|,
name|assignedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assignedContainers
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Assigned count not correct"
argument_list|,
literal|"h1"
operator|.
name|equals
argument_list|(
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnsupportedMapContainerRequirement ()
specifier|public
name|void
name|testUnsupportedMapContainerRequirement
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Resource
name|maxContainerSupported
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|MockScheduler
name|mockScheduler
init|=
operator|new
name|MockScheduler
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|getMaxContainerCapability
parameter_list|()
block|{
return|return
name|maxContainerSupported
return|;
block|}
block|}
decl_stmt|;
name|ContainerRequestEvent
name|mapRequestEvt
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|maxContainerSupported
operator|.
name|getMemorySize
argument_list|()
operator|+
literal|10
argument_list|)
argument_list|,
name|maxContainerSupported
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mapRequestEvt
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnsupportedReduceContainerRequirement ()
specifier|public
name|void
name|testUnsupportedReduceContainerRequirement
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Resource
name|maxContainerSupported
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|MockScheduler
name|mockScheduler
init|=
operator|new
name|MockScheduler
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|getMaxContainerCapability
parameter_list|()
block|{
return|return
name|maxContainerSupported
return|;
block|}
block|}
decl_stmt|;
name|ContainerRequestEvent
name|reduceRequestEvt
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|maxContainerSupported
operator|.
name|getMemorySize
argument_list|()
operator|+
literal|10
argument_list|)
argument_list|,
name|maxContainerSupported
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reduceRequestEvt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reducer container requests are added to the pending queue upon request,
comment|// schedule all reducers here so that we can observe if reducer requests
comment|// are accepted by RMContainerAllocator on RM side.
name|allocator
operator|.
name|scheduleAllReduces
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMUnavailable ()
specifier|public
name|void
name|testRMUnavailable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_WAIT_INTERVAL_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm1
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator2
name|allocator
init|=
operator|new
name|MyContainerAllocator2
argument_list|(
name|rm1
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|jobEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should Have Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMContainerAllocationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Could not contact RM after"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should Have 1 Job Event"
argument_list|,
literal|1
argument_list|,
name|allocator
operator|.
name|jobEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JobEvent
name|event
init|=
name|allocator
operator|.
name|jobEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should Reboot"
argument_list|,
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMTokenUpdate ()
specifier|public
name|void
name|testAMRMTokenUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testAMRMTokenUpdate"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rmAddr
init|=
literal|"somermaddress:1234"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AMRMTokenSecretManager
name|secretMgr
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|oldToken
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app should have a token"
argument_list|,
name|oldToken
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|testUgi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someuser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newToken
init|=
name|testUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Keep heartbeating until RM thinks the token has been updated
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|currentToken
init|=
name|oldToken
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentToken
operator|==
name|oldToken
condition|)
block|{
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
operator|>
literal|20000
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Took to long to see AMRM token change"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|currentToken
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
expr_stmt|;
block|}
return|return
name|currentToken
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// verify there is only one AMRM token in the UGI and it matches the
comment|// updated token from the RM
name|int
name|tokenCount
init|=
literal|0
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|ugiToken
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|testUgi
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|AMRMTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
name|ugiToken
operator|=
name|token
expr_stmt|;
operator|++
name|tokenCount
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"too many AMRM tokens"
argument_list|,
literal|1
argument_list|,
name|tokenCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"token identifier not updated"
argument_list|,
name|newToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|ugiToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"token password not updated"
argument_list|,
name|newToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|ugiToken
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AMRM token service not updated"
argument_list|,
operator|new
name|Text
argument_list|(
name|rmAddr
argument_list|)
argument_list|,
name|ugiToken
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentTaskLimitsDisabledIfSmaller ()
specifier|public
name|void
name|testConcurrentTaskLimitsDisabledIfSmaller
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MAP_COUNT
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|REDUCE_COUNT
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|MAP_LIMIT
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|REDUCE_LIMIT
init|=
literal|1
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_MAP_LIMIT
argument_list|,
name|MAP_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_REDUCE_LIMIT
argument_list|,
name|REDUCE_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MAP_COUNT
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REDUCE_COUNT
argument_list|)
expr_stmt|;
specifier|final
name|MockScheduler
name|mockScheduler
init|=
operator|new
name|MockScheduler
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setRequestLimit
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"setRequestLimit() should not be invoked"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// create some map requests
name|ContainerRequestEvent
index|[]
name|reqMapEvents
init|=
operator|new
name|ContainerRequestEvent
index|[
name|MAP_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqMapEvents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|reqMapEvents
index|[
name|i
index|]
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h"
operator|+
name|i
block|}
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqMapEvents
argument_list|)
argument_list|)
expr_stmt|;
comment|// create some reduce requests
name|ContainerRequestEvent
index|[]
name|reqReduceEvents
init|=
operator|new
name|ContainerRequestEvent
index|[
name|REDUCE_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqReduceEvents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|reqReduceEvents
index|[
name|i
index|]
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqReduceEvents
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentTaskLimits ()
specifier|public
name|void
name|testConcurrentTaskLimits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MAP_COUNT
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|REDUCE_COUNT
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|MAP_LIMIT
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|REDUCE_LIMIT
init|=
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testConcurrentTaskLimits"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_MAP_LIMIT
argument_list|,
name|MAP_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_REDUCE_LIMIT
argument_list|,
name|REDUCE_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MAP_COUNT
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REDUCE_COUNT
argument_list|)
expr_stmt|;
specifier|final
name|MockScheduler
name|mockScheduler
init|=
operator|new
name|MockScheduler
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|ApplicationMasterProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mockScheduler
return|;
block|}
block|}
decl_stmt|;
comment|// create some map requests
name|ContainerRequestEvent
index|[]
name|reqMapEvents
init|=
operator|new
name|ContainerRequestEvent
index|[
name|MAP_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqMapEvents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|reqMapEvents
index|[
name|i
index|]
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h"
operator|+
name|i
block|}
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqMapEvents
argument_list|)
argument_list|)
expr_stmt|;
comment|// create some reduce requests
name|ContainerRequestEvent
index|[]
name|reqReduceEvents
init|=
operator|new
name|ContainerRequestEvent
index|[
name|REDUCE_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqReduceEvents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|reqReduceEvents
index|[
name|i
index|]
operator|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reqReduceEvents
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// verify all of the host-specific asks were sent plus one for the
comment|// default rack and one for the ANY request
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reqMapEvents
operator|.
name|length
operator|+
literal|2
argument_list|,
name|mockScheduler
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify AM is only asking for the map limit overall
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MAP_LIMIT
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// assign a map task and verify we do not ask for any more maps
name|ContainerId
name|cid0
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h0"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// complete the map task and verify that we ask for one more
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid0
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// assign three more maps and verify we ask for no more maps
name|ContainerId
name|cid1
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ContainerId
name|cid3
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h3"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// complete two containers and verify we only asked for one more
comment|// since at that point all maps should be scheduled/completed
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid2
argument_list|)
expr_stmt|;
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid3
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// allocate the last container and complete the first one
comment|// and verify there are no more map asks.
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid1
argument_list|)
expr_stmt|;
name|ContainerId
name|cid4
init|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h4"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// complete the last map
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskMap
argument_list|)
expr_stmt|;
comment|// verify only reduce limit being requested
name|Assert
operator|.
name|assertEquals
argument_list|(
name|REDUCE_LIMIT
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
comment|// assign a reducer and verify ask goes to zero
name|cid0
operator|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
comment|// complete the reducer and verify we ask for another
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid0
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
comment|// assign a reducer and verify ask goes to zero
name|cid0
operator|=
name|mockScheduler
operator|.
name|assignContainer
argument_list|(
literal|"h0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
comment|// complete the reducer and verify no more reducers
name|mockScheduler
operator|.
name|completeContainer
argument_list|(
name|cid0
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockScheduler
operator|.
name|lastAnyAskReduce
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RMContainerAllocationException
operator|.
name|class
argument_list|)
DECL|method|testAttemptNotFoundCausesRMCommunicatorException ()
specifier|public
name|void
name|testAttemptNotFoundCausesRMCommunicatorException
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Now kill the application
name|rm
operator|.
name|killApp
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateAskOnRampDownAllReduces ()
specifier|public
name|void
name|testUpdateAskOnRampDownAllReduces
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testUpdateAskOnRampDownAllReduces"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|1260
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Use a controlled clock to advance time for test.
name|ControlledClock
name|clock
init|=
operator|(
name|ControlledClock
operator|)
name|allocator
operator|.
name|getContext
argument_list|()
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register nodes to RM.
name|MockNM
name|nodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Request 2 maps and 1 reducer(sone on nodes which are not registered).
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// This will tell the scheduler about the requests but there will be no
comment|// allocations as nodes are not added.
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Advance clock so that maps can be considered as hanging.
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|500000L
argument_list|)
expr_stmt|;
comment|// Request for another reducer on h3 which has not registered.
name|ContainerRequestEvent
name|event4
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Update resources in scheduler through node heartbeat from h1.
name|nodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// One map is assigned.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send deallocate request for map so that no maps are assigned after this.
name|ContainerAllocatorEvent
name|deallocate
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate
argument_list|)
expr_stmt|;
comment|// Now one reducer should be scheduled and one should be pending.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getNumOfPendingReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|// No map should be assigned and one should be scheduled.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|allocator
operator|.
name|getAsk
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|allocator
operator|.
name|getAsk
argument_list|()
control|)
block|{
name|boolean
name|isReduce
init|=
name|req
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReduce
condition|)
block|{
comment|// 1 reducer each asked on h2, * and default-rack
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h2"
argument_list|)
operator|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//map
comment|// 0 mappers asked on h1 and 1 each on * and default-rack
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|1
operator|)
operator|||
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h1"
argument_list|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// On next allocate request to scheduler, headroom reported will be 0.
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// After allocate response from scheduler, all scheduled reduces are ramped
comment|// down and move to pending. 3 asks are also updated with 0 containers to
comment|// indicate ramping down of reduces to scheduler.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocator
operator|.
name|getNumOfPendingReduces
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocator
operator|.
name|getAsk
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|allocator
operator|.
name|getAsk
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|,
name|req
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * MAPREDUCE-6771. Test if RMContainerAllocator generates the events in the    * right order while processing finished containers.    */
annotation|@
name|Test
DECL|method|testHandlingFinishedContainers ()
specifier|public
name|void
name|testHandlingFinishedContainers
parameter_list|()
block|{
name|EventHandler
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|RunningAppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ControlledClock
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ClusterInfo
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|RMContainerAllocator
name|containerAllocator
init|=
operator|new
name|RMContainerAllocatorForFinishedContainer
argument_list|(
literal|null
argument_list|,
name|context
argument_list|,
name|mock
argument_list|(
name|AMPreemptionPolicy
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerStatus
name|finishedContainer
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerAllocator
operator|.
name|processFinishedContainer
argument_list|(
name|finishedContainer
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|eventHandler
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|eventHandler
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|TaskAttemptDiagnosticsUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|eventHandler
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|TaskAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verifyNoMoreInteractions
argument_list|()
expr_stmt|;
block|}
DECL|class|RMContainerAllocatorForFinishedContainer
specifier|private
specifier|static
class|class
name|RMContainerAllocatorForFinishedContainer
extends|extends
name|RMContainerAllocator
block|{
DECL|method|RMContainerAllocatorForFinishedContainer (ClientService clientService, AppContext context, AMPreemptionPolicy preemptionPolicy)
specifier|public
name|RMContainerAllocatorForFinishedContainer
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|,
name|AMPreemptionPolicy
name|preemptionPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|,
name|preemptionPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createAssignedRequests ()
specifier|protected
name|AssignedRequests
name|createAssignedRequests
parameter_list|()
block|{
name|AssignedRequests
name|assignedReqs
init|=
name|mock
argument_list|(
name|AssignedRequests
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttempt
init|=
name|mock
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|assignedReqs
operator|.
name|get
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskAttempt
argument_list|)
expr_stmt|;
return|return
name|assignedReqs
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAvoidAskMoreReducersWhenReducerPreemptionIsRequired ()
specifier|public
name|void
name|testAvoidAskMoreReducersWhenReducerPreemptionIsRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|1260
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Use a controlled clock to advance time for test.
name|ControlledClock
name|clock
init|=
operator|(
name|ControlledClock
operator|)
name|allocator
operator|.
name|getContext
argument_list|()
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register nodes to RM.
name|MockNM
name|nodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Request 2 maps and 1 reducer(sone on nodes which are not registered).
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// This will tell the scheduler about the requests but there will be no
comment|// allocations as nodes are not added.
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Advance clock so that maps can be considered as hanging.
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|500000L
argument_list|)
expr_stmt|;
comment|// Request for another reducer on h3 which has not registered.
name|ContainerRequestEvent
name|event4
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Update resources in scheduler through node heartbeat from h1.
name|nodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// One map is assigned.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send deallocate request for map so that no maps are assigned after this.
name|ContainerAllocatorEvent
name|deallocate
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate
argument_list|)
expr_stmt|;
comment|// Now one reducer should be scheduled and one should be pending.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getNumOfPendingReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|// No map should be assigned and one should be scheduled.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|allocator
operator|.
name|getAsk
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|allocator
operator|.
name|getAsk
argument_list|()
control|)
block|{
name|boolean
name|isReduce
init|=
name|req
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReduce
condition|)
block|{
comment|// 1 reducer each asked on h2, * and default-rack
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h2"
argument_list|)
operator|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//map
comment|// 0 mappers asked on h1 and 1 each on * and default-rack
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|1
operator|)
operator|||
operator|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h1"
argument_list|)
operator|&&
name|req
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|500000L
operator|+
literal|10
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// On next allocate request to scheduler, headroom reported will be 2048.
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// After allocate response from scheduler, all scheduled reduces are ramped
comment|// down and move to pending. 3 asks are also updated with 0 containers to
comment|// indicate ramping down of reduces to scheduler.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocator
operator|.
name|getNumOfPendingReduces
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocator
operator|.
name|getAsk
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|allocator
operator|.
name|getAsk
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|,
name|req
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/default-rack"
argument_list|)
operator|||
name|req
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests whether scheduled reducers are excluded from headroom while    * calculating headroom.    */
annotation|@
name|Test
DECL|method|testExcludeSchedReducesFromHeadroom ()
specifier|public
name|void
name|testExcludeSchedReducesFromHeadroom
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testExcludeSchedReducesFromHeadroom"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|1260
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|TaskAttempt
name|mockTaskAttempt
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTask
argument_list|(
operator|(
name|TaskId
operator|)
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTask
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|getAttempt
argument_list|(
operator|(
name|TaskAttemptId
operator|)
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTaskAttempt
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0.01f
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Register nodes to RM.
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Request 2 maps and 1 reducer(sone on nodes which are not registered).
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// This will tell the scheduler about the requests but there will be no
comment|// allocations as nodes are not added.
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Request for another reducer on h3 which has not registered.
name|ContainerRequestEvent
name|event4
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Update resources in scheduler through node heartbeat from h1.
name|nodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Two maps are assigned.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send deallocate request for map so that no maps are assigned after this.
name|ContainerAllocatorEvent
name|deallocate1
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate1
argument_list|)
expr_stmt|;
name|ContainerAllocatorEvent
name|deallocate2
init|=
name|createDeallocateEvent
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendDeallocate
argument_list|(
name|deallocate2
argument_list|)
expr_stmt|;
comment|// No map should be assigned.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// h2 heartbeats.
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Send request for one more mapper.
name|ContainerRequestEvent
name|event5
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|5
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event5
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// One reducer is assigned and one map is scheduled
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getScheduledRequests
argument_list|()
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Headroom enough to run a mapper if headroom is taken as it is but wont be
comment|// enough if scheduled reducers resources are deducted.
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|forceResourceLimit
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1260
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// After allocate response, the one assigned reducer is preempted and killed
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MyContainerAllocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerAllocator
operator|.
name|RAMPDOWN_DIAGNOSTIC
argument_list|,
name|MyContainerAllocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getNumOfPendingReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockScheduler
specifier|private
specifier|static
class|class
name|MockScheduler
implements|implements
name|ApplicationMasterProtocol
block|{
DECL|field|attemptId
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|field|nextContainerId
name|long
name|nextContainerId
init|=
literal|10
decl_stmt|;
DECL|field|lastAsk
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|lastAsk
init|=
literal|null
decl_stmt|;
DECL|field|lastAnyAskMap
name|int
name|lastAnyAskMap
init|=
literal|0
decl_stmt|;
DECL|field|lastAnyAskReduce
name|int
name|lastAnyAskReduce
init|=
literal|0
decl_stmt|;
DECL|field|containersToComplete
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containersToComplete
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containersToAllocate
name|List
argument_list|<
name|Container
argument_list|>
name|containersToAllocate
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MockScheduler (ApplicationAttemptId attemptId)
specifier|public
name|MockScheduler
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|RegisterApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512000
argument_list|,
literal|1024
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|ApplicationAccessType
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"fake_key"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|Container
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|"default"
argument_list|,
name|Collections
operator|.
expr|<
name|NMToken
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|lastAsk
operator|=
name|request
operator|.
name|getAskList
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|lastAsk
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|Priority
name|priority
init|=
name|req
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|.
name|equals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_MAP
argument_list|)
condition|)
block|{
name|lastAnyAskMap
operator|=
name|req
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|priority
operator|.
name|equals
argument_list|(
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
argument_list|)
condition|)
block|{
name|lastAnyAskReduce
operator|=
name|req
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|AllocateResponse
name|response
init|=
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
argument_list|,
name|containersToComplete
argument_list|,
name|containersToAllocate
argument_list|,
name|Collections
operator|.
expr|<
name|NodeReport
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512000
argument_list|,
literal|1024
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|NMToken
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|// RM will always ensure that a default priority is sent to AM
name|response
operator|.
name|setApplicationPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|containersToComplete
operator|.
name|clear
argument_list|()
expr_stmt|;
name|containersToAllocate
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|assignContainer (String nodeName, boolean isReduce)
specifier|public
name|ContainerId
name|assignContainer
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|boolean
name|isReduce
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|nextContainerId
operator|++
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|isReduce
condition|?
name|RMContainerAllocator
operator|.
name|PRIORITY_REDUCE
else|:
name|RMContainerAllocator
operator|.
name|PRIORITY_MAP
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
name|nodeName
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|nodeName
operator|+
literal|":5678"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|containersToAllocate
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|completeContainer (ContainerId containerId)
specifier|public
name|void
name|completeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|containersToComplete
operator|.
name|add
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MockSchedulerForTimelineCollector
specifier|private
specifier|static
class|class
name|MockSchedulerForTimelineCollector
implements|implements
name|ApplicationMasterProtocol
block|{
DECL|field|collectorInfo
name|CollectorInfo
name|collectorInfo
decl_stmt|;
DECL|method|MockSchedulerForTimelineCollector (CollectorInfo info)
specifier|public
name|MockSchedulerForTimelineCollector
parameter_list|(
name|CollectorInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|collectorInfo
operator|=
name|info
expr_stmt|;
block|}
DECL|method|updateCollectorInfo (CollectorInfo info)
name|void
name|updateCollectorInfo
parameter_list|(
name|CollectorInfo
name|info
parameter_list|)
block|{
name|collectorInfo
operator|=
name|info
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AllocateResponse
name|response
init|=
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerStatus
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Container
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|NodeReport
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512000
argument_list|,
literal|1024
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|NMToken
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCollectorInfo
argument_list|(
name|collectorInfo
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRMContainerAllocator
name|t
init|=
operator|new
name|TestRMContainerAllocator
argument_list|()
decl_stmt|;
name|t
operator|.
name|testSimple
argument_list|()
expr_stmt|;
name|t
operator|.
name|testResource
argument_list|()
expr_stmt|;
name|t
operator|.
name|testMapReduceScheduling
argument_list|()
expr_stmt|;
name|t
operator|.
name|testReportedAppProgress
argument_list|()
expr_stmt|;
name|t
operator|.
name|testReportedAppProgressWithOnlyMaps
argument_list|()
expr_stmt|;
name|t
operator|.
name|testBlackListedNodes
argument_list|()
expr_stmt|;
name|t
operator|.
name|testCompletedTasksRecalculateSchedule
argument_list|()
expr_stmt|;
name|t
operator|.
name|testAMRMTokenUpdate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

